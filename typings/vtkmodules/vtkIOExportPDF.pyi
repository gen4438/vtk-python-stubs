"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkIOExport as __vtkmodules_vtkIOExport
import vtkmodules.vtkRenderingContext2D as __vtkmodules_vtkRenderingContext2D

class vtkPDFContextDevice2D(__vtkmodules_vtkRenderingContext2D.vtkContextDevice2D):
    """
    vtkPDFContextDevice2D - vtkContextDevice2D implementation for use
    with vtkPDFExporter.
    
    Superclass: vtkContextDevice2D
    
    Quirks:
    - Libharu does not support RGBA images. If an alpha channel is
      present in any drawn images, it will be blended into an opaque
      background filled with the active Brush color to produce a flat RGB
    image.
    """
    def ComputeJustifiedStringBounds(self, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeJustifiedStringBounds(string, [float, float, float,
            float])
        C++: void ComputeJustifiedStringBounds(const char *string,
            float bounds[4]) override;
        
        Compute the bounds of the supplied string while taking into
        account the justification of the currently applied text property.
        Simple rotations (0, 90, 180, 270) are also correctly taken into
        account.
        """
        ...
    
    def ComputeStringBounds(self, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeStringBounds(string, [float, float, float, float])
        C++: void ComputeStringBounds(const vtkStdString &string,
            float bounds[4]) override;
        V.ComputeStringBounds(unicode, [float, float, float, float])
        C++: void ComputeStringBounds(const vtkUnicodeString &string,
            float bounds[4]) override;
        
        Compute the bounds of the supplied string. The bounds will be
        copied to the supplied bounds variable, the first two elements
        are the bottom corner of the string, and the second two elements
        are the width and height of the bounding box. NOTE: This function
        does not take account of the text rotation or justification.
        """
        ...
    
    def DrawColoredPolygon(self, *float, **kwargs):
        """
        V.DrawColoredPolygon([float, ...], int, [int, ...], int)
        C++: void DrawColoredPolygon(float *points, int numPoints,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        """
        ...
    
    def DrawEllipseWedge(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5, p_float_6, p_float_7):
        """
        V.DrawEllipseWedge(float, float, float, float, float, float,
            float, float)
        C++: void DrawEllipseWedge(float x, float y, float outRx,
            float outRy, float inRx, float inRy, float startAngle,
            float stopAngle) override;
        
        Draw an elliptic wedge with center at x, y, outer radii outRx,
        outRy, inner radii inRx, inRy between angles startAngle and
        stopAngle (expressed in degrees).
        \pre positive_outRx: outRx>=0
        \pre positive_outRy: outRy>=0
        \pre positive_inRx: inRx>=0
        \pre positive_inRy: inRy>=0
        \pre ordered_rx: inRx<=outRx
        \pre ordered_ry: inRy<=outRy
        """
        ...
    
    def DrawEllipticArc(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.DrawEllipticArc(float, float, float, float, float, float)
        C++: void DrawEllipticArc(float x, float y, float rX, float rY,
            float startAngle, float stopAngle) override;
        
        Draw an elliptic arc with center at x,y with radii rX and rY
        between angles startAngle and stopAngle (expressed in degrees).
        \pre positive_rX: rX>=0
        \pre positive_rY: rY>=0
        """
        ...
    
    def DrawImage(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.DrawImage([float, float], float, vtkImageData)
        C++: void DrawImage(float p[2], float scale, vtkImageData *image)
            override;
        V.DrawImage(vtkRectf, vtkImageData)
        C++: void DrawImage(const vtkRectf &pos, vtkImageData *image)
            override;
        
        Draw the supplied image at the given x, y (p[0], p[1]) (bottom
        corner), scaled by scale (1.0 would match the image).
        """
        ...
    
    def DrawLines(self, *float, **kwargs):
        """
        V.DrawLines([float, ...], int, [int, ...], int)
        C++: void DrawLines(float *f, int n,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        
        Draw lines using the points - memory layout is as follows:
        l1p1,l1p2,l2p1,l2p2... The lines will be colored by colors array
        which has nc_comps components (defining a single color).
        \sa DrawPoly()
        """
        ...
    
    def DrawMarkers(self, p_int, bool, *float, **kwargs):
        """
        V.DrawMarkers(int, bool, [float, ...], int, [int, ...], int)
        C++: void DrawMarkers(int shape, bool highlight, float *points,
            int n, unsigned char *colors=nullptr, int nc_comps=0)
            override;
        
        Draw a series of markers centered at the points supplied. The
        shape argument controls the marker shape, and can be one of
        - VTK_MARKER_CROSS
        - VTK_MARKER_PLUS
        - VTK_MARKER_SQUARE
        - VTK_MARKER_CIRCLE
        - VTK_MARKER_DIAMOND
        \param colors is an optional array of colors.
        \param nc_comps is the number of components for the color.
        """
        ...
    
    def DrawMathTextString(self, *float, **kwargs):
        """
        V.DrawMathTextString([float, ...], string)
        C++: void DrawMathTextString(float *point,
            const vtkStdString &str) override;
        
        Draw text using MathText markup for mathematical equations. See
        http://matplotlib.sourceforge.net/users/mathtext.html for more
        information.
        """
        ...
    
    def DrawPoints(self, *float, **kwargs):
        """
        V.DrawPoints([float, ...], int, [int, ...], int)
        C++: void DrawPoints(float *points, int n,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        
        Draw a series of points - fastest code path due to memory layout
        of the coordinates. The colors and nc_comps are optional - color
        array.
        """
        ...
    
    def DrawPointSprites(self, vtkImageData, *float, **kwargs):
        """
        V.DrawPointSprites(vtkImageData, [float, ...], int, [int, ...],
            int)
        C++: void DrawPointSprites(vtkImageData *sprite, float *points,
            int n, unsigned char *colors=nullptr, int nc_comps=0)
            override;
        
        Draw a series of point sprites, images centred at the points
        supplied. The supplied vtkImageData is the sprite to be drawn,
        only squares will be drawn and the size is set using
        SetPointSize.
        \param colors is an optional array of colors.
        \param nc_comps is the number of components for the color.
        """
        ...
    
    def DrawPoly(self, *float, **kwargs):
        """
        V.DrawPoly([float, ...], int, [int, ...], int)
        C++: void DrawPoly(float *points, int n,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        
        Draw a poly line using the points - fastest code path due to
        memory layout of the coordinates. The line will be colored by the
        colors array, which must be have nc_comps components (defining a
        single color).
        \sa DrawLines()
        """
        ...
    
    def DrawPolyData(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.DrawPolyData([float, float], float, vtkPolyData,
            vtkUnsignedCharArray, int)
        C++: void DrawPolyData(float p[2], float scale,
            vtkPolyData *polyData, vtkUnsignedCharArray *colors,
            int scalarMode) override;
        
        Draw the supplied PolyData at the given x, y (p[0], p[1]) (bottom
        corner), scaled by scale (1.0 would match the actual dataset).
        
        Only lines and polys are rendered. Only the x/y coordinates of
        the polydata are used.
        
        @param p Offset to apply to polydata.
        @param scale Isotropic scale for polydata. Applied after offset.
        @param polyData Draw lines and polys from this dataset.
        @param colors RGBA for points or cells, depending on value of
            scalarMode.
        Must not be NULL.
        @param scalarMode Must be either VTK_SCALAR_MODE_USE_POINT_DATA
            or
        VTK_SCALAR_MODE_USE_CELL_DATA.
        
        The base implementation breaks the polydata apart and renders
        each polygon individually using the device API. Subclasses should
        override this method with a batch-drawing implementation if
        performance is a concern.
        """
        ...
    
    def DrawPolygon(self, *float, **kwargs):
        """
        V.DrawPolygon([float, ...], int)
        C++: void DrawPolygon(float *, int) override;
        """
        ...
    
    def DrawQuad(self, *float, **kwargs):
        """
        V.DrawQuad([float, ...], int)
        C++: void DrawQuad(float *, int) override;
        
        Draw a quad using the specified number of points.
        """
        ...
    
    def DrawQuadStrip(self, *float, **kwargs):
        """
        V.DrawQuadStrip([float, ...], int)
        C++: void DrawQuadStrip(float *, int) override;
        
        Draw a quad using the specified number of points.
        """
        ...
    
    def DrawString(self, *float, **kwargs):
        """
        V.DrawString([float, ...], string)
        C++: void DrawString(float *point, const vtkStdString &string)
            override;
        V.DrawString([float, ...], unicode)
        C++: void DrawString(float *point, const vtkUnicodeString &string)
             override;
        
        Draw some text to the screen.
        """
        ...
    
    def EnableClipping(self, bool):
        """
        V.EnableClipping(bool)
        C++: void EnableClipping(bool enable) override;
        
        Enable or disable the clipping of the scene.
        """
        ...
    
    def GetMatrix(self, vtkMatrix3x3):
        """
        V.GetMatrix(vtkMatrix3x3)
        C++: void GetMatrix(vtkMatrix3x3 *m) override;
        
        Set the model view matrix for the display
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MultiplyMatrix(self, vtkMatrix3x3):
        """
        V.MultiplyMatrix(vtkMatrix3x3)
        C++: void MultiplyMatrix(vtkMatrix3x3 *m) override;
        
        Multiply the current model view matrix by the supplied one
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPDFContextDevice2D
        C++: vtkPDFContextDevice2D *NewInstance()
        """
        ...
    
    def PopMatrix(self):
        """
        V.PopMatrix()
        C++: void PopMatrix() override;
        
        Pop the current matrix off of the stack.
        """
        ...
    
    def PushMatrix(self):
        """
        V.PushMatrix()
        C++: void PushMatrix() override;
        
        Push the current matrix onto the stack.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPDFContextDevice2D
        C++: static vtkPDFContextDevice2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClipping(self, *int):
        """
        V.SetClipping([int, ...])
        C++: void SetClipping(int *x) override;
        
        Supply an int array of length 4 with x1, y1, width, height
        specifying clipping region for the device in pixels.
        """
        ...
    
    def SetColor4(self, p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetColor4([int, int, int, int])
        C++: void SetColor4(unsigned char color[4]) override;
        
        Set the color for the device using unsigned char of length 4,
        RGBA.
        """
        ...
    
    def SetHaruObjects(self, void, void_1):
        """
        V.SetHaruObjects(void, void)
        C++: void SetHaruObjects(void *doc, void *page)
        
        Set the HPDF_Doc and HPDF_Page to use while exporting the scene.
        The type is void* to keep the libharu opaque types from leaking
        into headers. This function expects HPDF_Document* and HPDF_Page*
        as the arguments.
        """
        ...
    
    def SetLineType(self, p_int):
        """
        V.SetLineType(int)
        C++: void SetLineType(int type) override;
        
        Set the line type type (using anonymous enum in vtkPen).
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: void SetLineWidth(float width) override;
        
        Set the line width.
        """
        ...
    
    def SetMatrix(self, vtkMatrix3x3):
        """
        V.SetMatrix(vtkMatrix3x3)
        C++: void SetMatrix(vtkMatrix3x3 *m) override;
        
        Set the model view matrix for the display
        """
        ...
    
    def SetPointSize(self, p_float):
        """
        V.SetPointSize(float)
        C++: void SetPointSize(float size) override;
        
        Set the point size for glyphs/sprites.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *)
        """
        ...
    
    def SetTexture(self, vtkImageData, p_int):
        """
        V.SetTexture(vtkImageData, int)
        C++: void SetTexture(vtkImageData *image, int properties)
            override;
        
        Set the texture for the device, it is used to fill the polygons
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPDFExporter(__vtkmodules_vtkIOExport.vtkExporter):
    """
    vtkPDFExporter - Exports vtkContext2D scenes to PDF.
    
    Superclass: vtkExporter
    
    This exporter draws context2D scenes into a PDF file.
    
    If ActiveRenderer is specified then it exports contents of
    ActiveRenderer. Otherwise it exports contents of all renderers.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPDFExporter
        C++: vtkPDFExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPDFExporter
        C++: static vtkPDFExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
