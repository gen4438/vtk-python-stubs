"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMotionFXCFGReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkMotionFXCFGReader - reader for MotionFX motion definitions cfg
    files.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    MotionFX files comprise of `motion`s for a collection of STL files.
    The motions define the transformations to apply to STL geometry to
    emulate motion like translation, rotation, planetary motion, etc.
    
    This reader reads such a CFG file and produces a temporal output for
    the time range defined in the file. The resolution of time can be
    controlled using the `SetTimeResolution` method. The output is a
    multiblock dataset with blocks for each of bodies, identified by an
    STL file, in the cfg file.
    
    The reader uses PEGTL (https://github.com/taocpp/PEGTL) to define and
    parse the grammar for the CFG file.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: const char *GetFileName()
        
        Get/Set the filename.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTimeResolution(self):
        """
        V.GetTimeResolution() -> int
        C++: virtual int GetTimeResolution()
        
        Get/Set the time resolution for timesteps produced by the reader.
        """
        ...
    
    def GetTimeResolutionMaxValue(self):
        """
        V.GetTimeResolutionMaxValue() -> int
        C++: virtual int GetTimeResolutionMaxValue()
        
        Get/Set the time resolution for timesteps produced by the reader.
        """
        ...
    
    def GetTimeResolutionMinValue(self):
        """
        V.GetTimeResolutionMinValue() -> int
        C++: virtual int GetTimeResolutionMinValue()
        
        Get/Set the time resolution for timesteps produced by the reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMotionFXCFGReader
        C++: vtkMotionFXCFGReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMotionFXCFGReader
        C++: static vtkMotionFXCFGReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fname)
        
        Get/Set the filename.
        """
        ...
    
    def SetTimeResolution(self, p_int):
        """
        V.SetTimeResolution(int)
        C++: virtual void SetTimeResolution(int _arg)
        
        Get/Set the time resolution for timesteps produced by the reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
