"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkImagingCore as __vtkmodules_vtkImagingCore

class vtkImageStencil(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageStencil - combine images via a cookie-cutter operation
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageStencil will combine two images together using a stencil. The
    stencil should be provided in the form of a vtkImageStencilData,
    """
    def GetBackgroundColor(self):
        """
        V.GetBackgroundColor() -> (float, float, float, float)
        C++: virtual double *GetBackgroundColor()
        
        Set the default color to use when the second input is not set.
        This is like SetBackgroundValue, but for multi-component images.
        """
        ...
    
    def GetBackgroundInput(self):
        """
        V.GetBackgroundInput() -> vtkImageData
        C++: vtkImageData *GetBackgroundInput()
        
        Set the second input.  This image will be used for the 'outside'
        of the stencil.  If not set, the output voxels will be filled
        with BackgroundValue instead.
        """
        ...
    
    def GetBackgroundValue(self):
        """
        V.GetBackgroundValue() -> float
        C++: double GetBackgroundValue()
        
        Set the default output value to use when the second input is not
        set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReverseStencil(self):
        """
        V.GetReverseStencil() -> int
        C++: virtual vtkTypeBool GetReverseStencil()
        
        Reverse the stencil.
        """
        ...
    
    def GetStencil(self):
        """
        V.GetStencil() -> vtkImageStencilData
        C++: vtkImageStencilData *GetStencil()
        
        Specify the stencil to use.  The stencil can be created from a
        vtkImplicitFunction or a vtkPolyData. This function does not
        setup a pipeline connection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageStencil
        C++: vtkImageStencil *NewInstance()
        """
        ...
    
    def ReverseStencilOff(self):
        """
        V.ReverseStencilOff()
        C++: virtual void ReverseStencilOff()
        
        Reverse the stencil.
        """
        ...
    
    def ReverseStencilOn(self):
        """
        V.ReverseStencilOn()
        C++: virtual void ReverseStencilOn()
        
        Reverse the stencil.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageStencil
        C++: static vtkImageStencil *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBackgroundColor(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetBackgroundColor(float, float, float, float)
        C++: virtual void SetBackgroundColor(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetBackgroundColor((float, float, float, float))
        C++: virtual void SetBackgroundColor(const double _arg[4])
        
        Set the default color to use when the second input is not set.
        This is like SetBackgroundValue, but for multi-component images.
        """
        ...
    
    def SetBackgroundInputData(self, vtkImageData):
        """
        V.SetBackgroundInputData(vtkImageData)
        C++: virtual void SetBackgroundInputData(vtkImageData *input)
        
        Set the second input.  This image will be used for the 'outside'
        of the stencil.  If not set, the output voxels will be filled
        with BackgroundValue instead.
        """
        ...
    
    def SetBackgroundValue(self, p_float):
        """
        V.SetBackgroundValue(float)
        C++: void SetBackgroundValue(double val)
        
        Set the default output value to use when the second input is not
        set.
        """
        ...
    
    def SetReverseStencil(self, p_int):
        """
        V.SetReverseStencil(int)
        C++: virtual void SetReverseStencil(vtkTypeBool _arg)
        
        Reverse the stencil.
        """
        ...
    
    def SetStencilConnection(self, vtkAlgorithmOutput):
        """
        V.SetStencilConnection(vtkAlgorithmOutput)
        C++: void SetStencilConnection(vtkAlgorithmOutput *outputPort)
        
        Specify the stencil to use. This sets up a pipeline connection.
        """
        ...
    
    def SetStencilData(self, vtkImageStencilData):
        """
        V.SetStencilData(vtkImageStencilData)
        C++: virtual void SetStencilData(vtkImageStencilData *stencil)
        
        Specify the stencil to use.  The stencil can be created from a
        vtkImplicitFunction or a vtkPolyData. This function does not
        setup a pipeline connection.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageStencilToImage(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageStencilToImage - Convert an image stencil into an image
    
    Superclass: vtkImageAlgorithm
    
    vtkImageStencilToImage will convert an image stencil into a binary
    image.  The default output will be an 8-bit image with a value of 1
    inside the stencil and 0 outside.  When used in combination with
    vtkPolyDataToImageStencil or vtkImplicitFunctionToImageStencil, this
    can be used to create a binary image from a mesh or a function.
    @sa
    vtkImplicitModeller
    """
    def GetInsideValue(self):
        """
        V.GetInsideValue() -> float
        C++: virtual double GetInsideValue()
        
        The value to use inside the stencil.  The default is 1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def GetOutsideValue(self):
        """
        V.GetOutsideValue() -> float
        C++: virtual double GetOutsideValue()
        
        The value to use outside the stencil.  The default is 0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageStencilToImage
        C++: vtkImageStencilToImage *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageStencilToImage
        C++: static vtkImageStencilToImage *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInsideValue(self, p_float):
        """
        V.SetInsideValue(float)
        C++: virtual void SetInsideValue(double _arg)
        
        The value to use inside the stencil.  The default is 1.
        """
        ...
    
    def SetOutputScalarType(self, p_int):
        """
        V.SetOutputScalarType(int)
        C++: virtual void SetOutputScalarType(int _arg)
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToChar(self):
        """
        V.SetOutputScalarTypeToChar()
        C++: void SetOutputScalarTypeToChar()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToInt(self):
        """
        V.SetOutputScalarTypeToInt()
        C++: void SetOutputScalarTypeToInt()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToLong(self):
        """
        V.SetOutputScalarTypeToLong()
        C++: void SetOutputScalarTypeToLong()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToShort(self):
        """
        V.SetOutputScalarTypeToShort()
        C++: void SetOutputScalarTypeToShort()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedChar(self):
        """
        V.SetOutputScalarTypeToUnsignedChar()
        C++: void SetOutputScalarTypeToUnsignedChar()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedInt(self):
        """
        V.SetOutputScalarTypeToUnsignedInt()
        C++: void SetOutputScalarTypeToUnsignedInt()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedLong(self):
        """
        V.SetOutputScalarTypeToUnsignedLong()
        C++: void SetOutputScalarTypeToUnsignedLong()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedShort(self):
        """
        V.SetOutputScalarTypeToUnsignedShort()
        C++: void SetOutputScalarTypeToUnsignedShort()
        
        The desired output scalar type.  The default is unsigned char.
        """
        ...
    
    def SetOutsideValue(self, p_float):
        """
        V.SetOutsideValue(float)
        C++: virtual void SetOutsideValue(double _arg)
        
        The value to use outside the stencil.  The default is 0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageToImageStencil(__vtkmodules_vtkImagingCore.vtkImageStencilAlgorithm):
    """
    vtkImageToImageStencil - clip an image with a mask image
    
    Superclass: vtkImageStencilAlgorithm
    
    vtkImageToImageStencil will convert a vtkImageData into an stencil
    that can be used with vtkImageStecil or other vtk classes that apply
    a stencil to an image.
    @sa
    vtkImageStencil vtkImplicitFunctionToImageStencil
    vtkPolyDataToImageStencil
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: vtkImageData *GetInput()
        
        Specify the image data to convert into a stencil.
        """
        ...
    
    def GetLowerThreshold(self):
        """
        V.GetLowerThreshold() -> float
        C++: virtual double GetLowerThreshold()
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUpperThreshold(self):
        """
        V.GetUpperThreshold() -> float
        C++: virtual double GetUpperThreshold()
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageToImageStencil
        C++: vtkImageToImageStencil *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageToImageStencil
        C++: static vtkImageToImageStencil *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInputData(self, vtkImageData):
        """
        V.SetInputData(vtkImageData)
        C++: void SetInputData(vtkImageData *input)
        
        Specify the image data to convert into a stencil.
        """
        ...
    
    def SetLowerThreshold(self, p_float):
        """
        V.SetLowerThreshold(float)
        C++: virtual void SetLowerThreshold(double _arg)
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def SetUpperThreshold(self, p_float):
        """
        V.SetUpperThreshold(float)
        C++: virtual void SetUpperThreshold(double _arg)
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def ThresholdBetween(self, p_float, p_float_1):
        """
        V.ThresholdBetween(float, float)
        C++: void ThresholdBetween(double lower, double upper)
        
        The values in a range (inclusive) match
        """
        ...
    
    def ThresholdByLower(self, p_float):
        """
        V.ThresholdByLower(float)
        C++: void ThresholdByLower(double thresh)
        
        The values less than or equal to the value match.
        """
        ...
    
    def ThresholdByUpper(self, p_float):
        """
        V.ThresholdByUpper(float)
        C++: void ThresholdByUpper(double thresh)
        
        The values greater than or equal to the value match.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImplicitFunctionToImageStencil(__vtkmodules_vtkImagingCore.vtkImageStencilSource):
    """
    vtkImplicitFunctionToImageStencil - clip an image with a function
    
    Superclass: vtkImageStencilSource
    
    vtkImplicitFunctionToImageStencil will convert a vtkImplicitFunction
    into a stencil that can be used with vtkImageStencil or with other
    classes that apply a stencil to an image.
    @sa
    vtkImplicitFunction vtkImageStencil vtkPolyDataToImageStencil
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkImplicitFunction
        C++: virtual vtkImplicitFunction *GetInput()
        
        Specify the implicit function to convert into a stencil.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override GetMTime() to account for the implicit function.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetThreshold(self):
        """
        V.GetThreshold() -> float
        C++: virtual double GetThreshold()
        
        Set the threshold value for the implicit function.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImplicitFunctionToImageStencil
        C++: vtkImplicitFunctionToImageStencil *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImplicitFunctionToImageStencil
        C++: static vtkImplicitFunctionToImageStencil *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInput(self, vtkImplicitFunction):
        """
        V.SetInput(vtkImplicitFunction)
        C++: virtual void SetInput(vtkImplicitFunction *)
        
        Specify the implicit function to convert into a stencil.
        """
        ...
    
    def SetThreshold(self, p_float):
        """
        V.SetThreshold(float)
        C++: virtual void SetThreshold(double _arg)
        
        Set the threshold value for the implicit function.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLassoStencilSource(__vtkmodules_vtkImagingCore.vtkImageStencilSource):
    """
    vtkLassoStencilSource - Create a stencil from a contour
    
    Superclass: vtkImageStencilSource
    
    vtkLassoStencilSource will create an image stencil from a set of
    points that define a contour.  Its output can be used with
    vtkImageStecil or other vtk classes that apply a stencil to an image.
    @sa
    vtkROIStencilSource vtkPolyDataToImageStencil@par Thanks: Thanks to
    David Gobbi for contributing this class to VTK.
    """
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overload GetMTime() to include the timestamp on the points.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPoints(self):
        """
        V.GetPoints() -> vtkPoints
        C++: virtual vtkPoints *GetPoints()
        
        The points that make up the lassoo.  The loop does not have to be
        closed, the last point will automatically be connected to the
        first point by a straight line segment.
        """
        ...
    
    def GetShape(self):
        """
        V.GetShape() -> int
        C++: virtual int GetShape()
        
        The shape to use, default is "Polygon".  The spline is a cardinal
        spline.  Bezier splines are not yet supported.
        """
        ...
    
    def GetShapeAsString(self):
        """
        V.GetShapeAsString() -> string
        C++: virtual const char *GetShapeAsString()
        
        The shape to use, default is "Polygon".  The spline is a cardinal
        spline.  Bezier splines are not yet supported.
        """
        ...
    
    def GetShapeMaxValue(self):
        """
        V.GetShapeMaxValue() -> int
        C++: virtual int GetShapeMaxValue()
        
        The shape to use, default is "Polygon".  The spline is a cardinal
        spline.  Bezier splines are not yet supported.
        """
        ...
    
    def GetShapeMinValue(self):
        """
        V.GetShapeMinValue() -> int
        C++: virtual int GetShapeMinValue()
        
        The shape to use, default is "Polygon".  The spline is a cardinal
        spline.  Bezier splines are not yet supported.
        """
        ...
    
    def GetSliceOrientation(self):
        """
        V.GetSliceOrientation() -> int
        C++: virtual int GetSliceOrientation()
        
        The slice orientation.  The default is 2, which is XY. Other
        values are 0, which is YZ, and 1, which is XZ.
        """
        ...
    
    def GetSliceOrientationMaxValue(self):
        """
        V.GetSliceOrientationMaxValue() -> int
        C++: virtual int GetSliceOrientationMaxValue()
        
        The slice orientation.  The default is 2, which is XY. Other
        values are 0, which is YZ, and 1, which is XZ.
        """
        ...
    
    def GetSliceOrientationMinValue(self):
        """
        V.GetSliceOrientationMinValue() -> int
        C++: virtual int GetSliceOrientationMinValue()
        
        The slice orientation.  The default is 2, which is XY. Other
        values are 0, which is YZ, and 1, which is XZ.
        """
        ...
    
    def GetSlicePoints(self, p_int):
        """
        V.GetSlicePoints(int) -> vtkPoints
        C++: virtual vtkPoints *GetSlicePoints(int i)
        
        The points for a particular slice.  This will override the points
        that were set by calling SetPoints() for the slice. To clear the
        setting, call SetSlicePoints(slice, nullptr).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLassoStencilSource
        C++: vtkLassoStencilSource *NewInstance()
        """
        ...
    
    def RemoveAllSlicePoints(self):
        """
        V.RemoveAllSlicePoints()
        C++: virtual void RemoveAllSlicePoints()
        
        Remove points from all slices.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLassoStencilSource
        C++: static vtkLassoStencilSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPoints(self, vtkPoints):
        """
        V.SetPoints(vtkPoints)
        C++: virtual void SetPoints(vtkPoints *points)
        
        The points that make up the lassoo.  The loop does not have to be
        closed, the last point will automatically be connected to the
        first point by a straight line segment.
        """
        ...
    
    def SetShape(self, p_int):
        """
        V.SetShape(int)
        C++: virtual void SetShape(int _arg)
        
        The shape to use, default is "Polygon".  The spline is a cardinal
        spline.  Bezier splines are not yet supported.
        """
        ...
    
    def SetShapeToPolygon(self):
        """
        V.SetShapeToPolygon()
        C++: void SetShapeToPolygon()
        
        The shape to use, default is "Polygon".  The spline is a cardinal
        spline.  Bezier splines are not yet supported.
        """
        ...
    
    def SetShapeToSpline(self):
        """
        V.SetShapeToSpline()
        C++: void SetShapeToSpline()
        
        The shape to use, default is "Polygon".  The spline is a cardinal
        spline.  Bezier splines are not yet supported.
        """
        ...
    
    def SetSliceOrientation(self, p_int):
        """
        V.SetSliceOrientation(int)
        C++: virtual void SetSliceOrientation(int _arg)
        
        The slice orientation.  The default is 2, which is XY. Other
        values are 0, which is YZ, and 1, which is XZ.
        """
        ...
    
    def SetSlicePoints(self, p_int, vtkPoints):
        """
        V.SetSlicePoints(int, vtkPoints)
        C++: virtual void SetSlicePoints(int i, vtkPoints *points)
        
        The points for a particular slice.  This will override the points
        that were set by calling SetPoints() for the slice. To clear the
        setting, call SetSlicePoints(slice, nullptr).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    POLYGON = ...
    SPLINE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPolyDataToImageStencil(__vtkmodules_vtkImagingCore.vtkImageStencilSource):
    """
    vtkPolyDataToImageStencil - use polydata to mask an image
    
    Superclass: vtkImageStencilSource
    
    The vtkPolyDataToImageStencil class will convert polydata into an
    image stencil.  The polydata can either be a closed surface mesh or a
    series of polyline contours (one contour per slice).
    @warning
    If contours are provided, the contours must be aligned with the Z
    planes.  Other contour orientations are not supported.
    @sa
    vtkImageStencil vtkImageAccumulate vtkImageBlend vtkImageReslice
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        
        Specify the implicit function to convert into a stencil.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        The tolerance for including a voxel inside the stencil. This is
        in fractions of a voxel, and must be between 0 and 1. Tolerance
        is only applied in the x and y directions, not in z. Setting the
        tolerance to zero disables all tolerance checks and might result
        in faster performance.
        """
        ...
    
    def GetToleranceMaxValue(self):
        """
        V.GetToleranceMaxValue() -> float
        C++: virtual double GetToleranceMaxValue()
        
        The tolerance for including a voxel inside the stencil. This is
        in fractions of a voxel, and must be between 0 and 1. Tolerance
        is only applied in the x and y directions, not in z. Setting the
        tolerance to zero disables all tolerance checks and might result
        in faster performance.
        """
        ...
    
    def GetToleranceMinValue(self):
        """
        V.GetToleranceMinValue() -> float
        C++: virtual double GetToleranceMinValue()
        
        The tolerance for including a voxel inside the stencil. This is
        in fractions of a voxel, and must be between 0 and 1. Tolerance
        is only applied in the x and y directions, not in z. Setting the
        tolerance to zero disables all tolerance checks and might result
        in faster performance.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataToImageStencil
        C++: vtkPolyDataToImageStencil *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataToImageStencil
        C++: static vtkPolyDataToImageStencil *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInputData(self, vtkPolyData):
        """
        V.SetInputData(vtkPolyData)
        C++: virtual void SetInputData(vtkPolyData *)
        
        Specify the implicit function to convert into a stencil.
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        The tolerance for including a voxel inside the stencil. This is
        in fractions of a voxel, and must be between 0 and 1. Tolerance
        is only applied in the x and y directions, not in z. Setting the
        tolerance to zero disables all tolerance checks and might result
        in faster performance.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkROIStencilSource(__vtkmodules_vtkImagingCore.vtkImageStencilSource):
    """
    vtkROIStencilSource - create simple mask shapes
    
    Superclass: vtkImageStencilSource
    
    vtkROIStencilSource will create an image stencil with a simple shape
    like a box, a sphere, or a cylinder.  Its output can be used with
    vtkImageStecil or other vtk classes that apply a stencil to an image.
    @sa
    vtkImplicitFunctionToImageStencil vtkLassoStencilSource@par Thanks:
    Thanks to David Gobbi for contributing this class to VTK.
    """
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetBounds()
        
        Set the bounds of the region of interest.  The bounds take the
        spacing and origin into account.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShape(self):
        """
        V.GetShape() -> int
        C++: virtual int GetShape()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def GetShapeAsString(self):
        """
        V.GetShapeAsString() -> string
        C++: virtual const char *GetShapeAsString()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def GetShapeMaxValue(self):
        """
        V.GetShapeMaxValue() -> int
        C++: virtual int GetShapeMaxValue()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def GetShapeMinValue(self):
        """
        V.GetShapeMinValue() -> int
        C++: virtual int GetShapeMinValue()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkROIStencilSource
        C++: vtkROIStencilSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkROIStencilSource
        C++: static vtkROIStencilSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Set the bounds of the region of interest.  The bounds take the
        spacing and origin into account.
        """
        ...
    
    def SetShape(self, p_int):
        """
        V.SetShape(int)
        C++: virtual void SetShape(int _arg)
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def SetShapeToBox(self):
        """
        V.SetShapeToBox()
        C++: void SetShapeToBox()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def SetShapeToCylinderX(self):
        """
        V.SetShapeToCylinderX()
        C++: void SetShapeToCylinderX()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def SetShapeToCylinderY(self):
        """
        V.SetShapeToCylinderY()
        C++: void SetShapeToCylinderY()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def SetShapeToCylinderZ(self):
        """
        V.SetShapeToCylinderZ()
        C++: void SetShapeToCylinderZ()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def SetShapeToEllipsoid(self):
        """
        V.SetShapeToEllipsoid()
        C++: void SetShapeToEllipsoid()
        
        The shape of the region of interest.  Cylinders can be oriented
        along the X, Y, or Z axes.  The default shape is "Box".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BOX = ...
    CYLINDERX = ...
    CYLINDERY = ...
    CYLINDERZ = ...
    ELLIPSOID = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
