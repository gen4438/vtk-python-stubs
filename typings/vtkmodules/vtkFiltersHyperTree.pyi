"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkFiltersCore as __vtkmodules_vtkFiltersCore

class vtkHyperTreeGridAxisClip(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridAxisClip - Axis aligned hyper tree grid clip
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    Clip an hyper tree grid along an axis aligned plane or box and output
    a hyper tree grid with same dimensionality. This filter also allows
    for reversal of the direction of what is inside versus what is
    outside by setting the InsideOut instance variable.
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    
    @par Thanks: This class was written by Philippe Pebay on a idea of
    Guenole Harel and Jacques-Bernard Lekien, 2016 This class was
    modified by Jacques-Bernard Lekien, 2018 This work was supported by
    Commissariat a l'Energie Atomique CEA, DAM, DIF, F-91297 Arpajon,
    France.
    """
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetBounds()
        
        Set/get bounds of clipping box.
        """
        ...
    
    def GetClipType(self):
        """
        V.GetClipType() -> int
        C++: virtual int GetClipType()
        
        Set/get type of clip. Default value is 0 (plane clip).
        """
        ...
    
    def GetClipTypeMaxValue(self):
        """
        V.GetClipTypeMaxValue() -> int
        C++: virtual int GetClipTypeMaxValue()
        
        Set/get type of clip. Default value is 0 (plane clip).
        """
        ...
    
    def GetClipTypeMinValue(self):
        """
        V.GetClipTypeMinValue() -> int
        C++: virtual int GetClipTypeMinValue()
        
        Set/get type of clip. Default value is 0 (plane clip).
        """
        ...
    
    def GetInsideOut(self):
        """
        V.GetInsideOut() -> bool
        C++: virtual bool GetInsideOut()
        
        Set/Get the InsideOut flag, in the case of clip by hyperplane.
        When off, a cell is clipped out when its origin is above said
        plane intercept along the considered direction, inside otherwise.
        When on, a cell is clipped out when its origin + size is below
        said said plane intercept along the considered direction.
        """
        ...
    
    def GetMaximumBounds(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetMaximumBounds([float, float, float])
        C++: void GetMaximumBounds(double[3])
        
        Set/get bounds of clipping box.
        """
        ...
    
    def GetMinimumBounds(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetMinimumBounds([float, float, float])
        C++: void GetMinimumBounds(double[3])
        
        Set/get bounds of clipping box.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override GetMTime because we delegate to a vtkQuadric.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlaneNormalAxis(self):
        """
        V.GetPlaneNormalAxis() -> int
        C++: virtual int GetPlaneNormalAxis()
        
        Set/get normal axis of clipping plane: 0=X, 1=Y, 2=Z. Default
        value is 0 (X-axis normal).
        """
        ...
    
    def GetPlaneNormalAxisMaxValue(self):
        """
        V.GetPlaneNormalAxisMaxValue() -> int
        C++: virtual int GetPlaneNormalAxisMaxValue()
        
        Set/get normal axis of clipping plane: 0=X, 1=Y, 2=Z. Default
        value is 0 (X-axis normal).
        """
        ...
    
    def GetPlaneNormalAxisMinValue(self):
        """
        V.GetPlaneNormalAxisMinValue() -> int
        C++: virtual int GetPlaneNormalAxisMinValue()
        
        Set/get normal axis of clipping plane: 0=X, 1=Y, 2=Z. Default
        value is 0 (X-axis normal).
        """
        ...
    
    def GetPlanePosition(self):
        """
        V.GetPlanePosition() -> float
        C++: virtual double GetPlanePosition()
        
        Set/get position of clipping plane: intercept along normal axis.
        Default value is 0.0.
        """
        ...
    
    def GetQuadric(self):
        """
        V.GetQuadric() -> vtkQuadric
        C++: virtual vtkQuadric *GetQuadric()
        
        Set/Get the clipping quadric function.
        """
        ...
    
    def GetQuadricCoefficients(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetQuadricCoefficients([float, float, float, float, float,
            float, float, float, float, float])
        C++: void GetQuadricCoefficients(double[10])
        V.GetQuadricCoefficients() -> (float, ...)
        C++: double *GetQuadricCoefficients()
        
        Helpers to set/get the 10 coefficients of the quadric function
        """
        ...
    
    def InsideOutOff(self):
        """
        V.InsideOutOff()
        C++: virtual void InsideOutOff()
        
        Set/Get the InsideOut flag, in the case of clip by hyperplane.
        When off, a cell is clipped out when its origin is above said
        plane intercept along the considered direction, inside otherwise.
        When on, a cell is clipped out when its origin + size is below
        said said plane intercept along the considered direction.
        """
        ...
    
    def InsideOutOn(self):
        """
        V.InsideOutOn()
        C++: virtual void InsideOutOn()
        
        Set/Get the InsideOut flag, in the case of clip by hyperplane.
        When off, a cell is clipped out when its origin is above said
        plane intercept along the considered direction, inside otherwise.
        When on, a cell is clipped out when its origin + size is below
        said said plane intercept along the considered direction.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridAxisClip
        C++: vtkHyperTreeGridAxisClip *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridAxisClip
        C++: static vtkHyperTreeGridAxisClip *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Set/get bounds of clipping box.
        """
        ...
    
    def SetClipType(self, p_int):
        """
        V.SetClipType(int)
        C++: virtual void SetClipType(int _arg)
        
        Set/get type of clip. Default value is 0 (plane clip).
        """
        ...
    
    def SetClipTypeToBox(self):
        """
        V.SetClipTypeToBox()
        C++: void SetClipTypeToBox()
        
        Set/get type of clip. Default value is 0 (plane clip).
        """
        ...
    
    def SetClipTypeToPlane(self):
        """
        V.SetClipTypeToPlane()
        C++: void SetClipTypeToPlane()
        
        Set/get type of clip. Default value is 0 (plane clip).
        """
        ...
    
    def SetClipTypeToQuadric(self):
        """
        V.SetClipTypeToQuadric()
        C++: void SetClipTypeToQuadric()
        
        Set/get type of clip. Default value is 0 (plane clip).
        """
        ...
    
    def SetInsideOut(self, bool):
        """
        V.SetInsideOut(bool)
        C++: virtual void SetInsideOut(bool _arg)
        
        Set/Get the InsideOut flag, in the case of clip by hyperplane.
        When off, a cell is clipped out when its origin is above said
        plane intercept along the considered direction, inside otherwise.
        When on, a cell is clipped out when its origin + size is below
        said said plane intercept along the considered direction.
        """
        ...
    
    def SetPlaneNormalAxis(self, p_int):
        """
        V.SetPlaneNormalAxis(int)
        C++: virtual void SetPlaneNormalAxis(int _arg)
        
        Set/get normal axis of clipping plane: 0=X, 1=Y, 2=Z. Default
        value is 0 (X-axis normal).
        """
        ...
    
    def SetPlanePosition(self, p_float):
        """
        V.SetPlanePosition(float)
        C++: virtual void SetPlanePosition(double _arg)
        
        Set/get position of clipping plane: intercept along normal axis.
        Default value is 0.0.
        """
        ...
    
    def SetQuadric(self, vtkQuadric):
        """
        V.SetQuadric(vtkQuadric)
        C++: virtual void SetQuadric(vtkQuadric *)
        
        Set/Get the clipping quadric function.
        """
        ...
    
    def SetQuadricCoefficients(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5, p_float_6, p_float_7, p_float_8, p_float_9):
        """
        V.SetQuadricCoefficients(float, float, float, float, float, float,
             float, float, float, float)
        C++: void SetQuadricCoefficients(double a, double b, double c,
            double d, double e, double f, double g, double h, double i,
            double j)
        V.SetQuadricCoefficients([float, float, float, float, float,
            float, float, float, float, float])
        C++: void SetQuadricCoefficients(double[10])
        
        Helpers to set/get the 10 coefficients of the quadric function
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BOX = ...
    ClipType = ...
    PLANE = ...
    QUADRIC = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridAxisCut(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridAxisCut - Axis aligned hyper tree grid cut
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    Cut an hyper tree grid along an axis aligned plane and output a hyper
    tree grid lower dimensionality. Only works for 3D grids as inputs
    
    NB: This new (2014-16) version of the class is not to be confused
    with earlier (2012-13) version that produced a vtkPolyData output
    composed of disjoint (no point sharing) quadrilaterals, with possibly
    superimposed faces when cut plane contained inter-cell boundaries.
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien 2014 This class was modified by Philippe
    Pebay, 2016 This class was modified by Jacques-Bernard Lekien, 2018
    This work was supported by Commissariat a l'Energie Atomique CEA,
    DAM, DIF, F-91297 Arpajon, France.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlaneNormalAxis(self):
        """
        V.GetPlaneNormalAxis() -> int
        C++: virtual int GetPlaneNormalAxis()
        
        Normal axis: 0=X, 1=Y, 2=Z. Default is 0
        """
        ...
    
    def GetPlaneNormalAxisMaxValue(self):
        """
        V.GetPlaneNormalAxisMaxValue() -> int
        C++: virtual int GetPlaneNormalAxisMaxValue()
        
        Normal axis: 0=X, 1=Y, 2=Z. Default is 0
        """
        ...
    
    def GetPlaneNormalAxisMinValue(self):
        """
        V.GetPlaneNormalAxisMinValue() -> int
        C++: virtual int GetPlaneNormalAxisMinValue()
        
        Normal axis: 0=X, 1=Y, 2=Z. Default is 0
        """
        ...
    
    def GetPlanePosition(self):
        """
        V.GetPlanePosition() -> float
        C++: virtual double GetPlanePosition()
        
        Position of plane: Axis constant. Default is 0.0
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridAxisCut
        C++: vtkHyperTreeGridAxisCut *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridAxisCut
        C++: static vtkHyperTreeGridAxisCut *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetPlaneNormalAxis(self, p_int):
        """
        V.SetPlaneNormalAxis(int)
        C++: virtual void SetPlaneNormalAxis(int _arg)
        
        Normal axis: 0=X, 1=Y, 2=Z. Default is 0
        """
        ...
    
    def SetPlanePosition(self, p_float):
        """
        V.SetPlanePosition(float)
        C++: virtual void SetPlanePosition(double _arg)
        
        Position of plane: Axis constant. Default is 0.0
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridAxisReflection(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridAxisReflection - Reflect a hyper tree grid
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    This filter reflect the cells of a hyper tree grid with respect to
    one of the planes parallel to the bounding box of the data set.
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm vtkReflectionFilter
    
    @par Thanks: This class was written by Philippe Pebay based on a idea
    of Guenole Harel and Jacques-Bernard Lekien, 2016 This work was
    supported by Commissariat a l'Energie Atomique (CEA/DIF)
    """
    def GetCenter(self):
        """
        V.GetCenter() -> float
        C++: virtual double GetCenter()
        
        If the reflection plane is set to X, Y or Z, this variable is use
        to set the position of the plane.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlane(self):
        """
        V.GetPlane() -> int
        C++: virtual int GetPlane()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def GetPlaneMaxValue(self):
        """
        V.GetPlaneMaxValue() -> int
        C++: virtual int GetPlaneMaxValue()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def GetPlaneMinValue(self):
        """
        V.GetPlaneMinValue() -> int
        C++: virtual int GetPlaneMinValue()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridAxisReflection
        C++: vtkHyperTreeGridAxisReflection *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridAxisReflection
        C++: static vtkHyperTreeGridAxisReflection *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float):
        """
        V.SetCenter(float)
        C++: virtual void SetCenter(double _arg)
        
        If the reflection plane is set to X, Y or Z, this variable is use
        to set the position of the plane.
        """
        ...
    
    def SetPlane(self, p_int):
        """
        V.SetPlane(int)
        C++: virtual void SetPlane(int _arg)
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToX(self):
        """
        V.SetPlaneToX()
        C++: void SetPlaneToX()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToXMax(self):
        """
        V.SetPlaneToXMax()
        C++: void SetPlaneToXMax()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToXMin(self):
        """
        V.SetPlaneToXMin()
        C++: void SetPlaneToXMin()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToY(self):
        """
        V.SetPlaneToY()
        C++: void SetPlaneToY()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToYMax(self):
        """
        V.SetPlaneToYMax()
        C++: void SetPlaneToYMax()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToYMin(self):
        """
        V.SetPlaneToYMin()
        C++: void SetPlaneToYMin()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToZ(self):
        """
        V.SetPlaneToZ()
        C++: void SetPlaneToZ()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToZMax(self):
        """
        V.SetPlaneToZMax()
        C++: void SetPlaneToZMax()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToZMin(self):
        """
        V.SetPlaneToZMin()
        C++: void SetPlaneToZMin()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AxisReflectionPlane = ...
    USE_X = ...
    USE_X_MAX = ...
    USE_X_MIN = ...
    USE_Y = ...
    USE_Y_MAX = ...
    USE_Y_MIN = ...
    USE_Z = ...
    USE_Z_MAX = ...
    USE_Z_MIN = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridCellCenters(__vtkmodules_vtkFiltersCore.vtkCellCenters):
    """
    vtkHyperTreeGridCellCenters - generate points at center of hyper tree
    grid leaf cell centers.
    
    Superclass: vtkCellCenters
    
    vtkHyperTreeGridCellCenters is a filter that takes as input an hyper
    tree grid and generates on output points at the center of the leaf
    cells in the hyper tree grid. These points can be used for placing
    glyphs (vtkGlyph3D) or labeling (vtkLabeledDataMapper). The cell
    attributes will be associated with the points on output.
    
    @warning
    You can choose to generate just points or points and vertex cells.
    Vertex cells are drawn during rendering; points are not. Use the ivar
    VertexCells to generate cells.
    
    @sa
    vtkCellCenters vtkHyperTreeGrid vtkGlyph3D
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien 2014 This class was modified by Philippe
    Pebay, 2016 This class was modified by Jacques-Bernard Lekien, 2018
    This work was supported by Commissariat a l'Energie Atomique CEA,
    DAM, DIF, F-91297 Arpajon, France.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridCellCenters
        C++: vtkHyperTreeGridCellCenters *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridCellCenters
        C++: static vtkHyperTreeGridCellCenters *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridContour(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridContour - Extract cells from a hyper tree grid where
    selected scalar value is within given range.
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    This filter extracts cells from a hyper tree grid that satisfy the
    following contour: a cell is considered to be within range if its
    value for the active scalar is within a specified range (inclusive).
    The output remains a hyper tree grid.
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm vtkContourFilter
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien 2014 This class was revised by Philippe Pebay,
    2016 This class was modified by Jacques-Bernard Lekien, 2018 This
    work was supported by Commissariat a l'Energie Atomique CEA, DAM,
    DIF, F-91297 Arpajon, France.
    """
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified. The locator is used to merge coincident points.
        """
        ...
    
    def GenerateValues(self, p_int, p_float=..., p_float=...):
        """
        V.GenerateValues(int, [float, float])
        C++: void GenerateValues(int, double[2])
        V.GenerateValues(int, float, float)
        C++: void GenerateValues(int, double, double)
        
        Methods (inlined) to set / get contour values.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Set / get a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Modified GetMTime Because we delegate to vtkContourValues.
        """
        ...
    
    def GetNumberOfContours(self):
        """
        V.GetNumberOfContours() -> int
        C++: vtkIdType GetNumberOfContours()
        
        Methods (inlined) to set / get contour values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> float
        C++: double GetValue(int)
        
        Methods (inlined) to set / get contour values.
        """
        ...
    
    def GetValues(self):
        """
        V.GetValues() -> (float, ...)
        C++: double *GetValues()
        V.GetValues([float, ...])
        C++: void GetValues(double *)
        
        Methods (inlined) to set / get contour values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridContour
        C++: vtkHyperTreeGridContour *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridContour
        C++: static vtkHyperTreeGridContour *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *)
        
        Set / get a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetNumberOfContours(self, p_int):
        """
        V.SetNumberOfContours(int)
        C++: void SetNumberOfContours(int)
        
        Methods (inlined) to set / get contour values.
        """
        ...
    
    def SetValue(self, p_int, p_float):
        """
        V.SetValue(int, float)
        C++: void SetValue(int, double)
        
        Methods (inlined) to set / get contour values.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridDepthLimiter(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridDepthLimiter - Hyper tree grid level extraction
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    Extract all levels down to a specified depth from a hyper tree grid.
    If the required depth is greater or equal to the maximum level of the
    input grid, then the output is identical. Note that when a material
    mask is present, the geometry extent of the output grid is guaranteed
    to contain that of the input tree, but the former might be strictly
    larger than the latter. This is not a bug but an expected behavior of
    which the user should be aware.
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien 2014 This class was modified by Philippe
    Pebay, 2016 This class was modified by Jacques-Bernard Lekien, 2018
    This class was optimized by Jacques-Bernard Lekien, 2019, by
    DepthLimiter directly manadged by HyperTreeGrid and (super)cursors.
    This work was supported by Commissariat a l'Energie Atomique CEA,
    DAM, DIF, F-91297 Arpajon, France.
    """
    def GetDepth(self):
        """
        V.GetDepth() -> int
        C++: virtual unsigned int GetDepth()
        
        Set/Get maximum depth to which output grid should be limited
        """
        ...
    
    def GetJustCreateNewMask(self):
        """
        V.GetJustCreateNewMask() -> bool
        C++: virtual bool GetJustCreateNewMask()
        
        Set/Get True, create a new mask ; false, create a new HTG.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridDepthLimiter
        C++: vtkHyperTreeGridDepthLimiter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridDepthLimiter
        C++: static vtkHyperTreeGridDepthLimiter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDepth(self, p_int):
        """
        V.SetDepth(int)
        C++: virtual void SetDepth(unsigned int _arg)
        
        Set/Get maximum depth to which output grid should be limited
        """
        ...
    
    def SetJustCreateNewMask(self, bool):
        """
        V.SetJustCreateNewMask(bool)
        C++: virtual void SetJustCreateNewMask(bool _arg)
        
        Set/Get True, create a new mask ; false, create a new HTG.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridEvaluateCoarse(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridEvaluateCoarse - The value of the parent cell is
    determined from an operation defined on the values of the child cells.
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    vtkHyperTreeGridEvaluateCoarse is a filter that takes as input an
    hypertree grid. The value of the parent cell (coarse) is determined
    from an operation defined on the values of the child cells (refined
    cell).
    
    The predefined operators are :
    - OPERATOR_DON_T_CHANGE_FAST: Operator does not change coarse value
      (default), just shallow copy
    - OPERATOR_DON_T_CHANGE: Operator does not change coarse value but
      iterate over all cells, just shallow copy
    - OPERATOR_MIN: The littlest value of the unmasked child cells
    - OPERATOR_MAX: The biggest value of the unmasked child cells
    - OPERATOR_SUM: The sum of the values of the unmasked child cells
    - OPERATOR_AVERAGE: The average of the values of the child cells. If
      the cell is masked a value is put at "default value" (default value
    = 0 if not set by SetDefault).
    - OPERATOR_UNMASKED_AVERAGE: The average of the values of the
      unmasked child cells
    - OPERATOR_ELDER_CHILD: Operator puts the value of the first child
      (elder child)
    - OPERATOR_SPLATTING_AVERAGE: The splatting average of the values of
      the child cells. If the cell is masked a value is put at "default
      value" (default value = 0 if not set by SetDefault). The
      calculation of the average should normally be done by dividing by
      the number of children (GetNumberOfChildren) which is worth f^d
      where f, refinement factor and d, number of spatial dimension. In
      the calculation of the mean for splatting, the division involves
      f^(d-1). In 3D, if a mesh is refined into 8 child cells each having
    a value set to 0.5, all these children produce 4 splats of value 1.
      In fact, the value of the expected splat at the coarse cell
      (parent) is 1. But a standard average will give 0.5 (value / f^d).
      This is why the calculation of the average for splatting is
      different (value / f^(d-1)).
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien, 2016-18 This class was modified to take in
    account the field values with components different of one, by Florent
    Denef, 2019 This work was supported by Commissariat a l'Energie
    Atomique CEA, DAM, DIF, F-91297 Arpajon, France.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOperator(self):
        """
        V.GetOperator() -> int
        C++: virtual unsigned int GetOperator()
        
        Set/Get operator
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridEvaluateCoarse
        C++: vtkHyperTreeGridEvaluateCoarse *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridEvaluateCoarse
        C++: static vtkHyperTreeGridEvaluateCoarse *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDefault(self, p_float):
        """
        V.SetDefault(float)
        C++: virtual void SetDefault(double _arg)
        
        Set/Get operator
        """
        ...
    
    def SetOperator(self, p_int):
        """
        V.SetOperator(int)
        C++: virtual void SetOperator(unsigned int _arg)
        
        Set/Get operator
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    OPERATOR_AVERAGE = ...
    OPERATOR_DON_T_CHANGE = ...
    OPERATOR_DON_T_CHANGE_FAST = ...
    OPERATOR_ELDER_CHILD = ...
    OPERATOR_MAX = ...
    OPERATOR_MIN = ...
    OPERATOR_SPLATTING_AVERAGE = ...
    OPERATOR_SUM = ...
    OPERATOR_UNMASKED_AVERAGE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridGeometry(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridGeometry - Hyper tree grid outer surface
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    
    @par Thanks: This class was written by Philippe Pebay, Joachim
    Pouderoux, and Charles Law, Kitware 2013 This class was modified by
    Guenole Harel and Jacques-Bernard Lekien, 2014 This class was
    rewritten by Philippe Pebay, 2016 This class was modified by
    Jacques-Bernard Lekien and Guenole Harel, 2018 This work was
    supported by Commissariat a l'Energie Atomique CEA, DAM, DIF, F-91297
    Arpajon, France.
    """
    def GetMerging(self):
        """
        V.GetMerging() -> bool
        C++: virtual bool GetMerging()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridGeometry
        C++: vtkHyperTreeGridGeometry *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridGeometry
        C++: static vtkHyperTreeGridGeometry *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetMerging(self, bool):
        """
        V.SetMerging(bool)
        C++: virtual void SetMerging(bool _arg)
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridPlaneCutter(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridPlaneCutter - cut an hyper tree grid volume with a
    plane and generate a polygonal cut surface.
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    vtkHyperTreeGridPlaneCutter is a filter that takes as input an hyper
    tree grid and a single plane and generates the polygonal data
    intersection surface. This cut is computed at the leaf cells of the
    hyper tree. It is left as an option to decide whether the cut should
    be computed over the original AMR mesh or over its dual; in the
    latter case, perfect connectivity (i.e., mesh conformity in the FE
    sense) is achieved at the cost of interpolation to the dual of the
    input AMR mesh, and therefore of missing intersection plane pieces
    near the primal boundary.
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    
    @par Thanks: This class was written by Philippe Pebay on a idea of
    Guenole Harel and Jacques-Bernard Lekien, 2016 This class was
    modified by Rogeli Grima Torres, 2016 This class was modified by
    Jacques-Bernard Lekien, 2018 This work was supported by Commissariat
    a l'Energie Atomique CEA, DAM, DIF, F-91297 Arpajon, France.
    """
    def DualOff(self):
        """
        V.DualOff()
        C++: virtual void DualOff()
        
        Set/Get whether output mesh should be computed on dual grid
        """
        ...
    
    def DualOn(self):
        """
        V.DualOn()
        C++: virtual void DualOn()
        
        Set/Get whether output mesh should be computed on dual grid
        """
        ...
    
    def GetAxisAlignment(self):
        """
        V.GetAxisAlignment() -> int
        C++: virtual int GetAxisAlignment()
        
        Returns 0 if plane's normal is aligned with X axis, 1 if it is
        aligned with Y axis, 2 if it is aligned with Z axis. Returns -1
        if not aligned with any principal axis.
        """
        ...
    
    def GetDual(self):
        """
        V.GetDual() -> int
        C++: virtual int GetDual()
        
        Set/Get whether output mesh should be computed on dual grid
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlane(self):
        """
        V.GetPlane() -> (float, float, float, float)
        C++: virtual double *GetPlane()
        
        Specify the plane with its [a,b,c,d] Cartesian coefficients: a*x
        + b*y + c*z = d
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsPlaneOrthogonalToXAxis(self):
        """
        V.IsPlaneOrthogonalToXAxis() -> bool
        C++: bool IsPlaneOrthogonalToXAxis()
        
        Returns true if plane's normal is aligned with the corresponding
        axis, false elsewise.
        """
        ...
    
    def IsPlaneOrthogonalToYAxis(self):
        """
        V.IsPlaneOrthogonalToYAxis() -> bool
        C++: bool IsPlaneOrthogonalToYAxis()
        
        Returns true if plane's normal is aligned with the corresponding
        axis, false elsewise.
        """
        ...
    
    def IsPlaneOrthogonalToZAxis(self):
        """
        V.IsPlaneOrthogonalToZAxis() -> bool
        C++: bool IsPlaneOrthogonalToZAxis()
        
        Returns true if plane's normal is aligned with the corresponding
        axis, false elsewise.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridPlaneCutter
        C++: vtkHyperTreeGridPlaneCutter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridPlaneCutter
        C++: static vtkHyperTreeGridPlaneCutter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDual(self, p_int):
        """
        V.SetDual(int)
        C++: virtual void SetDual(int _arg)
        
        Set/Get whether output mesh should be computed on dual grid
        """
        ...
    
    def SetPlane(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetPlane(float, float, float, float)
        C++: void SetPlane(double a, double b, double c, double d)
        
        Specify the plane with its [a,b,c,d] Cartesian coefficients: a*x
        + b*y + c*z = d
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridThreshold(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridThreshold - Extract cells from a hyper tree grid
    where selected scalar value is within given range.
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    This filter extracts cells from a hyper tree grid that satisfy the
    following threshold: a cell is considered to be within range if its
    value for the active scalar is within a specified range (inclusive).
    The output remains a hyper tree grid. JB Un parametre
    (JustCreateNewMask=true) permet de ne pas faire le choix de la
    creation d'un nouveau HTG mais de redefinir juste le masque.
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm vtkThreshold
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien 2014 This class was revised by Philippe Pebay,
    2016 This class was optimized by Jacques-Bernard Lekien, 2018. This
    work was supported by Commissariat a l'Energie Atomique CEA, DAM,
    DIF, F-91297 Arpajon, France.
    """
    def GetJustCreateNewMask(self):
        """
        V.GetJustCreateNewMask() -> bool
        C++: virtual bool GetJustCreateNewMask()
        
        Set/Get True, create a new mask ; false, create a new HTG.
        """
        ...
    
    def GetLowerThreshold(self):
        """
        V.GetLowerThreshold() -> float
        C++: virtual double GetLowerThreshold()
        
        Set/Get minimum scalar value of threshold
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUpperThreshold(self):
        """
        V.GetUpperThreshold() -> float
        C++: virtual double GetUpperThreshold()
        
        Set/Get maximum scalar value of threshold
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridThreshold
        C++: vtkHyperTreeGridThreshold *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridThreshold
        C++: static vtkHyperTreeGridThreshold *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetJustCreateNewMask(self, bool):
        """
        V.SetJustCreateNewMask(bool)
        C++: virtual void SetJustCreateNewMask(bool _arg)
        
        Set/Get True, create a new mask ; false, create a new HTG.
        """
        ...
    
    def SetLowerThreshold(self, p_float):
        """
        V.SetLowerThreshold(float)
        C++: virtual void SetLowerThreshold(double _arg)
        
        Set/Get minimum scalar value of threshold
        """
        ...
    
    def SetUpperThreshold(self, p_float):
        """
        V.SetUpperThreshold(float)
        C++: virtual void SetUpperThreshold(double _arg)
        
        Set/Get maximum scalar value of threshold
        """
        ...
    
    def ThresholdBetween(self, p_float, p_float_1):
        """
        V.ThresholdBetween(float, float)
        C++: void ThresholdBetween(double, double)
        
        Convenience method to set both threshold values at once
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridToDualGrid(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridToDualGrid - Convert hyper tree grid to the dual
    unstructured grid.
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    This filter is the new home for what was the dataset API within the
    vtkHyperTreeGrid class.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridToDualGrid
        C++: vtkHyperTreeGridToDualGrid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeGridToDualGrid
        C++: static vtkHyperTreeGridToDualGrid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHyperTreeGridToUnstructuredGrid(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkHyperTreeGridToUnstructuredGrid - Convert hyper tree grid to
    unstructured grid.
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    JB Primal mesh
    * Make explicit all leaves of a hyper tree grid by converting them to
    cells
    * of an unstructured grid.
    * Produces segments in 1D, rectangles in 2D, right hexahedra in 3D.
    * NB: The output will contain superimposed inter-element boundaries
      and pending
    * nodes as a result of T-junctions.
    *
    * @sa
    * vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    *
    * @par Thanks:
    * This class was written by Philippe Pebay, Joachim Pouderoux, and
      Charles Law, Kitware 2012
    * This class was modified by Guenole Harel and Jacques-Bernard
      Lekien, 2014
    * This class was rewritten by Philippe Pebay, 2016
    * This class was modified by Jacques-Bernard Lekien, 2018
    * This class was corriged (used orientation) by Jacques-Bernard
      Lekien, 2018
    * This work was supported by Commissariat a l'Energie Atomique
    * CEA, DAM, DIF, F-91297 Arpajon, France.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeGridToUnstructuredGrid
        C++: vtkHyperTreeGridToUnstructuredGrid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkHyperTreeGridToUnstructuredGrid
        C++: static vtkHyperTreeGridToUnstructuredGrid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageDataToHyperTreeGrid(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkImageDataToHyperTreeGrid - 
    
    Superclass: vtkHyperTreeGridAlgorithm
    
    @sa
    vtkHyperTreeGrid vtkHyperTreeGridAlgorithm
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien 2018. This work was supported by Commissariat
    a l'Energie Atomique CEA, DAM, DIF, F-91297 Arpajon, France.
    """
    def GetDepthMax(self):
        """
        V.GetDepthMax() -> int
        C++: virtual int GetDepthMax()
        """
        ...
    
    def GetNbColors(self):
        """
        V.GetNbColors() -> int
        C++: virtual int GetNbColors()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageDataToHyperTreeGrid
        C++: vtkImageDataToHyperTreeGrid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageDataToHyperTreeGrid
        C++: static vtkImageDataToHyperTreeGrid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDepthMax(self, p_int):
        """
        V.SetDepthMax(int)
        C++: virtual void SetDepthMax(int _arg)
        """
        ...
    
    def SetNbColors(self, p_int):
        """
        V.SetNbColors(int)
        C++: virtual void SetNbColors(int _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
