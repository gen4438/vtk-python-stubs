"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkDepthImageToPointCloud(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkDepthImageToPointCloud - convert a depth image into a point cloud
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkDepthImageToPointCloud is a filter that acquires its input from a
    depth image and converts it to point cloud represented as a
    vtkPolyData. This can then be used in a visualization pipeline.
    
    The filter takes two input images, one of which is optional. The
    first image is a (required) depth image containing z-buffer values.
    The second image is an (optional) scalar image. The information in
    the z-buffer image, plus a specified camera, is used to generate
    x-y-z coordinates of the output point cloud (i.e., the points in a
    vtkPolyData). The second scalar image is (optionally) output as
    scalars to the output point cloud. Note that the depth image must be
    a single component image, with values ranging between the near and
    far clipping range [-1,1].
    
    Note that if only a single input is provided, then the input is
    interpreted in one of two ways. First, if the "ZBuffer" point data is
    provided, then the input image is assumed to be color scalars with
    the depth data provided in the "ZBuffer" data array. (This is
    consistent with the vtkRendererSource filter with DepthValues
    enabled.) Otherwise, the input image is assumed to be a depth image.
    
    It is (optionally) possible to cull points located on the near and
    far clipping planes. This may better simulate the generation of a
    scanned object point cloud.
    
    @warning
    For the camera to transform the image depths into a point cloud, this
    filter makes assumptions about the origin of the depth image (and
    associated color scalar image). This class performs point by point
    transformation. The view matrix is used to transform each pixel.
    IMPORTANT NOTE: The transformation occurs by normalizing the image
    pixels into the (-1,1) view space (depth values are passed through).
    The process follows the vtkCoordinate class which is the standard for
    VTK rendering transformations. Subtle differences in whether the
    lower left pixel origin are at the center of the pixel versus the
    lower-left corner of the pixel will make slight differences in how
    pixels are transformed. (Similarly for the upper right pixel as
    well). This half pixel difference can cause transformation issues.
    (The code is commented appropriately.)
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkRendererSource vtkWindowToImageFilter vtkCamera vtkPolyData
    vtkCoordinate
    """
    def CullFarPointsOff(self):
        """
        V.CullFarPointsOff()
        C++: virtual void CullFarPointsOff()
        
        Indicate whether to cull points that are located on the far
        clipping plane. These typically are points that are part of the
        background. By default this is enabled.
        """
        ...
    
    def CullFarPointsOn(self):
        """
        V.CullFarPointsOn()
        C++: virtual void CullFarPointsOn()
        
        Indicate whether to cull points that are located on the far
        clipping plane. These typically are points that are part of the
        background. By default this is enabled.
        """
        ...
    
    def CullNearPointsOff(self):
        """
        V.CullNearPointsOff()
        C++: virtual void CullNearPointsOff()
        
        Indicate whether to cull points that are located on the near
        clipping plane. These typically are points that are part of the
        clipped foreground. By default this is disabled.
        """
        ...
    
    def CullNearPointsOn(self):
        """
        V.CullNearPointsOn()
        C++: virtual void CullNearPointsOn()
        
        Indicate whether to cull points that are located on the near
        clipping plane. These typically are points that are part of the
        clipped foreground. By default this is disabled.
        """
        ...
    
    def GetCamera(self):
        """
        V.GetCamera() -> vtkCamera
        C++: virtual vtkCamera *GetCamera()
        
        Returns the camera being used to generate the point cloud from
        the depth image.
        """
        ...
    
    def GetCullFarPoints(self):
        """
        V.GetCullFarPoints() -> bool
        C++: virtual bool GetCullFarPoints()
        
        Indicate whether to cull points that are located on the far
        clipping plane. These typically are points that are part of the
        background. By default this is enabled.
        """
        ...
    
    def GetCullNearPoints(self):
        """
        V.GetCullNearPoints() -> bool
        C++: virtual bool GetCullNearPoints()
        
        Indicate whether to cull points that are located on the near
        clipping plane. These typically are points that are part of the
        clipped foreground. By default this is disabled.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the camera.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard instantiation, type and print methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard instantiation, type and print methods.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set the desired precision for the output points. See
        vtkAlgorithm::DesiredOutputPrecision for the available choices.
        The default is double precision.
        """
        ...
    
    def GetProduceColorScalars(self):
        """
        V.GetProduceColorScalars() -> bool
        C++: virtual bool GetProduceColorScalars()
        
        Indicate whether to output color scalar values along with the
        point cloud (assuming that the scalar values are available on
        input). By default this is enabled.
        """
        ...
    
    def GetProduceVertexCellArray(self):
        """
        V.GetProduceVertexCellArray() -> bool
        C++: virtual bool GetProduceVertexCellArray()
        
        Indicate whether to output a vertex cell array (i.e., Verts) in
        the output point cloud. Some filters require this vertex cells to
        be defined in order to execute properly. For example some mappers
        will only render points if the vertex cells are defined.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard instantiation, type and print methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard instantiation, type and print methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDepthImageToPointCloud
        C++: vtkDepthImageToPointCloud *NewInstance()
        
        Standard instantiation, type and print methods.
        """
        ...
    
    def ProduceColorScalarsOff(self):
        """
        V.ProduceColorScalarsOff()
        C++: virtual void ProduceColorScalarsOff()
        
        Indicate whether to output color scalar values along with the
        point cloud (assuming that the scalar values are available on
        input). By default this is enabled.
        """
        ...
    
    def ProduceColorScalarsOn(self):
        """
        V.ProduceColorScalarsOn()
        C++: virtual void ProduceColorScalarsOn()
        
        Indicate whether to output color scalar values along with the
        point cloud (assuming that the scalar values are available on
        input). By default this is enabled.
        """
        ...
    
    def ProduceVertexCellArrayOff(self):
        """
        V.ProduceVertexCellArrayOff()
        C++: virtual void ProduceVertexCellArrayOff()
        
        Indicate whether to output a vertex cell array (i.e., Verts) in
        the output point cloud. Some filters require this vertex cells to
        be defined in order to execute properly. For example some mappers
        will only render points if the vertex cells are defined.
        """
        ...
    
    def ProduceVertexCellArrayOn(self):
        """
        V.ProduceVertexCellArrayOn()
        C++: virtual void ProduceVertexCellArrayOn()
        
        Indicate whether to output a vertex cell array (i.e., Verts) in
        the output point cloud. Some filters require this vertex cells to
        be defined in order to execute properly. For example some mappers
        will only render points if the vertex cells are defined.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDepthImageToPointCloud
        C++: static vtkDepthImageToPointCloud *SafeDownCast(
            vtkObjectBase *o)
        
        Standard instantiation, type and print methods.
        """
        ...
    
    def SetCamera(self, vtkCamera):
        """
        V.SetCamera(vtkCamera)
        C++: void SetCamera(vtkCamera *)
        
        Indicates what camera was used to generate the depth image. The
        camera parameters define a transformation which is used to
        perform coordinate conversion into the 3D x-y-z space of the
        point cloud.
        """
        ...
    
    def SetCullFarPoints(self, bool):
        """
        V.SetCullFarPoints(bool)
        C++: virtual void SetCullFarPoints(bool _arg)
        
        Indicate whether to cull points that are located on the far
        clipping plane. These typically are points that are part of the
        background. By default this is enabled.
        """
        ...
    
    def SetCullNearPoints(self, bool):
        """
        V.SetCullNearPoints(bool)
        C++: virtual void SetCullNearPoints(bool _arg)
        
        Indicate whether to cull points that are located on the near
        clipping plane. These typically are points that are part of the
        clipped foreground. By default this is disabled.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set the desired precision for the output points. See
        vtkAlgorithm::DesiredOutputPrecision for the available choices.
        The default is double precision.
        """
        ...
    
    def SetProduceColorScalars(self, bool):
        """
        V.SetProduceColorScalars(bool)
        C++: virtual void SetProduceColorScalars(bool _arg)
        
        Indicate whether to output color scalar values along with the
        point cloud (assuming that the scalar values are available on
        input). By default this is enabled.
        """
        ...
    
    def SetProduceVertexCellArray(self, bool):
        """
        V.SetProduceVertexCellArray(bool)
        C++: virtual void SetProduceVertexCellArray(bool _arg)
        
        Indicate whether to output a vertex cell array (i.e., Verts) in
        the output point cloud. Some filters require this vertex cells to
        be defined in order to execute properly. For example some mappers
        will only render points if the vertex cells are defined.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageResliceMapper(__vtkmodules_vtkRenderingCore.vtkImageMapper3D):
    """
    vtkImageResliceMapper - map a slice of a vtkImageData to the screen
    
    Superclass: vtkImageMapper3D
    
    vtkImageResliceMapper will cut a 3D image with an abitrary slice
    plane and draw the results on the screen.  The slice can be set to
    automatically follow the camera, so that the camera controls the
    slicing.@par Thanks: Thanks to David Gobbi at the Seaman Family MR
    Centre and Dept. of Clinical Neurosciences, Foothills Medical Centre,
    Calgary, for providing this class.
    @sa
    vtkImageSlice vtkImageProperty vtkImageSliceMapper
    """
    def AutoAdjustImageQualityOff(self):
        """
        V.AutoAdjustImageQualityOff()
        C++: virtual void AutoAdjustImageQualityOff()
        
        Automatically reduce the rendering quality for greater speed when
        doing an interactive render.  This is on by default.
        """
        ...
    
    def AutoAdjustImageQualityOn(self):
        """
        V.AutoAdjustImageQualityOn()
        C++: virtual void AutoAdjustImageQualityOn()
        
        Automatically reduce the rendering quality for greater speed when
        doing an interactive render.  This is on by default.
        """
        ...
    
    def GetAutoAdjustImageQuality(self):
        """
        V.GetAutoAdjustImageQuality() -> int
        C++: virtual vtkTypeBool GetAutoAdjustImageQuality()
        
        Automatically reduce the rendering quality for greater speed when
        doing an interactive render.  This is on by default.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6]) override;
        
        The bounding box (array of six doubles) of the data expressed as
        (xmin,xmax, ymin,ymax, zmin,zmax).
        """
        ...
    
    def GetImageSampleFactor(self):
        """
        V.GetImageSampleFactor() -> int
        C++: virtual int GetImageSampleFactor()
        
        Set the reslice sample frequency as in relation to the input
        image sample frequency.  The default value is 1, but higher
        values can be used to improve the results.  This is cheaper than
        turning on ResampleToScreenPixels.
        """
        ...
    
    def GetImageSampleFactorMaxValue(self):
        """
        V.GetImageSampleFactorMaxValue() -> int
        C++: virtual int GetImageSampleFactorMaxValue()
        
        Set the reslice sample frequency as in relation to the input
        image sample frequency.  The default value is 1, but higher
        values can be used to improve the results.  This is cheaper than
        turning on ResampleToScreenPixels.
        """
        ...
    
    def GetImageSampleFactorMinValue(self):
        """
        V.GetImageSampleFactorMinValue() -> int
        C++: virtual int GetImageSampleFactorMinValue()
        
        Set the reslice sample frequency as in relation to the input
        image sample frequency.  The default value is 1, but higher
        values can be used to improve the results.  This is cheaper than
        turning on ResampleToScreenPixels.
        """
        ...
    
    def GetIndexBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetIndexBounds([float, float, float, float, float, float])
        C++: void GetIndexBounds(double extent[6]) override;
        """
        ...
    
    def GetInterpolator(self):
        """
        V.GetInterpolator() -> vtkAbstractImageInterpolator
        C++: virtual vtkAbstractImageInterpolator *GetInterpolator()
        
        Set a custom interpolator.  This will only be used if the
        ResampleToScreenPixels option is on.
        """
        ...
    
    def GetJumpToNearestSlice(self):
        """
        V.GetJumpToNearestSlice() -> int
        C++: virtual vtkTypeBool GetJumpToNearestSlice()
        
        When using SliceAtFocalPoint, this causes the slicing to occur at
        the closest slice to the focal point, instead of the default
        behavior where a new slice is interpolated between the original
        slices.  This flag is ignored if the slicing is oblique to the
        original slices.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the mtime for the mapper.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetResampleToScreenPixels(self):
        """
        V.GetResampleToScreenPixels() -> int
        C++: virtual vtkTypeBool GetResampleToScreenPixels()
        
        Resample the image directly to the screen pixels, instead of
        using a texture to scale the image after resampling.  This is
        slower and uses more memory, but provides high-quality results.
        It is On by default.
        """
        ...
    
    def GetSeparateWindowLevelOperation(self):
        """
        V.GetSeparateWindowLevelOperation() -> int
        C++: virtual vtkTypeBool GetSeparateWindowLevelOperation()
        
        Keep the color mapping stage distinct from the reslicing stage.
        This will improve the quality and possibly the speed of
        interactive window/level operations, but it uses more memory and
        might slow down interactive slicing operations.  On by default.
        """
        ...
    
    def GetSlabSampleFactor(self):
        """
        V.GetSlabSampleFactor() -> int
        C++: virtual int GetSlabSampleFactor()
        
        Set the number of slab samples to use as a factor of the number
        of input slices within the slab thickness.  The default value is
        2, but 1 will increase speed with very little loss of quality.
        """
        ...
    
    def GetSlabSampleFactorMaxValue(self):
        """
        V.GetSlabSampleFactorMaxValue() -> int
        C++: virtual int GetSlabSampleFactorMaxValue()
        
        Set the number of slab samples to use as a factor of the number
        of input slices within the slab thickness.  The default value is
        2, but 1 will increase speed with very little loss of quality.
        """
        ...
    
    def GetSlabSampleFactorMinValue(self):
        """
        V.GetSlabSampleFactorMinValue() -> int
        C++: virtual int GetSlabSampleFactorMinValue()
        
        Set the number of slab samples to use as a factor of the number
        of input slices within the slab thickness.  The default value is
        2, but 1 will increase speed with very little loss of quality.
        """
        ...
    
    def GetSlabThickness(self):
        """
        V.GetSlabThickness() -> float
        C++: virtual double GetSlabThickness()
        
        The slab thickness, for thick slicing (default: zero)
        """
        ...
    
    def GetSlabType(self):
        """
        V.GetSlabType() -> int
        C++: virtual int GetSlabType()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def GetSlabTypeAsString(self):
        """
        V.GetSlabTypeAsString() -> string
        C++: virtual const char *GetSlabTypeAsString()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def GetSlabTypeMaxValue(self):
        """
        V.GetSlabTypeMaxValue() -> int
        C++: virtual int GetSlabTypeMaxValue()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def GetSlabTypeMinValue(self):
        """
        V.GetSlabTypeMinValue() -> int
        C++: virtual int GetSlabTypeMinValue()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def JumpToNearestSliceOff(self):
        """
        V.JumpToNearestSliceOff()
        C++: virtual void JumpToNearestSliceOff()
        
        When using SliceAtFocalPoint, this causes the slicing to occur at
        the closest slice to the focal point, instead of the default
        behavior where a new slice is interpolated between the original
        slices.  This flag is ignored if the slicing is oblique to the
        original slices.
        """
        ...
    
    def JumpToNearestSliceOn(self):
        """
        V.JumpToNearestSliceOn()
        C++: virtual void JumpToNearestSliceOn()
        
        When using SliceAtFocalPoint, this causes the slicing to occur at
        the closest slice to the focal point, instead of the default
        behavior where a new slice is interpolated between the original
        slices.  This flag is ignored if the slicing is oblique to the
        original slices.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageResliceMapper
        C++: vtkImageResliceMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        mapper.  The parameter window is used to determine which graphic
        resources to release.
        """
        ...
    
    def Render(self, vtkRenderer, vtkImageSlice):
        """
        V.Render(vtkRenderer, vtkImageSlice)
        C++: void Render(vtkRenderer *renderer, vtkImageSlice *prop)
            override;
        
        This should only be called by the renderer.
        """
        ...
    
    def ResampleToScreenPixelsOff(self):
        """
        V.ResampleToScreenPixelsOff()
        C++: virtual void ResampleToScreenPixelsOff()
        
        Resample the image directly to the screen pixels, instead of
        using a texture to scale the image after resampling.  This is
        slower and uses more memory, but provides high-quality results.
        It is On by default.
        """
        ...
    
    def ResampleToScreenPixelsOn(self):
        """
        V.ResampleToScreenPixelsOn()
        C++: virtual void ResampleToScreenPixelsOn()
        
        Resample the image directly to the screen pixels, instead of
        using a texture to scale the image after resampling.  This is
        slower and uses more memory, but provides high-quality results.
        It is On by default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageResliceMapper
        C++: static vtkImageResliceMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SeparateWindowLevelOperationOff(self):
        """
        V.SeparateWindowLevelOperationOff()
        C++: virtual void SeparateWindowLevelOperationOff()
        
        Keep the color mapping stage distinct from the reslicing stage.
        This will improve the quality and possibly the speed of
        interactive window/level operations, but it uses more memory and
        might slow down interactive slicing operations.  On by default.
        """
        ...
    
    def SeparateWindowLevelOperationOn(self):
        """
        V.SeparateWindowLevelOperationOn()
        C++: virtual void SeparateWindowLevelOperationOn()
        
        Keep the color mapping stage distinct from the reslicing stage.
        This will improve the quality and possibly the speed of
        interactive window/level operations, but it uses more memory and
        might slow down interactive slicing operations.  On by default.
        """
        ...
    
    def SetAutoAdjustImageQuality(self, p_int):
        """
        V.SetAutoAdjustImageQuality(int)
        C++: virtual void SetAutoAdjustImageQuality(vtkTypeBool _arg)
        
        Automatically reduce the rendering quality for greater speed when
        doing an interactive render.  This is on by default.
        """
        ...
    
    def SetImageSampleFactor(self, p_int):
        """
        V.SetImageSampleFactor(int)
        C++: virtual void SetImageSampleFactor(int _arg)
        
        Set the reslice sample frequency as in relation to the input
        image sample frequency.  The default value is 1, but higher
        values can be used to improve the results.  This is cheaper than
        turning on ResampleToScreenPixels.
        """
        ...
    
    def SetInterpolator(self, vtkAbstractImageInterpolator):
        """
        V.SetInterpolator(vtkAbstractImageInterpolator)
        C++: virtual void SetInterpolator(
            vtkAbstractImageInterpolator *sampler)
        
        Set a custom interpolator.  This will only be used if the
        ResampleToScreenPixels option is on.
        """
        ...
    
    def SetJumpToNearestSlice(self, p_int):
        """
        V.SetJumpToNearestSlice(int)
        C++: virtual void SetJumpToNearestSlice(vtkTypeBool _arg)
        
        When using SliceAtFocalPoint, this causes the slicing to occur at
        the closest slice to the focal point, instead of the default
        behavior where a new slice is interpolated between the original
        slices.  This flag is ignored if the slicing is oblique to the
        original slices.
        """
        ...
    
    def SetResampleToScreenPixels(self, p_int):
        """
        V.SetResampleToScreenPixels(int)
        C++: virtual void SetResampleToScreenPixels(vtkTypeBool _arg)
        
        Resample the image directly to the screen pixels, instead of
        using a texture to scale the image after resampling.  This is
        slower and uses more memory, but provides high-quality results.
        It is On by default.
        """
        ...
    
    def SetSeparateWindowLevelOperation(self, p_int):
        """
        V.SetSeparateWindowLevelOperation(int)
        C++: virtual void SetSeparateWindowLevelOperation(
            vtkTypeBool _arg)
        
        Keep the color mapping stage distinct from the reslicing stage.
        This will improve the quality and possibly the speed of
        interactive window/level operations, but it uses more memory and
        might slow down interactive slicing operations.  On by default.
        """
        ...
    
    def SetSlabSampleFactor(self, p_int):
        """
        V.SetSlabSampleFactor(int)
        C++: virtual void SetSlabSampleFactor(int _arg)
        
        Set the number of slab samples to use as a factor of the number
        of input slices within the slab thickness.  The default value is
        2, but 1 will increase speed with very little loss of quality.
        """
        ...
    
    def SetSlabThickness(self, p_float):
        """
        V.SetSlabThickness(float)
        C++: virtual void SetSlabThickness(double _arg)
        
        The slab thickness, for thick slicing (default: zero)
        """
        ...
    
    def SetSlabType(self, p_int):
        """
        V.SetSlabType(int)
        C++: virtual void SetSlabType(int _arg)
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def SetSlabTypeToMax(self):
        """
        V.SetSlabTypeToMax()
        C++: void SetSlabTypeToMax()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def SetSlabTypeToMean(self):
        """
        V.SetSlabTypeToMean()
        C++: void SetSlabTypeToMean()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def SetSlabTypeToMin(self):
        """
        V.SetSlabTypeToMin()
        C++: void SetSlabTypeToMin()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def SetSlabTypeToSum(self):
        """
        V.SetSlabTypeToSum()
        C++: void SetSlabTypeToSum()
        
        The slab type, for thick slicing (default: Mean). The resulting
        view is a parallel projection through the volume.  This method
        can be used to generate a facsimile of a digitally-reconstructed
        radiograph or a minimum-intensity projection as long as
        perspective geometry is not required.  Note that the Sum mode
        provides an output with units of intensity times distance, while
        all other modes provide an output with units of intensity.
        """
        ...
    
    def SetSlicePlane(self, vtkPlane):
        """
        V.SetSlicePlane(vtkPlane)
        C++: virtual void SetSlicePlane(vtkPlane *plane)
        
        Set the slice that will be used to cut through the image. This
        slice should be in world coordinates, rather than data
        coordinates.  Use SliceFacesCamera and SliceAtFocalPoint if you
        want the slice to automatically follow the camera.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSliceCollection(__vtkmodules_vtkRenderingCore.vtkPropCollection):
    """
    vtkImageSliceCollection - a sorted list of image slice objects
    
    Superclass: vtkPropCollection
    
    vtkImageSliceCollection is a vtkPropCollection that maintains a list
    of vtkImageSlice objects that are sorted by LayerNumber. This allows
    the images to be rendered in the correct order.
    @sa
    vtkImageSlice vtkImageAssembly
    """
    def AddItem(self, vtkImageSlice):
        """
        V.AddItem(vtkImageSlice)
        C++: void AddItem(vtkImageSlice *a)
        
        Add an image to the list.  The new image is inserted in the list
        according to its layer number.
        """
        ...
    
    def GetNextImage(self):
        """
        V.GetNextImage() -> vtkImageSlice
        C++: vtkImageSlice *GetNextImage()
        
        Standard Collection methods.  You must call InitTraversal before
        calling GetNextImage.  If possible, you should use the
        GetNextImage method that takes a collection iterator instead.
        """
        ...
    
    def GetNextItem(self):
        """
        V.GetNextItem() -> vtkImageSlice
        C++: vtkImageSlice *GetNextItem()
        
        Access routine provided for compatibility with previous versions
        of VTK.  Please use the GetNextImage() variant where possible.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSliceCollection
        C++: vtkImageSliceCollection *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSliceCollection
        C++: static vtkImageSliceCollection *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def Sort(self):
        """
        V.Sort()
        C++: void Sort()
        
        Sorts the vtkImageSliceCollection by layer number.  Smaller layer
        numbers are first. Layer numbers can be any integer value. Items
        with the same layer number will be kept in the same relative
        order as before the sort.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageStack(__vtkmodules_vtkRenderingCore.vtkImageSlice):
    """
    vtkImageStack - manages a stack of composited images
    
    Superclass: vtkImageSlice
    
    vtkImageStack manages the compositing of a set of images. Each image
    is assigned a layer number through its property object, and it is
    this layer number that determines the compositing order: images with
    a higher layer number are drawn over top of images with a lower layer
    number.  The image stack has a SetActiveLayer method for controlling
    which layer to use for interaction and picking.@par Thanks: Thanks to
    David Gobbi at the Seaman Family MR Centre and Dept. of Clinical
    Neurosciences, Foothills Medical Centre, Calgary, for providing this
    class.
    @sa
    vtkImageMapper3D vtkImageProperty vtkProp3D
    """
    def AddImage(self, vtkImageSlice):
        """
        V.AddImage(vtkImageSlice)
        C++: void AddImage(vtkImageSlice *prop)
        
        Add an image to the stack.  If the image is already present, then
        this method will do nothing.
        """
        ...
    
    def BuildPaths(self, vtkAssemblyPaths, vtkAssemblyPath):
        """
        V.BuildPaths(vtkAssemblyPaths, vtkAssemblyPath)
        C++: void BuildPaths(vtkAssemblyPaths *paths,
            vtkAssemblyPath *path) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS Used to
        construct assembly paths and perform part traversal.
        """
        ...
    
    def GetActiveImage(self):
        """
        V.GetActiveImage() -> vtkImageSlice
        C++: vtkImageSlice *GetActiveImage()
        
        Get the active image.  This will be the topmost image whose
        LayerNumber is the ActiveLayer.  If no image matches, then NULL
        will be returned.
        """
        ...
    
    def GetActiveLayer(self):
        """
        V.GetActiveLayer() -> int
        C++: int GetActiveLayer()
        
        Set the active layer number.  This is the layer that will be used
        for picking and interaction.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Get the combined bounds of all of the images.
        """
        ...
    
    def GetImages(self):
        """
        V.GetImages() -> vtkImageSliceCollection
        C++: vtkImageSliceCollection *GetImages()
        V.GetImages(vtkPropCollection)
        C++: void GetImages(vtkPropCollection *)
        
        Get the list of images as a vtkImageSliceCollection.
        """
        ...
    
    def GetMapper(self):
        """
        V.GetMapper() -> vtkImageMapper3D
        C++: vtkImageMapper3D *GetMapper() override;
        
        Get the mapper for the currently active image.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the max MTime of all the images.
        """
        ...
    
    def GetNextPath(self):
        """
        V.GetNextPath() -> vtkAssemblyPath
        C++: vtkAssemblyPath *GetNextPath() override;
        
        Methods for traversing the stack as if it was an assembly. The
        traversal only gives the view prop for the active layer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPaths(self):
        """
        V.GetNumberOfPaths() -> int
        C++: int GetNumberOfPaths() override;
        
        Methods for traversing the stack as if it was an assembly. The
        traversal only gives the view prop for the active layer.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkImageProperty
        C++: vtkImageProperty *GetProperty() override;
        
        Get the property for the currently active image.
        """
        ...
    
    def GetRedrawMTime(self):
        """
        V.GetRedrawMTime() -> int
        C++: vtkMTimeType GetRedrawMTime() override;
        
        Return the mtime of anything that would cause the rendered image
        to appear differently. Usually this involves checking the mtime
        of the prop plus anything else it depends on such as properties,
        mappers, etc.
        """
        ...
    
    def HasImage(self, vtkImageSlice):
        """
        V.HasImage(vtkImageSlice) -> int
        C++: int HasImage(vtkImageSlice *prop)
        
        Check if an image is present.  The returned value is one or zero.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def InitPathTraversal(self):
        """
        V.InitPathTraversal()
        C++: void InitPathTraversal() override;
        
        Methods for traversing the stack as if it was an assembly. The
        traversal only gives the view prop for the active layer.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageStack
        C++: vtkImageStack *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *win) override;
        
        Release any resources held by this prop.
        """
        ...
    
    def RemoveImage(self, vtkImageSlice):
        """
        V.RemoveImage(vtkImageSlice)
        C++: void RemoveImage(vtkImageSlice *prop)
        
        Remove an image from the stack.  If the image is not present,
        then this method will do nothing.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Support the standard render methods.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Support the standard render methods.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Support the standard render methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageStack
        C++: static vtkImageStack *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetActiveLayer(self, p_int):
        """
        V.SetActiveLayer(int)
        C++: virtual void SetActiveLayer(int _arg)
        
        Set the active layer number.  This is the layer that will be used
        for picking and interaction.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of this prop. Overloads the virtual vtkProp method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
