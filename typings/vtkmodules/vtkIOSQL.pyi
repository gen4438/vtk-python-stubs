"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOCore as __vtkmodules_vtkIOCore

VTK_SQL_ALLBACKENDS = ...
VTK_SQL_DEFAULT_COLUMN_SIZE = ...
VTK_SQL_FEATURE_BATCH_OPERATIONS = ...
VTK_SQL_FEATURE_BLOB = ...
VTK_SQL_FEATURE_LAST_INSERT_ID = ...
VTK_SQL_FEATURE_NAMED_PLACEHOLDERS = ...
VTK_SQL_FEATURE_POSITIONAL_PLACEHOLDERS = ...
VTK_SQL_FEATURE_PREPARED_QUERIES = ...
VTK_SQL_FEATURE_QUERY_SIZE = ...
VTK_SQL_FEATURE_TRANSACTIONS = ...
VTK_SQL_FEATURE_TRIGGERS = ...
VTK_SQL_FEATURE_UNICODE = ...
VTK_SQL_MYSQL = ...
VTK_SQL_POSTGRESQL = ...
VTK_SQL_SQLITE = ...
class vtkDatabaseToTableReader(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkDatabaseToTableReader - Read an SQL table as a vtkTable
    
    Superclass: vtkTableAlgorithm
    
    vtkDatabaseToTableReader reads a table from an SQL database,
    outputting it as a vtkTable.
    """
    def CheckIfTableExists(self):
        """
        V.CheckIfTableExists() -> bool
        C++: bool CheckIfTableExists()
        
        Check if the currently specified table name exists in the
        database.
        """
        ...
    
    def GetDatabase(self):
        """
        V.GetDatabase() -> vtkSQLDatabase
        C++: vtkSQLDatabase *GetDatabase()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDatabaseToTableReader
        C++: vtkDatabaseToTableReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDatabaseToTableReader
        C++: static vtkDatabaseToTableReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDatabase(self, vtkSQLDatabase):
        """
        V.SetDatabase(vtkSQLDatabase) -> bool
        C++: bool SetDatabase(vtkSQLDatabase *db)
        
        Set the database associated with this reader
        """
        ...
    
    def SetTableName(self, string):
        """
        V.SetTableName(string) -> bool
        C++: bool SetTableName(const char *name)
        
        Set the name of the table that you'd like to convert to a
        vtkTable Returns false if the specified table does not exist in
        the database.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRowQuery(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkRowQuery - abstract interface for queries that return row-oriented
    results.
    
    Superclass: vtkObject
    
    The abstract superclass of query classes that return row-oriented
    (table) results.  A subclass will provide database-specific query
    parameters and implement the vtkRowQuery API to return query results:
    
    Execute() - Execute the query.  No results need to be retrieved at
    this
                point, unless you are performing caching.
    
    GetNumberOfFields() - After Execute() is performed, returns the
    number
                          of fields in the query results.
    
    GetFieldName() - The name of the field at an index.
    
    GetFieldType() - The data type of the field at an index.
    
    NextRow() - Advances the query results by one row, and returns
    whether
                there are more rows left in the query.
    
    DataValue() - Extract a single data value from the current row.
    
    @par Thanks: Thanks to Andrew Wilson from Sandia National
    Laboratories for his work on the database classes.
    
    @sa
    vtkRowQueryToTable
    """
    def CaseSensitiveFieldNamesOff(self):
        """
        V.CaseSensitiveFieldNamesOff()
        C++: virtual void CaseSensitiveFieldNamesOff()
        
        Many databases do not preserve case in field names.  This can
        cause GetFieldIndex to fail if you search for a field named
        someFieldName when the database actually stores it as
        SOMEFIELDNAME.  This ivar controls whether GetFieldIndex()
        expects field names to be case-sensitive.  The default is OFF,
        i.e. case is not preserved.
        """
        ...
    
    def CaseSensitiveFieldNamesOn(self):
        """
        V.CaseSensitiveFieldNamesOn()
        C++: virtual void CaseSensitiveFieldNamesOn()
        
        Many databases do not preserve case in field names.  This can
        cause GetFieldIndex to fail if you search for a field named
        someFieldName when the database actually stores it as
        SOMEFIELDNAME.  This ivar controls whether GetFieldIndex()
        expects field names to be case-sensitive.  The default is OFF,
        i.e. case is not preserved.
        """
        ...
    
    def DataValue(self, p_int):
        """
        V.DataValue(int) -> vtkVariant
        C++: virtual vtkVariant DataValue(vtkIdType c)
        
        Return data in current row, field c
        """
        ...
    
    def Execute(self):
        """
        V.Execute() -> bool
        C++: virtual bool Execute()
        
        Execute the query.  This must be performed before any field name
        or data access functions are used.
        """
        ...
    
    def GetCaseSensitiveFieldNames(self):
        """
        V.GetCaseSensitiveFieldNames() -> bool
        C++: virtual bool GetCaseSensitiveFieldNames()
        
        Many databases do not preserve case in field names.  This can
        cause GetFieldIndex to fail if you search for a field named
        someFieldName when the database actually stores it as
        SOMEFIELDNAME.  This ivar controls whether GetFieldIndex()
        expects field names to be case-sensitive.  The default is OFF,
        i.e. case is not preserved.
        """
        ...
    
    def GetFieldIndex(self, string):
        """
        V.GetFieldIndex(string) -> int
        C++: int GetFieldIndex(const char *name)
        
        Return the index of the specified query field. Uses
        GetNumberOfFields() and GetFieldName() to match field name.
        """
        ...
    
    def GetFieldName(self, p_int):
        """
        V.GetFieldName(int) -> string
        C++: virtual const char *GetFieldName(int i)
        
        Return the name of the specified query field.
        """
        ...
    
    def GetFieldType(self, p_int):
        """
        V.GetFieldType(int) -> int
        C++: virtual int GetFieldType(int i)
        
        Return the type of the field, using the constants defined in
        vtkType.h.
        """
        ...
    
    def GetLastErrorText(self):
        """
        V.GetLastErrorText() -> string
        C++: virtual const char *GetLastErrorText()
        
        Get the last error text from the query
        """
        ...
    
    def GetNumberOfFields(self):
        """
        V.GetNumberOfFields() -> int
        C++: virtual int GetNumberOfFields()
        
        The number of fields in the query result.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HasError(self):
        """
        V.HasError() -> bool
        C++: virtual bool HasError()
        
        Returns true if an error is set, otherwise false.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsActive(self):
        """
        V.IsActive() -> bool
        C++: virtual bool IsActive()
        
        Return true if the query is active (i.e. execution was successful
        and results are ready to be fetched).  Returns false on error or
        inactive query.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRowQuery
        C++: vtkRowQuery *NewInstance()
        """
        ...
    
    def NextRow(self):
        """
        V.NextRow() -> bool
        C++: virtual bool NextRow()
        V.NextRow(vtkVariantArray) -> bool
        C++: bool NextRow(vtkVariantArray *rowArray)
        
        Advance row, return false if past end.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRowQuery
        C++: static vtkRowQuery *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCaseSensitiveFieldNames(self, bool):
        """
        V.SetCaseSensitiveFieldNames(bool)
        C++: virtual void SetCaseSensitiveFieldNames(bool _arg)
        
        Many databases do not preserve case in field names.  This can
        cause GetFieldIndex to fail if you search for a field named
        someFieldName when the database actually stores it as
        SOMEFIELDNAME.  This ivar controls whether GetFieldIndex()
        expects field names to be case-sensitive.  The default is OFF,
        i.e. case is not preserved.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRowQueryToTable(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkRowQueryToTable - executes an sql query and retrieves results into
    a table
    
    Superclass: vtkTableAlgorithm
    
    vtkRowQueryToTable creates a vtkTable with the results of an
    arbitrary SQL query.  To use this filter, you first need an instance
    of a vtkSQLDatabase subclass.  You may use the database class to
    obtain a vtkRowQuery instance. Set that query on this filter to
    extract the query as a table.
    
    @par Thanks: Thanks to Andrew Wilson from Sandia National
    Laboratories for his work on the database classes.
    
    @sa
    vtkSQLDatabase vtkRowQuery
    """
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Update the modified time based on the query.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQuery(self):
        """
        V.GetQuery() -> vtkRowQuery
        C++: virtual vtkRowQuery *GetQuery()
        
        The query to execute.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRowQueryToTable
        C++: vtkRowQueryToTable *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRowQueryToTable
        C++: static vtkRowQueryToTable *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetQuery(self, vtkRowQuery):
        """
        V.SetQuery(vtkRowQuery)
        C++: void SetQuery(vtkRowQuery *query)
        
        The query to execute.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSQLDatabase(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkSQLDatabase - maintain a connection to an sql database
    
    Superclass: vtkObject
    
    Abstract base class for all SQL database connection classes. Manages
    a connection to the database, and is responsible for creating
    instances of the associated vtkSQLQuery objects associated with this
    class in order to perform execute queries on the database. To allow
    connections to a new type of database, create both a subclass of this
    class and vtkSQLQuery, and implement the required functions:
    
    Open() - open the database connection, if possible. Close() - close
    the connection. GetQueryInstance() - create and return an instance of
    the vtkSQLQuery
                         subclass associated with the database type.
    
    The subclass should also provide API to set connection parameters.
    
    This class also provides the function EffectSchema to transform a
    database schema into a SQL database.
    
    @par Thanks: Thanks to Andrew Wilson from Sandia National
    Laboratories for his work on the database classes and for the SQLite
    example. Thanks to David Thompson and Philippe Pebay from Sandia
    National Laboratories for implementing this class.
    
    @sa
    vtkSQLQuery vtkSQLDatabaseSchema
    """
    def Close(self):
        """
        V.Close()
        C++: virtual void Close()
        
        Close the connection to the database.
        """
        ...
    
    def CreateFromURL(self, string):
        """
        V.CreateFromURL(string) -> vtkSQLDatabase
        C++: static vtkSQLDatabase *CreateFromURL(const char *URL)
        
        Create a the proper subclass given a URL. The URL format for SQL
        databases is a true URL of the form:
        'protocol://'[[username[':'password]'@']hostname[':'port]]'/'[dbna
        me] .
        """
        ...
    
    def DATABASE(self):
        """
        V.DATABASE() -> vtkInformationObjectBaseKey
        C++: static vtkInformationObjectBaseKey *DATABASE()
        
        Stores the database class pointer as an information key. This is
        currently used to store database pointers as part of 'data on
        demand' data objects. For example: The application may have a
        table/tree/whatever of documents, the data structure is storing
        the meta-data but not the full text. Further down the pipeline
        algorithms or views may want to retrieve additional information
        (full text)for specific documents.
        """
        ...
    
    def EffectSchema(self, vtkSQLDatabaseSchema, bool):
        """
        V.EffectSchema(vtkSQLDatabaseSchema, bool) -> bool
        C++: virtual bool EffectSchema(vtkSQLDatabaseSchema *,
            bool dropIfExists=false)
        
        Effect a database schema.
        """
        ...
    
    def GetColumnSpecification(self, vtkSQLDatabaseSchema, p_int, p_int_1):
        """
        V.GetColumnSpecification(vtkSQLDatabaseSchema, int, int) -> string
        C++: virtual vtkStdString GetColumnSpecification(
            vtkSQLDatabaseSchema *schema, int tblHandle, int colHandle)
        
        Return the SQL string with the syntax to create a column inside a "CREATE
        TABLE" SQL statement. NB: this method implements the following
        minimally-portable syntax: <column name> <column type> <column
        attributes> It must be overwritten for those SQL backends which
        have a different syntax such as, e.g., MySQL.
        """
        ...
    
    def GetDatabaseType(self):
        """
        V.GetDatabaseType() -> string
        C++: virtual const char *GetDatabaseType()
        
        Get the type of the database (e.g. mysql, psql,..).
        """
        ...
    
    def GetIndexSpecification(self, vtkSQLDatabaseSchema, p_int, p_int_1, bool):
        """
        V.GetIndexSpecification(vtkSQLDatabaseSchema, int, int, bool)
            -> string
        C++: virtual vtkStdString GetIndexSpecification(
            vtkSQLDatabaseSchema *schema, int tblHandle, int idxHandle,
            bool &skipped)
        
        Return the SQL string with the syntax to create an index inside a "CREATE
        TABLE" SQL statement. NB1: this method implements the following
        minimally-portable syntax: <index type> [<index name>] (<column
        name 1>,... ) It must be overwritten for those SQL backends which
        have a different syntax such as, e.g., MySQL. NB2: this method
        does not assume that INDEX creation is supported within a CREATE
        TABLE statement. Therefore, should such an INDEX arise in the
        schema, a CREATE INDEX statement is returned and skipped is set
        to true. Otherwise, skipped will always be returned false.
        """
        ...
    
    def GetLastErrorText(self):
        """
        V.GetLastErrorText() -> string
        C++: virtual const char *GetLastErrorText()
        
        Get the last error text from the database I'm using const so that
        people do NOT use the standard vtkGetStringMacro in their
        implementation, because 99% of the time that will not be the
        correct thing to do...
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQueryInstance(self):
        """
        V.GetQueryInstance() -> vtkSQLQuery
        C++: virtual vtkSQLQuery *GetQueryInstance()
        
        Return an empty query on this database.
        """
        ...
    
    def GetRecord(self, string):
        """
        V.GetRecord(string) -> vtkStringArray
        C++: virtual vtkStringArray *GetRecord(const char *table)
        
        Get the list of fields for a particular table.
        """
        ...
    
    def GetTablePreamble(self, bool):
        """
        V.GetTablePreamble(bool) -> string
        C++: virtual vtkStdString GetTablePreamble(bool)
        
        Return the SQL string with the syntax of the preamble following a "CREATE
        TABLE" SQL statement. NB: by default, this method returns an
        empty string. It must be overwritten for those SQL backends which
        allow such preambles such as, e.g., MySQL.
        """
        ...
    
    def GetTables(self):
        """
        V.GetTables() -> vtkStringArray
        C++: virtual vtkStringArray *GetTables()
        
        Get the list of tables from the database.
        """
        ...
    
    def GetTriggerSpecification(self, vtkSQLDatabaseSchema, p_int, p_int_1):
        """
        V.GetTriggerSpecification(vtkSQLDatabaseSchema, int, int)
            -> string
        C++: virtual vtkStdString GetTriggerSpecification(
            vtkSQLDatabaseSchema *schema, int tblHandle, int trgHandle)
        
        Return the SQL string with the syntax to create a trigger using a "CREATE
        TRIGGER" SQL statement. NB1: support is contingent on
        VTK_FEATURE_TRIGGERS being recognized as a supported feature. Not
        all backends (e.g., SQLite) support it. NB2: this method
        implements the following minimally-portable syntax: <trigger
        name> {BEFORE | AFTER} ON <table name> FOR EACH ROW <trigger
        action> It must be overwritten for those SQL backends which have
        a different syntax such as, e.g., PostgreSQL.
        """
        ...
    
    def GetURL(self):
        """
        V.GetURL() -> string
        C++: virtual vtkStdString GetURL()
        
        Get the URL of the database.
        """
        ...
    
    def HasError(self):
        """
        V.HasError() -> bool
        C++: virtual bool HasError()
        
        Did the last operation generate an error
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsOpen(self):
        """
        V.IsOpen() -> bool
        C++: virtual bool IsOpen()
        
        Return whether the database has an open connection.
        """
        ...
    
    def IsSupported(self, p_int):
        """
        V.IsSupported(int) -> bool
        C++: virtual bool IsSupported(int feature)
        
        Return whether a feature is supported by the database.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSQLDatabase
        C++: vtkSQLDatabase *NewInstance()
        """
        ...
    
    def Open(self, string):
        """
        V.Open(string) -> bool
        C++: virtual bool Open(const char *password)
        
        Open a new connection to the database. You need to set up any
        database parameters before calling this function. For database
        connections that do not require a password, pass an empty string.
        Returns true is the database was opened successfully, and false
        otherwise.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSQLDatabase
        C++: static vtkSQLDatabase *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def UnRegisterAllCreateFromURLCallbacks(self):
        """
        V.UnRegisterAllCreateFromURLCallbacks()
        C++: static void UnRegisterAllCreateFromURLCallbacks()
        
        Provides mechanism to register/unregister additional callbacks to
        create concrete subclasses of vtkSQLDatabase to handle different
        protocols. The registered callbacks are tried in the order they
        are registered.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSQLDatabaseSchema(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkSQLDatabaseSchema - represent an SQL database schema
    
    Superclass: vtkObject
    
    This class stores the information required to create an SQL database
    from scratch. Information on each table's columns, indices, and
    triggers is stored. You may also store an arbitrary number of
    preamble statements, intended to be executed before any tables are
    created; this provides a way to create procedures or functions that
    may be invoked as part of a trigger action. Triggers and table
    options may be specified differently for each backend database type
    you wish to support.
    
    @par Thanks: Thanks to Philippe Pebay and David Thompson from Sandia
    National Laboratories for implementing this class.
    
    @sa
    vtkSQLDatabase
    """
    def AddColumnToIndex(self, p_int, p_int_1, p_int_2):
        """
        V.AddColumnToIndex(int, int, int) -> int
        C++: virtual int AddColumnToIndex(int tblHandle, int idxHandle,
            int colHandle)
        V.AddColumnToIndex(string, string, string) -> int
        C++: virtual int AddColumnToIndex(const char *tblName,
            const char *idxName, const char *colName)
        
        Add a column to a table index.
        
        * The returned value is an index-column handle or -1 if an error
          occurred.
        """
        ...
    
    def AddColumnToTable(self, p_int, p_int_1, string, p_int_2, string_1):
        """
        V.AddColumnToTable(int, int, string, int, string) -> int
        C++: virtual int AddColumnToTable(int tblHandle, int colType,
            const char *colName, int colSize, const char *colAttribs)
        V.AddColumnToTable(string, int, string, int, string) -> int
        C++: virtual int AddColumnToTable(const char *tblName,
            int colType, const char *colName, int colSize,
            const char *colAttribs)
        
        Add a column to table.
        
        * The returned value is a column handle or -1 if an error
          occurred.
        """
        ...
    
    def AddIndexToTable(self, p_int, p_int_1, string):
        """
        V.AddIndexToTable(int, int, string) -> int
        C++: virtual int AddIndexToTable(int tblHandle, int idxType,
            const char *idxName)
        V.AddIndexToTable(string, int, string) -> int
        C++: virtual int AddIndexToTable(const char *tblName, int idxType,
             const char *idxName)
        
        Add an index to table.
        
        * The returned value is an index handle or -1 if an error
          occurred.
        """
        ...
    
    def AddOptionToTable(self, p_int, string, string_1):
        """
        V.AddOptionToTable(int, string, string) -> int
        C++: virtual int AddOptionToTable(int tblHandle,
            const char *optStr,
            const char *optBackend=VTK_SQL_ALLBACKENDS)
        V.AddOptionToTable(string, string, string) -> int
        C++: virtual int AddOptionToTable(const char *tblName,
            const char *optStr,
            const char *optBackend=VTK_SQL_ALLBACKENDS)
        
        Add (possibly backend-specific) text to the end of a CREATE TABLE
        (...) statement.
        
        * This is most useful for specifying storage semantics of tables
        * that are specific to the backend. For example, table options
        * can be used to specify the TABLESPACE of a PostgreSQL table or
        * the ENGINE of a MySQL table.
        
        * The returned value is an option handle or -1 if an error
          occurred.
        """
        ...
    
    def AddPreamble(self, string, string_1, string_2):
        """
        V.AddPreamble(string, string, string) -> int
        C++: virtual int AddPreamble(const char *preName,
            const char *preAction,
            const char *preBackend=VTK_SQL_ALLBACKENDS)
        
        Add a preamble to the schema This can be used, in particular, to
        create functions and/or load languages in a backend-specific
        manner. Example usage: vtkSQLDatabaseSchema* schema =
        vtkSQLDatabaseSchema::New(); schema->SetName( "Example" );
        schema->AddPreamble( "dropPLPGSQL", "DROP LANGUAGE IF EXISTS PLPGSQL
        CASCADE", VTK_SQL_POSTGRESQL ); schema->AddPreamble(
        "loadPLPGSQL", "CREATE LANGUAGE PLPGSQL", VTK_SQL_POSTGRESQL );
        schema->AddPreamble( "createsomefunction", "CREATE OR REPLACE
        FUNCTION somefunction() RETURNS TRIGGER AS $btable$ " "BEGIN "
        "INSERT INTO btable (somevalue) VALUES (NEW.somenmbr); " "RETURN
        NEW; " "END; $btable$ LANGUAGE PLPGSQL", VTK_SQL_POSTGRESQL );
        """
        ...
    
    def AddTable(self, string):
        """
        V.AddTable(string) -> int
        C++: virtual int AddTable(const char *tblName)
        
        Add a table to the schema
        """
        ...
    
    def AddTableMultipleArguments(self, string):
        """
        V.AddTableMultipleArguments(string) -> int
        C++: int AddTableMultipleArguments(const char *tblName, ...)
        
        An unwrappable but useful routine to construct built-in schema.
        Example usage: int main() { vtkSQLDatabaseSchema* schema =
        vtkSQLDatabaseSchema::New(); schema->SetName( "Example" );
        schema->AddTableMultipleArguments( "atable",
        vtkSQLDatabaseSchema::COLUMN_TOKEN,
        vtkSQLDatabaseSchema::INTEGER, "tablekey",  0, "",
        vtkSQLDatabaseSchema::COLUMN_TOKEN,
        vtkSQLDatabaseSchema::VARCHAR, "somename", 11, "NOT nullptr", vtkSQLDatabaseSchema::COLUMN_TOKEN, vtkSQLDatabaseSchema::BIGINT, 
        "somenmbr", 17, "DEFAULT 0", vtkSQLDatabaseSchema::INDEX_TOKEN,
        vtkSQLDatabaseSchema::PRIMARY_KEY, "bigkey",
        vtkSQLDatabaseSchema::INDEX_COLUMN_TOKEN, "tablekey",
        vtkSQLDatabaseSchema::END_INDEX_TOKEN,
        vtkSQLDatabaseSchema::INDEX_TOKEN,  vtkSQLDatabaseSchema::UNIQUE,
        "reverselookup", vtkSQLDatabaseSchema::INDEX_COLUMN_TOKEN,
        "somename", vtkSQLDatabaseSchema::INDEX_COLUMN_TOKEN, "somenmbr",
        vtkSQLDatabaseSchema::END_INDEX_TOKEN,
        vtkSQLDatabaseSchema::TRIGGER_TOKEN, 
        vtkSQLDatabaseSchema::AFTER_INSERT, "InsertTrigger", "DO
        NOTHING", VTK_SQL_SQLITE, vtkSQLDatabaseSchema::TRIGGER_TOKEN, 
        vtkSQLDatabaseSchema::AFTER_INSERT, "InsertTrigger", "FOR EACH ROW EXECUTE PROCEDURE somefunction
        ()", VTK_SQL_POSTGRESQL, vtkSQLDatabaseSchema::TRIGGER_TOKEN, 
        vtkSQLDatabaseSchema::AFTER_INSERT, "InsertTrigger", "FOR EACH ROW INSERT INTO btable SET SomeValue =
        NEW.SomeNmbr", VTK_SQL_MYSQL,
        vtkSQLDatabaseSchema::END_TABLE_TOKEN ); return 0; }
        """
        ...
    
    def AddTriggerToTable(self, p_int, p_int_1, string, string_1, string_2):
        """
        V.AddTriggerToTable(int, int, string, string, string) -> int
        C++: virtual int AddTriggerToTable(int tblHandle, int trgType,
            const char *trgName, const char *trgAction,
            const char *trgBackend=VTK_SQL_ALLBACKENDS)
        V.AddTriggerToTable(string, int, string, string, string) -> int
        C++: virtual int AddTriggerToTable(const char *tblName,
            int trgType, const char *trgName, const char *trgAction,
            const char *trgBackend=VTK_SQL_ALLBACKENDS)
        
        Add a (possibly backend-specific) trigger action to a table.
        
        * Triggers must be given unique, non-nullptr names as some
          database backends require them.
        * The returned value is a trigger handle or -1 if an error
          occurred.
        """
        ...
    
    def GetColumnAttributesFromHandle(self, p_int, p_int_1):
        """
        V.GetColumnAttributesFromHandle(int, int) -> string
        C++: const char *GetColumnAttributesFromHandle(int tblHandle,
            int colHandle)
        
        Given the handles of a table and a column, get the attributes of
        the column.
        """
        ...
    
    def GetColumnHandleFromName(self, string, string_1):
        """
        V.GetColumnHandleFromName(string, string) -> int
        C++: int GetColumnHandleFromName(const char *tblName,
            const char *colName)
        
        Given the names of a table and a column, get the handle of the
        column in this table.
        """
        ...
    
    def GetColumnNameFromHandle(self, p_int, p_int_1):
        """
        V.GetColumnNameFromHandle(int, int) -> string
        C++: const char *GetColumnNameFromHandle(int tblHandle,
            int colHandle)
        
        Given the handles of a table and a column, get the name of the
        column.
        """
        ...
    
    def GetColumnSizeFromHandle(self, p_int, p_int_1):
        """
        V.GetColumnSizeFromHandle(int, int) -> int
        C++: int GetColumnSizeFromHandle(int tblHandle, int colHandle)
        
        Given the handles of a table and a column, get the size of the
        column.
        """
        ...
    
    def GetColumnTypeFromHandle(self, p_int, p_int_1):
        """
        V.GetColumnTypeFromHandle(int, int) -> int
        C++: int GetColumnTypeFromHandle(int tblHandle, int colHandle)
        
        Given the handles of a table and a column, get the type of the
        column.
        """
        ...
    
    def GetIndexColumnNameFromHandle(self, p_int, p_int_1, p_int_2):
        """
        V.GetIndexColumnNameFromHandle(int, int, int) -> string
        C++: const char *GetIndexColumnNameFromHandle(int tblHandle,
            int idxHandle, int cnmHandle)
        
        Given the handles of a table, an index, and a column name, get
        the column name.
        """
        ...
    
    def GetIndexHandleFromName(self, string, string_1):
        """
        V.GetIndexHandleFromName(string, string) -> int
        C++: int GetIndexHandleFromName(const char *tblName,
            const char *idxName)
        
        Given the names of a table and an index, get the handle of the
        index in this table.
        """
        ...
    
    def GetIndexNameFromHandle(self, p_int, p_int_1):
        """
        V.GetIndexNameFromHandle(int, int) -> string
        C++: const char *GetIndexNameFromHandle(int tblHandle,
            int idxHandle)
        
        Given the handles of a table and an index, get the name of the
        index.
        """
        ...
    
    def GetIndexTypeFromHandle(self, p_int, p_int_1):
        """
        V.GetIndexTypeFromHandle(int, int) -> int
        C++: int GetIndexTypeFromHandle(int tblHandle, int idxHandle)
        
        Given the handles of a table and an index, get the type of the
        index.
        """
        ...
    
    def GetName(self):
        """
        V.GetName() -> string
        C++: virtual char *GetName()
        
        Set/Get the name of the schema.
        """
        ...
    
    def GetNumberOfColumnNamesInIndex(self, p_int, p_int_1):
        """
        V.GetNumberOfColumnNamesInIndex(int, int) -> int
        C++: int GetNumberOfColumnNamesInIndex(int tblHandle,
            int idxHandle)
        
        Get the number of column names associated to a particular index
        in a particular table .
        """
        ...
    
    def GetNumberOfColumnsInTable(self, p_int):
        """
        V.GetNumberOfColumnsInTable(int) -> int
        C++: int GetNumberOfColumnsInTable(int tblHandle)
        
        Get the number of columns in a particular table .
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfIndicesInTable(self, p_int):
        """
        V.GetNumberOfIndicesInTable(int) -> int
        C++: int GetNumberOfIndicesInTable(int tblHandle)
        
        Get the number of indices in a particular table .
        """
        ...
    
    def GetNumberOfOptionsInTable(self, p_int):
        """
        V.GetNumberOfOptionsInTable(int) -> int
        C++: int GetNumberOfOptionsInTable(int tblHandle)
        
        Get the number of options associated with a particular table.
        """
        ...
    
    def GetNumberOfPreambles(self):
        """
        V.GetNumberOfPreambles() -> int
        C++: int GetNumberOfPreambles()
        
        Get the number of preambles.
        """
        ...
    
    def GetNumberOfTables(self):
        """
        V.GetNumberOfTables() -> int
        C++: int GetNumberOfTables()
        
        Get the number of tables.
        """
        ...
    
    def GetNumberOfTriggersInTable(self, p_int):
        """
        V.GetNumberOfTriggersInTable(int) -> int
        C++: int GetNumberOfTriggersInTable(int tblHandle)
        
        Get the number of triggers defined for a particular table.
        """
        ...
    
    def GetOptionBackendFromHandle(self, p_int, p_int_1):
        """
        V.GetOptionBackendFromHandle(int, int) -> string
        C++: const char *GetOptionBackendFromHandle(int tblHandle,
            int trgHandle)
        
        Given the handles of a table and one of its options, get the
        backend of the option.
        """
        ...
    
    def GetOptionTextFromHandle(self, p_int, p_int_1):
        """
        V.GetOptionTextFromHandle(int, int) -> string
        C++: const char *GetOptionTextFromHandle(int tblHandle,
            int optHandle)
        
        Given the handles of a table and one of its options, return the
        text of the option.
        """
        ...
    
    def GetPreambleActionFromHandle(self, p_int):
        """
        V.GetPreambleActionFromHandle(int) -> string
        C++: const char *GetPreambleActionFromHandle(int preHandle)
        
        Given a preamble handle, get its action.
        """
        ...
    
    def GetPreambleBackendFromHandle(self, p_int):
        """
        V.GetPreambleBackendFromHandle(int) -> string
        C++: const char *GetPreambleBackendFromHandle(int preHandle)
        
        Given a preamble handle, get its backend.
        """
        ...
    
    def GetPreambleHandleFromName(self, string):
        """
        V.GetPreambleHandleFromName(string) -> int
        C++: int GetPreambleHandleFromName(const char *preName)
        
        Given a preamble name, get its handle.
        """
        ...
    
    def GetPreambleNameFromHandle(self, p_int):
        """
        V.GetPreambleNameFromHandle(int) -> string
        C++: const char *GetPreambleNameFromHandle(int preHandle)
        
        Given a preamble handle, get its name.
        """
        ...
    
    def GetTableHandleFromName(self, string):
        """
        V.GetTableHandleFromName(string) -> int
        C++: int GetTableHandleFromName(const char *tblName)
        
        Given a table name, get its handle.
        """
        ...
    
    def GetTableNameFromHandle(self, p_int):
        """
        V.GetTableNameFromHandle(int) -> string
        C++: const char *GetTableNameFromHandle(int tblHandle)
        
        Given a table handle, get its name.
        """
        ...
    
    def GetTriggerActionFromHandle(self, p_int, p_int_1):
        """
        V.GetTriggerActionFromHandle(int, int) -> string
        C++: const char *GetTriggerActionFromHandle(int tblHandle,
            int trgHandle)
        
        Given the handles of a table and a trigger, get the action of the
        trigger.
        """
        ...
    
    def GetTriggerBackendFromHandle(self, p_int, p_int_1):
        """
        V.GetTriggerBackendFromHandle(int, int) -> string
        C++: const char *GetTriggerBackendFromHandle(int tblHandle,
            int trgHandle)
        
        Given the handles of a table and a trigger, get the backend of
        the trigger.
        """
        ...
    
    def GetTriggerHandleFromName(self, string, string_1):
        """
        V.GetTriggerHandleFromName(string, string) -> int
        C++: int GetTriggerHandleFromName(const char *tblName,
            const char *trgName)
        
        Given the names of a trigger and a table, get the handle of the
        trigger in this table.
        """
        ...
    
    def GetTriggerNameFromHandle(self, p_int, p_int_1):
        """
        V.GetTriggerNameFromHandle(int, int) -> string
        C++: const char *GetTriggerNameFromHandle(int tblHandle,
            int trgHandle)
        
        Given the handles of a table and a trigger, get the name of the
        trigger.
        """
        ...
    
    def GetTriggerTypeFromHandle(self, p_int, p_int_1):
        """
        V.GetTriggerTypeFromHandle(int, int) -> int
        C++: int GetTriggerTypeFromHandle(int tblHandle, int trgHandle)
        
        Given the handles of a table and a trigger, get the type of the
        trigger.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSQLDatabaseSchema
        C++: vtkSQLDatabaseSchema *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reset the schema to its initial, empty state.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSQLDatabaseSchema
        C++: static vtkSQLDatabaseSchema *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetName(self, string):
        """
        V.SetName(string)
        C++: virtual void SetName(const char *_arg)
        
        Set/Get the name of the schema.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AFTER_DELETE = ...
    AFTER_INSERT = ...
    AFTER_UPDATE = ...
    BEFORE_DELETE = ...
    BEFORE_INSERT = ...
    BEFORE_UPDATE = ...
    BIGINT = ...
    BLOB = ...
    COLUMN_TOKEN = ...
    DatabaseColumnType = ...
    DatabaseIndexType = ...
    DatabaseTriggerType = ...
    DATE = ...
    DOUBLE = ...
    END_INDEX_TOKEN = ...
    END_TABLE_TOKEN = ...
    INDEX = ...
    INDEX_COLUMN_TOKEN = ...
    INDEX_TOKEN = ...
    INTEGER = ...
    OPTION_TOKEN = ...
    PRIMARY_KEY = ...
    REAL = ...
    SERIAL = ...
    SMALLINT = ...
    TEXT = ...
    TIME = ...
    TIMESTAMP = ...
    TRIGGER_TOKEN = ...
    UNIQUE = ...
    VarargTokens = ...
    VARCHAR = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSQLDatabaseTableSource(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkSQLDatabaseTableSource - Generates a vtkTable based on an SQL
    query.
    
    Superclass: vtkTableAlgorithm
    
    This class combines vtkSQLDatabase, vtkSQLQuery, and vtkQueryToTable
    to provide a convenience class for generating tables from databases.
    Also this class can be easily wrapped and used within ParaView /
    OverView.
    """
    def GeneratePedigreeIdsOff(self):
        """
        V.GeneratePedigreeIdsOff()
        C++: virtual void GeneratePedigreeIdsOff()
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def GeneratePedigreeIdsOn(self):
        """
        V.GeneratePedigreeIdsOn()
        C++: virtual void GeneratePedigreeIdsOn()
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def GetGeneratePedigreeIds(self):
        """
        V.GetGeneratePedigreeIds() -> bool
        C++: virtual bool GetGeneratePedigreeIds()
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPedigreeIdArrayName(self):
        """
        V.GetPedigreeIdArrayName() -> string
        C++: virtual char *GetPedigreeIdArrayName()
        
        The name of the array for generating or assigning pedigree ids
        (default "id").
        """
        ...
    
    def GetQuery(self):
        """
        V.GetQuery() -> string
        C++: vtkStdString GetQuery()
        """
        ...
    
    def GetURL(self):
        """
        V.GetURL() -> string
        C++: vtkStdString GetURL()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSQLDatabaseTableSource
        C++: vtkSQLDatabaseTableSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSQLDatabaseTableSource
        C++: static vtkSQLDatabaseTableSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetGeneratePedigreeIds(self, bool):
        """
        V.SetGeneratePedigreeIds(bool)
        C++: virtual void SetGeneratePedigreeIds(bool _arg)
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def SetPassword(self, string):
        """
        V.SetPassword(string)
        C++: void SetPassword(const vtkStdString &password)
        """
        ...
    
    def SetPedigreeIdArrayName(self, string):
        """
        V.SetPedigreeIdArrayName(string)
        C++: virtual void SetPedigreeIdArrayName(const char *_arg)
        
        The name of the array for generating or assigning pedigree ids
        (default "id").
        """
        ...
    
    def SetQuery(self, string):
        """
        V.SetQuery(string)
        C++: void SetQuery(const vtkStdString &query)
        """
        ...
    
    def SetURL(self, string):
        """
        V.SetURL(string)
        C++: void SetURL(const vtkStdString &url)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSQLiteDatabase(vtkSQLDatabase):
    """
    vtkSQLiteDatabase - maintain a connection to an SQLite database
    
    Superclass: vtkSQLDatabase
    
    SQLite (http://www.sqlite.org) is a public-domain SQL database
    written in C++.  It's small, fast, and can be easily embedded inside
    other applications.  Its databases are stored in files.
    
    This class provides a VTK interface to SQLite.  You do not need to
    download any external libraries: we include a copy of SQLite 3.3.16
    in VTK/Utilities/vtksqlite.
    
    If you want to open a database that stays in memory and never gets
    written to disk, pass in the URL 'sqlite://:memory:'; otherwise,
    specify the file path by passing the URL 'sqlite://<file_path>'.
    
    @par Thanks: Thanks to Andrew Wilson and Philippe Pebay from Sandia
    National Laboratories for implementing this class.
    
    @sa
    vtkSQLiteQuery
    """
    def Close(self):
        """
        V.Close()
        C++: void Close() override;
        
        Close the connection to the database.
        """
        ...
    
    def GetColumnSpecification(self, vtkSQLDatabaseSchema, p_int, p_int_1):
        """
        V.GetColumnSpecification(vtkSQLDatabaseSchema, int, int) -> string
        C++: vtkStdString GetColumnSpecification(
            vtkSQLDatabaseSchema *schema, int tblHandle, int colHandle)
            override;
        
        Return the SQL string with the syntax to create a column inside a "CREATE
        TABLE" SQL statement. NB: this method implements the
        SQLite-specific syntax: <column name> <column type> <column
        attributes>
        """
        ...
    
    def GetDatabaseFileName(self):
        """
        V.GetDatabaseFileName() -> string
        C++: virtual char *GetDatabaseFileName()
        
        String representing the database filename.
        """
        ...
    
    def GetDatabaseType(self):
        """
        V.GetDatabaseType() -> string
        C++: const char *GetDatabaseType() override;
        
        String representing database type (e.g. "sqlite").
        """
        ...
    
    def GetLastErrorText(self):
        """
        V.GetLastErrorText() -> string
        C++: const char *GetLastErrorText() override;
        
        Get the last error text from the database
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQueryInstance(self):
        """
        V.GetQueryInstance() -> vtkSQLQuery
        C++: vtkSQLQuery *GetQueryInstance() override;
        
        Return an empty query on this database.
        """
        ...
    
    def GetRecord(self, string):
        """
        V.GetRecord(string) -> vtkStringArray
        C++: vtkStringArray *GetRecord(const char *table) override;
        
        Get the list of fields for a particular table
        """
        ...
    
    def GetTables(self):
        """
        V.GetTables() -> vtkStringArray
        C++: vtkStringArray *GetTables() override;
        
        Get the list of tables from the database
        """
        ...
    
    def GetURL(self):
        """
        V.GetURL() -> string
        C++: vtkStdString GetURL() override;
        
        Get the URL of the database.
        """
        ...
    
    def HasError(self):
        """
        V.HasError() -> bool
        C++: bool HasError() override;
        
        Did the last operation generate an error
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsOpen(self):
        """
        V.IsOpen() -> bool
        C++: bool IsOpen() override;
        
        Return whether the database has an open connection
        """
        ...
    
    def IsSupported(self, p_int):
        """
        V.IsSupported(int) -> bool
        C++: bool IsSupported(int feature) override;
        
        Return whether a feature is supported by the database.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSQLiteDatabase
        C++: vtkSQLiteDatabase *NewInstance()
        """
        ...
    
    def Open(self, string):
        """
        V.Open(string) -> bool
        C++: bool Open(const char *password) override;
        V.Open(string, int) -> bool
        C++: bool Open(const char *password, int mode)
        
        Open a new connection to the database.  You need to set the
        filename before calling this function.  Returns true if the
        database was opened successfully; false otherwise.
        - USE_EXISTING (default) - Fail if the file does not exist.
        - USE_EXISTING_OR_CREATE - Create a new file if necessary.
        - CREATE_OR_CLEAR - Create new or clear existing file.
        - CREATE - Create new, fail if file exists.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSQLiteDatabase
        C++: static vtkSQLiteDatabase *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDatabaseFileName(self, string):
        """
        V.SetDatabaseFileName(string)
        C++: virtual void SetDatabaseFileName(const char *_arg)
        
        String representing the database filename.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CREATE = ...
    CREATE_OR_CLEAR = ...
    USE_EXISTING = ...
    USE_EXISTING_OR_CREATE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSQLQuery(vtkRowQuery):
    """
    vtkSQLQuery - executes an sql query and retrieves results
    
    Superclass: vtkRowQuery
    
    The abstract superclass of SQL query classes.  Instances of
    subclasses of vtkSQLQuery are created using the GetQueryInstance()
    function in vtkSQLDatabase.  To implement a query connection for a
    new database type, subclass both vtkSQLDatabase and vtkSQLQuery, and
    implement the required functions.  For the query class, this involves
    the following:
    
    Execute() - Execute the query on the database.  No results need to be
                retrieved at this point, unless you are performing
    caching.
    
    GetNumberOfFields() - After Execute() is performed, returns the
    number
                          of fields in the query results.
    
    GetFieldName() - The name of the field at an index.
    
    GetFieldType() - The data type of the field at an index.
    
    NextRow() - Advances the query results by one row, and returns
    whether
                there are more rows left in the query.
    
    DataValue() - Extract a single data value from the current row.
    
    Begin/Rollback/CommitTransaction() - These methods are optional but
    recommended if the database supports transactions.
    
    @par Thanks: Thanks to Andrew Wilson from Sandia National
    Laboratories for his work on the database classes.
    
    @sa
    vtkSQLDatabase
    """
    def BeginTransaction(self):
        """
        V.BeginTransaction() -> bool
        C++: virtual bool BeginTransaction()
        
        Begin, commit, or roll back a transaction.  If the underlying
        database does not support transactions these calls will do
        nothing.
        """
        ...
    
    def BindParameter(self, p_int, p_int_1):
        """
        V.BindParameter(int, int) -> bool
        C++: virtual bool BindParameter(int index, int value)
        V.BindParameter(int, int) -> bool
        C++: virtual bool BindParameter(int index, long value)
        V.BindParameter(int, int) -> bool
        C++: virtual bool BindParameter(int index, long long value)
        V.BindParameter(int, float) -> bool
        C++: virtual bool BindParameter(int index, double value)
        V.BindParameter(int, string, int) -> bool
        C++: virtual bool BindParameter(int index,
            const char *stringValue, size_t length)
        V.BindParameter(int, string) -> bool
        C++: virtual bool BindParameter(int index,
            const vtkStdString &string)
        V.BindParameter(int, vtkVariant) -> bool
        C++: virtual bool BindParameter(int index, vtkVariant var)
        V.BindParameter(int, void, int) -> bool
        C++: virtual bool BindParameter(int index, const void *data,
            size_t length)
        """
        ...
    
    def ClearParameterBindings(self):
        """
        V.ClearParameterBindings() -> bool
        C++: virtual bool ClearParameterBindings()
        
        Reset all parameter bindings to nullptr.
        """
        ...
    
    def CommitTransaction(self):
        """
        V.CommitTransaction() -> bool
        C++: virtual bool CommitTransaction()
        """
        ...
    
    def EscapeString(self, string, bool):
        """
        V.EscapeString(string, bool) -> string
        C++: virtual vtkStdString EscapeString(vtkStdString s,
            bool addSurroundingQuotes=true)
        
        Escape a string for inclusion into an SQL query. If
        addSurroundingQuotes is true, then quotation marks appropriate to
        the backend database will be added to enclose the escaped string.
        This argument defaults to true.
        
        * A default, simple-minded implementation is provided for
        * database backends that do not provde a way to escape
        * strings for use inside queries.
        """
        ...
    
    def Execute(self):
        """
        V.Execute() -> bool
        C++: bool Execute() override = 0;
        
        Execute the query.  This must be performed before any field name
        or data access functions are used.
        """
        ...
    
    def GetDatabase(self):
        """
        V.GetDatabase() -> vtkSQLDatabase
        C++: virtual vtkSQLDatabase *GetDatabase()
        
        Return the database associated with the query.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQuery(self):
        """
        V.GetQuery() -> string
        C++: virtual const char *GetQuery()
        
        The query string to be executed.  Since some databases will
        process the query string as soon as it's set, this method returns
        a boolean to indicate success or failure.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsActive(self):
        """
        V.IsActive() -> bool
        C++: bool IsActive() override;
        
        Return true if the query is active (i.e. execution was successful
        and results are ready to be fetched).  Returns false on error or
        inactive query.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSQLQuery
        C++: vtkSQLQuery *NewInstance()
        """
        ...
    
    def RollbackTransaction(self):
        """
        V.RollbackTransaction() -> bool
        C++: virtual bool RollbackTransaction()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSQLQuery
        C++: static vtkSQLQuery *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetQuery(self, string):
        """
        V.SetQuery(string) -> bool
        C++: virtual bool SetQuery(const char *query)
        
        The query string to be executed.  Since some databases will
        process the query string as soon as it's set, this method returns
        a boolean to indicate success or failure.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSQLiteQuery(vtkSQLQuery):
    """
    vtkSQLiteQuery - vtkSQLQuery implementation for SQLite databases
    
    Superclass: vtkSQLQuery
    
    This is an implementation of vtkSQLQuery for SQLite databases.  See
    the documentation for vtkSQLQuery for information about what the
    methods do.
    
    @bug Sometimes Execute() will return false (meaning an error) but
    GetLastErrorText() winds up null.  I am not certain why this is
    happening.
    
    @par Thanks: Thanks to Andrew Wilson from Sandia National
    Laboratories for implementing this class.
    
    @sa
    vtkSQLDatabase vtkSQLQuery vtkSQLiteDatabase
    """
    def BeginTransaction(self):
        """
        V.BeginTransaction() -> bool
        C++: bool BeginTransaction() override;
        
        Begin, abort (roll back), or commit a transaction.
        """
        ...
    
    def BindParameter(self, p_int, p_int_1):
        """
        V.BindParameter(int, int) -> bool
        C++: bool BindParameter(int index, int value) override;
        V.BindParameter(int, int) -> bool
        C++: bool BindParameter(int index, long value) override;
        V.BindParameter(int, int) -> bool
        C++: bool BindParameter(int index, long long value) override;
        V.BindParameter(int, float) -> bool
        C++: bool BindParameter(int index, double value) override;
        V.BindParameter(int, string, int) -> bool
        C++: bool BindParameter(int index, const char *stringValue,
            size_t length) override;
        V.BindParameter(int, string) -> bool
        C++: bool BindParameter(int index, const vtkStdString &string)
            override;
        V.BindParameter(int, vtkVariant) -> bool
        C++: bool BindParameter(int index, vtkVariant value) override;
        V.BindParameter(int, void, int) -> bool
        C++: bool BindParameter(int index, const void *data,
            size_t length) override;
        """
        ...
    
    def ClearParameterBindings(self):
        """
        V.ClearParameterBindings() -> bool
        C++: bool ClearParameterBindings() override;
        
        Bind a blob value.  Not all databases support blobs as a data
        type.  Check vtkSQLDatabase::IsSupported(VTK_SQL_FEATURE_BLOB) to
        make sure.
        """
        ...
    
    def CommitTransaction(self):
        """
        V.CommitTransaction() -> bool
        C++: bool CommitTransaction() override;
        
        Begin, abort (roll back), or commit a transaction.
        """
        ...
    
    def DataValue(self, p_int):
        """
        V.DataValue(int) -> vtkVariant
        C++: vtkVariant DataValue(vtkIdType c) override;
        
        Return data in current row, field c
        """
        ...
    
    def Execute(self):
        """
        V.Execute() -> bool
        C++: bool Execute() override;
        
        Execute the query.  This must be performed before any field name
        or data access functions are used.
        """
        ...
    
    def GetFieldName(self, p_int):
        """
        V.GetFieldName(int) -> string
        C++: const char *GetFieldName(int i) override;
        
        Return the name of the specified query field.
        """
        ...
    
    def GetFieldType(self, p_int):
        """
        V.GetFieldType(int) -> int
        C++: int GetFieldType(int i) override;
        
        Return the type of the field, using the constants defined in
        vtkType.h.
        """
        ...
    
    def GetLastErrorText(self):
        """
        V.GetLastErrorText() -> string
        C++: const char *GetLastErrorText() override;
        
        Get the last error text from the query
        """
        ...
    
    def GetNumberOfFields(self):
        """
        V.GetNumberOfFields() -> int
        C++: int GetNumberOfFields() override;
        
        The number of fields in the query result.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HasError(self):
        """
        V.HasError() -> bool
        C++: bool HasError() override;
        
        Return true if there is an error on the current query.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSQLiteQuery
        C++: vtkSQLiteQuery *NewInstance()
        """
        ...
    
    def NextRow(self):
        """
        V.NextRow() -> bool
        C++: bool NextRow() override;
        
        Advance row, return false if past end.
        """
        ...
    
    def RollbackTransaction(self):
        """
        V.RollbackTransaction() -> bool
        C++: bool RollbackTransaction() override;
        
        Begin, abort (roll back), or commit a transaction.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSQLiteQuery
        C++: static vtkSQLiteQuery *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetQuery(self, string):
        """
        V.SetQuery(string) -> bool
        C++: bool SetQuery(const char *query) override;
        
        Set the SQL query string.  This must be performed before
        Execute() or BindParameter() can be called.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSQLiteToTableReader(vtkDatabaseToTableReader):
    """
    vtkSQLiteToTableReader - Read an SQLite table as a vtkTable
    
    Superclass: vtkDatabaseToTableReader
    
    vtkSQLiteToTableReader reads a table from an SQLite database and
    outputs it as a vtkTable.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSQLiteToTableReader
        C++: vtkSQLiteToTableReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSQLiteToTableReader
        C++: static vtkSQLiteToTableReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTableToDatabaseWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkTableToDatabaseWriter - in a SQL database.
    
    Superclass: vtkWriter
    
    vtkTableToDatabaseWriter abstract parent class that reads a vtkTable
    and inserts it into an SQL database.
    """
    def GetDatabase(self):
        """
        V.GetDatabase() -> vtkSQLDatabase
        C++: vtkSQLDatabase *GetDatabase()
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkTable
        C++: vtkTable *GetInput()
        V.GetInput(int) -> vtkTable
        C++: vtkTable *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTableToDatabaseWriter
        C++: vtkTableToDatabaseWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTableToDatabaseWriter
        C++: static vtkTableToDatabaseWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDatabase(self, vtkSQLDatabase):
        """
        V.SetDatabase(vtkSQLDatabase) -> bool
        C++: bool SetDatabase(vtkSQLDatabase *db)
        
        Set the database.  Must already be open.
        """
        ...
    
    def SetTableName(self, string):
        """
        V.SetTableName(string) -> bool
        C++: bool SetTableName(const char *name)
        
        Set the name of the new SQL table that you'd this writer to
        create. Returns false if the specified table already exists in
        the database.
        """
        ...
    
    def TableNameIsNew(self):
        """
        V.TableNameIsNew() -> bool
        C++: bool TableNameIsNew()
        
        Check if the currently specified table name exists in the
        database.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTableToSQLiteWriter(vtkTableToDatabaseWriter):
    """
    vtkTableToSQLiteWriter - store a vtkTable in an SQLite database
    
    Superclass: vtkTableToDatabaseWriter
    
    vtkTableToSQLiteWriter reads a vtkTable and inserts it into an SQLite
    database.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkTable
        C++: vtkTable *GetInput()
        V.GetInput(int) -> vtkTable
        C++: vtkTable *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTableToSQLiteWriter
        C++: vtkTableToSQLiteWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTableToSQLiteWriter
        C++: static vtkTableToSQLiteWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
