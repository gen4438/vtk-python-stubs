"""
This type stub file was generated by pyright.
"""

from .vtkPlot import vtkPlot

class vtkPlotParallelCoordinates(vtkPlot):
    """
    vtkPlotParallelCoordinates - Class for drawing a parallel coordinate
    plot given columns from a vtkTable.
    
    Superclass: vtkPlot
    """
    def CreateDefaultLookupTable(self):
        """
        V.CreateDefaultLookupTable()
        C++: virtual void CreateDefaultLookupTable()
        
        Create default lookup table. Generally used to create one when
        none is available with the scalar data.
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: void GetBounds(double bounds[4]) override;
        
        Get the bounds for this mapper as
        (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        """
        ...
    
    def GetColorArrayName(self):
        """
        V.GetColorArrayName() -> string
        C++: vtkStdString GetColorArrayName()
        
        Get the array name to color by.
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: vtkScalarsToColors *GetLookupTable()
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarVisibility(self):
        """
        V.GetScalarVisibility() -> int
        C++: virtual vtkTypeBool GetScalarVisibility()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlotParallelCoordinates
        C++: vtkPlotParallelCoordinates *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the XY plot, called whenever the chart needs to
        be drawn
        """
        ...
    
    def PaintLegend(self, vtkContext2D, vtkRectf, p_int):
        """
        V.PaintLegend(vtkContext2D, vtkRectf, int) -> bool
        C++: bool PaintLegend(vtkContext2D *painter, const vtkRectf &rect,
             int legendIndex) override;
        
        Paint legend event for the XY plot, called whenever the legend
        needs the plot items symbol/mark/line drawn. A rect is supplied
        with the lower left corner of the rect (elements 0 and 1) and
        with width x height (elements 2 and 3). The plot can choose how
        to fill the space supplied.
        """
        ...
    
    def ResetSelectionRange(self):
        """
        V.ResetSelectionRange() -> bool
        C++: bool ResetSelectionRange()
        
        Reset the selection criteria for the chart.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlotParallelCoordinates
        C++: static vtkPlotParallelCoordinates *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def ScalarVisibilityOff(self):
        """
        V.ScalarVisibilityOff()
        C++: virtual void ScalarVisibilityOff()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def ScalarVisibilityOn(self):
        """
        V.ScalarVisibilityOn()
        C++: virtual void ScalarVisibilityOn()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def SelectColorArray(self, p_int):
        """
        V.SelectColorArray(int)
        C++: void SelectColorArray(vtkIdType arrayNum)
        V.SelectColorArray(string)
        C++: void SelectColorArray(const vtkStdString &arrayName)
        
        When ScalarMode is set to UsePointFieldData or UseCellFieldData,
        you can specify which array to use for coloring using these
        methods. The lookup table will decide how to convert vectors to
        colors.
        """
        ...
    
    def SetInputData(self, vtkTable):
        """
        V.SetInputData(vtkTable)
        C++: void SetInputData(vtkTable *table) override;
        V.SetInputData(vtkTable, string, string)
        C++: void SetInputData(vtkTable *table, const vtkStdString &,
            const vtkStdString &) override;
        
        This is a convenience function to set the input table.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: void SetLookupTable(vtkScalarsToColors *lut)
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def SetScalarVisibility(self, p_int):
        """
        V.SetScalarVisibility(int)
        C++: virtual void SetScalarVisibility(vtkTypeBool _arg)
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def SetSelectionRange(self, p_int, p_float, p_float_1):
        """
        V.SetSelectionRange(int, float, float) -> bool
        C++: bool SetSelectionRange(int Axis, float low, float high)
        
        Set the selection criteria on the given axis in normalized space
        (0.0 - 1.0).
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


