"""
This type stub file was generated by pyright.
"""

from .vtkControlPointsItem import vtkControlPointsItem

class vtkPiecewiseControlPointsItem(vtkControlPointsItem):
    """
    vtkPiecewiseControlPointsItem - Control points for
    vtkPiecewiseFunction.
    
    Superclass: vtkControlPointsItem
    
    vtkPiecewiseControlPointsItem draws the control points of a
    vtkPiecewiseFunction.
    @sa
    vtkControlPointsItem vtkPiecewiseFunctionItem
    vtkCompositeTransferFunctionItem
    """
    def AddPoint(self, *float):
        """
        V.AddPoint([float, ...]) -> int
        C++: vtkIdType AddPoint(double *newPos) override;
        
        Add a point to the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPiecewiseFunction(self):
        """
        V.GetPiecewiseFunction() -> vtkPiecewiseFunction
        C++: virtual vtkPiecewiseFunction *GetPiecewiseFunction()
        
        Get the piecewise function
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPiecewiseControlPointsItem
        C++: vtkPiecewiseControlPointsItem *NewInstance()
        """
        ...
    
    def RemovePoint(self, *float):
        """
        V.RemovePoint([float, ...]) -> int
        C++: vtkIdType RemovePoint(double *pos) override;
        
        Remove a point of the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPiecewiseControlPointsItem
        C++: static vtkPiecewiseControlPointsItem *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetPiecewiseFunction(self, vtkPiecewiseFunction):
        """
        V.SetPiecewiseFunction(vtkPiecewiseFunction)
        C++: virtual void SetPiecewiseFunction(
            vtkPiecewiseFunction *function)
        
        Set the piecewise function to draw its points
        """
        ...
    
    def SetStrokeMode(self, bool):
        """
        V.SetStrokeMode(bool)
        C++: virtual void SetStrokeMode(bool _arg)
        
        Controls whether or not control points are drawn (true) or
        clicked and moved (false). False by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


