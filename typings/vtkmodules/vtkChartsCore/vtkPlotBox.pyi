"""
This type stub file was generated by pyright.
"""

from .vtkPlot import vtkPlot

class vtkPlotBox(vtkPlot):
    """
    vtkPlotBox - Class for drawing box plots.
    
    Superclass: vtkPlot
    
    Plots to draw box plots given columns from a vtkTable that may
    contain 5 lines with quartiles and median.
    """
    def CreateDefaultLookupTable(self):
        """
        V.CreateDefaultLookupTable()
        C++: virtual void CreateDefaultLookupTable()
        
        Create default lookup table. Generally used to create one when
        none is available with the scalar data.
        """
        ...
    
    def GetBoxWidth(self):
        """
        V.GetBoxWidth() -> float
        C++: virtual float GetBoxWidth()
        
        Get/Set the width of boxes.
        """
        ...
    
    def GetLabels(self):
        """
        V.GetLabels() -> vtkStringArray
        C++: vtkStringArray *GetLabels() override;
        
        Get the plot labels. If this array has a length greater than 1
        the index refers to the stacked objects in the plot.
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: vtkScalarsToColors *GetLookupTable()
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTitleProperties(self):
        """
        V.GetTitleProperties() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleProperties()
        
        Get the vtkTextProperty that governs how the plot title is
        displayed.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlotBox
        C++: vtkPlotBox *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the plot, called whenever the chart needs to be
        drawn
        """
        ...
    
    def PaintLegend(self, vtkContext2D, vtkRectf, p_int):
        """
        V.PaintLegend(vtkContext2D, vtkRectf, int) -> bool
        C++: bool PaintLegend(vtkContext2D *painter, const vtkRectf &rect,
             int legendIndex) override;
        
        Paint legend event for the plot, called whenever the legend needs
        the plot items symbol/mark/line drawn. A rect is supplied with
        the lower left corner of the rect (elements 0 and 1) and with
        width x height (elements 2 and 3). The plot can choose how to
        fill the space supplied.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlotBox
        C++: static vtkPlotBox *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBoxWidth(self, p_float):
        """
        V.SetBoxWidth(float)
        C++: virtual void SetBoxWidth(float _arg)
        
        Get/Set the width of boxes.
        """
        ...
    
    def SetColumnColor(self, string, *float):
        """
        V.SetColumnColor(string, [float, ...])
        C++: void SetColumnColor(const vtkStdString &colName, double *rgb)
        
        Helper function to set the color of a given column.
        """
        ...
    
    def SetInputData(self, vtkTable):
        """
        V.SetInputData(vtkTable)
        C++: void SetInputData(vtkTable *table) override;
        V.SetInputData(vtkTable, string, string)
        C++: void SetInputData(vtkTable *table, const vtkStdString &,
            const vtkStdString &) override;
        
        This is a convenience function to set the input table.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: void SetLookupTable(vtkScalarsToColors *lut)
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


