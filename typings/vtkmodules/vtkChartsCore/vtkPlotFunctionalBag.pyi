"""
This type stub file was generated by pyright.
"""

from .vtkPlot import vtkPlot

class vtkPlotFunctionalBag(vtkPlot):
    """
    vtkPlotFunctionalBag - Class for drawing an XY line plot or bag given
    two columns from a vtkTable.
    
    Superclass: vtkPlot
    
    Depending on the number of components, this class will draw either a
    line plot (for 1 component column) or, for two components columns, a
    filled polygonal band (the bag) going from the first to the second
    component on the Y-axis along the X-axis. The filter
    vtkExtractFunctionalBagPlot is intended to create such "bag" columns.
    
    @sa
    vtkExtractFunctionalBagPlot
    """
    def CreateDefaultLookupTable(self):
        """
        V.CreateDefaultLookupTable()
        C++: virtual void CreateDefaultLookupTable()
        
        Create default lookup table. Generally used to create one when
        none is available with the scalar data.
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: void GetBounds(double bounds[4]) override;
        
        Get the bounds for this plot as (Xmin, Xmax, Ymin, Ymax).
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: vtkScalarsToColors *GetLookupTable()
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUnscaledInputBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetUnscaledInputBounds([float, float, float, float])
        C++: void GetUnscaledInputBounds(double bounds[4]) override;
        
        Get the non-log-scaled bounds on chart inputs for this plot as
        (Xmin, Xmax, Ymin, Ymax).
        """
        ...
    
    def GetVisible(self):
        """
        V.GetVisible() -> bool
        C++: bool GetVisible() override;
        
        Reimplemented to enforce visibility when selected.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsBag(self):
        """
        V.IsBag() -> bool
        C++: virtual bool IsBag()
        
        Returns true if the plot is a functional bag, false if it is a
        simple line.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlotFunctionalBag
        C++: vtkPlotFunctionalBag *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the plot, called whenever the chart needs to be
        drawn.
        """
        ...
    
    def PaintLegend(self, vtkContext2D, vtkRectf, p_int):
        """
        V.PaintLegend(vtkContext2D, vtkRectf, int) -> bool
        C++: bool PaintLegend(vtkContext2D *painter, const vtkRectf &rect,
             int legendIndex) override;
        
        Paint legend event for the plot, called whenever the legend needs
        the plot items symbol/mark/line drawn. A rect is supplied with
        the lower left corner of the rect (elements 0 and 1) and with
        width x height (elements 2 and 3). The plot can choose how to
        fill the space supplied.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlotFunctionalBag
        C++: static vtkPlotFunctionalBag *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SelectPoints(self, vtkVector2f, vtkVector2f_1):
        """
        V.SelectPoints(vtkVector2f, vtkVector2f) -> bool
        C++: bool SelectPoints(const vtkVector2f &min,
            const vtkVector2f &max) override;
        
        Select all points in the specified rectangle.
        """
        ...
    
    def SelectPointsInPolygon(self, vtkContextPolygon):
        """
        V.SelectPointsInPolygon(vtkContextPolygon) -> bool
        C++: bool SelectPointsInPolygon(const vtkContextPolygon &polygon)
            override;
        
        Select all points in the specified polygon.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: void SetLookupTable(vtkScalarsToColors *lut)
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


