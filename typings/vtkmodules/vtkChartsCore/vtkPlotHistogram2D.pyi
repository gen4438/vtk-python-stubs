"""
This type stub file was generated by pyright.
"""

from .vtkPlot import vtkPlot

class vtkPlotHistogram2D(vtkPlot):
    """
    vtkPlotHistogram2D - no description provided.
    
    Superclass: vtkPlot
    """
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: void GetBounds(double bounds[4]) override;
        
        Get the bounds for this plot as (Xmin, Xmax, Ymin, Ymax).
        
        * See GetUnscaledInputBounds for more information.
        """
        ...
    
    def GetInputImageData(self):
        """
        V.GetInputImageData() -> vtkImageData
        C++: vtkImageData *GetInputImageData()
        
        Get the input table used by the plot.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> vtkRectf
        C++: virtual vtkRectf GetPosition()
        """
        ...
    
    def GetTooltipLabel(self, vtkVector2d, p_int, p_int_1):
        """
        V.GetTooltipLabel(vtkVector2d, int, int) -> string
        C++: vtkStdString GetTooltipLabel(const vtkVector2d &plotPos,
            vtkIdType seriesIndex, vtkIdType segmentIndex) override;
        
        Generate and return the tooltip label string for this plot The
        segmentIndex parameter is ignored. The member variable
        TooltipLabelFormat can be set as a printf-style string to build
        custom tooltip labels from, and may contain: An empty string
        generates the default tooltip labels. The following
        case-sensitive format tags (without quotes) are recognized: '%x'
        The X position of the histogram cell '%y' The Y position of the
        histogram cell '%v' The scalar value of the histogram cell Note:
        the %i and %j tags are valid only if there is a 1:1
        correspondence between individual histogram cells and axis tick
        marks '%i' The X axis tick label for the histogram cell '%j' The
        Y axis tick label for the histogram cell Any other characters or
        unrecognized format tags are printed in the tooltip label
        verbatim.
        """
        ...
    
    def GetTransferFunction(self):
        """
        V.GetTransferFunction() -> vtkScalarsToColors
        C++: vtkScalarsToColors *GetTransferFunction()
        
        Get the color transfer function that is used to generate the
        histogram.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlotHistogram2D
        C++: vtkPlotHistogram2D *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item, called whenever it needs to be drawn.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlotHistogram2D
        C++: static vtkPlotHistogram2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInputData(self, vtkImageData, p_int):
        """
        V.SetInputData(vtkImageData, int)
        C++: virtual void SetInputData(vtkImageData *data, vtkIdType z=0)
        V.SetInputData(vtkTable)
        C++: void SetInputData(vtkTable *) override;
        V.SetInputData(vtkTable, string, string)
        C++: void SetInputData(vtkTable *, const vtkStdString &,
            const vtkStdString &) override;
        
        Set the input, we are expecting a vtkImageData with just one
        component, this would normally be a float or a double. It will be
        passed to the other functions as a double to generate a color.
        """
        ...
    
    def SetPosition(self, vtkRectf):
        """
        V.SetPosition(vtkRectf)
        C++: virtual void SetPosition(const vtkRectf &pos)
        """
        ...
    
    def SetTransferFunction(self, vtkScalarsToColors):
        """
        V.SetTransferFunction(vtkScalarsToColors)
        C++: void SetTransferFunction(vtkScalarsToColors *transfer)
        
        Set the color transfer function that will be used to generate the
        2D histogram.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


