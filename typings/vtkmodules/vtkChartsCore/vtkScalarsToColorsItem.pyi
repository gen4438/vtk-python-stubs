"""
This type stub file was generated by pyright.
"""

from .vtkPlot import vtkPlot

class vtkScalarsToColorsItem(vtkPlot):
    """
    vtkScalarsToColorsItem - Abstract class for ScalarsToColors items.
    
    Superclass: vtkPlot
    
    vtkScalarsToColorsItem implements item bounds and painting for
    inherited classes that provide a texture (ComputeTexture()) and
    optionally a shape
    @sa
    vtkControlPointsItem vtkLookupTableItem vtkColorTransferFunctionItem
    vtkCompositeTransferFunctionItem vtkPiecewiseItemFunctionItem
    """
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: void GetBounds(double bounds[4]) override;
        
        Bounds of the item, use the UserBounds if valid otherwise compute
        the bounds of the item (based on the transfer function range).
        """
        ...
    
    def GetHistogramTable(self):
        """
        V.GetHistogramTable() -> vtkTable
        C++: virtual vtkTable *GetHistogramTable()
        
        Set/Get the vtkTable displayed as an histogram using a vtkPlotBar
        """
        ...
    
    def GetMaskAboveCurve(self):
        """
        V.GetMaskAboveCurve() -> bool
        C++: virtual bool GetMaskAboveCurve()
        
        Don't fill in the part above the transfer function. If true
        texture is not visible above the shape provided by subclasses,
        otherwise the whole rectangle defined by the bounds is filled
        with the transfer function. Note: only 2D transfer functions (RGB
        tf + alpha tf ) support the feature.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPolyLinePen(self):
        """
        V.GetPolyLinePen() -> vtkPen
        C++: virtual vtkPen *GetPolyLinePen()
        
        Get a pointer to the vtkPen object that controls the drawing of
        the edge of the shape if any. PolyLinePen type is vtkPen::NO_PEN
        by default.
        """
        ...
    
    def GetTooltipLabel(self, vtkVector2d, p_int, p_int_1):
        """
        V.GetTooltipLabel(vtkVector2d, int, int) -> string
        C++: vtkStdString GetTooltipLabel(const vtkVector2d &plotPos,
            vtkIdType seriesIndex, vtkIdType segmentIndex) override;
        
        Generate and return the tooltip label string for this plot The
        segmentIndex is implemented here.
        """
        ...
    
    def GetUserBounds(self):
        """
        V.GetUserBounds() -> (float, float, float, float)
        C++: virtual double *GetUserBounds()
        
        Set custom bounds, except if bounds are invalid, bounds will be
        automatically computed based on the range of the control points
        Invalid bounds by default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkScalarsToColorsItem
        C++: vtkScalarsToColorsItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint the texture into a rectangle defined by the bounds. If
        MaskAboveCurve is true and a shape has been provided by a
        subclass, it draws the texture into the shape
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkScalarsToColorsItem
        C++: static vtkScalarsToColorsItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetHistogramTable(self, vtkTable):
        """
        V.SetHistogramTable(vtkTable)
        C++: void SetHistogramTable(vtkTable *histogramTable)
        
        Set/Get the vtkTable displayed as an histogram using a vtkPlotBar
        """
        ...
    
    def SetMaskAboveCurve(self, bool):
        """
        V.SetMaskAboveCurve(bool)
        C++: virtual void SetMaskAboveCurve(bool _arg)
        
        Don't fill in the part above the transfer function. If true
        texture is not visible above the shape provided by subclasses,
        otherwise the whole rectangle defined by the bounds is filled
        with the transfer function. Note: only 2D transfer functions (RGB
        tf + alpha tf ) support the feature.
        """
        ...
    
    def SetUserBounds(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetUserBounds(float, float, float, float)
        C++: virtual void SetUserBounds(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetUserBounds((float, float, float, float))
        C++: virtual void SetUserBounds(const double _arg[4])
        
        Set custom bounds, except if bounds are invalid, bounds will be
        automatically computed based on the range of the control points
        Invalid bounds by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


