"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkContextPolygon(object):
    """
    vtkContextPolygon - no description provided.
    
    vtkContextPolygon()
    vtkContextPolygon(const vtkContextPolygon &polygon)
    """
    def AddPoint(self, vtkVector2f):
        """
        V.AddPoint(vtkVector2f)
        C++: void AddPoint(const vtkVector2f &point)
        V.AddPoint(float, float)
        C++: void AddPoint(float x, float y)
        
        Adds a point to the polygon.
        """
        ...
    
    def Clear(self):
        """
        V.Clear()
        C++: void Clear()
        
        Clears all the points from the polygon.
        """
        ...
    
    def Contains(self, vtkVector2f):
        """
        V.Contains(vtkVector2f) -> bool
        C++: bool Contains(const vtkVector2f &point)
        
        Returns true if the polygon contains point.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: vtkIdType GetNumberOfPoints()
        
        Returns the number of points in the polygon.
        """
        ...
    
    def GetPoint(self, p_int):
        """
        V.GetPoint(int) -> vtkVector2f
        C++: vtkVector2f GetPoint(vtkIdType index)
        
        Returns the point at index.
        """
        ...
    
    def Transformed(self, vtkTransform2D):
        """
        V.Transformed(vtkTransform2D) -> vtkContextPolygon
        C++: vtkContextPolygon Transformed(vtkTransform2D *transform)
        
        Returns a new polygon with each point transformed by transform.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


