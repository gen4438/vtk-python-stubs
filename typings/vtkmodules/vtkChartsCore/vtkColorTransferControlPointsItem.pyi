"""
This type stub file was generated by pyright.
"""

from .vtkControlPointsItem import vtkControlPointsItem

class vtkColorTransferControlPointsItem(vtkControlPointsItem):
    """
    vtkColorTransferControlPointsItem - Control points for
    vtkColorTransferFunction.
    
    Superclass: vtkControlPointsItem
    
    vtkColorTransferControlPointsItem draws the control points of a
    vtkColorTransferFunction.
    @sa
    vtkControlPointsItem vtkColorTransferFunctionItem
    vtkCompositeTransferFunctionItem
    """
    def AddPoint(self, *float):
        """
        V.AddPoint([float, ...]) -> int
        C++: vtkIdType AddPoint(double *newPos) override;
        
        Add a point to the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def GetColorFill(self):
        """
        V.GetColorFill() -> bool
        C++: virtual bool GetColorFill()
        
        If ColorFill is true, the control point brush color is set with
        the matching color in the color transfer function. False by
        default.
        """
        ...
    
    def GetColorTransferFunction(self):
        """
        V.GetColorTransferFunction() -> vtkColorTransferFunction
        C++: virtual vtkColorTransferFunction *GetColorTransferFunction()
        
        Get the piecewise function
        """
        ...
    
    def GetControlPoint(self, p_int, *float):
        """
        V.GetControlPoint(int, [float, ...])
        C++: void GetControlPoint(vtkIdType index, double *point)
            override;
        
        Returns the x and y coordinates as well as the midpoint and
        sharpness of the control point corresponding to the index. Note:
        The y (point[1]) is always 0.5
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: vtkIdType GetNumberOfPoints() override;
        
        Return the number of points in the color transfer function.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkColorTransferControlPointsItem
        C++: vtkColorTransferControlPointsItem *NewInstance()
        """
        ...
    
    def RemovePoint(self, *float):
        """
        V.RemovePoint([float, ...]) -> int
        C++: vtkIdType RemovePoint(double *pos) override;
        
        Remove a point of the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkColorTransferControlPointsItem
        C++: static vtkColorTransferControlPointsItem *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetColorFill(self, bool):
        """
        V.SetColorFill(bool)
        C++: virtual void SetColorFill(bool _arg)
        
        If ColorFill is true, the control point brush color is set with
        the matching color in the color transfer function. False by
        default.
        """
        ...
    
    def SetColorTransferFunction(self, vtkColorTransferFunction):
        """
        V.SetColorTransferFunction(vtkColorTransferFunction)
        C++: void SetColorTransferFunction(
            vtkColorTransferFunction *function)
        
        Set the piecewise function to draw its points
        """
        ...
    
    def SetControlPoint(self, p_int, *float):
        """
        V.SetControlPoint(int, [float, ...])
        C++: void SetControlPoint(vtkIdType index, double *point)
            override;
        
        Sets the x and y coordinates as well as the midpoint and
        sharpness of the control point corresponding to the index.
        Changing the y has no effect, it will always be 0.5
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


