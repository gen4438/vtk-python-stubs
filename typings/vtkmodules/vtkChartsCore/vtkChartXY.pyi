"""
This type stub file was generated by pyright.
"""

from .vtkChart import vtkChart

class vtkChartXY(vtkChart):
    """
    vtkChartXY - Factory class for drawing XY charts
    
    Superclass: vtkChart
    
    This class implements an XY chart.
    
    @sa
    vtkBarChartActor
    """
    def AddPlot(self, p_int):
        """
        V.AddPlot(int) -> vtkPlot
        C++: vtkPlot *AddPlot(int type) override;
        V.AddPlot(vtkPlot) -> int
        C++: vtkIdType AddPlot(vtkPlot *plot) override;
        
        Add a plot to the chart, defaults to using the name of the y
        column
        """
        ...
    
    def AddSelection(self, vtkIdTypeArray, vtkIdTypeArray_1):
        """
        V.AddSelection(vtkIdTypeArray, vtkIdTypeArray)
        C++: static void AddSelection(vtkIdTypeArray *selection,
            vtkIdTypeArray *oldSelection)
        
        Add the supplied selection from the oldSelection.
        """
        ...
    
    def AdjustLowerBoundForLogPlotOff(self):
        """
        V.AdjustLowerBoundForLogPlotOff()
        C++: virtual void AdjustLowerBoundForLogPlotOff()
        
        Adjust the minimum of a logarithmic axis to be greater than 0,
        regardless of the minimum data value. False by default.
        """
        ...
    
    def AdjustLowerBoundForLogPlotOn(self):
        """
        V.AdjustLowerBoundForLogPlotOn()
        C++: virtual void AdjustLowerBoundForLogPlotOn()
        
        Adjust the minimum of a logarithmic axis to be greater than 0,
        regardless of the minimum data value. False by default.
        """
        ...
    
    def AutoAxesOff(self):
        """
        V.AutoAxesOff()
        C++: virtual void AutoAxesOff()
        
        If true then the axes will be turned on and off depending upon
        whether any plots are in that corner. Defaults to true.
        """
        ...
    
    def AutoAxesOn(self):
        """
        V.AutoAxesOn()
        C++: virtual void AutoAxesOn()
        
        If true then the axes will be turned on and off depending upon
        whether any plots are in that corner. Defaults to true.
        """
        ...
    
    def BuildSelection(self, vtkAnnotationLink, p_int, vtkIdTypeArray, vtkIdTypeArray_1, vtkPlot):
        """
        V.BuildSelection(vtkAnnotationLink, int, vtkIdTypeArray,
            vtkIdTypeArray, vtkPlot)
        C++: static void BuildSelection(vtkAnnotationLink *link,
            int selectionMode, vtkIdTypeArray *plotSelection,
            vtkIdTypeArray *oldSelection, vtkPlot *plot)
        
        Build a selection based on the supplied selectionMode using the
        new plotSelection and combining it with the oldSelection. If link
        is not nullptr then the resulting selection will be set on the
        link.
        """
        ...
    
    def ClearPlots(self):
        """
        V.ClearPlots()
        C++: void ClearPlots() override;
        
        Remove all plots from the chart.
        """
        ...
    
    def DragPointAlongXOff(self):
        """
        V.DragPointAlongXOff()
        C++: virtual void DragPointAlongXOff()
        
        Set if the point can be dragged along X by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def DragPointAlongXOn(self):
        """
        V.DragPointAlongXOn()
        C++: virtual void DragPointAlongXOn()
        
        Set if the point can be dragged along X by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def DragPointAlongYOff(self):
        """
        V.DragPointAlongYOff()
        C++: virtual void DragPointAlongYOff()
        
        Set if the point can be dragged along Y by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def DragPointAlongYOn(self):
        """
        V.DragPointAlongYOn()
        C++: virtual void DragPointAlongYOn()
        
        Set if the point can be dragged along Y by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def DrawAxesAtOriginOff(self):
        """
        V.DrawAxesAtOriginOff()
        C++: virtual void DrawAxesAtOriginOff()
        
        If true then the axes will be drawn at the origin (scientific
        style).
        """
        ...
    
    def DrawAxesAtOriginOn(self):
        """
        V.DrawAxesAtOriginOn()
        C++: virtual void DrawAxesAtOriginOn()
        
        If true then the axes will be drawn at the origin (scientific
        style).
        """
        ...
    
    def ForceAxesToBoundsOff(self):
        """
        V.ForceAxesToBoundsOff()
        C++: virtual void ForceAxesToBoundsOff()
        
        Force the axes to have their Minimum and Maximum properties
        inside the plot boundaries. It constrains pan and zoom
        interaction. False by default.
        """
        ...
    
    def ForceAxesToBoundsOn(self):
        """
        V.ForceAxesToBoundsOn()
        C++: virtual void ForceAxesToBoundsOn()
        
        Force the axes to have their Minimum and Maximum properties
        inside the plot boundaries. It constrains pan and zoom
        interaction. False by default.
        """
        ...
    
    def GetAdjustLowerBoundForLogPlot(self):
        """
        V.GetAdjustLowerBoundForLogPlot() -> bool
        C++: virtual bool GetAdjustLowerBoundForLogPlot()
        
        Adjust the minimum of a logarithmic axis to be greater than 0,
        regardless of the minimum data value. False by default.
        """
        ...
    
    def GetAutoAxes(self):
        """
        V.GetAutoAxes() -> bool
        C++: virtual bool GetAutoAxes()
        
        If true then the axes will be turned on and off depending upon
        whether any plots are in that corner. Defaults to true.
        """
        ...
    
    def GetAxis(self, p_int):
        """
        V.GetAxis(int) -> vtkAxis
        C++: vtkAxis *GetAxis(int axisIndex) override;
        
        Get the axis specified by axisIndex. This is specified with the
        vtkAxis position enum, valid values are vtkAxis::LEFT,
        vtkAxis::BOTTOM, vtkAxis::RIGHT and vtkAxis::TOP.
        """
        ...
    
    def GetBarWidthFraction(self):
        """
        V.GetBarWidthFraction() -> float
        C++: virtual float GetBarWidthFraction()
        
        Set the width fraction for any bar charts drawn in this chart. It
        is assumed that all bar plots will use the same array for the X
        axis, and that this array is regularly spaced. The delta between
        the first two x values is used to calculated the width of the
        bars, and subdivided between each bar. The default value is 0.8,
        1.0 would lead to bars that touch.
        """
        ...
    
    def GetDragPointAlongX(self):
        """
        V.GetDragPointAlongX() -> bool
        C++: virtual bool GetDragPointAlongX()
        
        Set if the point can be dragged along X by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def GetDragPointAlongY(self):
        """
        V.GetDragPointAlongY() -> bool
        C++: virtual bool GetDragPointAlongY()
        
        Set if the point can be dragged along Y by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def GetDrawAxesAtOrigin(self):
        """
        V.GetDrawAxesAtOrigin() -> bool
        C++: virtual bool GetDrawAxesAtOrigin()
        
        If true then the axes will be drawn at the origin (scientific
        style).
        """
        ...
    
    def GetForceAxesToBounds(self):
        """
        V.GetForceAxesToBounds() -> bool
        C++: virtual bool GetForceAxesToBounds()
        
        Force the axes to have their Minimum and Maximum properties
        inside the plot boundaries. It constrains pan and zoom
        interaction. False by default.
        """
        ...
    
    def GetHiddenAxisBorder(self):
        """
        V.GetHiddenAxisBorder() -> int
        C++: virtual int GetHiddenAxisBorder()
        
        Border size of the axes that are hidden (vtkAxis::GetVisible())
        """
        ...
    
    def GetLegend(self):
        """
        V.GetLegend() -> vtkChartLegend
        C++: vtkChartLegend *GetLegend() override;
        
        Get the vtkChartLegend object that will be displayed by the
        chart.
        """
        ...
    
    def GetMouseSelectionMode(self, vtkContextMouseEvent, p_int):
        """
        V.GetMouseSelectionMode(vtkContextMouseEvent, int) -> int
        C++: static int GetMouseSelectionMode(
            const vtkContextMouseEvent &mouse, int selectionMode)
        
        Combine the SelectionMode with any mouse modifiers to get an
        effective selection mode for this click event.
        """
        ...
    
    def GetNumberOfAxes(self):
        """
        V.GetNumberOfAxes() -> int
        C++: vtkIdType GetNumberOfAxes() override;
        
        Get the number of axes in the current chart.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPlots(self):
        """
        V.GetNumberOfPlots() -> int
        C++: vtkIdType GetNumberOfPlots() override;
        
        Get the number of plots the chart contains.
        """
        ...
    
    def GetPlot(self, p_int):
        """
        V.GetPlot(int) -> vtkPlot
        C++: vtkPlot *GetPlot(vtkIdType index) override;
        
        Get the plot at the specified index, returns null if the index is
        invalid.
        """
        ...
    
    def GetPlotCorner(self, vtkPlot):
        """
        V.GetPlotCorner(vtkPlot) -> int
        C++: int GetPlotCorner(vtkPlot *plot)
        
        Figure out which quadrant the plot is in.
        """
        ...
    
    def GetPlotIndex(self, vtkPlot):
        """
        V.GetPlotIndex(vtkPlot) -> int
        C++: virtual vtkIdType GetPlotIndex(vtkPlot *)
        
        Get the index of the specified plot, returns -1 if the plot does
        not belong to the chart.
        """
        ...
    
    def GetTooltip(self):
        """
        V.GetTooltip() -> vtkTooltipItem
        C++: virtual vtkTooltipItem *GetTooltip()
        
        Get the vtkTooltipItem object that will be displayed by the
        chart.
        """
        ...
    
    def GetZoomWithMouseWheel(self):
        """
        V.GetZoomWithMouseWheel() -> bool
        C++: virtual bool GetZoomWithMouseWheel()
        
        Set the behavior of the mouse wheel.  If true, the mouse wheel
        zooms in/out on the chart.  Otherwise, unless MouseWheelEvent is
        overridden by a subclass the mouse wheel does nothing. The
        default value is true.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Return true if the supplied x, y coordinate is inside the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def KeyPressEvent(self, vtkContextKeyEvent):
        """
        V.KeyPressEvent(vtkContextKeyEvent) -> bool
        C++: bool KeyPressEvent(const vtkContextKeyEvent &key) override;
        
        Key press event.
        """
        ...
    
    def LowerPlot(self, vtkPlot):
        """
        V.LowerPlot(vtkPlot) -> int
        C++: vtkIdType LowerPlot(vtkPlot *plot)
        
        Lowers the plot to the bottom of the plot's stack.
        \return The new index of the plot
        \sa StackPlotUnder(), RaisePlot(), StackPlotAbove()
        """
        ...
    
    def MakeSelection(self, vtkAnnotationLink, vtkIdTypeArray, vtkPlot):
        """
        V.MakeSelection(vtkAnnotationLink, vtkIdTypeArray, vtkPlot)
        C++: static void MakeSelection(vtkAnnotationLink *link,
            vtkIdTypeArray *selectionIds, vtkPlot *plot)
        
        Populate the annotation link with the supplied selectionIds
        array, and set the appropriate node properties for a standard row
        based chart selection.
        """
        ...
    
    def MinusSelection(self, vtkIdTypeArray, vtkIdTypeArray_1):
        """
        V.MinusSelection(vtkIdTypeArray, vtkIdTypeArray)
        C++: static void MinusSelection(vtkIdTypeArray *selection,
            vtkIdTypeArray *oldSelection)
        
        Subtract the supplied selection from the oldSelection.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse button down event
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse) override;
        
        Mouse button release event.
        """
        ...
    
    def MouseEnterEvent(self, vtkContextMouseEvent):
        """
        V.MouseEnterEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseEnterEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse enter event.
        """
        ...
    
    def MouseLeaveEvent(self, vtkContextMouseEvent):
        """
        V.MouseLeaveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseLeaveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse leave event.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event.
        """
        ...
    
    def MouseWheelEvent(self, vtkContextMouseEvent, p_int):
        """
        V.MouseWheelEvent(vtkContextMouseEvent, int) -> bool
        C++: bool MouseWheelEvent(const vtkContextMouseEvent &mouse,
            int delta) override;
        
        Mouse wheel event, positive delta indicates forward movement of
        the wheel.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkChartXY
        C++: vtkChartXY *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the chart, called whenever the chart needs to be
        drawn
        """
        ...
    
    def RaisePlot(self, vtkPlot):
        """
        V.RaisePlot(vtkPlot) -> int
        C++: vtkIdType RaisePlot(vtkPlot *plot)
        
        Raises the plot to the top of the plot's stack.
        \return The new index of the plot
        \sa StackPlotAbove(), LowerPlot(), StackPlotUnder()
        """
        ...
    
    def RecalculateBounds(self):
        """
        V.RecalculateBounds()
        C++: void RecalculateBounds() override;
        
        Request that the chart recalculates the range of its axes.
        Especially useful in applications after the parameters of plots
        have been modified.
        """
        ...
    
    def RemovePlot(self, p_int):
        """
        V.RemovePlot(int) -> bool
        C++: bool RemovePlot(vtkIdType index) override;
        
        Remove the plot at the specified index, returns true if
        successful, false if the index was invalid.
        """
        ...
    
    def RemovePlotSelections(self):
        """
        V.RemovePlotSelections()
        C++: void RemovePlotSelections()
        
        Remove all the selection from Plots
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkChartXY
        C++: static vtkChartXY *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAdjustLowerBoundForLogPlot(self, bool):
        """
        V.SetAdjustLowerBoundForLogPlot(bool)
        C++: virtual void SetAdjustLowerBoundForLogPlot(bool _arg)
        
        Adjust the minimum of a logarithmic axis to be greater than 0,
        regardless of the minimum data value. False by default.
        """
        ...
    
    def SetAutoAxes(self, bool):
        """
        V.SetAutoAxes(bool)
        C++: virtual void SetAutoAxes(bool _arg)
        
        If true then the axes will be turned on and off depending upon
        whether any plots are in that corner. Defaults to true.
        """
        ...
    
    def SetAxis(self, p_int, vtkAxis):
        """
        V.SetAxis(int, vtkAxis)
        C++: virtual void SetAxis(int axisIndex, vtkAxis *) override;
        
        Set the axis specified by axisIndex. This is specified with the
        vtkAxis position enum, valid values are vtkAxis::LEFT,
        vtkAxis::BOTTOM, vtkAxis::RIGHT and vtkAxis::TOP.
        """
        ...
    
    def SetBarWidthFraction(self, p_float):
        """
        V.SetBarWidthFraction(float)
        C++: virtual void SetBarWidthFraction(float _arg)
        
        Set the width fraction for any bar charts drawn in this chart. It
        is assumed that all bar plots will use the same array for the X
        axis, and that this array is regularly spaced. The delta between
        the first two x values is used to calculated the width of the
        bars, and subdivided between each bar. The default value is 0.8,
        1.0 would lead to bars that touch.
        """
        ...
    
    def SetDragPointAlongX(self, bool):
        """
        V.SetDragPointAlongX(bool)
        C++: virtual void SetDragPointAlongX(bool _arg)
        
        Set if the point can be dragged along X by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def SetDragPointAlongY(self, bool):
        """
        V.SetDragPointAlongY(bool)
        C++: virtual void SetDragPointAlongY(bool _arg)
        
        Set if the point can be dragged along Y by the ClickAndDrag
        Action True by default.
        """
        ...
    
    def SetDrawAxesAtOrigin(self, bool):
        """
        V.SetDrawAxesAtOrigin(bool)
        C++: virtual void SetDrawAxesAtOrigin(bool _arg)
        
        If true then the axes will be drawn at the origin (scientific
        style).
        """
        ...
    
    def SetForceAxesToBounds(self, bool):
        """
        V.SetForceAxesToBounds(bool)
        C++: virtual void SetForceAxesToBounds(bool _arg)
        
        Force the axes to have their Minimum and Maximum properties
        inside the plot boundaries. It constrains pan and zoom
        interaction. False by default.
        """
        ...
    
    def SetHiddenAxisBorder(self, p_int):
        """
        V.SetHiddenAxisBorder(int)
        C++: virtual void SetHiddenAxisBorder(int _arg)
        
        Border size of the axes that are hidden (vtkAxis::GetVisible())
        """
        ...
    
    def SetPlotCorner(self, vtkPlot, p_int):
        """
        V.SetPlotCorner(vtkPlot, int)
        C++: void SetPlotCorner(vtkPlot *plot, int corner)
        
        Figure out which quadrant the plot is in.
        """
        ...
    
    def SetSelectionMethod(self, p_int):
        """
        V.SetSelectionMethod(int)
        C++: void SetSelectionMethod(int method) override;
        
        Set the selection method, which controls how selections are
        handled by the chart. The default is SELECTION_ROWS which selects
        all points in all plots in a chart that have values in the rows
        selected. SELECTION_PLOTS allows for finer-grained selections
        specific to each plot, and so to each XY column pair.
        """
        ...
    
    def SetShowLegend(self, bool):
        """
        V.SetShowLegend(bool)
        C++: void SetShowLegend(bool visible) override;
        
        Set whether the chart should draw a legend.
        """
        ...
    
    def SetTooltip(self, vtkTooltipItem):
        """
        V.SetTooltip(vtkTooltipItem)
        C++: virtual void SetTooltip(vtkTooltipItem *tooltip)
        
        Set the vtkTooltipItem object that will be displayed by the
        chart.
        """
        ...
    
    def SetTooltipInfo(self, vtkContextMouseEvent, vtkVector2d, p_int, vtkPlot, p_int_1):
        """
        V.SetTooltipInfo(vtkContextMouseEvent, vtkVector2d, int, vtkPlot,
            int)
        C++: virtual void SetTooltipInfo(const vtkContextMouseEvent &,
            const vtkVector2d &, vtkIdType, vtkPlot *,
            vtkIdType segmentIndex=-1)
        
        Set the information passed to the tooltip.
        """
        ...
    
    def SetZoomWithMouseWheel(self, bool):
        """
        V.SetZoomWithMouseWheel(bool)
        C++: virtual void SetZoomWithMouseWheel(bool _arg)
        
        Set the behavior of the mouse wheel.  If true, the mouse wheel
        zooms in/out on the chart.  Otherwise, unless MouseWheelEvent is
        overridden by a subclass the mouse wheel does nothing. The
        default value is true.
        """
        ...
    
    def StackPlotAbove(self, vtkPlot, vtkPlot_1):
        """
        V.StackPlotAbove(vtkPlot, vtkPlot) -> int
        C++: virtual vtkIdType StackPlotAbove(vtkPlot *plot,
            vtkPlot *under)
        
        Raises the plot above the under plot. If under is null, the plot
        is raised to the top of the plot's stack.
        \return The new index of the plot
        \sa RaisePlot(), LowerPlot(), StackPlotUnder()
        """
        ...
    
    def StackPlotUnder(self, vtkPlot, vtkPlot_1):
        """
        V.StackPlotUnder(vtkPlot, vtkPlot) -> int
        C++: virtual vtkIdType StackPlotUnder(vtkPlot *plot,
            vtkPlot *above)
        
        Lowers the plot under the above plot. If above is null, the plot
        is lowered to the bottom of the plot's stack
        \return The new index of the plot
        \sa StackPlotUnder(), RaisePlot(), StackPlotAbove()
        """
        ...
    
    def ToggleSelection(self, vtkIdTypeArray, vtkIdTypeArray_1):
        """
        V.ToggleSelection(vtkIdTypeArray, vtkIdTypeArray)
        C++: static void ToggleSelection(vtkIdTypeArray *selection,
            vtkIdTypeArray *oldSelection)
        
        Toggle the supplied selection from the oldSelection.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def ZoomWithMouseWheelOff(self):
        """
        V.ZoomWithMouseWheelOff()
        C++: virtual void ZoomWithMouseWheelOff()
        
        Set the behavior of the mouse wheel.  If true, the mouse wheel
        zooms in/out on the chart.  Otherwise, unless MouseWheelEvent is
        overridden by a subclass the mouse wheel does nothing. The
        default value is true.
        """
        ...
    
    def ZoomWithMouseWheelOn(self):
        """
        V.ZoomWithMouseWheelOn()
        C++: virtual void ZoomWithMouseWheelOn()
        
        Set the behavior of the mouse wheel.  If true, the mouse wheel
        zooms in/out on the chart.  Otherwise, unless MouseWheelEvent is
        overridden by a subclass the mouse wheel does nothing. The
        default value is true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


