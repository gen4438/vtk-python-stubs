"""
This type stub file was generated by pyright.
"""

from .vtkChart import vtkChart

class vtkChartBox(vtkChart):
    """
    vtkChartBox - Factory class for drawing box plot charts
    
    Superclass: vtkChart
    
    This defines the interface for a box plot chart.
    """
    def GetColumnId(self, string):
        """
        V.GetColumnId(string) -> int
        C++: vtkIdType GetColumnId(const vtkStdString &name)
        
        Get the input table column id of a column by its name.
        """
        ...
    
    def GetColumnVisibility(self, string):
        """
        V.GetColumnVisibility(string) -> bool
        C++: bool GetColumnVisibility(const vtkStdString &name)
        V.GetColumnVisibility(int) -> bool
        C++: bool GetColumnVisibility(vtkIdType column)
        
        Get the visibility of the specified column.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPlots(self):
        """
        V.GetNumberOfPlots() -> int
        C++: vtkIdType GetNumberOfPlots() override;
        
        Get the number of plots the chart contains.
        """
        ...
    
    def GetNumberOfVisibleColumns(self):
        """
        V.GetNumberOfVisibleColumns() -> int
        C++: virtual vtkIdType GetNumberOfVisibleColumns()
        
        Get the number of visible box plots in the current chart.
        """
        ...
    
    def GetPlot(self, p_int):
        """
        V.GetPlot(int) -> vtkPlot
        C++: vtkPlot *GetPlot(vtkIdType index) override;
        
        Get the plot at the specified index, returns null if the index is
        invalid.
        """
        ...
    
    def GetSelectedColumn(self):
        """
        V.GetSelectedColumn() -> int
        C++: virtual int GetSelectedColumn()
        """
        ...
    
    def GetTooltip(self):
        """
        V.GetTooltip() -> vtkTooltipItem
        C++: virtual vtkTooltipItem *GetTooltip()
        
        Get the vtkTooltipItem object that will be displayed by the
        chart.
        """
        ...
    
    def GetVisibleColumns(self):
        """
        V.GetVisibleColumns() -> vtkStringArray
        C++: virtual vtkStringArray *GetVisibleColumns()
        
        Get a list of the columns, and the order in which they are
        displayed.
        """
        ...
    
    def GetXPosition(self, p_int):
        """
        V.GetXPosition(int) -> float
        C++: virtual float GetXPosition(int index)
        
        Get the column X position by index in the visible set.
        """
        ...
    
    def GetYAxis(self):
        """
        V.GetYAxis() -> vtkAxis
        C++: virtual vtkAxis *GetYAxis()
        
        Get the chart Y axis
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Return true if the supplied x, y coordinate is inside the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse button down event
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse) override;
        
        Mouse button release event.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkChartBox
        C++: vtkChartBox *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the chart, called whenever the chart needs to be
        drawn
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkChartBox
        C++: static vtkChartBox *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColumnVisibility(self, string, bool):
        """
        V.SetColumnVisibility(string, bool)
        C++: void SetColumnVisibility(const vtkStdString &name,
            bool visible)
        V.SetColumnVisibility(int, bool)
        C++: void SetColumnVisibility(vtkIdType column, bool visible)
        
        Set the visibility of the specified column.
        """
        ...
    
    def SetColumnVisibilityAll(self, bool):
        """
        V.SetColumnVisibilityAll(bool)
        C++: void SetColumnVisibilityAll(bool visible)
        
        Set the visibility of all columns (true will make them all
        visible, false will remove all visible columns).
        """
        ...
    
    def SetPlot(self, vtkPlotBox):
        """
        V.SetPlot(vtkPlotBox)
        C++: virtual void SetPlot(vtkPlotBox *plot)
        
        Set plot to use for the chart. Since this type of chart can only
        contain one plot, this will replace the previous plot.
        """
        ...
    
    def SetSelectedColumn(self, p_int):
        """
        V.SetSelectedColumn(int)
        C++: virtual void SetSelectedColumn(int _arg)
        """
        ...
    
    def SetTooltip(self, vtkTooltipItem):
        """
        V.SetTooltip(vtkTooltipItem)
        C++: virtual void SetTooltip(vtkTooltipItem *tooltip)
        
        Set the vtkTooltipItem object that will be displayed by the
        chart.
        """
        ...
    
    def SetTooltipInfo(self, vtkContextMouseEvent, vtkVector2d, p_int, vtkPlot, p_int_1):
        """
        V.SetTooltipInfo(vtkContextMouseEvent, vtkVector2d, int, vtkPlot,
            int)
        C++: virtual void SetTooltipInfo(const vtkContextMouseEvent &,
            const vtkVector2d &, vtkIdType, vtkPlot *,
            vtkIdType segmentIndex=-1)
        
        Set the information passed to the tooltip.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


