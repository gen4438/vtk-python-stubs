"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingContext2D as __vtkmodules_vtkRenderingContext2D

class vtkContextArea(__vtkmodules_vtkRenderingContext2D.vtkAbstractContextItem):
    """
    vtkContextArea - Clipped, transformed area with axes for context
    items.
    
    Superclass: vtkAbstractContextItem
    
    vtkContextArea provides an clipped drawing area surrounded by four
    axes. The drawing area is transformed to map the 2D area described by
    DrawAreaBounds into pixel coordinates. DrawAreaBounds is also used to
    configure the axes. Item to be rendered in the draw area should be
    added to the context item returned by GetDrawAreaItem().
    
    The size and shape of the draw area is configured by the following
    member variables:
    - Geometry: The rect (pixel coordinates) defining the location of the
    context area in the scene. This includes the draw area and axis
      ticks/labels.
    - FillViewport: If true (default), Geometry is set to span the size
      returned by vtkContextDevice2D::GetViewportSize().
    - DrawAreaResizeBehavior: Controls how the draw area should be
      shaped. Available options: Expand (default), FixedAspect,
      FixedRect, FixedMargins.
    - FixedAspect: Aspect ratio to enforce for FixedAspect resize
      behavior.
    - FixedRect: Rect used to enforce for FixedRect resize behavior.
    - FixedMargins: Margins to enforce for FixedMargins resize behavior.
    """
    def FillViewportOff(self):
        """
        V.FillViewportOff()
        C++: virtual void FillViewportOff()
        
        If true, Geometry is set to (0, 0, vpSize[0], vpSize[1]) at the
        start of each Paint call. vpSize is
        vtkContextDevice2D::GetViewportSize. Default is true.
        """
        ...
    
    def FillViewportOn(self):
        """
        V.FillViewportOn()
        C++: virtual void FillViewportOn()
        
        If true, Geometry is set to (0, 0, vpSize[0], vpSize[1]) at the
        start of each Paint call. vpSize is
        vtkContextDevice2D::GetViewportSize. Default is true.
        """
        ...
    
    def GetAxis(self, vtkAxis_Location):
        """
        V.GetAxis(vtkAxis.Location) -> vtkAxis
        C++: vtkAxis *GetAxis(vtkAxis::Location location)
        
        Get the vtkAxis associated with the specified location.
        """
        ...
    
    def GetDrawAreaBounds(self):
        """
        V.GetDrawAreaBounds() -> vtkRectd
        C++: virtual vtkRectd GetDrawAreaBounds()
        
        The data bounds of the clipped and transformed area inside of the
        axes. This is used to configure the axes labels and setup the
        transform.
        """
        ...
    
    def GetDrawAreaItem(self):
        """
        V.GetDrawAreaItem() -> vtkAbstractContextItem
        C++: vtkAbstractContextItem *GetDrawAreaItem()
        
        Returns the vtkAbstractContextItem that will draw in the clipped,
        transformed space. This is the item to add children for.
        """
        ...
    
    def GetDrawAreaResizeBehavior(self):
        """
        V.GetDrawAreaResizeBehavior() -> DrawAreaResizeBehaviorType
        C++: virtual DrawAreaResizeBehaviorType GetDrawAreaResizeBehavior(
            )
        
        Set the resize behavior for the draw area:
        - Expand: The default behavior. The draw area will automatically
          resize to take up as much of Geometry as possible. Margin sizes
        are minimized based on the space required for axis labels/tick
          marks.
        - FixedAspect: Same as Expand, but a fixed aspect ratio is
          enforced. See SetFixedAspect.
        - FixedRect: Draw area is always constrained to a fixed
          rectangle. See SetFixedRect.
        - FixMargins: The draw area expands to fill Geometry, but margins
          (axis labels, etc) are fixed, rather than dynamically sized.
          See SetFixedMargins.
        """
        ...
    
    def GetFillViewport(self):
        """
        V.GetFillViewport() -> bool
        C++: virtual bool GetFillViewport()
        
        If true, Geometry is set to (0, 0, vpSize[0], vpSize[1]) at the
        start of each Paint call. vpSize is
        vtkContextDevice2D::GetViewportSize. Default is true.
        """
        ...
    
    def GetFixedAspect(self):
        """
        V.GetFixedAspect() -> float
        C++: virtual float GetFixedAspect()
        
        The fixed aspect ratio, if DrawAreaResizeBehavior is FixedAspect.
        Defined as width/height. Default is 1. Setting the aspect ratio
        will also set DrawAreaResizeBehavior to FixedAspect.
        """
        ...
    
    def GetFixedMargins(self):
        """
        V.GetFixedMargins() -> vtkTuple_IiLi4EE
        C++: virtual const Margins &GetFixedMargins()
        
        The left, right, bottom, and top margins for the draw area, if
        DrawAreaResizeBehavior is FixedMargins. Units are in pixels,
        default is { 0, 0, 0, 0 }. Setting the fixed margins will also
        set DrawAreaResizeBehavior to FixedMargins.
        """
        ...
    
    def GetFixedMarginsArray(self, p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetFixedMarginsArray([int, int, int, int])
        C++: virtual void GetFixedMarginsArray(int margins[4])
        V.GetFixedMarginsArray() -> (int, ...)
        C++: virtual const int *GetFixedMarginsArray()
        
        The left, right, bottom, and top margins for the draw area, if
        DrawAreaResizeBehavior is FixedMargins. Units are in pixels,
        default is { 0, 0, 0, 0 }. Setting the fixed margins will also
        set DrawAreaResizeBehavior to FixedMargins.
        """
        ...
    
    def GetFixedRect(self):
        """
        V.GetFixedRect() -> vtkRecti
        C++: virtual vtkRecti GetFixedRect()
        
        The fixed rect to use for the draw area, if
        DrawAreaResizeBehavior is FixedRect. Units are in pixels, default
        is 300x300+0+0. Setting the fixed rect will also set
        DrawAreaResizeBehavior to FixedRect.
        """
        ...
    
    def GetGeometry(self):
        """
        V.GetGeometry() -> vtkRecti
        C++: virtual vtkRecti GetGeometry()
        
        The rect defining the pixel location and size of the entire
        vtkContextArea, including axis labels, title, etc. Note that this
        will be updated to the window geometry if FillWindow is true.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShowGrid(self):
        """
        V.GetShowGrid() -> bool
        C++: virtual bool GetShowGrid()
        
        Turn on/off grid visibility.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextArea
        C++: vtkContextArea *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item, called whenever the item needs to be
        drawn.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextArea
        C++: static vtkContextArea *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDrawAreaBounds(self, vtkRectd):
        """
        V.SetDrawAreaBounds(vtkRectd)
        C++: virtual void SetDrawAreaBounds(vtkRectd _arg)
        
        The data bounds of the clipped and transformed area inside of the
        axes. This is used to configure the axes labels and setup the
        transform.
        """
        ...
    
    def SetDrawAreaResizeBehavior(self, DrawAreaResizeBehaviorType):
        """
        V.SetDrawAreaResizeBehavior(DrawAreaResizeBehaviorType)
        C++: virtual void SetDrawAreaResizeBehavior(
            DrawAreaResizeBehaviorType _arg)
        
        Set the resize behavior for the draw area:
        - Expand: The default behavior. The draw area will automatically
          resize to take up as much of Geometry as possible. Margin sizes
        are minimized based on the space required for axis labels/tick
          marks.
        - FixedAspect: Same as Expand, but a fixed aspect ratio is
          enforced. See SetFixedAspect.
        - FixedRect: Draw area is always constrained to a fixed
          rectangle. See SetFixedRect.
        - FixMargins: The draw area expands to fill Geometry, but margins
          (axis labels, etc) are fixed, rather than dynamically sized.
          See SetFixedMargins.
        """
        ...
    
    def SetFillViewport(self, bool):
        """
        V.SetFillViewport(bool)
        C++: virtual void SetFillViewport(bool _arg)
        
        If true, Geometry is set to (0, 0, vpSize[0], vpSize[1]) at the
        start of each Paint call. vpSize is
        vtkContextDevice2D::GetViewportSize. Default is true.
        """
        ...
    
    def SetFixedAspect(self, p_float):
        """
        V.SetFixedAspect(float)
        C++: virtual void SetFixedAspect(float aspect)
        
        The fixed aspect ratio, if DrawAreaResizeBehavior is FixedAspect.
        Defined as width/height. Default is 1. Setting the aspect ratio
        will also set DrawAreaResizeBehavior to FixedAspect.
        """
        ...
    
    def SetFixedMargins(self, vtkTuple_IiLi4EE):
        """
        V.SetFixedMargins(vtkTuple_IiLi4EE)
        C++: virtual void SetFixedMargins(Margins margins)
        V.SetFixedMargins([int, int, int, int])
        C++: virtual void SetFixedMargins(int margins[4])
        V.SetFixedMargins(int, int, int, int)
        C++: virtual void SetFixedMargins(int left, int right, int bottom,
             int top)
        
        The left, right, bottom, and top margins for the draw area, if
        DrawAreaResizeBehavior is FixedMargins. Units are in pixels,
        default is { 0, 0, 0, 0 }. Setting the fixed margins will also
        set DrawAreaResizeBehavior to FixedMargins.
        """
        ...
    
    def SetFixedRect(self, vtkRecti):
        """
        V.SetFixedRect(vtkRecti)
        C++: virtual void SetFixedRect(vtkRecti rect)
        V.SetFixedRect(int, int, int, int)
        C++: virtual void SetFixedRect(int x, int y, int width,
            int height)
        
        The fixed rect to use for the draw area, if
        DrawAreaResizeBehavior is FixedRect. Units are in pixels, default
        is 300x300+0+0. Setting the fixed rect will also set
        DrawAreaResizeBehavior to FixedRect.
        """
        ...
    
    def SetGeometry(self, vtkRecti):
        """
        V.SetGeometry(vtkRecti)
        C++: virtual void SetGeometry(vtkRecti _arg)
        
        The rect defining the pixel location and size of the entire
        vtkContextArea, including axis labels, title, etc. Note that this
        will be updated to the window geometry if FillWindow is true.
        """
        ...
    
    def SetShowGrid(self, bool):
        """
        V.SetShowGrid(bool)
        C++: virtual void SetShowGrid(bool show)
        
        Turn on/off grid visibility.
        """
        ...
    
    def ShowGridOff(self):
        """
        V.ShowGridOff()
        C++: virtual void ShowGridOff()
        
        Turn on/off grid visibility.
        """
        ...
    
    def ShowGridOn(self):
        """
        V.ShowGridOn()
        C++: virtual void ShowGridOn()
        
        Turn on/off grid visibility.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DARB_Expand = ...
    DARB_FixedAspect = ...
    DARB_FixedMargins = ...
    DARB_FixedRect = ...
    DrawAreaResizeBehaviorType = ...
    __dict__ = ...
    __vtkname__ = ...


