"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingContext2D as __vtkmodules_vtkRenderingContext2D

class vtkPiecewisePointHandleItem(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkPiecewisePointHandleItem - a vtkContextItem that draws handles
          around a point of a piecewise function
    
    Superclass: vtkContextItem
    
    This is a vtkContextItem that can be placed into a vtkContextScene.
    It draws handles around a given point of a piecewise function so that
    the curve can be adjusted using these handles.
    """
    def CallRedraw(self, vtkObject, p_int, void, void_1):
        """
        V.CallRedraw(vtkObject, int, void, void)
        C++: static void CallRedraw(vtkObject *sender,
            unsigned long event, void *receiver, void *params)
        """
        ...
    
    def GetCurrentPointIndex(self):
        """
        V.GetCurrentPointIndex() -> int
        C++: virtual vtkIdType GetCurrentPointIndex()
        
        The current point id in the piecewise function being handled.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPiecewiseFunction(self):
        """
        V.GetPiecewiseFunction()
            -> vtkWeakPointer_I20vtkPiecewiseFunctionE
        C++: vtkWeakPointer<vtkPiecewiseFunction> GetPiecewiseFunction()
        
        Set the PieceWiseFunction the handles will manipulate
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the supplied x, y coordinate is inside the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsOverHandle(self, *float):
        """
        V.IsOverHandle([float, ...]) -> int
        C++: int IsOverHandle(float *pos)
        
        Returns the index of the handle if pos is over any of the
        handles, otherwise return -1;
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse button down event.
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse) override;
        
        Mouse button release event.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPiecewisePointHandleItem
        C++: vtkPiecewisePointHandleItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPiecewisePointHandleItem
        C++: static vtkPiecewisePointHandleItem *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCurrentPointIndex(self, p_int):
        """
        V.SetCurrentPointIndex(int)
        C++: virtual void SetCurrentPointIndex(vtkIdType _arg)
        
        The current point id in the piecewise function being handled.
        """
        ...
    
    def SetParent(self, vtkAbstractContextItem):
        """
        V.SetParent(vtkAbstractContextItem)
        C++: void SetParent(vtkAbstractContextItem *parent) override;
        
        Set the parent item, which should be a vtkControlPointItem
        """
        ...
    
    def SetPiecewiseFunction(self, vtkPiecewiseFunction):
        """
        V.SetPiecewiseFunction(vtkPiecewiseFunction)
        C++: virtual void SetPiecewiseFunction(
            vtkPiecewiseFunction *piecewiseFunc)
        
        Set the PieceWiseFunction the handles will manipulate
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


