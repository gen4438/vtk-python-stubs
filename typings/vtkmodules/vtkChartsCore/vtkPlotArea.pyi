"""
This type stub file was generated by pyright.
"""

from .vtkPlot import vtkPlot

class vtkPlotArea(vtkPlot):
    """
    vtkPlotArea - draws an area plot.
    
    Superclass: vtkPlot
    
    vtkPlotArea is used to render an area plot. An area plot (sometimes
    called a range plot) renders a filled region between the selected
    ymin and ymax arrays. To specify the x array and ymin/ymax arrays,
    use the SetInputArray method with array index as 0, 1, or 2,
    respectively.
    """
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: void GetBounds(double bounds[4]) override;
        
        Get the bounds for this plot as (Xmin, Xmax, Ymin, Ymax).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTooltipLabel(self, vtkVector2d, p_int, p_int_1):
        """
        V.GetTooltipLabel(vtkVector2d, int, int) -> string
        C++: vtkStdString GetTooltipLabel(const vtkVector2d &plotPos,
            vtkIdType seriesIndex, vtkIdType segmentIndex) override;
        
        Generate and return the tooltip label string for this plot The
        segmentIndex parameter is ignored, except for vtkPlotBar
        """
        ...
    
    def GetValidPointMaskName(self):
        """
        V.GetValidPointMaskName() -> string
        C++: virtual vtkStdString GetValidPointMaskName()
        
        Get/set the valid point mask array name.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlotArea
        C++: vtkPlotArea *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the XY plot, called whenever the chart needs to
        be drawn
        """
        ...
    
    def PaintLegend(self, vtkContext2D, vtkRectf, p_int):
        """
        V.PaintLegend(vtkContext2D, vtkRectf, int) -> bool
        C++: bool PaintLegend(vtkContext2D *painter, const vtkRectf &rect,
             int legendIndex) override;
        
        Paint legend event for the plot, called whenever the legend needs
        the plot items symbol/mark/line drawn. A rect is supplied with
        the lower left corner of the rect (elements 0 and 1) and with
        width x height (elements 2 and 3). The plot can choose how to
        fill the space supplied. The index is used by Plots that return
        more than one label.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlotArea
        C++: static vtkPlotArea *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColor(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.SetColor(int, int, int, int)
        C++: void SetColor(unsigned char r, unsigned char g,
            unsigned char b, unsigned char a) override;
        V.SetColor(float, float, float)
        C++: void SetColor(double r, double g, double b) override;
        
        Overridden to set the brush color.
        """
        ...
    
    def SetInputArray(self, p_int, string):
        """
        V.SetInputArray(int, string)
        C++: virtual void SetInputArray(int index,
            const vtkStdString &name)
        
        Convenience function to set the input arrays. For most plots
        index 0 is the x axis, and index 1 is the y axis. The name is the
        name of the column in the vtkTable.
        """
        ...
    
    def SetValidPointMaskName(self, string):
        """
        V.SetValidPointMaskName(string)
        C++: virtual void SetValidPointMaskName(vtkStdString _arg)
        
        Get/set the valid point mask array name.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering.
        """
        ...
    
    def UpdateCache(self):
        """
        V.UpdateCache()
        C++: void UpdateCache() override;
        
        Subclasses that build data caches to speed up painting should
        override this method to update such caches. This is called on
        each Paint, hence subclasses must add checks to avoid rebuilding
        of cache, unless necessary.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


