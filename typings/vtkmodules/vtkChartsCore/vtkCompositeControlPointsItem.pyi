"""
This type stub file was generated by pyright.
"""

from .vtkColorTransferControlPointsItem import vtkColorTransferControlPointsItem

class vtkCompositeControlPointsItem(vtkColorTransferControlPointsItem):
    """
    vtkCompositeControlPointsItem - Control points for
    vtkCompositeFunction.
    
    Superclass: vtkColorTransferControlPointsItem
    
    vtkCompositeControlPointsItem draws the control points of a
    vtkPiecewiseFunction and a vtkColorTransferFunction.
    @sa
    vtkControlPointsItem vtkColorTransferControlPointsItem
    vtkCompositeTransferFunctionItem vtkPiecewisePointHandleItem
    """
    def AddPoint(self, *float):
        """
        V.AddPoint([float, ...]) -> int
        C++: vtkIdType AddPoint(double *newPos) override;
        
        Add a point to the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpacityFunction(self):
        """
        V.GetOpacityFunction() -> vtkPiecewiseFunction
        C++: virtual vtkPiecewiseFunction *GetOpacityFunction()
        
        Utility function that calls SetPiecewiseFunction()
        """
        ...
    
    def GetPointsFunction(self):
        """
        V.GetPointsFunction() -> int
        C++: virtual int GetPointsFunction()
        
        PointsFunction controls whether the points represent the
        ColorTransferFunction, OpacityTransferFunction or both. If
        ColorPointsFunction, only the points of the ColorTransfer
        function are used. If OpacityPointsFunction, only the points of
        the Opacity function are used If ColorAndOpacityPointsFunction,
        the points of both functions are shared by both functions.
        ColorAndOpacityPointsFunction by default. Note: Set the mode
        before the functions are set. ColorPointsFunction is not fully
        supported.
        """
        ...
    
    def GetUseOpacityPointHandles(self):
        """
        V.GetUseOpacityPointHandles() -> bool
        C++: virtual bool GetUseOpacityPointHandles()
        
        If UseOpacityPointHandles is true, when the current point is
        double clicked, a vtkPiecewisePointHandleItem will show up so
        that the sharpness and mid point can be adjusted in the scene
        with those handles False by default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse move event. To take care of some special Key stroke
        """
        ...
    
    def MouseDoubleClickEvent(self, vtkContextMouseEvent):
        """
        V.MouseDoubleClickEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseDoubleClickEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse move event. To take care of some special Key stroke
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event. To take care of some special Key stroke
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCompositeControlPointsItem
        C++: vtkCompositeControlPointsItem *NewInstance()
        """
        ...
    
    def RemovePoint(self, *float):
        """
        V.RemovePoint([float, ...]) -> int
        C++: vtkIdType RemovePoint(double *pos) override;
        
        Remove a point of the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCompositeControlPointsItem
        C++: static vtkCompositeControlPointsItem *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetColorTransferFunction(self, vtkColorTransferFunction):
        """
        V.SetColorTransferFunction(vtkColorTransferFunction)
        C++: virtual void SetColorTransferFunction(
            vtkColorTransferFunction *function)
        
        Set the color transfer function to draw its points
        """
        ...
    
    def SetOpacityFunction(self, vtkPiecewiseFunction):
        """
        V.SetOpacityFunction(vtkPiecewiseFunction)
        C++: void SetOpacityFunction(vtkPiecewiseFunction *opacity)
        
        Utility function that calls SetPiecewiseFunction()
        """
        ...
    
    def SetPointsFunction(self, p_int):
        """
        V.SetPointsFunction(int)
        C++: virtual void SetPointsFunction(int _arg)
        
        PointsFunction controls whether the points represent the
        ColorTransferFunction, OpacityTransferFunction or both. If
        ColorPointsFunction, only the points of the ColorTransfer
        function are used. If OpacityPointsFunction, only the points of
        the Opacity function are used If ColorAndOpacityPointsFunction,
        the points of both functions are shared by both functions.
        ColorAndOpacityPointsFunction by default. Note: Set the mode
        before the functions are set. ColorPointsFunction is not fully
        supported.
        """
        ...
    
    def SetUseOpacityPointHandles(self, bool):
        """
        V.SetUseOpacityPointHandles(bool)
        C++: virtual void SetUseOpacityPointHandles(bool _arg)
        
        If UseOpacityPointHandles is true, when the current point is
        double clicked, a vtkPiecewisePointHandleItem will show up so
        that the sharpness and mid point can be adjusted in the scene
        with those handles False by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ColorAndOpacityPointsFunction = ...
    ColorPointsFunction = ...
    OpacityPointsFunction = ...
    PointsFunctionType = ...
    __dict__ = ...
    __vtkname__ = ...


