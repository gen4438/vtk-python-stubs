"""
This type stub file was generated by pyright.
"""

from .vtkChart import vtkChart

class vtkChartPie(vtkChart):
    """
    vtkChartPie - Factory class for drawing pie charts
    
    Superclass: vtkChart
    
    This class implements an pie chart.
    """
    def AddPlot(self, p_int):
        """
        V.AddPlot(int) -> vtkPlot
        C++: vtkPlot *AddPlot(int type) override;
        V.AddPlot(vtkPlot) -> int
        C++: vtkIdType AddPlot(vtkPlot *plot) override;
        
        Add a plot to the chart.
        """
        ...
    
    def GetLegend(self):
        """
        V.GetLegend() -> vtkChartLegend
        C++: vtkChartLegend *GetLegend() override;
        
        Get the legend for the chart, if available. Can return nullptr if
        there is no legend.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPlots(self):
        """
        V.GetNumberOfPlots() -> int
        C++: vtkIdType GetNumberOfPlots() override;
        
        Get the number of plots the chart contains.
        """
        ...
    
    def GetPlot(self, p_int):
        """
        V.GetPlot(int) -> vtkPlot
        C++: vtkPlot *GetPlot(vtkIdType index) override;
        
        Get the plot at the specified index, returns null if the index is
        invalid.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Return true if the supplied x, y coordinate is inside the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse button down event
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse) override;
        
        Mouse button release event.
        """
        ...
    
    def MouseEnterEvent(self, vtkContextMouseEvent):
        """
        V.MouseEnterEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseEnterEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse enter event.
        """
        ...
    
    def MouseLeaveEvent(self, vtkContextMouseEvent):
        """
        V.MouseLeaveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseLeaveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse leave event.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event.
        """
        ...
    
    def MouseWheelEvent(self, vtkContextMouseEvent, p_int):
        """
        V.MouseWheelEvent(vtkContextMouseEvent, int) -> bool
        C++: bool MouseWheelEvent(const vtkContextMouseEvent &mouse,
            int delta) override;
        
        Mouse wheel event, positive delta indicates forward movement of
        the wheel.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkChartPie
        C++: vtkChartPie *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the chart, called whenever the chart needs to be
        drawn
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkChartPie
        C++: static vtkChartPie *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetScene(self, vtkContextScene):
        """
        V.SetScene(vtkContextScene)
        C++: void SetScene(vtkContextScene *scene) override;
        
        Set the vtkContextScene for the item, always set for an item in a
        scene.
        """
        ...
    
    def SetShowLegend(self, bool):
        """
        V.SetShowLegend(bool)
        C++: void SetShowLegend(bool visible) override;
        
        Set whether the chart should draw a legend.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


