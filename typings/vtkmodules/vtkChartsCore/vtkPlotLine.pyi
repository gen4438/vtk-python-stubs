"""
This type stub file was generated by pyright.
"""

from .vtkPlotPoints import vtkPlotPoints

class vtkPlotLine(vtkPlotPoints):
    """
    vtkPlotLine - Class for drawing an XY line plot given two columns
    from a vtkTable.
    
    Superclass: vtkPlotPoints
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPolyLine(self):
        """
        V.GetPolyLine() -> bool
        C++: virtual bool GetPolyLine()
        
        Turn on/off flag to control whether the points define a poly line
        (true) or multiple line segments (false). If true (default), a
        segment is drawn between each points (e.g. [P1P2, P2P3,
        P3P4...].) If false, a segment is drawn for each pair of points
        (e.g. [P1P2, P3P4,...].)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlotLine
        C++: vtkPlotLine *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the XY plot, called whenever the chart needs to
        be drawn.
        """
        ...
    
    def PaintLegend(self, vtkContext2D, vtkRectf, p_int):
        """
        V.PaintLegend(vtkContext2D, vtkRectf, int) -> bool
        C++: bool PaintLegend(vtkContext2D *painter, const vtkRectf &rect,
             int legendIndex) override;
        
        Paint legend event for the XY plot, called whenever the legend
        needs the plot items symbol/mark/line drawn. A rect is supplied
        with the lower left corner of the rect (elements 0 and 1) and
        with width x height (elements 2 and 3). The plot can choose how
        to fill the space supplied.
        """
        ...
    
    def PolyLineOff(self):
        """
        V.PolyLineOff()
        C++: virtual void PolyLineOff()
        
        Turn on/off flag to control whether the points define a poly line
        (true) or multiple line segments (false). If true (default), a
        segment is drawn between each points (e.g. [P1P2, P2P3,
        P3P4...].) If false, a segment is drawn for each pair of points
        (e.g. [P1P2, P3P4,...].)
        """
        ...
    
    def PolyLineOn(self):
        """
        V.PolyLineOn()
        C++: virtual void PolyLineOn()
        
        Turn on/off flag to control whether the points define a poly line
        (true) or multiple line segments (false). If true (default), a
        segment is drawn between each points (e.g. [P1P2, P2P3,
        P3P4...].) If false, a segment is drawn for each pair of points
        (e.g. [P1P2, P3P4,...].)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlotLine
        C++: static vtkPlotLine *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPolyLine(self, bool):
        """
        V.SetPolyLine(bool)
        C++: virtual void SetPolyLine(bool _arg)
        
        Turn on/off flag to control whether the points define a poly line
        (true) or multiple line segments (false). If true (default), a
        segment is drawn between each points (e.g. [P1P2, P2P3,
        P3P4...].) If false, a segment is drawn for each pair of points
        (e.g. [P1P2, P3P4,...].)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


