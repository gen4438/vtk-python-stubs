"""
This type stub file was generated by pyright.
"""

from .vtkPlot import vtkPlot

class vtkControlPointsItem(vtkPlot):
    """
    vtkControlPointsItem - Abstract class for control points items.
    
    Superclass: vtkPlot
    
    vtkControlPointsItem provides control point painting and management
    for subclasses that provide points (typically control points of a
    transfer function)
    @sa
    vtkScalarsToColorsItem vtkPiecewiseControlPointsItem
    """
    def AddPoint(self, *float):
        """
        V.AddPoint([float, ...]) -> int
        C++: virtual vtkIdType AddPoint(double *newPos)
        
        Add a point to the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def DeselectAllPoints(self):
        """
        V.DeselectAllPoints()
        C++: void DeselectAllPoints()
        
        Unselect all the previously selected points
        """
        ...
    
    def DeselectPoint(self, p_int):
        """
        V.DeselectPoint(int)
        C++: void DeselectPoint(vtkIdType pointId)
        V.DeselectPoint([float, ...])
        C++: void DeselectPoint(double *currentPoint)
        
        Unselect a point by its ID
        """
        ...
    
    def FindPoint(self, *float):
        """
        V.FindPoint([float, ...]) -> int
        C++: vtkIdType FindPoint(double *pos)
        
        Returns the vtkIdType of the point given its coordinates and a
        tolerance based on the screen point size.
        """
        ...
    
    def GetAddPointItem(self):
        """
        V.GetAddPointItem() -> vtkPlot
        C++: vtkPlot *GetAddPointItem()
        
        Item dedicated to add point, to be added below all other items.
        Used only if UseAddPointItem is set to true.
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: void GetBounds(double bounds[4]) override;
        
        Bounds of the item, typically the bound of all the control points
        except if custom bounds have been set \sa SetUserBounds.
        """
        ...
    
    def GetControlPoint(self, p_int, *float):
        """
        V.GetControlPoint(int, [float, ...])
        C++: virtual void GetControlPoint(vtkIdType index, double *point)
        
        Returns the x and y coordinates as well as the midpoint and
        sharpness of the control point corresponding to the index. point
        must be a double array of size 4.
        """
        ...
    
    def GetControlPointId(self, *float):
        """
        V.GetControlPointId([float, ...]) -> int
        C++: vtkIdType GetControlPointId(double *pos)
        
        Returns the id of the control point exactly matching pos, -1 if
        not found.
        """
        ...
    
    def GetControlPointsIds(self, vtkIdTypeArray, bool):
        """
        V.GetControlPointsIds(vtkIdTypeArray, bool)
        C++: void GetControlPointsIds(vtkIdTypeArray *ids,
            bool excludeFirstAndLast=false)
        
        Utility function that returns an array of all the control points
        IDs Typically: [0, 1, 2, ... n -1] where n is the point count Can
        exclude the first and last point ids from the array.
        """
        ...
    
    def GetCurrentPoint(self):
        """
        V.GetCurrentPoint() -> int
        C++: vtkIdType GetCurrentPoint()
        
        Returns the current point ID selected or -1 if there is no point
        current. No current point by default.
        """
        ...
    
    def GetEndPointsMovable(self):
        """
        V.GetEndPointsMovable() -> bool
        C++: virtual bool GetEndPointsMovable()
        
        If EndPointsMovable is false, the two end points will not be
        moved. True by default.
        """
        ...
    
    def GetEndPointsRemovable(self):
        """
        V.GetEndPointsRemovable() -> bool
        C++: virtual bool GetEndPointsRemovable()
        
        If EndPointsRemovable is false, the two end points will not be
        removed. True by default.
        """
        ...
    
    def GetEndPointsXMovable(self):
        """
        V.GetEndPointsXMovable() -> bool
        C++: virtual bool GetEndPointsXMovable()
        
        If EndPointsMovable is false, the two end points will not be
        moved. True by default.
        """
        ...
    
    def GetEndPointsYMovable(self):
        """
        V.GetEndPointsYMovable() -> bool
        C++: virtual bool GetEndPointsYMovable()
        
        If EndPointsMovable is false, the two end points will not be
        moved. True by default.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Get/Set the label format. Default is "%.4f, %.4f".
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: virtual vtkIdType GetNumberOfPoints()
        
        Returns the total number of points
        """
        ...
    
    def GetNumberOfSelectedPoints(self):
        """
        V.GetNumberOfSelectedPoints() -> int
        C++: vtkIdType GetNumberOfSelectedPoints()
        
        Return the number of selected points.
        """
        ...
    
    def GetScreenPointRadius(self):
        """
        V.GetScreenPointRadius() -> float
        C++: virtual float GetScreenPointRadius()
        
        Get/set the radius for screen points. Default is 6.f
        """
        ...
    
    def GetSelectedPointBrush(self):
        """
        V.GetSelectedPointBrush() -> vtkBrush
        C++: virtual vtkBrush *GetSelectedPointBrush()
        
        Depending on the control points item, the brush might not be
        taken into account.
        """
        ...
    
    def GetSelectedPointPen(self):
        """
        V.GetSelectedPointPen() -> vtkPen
        C++: virtual vtkPen *GetSelectedPointPen()
        
        Gets the selected point pen and brush.
        """
        ...
    
    def GetShowLabels(self):
        """
        V.GetShowLabels() -> bool
        C++: virtual bool GetShowLabels()
        
        When set to true, labels are shown on the current control point
        and the end points. Default is false.
        """
        ...
    
    def GetStrokeMode(self):
        """
        V.GetStrokeMode() -> bool
        C++: virtual bool GetStrokeMode()
        
        Controls whether or not control points are drawn (true) or
        clicked and moved (false). False by default.
        """
        ...
    
    def GetSwitchPointsMode(self):
        """
        V.GetSwitchPointsMode() -> bool
        C++: virtual bool GetSwitchPointsMode()
        
        If DrawPoints is false, SwitchPoints controls the behavior when a
        control point is dragged past another point. The crossed point
        becomes current (true) or the current point is blocked/stopped
        (false). False by default.
        """
        ...
    
    def GetUseAddPointItem(self):
        """
        V.GetUseAddPointItem() -> bool
        C++: virtual bool GetUseAddPointItem()
        
        When enabled, a dedicated item is used to determine if a point
        should be added when clicking anywhere. This item can be
        recovered with GetAddPointItem and can this be placed below all
        other items. False by default.
        """
        ...
    
    def GetUserBounds(self):
        """
        V.GetUserBounds() -> (float, float, float, float)
        C++: virtual double *GetUserBounds()
        
        Set custom bounds, except if bounds are invalid, bounds will be
        automatically computed based on the range of the control points
        Invalid bounds by default.
        """
        ...
    
    def GetValidBounds(self):
        """
        V.GetValidBounds() -> (float, float, float, float)
        C++: virtual double *GetValidBounds()
        
        Controls the valid range for the values. An invalid value (0, -1,
        0., -1, 0, -1.) indicates that the valid range is the current
        bounds. It is the default behavior.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsOverPoint(self, *float, **kwargs):
        """
        V.IsOverPoint([float, ...], int) -> bool
        C++: bool IsOverPoint(double *pos, vtkIdType pointId)
        
        Returns true if pos is above the pointId point, false otherwise.
        It uses the size of the drawn point. To search what point is
        under the pos, use the more efficient \sa FindPoint() instead.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def KeyPressEvent(self, vtkContextKeyEvent):
        """
        V.KeyPressEvent(vtkContextKeyEvent) -> bool
        C++: bool KeyPressEvent(const vtkContextKeyEvent &key) override;
        
        Mouse and key events.
        """
        ...
    
    def KeyReleaseEvent(self, vtkContextKeyEvent):
        """
        V.KeyReleaseEvent(vtkContextKeyEvent) -> bool
        C++: bool KeyReleaseEvent(const vtkContextKeyEvent &key) override;
        
        Mouse and key events.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse and key events.
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse) override;
        
        Mouse and key events.
        """
        ...
    
    def MouseDoubleClickEvent(self, vtkContextMouseEvent):
        """
        V.MouseDoubleClickEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseDoubleClickEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse and key events.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse and key events.
        """
        ...
    
    def MovePoints(self, vtkVector2f, vtkIdTypeArray):
        """
        V.MovePoints(vtkVector2f, vtkIdTypeArray)
        C++: void MovePoints(const vtkVector2f &translation,
            vtkIdTypeArray *pointIds)
        V.MovePoints(vtkVector2f, bool)
        C++: void MovePoints(const vtkVector2f &translation,
            bool dontMoveFirstAndLast=false)
        
        Move the points referred by pointIds by a given translation. The
        new positions won't be outside the bounds. MovePoints is
        typically called with GetControlPointsIds() or GetSelection().
        Warning: if you pass this->GetSelection(), the array is deleted
        after each individual point move. Increase the reference count of
        the array. See also MoveAllPoints()
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkControlPointsItem
        C++: vtkControlPointsItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint the points with a fixed size (cosmetic) which doesn't
        depend on the scene zoom factor. Selected and unselected points
        are drawn with a different color.
        """
        ...
    
    def RemoveCurrentPoint(self):
        """
        V.RemoveCurrentPoint()
        C++: void RemoveCurrentPoint()
        
        Remove the current point.
        """
        ...
    
    def RemovePoint(self, *float):
        """
        V.RemovePoint([float, ...]) -> int
        C++: virtual vtkIdType RemovePoint(double *pos)
        V.RemovePoint(int) -> int
        C++: vtkIdType RemovePoint(vtkIdType pointId)
        
        Remove a point of the function. Returns the index of the point (0
        based), or -1 on error. Subclasses should reimplement this
        function to do the actual work.
        """
        ...
    
    def ResetBounds(self):
        """
        V.ResetBounds()
        C++: void ResetBounds()
        
        Recompute the bounds next time they are requested. You shouldn't
        have to call it but it is provided for rare cases.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkControlPointsItem
        C++: static vtkControlPointsItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SelectAllPoints(self):
        """
        V.SelectAllPoints()
        C++: void SelectAllPoints()
        
        Select all the points
        """
        ...
    
    def SelectPoint(self, p_int):
        """
        V.SelectPoint(int)
        C++: void SelectPoint(vtkIdType pointId)
        V.SelectPoint([float, ...])
        C++: void SelectPoint(double *currentPoint)
        
        Select a point by its ID
        """
        ...
    
    def SelectPoints(self, vtkVector2f, vtkVector2f_1):
        """
        V.SelectPoints(vtkVector2f, vtkVector2f) -> bool
        C++: bool SelectPoints(const vtkVector2f &min,
            const vtkVector2f &max) override;
        
        Select all points in the specified rectangle.
        """
        ...
    
    def SetControlPoint(self, p_int, *float):
        """
        V.SetControlPoint(int, [float, ...])
        C++: virtual void SetControlPoint(vtkIdType index, double *point)
        
        Sets the x and y coordinates as well as the midpoint and
        sharpness of the control point corresponding to the index.
        """
        ...
    
    def SetCurrentPoint(self, p_int):
        """
        V.SetCurrentPoint(int)
        C++: void SetCurrentPoint(vtkIdType index)
        
        Sets the current point selected.
        """
        ...
    
    def SetEndPointsRemovable(self, bool):
        """
        V.SetEndPointsRemovable(bool)
        C++: virtual void SetEndPointsRemovable(bool _arg)
        
        If EndPointsRemovable is false, the two end points will not be
        removed. True by default.
        """
        ...
    
    def SetEndPointsXMovable(self, bool):
        """
        V.SetEndPointsXMovable(bool)
        C++: virtual void SetEndPointsXMovable(bool _arg)
        
        If EndPointsMovable is false, the two end points will not be
        moved. True by default.
        """
        ...
    
    def SetEndPointsYMovable(self, bool):
        """
        V.SetEndPointsYMovable(bool)
        C++: virtual void SetEndPointsYMovable(bool _arg)
        
        If EndPointsMovable is false, the two end points will not be
        moved. True by default.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Get/Set the label format. Default is "%.4f, %.4f".
        """
        ...
    
    def SetScreenPointRadius(self, p_float):
        """
        V.SetScreenPointRadius(float)
        C++: virtual void SetScreenPointRadius(float _arg)
        
        Get/set the radius for screen points. Default is 6.f
        """
        ...
    
    def SetShowLabels(self, bool):
        """
        V.SetShowLabels(bool)
        C++: virtual void SetShowLabels(bool _arg)
        
        When set to true, labels are shown on the current control point
        and the end points. Default is false.
        """
        ...
    
    def SetSwitchPointsMode(self, bool):
        """
        V.SetSwitchPointsMode(bool)
        C++: virtual void SetSwitchPointsMode(bool _arg)
        
        If DrawPoints is false, SwitchPoints controls the behavior when a
        control point is dragged past another point. The crossed point
        becomes current (true) or the current point is blocked/stopped
        (false). False by default.
        """
        ...
    
    def SetUseAddPointItem(self, bool):
        """
        V.SetUseAddPointItem(bool)
        C++: virtual void SetUseAddPointItem(bool _arg)
        
        When enabled, a dedicated item is used to determine if a point
        should be added when clicking anywhere. This item can be
        recovered with GetAddPointItem and can this be placed below all
        other items. False by default.
        """
        ...
    
    def SetUserBounds(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetUserBounds(float, float, float, float)
        C++: virtual void SetUserBounds(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetUserBounds((float, float, float, float))
        C++: virtual void SetUserBounds(const double _arg[4])
        
        Set custom bounds, except if bounds are invalid, bounds will be
        automatically computed based on the range of the control points
        Invalid bounds by default.
        """
        ...
    
    def SetValidBounds(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetValidBounds(float, float, float, float)
        C++: virtual void SetValidBounds(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetValidBounds((float, float, float, float))
        C++: virtual void SetValidBounds(const double _arg[4])
        
        Controls the valid range for the values. An invalid value (0, -1,
        0., -1, 0, -1.) indicates that the valid range is the current
        bounds. It is the default behavior.
        """
        ...
    
    def SpreadPoints(self, p_float, vtkIdTypeArray):
        """
        V.SpreadPoints(float, vtkIdTypeArray)
        C++: void SpreadPoints(float factor, vtkIdTypeArray *pointIds)
        V.SpreadPoints(float, bool)
        C++: void SpreadPoints(float factor,
            bool dontSpreadFirstAndLast=false)
        
        Spread the points referred by pointIds If factor > 0, points are
        moved away from each other. If factor < 0, points are moved
        closer to each other SpreadPoints is typically called with
        GetControlPointsIds() or GetSelection(). Warning: if you pass
        this->GetSelection(), the array is deleted after each individual
        point move. Increase the reference count of the array.
        """
        ...
    
    def ToggleSelectPoint(self, p_int):
        """
        V.ToggleSelectPoint(int)
        C++: void ToggleSelectPoint(vtkIdType pointId)
        V.ToggleSelectPoint([float, ...])
        C++: void ToggleSelectPoint(double *currentPoint)
        
        Toggle the selection of a point by its ID. If the point was
        selected then unselect it, otherwise select it.
        """
        ...
    
    def UseAddPointItemOff(self):
        """
        V.UseAddPointItemOff()
        C++: virtual void UseAddPointItemOff()
        
        When enabled, a dedicated item is used to determine if a point
        should be added when clicking anywhere. This item can be
        recovered with GetAddPointItem and can this be placed below all
        other items. False by default.
        """
        ...
    
    def UseAddPointItemOn(self):
        """
        V.UseAddPointItemOn()
        C++: virtual void UseAddPointItemOn()
        
        When enabled, a dedicated item is used to determine if a point
        should be added when clicking anywhere. This item can be
        recovered with GetAddPointItem and can this be placed below all
        other items. False by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CurrentPointChangedEvent = ...
    CurrentPointEditEvent = ...
    __dict__ = ...
    __vtkname__ = ...


