"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingContext2D as __vtkmodules_vtkRenderingContext2D

class vtkAxis(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkAxis - takes care of drawing 2D axes
    
    Superclass: vtkContextItem
    
    The vtkAxis is drawn in screen coordinates. It is usually one of the
    last elements of a chart to be drawn. It renders the axis label, tick
    marks and tick labels. The tick marks and labels span the range of
    values betweenMinimum and Maximum. The Minimum and Maximum values are
    not allowed to extend beyond theMinimumLimit and MaximumLimit values,
    respectively.
    
    Note that many other chart elements (e.g., vtkPlotPoints) refer to
    vtkAxis instances to determine how to scale raw data for
    presentation. In particular, care must be taken with logarithmic
    scaling. The axis Minimum, Maximum, and Limit values are stored both
    unscaled and scaled (with log(x) applied when GetLogScaleActive()
    returns true). User interfaces will most likely present the unscaled
    values as they represent the values provided by the user. Other chart
    elements may need the scaled values in order to draw in the same
    coordinate system.
    
    Just because LogScale is set to true does not guarantee that the axis
    will use logarithmic scaling -- the Minimum and Maximum values for
    the axis must both lie to the same side of origin (and not include
    the origin). Also, this switch from linear- to log-scaling may occur
    during a rendering pass if autoscaling is enabled. Because the log
    and pow functions are not invertible and the axis itself decides when
    to switch between them without offering any external class managing
    the axis a chance to save the old values, it saves old Limit values
    in NonLogUnscaled{Min,Max}Limit so that behavior is consistent when
    LogScale is changed from false to true and back again.
    """
    def AutoScale(self):
        """
        V.AutoScale()
        C++: virtual void AutoScale()
        
        Use this function to autoscale the axes after setting the minimum
        and maximum values. This will cause the axes to select the nicest
        numbers that enclose the minimum and maximum values, and to
        select an appropriate number of tick marks.
        """
        ...
    
    def GenerateSimpleLabel(self, p_float):
        """
        V.GenerateSimpleLabel(float) -> string
        C++: virtual vtkStdString GenerateSimpleLabel(double val)
        
        Generate a single label using the current settings when
        TickLabelAlgorithm is TICK_SIMPLE.
        """
        ...
    
    def GetAxisVisible(self):
        """
        V.GetAxisVisible() -> bool
        C++: virtual bool GetAxisVisible()
        
        Get/set whether the axis line should be visible.
        """
        ...
    
    def GetBehavior(self):
        """
        V.GetBehavior() -> int
        C++: virtual int GetBehavior()
        
        Get/set the behavior of the axis (auto or fixed). The default is
        0 (auto).
        """
        ...
    
    def GetBoundingRect(self, vtkContext2D):
        """
        V.GetBoundingRect(vtkContext2D) -> vtkRectf
        C++: vtkRectf GetBoundingRect(vtkContext2D *painter)
        
        Request the space the axes require to be drawn. This is returned
        as a vtkRectf, with the corner being the offset from Point1, and
        the width/ height being the total width/height required by the
        axis. In order to ensure the numbers are correct, Update() should
        be called on the axis.
        """
        ...
    
    def GetGridPen(self):
        """
        V.GetGridPen() -> vtkPen
        C++: virtual vtkPen *GetGridPen()
        
        Get a pointer to the vtkPen object that controls the way this
        axis is drawn.
        """
        ...
    
    def GetGridVisible(self):
        """
        V.GetGridVisible() -> bool
        C++: virtual bool GetGridVisible()
        
        Get/set whether the axis grid lines should be drawn, default is
        true.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual std::string GetLabelFormat()
        
        Get/Set the printf-style format string used when
        TickLabelAlgorithm is TICK_SIMPLE and Notation is
        PRINTF_NOTATION. The default is "%g".
        """
        ...
    
    def GetLabelOffset(self):
        """
        V.GetLabelOffset() -> float
        C++: virtual float GetLabelOffset()
        
        Get/set the offset (in pixels) of the label text position from
        the axis
        """
        ...
    
    def GetLabelProperties(self):
        """
        V.GetLabelProperties() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelProperties()
        
        Get the vtkTextProperty that governs how the axis labels are
        displayed. Note that the alignment properties are not used.
        """
        ...
    
    def GetLabelsVisible(self):
        """
        V.GetLabelsVisible() -> bool
        C++: virtual bool GetLabelsVisible()
        
        Get/set whether the axis labels should be visible.
        """
        ...
    
    def GetLogScale(self):
        """
        V.GetLogScale() -> bool
        C++: virtual bool GetLogScale()
        
        Get/set whether the axis should attemptto use a log scale.
        
        * The default is false.
        * \sa{LogScaleActive}.
        """
        ...
    
    def GetLogScaleActive(self):
        """
        V.GetLogScaleActive() -> bool
        C++: virtual bool GetLogScaleActive()
        
        Get whether the axis is using a log scale. This will always be
        false when LogScale is false. It is only true when LogScale is
        true andthe UnscaledRange does not cross or include the origin
        (zero).
        
        * The limits ( MinimumLimit, MaximumLimit, and their
        * unscaled counterparts) do not prevent LogScaleActive from
          becoming
        * true; they are adjusted if they cross or include the origin
        * and the original limits are preserved for when LogScaleActive
        * becomes false again.
        """
        ...
    
    def GetMargins(self):
        """
        V.GetMargins() -> (int, int)
        C++: virtual int *GetMargins()
        
        Get the margins of the axis, in pixels.
        """
        ...
    
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        
        Get the logical maximum value of the axis, in plot coordinates.
        If LogScaleActive is true (not just LogScale), then this returns
        the maximum base-10 exponent.
        """
        ...
    
    def GetMaximumLimit(self):
        """
        V.GetMaximumLimit() -> float
        C++: virtual double GetMaximumLimit()
        
        Get the logical highest possible value for Maximum, in plot
        coordinates.
        """
        ...
    
    def GetMinimum(self):
        """
        V.GetMinimum() -> float
        C++: virtual double GetMinimum()
        
        Get the logical minimum value of the axis, in plot coordinates.
        If LogScaleActive is true (not just LogScale), then this returns
        the minimum base-10 exponent.
        """
        ...
    
    def GetMinimumLimit(self):
        """
        V.GetMinimumLimit() -> float
        C++: virtual double GetMinimumLimit()
        
        Get the logical lowest possible value for Minimum, in plot
        coordinates.
        """
        ...
    
    def GetNotation(self):
        """
        V.GetNotation() -> int
        C++: virtual int GetNotation()
        
        Get/set the numerical notation, standard, scientific, fixed, or a
        printf-style format string.
        \sa SetPrecision SetLabelFormat
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTicks(self):
        """
        V.GetNumberOfTicks() -> int
        C++: virtual int GetNumberOfTicks()
        
        Get the number of tick marks for this axis.
        """
        ...
    
    def GetPen(self):
        """
        V.GetPen() -> vtkPen
        C++: virtual vtkPen *GetPen()
        
        Get a pointer to the vtkPen object that controls the way this
        axis is drawn.
        """
        ...
    
    def GetPoint1(self):
        """
        V.GetPoint1() -> (float, float)
        C++: virtual float *GetPoint1()
        
        Get point 1 of the axis (in pixels), this is usually the origin.
        """
        ...
    
    def GetPoint2(self):
        """
        V.GetPoint2() -> (float, float)
        C++: virtual float *GetPoint2()
        
        Get point 2 of the axis (in pixels), this is usually the
        terminus.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> int
        C++: virtual int GetPosition()
        
        Get/set the position of the axis (LEFT, BOTTOM, RIGHT, TOP,
        PARALLEL).
        """
        ...
    
    def GetPosition1(self):
        """
        V.GetPosition1() -> vtkVector2f
        C++: vtkVector2f GetPosition1()
        
        Get point 1 of the axis (in pixels), this is usually the origin.
        """
        ...
    
    def GetPosition2(self):
        """
        V.GetPosition2() -> vtkVector2f
        C++: vtkVector2f GetPosition2()
        
        Get point 2 of the axis (in pixels), this is usually the
        terminus.
        """
        ...
    
    def GetPrecision(self):
        """
        V.GetPrecision() -> int
        C++: virtual int GetPrecision()
        
        Get/set the numerical precision to use, default is 2. This is
        ignored when Notation is STANDARD_NOTATION or PRINTF_NOTATION.
        """
        ...
    
    def GetRange(self, *float):
        """
        V.GetRange([float, ...])
        C++: virtual void GetRange(double *range)
        
        Get the logical range of the axis, in plot coordinates.
        
        * The unscaled range will always be in the same coordinate system
        of
        * the data being plotted, regardless of whether LogScale is true
          or false.
        * Calling GetRange() when LogScale is true will return the
          log10({min, max}).
        """
        ...
    
    def GetRangeLabelFormat(self):
        """
        V.GetRangeLabelFormat() -> string
        C++: virtual std::string GetRangeLabelFormat()
        
        Get/Set the printf-style format string used for range labels.
        This format is always used regardless of TickLabelAlgorithm and
        Notation. Default is "%g".
        """
        ...
    
    def GetRangeLabelsVisible(self):
        """
        V.GetRangeLabelsVisible() -> bool
        C++: virtual bool GetRangeLabelsVisible()
        
        Get/set whether the labels for the range should be visible.
        """
        ...
    
    def GetScalingFactor(self):
        """
        V.GetScalingFactor() -> float
        C++: virtual double GetScalingFactor()
        
        Get/set the scaling factor used for the axis, this defaults to
        1.0 (no scaling), and is used to coordinate scaling with the
        plots, charts, etc.
        """
        ...
    
    def GetShift(self):
        """
        V.GetShift() -> float
        C++: virtual double GetShift()
        
        Get/set the scaling factor used for the axis, this defaults to
        1.0 (no scaling), and is used to coordinate scaling with the
        plots, charts, etc.
        """
        ...
    
    def GetTickLabelAlgorithm(self):
        """
        V.GetTickLabelAlgorithm() -> int
        C++: virtual int GetTickLabelAlgorithm()
        
        Get/set the tick label algorithm that is used to calculate the
        min, max and tick spacing. There are currently two algoriths,
        vtkAxis::TICK_SIMPLE is the default and uses a simple algorithm.
        The second option is vtkAxis::TICK_WILKINSON which uses an
        extended Wilkinson algorithm to find the optimal range, spacing
        and font parameters.
        """
        ...
    
    def GetTickLabels(self):
        """
        V.GetTickLabels() -> vtkStringArray
        C++: virtual vtkStringArray *GetTickLabels()
        
        A string array containing the tick labels for the axis.
        """
        ...
    
    def GetTickLength(self):
        """
        V.GetTickLength() -> float
        C++: virtual float GetTickLength()
        
        Get/set the length of tick marks (in pixels).
        """
        ...
    
    def GetTickPositions(self):
        """
        V.GetTickPositions() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetTickPositions()
        
        An array with the positions of the tick marks along the axis
        line. The positions are specified in the plot coordinates of the
        axis.
        """
        ...
    
    def GetTickScenePositions(self):
        """
        V.GetTickScenePositions() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetTickScenePositions()
        
        An array with the positions of the tick marks along the axis
        line. The positions are specified in scene coordinates.
        """
        ...
    
    def GetTicksVisible(self):
        """
        V.GetTicksVisible() -> bool
        C++: virtual bool GetTicksVisible()
        
        Get/set whether the tick marks should be visible.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual vtkStdString GetTitle()
        
        Get/set the title text of the axis.
        """
        ...
    
    def GetTitleProperties(self):
        """
        V.GetTitleProperties() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleProperties()
        
        Get the vtkTextProperty that governs how the axis title is
        displayed.
        """
        ...
    
    def GetTitleVisible(self):
        """
        V.GetTitleVisible() -> bool
        C++: virtual bool GetTitleVisible()
        
        Get/set whether the axis title should be visible.
        """
        ...
    
    def GetUnscaledMaximum(self):
        """
        V.GetUnscaledMaximum() -> float
        C++: virtual double GetUnscaledMaximum()
        
        Get the logical maximum value of the axis, in plot coordinates.
        """
        ...
    
    def GetUnscaledMaximumLimit(self):
        """
        V.GetUnscaledMaximumLimit() -> float
        C++: virtual double GetUnscaledMaximumLimit()
        
        Get the logical highest possible value for Maximum, in plot
        coordinates.
        """
        ...
    
    def GetUnscaledMinimum(self):
        """
        V.GetUnscaledMinimum() -> float
        C++: virtual double GetUnscaledMinimum()
        
        Get the logical minimum value of the axis, in plot coordinates.
        """
        ...
    
    def GetUnscaledMinimumLimit(self):
        """
        V.GetUnscaledMinimumLimit() -> float
        C++: virtual double GetUnscaledMinimumLimit()
        
        Get the logical lowest possible value for Minimum, in plot
        coordinates.
        """
        ...
    
    def GetUnscaledRange(self, *float):
        """
        V.GetUnscaledRange([float, ...])
        C++: virtual void GetUnscaledRange(double *range)
        
        Get the logical range of the axis, in plot coordinates.
        
        * The unscaled range will always be in the same coordinate system
        of
        * the data being plotted, regardless of whether LogScale is true
          or false.
        * Calling GetRange() when LogScale is true will return the
          log10({min, max}).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LogScaleOff(self):
        """
        V.LogScaleOff()
        C++: virtual void LogScaleOff()
        
        Get/set whether the axis should attemptto use a log scale.
        
        * The default is false.
        * \sa{LogScaleActive}.
        """
        ...
    
    def LogScaleOn(self):
        """
        V.LogScaleOn()
        C++: virtual void LogScaleOn()
        
        Get/set whether the axis should attemptto use a log scale.
        
        * The default is false.
        * \sa{LogScaleActive}.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAxis
        C++: vtkAxis *NewInstance()
        """
        ...
    
    def NiceMinMax(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.NiceMinMax(float, float, float, float) -> float
        C++: static double NiceMinMax(double &min, double &max,
            float pixelRange, float tickPixelSpacing)
        
        Static function to calculate "nice" minimum, maximum, and tick
        spacing values.
        """
        ...
    
    def NiceNumber(self, p_float, bool):
        """
        V.NiceNumber(float, bool) -> float
        C++: static double NiceNumber(double number, bool roundUp)
        
        Return a "nice number", often defined as 1, 2 or 5. If roundUp is
        true then the nice number will be rounded up, false it is rounded
        down. The supplied number should be between 0.0 and 9.9.
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the axis, called whenever the axis needs to be
        drawn.
        """
        ...
    
    def RecalculateTickSpacing(self):
        """
        V.RecalculateTickSpacing()
        C++: virtual void RecalculateTickSpacing()
        
        Recalculate the spacing of the tick marks - typically useful to
        do after scaling the axis.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAxis
        C++: static vtkAxis *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAxisVisible(self, bool):
        """
        V.SetAxisVisible(bool)
        C++: virtual void SetAxisVisible(bool _arg)
        
        Get/set whether the axis line should be visible.
        """
        ...
    
    def SetBehavior(self, p_int):
        """
        V.SetBehavior(int)
        C++: virtual void SetBehavior(int _arg)
        
        Get/set the behavior of the axis (auto or fixed). The default is
        0 (auto).
        """
        ...
    
    def SetCustomTickPositions(self, vtkDoubleArray, vtkStringArray):
        """
        V.SetCustomTickPositions(vtkDoubleArray, vtkStringArray) -> bool
        C++: virtual bool SetCustomTickPositions(
            vtkDoubleArray *positions, vtkStringArray *labels=nullptr)
        
        Set the tick positions, and optionally custom tick labels. If the
        labels and positions are null then automatic tick labels will be
        assigned. If only positions are supplied then appropriate labels
        will be generated according to the axis settings. If positions
        and labels are supplied they must be of the same length. Returns
        true on success, false on failure.
        """
        ...
    
    def SetGridVisible(self, bool):
        """
        V.SetGridVisible(bool)
        C++: virtual void SetGridVisible(bool _arg)
        
        Get/set whether the axis grid lines should be drawn, default is
        true.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const std::string &fmt)
        
        Get/Set the printf-style format string used when
        TickLabelAlgorithm is TICK_SIMPLE and Notation is
        PRINTF_NOTATION. The default is "%g".
        """
        ...
    
    def SetLabelOffset(self, p_float):
        """
        V.SetLabelOffset(float)
        C++: virtual void SetLabelOffset(float _arg)
        
        Get/set the offset (in pixels) of the label text position from
        the axis
        """
        ...
    
    def SetLabelsVisible(self, bool):
        """
        V.SetLabelsVisible(bool)
        C++: virtual void SetLabelsVisible(bool _arg)
        
        Get/set whether the axis labels should be visible.
        """
        ...
    
    def SetLogScale(self, bool):
        """
        V.SetLogScale(bool)
        C++: virtual void SetLogScale(bool logScale)
        
        Get/set whether the axis should attemptto use a log scale.
        
        * The default is false.
        * \sa{LogScaleActive}.
        """
        ...
    
    def SetMargins(self, p_int, p_int_1):
        """
        V.SetMargins(int, int)
        C++: virtual void SetMargins(int _arg1, int _arg2)
        V.SetMargins((int, int))
        C++: void SetMargins(const int _arg[2])
        
        Set the margins of the axis, in pixels.
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double maximum)
        
        Set the logical maximum value of the axis, in plot coordinates.
        If LogScaleActive is true (not just LogScale), then this sets the
        maximum base-10 exponent.
        """
        ...
    
    def SetMaximumLimit(self, p_float):
        """
        V.SetMaximumLimit(float)
        C++: virtual void SetMaximumLimit(double highest)
        
        Set the logical highest possible value for Maximum, in plot
        coordinates.
        """
        ...
    
    def SetMinimum(self, p_float):
        """
        V.SetMinimum(float)
        C++: virtual void SetMinimum(double minimum)
        
        Set the logical minimum value of the axis, in plot coordinates.
        If LogScaleActive is true (not just LogScale), then this sets the
        minimum base-10 exponent.
        """
        ...
    
    def SetMinimumLimit(self, p_float):
        """
        V.SetMinimumLimit(float)
        C++: virtual void SetMinimumLimit(double lowest)
        
        Set the logical lowest possible value for Minimum, in plot
        coordinates.
        """
        ...
    
    def SetNotation(self, p_int):
        """
        V.SetNotation(int)
        C++: virtual void SetNotation(int notation)
        
        Get/set the numerical notation, standard, scientific, fixed, or a
        printf-style format string.
        \sa SetPrecision SetLabelFormat
        """
        ...
    
    def SetNumberOfTicks(self, p_int):
        """
        V.SetNumberOfTicks(int)
        C++: virtual void SetNumberOfTicks(int numberOfTicks)
        
        Set the number of tick marks for this axis. Default is -1, which
        leads to automatic calculation of nicely spaced tick marks.
        """
        ...
    
    def SetPoint1(self, vtkVector2f):
        """
        V.SetPoint1(vtkVector2f)
        C++: void SetPoint1(const vtkVector2f &pos)
        V.SetPoint1(float, float)
        C++: void SetPoint1(float x, float y)
        
        Set point 1 of the axis (in pixels), this is usually the origin.
        """
        ...
    
    def SetPoint2(self, vtkVector2f):
        """
        V.SetPoint2(vtkVector2f)
        C++: void SetPoint2(const vtkVector2f &pos)
        V.SetPoint2(float, float)
        C++: void SetPoint2(float x, float y)
        
        Set point 2 of the axis (in pixels), this is usually the
        terminus.
        """
        ...
    
    def SetPosition(self, p_int):
        """
        V.SetPosition(int)
        C++: virtual void SetPosition(int position)
        
        Get/set the position of the axis (LEFT, BOTTOM, RIGHT, TOP,
        PARALLEL).
        """
        ...
    
    def SetPrecision(self, p_int):
        """
        V.SetPrecision(int)
        C++: virtual void SetPrecision(int precision)
        
        Get/set the numerical precision to use, default is 2. This is
        ignored when Notation is STANDARD_NOTATION or PRINTF_NOTATION.
        """
        ...
    
    def SetRange(self, p_float, p_float_1):
        """
        V.SetRange(float, float)
        C++: virtual void SetRange(double minimum, double maximum)
        V.SetRange([float, float])
        C++: virtual void SetRange(double range[2])
        
        Set the logical range of the axis, in plot coordinates.
        
        * The unscaled range will always be in the same coordinate system
        of
        * the data being plotted, regardless of whether LogScale is true
          or false.
        * When calling SetRange() and LogScale is true, the range must be
        specified
        * in logarithmic coordinates.
        * Using SetUnscaledRange(), you may ignore the value of LogScale.
        """
        ...
    
    def SetRangeLabelFormat(self, string):
        """
        V.SetRangeLabelFormat(string)
        C++: virtual void SetRangeLabelFormat(std::string _arg)
        
        Get/Set the printf-style format string used for range labels.
        This format is always used regardless of TickLabelAlgorithm and
        Notation. Default is "%g".
        """
        ...
    
    def SetRangeLabelsVisible(self, bool):
        """
        V.SetRangeLabelsVisible(bool)
        C++: virtual void SetRangeLabelsVisible(bool _arg)
        
        Get/set whether the labels for the range should be visible.
        """
        ...
    
    def SetScalingFactor(self, p_float):
        """
        V.SetScalingFactor(float)
        C++: virtual void SetScalingFactor(double _arg)
        
        Get/set the scaling factor used for the axis, this defaults to
        1.0 (no scaling), and is used to coordinate scaling with the
        plots, charts, etc.
        """
        ...
    
    def SetShift(self, p_float):
        """
        V.SetShift(float)
        C++: virtual void SetShift(double _arg)
        
        Get/set the scaling factor used for the axis, this defaults to
        1.0 (no scaling), and is used to coordinate scaling with the
        plots, charts, etc.
        """
        ...
    
    def SetTickLabelAlgorithm(self, p_int):
        """
        V.SetTickLabelAlgorithm(int)
        C++: virtual void SetTickLabelAlgorithm(int _arg)
        
        Get/set the tick label algorithm that is used to calculate the
        min, max and tick spacing. There are currently two algoriths,
        vtkAxis::TICK_SIMPLE is the default and uses a simple algorithm.
        The second option is vtkAxis::TICK_WILKINSON which uses an
        extended Wilkinson algorithm to find the optimal range, spacing
        and font parameters.
        """
        ...
    
    def SetTickLength(self, p_float):
        """
        V.SetTickLength(float)
        C++: virtual void SetTickLength(float _arg)
        
        Get/set the length of tick marks (in pixels).
        """
        ...
    
    def SetTicksVisible(self, bool):
        """
        V.SetTicksVisible(bool)
        C++: virtual void SetTicksVisible(bool _arg)
        
        Get/set whether the tick marks should be visible.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const vtkStdString &title)
        
        Get/set the title text of the axis.
        """
        ...
    
    def SetTitleVisible(self, bool):
        """
        V.SetTitleVisible(bool)
        C++: virtual void SetTitleVisible(bool _arg)
        
        Get/set whether the axis title should be visible.
        """
        ...
    
    def SetUnscaledMaximum(self, p_float):
        """
        V.SetUnscaledMaximum(float)
        C++: virtual void SetUnscaledMaximum(double maximum)
        
        Set the logical maximum value of the axis, in plot coordinates.
        """
        ...
    
    def SetUnscaledMaximumLimit(self, p_float):
        """
        V.SetUnscaledMaximumLimit(float)
        C++: virtual void SetUnscaledMaximumLimit(double highest)
        
        Set the logical highest possible value for Maximum, in plot
        coordinates.
        """
        ...
    
    def SetUnscaledMinimum(self, p_float):
        """
        V.SetUnscaledMinimum(float)
        C++: virtual void SetUnscaledMinimum(double minimum)
        
        Set the logical, unscaled minimum value of the axis, in plot
        coordinates. Use this instead of SetMinimum() if you wish to
        provide the actual minimum instead of log10(the minimum) as part
        of the axis scale.
        """
        ...
    
    def SetUnscaledMinimumLimit(self, p_float):
        """
        V.SetUnscaledMinimumLimit(float)
        C++: virtual void SetUnscaledMinimumLimit(double lowest)
        
        Set the logical lowest possible value for Minimum, in plot
        coordinates.
        """
        ...
    
    def SetUnscaledRange(self, p_float, p_float_1):
        """
        V.SetUnscaledRange(float, float)
        C++: virtual void SetUnscaledRange(double minimum, double maximum)
        V.SetUnscaledRange([float, float])
        C++: virtual void SetUnscaledRange(double range[2])
        
        Set the logical range of the axis, in plot coordinates.
        
        * The unscaled range will always be in the same coordinate system
        of
        * the data being plotted, regardless of whether LogScale is true
          or false.
        * When calling SetRange() and LogScale is true, the range must be
        specified
        * in logarithmic coordinates.
        * Using SetUnscaledRange(), you may ignore the value of LogScale.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Update the geometry of the axis. Takes care of setting up the
        tick mark locations etc. Should be called by the scene before
        rendering.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AUTO = ...
    BOTTOM = ...
    CUSTOM = ...
    FIXED = ...
    FIXED_NOTATION = ...
    LEFT = ...
    Location = ...
    PARALLEL = ...
    PRINTF_NOTATION = ...
    RIGHT = ...
    SCIENTIFIC_NOTATION = ...
    STANDARD_NOTATION = ...
    TICK_SIMPLE = ...
    TICK_WILKINSON_EXTENDED = ...
    TOP = ...
    __dict__ = ...
    __vtkname__ = ...


