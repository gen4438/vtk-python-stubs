"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingContext2D as __vtkmodules_vtkRenderingContext2D

class vtkChartXYZ(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkChartXYZ - Factory class for drawing 3D XYZ charts.
    
    Superclass: vtkContextItem
    """
    def AddPlot(self, vtkPlot3D):
        """
        V.AddPlot(vtkPlot3D) -> int
        C++: virtual vtkIdType AddPlot(vtkPlot3D *plot)
        
        Adds a plot to the chart.
        """
        ...
    
    def ClearPlots(self):
        """
        V.ClearPlots()
        C++: void ClearPlots()
        
        Remove all the plots from this chart.
        """
        ...
    
    def GetAxis(self, p_int):
        """
        V.GetAxis(int) -> vtkAxis
        C++: vtkAxis *GetAxis(int axis)
        
        Get the x (0), y (1) or z (2) axis.
        """
        ...
    
    def GetAxisColor(self):
        """
        V.GetAxisColor() -> vtkColor4ub
        C++: vtkColor4ub GetAxisColor()
        
        Set the color for the axes.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the transform is interactive, false otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def KeyPressEvent(self, vtkContextKeyEvent):
        """
        V.KeyPressEvent(vtkContextKeyEvent) -> bool
        C++: bool KeyPressEvent(const vtkContextKeyEvent &key) override;
        
        Key press event.  This allows the user to snap the chart to one
        of three different 2D views.  "x" changes the view so we're
        looking down the X axis. Similar behavior occurs for "y" or "z".
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse press event. Keep track of zoom anchor position.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event. Perform pan or zoom as specified by the mouse
        bindings.
        """
        ...
    
    def MouseWheelEvent(self, vtkContextMouseEvent, p_int):
        """
        V.MouseWheelEvent(vtkContextMouseEvent, int) -> bool
        C++: bool MouseWheelEvent(const vtkContextMouseEvent &mouse,
            int delta) override;
        
        Mouse wheel event.  Zooms in or out.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkChartXYZ
        C++: vtkChartXYZ *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the chart, called whenever the chart needs to be
        drawn.
        """
        ...
    
    def RecalculateBounds(self):
        """
        V.RecalculateBounds()
        C++: void RecalculateBounds()
        
        Determine the XYZ bounds of the plots within this chart. This
        information is then used to set the range of the axes.
        """
        ...
    
    def RecalculateTransform(self):
        """
        V.RecalculateTransform()
        C++: void RecalculateTransform()
        
        Use this chart's Geometry to set the endpoints of its axes. This
        method also sets up a transformation that is used to properly
        render the data within the chart.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkChartXYZ
        C++: static vtkChartXYZ *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAngle(self, p_float):
        """
        V.SetAngle(float)
        C++: void SetAngle(double angle)
        
        Set the rotation angle for the chart (AutoRotate mode only).
        """
        ...
    
    def SetAnnotationLink(self, vtkAnnotationLink):
        """
        V.SetAnnotationLink(vtkAnnotationLink)
        C++: virtual void SetAnnotationLink(vtkAnnotationLink *link)
        
        Set the vtkAnnotationLink for the chart.
        """
        ...
    
    def SetAroundX(self, bool):
        """
        V.SetAroundX(bool)
        C++: void SetAroundX(bool isX)
        
        Set whether or not we're rotating about the X axis.
        """
        ...
    
    def SetAutoRotate(self, bool):
        """
        V.SetAutoRotate(bool)
        C++: void SetAutoRotate(bool b)
        
        Set whether or not we're using this chart to rotate on a timer.
        Default value is false.
        """
        ...
    
    def SetAxis(self, p_int, vtkAxis):
        """
        V.SetAxis(int, vtkAxis)
        C++: virtual void SetAxis(int axisIndex, vtkAxis *axis)
        
        Set the x (0), y (1) or z (2) axis.
        """
        ...
    
    def SetAxisColor(self, vtkColor4ub):
        """
        V.SetAxisColor(vtkColor4ub)
        C++: void SetAxisColor(const vtkColor4ub &color)
        
        Set the color for the axes.
        """
        ...
    
    def SetDecorateAxes(self, bool):
        """
        V.SetDecorateAxes(bool)
        C++: void SetDecorateAxes(bool b)
        
        Set whether or not axes labels & tick marks should be drawn.
        Default value is true.
        """
        ...
    
    def SetFitToScene(self, bool):
        """
        V.SetFitToScene(bool)
        C++: void SetFitToScene(bool b)
        
        Set whether or not the chart should automatically resize itself
        to fill the scene.  Default value is true.
        """
        ...
    
    def SetGeometry(self, vtkRectf):
        """
        V.SetGeometry(vtkRectf)
        C++: void SetGeometry(const vtkRectf &bounds)
        
        Set the geometry in pixel coordinates (origin and width/height).
        This method also sets up the end points of the axes of the chart.
        For this reason, if you call SetAroundX(), you should call
        SetGeometry() afterwards.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


