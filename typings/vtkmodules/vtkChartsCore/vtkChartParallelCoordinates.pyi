"""
This type stub file was generated by pyright.
"""

from .vtkChart import vtkChart

class vtkChartParallelCoordinates(vtkChart):
    """
    vtkChartParallelCoordinates - Factory class for drawing 2D charts
    
    Superclass: vtkChart
    
    This defines the interface for a parallel coordinates chart.
    """
    def GetAxis(self, p_int):
        """
        V.GetAxis(int) -> vtkAxis
        C++: vtkAxis *GetAxis(int axisIndex) override;
        
        Get the axis specified by axisIndex.
        """
        ...
    
    def GetColumnVisibility(self, string):
        """
        V.GetColumnVisibility(string) -> bool
        C++: bool GetColumnVisibility(const vtkStdString &name)
        
        Get the visibility of the specified column.
        """
        ...
    
    def GetNumberOfAxes(self):
        """
        V.GetNumberOfAxes() -> int
        C++: vtkIdType GetNumberOfAxes() override;
        
        Get the number of axes in the current chart.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPlots(self):
        """
        V.GetNumberOfPlots() -> int
        C++: vtkIdType GetNumberOfPlots() override;
        
        Get the number of plots the chart contains.
        """
        ...
    
    def GetPlot(self, p_int):
        """
        V.GetPlot(int) -> vtkPlot
        C++: vtkPlot *GetPlot(vtkIdType index) override;
        
        Get the plot at the specified index, returns null if the index is
        invalid.
        """
        ...
    
    def GetVisibleColumns(self):
        """
        V.GetVisibleColumns() -> vtkStringArray
        C++: virtual vtkStringArray *GetVisibleColumns()
        
        Get a list of the columns, and the order in which they are
        displayed.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Return true if the supplied x, y coordinate is inside the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse button down event
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse) override;
        
        Mouse button release event.
        """
        ...
    
    def MouseEnterEvent(self, vtkContextMouseEvent):
        """
        V.MouseEnterEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseEnterEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse enter event.
        """
        ...
    
    def MouseLeaveEvent(self, vtkContextMouseEvent):
        """
        V.MouseLeaveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseLeaveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse leave event.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event.
        """
        ...
    
    def MouseWheelEvent(self, vtkContextMouseEvent, p_int):
        """
        V.MouseWheelEvent(vtkContextMouseEvent, int) -> bool
        C++: bool MouseWheelEvent(const vtkContextMouseEvent &mouse,
            int delta) override;
        
        Mouse wheel event, positive delta indicates forward movement of
        the wheel.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkChartParallelCoordinates
        C++: vtkChartParallelCoordinates *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the chart, called whenever the chart needs to be
        drawn
        """
        ...
    
    def RecalculateBounds(self):
        """
        V.RecalculateBounds()
        C++: void RecalculateBounds() override;
        
        Request that the chart recalculates the range of its axes.
        Especially useful in applications after the parameters of plots
        have been modified.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkChartParallelCoordinates
        C++: static vtkChartParallelCoordinates *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetColumnVisibility(self, string, bool):
        """
        V.SetColumnVisibility(string, bool)
        C++: void SetColumnVisibility(const vtkStdString &name,
            bool visible)
        
        Set the visibility of the specified column.
        """
        ...
    
    def SetColumnVisibilityAll(self, bool):
        """
        V.SetColumnVisibilityAll(bool)
        C++: void SetColumnVisibilityAll(bool visible)
        
        Set the visibility of all columns (true will make them all
        visible, false will remove all visible columns).
        """
        ...
    
    def SetPlot(self, vtkPlotParallelCoordinates):
        """
        V.SetPlot(vtkPlotParallelCoordinates)
        C++: virtual void SetPlot(vtkPlotParallelCoordinates *plot)
        
        Set plot to use for the chart. Since this type of chart can only
        contain one plot, this will replace the previous plot.
        """
        ...
    
    def SetVisibleColumns(self, vtkStringArray):
        """
        V.SetVisibleColumns(vtkStringArray)
        C++: virtual void SetVisibleColumns(vtkStringArray *visColumns)
        
        Set the list of visible columns, and the order in which they will
        be displayed.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


