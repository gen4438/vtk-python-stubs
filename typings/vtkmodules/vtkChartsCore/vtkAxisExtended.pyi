"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkAxisExtended(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAxisExtended - extended axis tick positioning
    
    Superclass: vtkObject
    
    This implements the optimization based tick position calculating
    algorithm in the paper "An Extension of Wilkinson's Algorithm for
    Positioning Tick Labels on Axes" by Junstin Talbot, Sharon Lin and
    Pat Hanrahan
    
    @sa
    vtkAxis
    """
    def Coverage(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.Coverage(float, float, float, float) -> float
        C++: static double Coverage(double dmin, double dmax, double lmin,
             double lmax)
        
        This method makes the data range approximately same as the
        labeling range more preferable
        """
        ...
    
    def CoverageMax(self, p_float, p_float_1, p_float_2):
        """
        V.CoverageMax(float, float, float) -> float
        C++: static double CoverageMax(double dmin, double dmax,
            double span)
        
        This gives the maximum possible value of coverage given the step
        size
        """
        ...
    
    def Density(self, p_int, p_float, p_float_1, p_float_2, p_float_3, p_float_4):
        """
        V.Density(int, float, float, float, float, float) -> float
        C++: static double Density(int k, double m, double dmin,
            double dmax, double lmin, double lmax)
        
        This method return a value to make the density of the labels
        close to the user given value
        """
        ...
    
    def DensityMax(self, p_int, p_float):
        """
        V.DensityMax(int, float) -> float
        C++: static double DensityMax(int k, double m)
        
        Derives the maximum values for density given k (number of ticks)
        and m (user given)
        """
        ...
    
    def FormatLegibilityScore(self, p_float, p_int):
        """
        V.FormatLegibilityScore(float, int) -> float
        C++: static double FormatLegibilityScore(double n, int format)
        
        This methods return the legibility score of different formats
        """
        ...
    
    def FormatStringLength(self, p_int, p_float, p_int_1):
        """
        V.FormatStringLength(int, float, int) -> int
        C++: static int FormatStringLength(int format, double n,
            int precision)
        
        This method returns the string length of different format
        notations.
        """
        ...
    
    def GenerateExtendedTickLabels(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.GenerateExtendedTickLabels(float, float, float, float)
            -> vtkVector3d
        C++: vtkVector3d GenerateExtendedTickLabels(double dmin,
            double dmax, double m, double scaling)
        
        This method implements the algorithm given in the paper The
        method return the minimum tick position, maximum tick position
        and the tick spacing
        """
        ...
    
    def GetDesiredFontSize(self):
        """
        V.GetDesiredFontSize() -> int
        C++: virtual int GetDesiredFontSize()
        """
        ...
    
    def GetFontSize(self):
        """
        V.GetFontSize() -> int
        C++: virtual int GetFontSize()
        
        Set/Get methods for variables
        """
        ...
    
    def GetIsAxisVertical(self):
        """
        V.GetIsAxisVertical() -> bool
        C++: virtual bool GetIsAxisVertical()
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> int
        C++: virtual int GetLabelFormat()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: virtual int GetOrientation()
        """
        ...
    
    def GetPrecision(self):
        """
        V.GetPrecision() -> int
        C++: virtual int GetPrecision()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAxisExtended
        C++: vtkAxisExtended *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAxisExtended
        C++: static vtkAxisExtended *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDesiredFontSize(self, p_int):
        """
        V.SetDesiredFontSize(int)
        C++: virtual void SetDesiredFontSize(int _arg)
        """
        ...
    
    def SetFontSize(self, p_int):
        """
        V.SetFontSize(int)
        C++: virtual void SetFontSize(int _arg)
        
        Set/Get methods for variables
        """
        ...
    
    def SetIsAxisVertical(self, bool):
        """
        V.SetIsAxisVertical(bool)
        C++: virtual void SetIsAxisVertical(bool _arg)
        """
        ...
    
    def SetLabelFormat(self, p_int):
        """
        V.SetLabelFormat(int)
        C++: virtual void SetLabelFormat(int _arg)
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: virtual void SetOrientation(int _arg)
        """
        ...
    
    def SetPrecision(self, p_int):
        """
        V.SetPrecision(int)
        C++: virtual void SetPrecision(int _arg)
        """
        ...
    
    def Simplicity(self, p_int, p_int_1, p_int_2, p_float, p_float_1, p_float_2):
        """
        V.Simplicity(int, int, int, float, float, float) -> float
        C++: static double Simplicity(int qIndex, int qLength, int j,
            double lmin, double lmax, double lstep)
        
        This method return a value to make step sizes corresponding to
        low q and j values more preferable
        """
        ...
    
    def SimplicityMax(self, p_int, p_int_1, p_int_2):
        """
        V.SimplicityMax(int, int, int) -> float
        C++: static double SimplicityMax(int qIndex, int qLength, int j)
        
        This method returns the maximum possible value of simplicity
        value given q and j
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


