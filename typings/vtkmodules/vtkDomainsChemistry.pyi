"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOXMLParser as __vtkmodules_vtkIOXMLParser
import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

VTK_BODR_DATA_PATH_BUILD = ...
class vtkBlueObeliskData(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkBlueObeliskData - Contains chemical data from the Blue
    
    Superclass: vtkObject
    
    Obelisk Data Repository
    
    The Blue Obelisk Data Repository is a free, open repository of
    chemical information. This class is a container for this information.
    
    ote This class contains only the raw arrays parsed from the BODR. For
    more convenient access to this data, use the vtkPeriodicTable class.
    
    ote If you must use this class directly, consider using the static
    vtkBlueObeliskData object accessible through
    vtkPeriodicTable::GetBlueObeliskData(). This object is automatically
    populated on the first instantiation of vtkPeriodicTable.
    """
    def GetBoilingPoints(self):
        """
        V.GetBoilingPoints() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetBoilingPoints()
        """
        ...
    
    def GetCovalentRadii(self):
        """
        V.GetCovalentRadii() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetCovalentRadii()
        """
        ...
    
    def GetDefaultColors(self):
        """
        V.GetDefaultColors() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetDefaultColors()
        """
        ...
    
    def GetElectronAffinities(self):
        """
        V.GetElectronAffinities() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetElectronAffinities()
        """
        ...
    
    def GetElectronicConfigurations(self):
        """
        V.GetElectronicConfigurations() -> vtkStringArray
        C++: virtual vtkStringArray *GetElectronicConfigurations()
        
        Access the raw arrays stored in this vtkBlueObeliskData.
        """
        ...
    
    def GetExactMasses(self):
        """
        V.GetExactMasses() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetExactMasses()
        """
        ...
    
    def GetFamilies(self):
        """
        V.GetFamilies() -> vtkStringArray
        C++: virtual vtkStringArray *GetFamilies()
        
        Access the raw arrays stored in this vtkBlueObeliskData.
        """
        ...
    
    def GetGroups(self):
        """
        V.GetGroups() -> vtkUnsignedShortArray
        C++: virtual vtkUnsignedShortArray *GetGroups()
        """
        ...
    
    def GetIonizationEnergies(self):
        """
        V.GetIonizationEnergies() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetIonizationEnergies()
        """
        ...
    
    def GetLowerNames(self):
        """
        V.GetLowerNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetLowerNames()
        
        Access the raw arrays stored in this vtkBlueObeliskData.
        """
        ...
    
    def GetLowerSymbols(self):
        """
        V.GetLowerSymbols() -> vtkStringArray
        C++: virtual vtkStringArray *GetLowerSymbols()
        
        Access the raw arrays stored in this vtkBlueObeliskData.
        """
        ...
    
    def GetMasses(self):
        """
        V.GetMasses() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetMasses()
        """
        ...
    
    def GetMeltingPoints(self):
        """
        V.GetMeltingPoints() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetMeltingPoints()
        """
        ...
    
    def GetNames(self):
        """
        V.GetNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetNames()
        
        Access the raw arrays stored in this vtkBlueObeliskData.
        """
        ...
    
    def GetNumberOfElements(self):
        """
        V.GetNumberOfElements() -> int
        C++: virtual unsigned short GetNumberOfElements()
        
        Return the number of elements for which this vtkBlueObeliskData
        instance contains information.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPaulingElectronegativities(self):
        """
        V.GetPaulingElectronegativities() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetPaulingElectronegativities()
        """
        ...
    
    def GetPeriodicTableBlocks(self):
        """
        V.GetPeriodicTableBlocks() -> vtkStringArray
        C++: virtual vtkStringArray *GetPeriodicTableBlocks()
        
        Access the raw arrays stored in this vtkBlueObeliskData.
        """
        ...
    
    def GetPeriods(self):
        """
        V.GetPeriods() -> vtkUnsignedShortArray
        C++: virtual vtkUnsignedShortArray *GetPeriods()
        """
        ...
    
    def GetSymbols(self):
        """
        V.GetSymbols() -> vtkStringArray
        C++: virtual vtkStringArray *GetSymbols()
        
        Access the raw arrays stored in this vtkBlueObeliskData.
        """
        ...
    
    def GetVDWRadii(self):
        """
        V.GetVDWRadii() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetVDWRadii()
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Fill this object using an internal vtkBlueObeliskDataParser
        instance. Check that the vtkSimpleMutexLock GetWriteMutex() is
        locked before calling this method on a static instance in a
        multithreaded environment.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsInitialized(self):
        """
        V.IsInitialized() -> bool
        C++: bool IsInitialized()
        
        Check if this object has been initialized yet.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBlueObeliskData
        C++: vtkBlueObeliskData *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBlueObeliskData
        C++: static vtkBlueObeliskData *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBlueObeliskDataParser(__vtkmodules_vtkIOXMLParser.vtkXMLParser):
    """
    vtkBlueObeliskDataParser - Fill a vtkBlueObeliskData container with
    data from the BODR XML dataset.
    
    Superclass: vtkXMLParser
    
    The Blue Obelisk Data Repository is a free, open repository of
    chemical information. This class extracts the BODR information into
    vtk arrays, which are stored in a vtkBlueObeliskData object.
    
    \warning The vtkBlueObeliskDataParser class should never need to be
    used directly. For convenient access to the BODR data, use
    vtkPeriodicTable. For access to the raw arrays produced by this
    parser, see the vtkBlueObeliskData class. A static vtkBlueObeliskData
    object is accessible via vtkPeriodicTable::GetBlueObeliskData().
    
    @sa
    vtkPeriodicTable vtkBlueObeliskData
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBlueObeliskDataParser
        C++: vtkBlueObeliskDataParser *NewInstance()
        """
        ...
    
    def Parse(self):
        """
        V.Parse() -> int
        C++: int Parse() override;
        V.Parse(string) -> int
        C++: int Parse(const char *) override;
        V.Parse(string, int) -> int
        C++: int Parse(const char *, unsigned int) override;
        
        Start parsing
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBlueObeliskDataParser
        C++: static vtkBlueObeliskDataParser *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetTarget(self, vtkBlueObeliskData):
        """
        V.SetTarget(vtkBlueObeliskData)
        C++: virtual void SetTarget(vtkBlueObeliskData *bodr)
        
        Set the target vtkBlueObeliskData object that this parser will
        populate
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCMLMoleculeReader(__vtkmodules_vtkCommonExecutionModel.vtkMoleculeAlgorithm):
    """
    vtkCMLMoleculeReader - Read a CML file and output a vtkMolecule
    object
    
    Superclass: vtkMoleculeAlgorithm
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the name of the CML file
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkMolecule
        C++: vtkMolecule *GetOutput()
        
        Get/Set the output (vtkMolecule) that the reader will fill
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCMLMoleculeReader
        C++: vtkCMLMoleculeReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCMLMoleculeReader
        C++: static vtkCMLMoleculeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the name of the CML file
        """
        ...
    
    def SetOutput(self, vtkMolecule):
        """
        V.SetOutput(vtkMolecule)
        C++: void SetOutput(vtkMolecule *) override;
        
        Get/Set the output (vtkMolecule) that the reader will fill
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGaussianCubeReader2(__vtkmodules_vtkCommonExecutionModel.vtkMoleculeAlgorithm):
    """
    vtkGaussianCubeReader2 - Read a Gaussian Cube file and output a
    vtkMolecule object and a vtkImageData
    
    Superclass: vtkMoleculeAlgorithm
    
    @par Thanks: Dr. Jean M. Favre who developed and contributed this
    class.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the name of the CML file
        """
        ...
    
    def GetGridOutput(self):
        """
        V.GetGridOutput() -> vtkImageData
        C++: vtkImageData *GetGridOutput()
        
        Get/Set the output (vtkImageData) that the reader will fill
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkMolecule
        C++: vtkMolecule *GetOutput()
        
        Get/Set the output (vtkMolecule) that the reader will fill
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGaussianCubeReader2
        C++: vtkGaussianCubeReader2 *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGaussianCubeReader2
        C++: static vtkGaussianCubeReader2 *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the name of the CML file
        """
        ...
    
    def SetOutput(self, vtkMolecule):
        """
        V.SetOutput(vtkMolecule)
        C++: void SetOutput(vtkMolecule *) override;
        
        Get/Set the output (vtkMolecule) that the reader will fill
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMoleculeMapper(__vtkmodules_vtkRenderingCore.vtkMapper):
    """
    vtkMoleculeMapper - Mapper that draws vtkMolecule objects
    
    Superclass: vtkMapper
    
    vtkMoleculeMapper uses glyphs (display lists) to quickly render a
    molecule.
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Reimplemented from base class
        """
        ...
    
    def GetAtomColor(self):
        """
        V.GetAtomColor() -> (int, int, int)
        C++: virtual unsigned char *GetAtomColor()
        
        Get/Set the color of the atoms as an rgb tuple. Default: {150,
        150, 150} (grey)
        """
        ...
    
    def GetAtomColorMode(self):
        """
        V.GetAtomColorMode() -> int
        C++: virtual int GetAtomColorMode()
        
        Get/Set the method by which atoms are colored.
        
        If 'SingleColor' is used, all atoms will have the same color. Use
        SetAtomColor to set the rgb values to be used.
        
        If 'DiscreteByAtom' is selected, each atom is colored using the
        internal lookup table.
        """
        ...
    
    def GetAtomColorModeMaxValue(self):
        """
        V.GetAtomColorModeMaxValue() -> int
        C++: virtual int GetAtomColorModeMaxValue()
        
        Get/Set the method by which atoms are colored.
        
        If 'SingleColor' is used, all atoms will have the same color. Use
        SetAtomColor to set the rgb values to be used.
        
        If 'DiscreteByAtom' is selected, each atom is colored using the
        internal lookup table.
        """
        ...
    
    def GetAtomColorModeMinValue(self):
        """
        V.GetAtomColorModeMinValue() -> int
        C++: virtual int GetAtomColorModeMinValue()
        
        Get/Set the method by which atoms are colored.
        
        If 'SingleColor' is used, all atoms will have the same color. Use
        SetAtomColor to set the rgb values to be used.
        
        If 'DiscreteByAtom' is selected, each atom is colored using the
        internal lookup table.
        """
        ...
    
    def GetAtomicRadiusArrayName(self):
        """
        V.GetAtomicRadiusArrayName() -> string
        C++: virtual char *GetAtomicRadiusArrayName()
        
        Get/Set the atomic radius array name. Default: "radii" It is only
        used when AtomicRadiusType is set to CustomArrayRadius.
        """
        ...
    
    def GetAtomicRadiusScaleFactor(self):
        """
        V.GetAtomicRadiusScaleFactor() -> float
        C++: virtual float GetAtomicRadiusScaleFactor()
        
        Get/Set the uniform scaling factor applied to the atoms. This is
        ignored when AtomicRadiusType == CustomArrayRadius. Default: 0.3.
        """
        ...
    
    def GetAtomicRadiusType(self):
        """
        V.GetAtomicRadiusType() -> int
        C++: virtual int GetAtomicRadiusType()
        
        Get/Set the type of radius used to generate the atoms. Default:
        VDWRadius. If CustomArrayRadius is used, the VertexData array
        named 'radii' is used for per-atom radii.
        """
        ...
    
    def GetAtomicRadiusTypeAsString(self):
        """
        V.GetAtomicRadiusTypeAsString() -> string
        C++: const char *GetAtomicRadiusTypeAsString()
        
        Get/Set the type of radius used to generate the atoms. Default:
        VDWRadius. If CustomArrayRadius is used, the VertexData array
        named 'radii' is used for per-atom radii.
        """
        ...
    
    def GetBondColor(self):
        """
        V.GetBondColor() -> (int, int, int)
        C++: virtual unsigned char *GetBondColor()
        
        Get/Set the color of the bonds as an rgb tuple. Default: {50, 50,
        50} (dark grey)
        """
        ...
    
    def GetBondColorMode(self):
        """
        V.GetBondColorMode() -> int
        C++: virtual int GetBondColorMode()
        
        Get/Set the method by which bonds are colored.
        
        * If 'SingleColor' is used, all bonds will be the same color. Use
        * SetBondColor to set the rgb values used.
        
        * If 'DiscreteByAtom' is selected, each bond is colored using the
        * same lookup table as the atoms at each end, with a sharp color
        * boundary at the bond center.
        """
        ...
    
    def GetBondColorModeAsString(self):
        """
        V.GetBondColorModeAsString() -> string
        C++: const char *GetBondColorModeAsString()
        
        Get/Set the method by which bonds are colored.
        
        * If 'SingleColor' is used, all bonds will be the same color. Use
        * SetBondColor to set the rgb values used.
        
        * If 'DiscreteByAtom' is selected, each bond is colored using the
        * same lookup table as the atoms at each end, with a sharp color
        * boundary at the bond center.
        """
        ...
    
    def GetBondColorModeMaxValue(self):
        """
        V.GetBondColorModeMaxValue() -> int
        C++: virtual int GetBondColorModeMaxValue()
        
        Get/Set the method by which bonds are colored.
        
        * If 'SingleColor' is used, all bonds will be the same color. Use
        * SetBondColor to set the rgb values used.
        
        * If 'DiscreteByAtom' is selected, each bond is colored using the
        * same lookup table as the atoms at each end, with a sharp color
        * boundary at the bond center.
        """
        ...
    
    def GetBondColorModeMinValue(self):
        """
        V.GetBondColorModeMinValue() -> int
        C++: virtual int GetBondColorModeMinValue()
        
        Get/Set the method by which bonds are colored.
        
        * If 'SingleColor' is used, all bonds will be the same color. Use
        * SetBondColor to set the rgb values used.
        
        * If 'DiscreteByAtom' is selected, each bond is colored using the
        * same lookup table as the atoms at each end, with a sharp color
        * boundary at the bond center.
        """
        ...
    
    def GetBondRadius(self):
        """
        V.GetBondRadius() -> float
        C++: virtual float GetBondRadius()
        
        Get/Set the radius of the bond cylinders. Default: 0.075
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6]) override;
        
        Reimplemented from base class
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkMolecule
        C++: vtkMolecule *GetInput()
        
        Get/Set the input vtkMolecule.
        """
        ...
    
    def GetLatticeColor(self):
        """
        V.GetLatticeColor() -> (int, int, int)
        C++: virtual unsigned char *GetLatticeColor()
        
        Get/Set the color of the bonds as an rgb tuple. Default: {255,
        255, 255} (white)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPeriodicTable(self):
        """
        V.GetPeriodicTable() -> vtkPeriodicTable
        C++: vtkPeriodicTable *GetPeriodicTable()
        
        Accessor to internal structure. This is exposed to make it
        available for ray tracers.
        """
        ...
    
    def GetRenderAtoms(self):
        """
        V.GetRenderAtoms() -> bool
        C++: virtual bool GetRenderAtoms()
        
        Get/Set whether or not to render atoms. Default: On.
        """
        ...
    
    def GetRenderBonds(self):
        """
        V.GetRenderBonds() -> bool
        C++: virtual bool GetRenderBonds()
        
        Get/Set whether or not to render bonds. Default: On.
        """
        ...
    
    def GetRenderLattice(self):
        """
        V.GetRenderLattice() -> bool
        C++: virtual bool GetRenderLattice()
        
        Get/Set whether or not to render the unit cell lattice, if
        present. Default: On.
        """
        ...
    
    def GetSelectedAtoms(self, vtkSelection, vtkIdTypeArray):
        """
        V.GetSelectedAtoms(vtkSelection, vtkIdTypeArray)
        C++: virtual void GetSelectedAtoms(vtkSelection *selection,
            vtkIdTypeArray *atomIds)
        
        Extract the ids atoms and/or bonds rendered by this molecule from
        a vtkSelection object. The vtkIdTypeArray
        """
        ...
    
    def GetSelectedAtomsAndBonds(self, vtkSelection, vtkIdTypeArray, vtkIdTypeArray_1):
        """
        V.GetSelectedAtomsAndBonds(vtkSelection, vtkIdTypeArray,
            vtkIdTypeArray)
        C++: virtual void GetSelectedAtomsAndBonds(
            vtkSelection *selection, vtkIdTypeArray *atomIds,
            vtkIdTypeArray *bondIds)
        
        Extract the ids atoms and/or bonds rendered by this molecule from
        a vtkSelection object. The vtkIdTypeArray
        """
        ...
    
    def GetSelectedBonds(self, vtkSelection, vtkIdTypeArray):
        """
        V.GetSelectedBonds(vtkSelection, vtkIdTypeArray)
        C++: virtual void GetSelectedBonds(vtkSelection *selection,
            vtkIdTypeArray *bondIds)
        
        Extract the ids atoms and/or bonds rendered by this molecule from
        a vtkSelection object. The vtkIdTypeArray
        """
        ...
    
    def GetSupportsSelection(self):
        """
        V.GetSupportsSelection() -> bool
        C++: bool GetSupportsSelection() override;
        
        Reimplemented from base class
        """
        ...
    
    def GetUseMultiCylindersForBonds(self):
        """
        V.GetUseMultiCylindersForBonds() -> bool
        C++: virtual bool GetUseMultiCylindersForBonds()
        
        Get/Set whether multicylinders will be used to represent multiple
        bonds. Default: On.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMoleculeMapper
        C++: vtkMoleculeMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Reimplemented from base class
        """
        ...
    
    def Render(self, vtkRenderer, vtkActor):
        """
        V.Render(vtkRenderer, vtkActor)
        C++: void Render(vtkRenderer *, vtkActor *) override;
        
        Reimplemented from base class
        """
        ...
    
    def RenderAtomsOff(self):
        """
        V.RenderAtomsOff()
        C++: virtual void RenderAtomsOff()
        
        Get/Set whether or not to render atoms. Default: On.
        """
        ...
    
    def RenderAtomsOn(self):
        """
        V.RenderAtomsOn()
        C++: virtual void RenderAtomsOn()
        
        Get/Set whether or not to render atoms. Default: On.
        """
        ...
    
    def RenderBondsOff(self):
        """
        V.RenderBondsOff()
        C++: virtual void RenderBondsOff()
        
        Get/Set whether or not to render bonds. Default: On.
        """
        ...
    
    def RenderBondsOn(self):
        """
        V.RenderBondsOn()
        C++: virtual void RenderBondsOn()
        
        Get/Set whether or not to render bonds. Default: On.
        """
        ...
    
    def RenderLatticeOff(self):
        """
        V.RenderLatticeOff()
        C++: virtual void RenderLatticeOff()
        
        Get/Set whether or not to render the unit cell lattice, if
        present. Default: On.
        """
        ...
    
    def RenderLatticeOn(self):
        """
        V.RenderLatticeOn()
        C++: virtual void RenderLatticeOn()
        
        Get/Set whether or not to render the unit cell lattice, if
        present. Default: On.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMoleculeMapper
        C++: static vtkMoleculeMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAtomColor(self, p_int, p_int_1, p_int_2):
        """
        V.SetAtomColor(int, int, int)
        C++: virtual void SetAtomColor(unsigned char _arg1,
            unsigned char _arg2, unsigned char _arg3)
        V.SetAtomColor((int, int, int))
        C++: virtual void SetAtomColor(const unsigned char _arg[3])
        
        Get/Set the color of the atoms as an rgb tuple. Default: {150,
        150, 150} (grey)
        """
        ...
    
    def SetAtomColorMode(self, p_int):
        """
        V.SetAtomColorMode(int)
        C++: virtual void SetAtomColorMode(int _arg)
        
        Get/Set the method by which atoms are colored.
        
        If 'SingleColor' is used, all atoms will have the same color. Use
        SetAtomColor to set the rgb values to be used.
        
        If 'DiscreteByAtom' is selected, each atom is colored using the
        internal lookup table.
        """
        ...
    
    def SetAtomicRadiusArrayName(self, string):
        """
        V.SetAtomicRadiusArrayName(string)
        C++: virtual void SetAtomicRadiusArrayName(const char *_arg)
        
        Get/Set the atomic radius array name. Default: "radii" It is only
        used when AtomicRadiusType is set to CustomArrayRadius.
        """
        ...
    
    def SetAtomicRadiusScaleFactor(self, p_float):
        """
        V.SetAtomicRadiusScaleFactor(float)
        C++: virtual void SetAtomicRadiusScaleFactor(float _arg)
        
        Get/Set the uniform scaling factor applied to the atoms. This is
        ignored when AtomicRadiusType == CustomArrayRadius. Default: 0.3.
        """
        ...
    
    def SetAtomicRadiusType(self, p_int):
        """
        V.SetAtomicRadiusType(int)
        C++: virtual void SetAtomicRadiusType(int _arg)
        
        Get/Set the type of radius used to generate the atoms. Default:
        VDWRadius. If CustomArrayRadius is used, the VertexData array
        named 'radii' is used for per-atom radii.
        """
        ...
    
    def SetAtomicRadiusTypeToCovalentRadius(self):
        """
        V.SetAtomicRadiusTypeToCovalentRadius()
        C++: void SetAtomicRadiusTypeToCovalentRadius()
        
        Get/Set the type of radius used to generate the atoms. Default:
        VDWRadius. If CustomArrayRadius is used, the VertexData array
        named 'radii' is used for per-atom radii.
        """
        ...
    
    def SetAtomicRadiusTypeToCustomArrayRadius(self):
        """
        V.SetAtomicRadiusTypeToCustomArrayRadius()
        C++: void SetAtomicRadiusTypeToCustomArrayRadius()
        
        Get/Set the type of radius used to generate the atoms. Default:
        VDWRadius. If CustomArrayRadius is used, the VertexData array
        named 'radii' is used for per-atom radii.
        """
        ...
    
    def SetAtomicRadiusTypeToUnitRadius(self):
        """
        V.SetAtomicRadiusTypeToUnitRadius()
        C++: void SetAtomicRadiusTypeToUnitRadius()
        
        Get/Set the type of radius used to generate the atoms. Default:
        VDWRadius. If CustomArrayRadius is used, the VertexData array
        named 'radii' is used for per-atom radii.
        """
        ...
    
    def SetAtomicRadiusTypeToVDWRadius(self):
        """
        V.SetAtomicRadiusTypeToVDWRadius()
        C++: void SetAtomicRadiusTypeToVDWRadius()
        
        Get/Set the type of radius used to generate the atoms. Default:
        VDWRadius. If CustomArrayRadius is used, the VertexData array
        named 'radii' is used for per-atom radii.
        """
        ...
    
    def SetBondColor(self, p_int, p_int_1, p_int_2):
        """
        V.SetBondColor(int, int, int)
        C++: virtual void SetBondColor(unsigned char _arg1,
            unsigned char _arg2, unsigned char _arg3)
        V.SetBondColor((int, int, int))
        C++: virtual void SetBondColor(const unsigned char _arg[3])
        
        Get/Set the color of the bonds as an rgb tuple. Default: {50, 50,
        50} (dark grey)
        """
        ...
    
    def SetBondColorMode(self, p_int):
        """
        V.SetBondColorMode(int)
        C++: virtual void SetBondColorMode(int _arg)
        
        Get/Set the method by which bonds are colored.
        
        * If 'SingleColor' is used, all bonds will be the same color. Use
        * SetBondColor to set the rgb values used.
        
        * If 'DiscreteByAtom' is selected, each bond is colored using the
        * same lookup table as the atoms at each end, with a sharp color
        * boundary at the bond center.
        """
        ...
    
    def SetBondColorModeToDiscreteByAtom(self):
        """
        V.SetBondColorModeToDiscreteByAtom()
        C++: void SetBondColorModeToDiscreteByAtom()
        
        Get/Set the method by which bonds are colored.
        
        * If 'SingleColor' is used, all bonds will be the same color. Use
        * SetBondColor to set the rgb values used.
        
        * If 'DiscreteByAtom' is selected, each bond is colored using the
        * same lookup table as the atoms at each end, with a sharp color
        * boundary at the bond center.
        """
        ...
    
    def SetBondColorModeToSingleColor(self):
        """
        V.SetBondColorModeToSingleColor()
        C++: void SetBondColorModeToSingleColor()
        
        Get/Set the method by which bonds are colored.
        
        * If 'SingleColor' is used, all bonds will be the same color. Use
        * SetBondColor to set the rgb values used.
        
        * If 'DiscreteByAtom' is selected, each bond is colored using the
        * same lookup table as the atoms at each end, with a sharp color
        * boundary at the bond center.
        """
        ...
    
    def SetBondRadius(self, p_float):
        """
        V.SetBondRadius(float)
        C++: virtual void SetBondRadius(float _arg)
        
        Get/Set the radius of the bond cylinders. Default: 0.075
        """
        ...
    
    def SetInputData(self, vtkMolecule):
        """
        V.SetInputData(vtkMolecule)
        C++: void SetInputData(vtkMolecule *in)
        
        Get/Set the input vtkMolecule.
        """
        ...
    
    def SetLatticeColor(self, p_int, p_int_1, p_int_2):
        """
        V.SetLatticeColor(int, int, int)
        C++: virtual void SetLatticeColor(unsigned char _arg1,
            unsigned char _arg2, unsigned char _arg3)
        V.SetLatticeColor((int, int, int))
        C++: virtual void SetLatticeColor(const unsigned char _arg[3])
        
        Get/Set the color of the bonds as an rgb tuple. Default: {255,
        255, 255} (white)
        """
        ...
    
    def SetMapScalars(self, bool):
        """
        V.SetMapScalars(bool)
        C++: virtual void SetMapScalars(bool map)
        
        Helper method to set ScalarMode on both AtomGlyphMapper and
        BondGlyphMapper. true means VTK_COLOR_MODE_MAP_SCALARS, false
        VTK_COLOR_MODE_DIRECT_SCALARS.
        """
        ...
    
    def SetRenderAtoms(self, bool):
        """
        V.SetRenderAtoms(bool)
        C++: virtual void SetRenderAtoms(bool _arg)
        
        Get/Set whether or not to render atoms. Default: On.
        """
        ...
    
    def SetRenderBonds(self, bool):
        """
        V.SetRenderBonds(bool)
        C++: virtual void SetRenderBonds(bool _arg)
        
        Get/Set whether or not to render bonds. Default: On.
        """
        ...
    
    def SetRenderLattice(self, bool):
        """
        V.SetRenderLattice(bool)
        C++: virtual void SetRenderLattice(bool _arg)
        
        Get/Set whether or not to render the unit cell lattice, if
        present. Default: On.
        """
        ...
    
    def SetUseMultiCylindersForBonds(self, bool):
        """
        V.SetUseMultiCylindersForBonds(bool)
        C++: virtual void SetUseMultiCylindersForBonds(bool _arg)
        
        Get/Set whether multicylinders will be used to represent multiple
        bonds. Default: On.
        """
        ...
    
    def UseBallAndStickSettings(self):
        """
        V.UseBallAndStickSettings()
        C++: void UseBallAndStickSettings()
        
        Set ivars to default ball-and-stick settings. This is equivalent
        to the following:
        - SetRenderAtoms( true )
        - SetRenderBonds( true )
        - SetAtomicRadiusType( VDWRadius )
        - SetAtomicRadiusScaleFactor( 0.3 )
        - SetBondColorMode( DiscreteByAtom )
        - SetUseMultiCylindersForBonds( true )
        - SetBondRadius( 0.075 )
        """
        ...
    
    def UseFastSettings(self):
        """
        V.UseFastSettings()
        C++: void UseFastSettings()
        
        Set ivars to use fast settings that may be useful for rendering
        extremely large molecules where the overall shape is more
        important than the details of the atoms/bond. This is equivalent
        to the following:
        - SetRenderAtoms( true )
        - SetRenderBonds( true )
        - SetAtomicRadiusType( UnitRadius )
        - SetAtomicRadiusScaleFactor( 0.60 )
        - SetBondColorMode( SingleColor )
        - SetBondColor( 50, 50, 50 )
        - SetUseMultiCylindersForBonds( false )
        - SetBondRadius( 0.075 )
        """
        ...
    
    def UseLiquoriceStickSettings(self):
        """
        V.UseLiquoriceStickSettings()
        C++: void UseLiquoriceStickSettings()
        
        Set ivars to default liquorice stick settings. This is equivalent
        to the following:
        - SetRenderAtoms( true )
        - SetRenderBonds( true )
        - SetAtomicRadiusType( UnitRadius )
        - SetAtomicRadiusScaleFactor( 0.1 )
        - SetBondColorMode( DiscreteByAtom )
        - SetUseMultiCylindersForBonds( false )
        - SetBondRadius( 0.1 )
        """
        ...
    
    def UseMultiCylindersForBondsOff(self):
        """
        V.UseMultiCylindersForBondsOff()
        C++: virtual void UseMultiCylindersForBondsOff()
        
        Get/Set whether multicylinders will be used to represent multiple
        bonds. Default: On.
        """
        ...
    
    def UseMultiCylindersForBondsOn(self):
        """
        V.UseMultiCylindersForBondsOn()
        C++: virtual void UseMultiCylindersForBondsOn()
        
        Get/Set whether multicylinders will be used to represent multiple
        bonds. Default: On.
        """
        ...
    
    def UseVDWSpheresSettings(self):
        """
        V.UseVDWSpheresSettings()
        C++: void UseVDWSpheresSettings()
        
        Set ivars to default van der Waals spheres settings. This is
        equivalent to the following:
        - SetRenderAtoms( true )
        - SetRenderBonds( true )
        - SetAtomicRadiusType( VDWRadius )
        - SetAtomicRadiusScaleFactor( 1.0 )
        - SetBondColorMode( DiscreteByAtom )
        - SetUseMultiCylindersForBonds( true )
        - SetBondRadius( 0.075 )
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CovalentRadius = ...
    CustomArrayRadius = ...
    DiscreteByAtom = ...
    SingleColor = ...
    UnitRadius = ...
    VDWRadius = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMoleculeToPolyDataFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkMoleculeToPolyDataFilter - abstract filter class
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkMoleculeToPolyDataFilter is an abstract filter class whose
    subclasses take as input datasets of type vtkMolecule and generate
    polygonal data on output.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkMolecule
        C++: vtkMolecule *GetInput()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMoleculeToPolyDataFilter
        C++: vtkMoleculeToPolyDataFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMoleculeToPolyDataFilter
        C++: static vtkMoleculeToPolyDataFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMoleculeToAtomBallFilter(vtkMoleculeToPolyDataFilter):
    """
    vtkMoleculeToAtomBallFilter - Generate polydata with spheres
    representing atoms
    
    Superclass: vtkMoleculeToPolyDataFilter
    
    This filter is used to generate one sphere for each atom in the input
    vtkMolecule. Each sphere is centered at the atom center and can be
    scaled using either covalent or van der Waals radii. The point
    scalars of the output vtkPolyData contains the atomic number of the
    appropriate atom for color mapping.
    
    ote Consider using the faster, simpler vtkMoleculeMapper class,
    rather than generating polydata manually via these filters.
    
    @sa
    vtkMoleculeMapper vtkMoleculeToBondStickFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadiusScale(self):
        """
        V.GetRadiusScale() -> float
        C++: virtual double GetRadiusScale()
        """
        ...
    
    def GetRadiusSource(self):
        """
        V.GetRadiusSource() -> int
        C++: virtual int GetRadiusSource()
        """
        ...
    
    def GetResolution(self):
        """
        V.GetResolution() -> int
        C++: virtual int GetResolution()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMoleculeToAtomBallFilter
        C++: vtkMoleculeToAtomBallFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMoleculeToAtomBallFilter
        C++: static vtkMoleculeToAtomBallFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetRadiusScale(self, p_float):
        """
        V.SetRadiusScale(float)
        C++: virtual void SetRadiusScale(double _arg)
        """
        ...
    
    def SetRadiusSource(self, p_int):
        """
        V.SetRadiusSource(int)
        C++: virtual void SetRadiusSource(int _arg)
        """
        ...
    
    def SetResolution(self, p_int):
        """
        V.SetResolution(int)
        C++: virtual void SetResolution(int _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CovalentRadius = ...
    UnitRadius = ...
    VDWRadius = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMoleculeToBondStickFilter(vtkMoleculeToPolyDataFilter):
    """
    vtkMoleculeToBondStickFilter - Generate polydata with cylinders
    representing bonds
    
    Superclass: vtkMoleculeToPolyDataFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMoleculeToBondStickFilter
        C++: vtkMoleculeToBondStickFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMoleculeToBondStickFilter
        C++: static vtkMoleculeToBondStickFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMoleculeToLinesFilter(vtkMoleculeToPolyDataFilter):
    """
    vtkMoleculeToLinesFilter - Convert a molecule into a simple polydata
    with lines.
    
    Superclass: vtkMoleculeToPolyDataFilter
    
    vtkMoleculeToLinesFilter is a filter class that takes vtkMolecule as
    input and generates polydata on output. Conversion is done following
    this rules:
    - 1 atom == 1 point
    - 1 bond == 1 line (cell of type VTK_LINE)
    - atom data is copied as point data
    - bond data is copied as cell data
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMoleculeToLinesFilter
        C++: vtkMoleculeToLinesFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMoleculeToLinesFilter
        C++: static vtkMoleculeToLinesFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPeriodicTable(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkPeriodicTable - Access to information about the elements.
    
    Superclass: vtkObject
    
    Sourced from the Blue Obelisk Data Repository
    
    @sa
    vtkBlueObeliskData vtkBlueObeliskDataParser
    """
    def GetAtomicNumber(self, string):
        """
        V.GetAtomicNumber(string) -> int
        C++: unsigned short GetAtomicNumber(const vtkStdString &str)
        
        Given a case-insensitive string that contains the symbol or name
        of an element, return the corresponding atomic number.
        """
        ...
    
    def GetBlueObeliskData(self):
        """
        V.GetBlueObeliskData() -> vtkBlueObeliskData
        C++: virtual vtkBlueObeliskData *GetBlueObeliskData()
        
        Access the static vtkBlueObeliskData object for raw access to
        BODR data.
        """
        ...
    
    def GetCovalentRadius(self, p_int):
        """
        V.GetCovalentRadius(int) -> float
        C++: float GetCovalentRadius(unsigned short atomicNum)
        
        Given an atomic number, return the covalent radius of the atom
        """
        ...
    
    def GetDefaultLUT(self, vtkLookupTable):
        """
        V.GetDefaultLUT(vtkLookupTable)
        C++: void GetDefaultLUT(vtkLookupTable *)
        
        Fill the given vtkLookupTable to map atomic numbers to the
        familiar RGB tuples provided by the Blue Obelisk Data Repository
        """
        ...
    
    def GetDefaultRGBTuple(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.GetDefaultRGBTuple(int, [float, float, float])
        C++: void GetDefaultRGBTuple(unsigned short atomicNum,
            float rgb[3])
        V.GetDefaultRGBTuple(int) -> vtkColor3f
        C++: vtkColor3f GetDefaultRGBTuple(unsigned short atomicNum)
        
        Given an atomic number, return the familiar RGB tuple provided by
        the Blue Obelisk Data Repository
        """
        ...
    
    def GetElementName(self, p_int):
        """
        V.GetElementName(int) -> string
        C++: const char *GetElementName(unsigned short atomicNum)
        
        Given an atomic number, returns the name of the element
        """
        ...
    
    def GetMaxVDWRadius(self):
        """
        V.GetMaxVDWRadius() -> float
        C++: float GetMaxVDWRadius()
        
        Given an atomic number, returns the van der Waals radius of the
        atom
        """
        ...
    
    def GetNumberOfElements(self):
        """
        V.GetNumberOfElements() -> int
        C++: unsigned short GetNumberOfElements()
        
        Returns the number of elements in the periodic table.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSymbol(self, p_int):
        """
        V.GetSymbol(int) -> string
        C++: const char *GetSymbol(unsigned short atomicNum)
        
        Given an atomic number, returns the symbol associated with the
        element
        """
        ...
    
    def GetVDWRadius(self, p_int):
        """
        V.GetVDWRadius(int) -> float
        C++: float GetVDWRadius(unsigned short atomicNum)
        
        Given an atomic number, returns the van der Waals radius of the
        atom
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPeriodicTable
        C++: vtkPeriodicTable *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPeriodicTable
        C++: static vtkPeriodicTable *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPointSetToMoleculeFilter(__vtkmodules_vtkCommonExecutionModel.vtkMoleculeAlgorithm):
    """
    vtkPointSetToMoleculeFilter - no description provided.
    
    Superclass: vtkMoleculeAlgorithm
    """
    def ConvertLinesIntoBondsOff(self):
        """
        V.ConvertLinesIntoBondsOff()
        C++: virtual void ConvertLinesIntoBondsOff()
        
        Get/Set if the filter should look for lines in input cells and
        convert them into bonds. default is ON.
        """
        ...
    
    def ConvertLinesIntoBondsOn(self):
        """
        V.ConvertLinesIntoBondsOn()
        C++: virtual void ConvertLinesIntoBondsOn()
        
        Get/Set if the filter should look for lines in input cells and
        convert them into bonds. default is ON.
        """
        ...
    
    def GetConvertLinesIntoBonds(self):
        """
        V.GetConvertLinesIntoBonds() -> bool
        C++: virtual bool GetConvertLinesIntoBonds()
        
        Get/Set if the filter should look for lines in input cells and
        convert them into bonds. default is ON.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointSetToMoleculeFilter
        C++: vtkPointSetToMoleculeFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointSetToMoleculeFilter
        C++: static vtkPointSetToMoleculeFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetConvertLinesIntoBonds(self, bool):
        """
        V.SetConvertLinesIntoBonds(bool)
        C++: virtual void SetConvertLinesIntoBonds(bool _arg)
        
        Get/Set if the filter should look for lines in input cells and
        convert them into bonds. default is ON.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkProgrammableElectronicData(__vtkmodules_vtkCommonDataModel.vtkAbstractElectronicData):
    """
    vtkProgrammableElectronicData - Provides access to and storage of
    user-generated vtkImageData that describes electrons.
    
    Superclass: vtkAbstractElectronicData
    """
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *obj) override;
        
        Deep copies the data object into this.
        """
        ...
    
    def GetElectronDensity(self):
        """
        V.GetElectronDensity() -> vtkImageData
        C++: vtkImageData *GetElectronDensity() override;
        
        Get/Set the vtkImageData for the molecule's electron density.
        """
        ...
    
    def GetMO(self, p_int):
        """
        V.GetMO(int) -> vtkImageData
        C++: vtkImageData *GetMO(vtkIdType orbitalNumber) override;
        
        Get/Set the vtkImageData for the requested molecular orbital.
        """
        ...
    
    def GetNumberOfElectrons(self):
        """
        V.GetNumberOfElectrons() -> int
        C++: vtkIdType GetNumberOfElectrons() override;
        
        Get/Set the number of electrons in the molecule. Needed for
        HOMO/LUMO convenience functions
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfMOs(self):
        """
        V.GetNumberOfMOs() -> int
        C++: vtkIdType GetNumberOfMOs() override;
        
        Get/Set the number of molecular orbitals. Setting this will
        resize this internal array of MOs.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProgrammableElectronicData
        C++: vtkProgrammableElectronicData *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProgrammableElectronicData
        C++: static vtkProgrammableElectronicData *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetElectronDensity(self, vtkImageData):
        """
        V.SetElectronDensity(vtkImageData)
        C++: virtual void SetElectronDensity(vtkImageData *)
        
        Get/Set the vtkImageData for the molecule's electron density.
        """
        ...
    
    def SetMO(self, p_int, vtkImageData):
        """
        V.SetMO(int, vtkImageData)
        C++: void SetMO(vtkIdType orbitalNumber, vtkImageData *data)
        
        Get/Set the vtkImageData for the requested molecular orbital.
        """
        ...
    
    def SetNumberOfElectrons(self, p_int):
        """
        V.SetNumberOfElectrons(int)
        C++: virtual void SetNumberOfElectrons(vtkIdType _arg)
        
        Get/Set the number of electrons in the molecule. Needed for
        HOMO/LUMO convenience functions
        """
        ...
    
    def SetNumberOfMOs(self, p_int):
        """
        V.SetNumberOfMOs(int)
        C++: virtual void SetNumberOfMOs(vtkIdType)
        
        Get/Set the number of molecular orbitals. Setting this will
        resize this internal array of MOs.
        """
        ...
    
    def SetPadding(self, p_float):
        """
        V.SetPadding(float)
        C++: virtual void SetPadding(double _arg)
        
        Set the padding around the molecule to which the cube extends.
        This is used to determine the dataset bounds.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkProteinRibbonFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkProteinRibbonFilter - generates protein ribbons
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkProteinRibbonFilter is a polydata algorithm that generates protein
    ribbons.
    """
    def GetCoilWidth(self):
        """
        V.GetCoilWidth() -> float
        C++: virtual float GetCoilWidth()
        
        Width of the ribbon coil. Default is 0.3.
        """
        ...
    
    def GetDrawSmallMoleculesAsSpheres(self):
        """
        V.GetDrawSmallMoleculesAsSpheres() -> bool
        C++: virtual bool GetDrawSmallMoleculesAsSpheres()
        
        If enabled, small molecules (HETATMs) are drawn as spheres.
        Default is true.
        """
        ...
    
    def GetHelixWidth(self):
        """
        V.GetHelixWidth() -> float
        C++: virtual float GetHelixWidth()
        
        Width of the helix part of the ribbon. Default is 1.3.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSphereResolution(self):
        """
        V.GetSphereResolution() -> int
        C++: virtual int GetSphereResolution()
        
        Resolution of the spheres for small molecules. Default is 20.
        """
        ...
    
    def GetSubdivideFactor(self):
        """
        V.GetSubdivideFactor() -> int
        C++: virtual int GetSubdivideFactor()
        
        Smoothing factor of the ribbon. Default is 20.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProteinRibbonFilter
        C++: vtkProteinRibbonFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProteinRibbonFilter
        C++: static vtkProteinRibbonFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCoilWidth(self, p_float):
        """
        V.SetCoilWidth(float)
        C++: virtual void SetCoilWidth(float _arg)
        
        Width of the ribbon coil. Default is 0.3.
        """
        ...
    
    def SetDrawSmallMoleculesAsSpheres(self, bool):
        """
        V.SetDrawSmallMoleculesAsSpheres(bool)
        C++: virtual void SetDrawSmallMoleculesAsSpheres(bool _arg)
        
        If enabled, small molecules (HETATMs) are drawn as spheres.
        Default is true.
        """
        ...
    
    def SetHelixWidth(self, p_float):
        """
        V.SetHelixWidth(float)
        C++: virtual void SetHelixWidth(float _arg)
        
        Width of the helix part of the ribbon. Default is 1.3.
        """
        ...
    
    def SetSphereResolution(self, p_int):
        """
        V.SetSphereResolution(int)
        C++: virtual void SetSphereResolution(int _arg)
        
        Resolution of the spheres for small molecules. Default is 20.
        """
        ...
    
    def SetSubdivideFactor(self, p_int):
        """
        V.SetSubdivideFactor(int)
        C++: virtual void SetSubdivideFactor(int _arg)
        
        Smoothing factor of the ribbon. Default is 20.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSimpleBondPerceiver(__vtkmodules_vtkCommonExecutionModel.vtkMoleculeAlgorithm):
    """
    vtkSimpleBondPerceiver - Create a simple guess of a molecule's
    topology
    
    Superclass: vtkMoleculeAlgorithm
    
    vtkSimpleBondPerceiver performs a simple check of all interatomic
    distances and adds a single bond between atoms that are reasonably
    close. If the interatomic distance is less than the sum of the two
    atom's covalent radii plus a tolerance, a single bond is added.
    
    @warning
    This algorithm does not consider valences, hybridization,
    aromaticity, or anything other than atomic separations. It will not
    produce anything other than single bonds.
    """
    def GetIsToleranceAbsolute(self):
        """
        V.GetIsToleranceAbsolute() -> bool
        C++: virtual bool GetIsToleranceAbsolute()
        
        Set/Get if the tolerance is absolute (i.e. added to radius) or
        not (i.e. multiplied with radius). Default is true.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual float GetTolerance()
        
        Set/Get the tolerance used in the comparisons. (Default: 0.45)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimpleBondPerceiver
        C++: vtkSimpleBondPerceiver *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimpleBondPerceiver
        C++: static vtkSimpleBondPerceiver *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetIsToleranceAbsolute(self, bool):
        """
        V.SetIsToleranceAbsolute(bool)
        C++: virtual void SetIsToleranceAbsolute(bool _arg)
        
        Set/Get if the tolerance is absolute (i.e. added to radius) or
        not (i.e. multiplied with radius). Default is true.
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(float _arg)
        
        Set/Get the tolerance used in the comparisons. (Default: 0.45)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkVASPAnimationReader(__vtkmodules_vtkCommonExecutionModel.vtkMoleculeAlgorithm):
    """
    vtkVASPAnimationReader - Reader for VASP animation files.
    
    Superclass: vtkMoleculeAlgorithm
    
    Reads VASP animation files (e.g. NPT_Z_ANIMATE.out).
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The name of the file to read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVASPAnimationReader
        C++: vtkVASPAnimationReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVASPAnimationReader
        C++: static vtkVASPAnimationReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The name of the file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkVASPTessellationReader(__vtkmodules_vtkCommonExecutionModel.vtkMoleculeAlgorithm):
    """
    vtkVASPTessellationReader - Read NPT_Z_TESSELLATE.out files.
    
    Superclass: vtkMoleculeAlgorithm
    
    Read NPT_Z_TESSELLATE.out files from VASP.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The name of the file to read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVASPTessellationReader
        C++: vtkVASPTessellationReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVASPTessellationReader
        C++: static vtkVASPTessellationReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The name of the file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXYZMolReader2(__vtkmodules_vtkCommonExecutionModel.vtkMoleculeAlgorithm):
    """
    vtkXYZMolReader2 - read Molecular Data files
    
    Superclass: vtkMoleculeAlgorithm
    
    vtkXYZMolReader2 is a source object that reads Molecule files The
    reader will detect multiple timesteps in an XYZ molecule file.
    
    @par Thanks: Dr. Jean M. Favre who developed and contributed this
    class
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the name of the XYZ Molecule file
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkMolecule
        C++: vtkMolecule *GetOutput()
        
        Get/Set the output (vtkMolecule) that the reader will fill
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXYZMolReader2
        C++: vtkXYZMolReader2 *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXYZMolReader2
        C++: static vtkXYZMolReader2 *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the name of the XYZ Molecule file
        """
        ...
    
    def SetOutput(self, vtkMolecule):
        """
        V.SetOutput(vtkMolecule)
        C++: void SetOutput(vtkMolecule *) override;
        
        Get/Set the output (vtkMolecule) that the reader will fill
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
