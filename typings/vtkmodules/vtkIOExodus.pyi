"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOCore as __vtkmodules_vtkIOCore
import vtkmodules.vtkIOXMLParser as __vtkmodules_vtkIOXMLParser

class vtkCPExodusIIElementBlock(__vtkmodules_vtkCommonDataModel.vtkUnstructuredGridBase):
    """
    vtkCPExodusIIElementBlock - Uses an Exodus II element block as a
     vtkMappedUnstructuredGrid's implementation.
    
    Superclass: vtkUnstructuredGridBase
    
    This class allows raw data arrays returned by the Exodus II library
    to be used directly in VTK without repacking the data into the
    vtkUnstructuredGrid memory layout. Use the vtkCPExodusIIInSituReader
    to read an Exodus II file's data into this structure.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methdos for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methdos for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCPExodusIIElementBlock
        C++: vtkCPExodusIIElementBlock *NewInstance()
        
        Standard methdos for type information and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCPExodusIIElementBlock
        C++: static vtkCPExodusIIElementBlock *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCPExodusIIElementBlockImpl(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkCPExodusIIElementBlockImpl - no description provided.
    
    Superclass: vtkObject
    """
    def Allocate(self, p_int, p_int_1):
        """
        V.Allocate(int, int)
        C++: void Allocate(vtkIdType numCells, int extSize=1000)
        """
        ...
    
    def GetCellPoints(self, p_int, vtkIdList):
        """
        V.GetCellPoints(int, vtkIdList)
        C++: void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds)
        """
        ...
    
    def GetCellType(self, p_int):
        """
        V.GetCellType(int) -> int
        C++: int GetCellType(vtkIdType cellId)
        """
        ...
    
    def GetIdsOfCellsOfType(self, p_int, vtkIdTypeArray):
        """
        V.GetIdsOfCellsOfType(int, vtkIdTypeArray)
        C++: void GetIdsOfCellsOfType(int type, vtkIdTypeArray *array)
        """
        ...
    
    def GetMaxCellSize(self):
        """
        V.GetMaxCellSize() -> int
        C++: int GetMaxCellSize()
        """
        ...
    
    def GetNumberOfCells(self):
        """
        V.GetNumberOfCells() -> int
        C++: vtkIdType GetNumberOfCells()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPointCells(self, p_int, vtkIdList):
        """
        V.GetPointCells(int, vtkIdList)
        C++: void GetPointCells(vtkIdType ptId, vtkIdList *cellIds)
        """
        ...
    
    def InsertNextCell(self, p_int, vtkIdList):
        """
        V.InsertNextCell(int, vtkIdList) -> int
        C++: vtkIdType InsertNextCell(int type, vtkIdList *ptIds)
        V.InsertNextCell(int, int, (int, ...)) -> int
        C++: vtkIdType InsertNextCell(int type, vtkIdType npts,
            const vtkIdType ptIds[])
        V.InsertNextCell(int, int, (int, ...), int, (int, ...)) -> int
        C++: vtkIdType InsertNextCell(int type, vtkIdType npts,
            const vtkIdType ptIds[], vtkIdType nfaces,
            const vtkIdType faces[])
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsHomogeneous(self):
        """
        V.IsHomogeneous() -> int
        C++: int IsHomogeneous()
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCPExodusIIElementBlockImpl
        C++: vtkCPExodusIIElementBlockImpl *NewInstance()
        """
        ...
    
    def ReplaceCell(self, p_int, p_int_1, int_tuple):
        """
        V.ReplaceCell(int, int, (int, ...))
        C++: void ReplaceCell(vtkIdType cellId, int npts,
            const vtkIdType pts[])
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCPExodusIIElementBlockImpl
        C++: static vtkCPExodusIIElementBlockImpl *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetExodusConnectivityArray(self, *int, **kwargs):
        """
        V.SetExodusConnectivityArray([int, ...], string, int, int) -> bool
        C++: bool SetExodusConnectivityArray(int *elements,
            const std::string &type, int numElements, int nodesPerElement)
        
        Set the Exodus element block data. 'elements' is the array
        returned from ex_get_elem_conn. 'type', 'numElements', and
        'nodesPerElement' are obtained from ex_get_elem_block. Returns
        true or false depending on whether or not the element type can be
        translated into a VTK cell type. This object takes ownership of
        the elements array unless this function returns false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCPExodusIIInSituReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkCPExodusIIInSituReader - Read an Exodus II file into data
    structures that map the raw arrays returned by the Exodus II library
    into a multi-block data set containing vtkUnstructuredGridBase
    subclasses.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    This class can be used to import Exodus II files into VTK without
    repacking the data into the standard VTK memory layout, avoiding the
    cost of a deep copy.
    """
    def GetCurrentTimeStep(self):
        """
        V.GetCurrentTimeStep() -> int
        C++: virtual int GetCurrentTimeStep()
        
        Get/Set the current timestep to read as a zero-based index.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the name of the Exodus file to read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTimeStepRange(self):
        """
        V.GetTimeStepRange() -> (int, int)
        C++: virtual int *GetTimeStepRange()
        
        Get the range of timesteps, represented as [0, numTimeSteps - 1].
        Call UpdateInformation first to set this without reading any
        timestep data.
        """
        ...
    
    def GetTimeStepValue(self, p_int):
        """
        V.GetTimeStepValue(int) -> float
        C++: double GetTimeStepValue(int step)
        
        Get the floating point tag associated with the timestep at
        'step'.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCPExodusIIInSituReader
        C++: vtkCPExodusIIInSituReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCPExodusIIInSituReader
        C++: static vtkCPExodusIIInSituReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCurrentTimeStep(self, p_int):
        """
        V.SetCurrentTimeStep(int)
        C++: virtual void SetCurrentTimeStep(int _arg)
        
        Get/Set the current timestep to read as a zero-based index.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the name of the Exodus file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkExodusIICache(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkExodusIICache - no description provided.
    
    Superclass: vtkObject
    """
    def Clear(self):
        """
        V.Clear()
        C++: void Clear()
        
        Empty the cache
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSpaceLeft(self):
        """
        V.GetSpaceLeft() -> float
        C++: double GetSpaceLeft()
        
        See how much cache space is left. This is the difference between
        the capacity and the size of the cache. The result is in MiB.
        """
        ...
    
    def Insert(self, vtkExodusIICacheKey, vtkDataArray):
        """
        V.Insert(vtkExodusIICacheKey, vtkDataArray)
        C++: void Insert(vtkExodusIICacheKey &key, vtkDataArray *value)
        
        Insert an entry into the cache (this can remove other cache
        entries to make space).
        """
        ...
    
    def Invalidate(self, vtkExodusIICacheKey):
        """
        V.Invalidate(vtkExodusIICacheKey) -> int
        C++: int Invalidate(const vtkExodusIICacheKey &key)
        V.Invalidate(vtkExodusIICacheKey, vtkExodusIICacheKey) -> int
        C++: int Invalidate(const vtkExodusIICacheKey &key,
            const vtkExodusIICacheKey &pattern)
        
        Invalidate a cache entry (drop it from the cache) if the key
        exists. This does nothing if the cache entry does not exist.
        Returns 1 if the cache entry existed prior to this call and 0
        otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExodusIICache
        C++: vtkExodusIICache *NewInstance()
        """
        ...
    
    def ReduceToSize(self, p_float):
        """
        V.ReduceToSize(float) -> int
        C++: int ReduceToSize(double newSize)
        
        Remove cache entries until the size of the cache is at or below
        the given size. Returns a nonzero value if deletions were
        required.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExodusIICache
        C++: static vtkExodusIICache *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCacheCapacity(self, p_float):
        """
        V.SetCacheCapacity(float)
        C++: void SetCacheCapacity(double sizeInMiB)
        
        Set the maximum allowable cache size. This will remove cache
        entries if the capacity is reduced below the current size.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkExodusIICacheEntry(object):
    """
    vtkExodusIICacheEntry - no description provided.
    
    vtkExodusIICacheEntry()
    vtkExodusIICacheEntry(vtkDataArray *arr)
    vtkExodusIICacheEntry(const vtkExodusIICacheEntry &other)
    """
    def GetValue(self):
        """
        V.GetValue() -> vtkDataArray
        C++: vtkDataArray *GetValue()
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkExodusIICacheKey(object):
    """
    vtkExodusIICacheKey - no description provided.
    
    vtkExodusIICacheKey()
    vtkExodusIICacheKey(int time, int objType, int objId, int arrId)
    vtkExodusIICacheKey(const vtkExodusIICacheKey &src)
    """
    def match(self, vtkExodusIICacheKey, vtkExodusIICacheKey_1):
        """
        V.match(vtkExodusIICacheKey, vtkExodusIICacheKey) -> bool
        C++: bool match(const vtkExodusIICacheKey &other,
            const vtkExodusIICacheKey &pattern)
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkExodusIIReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkExodusIIReader - Read exodus 2 files .ex2
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkExodusIIReader is a unstructured grid source object that reads
    ExodusII files.  Most of the meta data associated with the file is
    loaded when UpdateInformation is called.  This includes information
    like Title, number of blocks, number and names of arrays. This data
    can be retrieved from methods in this reader. Separate arrays that
    are meant to be a single vector, are combined internally for
    convenience.  To be combined, the array names have to be identical
    except for a trailing X,Y and Z (or x,y,z).  By default cell and
    point arrays are not loaded.  However, the user can flag arrays to
    load with the methods "SetPointResultArrayStatus" and
    "SetElementResultArrayStatus".  The reader DOES NOT respond to piece
    requests
    """
    def AnimateModeShapesOff(self):
        """
        V.AnimateModeShapesOff()
        C++: virtual void AnimateModeShapesOff()
        
        If this flag is on (the default) and HasModeShapes is also on,
        then this reader will report a continuous time range [0,1] and
        animate the displacements in a periodic sinusoid.  If this flag
        is off and HasModeShapes is on, this reader ignores time.  This
        flag has no effect if HasModeShapes is off.
        """
        ...
    
    def AnimateModeShapesOn(self):
        """
        V.AnimateModeShapesOn()
        C++: virtual void AnimateModeShapesOn()
        
        If this flag is on (the default) and HasModeShapes is also on,
        then this reader will report a continuous time range [0,1] and
        animate the displacements in a periodic sinusoid.  If this flag
        is off and HasModeShapes is on, this reader ignores time.  This
        flag has no effect if HasModeShapes is off.
        """
        ...
    
    def ApplyDisplacementsOff(self):
        """
        V.ApplyDisplacementsOff()
        C++: virtual void ApplyDisplacementsOff()
        
        Geometric locations can include displacements.  By default, this
        is ON.  The nodal positions are 'displaced' by the standard
        exodus displacement vector. If displacements are turned 'off',
        the user can explicitly add them by applying a warp filter.
        """
        ...
    
    def ApplyDisplacementsOn(self):
        """
        V.ApplyDisplacementsOn()
        C++: virtual void ApplyDisplacementsOn()
        
        Geometric locations can include displacements.  By default, this
        is ON.  The nodal positions are 'displaced' by the standard
        exodus displacement vector. If displacements are turned 'off',
        the user can explicitly add them by applying a warp filter.
        """
        ...
    
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: virtual int CanReadFile(const char *fname)
        
        Determine if the file can be read with this reader.
        """
        ...
    
    def Dump(self):
        """
        V.Dump()
        C++: virtual void Dump()
        """
        ...
    
    def GenerateFileIdArrayOff(self):
        """
        V.GenerateFileIdArrayOff()
        C++: virtual void GenerateFileIdArrayOff()
        """
        ...
    
    def GenerateFileIdArrayOn(self):
        """
        V.GenerateFileIdArrayOn()
        C++: virtual void GenerateFileIdArrayOn()
        """
        ...
    
    def GenerateGlobalElementIdArrayOff(self):
        """
        V.GenerateGlobalElementIdArrayOff()
        C++: virtual void GenerateGlobalElementIdArrayOff()
        """
        ...
    
    def GenerateGlobalElementIdArrayOn(self):
        """
        V.GenerateGlobalElementIdArrayOn()
        C++: virtual void GenerateGlobalElementIdArrayOn()
        """
        ...
    
    def GenerateGlobalNodeIdArrayOff(self):
        """
        V.GenerateGlobalNodeIdArrayOff()
        C++: virtual void GenerateGlobalNodeIdArrayOff()
        """
        ...
    
    def GenerateGlobalNodeIdArrayOn(self):
        """
        V.GenerateGlobalNodeIdArrayOn()
        C++: virtual void GenerateGlobalNodeIdArrayOn()
        """
        ...
    
    def GenerateImplicitElementIdArrayOff(self):
        """
        V.GenerateImplicitElementIdArrayOff()
        C++: virtual void GenerateImplicitElementIdArrayOff()
        """
        ...
    
    def GenerateImplicitElementIdArrayOn(self):
        """
        V.GenerateImplicitElementIdArrayOn()
        C++: virtual void GenerateImplicitElementIdArrayOn()
        """
        ...
    
    def GenerateImplicitNodeIdArrayOff(self):
        """
        V.GenerateImplicitNodeIdArrayOff()
        C++: virtual void GenerateImplicitNodeIdArrayOff()
        """
        ...
    
    def GenerateImplicitNodeIdArrayOn(self):
        """
        V.GenerateImplicitNodeIdArrayOn()
        C++: virtual void GenerateImplicitNodeIdArrayOn()
        """
        ...
    
    def GenerateObjectIdCellArrayOff(self):
        """
        V.GenerateObjectIdCellArrayOff()
        C++: virtual void GenerateObjectIdCellArrayOff()
        
        Extra cell data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id found in
        the exodus file. The name of the array is returned by
        GetBlockIdArrayName(). For cells representing elements from an
        Exodus element block, this is set to the element block ID. For
        cells representing edges from an Exodus edge block, this is the
        edge block ID. Similarly, this is the face block ID for cells
        representing faces from an Exodus face block. The same holds for
        cells representing entries of node, edge, face, side, and element
        sets.
        """
        ...
    
    def GenerateObjectIdCellArrayOn(self):
        """
        V.GenerateObjectIdCellArrayOn()
        C++: virtual void GenerateObjectIdCellArrayOn()
        
        Extra cell data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id found in
        the exodus file. The name of the array is returned by
        GetBlockIdArrayName(). For cells representing elements from an
        Exodus element block, this is set to the element block ID. For
        cells representing edges from an Exodus edge block, this is the
        edge block ID. Similarly, this is the face block ID for cells
        representing faces from an Exodus face block. The same holds for
        cells representing entries of node, edge, face, side, and element
        sets.
        """
        ...
    
    def GetAnimateModeShapes(self):
        """
        V.GetAnimateModeShapes() -> int
        C++: vtkTypeBool GetAnimateModeShapes()
        
        If this flag is on (the default) and HasModeShapes is also on,
        then this reader will report a continuous time range [0,1] and
        animate the displacements in a periodic sinusoid.  If this flag
        is off and HasModeShapes is on, this reader ignores time.  This
        flag has no effect if HasModeShapes is off.
        """
        ...
    
    def GetApplyDisplacements(self):
        """
        V.GetApplyDisplacements() -> int
        C++: vtkTypeBool GetApplyDisplacements()
        
        Geometric locations can include displacements.  By default, this
        is ON.  The nodal positions are 'displaced' by the standard
        exodus displacement vector. If displacements are turned 'off',
        the user can explicitly add them by applying a warp filter.
        """
        ...
    
    def GetAssemblyArrayID(self, string):
        """
        V.GetAssemblyArrayID(string) -> int
        C++: int GetAssemblyArrayID(const char *name)
        
        By default all assemblies are loaded. These methods allow the
        user to select which assemblies they want to load.  You can get
        information about the assemblies by first caling
        UpdateInformation, and using GetAssemblyArrayName ...
        """
        ...
    
    def GetAssemblyArrayName(self, p_int):
        """
        V.GetAssemblyArrayName(int) -> string
        C++: const char *GetAssemblyArrayName(int arrayIdx)
        
        By default all assemblies are loaded. These methods allow the
        user to select which assemblies they want to load.  You can get
        information about the assemblies by first caling
        UpdateInformation, and using GetAssemblyArrayName ...
        """
        ...
    
    def GetAssemblyArrayStatus(self, p_int):
        """
        V.GetAssemblyArrayStatus(int) -> int
        C++: int GetAssemblyArrayStatus(int index)
        V.GetAssemblyArrayStatus(string) -> int
        C++: int GetAssemblyArrayStatus(const char *)
        
        By default all assemblies are loaded. These methods allow the
        user to select which assemblies they want to load.  You can get
        information about the assemblies by first caling
        UpdateInformation, and using GetAssemblyArrayName ...
        """
        ...
    
    def GetCacheSize(self):
        """
        V.GetCacheSize() -> float
        C++: double GetCacheSize()
        
        Get the size of the cache in MiB.
        """
        ...
    
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: int GetDimensionality()
        
        Access to meta data generated by UpdateInformation.
        """
        ...
    
    def GetDisplacementMagnitude(self):
        """
        V.GetDisplacementMagnitude() -> float
        C++: float GetDisplacementMagnitude()
        
        Geometric locations can include displacements.  By default, this
        is ON.  The nodal positions are 'displaced' by the standard
        exodus displacement vector. If displacements are turned 'off',
        the user can explicitly add them by applying a warp filter.
        """
        ...
    
    def GetDisplayType(self):
        """
        V.GetDisplayType() -> int
        C++: virtual int GetDisplayType()
        """
        ...
    
    def GetEdgeBlockArrayName(self, p_int):
        """
        V.GetEdgeBlockArrayName(int) -> string
        C++: const char *GetEdgeBlockArrayName(int index)
        """
        ...
    
    def GetEdgeBlockArrayStatus(self, string):
        """
        V.GetEdgeBlockArrayStatus(string) -> int
        C++: int GetEdgeBlockArrayStatus(const char *name)
        """
        ...
    
    def GetEdgeMapArrayName(self, p_int):
        """
        V.GetEdgeMapArrayName(int) -> string
        C++: const char *GetEdgeMapArrayName(int index)
        """
        ...
    
    def GetEdgeMapArrayStatus(self, string):
        """
        V.GetEdgeMapArrayStatus(string) -> int
        C++: int GetEdgeMapArrayStatus(const char *name)
        """
        ...
    
    def GetEdgeResultArrayName(self, p_int):
        """
        V.GetEdgeResultArrayName(int) -> string
        C++: const char *GetEdgeResultArrayName(int index)
        """
        ...
    
    def GetEdgeResultArrayStatus(self, string):
        """
        V.GetEdgeResultArrayStatus(string) -> int
        C++: int GetEdgeResultArrayStatus(const char *name)
        """
        ...
    
    def GetEdgeSetArrayName(self, p_int):
        """
        V.GetEdgeSetArrayName(int) -> string
        C++: const char *GetEdgeSetArrayName(int index)
        """
        ...
    
    def GetEdgeSetArrayStatus(self, string):
        """
        V.GetEdgeSetArrayStatus(string) -> int
        C++: int GetEdgeSetArrayStatus(const char *name)
        """
        ...
    
    def GetEdgeSetResultArrayName(self, p_int):
        """
        V.GetEdgeSetResultArrayName(int) -> string
        C++: const char *GetEdgeSetResultArrayName(int index)
        """
        ...
    
    def GetEdgeSetResultArrayStatus(self, string):
        """
        V.GetEdgeSetResultArrayStatus(string) -> int
        C++: int GetEdgeSetResultArrayStatus(const char *name)
        """
        ...
    
    def GetElementBlockArrayName(self, p_int):
        """
        V.GetElementBlockArrayName(int) -> string
        C++: const char *GetElementBlockArrayName(int index)
        """
        ...
    
    def GetElementBlockArrayStatus(self, string):
        """
        V.GetElementBlockArrayStatus(string) -> int
        C++: int GetElementBlockArrayStatus(const char *name)
        """
        ...
    
    def GetElementMapArrayName(self, p_int):
        """
        V.GetElementMapArrayName(int) -> string
        C++: const char *GetElementMapArrayName(int index)
        """
        ...
    
    def GetElementMapArrayStatus(self, string):
        """
        V.GetElementMapArrayStatus(string) -> int
        C++: int GetElementMapArrayStatus(const char *name)
        """
        ...
    
    def GetElementResultArrayName(self, p_int):
        """
        V.GetElementResultArrayName(int) -> string
        C++: const char *GetElementResultArrayName(int index)
        """
        ...
    
    def GetElementResultArrayStatus(self, string):
        """
        V.GetElementResultArrayStatus(string) -> int
        C++: int GetElementResultArrayStatus(const char *name)
        """
        ...
    
    def GetElementSetArrayName(self, p_int):
        """
        V.GetElementSetArrayName(int) -> string
        C++: const char *GetElementSetArrayName(int index)
        """
        ...
    
    def GetElementSetArrayStatus(self, string):
        """
        V.GetElementSetArrayStatus(string) -> int
        C++: int GetElementSetArrayStatus(const char *name)
        """
        ...
    
    def GetElementSetResultArrayName(self, p_int):
        """
        V.GetElementSetResultArrayName(int) -> string
        C++: const char *GetElementSetResultArrayName(int index)
        """
        ...
    
    def GetElementSetResultArrayStatus(self, string):
        """
        V.GetElementSetResultArrayStatus(string) -> int
        C++: int GetElementSetResultArrayStatus(const char *name)
        """
        ...
    
    def GetFaceBlockArrayName(self, p_int):
        """
        V.GetFaceBlockArrayName(int) -> string
        C++: const char *GetFaceBlockArrayName(int index)
        """
        ...
    
    def GetFaceBlockArrayStatus(self, string):
        """
        V.GetFaceBlockArrayStatus(string) -> int
        C++: int GetFaceBlockArrayStatus(const char *name)
        """
        ...
    
    def GetFaceMapArrayName(self, p_int):
        """
        V.GetFaceMapArrayName(int) -> string
        C++: const char *GetFaceMapArrayName(int index)
        """
        ...
    
    def GetFaceMapArrayStatus(self, string):
        """
        V.GetFaceMapArrayStatus(string) -> int
        C++: int GetFaceMapArrayStatus(const char *name)
        """
        ...
    
    def GetFaceResultArrayName(self, p_int):
        """
        V.GetFaceResultArrayName(int) -> string
        C++: const char *GetFaceResultArrayName(int index)
        """
        ...
    
    def GetFaceResultArrayStatus(self, string):
        """
        V.GetFaceResultArrayStatus(string) -> int
        C++: int GetFaceResultArrayStatus(const char *name)
        """
        ...
    
    def GetFaceSetArrayName(self, p_int):
        """
        V.GetFaceSetArrayName(int) -> string
        C++: const char *GetFaceSetArrayName(int index)
        """
        ...
    
    def GetFaceSetArrayStatus(self, string):
        """
        V.GetFaceSetArrayStatus(string) -> int
        C++: int GetFaceSetArrayStatus(const char *name)
        """
        ...
    
    def GetFaceSetResultArrayName(self, p_int):
        """
        V.GetFaceSetResultArrayName(int) -> string
        C++: const char *GetFaceSetResultArrayName(int index)
        """
        ...
    
    def GetFaceSetResultArrayStatus(self, string):
        """
        V.GetFaceSetResultArrayStatus(string) -> int
        C++: int GetFaceSetResultArrayStatus(const char *name)
        """
        ...
    
    def GetFileId(self):
        """
        V.GetFileId() -> int
        C++: int GetFileId()
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of the Exodus file.
        """
        ...
    
    def GetGenerateFileIdArray(self):
        """
        V.GetGenerateFileIdArray() -> int
        C++: vtkTypeBool GetGenerateFileIdArray()
        """
        ...
    
    def GetGenerateGlobalElementIdArray(self):
        """
        V.GetGenerateGlobalElementIdArray() -> int
        C++: vtkTypeBool GetGenerateGlobalElementIdArray()
        """
        ...
    
    def GetGenerateGlobalNodeIdArray(self):
        """
        V.GetGenerateGlobalNodeIdArray() -> int
        C++: vtkTypeBool GetGenerateGlobalNodeIdArray()
        """
        ...
    
    def GetGenerateImplicitElementIdArray(self):
        """
        V.GetGenerateImplicitElementIdArray() -> int
        C++: vtkTypeBool GetGenerateImplicitElementIdArray()
        """
        ...
    
    def GetGenerateImplicitNodeIdArray(self):
        """
        V.GetGenerateImplicitNodeIdArray() -> int
        C++: vtkTypeBool GetGenerateImplicitNodeIdArray()
        """
        ...
    
    def GetGenerateObjectIdCellArray(self):
        """
        V.GetGenerateObjectIdCellArray() -> int
        C++: vtkTypeBool GetGenerateObjectIdCellArray()
        
        Extra cell data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id found in
        the exodus file. The name of the array is returned by
        GetBlockIdArrayName(). For cells representing elements from an
        Exodus element block, this is set to the element block ID. For
        cells representing edges from an Exodus edge block, this is the
        edge block ID. Similarly, this is the face block ID for cells
        representing faces from an Exodus face block. The same holds for
        cells representing entries of node, edge, face, side, and element
        sets.
        """
        ...
    
    def GetGlobalEdgeID(self, vtkDataSet, p_int):
        """
        V.GetGlobalEdgeID(vtkDataSet, int) -> int
        C++: static int GetGlobalEdgeID(vtkDataSet *data, int localID)
        V.GetGlobalEdgeID(vtkDataSet, int, int) -> int
        C++: static int GetGlobalEdgeID(vtkDataSet *data, int localID,
            int searchType)
        """
        ...
    
    def GetGlobalEdgeIdArrayName(self):
        """
        V.GetGlobalEdgeIdArrayName() -> string
        C++: static const char *GetGlobalEdgeIdArrayName()
        """
        ...
    
    def GetGlobalElementID(self, vtkDataSet, p_int):
        """
        V.GetGlobalElementID(vtkDataSet, int) -> int
        C++: static int GetGlobalElementID(vtkDataSet *data, int localID)
        V.GetGlobalElementID(vtkDataSet, int, int) -> int
        C++: static int GetGlobalElementID(vtkDataSet *data, int localID,
            int searchType)
        """
        ...
    
    def GetGlobalElementIdArrayName(self):
        """
        V.GetGlobalElementIdArrayName() -> string
        C++: static const char *GetGlobalElementIdArrayName()
        """
        ...
    
    def GetGlobalFaceID(self, vtkDataSet, p_int):
        """
        V.GetGlobalFaceID(vtkDataSet, int) -> int
        C++: static int GetGlobalFaceID(vtkDataSet *data, int localID)
        V.GetGlobalFaceID(vtkDataSet, int, int) -> int
        C++: static int GetGlobalFaceID(vtkDataSet *data, int localID,
            int searchType)
        """
        ...
    
    def GetGlobalFaceIdArrayName(self):
        """
        V.GetGlobalFaceIdArrayName() -> string
        C++: static const char *GetGlobalFaceIdArrayName()
        """
        ...
    
    def GetGlobalNodeID(self, vtkDataSet, p_int):
        """
        V.GetGlobalNodeID(vtkDataSet, int) -> int
        C++: static int GetGlobalNodeID(vtkDataSet *data, int localID)
        V.GetGlobalNodeID(vtkDataSet, int, int) -> int
        C++: static int GetGlobalNodeID(vtkDataSet *data, int localID,
            int searchType)
        
        Extra point data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id of the
        node. The id is relative to the entire data set. The name of the
        array is returned by GlobalNodeIdArrayName().
        """
        ...
    
    def GetGlobalNodeIdArrayName(self):
        """
        V.GetGlobalNodeIdArrayName() -> string
        C++: static const char *GetGlobalNodeIdArrayName()
        
        Extra point data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id of the
        node. The id is relative to the entire data set. The name of the
        array is returned by GlobalNodeIdArrayName().
        """
        ...
    
    def GetGlobalResultArrayName(self, p_int):
        """
        V.GetGlobalResultArrayName(int) -> string
        C++: const char *GetGlobalResultArrayName(int index)
        """
        ...
    
    def GetGlobalResultArrayStatus(self, string):
        """
        V.GetGlobalResultArrayStatus(string) -> int
        C++: int GetGlobalResultArrayStatus(const char *name)
        """
        ...
    
    def GetHasModeShapes(self):
        """
        V.GetHasModeShapes() -> int
        C++: vtkTypeBool GetHasModeShapes()
        
        Set/Get whether the Exodus sequence number corresponds to time
        steps or mode shapes. By default, HasModeShapes is false unless
        two time values in the Exodus file are identical, in which case
        it is true.
        """
        ...
    
    def GetHierarchyArrayName(self, p_int):
        """
        V.GetHierarchyArrayName(int) -> string
        C++: const char *GetHierarchyArrayName(int arrayIdx)
        
        By default all hierarchy entries are loaded. These methods allow
        the user to select which hierarchy entries they want to load. 
        You can get information about the hierarchy entries by first
        caling UpdateInformation, and using GetHierarchyArrayName ...
        these methods do not call functions in metaData. They call
        functions on the ExodusXMLParser since it seemed silly to
        duplicate all the information
        """
        ...
    
    def GetHierarchyArrayStatus(self, p_int):
        """
        V.GetHierarchyArrayStatus(int) -> int
        C++: int GetHierarchyArrayStatus(int index)
        V.GetHierarchyArrayStatus(string) -> int
        C++: int GetHierarchyArrayStatus(const char *)
        
        By default all hierarchy entries are loaded. These methods allow
        the user to select which hierarchy entries they want to load. 
        You can get information about the hierarchy entries by first
        caling UpdateInformation, and using GetHierarchyArrayName ...
        these methods do not call functions in metaData. They call
        functions on the ExodusXMLParser since it seemed silly to
        duplicate all the information
        """
        ...
    
    def GetIgnoreFileTime(self):
        """
        V.GetIgnoreFileTime() -> bool
        C++: bool GetIgnoreFileTime()
        
        When on, this option ignores the time values assigned to each
        time step in the file. This can be useful for Exodus files where
        different time steps are overloaded to represent different
        aspects of a data set rather than the data set at different time
        values.
        """
        ...
    
    def GetImplicitEdgeIdArrayName(self):
        """
        V.GetImplicitEdgeIdArrayName() -> string
        C++: static const char *GetImplicitEdgeIdArrayName()
        """
        ...
    
    def GetImplicitElementIdArrayName(self):
        """
        V.GetImplicitElementIdArrayName() -> string
        C++: static const char *GetImplicitElementIdArrayName()
        """
        ...
    
    def GetImplicitFaceIdArrayName(self):
        """
        V.GetImplicitFaceIdArrayName() -> string
        C++: static const char *GetImplicitFaceIdArrayName()
        """
        ...
    
    def GetImplicitNodeIdArrayName(self):
        """
        V.GetImplicitNodeIdArrayName() -> string
        C++: static const char *GetImplicitNodeIdArrayName()
        
        Extra point data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id of the
        node. The id is relative to the entire data set. The name of the
        array is returned by GlobalNodeIdArrayName().
        """
        ...
    
    def GetMaterialArrayID(self, string):
        """
        V.GetMaterialArrayID(string) -> int
        C++: int GetMaterialArrayID(const char *name)
        
        By default all materials are loaded. These methods allow the user
        to select which materials they want to load.  You can get
        information about the materials by first caling
        UpdateInformation, and using GetMaterialArrayName ...
        """
        ...
    
    def GetMaterialArrayName(self, p_int):
        """
        V.GetMaterialArrayName(int) -> string
        C++: const char *GetMaterialArrayName(int arrayIdx)
        
        By default all materials are loaded. These methods allow the user
        to select which materials they want to load.  You can get
        information about the materials by first caling
        UpdateInformation, and using GetMaterialArrayName ...
        """
        ...
    
    def GetMaterialArrayStatus(self, p_int):
        """
        V.GetMaterialArrayStatus(int) -> int
        C++: int GetMaterialArrayStatus(int index)
        V.GetMaterialArrayStatus(string) -> int
        C++: int GetMaterialArrayStatus(const char *)
        
        By default all materials are loaded. These methods allow the user
        to select which materials they want to load.  You can get
        information about the materials by first caling
        UpdateInformation, and using GetMaterialArrayName ...
        """
        ...
    
    def GetMaxNameLength(self):
        """
        V.GetMaxNameLength() -> int
        C++: int GetMaxNameLength()
        
        Get the max_name_length in the file. This is the amount of space
        allocated int the file for storing names of arrays, blocks, etc.
        """
        ...
    
    def GetMetadataMTime(self):
        """
        V.GetMetadataMTime() -> int
        C++: virtual vtkMTimeType GetMetadataMTime()
        
        Return the MTime of the internal data structure. This is really
        only intended for use by vtkPExodusIIReader in order to determine
        if the filename is newer than the metadata.
        """
        ...
    
    def GetModeShapesRange(self):
        """
        V.GetModeShapesRange() -> (int, int)
        C++: virtual int *GetModeShapesRange()
        
        Since ModeShapes are expected to run from [1,N] rather than [0,
        N-1], this method will return the TimeStepRange offset by 1. Note
        this method returns the potential mode shapes range irrespective
        of whether this->HasModeShapes is set to true.
        """
        ...
    
    def GetModeShapeTime(self):
        """
        V.GetModeShapeTime() -> float
        C++: double GetModeShapeTime()
        
        Set/Get the time used to animate mode shapes. This is a number
        between 0 and 1 that is used to scale the DisplacementMagnitude
        in a sinusoidal pattern. Specifically, the displacement vector
        for each vertex is scaled by$ \mathrm{DisplacementMagnitude} cos(
        2\pi \mathrm{ModeShapeTime} ) $ before it is added to the vertex
        coordinates.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the object's MTime. This is overridden to include the
        timestamp of its internal class.
        """
        ...
    
    def GetNodeMapArrayName(self, p_int):
        """
        V.GetNodeMapArrayName(int) -> string
        C++: const char *GetNodeMapArrayName(int index)
        """
        ...
    
    def GetNodeMapArrayStatus(self, string):
        """
        V.GetNodeMapArrayStatus(string) -> int
        C++: int GetNodeMapArrayStatus(const char *name)
        """
        ...
    
    def GetNodeSetArrayName(self, p_int):
        """
        V.GetNodeSetArrayName(int) -> string
        C++: const char *GetNodeSetArrayName(int index)
        """
        ...
    
    def GetNodeSetArrayStatus(self, string):
        """
        V.GetNodeSetArrayStatus(string) -> int
        C++: int GetNodeSetArrayStatus(const char *name)
        """
        ...
    
    def GetNodeSetResultArrayName(self, p_int):
        """
        V.GetNodeSetResultArrayName(int) -> string
        C++: const char *GetNodeSetResultArrayName(int index)
        """
        ...
    
    def GetNodeSetResultArrayStatus(self, string):
        """
        V.GetNodeSetResultArrayStatus(string) -> int
        C++: int GetNodeSetResultArrayStatus(const char *name)
        """
        ...
    
    def GetNumberOfAssemblyArrays(self):
        """
        V.GetNumberOfAssemblyArrays() -> int
        C++: int GetNumberOfAssemblyArrays()
        
        By default all assemblies are loaded. These methods allow the
        user to select which assemblies they want to load.  You can get
        information about the assemblies by first caling
        UpdateInformation, and using GetAssemblyArrayName ...
        """
        ...
    
    def GetNumberOfEdgeBlockArrays(self):
        """
        V.GetNumberOfEdgeBlockArrays() -> int
        C++: int GetNumberOfEdgeBlockArrays()
        """
        ...
    
    def GetNumberOfEdgeMapArrays(self):
        """
        V.GetNumberOfEdgeMapArrays() -> int
        C++: int GetNumberOfEdgeMapArrays()
        """
        ...
    
    def GetNumberOfEdgeResultArrays(self):
        """
        V.GetNumberOfEdgeResultArrays() -> int
        C++: int GetNumberOfEdgeResultArrays()
        """
        ...
    
    def GetNumberOfEdgeSetArrays(self):
        """
        V.GetNumberOfEdgeSetArrays() -> int
        C++: int GetNumberOfEdgeSetArrays()
        """
        ...
    
    def GetNumberOfEdgeSetResultArrays(self):
        """
        V.GetNumberOfEdgeSetResultArrays() -> int
        C++: int GetNumberOfEdgeSetResultArrays()
        """
        ...
    
    def GetNumberOfEdgesInFile(self):
        """
        V.GetNumberOfEdgesInFile() -> int
        C++: int GetNumberOfEdgesInFile()
        """
        ...
    
    def GetNumberOfElementBlockArrays(self):
        """
        V.GetNumberOfElementBlockArrays() -> int
        C++: int GetNumberOfElementBlockArrays()
        """
        ...
    
    def GetNumberOfElementMapArrays(self):
        """
        V.GetNumberOfElementMapArrays() -> int
        C++: int GetNumberOfElementMapArrays()
        """
        ...
    
    def GetNumberOfElementResultArrays(self):
        """
        V.GetNumberOfElementResultArrays() -> int
        C++: int GetNumberOfElementResultArrays()
        """
        ...
    
    def GetNumberOfElementSetArrays(self):
        """
        V.GetNumberOfElementSetArrays() -> int
        C++: int GetNumberOfElementSetArrays()
        """
        ...
    
    def GetNumberOfElementSetResultArrays(self):
        """
        V.GetNumberOfElementSetResultArrays() -> int
        C++: int GetNumberOfElementSetResultArrays()
        """
        ...
    
    def GetNumberOfElementsInFile(self):
        """
        V.GetNumberOfElementsInFile() -> int
        C++: int GetNumberOfElementsInFile()
        """
        ...
    
    def GetNumberOfEntriesInObject(self, p_int, p_int_1):
        """
        V.GetNumberOfEntriesInObject(int, int) -> int
        C++: int GetNumberOfEntriesInObject(int objectType,
            int objectIndex)
        """
        ...
    
    def GetNumberOfFaceBlockArrays(self):
        """
        V.GetNumberOfFaceBlockArrays() -> int
        C++: int GetNumberOfFaceBlockArrays()
        """
        ...
    
    def GetNumberOfFaceMapArrays(self):
        """
        V.GetNumberOfFaceMapArrays() -> int
        C++: int GetNumberOfFaceMapArrays()
        """
        ...
    
    def GetNumberOfFaceResultArrays(self):
        """
        V.GetNumberOfFaceResultArrays() -> int
        C++: int GetNumberOfFaceResultArrays()
        """
        ...
    
    def GetNumberOfFaceSetArrays(self):
        """
        V.GetNumberOfFaceSetArrays() -> int
        C++: int GetNumberOfFaceSetArrays()
        """
        ...
    
    def GetNumberOfFaceSetResultArrays(self):
        """
        V.GetNumberOfFaceSetResultArrays() -> int
        C++: int GetNumberOfFaceSetResultArrays()
        """
        ...
    
    def GetNumberOfFacesInFile(self):
        """
        V.GetNumberOfFacesInFile() -> int
        C++: int GetNumberOfFacesInFile()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGlobalResultArrays(self):
        """
        V.GetNumberOfGlobalResultArrays() -> int
        C++: int GetNumberOfGlobalResultArrays()
        """
        ...
    
    def GetNumberOfHierarchyArrays(self):
        """
        V.GetNumberOfHierarchyArrays() -> int
        C++: int GetNumberOfHierarchyArrays()
        
        By default all hierarchy entries are loaded. These methods allow
        the user to select which hierarchy entries they want to load. 
        You can get information about the hierarchy entries by first
        caling UpdateInformation, and using GetHierarchyArrayName ...
        these methods do not call functions in metaData. They call
        functions on the ExodusXMLParser since it seemed silly to
        duplicate all the information
        """
        ...
    
    def GetNumberOfMaterialArrays(self):
        """
        V.GetNumberOfMaterialArrays() -> int
        C++: int GetNumberOfMaterialArrays()
        
        By default all materials are loaded. These methods allow the user
        to select which materials they want to load.  You can get
        information about the materials by first caling
        UpdateInformation, and using GetMaterialArrayName ...
        """
        ...
    
    def GetNumberOfNodeMapArrays(self):
        """
        V.GetNumberOfNodeMapArrays() -> int
        C++: int GetNumberOfNodeMapArrays()
        """
        ...
    
    def GetNumberOfNodes(self):
        """
        V.GetNumberOfNodes() -> int
        C++: int GetNumberOfNodes()
        """
        ...
    
    def GetNumberOfNodeSetArrays(self):
        """
        V.GetNumberOfNodeSetArrays() -> int
        C++: int GetNumberOfNodeSetArrays()
        """
        ...
    
    def GetNumberOfNodeSetResultArrays(self):
        """
        V.GetNumberOfNodeSetResultArrays() -> int
        C++: int GetNumberOfNodeSetResultArrays()
        """
        ...
    
    def GetNumberOfNodesInFile(self):
        """
        V.GetNumberOfNodesInFile() -> int
        C++: int GetNumberOfNodesInFile()
        """
        ...
    
    def GetNumberOfObjectArrayComponents(self, p_int, p_int_1):
        """
        V.GetNumberOfObjectArrayComponents(int, int) -> int
        C++: int GetNumberOfObjectArrayComponents(int objectType,
            int arrayIndex)
        
        By default arrays are not loaded.  These methods allow the user
        to select which arrays they want to load.  You can get
        information about the arrays by first caling UpdateInformation,
        and using GetPointArrayName ... (Developer Note) This meta data
        is all accessed through vtkExodusMetadata
        """
        ...
    
    def GetNumberOfObjectArrays(self, p_int):
        """
        V.GetNumberOfObjectArrays(int) -> int
        C++: int GetNumberOfObjectArrays(int objectType)
        
        By default arrays are not loaded.  These methods allow the user
        to select which arrays they want to load.  You can get
        information about the arrays by first caling UpdateInformation,
        and using GetPointArrayName ... (Developer Note) This meta data
        is all accessed through vtkExodusMetadata
        """
        ...
    
    def GetNumberOfObjectAttributes(self, p_int, p_int_1):
        """
        V.GetNumberOfObjectAttributes(int, int) -> int
        C++: int GetNumberOfObjectAttributes(int objectType,
            int objectIndex)
        
        By default attributes are not loaded.  These methods allow the
        user to select which attributes they want to load.  You can get
        information about the attributes by first caling
        UpdateInformation, and using GetObjectAttributeName ...
        (Developer Note) This meta data is all accessed through
        vtkExodusMetadata
        """
        ...
    
    def GetNumberOfObjects(self, p_int):
        """
        V.GetNumberOfObjects(int) -> int
        C++: int GetNumberOfObjects(int objectType)
        """
        ...
    
    def GetNumberOfPartArrays(self):
        """
        V.GetNumberOfPartArrays() -> int
        C++: int GetNumberOfPartArrays()
        
        By default all parts are loaded. These methods allow the user to
        select which parts they want to load.  You can get information
        about the parts by first caling UpdateInformation, and using
        GetPartArrayName ...
        """
        ...
    
    def GetNumberOfPointResultArrays(self):
        """
        V.GetNumberOfPointResultArrays() -> int
        C++: int GetNumberOfPointResultArrays()
        """
        ...
    
    def GetNumberOfSideSetArrays(self):
        """
        V.GetNumberOfSideSetArrays() -> int
        C++: int GetNumberOfSideSetArrays()
        """
        ...
    
    def GetNumberOfSideSetResultArrays(self):
        """
        V.GetNumberOfSideSetResultArrays() -> int
        C++: int GetNumberOfSideSetResultArrays()
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: int GetNumberOfTimeSteps()
        
        Access to meta data generated by UpdateInformation.
        """
        ...
    
    def GetObjectArrayIndex(self, p_int, string):
        """
        V.GetObjectArrayIndex(int, string) -> int
        C++: int GetObjectArrayIndex(int objectType,
            const char *arrayName)
        
        By default arrays are not loaded.  These methods allow the user
        to select which arrays they want to load.  You can get
        information about the arrays by first caling UpdateInformation,
        and using GetPointArrayName ... (Developer Note) This meta data
        is all accessed through vtkExodusMetadata
        """
        ...
    
    def GetObjectArrayName(self, p_int, p_int_1):
        """
        V.GetObjectArrayName(int, int) -> string
        C++: const char *GetObjectArrayName(int objectType,
            int arrayIndex)
        
        By default arrays are not loaded.  These methods allow the user
        to select which arrays they want to load.  You can get
        information about the arrays by first caling UpdateInformation,
        and using GetPointArrayName ... (Developer Note) This meta data
        is all accessed through vtkExodusMetadata
        """
        ...
    
    def GetObjectArrayStatus(self, p_int, p_int_1):
        """
        V.GetObjectArrayStatus(int, int) -> int
        C++: int GetObjectArrayStatus(int objectType, int arrayIndex)
        V.GetObjectArrayStatus(int, string) -> int
        C++: int GetObjectArrayStatus(int objectType,
            const char *arrayName)
        
        By default arrays are not loaded.  These methods allow the user
        to select which arrays they want to load.  You can get
        information about the arrays by first caling UpdateInformation,
        and using GetPointArrayName ... (Developer Note) This meta data
        is all accessed through vtkExodusMetadata
        """
        ...
    
    def GetObjectAttributeIndex(self, p_int, p_int_1, string):
        """
        V.GetObjectAttributeIndex(int, int, string) -> int
        C++: int GetObjectAttributeIndex(int objectType, int objectIndex,
            const char *attribName)
        
        By default attributes are not loaded.  These methods allow the
        user to select which attributes they want to load.  You can get
        information about the attributes by first caling
        UpdateInformation, and using GetObjectAttributeName ...
        (Developer Note) This meta data is all accessed through
        vtkExodusMetadata
        """
        ...
    
    def GetObjectAttributeName(self, p_int, p_int_1, p_int_2):
        """
        V.GetObjectAttributeName(int, int, int) -> string
        C++: const char *GetObjectAttributeName(int objectType,
            int objectIndex, int attribIndex)
        
        By default attributes are not loaded.  These methods allow the
        user to select which attributes they want to load.  You can get
        information about the attributes by first caling
        UpdateInformation, and using GetObjectAttributeName ...
        (Developer Note) This meta data is all accessed through
        vtkExodusMetadata
        """
        ...
    
    def GetObjectAttributeStatus(self, p_int, p_int_1, p_int_2):
        """
        V.GetObjectAttributeStatus(int, int, int) -> int
        C++: int GetObjectAttributeStatus(int objectType, int objectIndex,
             int attribIndex)
        V.GetObjectAttributeStatus(int, int, string) -> int
        C++: int GetObjectAttributeStatus(int objectType, int objectIndex,
             const char *attribName)
        
        By default attributes are not loaded.  These methods allow the
        user to select which attributes they want to load.  You can get
        information about the attributes by first caling
        UpdateInformation, and using GetObjectAttributeName ...
        (Developer Note) This meta data is all accessed through
        vtkExodusMetadata
        """
        ...
    
    def GetObjectId(self, p_int, p_int_1):
        """
        V.GetObjectId(int, int) -> int
        C++: int GetObjectId(int objectType, int objectIndex)
        """
        ...
    
    def GetObjectIdArrayName(self):
        """
        V.GetObjectIdArrayName() -> string
        C++: static const char *GetObjectIdArrayName()
        
        Extra cell data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id found in
        the exodus file. The name of the array is returned by
        GetBlockIdArrayName(). For cells representing elements from an
        Exodus element block, this is set to the element block ID. For
        cells representing edges from an Exodus edge block, this is the
        edge block ID. Similarly, this is the face block ID for cells
        representing faces from an Exodus face block. The same holds for
        cells representing entries of node, edge, face, side, and element
        sets.
        """
        ...
    
    def GetObjectIndex(self, p_int, string):
        """
        V.GetObjectIndex(int, string) -> int
        C++: int GetObjectIndex(int objectType, const char *objectName)
        V.GetObjectIndex(int, int) -> int
        C++: int GetObjectIndex(int objectType, int id)
        """
        ...
    
    def GetObjectName(self, p_int, p_int_1):
        """
        V.GetObjectName(int, int) -> string
        C++: const char *GetObjectName(int objectType, int objectIndex)
        """
        ...
    
    def GetObjectStatus(self, p_int, p_int_1):
        """
        V.GetObjectStatus(int, int) -> int
        C++: int GetObjectStatus(int objectType, int objectIndex)
        V.GetObjectStatus(int, string) -> int
        C++: int GetObjectStatus(int objectType, const char *objectName)
        """
        ...
    
    def GetObjectTypeFromName(self, string):
        """
        V.GetObjectTypeFromName(string) -> int
        C++: int GetObjectTypeFromName(const char *name)
        """
        ...
    
    def GetObjectTypeName(self, p_int):
        """
        V.GetObjectTypeName(int) -> string
        C++: const char *GetObjectTypeName(int)
        """
        ...
    
    def GetPartArrayID(self, string):
        """
        V.GetPartArrayID(string) -> int
        C++: int GetPartArrayID(const char *name)
        
        By default all parts are loaded. These methods allow the user to
        select which parts they want to load.  You can get information
        about the parts by first caling UpdateInformation, and using
        GetPartArrayName ...
        """
        ...
    
    def GetPartArrayName(self, p_int):
        """
        V.GetPartArrayName(int) -> string
        C++: const char *GetPartArrayName(int arrayIdx)
        
        By default all parts are loaded. These methods allow the user to
        select which parts they want to load.  You can get information
        about the parts by first caling UpdateInformation, and using
        GetPartArrayName ...
        """
        ...
    
    def GetPartArrayStatus(self, p_int):
        """
        V.GetPartArrayStatus(int) -> int
        C++: int GetPartArrayStatus(int index)
        V.GetPartArrayStatus(string) -> int
        C++: int GetPartArrayStatus(const char *)
        
        By default all parts are loaded. These methods allow the user to
        select which parts they want to load.  You can get information
        about the parts by first caling UpdateInformation, and using
        GetPartArrayName ...
        """
        ...
    
    def GetPartBlockInfo(self, p_int):
        """
        V.GetPartBlockInfo(int) -> string
        C++: const char *GetPartBlockInfo(int arrayIdx)
        
        By default all parts are loaded. These methods allow the user to
        select which parts they want to load.  You can get information
        about the parts by first caling UpdateInformation, and using
        GetPartArrayName ...
        """
        ...
    
    def GetPedigreeEdgeIdArrayName(self):
        """
        V.GetPedigreeEdgeIdArrayName() -> string
        C++: static const char *GetPedigreeEdgeIdArrayName()
        """
        ...
    
    def GetPedigreeElementIdArrayName(self):
        """
        V.GetPedigreeElementIdArrayName() -> string
        C++: static const char *GetPedigreeElementIdArrayName()
        """
        ...
    
    def GetPedigreeFaceIdArrayName(self):
        """
        V.GetPedigreeFaceIdArrayName() -> string
        C++: static const char *GetPedigreeFaceIdArrayName()
        """
        ...
    
    def GetPedigreeNodeIdArrayName(self):
        """
        V.GetPedigreeNodeIdArrayName() -> string
        C++: static const char *GetPedigreeNodeIdArrayName()
        
        Extra point data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id of the
        node. The id is relative to the entire data set. The name of the
        array is returned by GlobalNodeIdArrayName().
        """
        ...
    
    def GetPointResultArrayName(self, p_int):
        """
        V.GetPointResultArrayName(int) -> string
        C++: const char *GetPointResultArrayName(int index)
        """
        ...
    
    def GetPointResultArrayStatus(self, string):
        """
        V.GetPointResultArrayStatus(string) -> int
        C++: int GetPointResultArrayStatus(const char *name)
        """
        ...
    
    def GetSideSetArrayName(self, p_int):
        """
        V.GetSideSetArrayName(int) -> string
        C++: const char *GetSideSetArrayName(int index)
        """
        ...
    
    def GetSideSetArrayStatus(self, string):
        """
        V.GetSideSetArrayStatus(string) -> int
        C++: int GetSideSetArrayStatus(const char *name)
        """
        ...
    
    def GetSideSetResultArrayName(self, p_int):
        """
        V.GetSideSetResultArrayName(int) -> string
        C++: const char *GetSideSetResultArrayName(int index)
        """
        ...
    
    def GetSideSetResultArrayStatus(self, string):
        """
        V.GetSideSetResultArrayStatus(string) -> int
        C++: int GetSideSetResultArrayStatus(const char *name)
        """
        ...
    
    def GetSideSetSourceElementIdArrayName(self):
        """
        V.GetSideSetSourceElementIdArrayName() -> string
        C++: static const char *GetSideSetSourceElementIdArrayName()
        
        Get the name of the array that stores the mapping from side set
        cells back to the global id of the elements they bound.
        """
        ...
    
    def GetSideSetSourceElementSideArrayName(self):
        """
        V.GetSideSetSourceElementSideArrayName() -> string
        C++: static const char *GetSideSetSourceElementSideArrayName()
        
        Get the name of the array that stores the mapping from side set
        cells back to the canonical side of the elements they bound.
        """
        ...
    
    def GetSIL(self):
        """
        V.GetSIL() -> vtkGraph
        C++: vtkGraph *GetSIL()
        
        SIL describes organization of/relationships between
        classifications eg. blocks/materials/hierarchies.
        """
        ...
    
    def GetSILUpdateStamp(self):
        """
        V.GetSILUpdateStamp() -> int
        C++: virtual int GetSILUpdateStamp()
        
        Every time the SIL is updated a this will return a different
        value.
        """
        ...
    
    def GetSqueezePoints(self):
        """
        V.GetSqueezePoints() -> bool
        C++: bool GetSqueezePoints()
        
        Should the reader output only points used by elements in the
        output mesh, or all the points. Outputting all the points is much
        faster since the point array can be read straight from disk and
        the mesh connectivity need not be altered. Squeezing the points
        down to the minimum set needed to produce the output mesh is
        useful for glyphing and other point-based operations. On large
        parallel datasets, loading all the points implies loading all the
        points on all processes and performing subsequent filtering on a
        much larger set.
        
        * By default, SqueezePoints is true for backwards compatibility.
        """
        ...
    
    def GetTimeSeriesData(self, p_int, string, string_1, vtkFloatArray):
        """
        V.GetTimeSeriesData(int, string, string, vtkFloatArray) -> int
        C++: int GetTimeSeriesData(int ID, const char *vName,
            const char *vType, vtkFloatArray *result)
        """
        ...
    
    def GetTimeStep(self):
        """
        V.GetTimeStep() -> int
        C++: virtual int GetTimeStep()
        
        Which TimeStep to read.
        """
        ...
    
    def GetTimeStepRange(self):
        """
        V.GetTimeStepRange() -> (int, int)
        C++: virtual int *GetTimeStepRange()
        
        Returns the available range of valid integer time steps. Note
        this method returns the potential timesteps range irrespective of
        whether this->HasModeShapes is set to false.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: const char *GetTitle()
        
        Access to meta data generated by UpdateInformation.
        """
        ...
    
    def GetTotalNumberOfEdges(self):
        """
        V.GetTotalNumberOfEdges() -> int
        C++: virtual vtkIdType GetTotalNumberOfEdges()
        """
        ...
    
    def GetTotalNumberOfElements(self):
        """
        V.GetTotalNumberOfElements() -> int
        C++: virtual vtkIdType GetTotalNumberOfElements()
        """
        ...
    
    def GetTotalNumberOfFaces(self):
        """
        V.GetTotalNumberOfFaces() -> int
        C++: virtual vtkIdType GetTotalNumberOfFaces()
        """
        ...
    
    def GetTotalNumberOfNodes(self):
        """
        V.GetTotalNumberOfNodes() -> int
        C++: virtual vtkIdType GetTotalNumberOfNodes()
        """
        ...
    
    def GetUseLegacyBlockNames(self):
        """
        V.GetUseLegacyBlockNames() -> bool
        C++: virtual bool GetUseLegacyBlockNames()
        
        In previous versions, the reader added the type of elements in
        the block to the block name when no name was provided for the
        block. This has issues with consistency when naming blocks across
        ranks for partitioned files (see paraview/paraview#19110), hence
        we no longer do that. For legacy pipelines, one can enable the
        old behavior by setting this flag to true.
        """
        ...
    
    def GetVariableID(self, string, string_1):
        """
        V.GetVariableID(string, string) -> int
        C++: int GetVariableID(const char *type, const char *name)
        
        Return the id of the type,name variable
        """
        ...
    
    def GetXMLFileName(self):
        """
        V.GetXMLFileName() -> string
        C++: virtual char *GetXMLFileName()
        
        Specify file name of the xml file.
        """
        ...
    
    def GLOBAL_TEMPORAL_VARIABLE(self):
        """
        V.GLOBAL_TEMPORAL_VARIABLE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *GLOBAL_TEMPORAL_VARIABLE()
        
        Exodus reader outputs global variables and global temporal
        variables, together with some other variables as FieldData. These
        keys help identify which arrays in the FieldData are GLOBAL and
        which ones are GLOBAL_TEMPORAL.
        
        @sa vtkExtractExodusGlobalTemporalVariables.
        """
        ...
    
    def GLOBAL_VARIABLE(self):
        """
        V.GLOBAL_VARIABLE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *GLOBAL_VARIABLE()
        
        Exodus reader outputs global variables and global temporal
        variables, together with some other variables as FieldData. These
        keys help identify which arrays in the FieldData are GLOBAL and
        which ones are GLOBAL_TEMPORAL.
        
        @sa vtkExtractExodusGlobalTemporalVariables.
        """
        ...
    
    def HasModeShapesOff(self):
        """
        V.HasModeShapesOff()
        C++: virtual void HasModeShapesOff()
        
        Set/Get whether the Exodus sequence number corresponds to time
        steps or mode shapes. By default, HasModeShapes is false unless
        two time values in the Exodus file are identical, in which case
        it is true.
        """
        ...
    
    def HasModeShapesOn(self):
        """
        V.HasModeShapesOn()
        C++: virtual void HasModeShapesOn()
        
        Set/Get whether the Exodus sequence number corresponds to time
        steps or mode shapes. By default, HasModeShapes is false unless
        two time values in the Exodus file are identical, in which case
        it is true.
        """
        ...
    
    def IgnoreFileTimeOff(self):
        """
        V.IgnoreFileTimeOff()
        C++: virtual void IgnoreFileTimeOff()
        
        When on, this option ignores the time values assigned to each
        time step in the file. This can be useful for Exodus files where
        different time steps are overloaded to represent different
        aspects of a data set rather than the data set at different time
        values.
        """
        ...
    
    def IgnoreFileTimeOn(self):
        """
        V.IgnoreFileTimeOn()
        C++: virtual void IgnoreFileTimeOn()
        
        When on, this option ignores the time values assigned to each
        time step in the file. This can be useful for Exodus files where
        different time steps are overloaded to represent different
        aspects of a data set rather than the data set at different time
        values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsValidVariable(self, string, string_1):
        """
        V.IsValidVariable(string, string) -> int
        C++: int IsValidVariable(const char *type, const char *name)
        
        return boolean indicating whether the type,name is a valid
        variable
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExodusIIReader
        C++: vtkExodusIIReader *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reset the user-specified parameters and flush internal arrays so
        that the reader state is just as it was after the reader was
        instantiated.
        
        * It doesn't make sense to let users reset only the internal
          state;
        * both the settings and the state are changed by this call.
        """
        ...
    
    def ResetCache(self):
        """
        V.ResetCache()
        C++: void ResetCache()
        
        Clears out the cache entries.
        """
        ...
    
    def ResetSettings(self):
        """
        V.ResetSettings()
        C++: void ResetSettings()
        
        Reset the user-specified parameters to their default values. The
        only settings not affected are the filename and/or pattern
        because these have no default.
        
        * Resetting the settings but not the state allows users to
        * keep the active cache but return to initial array selections,
          etc.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExodusIIReader
        C++: static vtkExodusIIReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllArrayStatus(self, p_int, p_int_1):
        """
        V.SetAllArrayStatus(int, int)
        C++: void SetAllArrayStatus(int otype, int status)
        """
        ...
    
    def SetAnimateModeShapes(self, p_int):
        """
        V.SetAnimateModeShapes(int)
        C++: virtual void SetAnimateModeShapes(vtkTypeBool flag)
        
        If this flag is on (the default) and HasModeShapes is also on,
        then this reader will report a continuous time range [0,1] and
        animate the displacements in a periodic sinusoid.  If this flag
        is off and HasModeShapes is on, this reader ignores time.  This
        flag has no effect if HasModeShapes is off.
        """
        ...
    
    def SetApplyDisplacements(self, p_int):
        """
        V.SetApplyDisplacements(int)
        C++: virtual void SetApplyDisplacements(vtkTypeBool d)
        
        Geometric locations can include displacements.  By default, this
        is ON.  The nodal positions are 'displaced' by the standard
        exodus displacement vector. If displacements are turned 'off',
        the user can explicitly add them by applying a warp filter.
        """
        ...
    
    def SetAssemblyArrayStatus(self, p_int, p_int_1):
        """
        V.SetAssemblyArrayStatus(int, int)
        C++: void SetAssemblyArrayStatus(int index, int flag)
        V.SetAssemblyArrayStatus(string, int)
        C++: void SetAssemblyArrayStatus(const char *, int flag)
        
        By default all assemblies are loaded. These methods allow the
        user to select which assemblies they want to load.  You can get
        information about the assemblies by first caling
        UpdateInformation, and using GetAssemblyArrayName ...
        """
        ...
    
    def SetCacheSize(self, p_float):
        """
        V.SetCacheSize(float)
        C++: void SetCacheSize(double CacheSize)
        
        Set the size of the cache in MiB.
        """
        ...
    
    def SetDisplacementMagnitude(self, p_float):
        """
        V.SetDisplacementMagnitude(float)
        C++: virtual void SetDisplacementMagnitude(float s)
        
        Geometric locations can include displacements.  By default, this
        is ON.  The nodal positions are 'displaced' by the standard
        exodus displacement vector. If displacements are turned 'off',
        the user can explicitly add them by applying a warp filter.
        """
        ...
    
    def SetDisplayType(self, p_int):
        """
        V.SetDisplayType(int)
        C++: virtual void SetDisplayType(int type)
        """
        ...
    
    def SetEdgeBlockArrayStatus(self, string, p_int):
        """
        V.SetEdgeBlockArrayStatus(string, int)
        C++: void SetEdgeBlockArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetEdgeMapArrayStatus(self, string, p_int):
        """
        V.SetEdgeMapArrayStatus(string, int)
        C++: void SetEdgeMapArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetEdgeResultArrayStatus(self, string, p_int):
        """
        V.SetEdgeResultArrayStatus(string, int)
        C++: void SetEdgeResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetEdgeSetArrayStatus(self, string, p_int):
        """
        V.SetEdgeSetArrayStatus(string, int)
        C++: void SetEdgeSetArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetEdgeSetResultArrayStatus(self, string, p_int):
        """
        V.SetEdgeSetResultArrayStatus(string, int)
        C++: void SetEdgeSetResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetElementBlockArrayStatus(self, string, p_int):
        """
        V.SetElementBlockArrayStatus(string, int)
        C++: void SetElementBlockArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetElementMapArrayStatus(self, string, p_int):
        """
        V.SetElementMapArrayStatus(string, int)
        C++: void SetElementMapArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetElementResultArrayStatus(self, string, p_int):
        """
        V.SetElementResultArrayStatus(string, int)
        C++: void SetElementResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetElementSetArrayStatus(self, string, p_int):
        """
        V.SetElementSetArrayStatus(string, int)
        C++: void SetElementSetArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetElementSetResultArrayStatus(self, string, p_int):
        """
        V.SetElementSetResultArrayStatus(string, int)
        C++: void SetElementSetResultArrayStatus(const char *name,
            int flag)
        """
        ...
    
    def SetFaceBlockArrayStatus(self, string, p_int):
        """
        V.SetFaceBlockArrayStatus(string, int)
        C++: void SetFaceBlockArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetFaceMapArrayStatus(self, string, p_int):
        """
        V.SetFaceMapArrayStatus(string, int)
        C++: void SetFaceMapArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetFaceResultArrayStatus(self, string, p_int):
        """
        V.SetFaceResultArrayStatus(string, int)
        C++: void SetFaceResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetFaceSetArrayStatus(self, string, p_int):
        """
        V.SetFaceSetArrayStatus(string, int)
        C++: void SetFaceSetArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetFaceSetResultArrayStatus(self, string, p_int):
        """
        V.SetFaceSetResultArrayStatus(string, int)
        C++: void SetFaceSetResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetFileId(self, p_int):
        """
        V.SetFileId(int)
        C++: virtual void SetFileId(int f)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *fname)
        
        Specify file name of the Exodus file.
        """
        ...
    
    def SetGenerateFileIdArray(self, p_int):
        """
        V.SetGenerateFileIdArray(int)
        C++: virtual void SetGenerateFileIdArray(vtkTypeBool f)
        """
        ...
    
    def SetGenerateGlobalElementIdArray(self, p_int):
        """
        V.SetGenerateGlobalElementIdArray(int)
        C++: virtual void SetGenerateGlobalElementIdArray(vtkTypeBool g)
        """
        ...
    
    def SetGenerateGlobalNodeIdArray(self, p_int):
        """
        V.SetGenerateGlobalNodeIdArray(int)
        C++: virtual void SetGenerateGlobalNodeIdArray(vtkTypeBool g)
        """
        ...
    
    def SetGenerateImplicitElementIdArray(self, p_int):
        """
        V.SetGenerateImplicitElementIdArray(int)
        C++: virtual void SetGenerateImplicitElementIdArray(vtkTypeBool g)
        """
        ...
    
    def SetGenerateImplicitNodeIdArray(self, p_int):
        """
        V.SetGenerateImplicitNodeIdArray(int)
        C++: virtual void SetGenerateImplicitNodeIdArray(vtkTypeBool g)
        """
        ...
    
    def SetGenerateObjectIdCellArray(self, p_int):
        """
        V.SetGenerateObjectIdCellArray(int)
        C++: virtual void SetGenerateObjectIdCellArray(vtkTypeBool g)
        
        Extra cell data array that can be generated.  By default, this
        array is ON.  The value of the array is the integer id found in
        the exodus file. The name of the array is returned by
        GetBlockIdArrayName(). For cells representing elements from an
        Exodus element block, this is set to the element block ID. For
        cells representing edges from an Exodus edge block, this is the
        edge block ID. Similarly, this is the face block ID for cells
        representing faces from an Exodus face block. The same holds for
        cells representing entries of node, edge, face, side, and element
        sets.
        """
        ...
    
    def SetGlobalResultArrayStatus(self, string, p_int):
        """
        V.SetGlobalResultArrayStatus(string, int)
        C++: void SetGlobalResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetHasModeShapes(self, p_int):
        """
        V.SetHasModeShapes(int)
        C++: virtual void SetHasModeShapes(vtkTypeBool ms)
        
        Set/Get whether the Exodus sequence number corresponds to time
        steps or mode shapes. By default, HasModeShapes is false unless
        two time values in the Exodus file are identical, in which case
        it is true.
        """
        ...
    
    def SetHierarchyArrayStatus(self, p_int, p_int_1):
        """
        V.SetHierarchyArrayStatus(int, int)
        C++: void SetHierarchyArrayStatus(int index, int flag)
        V.SetHierarchyArrayStatus(string, int)
        C++: void SetHierarchyArrayStatus(const char *, int flag)
        
        By default all hierarchy entries are loaded. These methods allow
        the user to select which hierarchy entries they want to load. 
        You can get information about the hierarchy entries by first
        caling UpdateInformation, and using GetHierarchyArrayName ...
        these methods do not call functions in metaData. They call
        functions on the ExodusXMLParser since it seemed silly to
        duplicate all the information
        """
        ...
    
    def SetIgnoreFileTime(self, bool):
        """
        V.SetIgnoreFileTime(bool)
        C++: virtual void SetIgnoreFileTime(bool flag)
        
        When on, this option ignores the time values assigned to each
        time step in the file. This can be useful for Exodus files where
        different time steps are overloaded to represent different
        aspects of a data set rather than the data set at different time
        values.
        """
        ...
    
    def SetMaterialArrayStatus(self, p_int, p_int_1):
        """
        V.SetMaterialArrayStatus(int, int)
        C++: void SetMaterialArrayStatus(int index, int flag)
        V.SetMaterialArrayStatus(string, int)
        C++: void SetMaterialArrayStatus(const char *, int flag)
        
        By default all materials are loaded. These methods allow the user
        to select which materials they want to load.  You can get
        information about the materials by first caling
        UpdateInformation, and using GetMaterialArrayName ...
        """
        ...
    
    def SetModeShape(self, p_int):
        """
        V.SetModeShape(int)
        C++: void SetModeShape(int val)
        
        Convenience method to set the mode-shape which is same as
        this->SetTimeStep(val-1);
        """
        ...
    
    def SetModeShapeTime(self, p_float):
        """
        V.SetModeShapeTime(float)
        C++: virtual void SetModeShapeTime(double phase)
        
        Set/Get the time used to animate mode shapes. This is a number
        between 0 and 1 that is used to scale the DisplacementMagnitude
        in a sinusoidal pattern. Specifically, the displacement vector
        for each vertex is scaled by$ \mathrm{DisplacementMagnitude} cos(
        2\pi \mathrm{ModeShapeTime} ) $ before it is added to the vertex
        coordinates.
        """
        ...
    
    def SetNodeMapArrayStatus(self, string, p_int):
        """
        V.SetNodeMapArrayStatus(string, int)
        C++: void SetNodeMapArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetNodeSetArrayStatus(self, string, p_int):
        """
        V.SetNodeSetArrayStatus(string, int)
        C++: void SetNodeSetArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetNodeSetResultArrayStatus(self, string, p_int):
        """
        V.SetNodeSetResultArrayStatus(string, int)
        C++: void SetNodeSetResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetObjectArrayStatus(self, p_int, p_int_1, p_int_2):
        """
        V.SetObjectArrayStatus(int, int, int)
        C++: void SetObjectArrayStatus(int objectType, int arrayIndex,
            int status)
        V.SetObjectArrayStatus(int, string, int)
        C++: void SetObjectArrayStatus(int objectType,
            const char *arrayName, int status)
        
        By default arrays are not loaded.  These methods allow the user
        to select which arrays they want to load.  You can get
        information about the arrays by first caling UpdateInformation,
        and using GetPointArrayName ... (Developer Note) This meta data
        is all accessed through vtkExodusMetadata
        """
        ...
    
    def SetObjectAttributeStatus(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.SetObjectAttributeStatus(int, int, int, int)
        C++: void SetObjectAttributeStatus(int objectType,
            int objectIndex, int attribIndex, int status)
        V.SetObjectAttributeStatus(int, int, string, int)
        C++: void SetObjectAttributeStatus(int objectType,
            int objectIndex, const char *attribName, int status)
        
        By default attributes are not loaded.  These methods allow the
        user to select which attributes they want to load.  You can get
        information about the attributes by first caling
        UpdateInformation, and using GetObjectAttributeName ...
        (Developer Note) This meta data is all accessed through
        vtkExodusMetadata
        """
        ...
    
    def SetObjectStatus(self, p_int, p_int_1, p_int_2):
        """
        V.SetObjectStatus(int, int, int)
        C++: void SetObjectStatus(int objectType, int objectIndex,
            int status)
        V.SetObjectStatus(int, string, int)
        C++: void SetObjectStatus(int objectType, const char *objectName,
            int status)
        """
        ...
    
    def SetPartArrayStatus(self, p_int, p_int_1):
        """
        V.SetPartArrayStatus(int, int)
        C++: void SetPartArrayStatus(int index, int flag)
        V.SetPartArrayStatus(string, int)
        C++: void SetPartArrayStatus(const char *, int flag)
        
        By default all parts are loaded. These methods allow the user to
        select which parts they want to load.  You can get information
        about the parts by first caling UpdateInformation, and using
        GetPartArrayName ...
        """
        ...
    
    def SetPointResultArrayStatus(self, string, p_int):
        """
        V.SetPointResultArrayStatus(string, int)
        C++: void SetPointResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetSideSetArrayStatus(self, string, p_int):
        """
        V.SetSideSetArrayStatus(string, int)
        C++: void SetSideSetArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetSideSetResultArrayStatus(self, string, p_int):
        """
        V.SetSideSetResultArrayStatus(string, int)
        C++: void SetSideSetResultArrayStatus(const char *name, int flag)
        """
        ...
    
    def SetSqueezePoints(self, bool):
        """
        V.SetSqueezePoints(bool)
        C++: void SetSqueezePoints(bool sp)
        
        Should the reader output only points used by elements in the
        output mesh, or all the points. Outputting all the points is much
        faster since the point array can be read straight from disk and
        the mesh connectivity need not be altered. Squeezing the points
        down to the minimum set needed to produce the output mesh is
        useful for glyphing and other point-based operations. On large
        parallel datasets, loading all the points implies loading all the
        points on all processes and performing subsequent filtering on a
        much larger set.
        
        * By default, SqueezePoints is true for backwards compatibility.
        """
        ...
    
    def SetTimeStep(self, p_int):
        """
        V.SetTimeStep(int)
        C++: virtual void SetTimeStep(int _arg)
        
        Which TimeStep to read.
        """
        ...
    
    def SetUseLegacyBlockNames(self, bool):
        """
        V.SetUseLegacyBlockNames(bool)
        C++: virtual void SetUseLegacyBlockNames(bool _arg)
        
        In previous versions, the reader added the type of elements in
        the block to the block name when no name was provided for the
        block. This has issues with consistency when naming blocks across
        ranks for partitioned files (see paraview/paraview#19110), hence
        we no longer do that. For legacy pipelines, one can enable the
        old behavior by setting this flag to true.
        """
        ...
    
    def SetXMLFileName(self, string):
        """
        V.SetXMLFileName(string)
        C++: virtual void SetXMLFileName(const char *fname)
        
        Specify file name of the xml file.
        """
        ...
    
    def UseLegacyBlockNamesOff(self):
        """
        V.UseLegacyBlockNamesOff()
        C++: virtual void UseLegacyBlockNamesOff()
        
        In previous versions, the reader added the type of elements in
        the block to the block name when no name was provided for the
        block. This has issues with consistency when naming blocks across
        ranks for partitioned files (see paraview/paraview#19110), hence
        we no longer do that. For legacy pipelines, one can enable the
        old behavior by setting this flag to true.
        """
        ...
    
    def UseLegacyBlockNamesOn(self):
        """
        V.UseLegacyBlockNamesOn()
        C++: virtual void UseLegacyBlockNamesOn()
        
        In previous versions, the reader added the type of elements in
        the block to the block name when no name was provided for the
        block. This has issues with consistency when naming blocks across
        ranks for partitioned files (see paraview/paraview#19110), hence
        we no longer do that. For legacy pipelines, one can enable the
        old behavior by setting this flag to true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ASSEMBLY = ...
    EDGE_BLOCK = ...
    EDGE_BLOCK_ATTRIB = ...
    EDGE_BLOCK_CONN = ...
    EDGE_ID = ...
    EDGE_MAP = ...
    EDGE_SET = ...
    EDGE_SET_CONN = ...
    ELEMENT_ID = ...
    ELEM_BLOCK = ...
    ELEM_BLOCK_ATTRIB = ...
    ELEM_BLOCK_EDGE_CONN = ...
    ELEM_BLOCK_ELEM_CONN = ...
    ELEM_BLOCK_FACE_CONN = ...
    ELEM_BLOCK_TEMPORAL = ...
    ELEM_MAP = ...
    ELEM_SET = ...
    ELEM_SET_CONN = ...
    ENTITY_COUNTS = ...
    FACE_BLOCK = ...
    FACE_BLOCK_ATTRIB = ...
    FACE_BLOCK_CONN = ...
    FACE_ID = ...
    FACE_MAP = ...
    FACE_SET = ...
    FACE_SET_CONN = ...
    GLOBAL = ...
    GLOBAL_CONN = ...
    GLOBAL_ELEMENT_ID = ...
    GLOBAL_NODE_ID = ...
    GLOBAL_TEMPORAL = ...
    HIERARCHY = ...
    ID_NOT_FOUND = ...
    IMPLICIT_ELEMENT_ID = ...
    IMPLICIT_NODE_ID = ...
    INFO_RECORDS = ...
    MATERIAL = ...
    NODAL = ...
    NODAL_COORDS = ...
    NODAL_SQUEEZEMAP = ...
    NODAL_TEMPORAL = ...
    NODE_ID = ...
    NODE_MAP = ...
    NODE_SET = ...
    NODE_SET_CONN = ...
    ObjectType = ...
    OBJECT_ID = ...
    PART = ...
    QA_RECORDS = ...
    SEARCH_TYPE_ELEMENT = ...
    SEARCH_TYPE_ELEMENT_THEN_NODE = ...
    SEARCH_TYPE_NODE = ...
    SEARCH_TYPE_NODE_THEN_ELEMENT = ...
    SIDE_SET = ...
    SIDE_SET_CONN = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkExodusIIReaderParser(__vtkmodules_vtkIOXMLParser.vtkXMLParser):
    """
    vtkExodusIIReaderParser - internal parser used by vtkExodusIIReader.
    
    Superclass: vtkXMLParser
    
    vtkExodusIIReaderParser is an internal XML parser used by
    vtkExodusIIReader. This is not for public use.
    """
    def GetBlockName(self, p_int):
        """
        V.GetBlockName(int) -> string
        C++: std::string GetBlockName(int id)
        
        Given a block "id" return the name as determined from the xml.
        This is valid only after Go().
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSIL(self):
        """
        V.GetSIL() -> vtkMutableDirectedGraph
        C++: virtual vtkMutableDirectedGraph *GetSIL()
        
        Returns the SIL. This is valid only after Go().
        """
        ...
    
    def Go(self, string):
        """
        V.Go(string)
        C++: void Go(const char *filename)
        
        Trigger parsing of the XML file.
        """
        ...
    
    def HasInformationAboutBlock(self, p_int):
        """
        V.HasInformationAboutBlock(int) -> bool
        C++: bool HasInformationAboutBlock(int id)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExodusIIReaderParser
        C++: vtkExodusIIReaderParser *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExodusIIReaderParser
        C++: static vtkExodusIIReaderParser *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkExodusIIWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkExodusIIWriter - Write Exodus II files
    
    Superclass: vtkWriter
    
    This is a vtkWriter that writes it's vtkUnstructuredGrid
        input out to an Exodus II file.  Go to
    http://endo.sandia.gov/SEACAS/
        for more information about the Exodus II format.
    
    
        Exodus files contain much information that is not captured
        in a vtkUnstructuredGrid, such as time steps, information
        lines, node sets, and side sets.  This information can be
        stored in a vtkModelMetadata object.
    
    
        The vtkExodusReader and vtkPExodusReader can create
        a vtkModelMetadata object and embed it in a vtkUnstructuredGrid
        in a series of field arrays.  This writer searches for these
        field arrays and will use the metadata contained in them
        when creating the new Exodus II file.
    
    
        You can also explicitly give the vtkExodusIIWriter a
        vtkModelMetadata object to use when writing the file.
    
    
        In the absence of the information provided by vtkModelMetadata,
        if this writer is not part of a parallel application, we will use
        reasonable defaults for all the values in the output Exodus file.
        If you don't provide a block ID element array, we'll create a
        block for each cell type that appears in the unstructured grid.
    
    
        However if this writer is part of a parallel application (hence
        writing out a distributed Exodus file), then we need at the very
        least a list of all the block IDs that appear in the file.  And
        we need the element array of block IDs for the input unstructured
    grid.
    
    
        In the absence of a vtkModelMetadata object, you can also provide
        time step information which we will include in the output Exodus
        file.
    
    @warning
        If the input floating point field arrays and point locations are
    all
        floats or all doubles, this class will operate more efficiently.
        Mixing floats and doubles will slow you down, because Exodus II
        requires that we write only floats or only doubles.
    
    @warning
        We use the terms "point" and "node" interchangeably.
        Also, we use the terms "element" and "cell" interchangeably.
    """
    def GetBlockIdArrayName(self):
        """
        V.GetBlockIdArrayName() -> string
        C++: virtual char *GetBlockIdArrayName()
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetGhostLevel(self):
        """
        V.GetGhostLevel() -> int
        C++: virtual int GetGhostLevel()
        """
        ...
    
    def GetIgnoreMetaDataWarning(self):
        """
        V.GetIgnoreMetaDataWarning() -> bool
        C++: virtual bool GetIgnoreMetaDataWarning()
        """
        ...
    
    def GetModelMetadata(self):
        """
        V.GetModelMetadata() -> vtkModelMetadata
        C++: virtual vtkModelMetadata *GetModelMetadata()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStoreDoubles(self):
        """
        V.GetStoreDoubles() -> int
        C++: virtual int GetStoreDoubles()
        """
        ...
    
    def GetWriteAllTimeSteps(self):
        """
        V.GetWriteAllTimeSteps() -> int
        C++: virtual vtkTypeBool GetWriteAllTimeSteps()
        """
        ...
    
    def GetWriteOutBlockIdArray(self):
        """
        V.GetWriteOutBlockIdArray() -> int
        C++: virtual vtkTypeBool GetWriteOutBlockIdArray()
        """
        ...
    
    def GetWriteOutGlobalElementIdArray(self):
        """
        V.GetWriteOutGlobalElementIdArray() -> int
        C++: virtual vtkTypeBool GetWriteOutGlobalElementIdArray()
        """
        ...
    
    def GetWriteOutGlobalNodeIdArray(self):
        """
        V.GetWriteOutGlobalNodeIdArray() -> int
        C++: virtual vtkTypeBool GetWriteOutGlobalNodeIdArray()
        """
        ...
    
    def IgnoreMetaDataWarningOff(self):
        """
        V.IgnoreMetaDataWarningOff()
        C++: virtual void IgnoreMetaDataWarningOff()
        """
        ...
    
    def IgnoreMetaDataWarningOn(self):
        """
        V.IgnoreMetaDataWarningOn()
        C++: virtual void IgnoreMetaDataWarningOn()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExodusIIWriter
        C++: vtkExodusIIWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExodusIIWriter
        C++: static vtkExodusIIWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBlockIdArrayName(self, string):
        """
        V.SetBlockIdArrayName(string)
        C++: virtual void SetBlockIdArrayName(const char *_arg)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Name for the output file.  If writing in parallel, the number of
        processes and the process rank will be appended to the name, so
        each process is writing out a separate file. If not set, this
        class will make up a file name.
        """
        ...
    
    def SetGhostLevel(self, p_int):
        """
        V.SetGhostLevel(int)
        C++: virtual void SetGhostLevel(int _arg)
        
        We never write out ghost cells.  This variable is here to satisfy
        the behavior of ParaView on invoking a parallel writer.
        """
        ...
    
    def SetIgnoreMetaDataWarning(self, bool):
        """
        V.SetIgnoreMetaDataWarning(bool)
        C++: virtual void SetIgnoreMetaDataWarning(bool _arg)
        
        In certain cases we know that metadata doesn't exist and we want
        to ignore that warning.
        """
        ...
    
    def SetModelMetadata(self, vtkModelMetadata):
        """
        V.SetModelMetadata(vtkModelMetadata)
        C++: void SetModelMetadata(vtkModelMetadata *)
        
        Specify the vtkModelMetadata object which contains the Exodus
        file model information (metadata) absent in the
        vtkUnstructuredGrid.  If you have this object, you don't need to
        set any other values before writing. (Just the FileName and the
        Input.) Note that the vtkExodusReader can create and attach a
        vtkModelMetadata object to it's output.  If this has happened,
        the ExodusIIWriter will find it and use it.
        """
        ...
    
    def SetStoreDoubles(self, p_int):
        """
        V.SetStoreDoubles(int)
        C++: virtual void SetStoreDoubles(int _arg)
        
        If StoreDoubles is ON, the floating point fields in the Exodus
        file will be double precision fields.  The default is determined
        by the max precision of the input.  If the field data appears to
        be doubles, then StoreDoubles will be ON, otherwise StoreDoubles
        will be OFF.
        """
        ...
    
    def SetWriteAllTimeSteps(self, p_int):
        """
        V.SetWriteAllTimeSteps(int)
        C++: virtual void SetWriteAllTimeSteps(vtkTypeBool _arg)
        
        When WriteAllTimeSteps is turned ON, the writer is executed once
        for each timestep available from the reader.
        """
        ...
    
    def SetWriteOutBlockIdArray(self, p_int):
        """
        V.SetWriteOutBlockIdArray(int)
        C++: virtual void SetWriteOutBlockIdArray(vtkTypeBool _arg)
        
        By default, the integer array containing the global Block Ids of
        the cells is not included when the new Exodus II file is written
        out.  If you do want to include this array, set
        WriteOutBlockIdArray to ON.
        """
        ...
    
    def SetWriteOutGlobalElementIdArray(self, p_int):
        """
        V.SetWriteOutGlobalElementIdArray(int)
        C++: virtual void SetWriteOutGlobalElementIdArray(
            vtkTypeBool _arg)
        
        By default, the integer array containing the global Element Ids
        is not included when the new Exodus II file is written out.  If
        you do want to include this array, set
        WriteOutGlobalElementIdArray to ON.
        """
        ...
    
    def SetWriteOutGlobalNodeIdArray(self, p_int):
        """
        V.SetWriteOutGlobalNodeIdArray(int)
        C++: virtual void SetWriteOutGlobalNodeIdArray(vtkTypeBool _arg)
        
        By default, the integer array containing the global Node Ids is
        not included when the new Exodus II file is written out.  If you
        do want to include this array, set WriteOutGlobalNodeIdArray to
        ON.
        """
        ...
    
    def WriteAllTimeStepsOff(self):
        """
        V.WriteAllTimeStepsOff()
        C++: virtual void WriteAllTimeStepsOff()
        """
        ...
    
    def WriteAllTimeStepsOn(self):
        """
        V.WriteAllTimeStepsOn()
        C++: virtual void WriteAllTimeStepsOn()
        """
        ...
    
    def WriteOutBlockIdArrayOff(self):
        """
        V.WriteOutBlockIdArrayOff()
        C++: virtual void WriteOutBlockIdArrayOff()
        """
        ...
    
    def WriteOutBlockIdArrayOn(self):
        """
        V.WriteOutBlockIdArrayOn()
        C++: virtual void WriteOutBlockIdArrayOn()
        """
        ...
    
    def WriteOutGlobalElementIdArrayOff(self):
        """
        V.WriteOutGlobalElementIdArrayOff()
        C++: virtual void WriteOutGlobalElementIdArrayOff()
        """
        ...
    
    def WriteOutGlobalElementIdArrayOn(self):
        """
        V.WriteOutGlobalElementIdArrayOn()
        C++: virtual void WriteOutGlobalElementIdArrayOn()
        """
        ...
    
    def WriteOutGlobalNodeIdArrayOff(self):
        """
        V.WriteOutGlobalNodeIdArrayOff()
        C++: virtual void WriteOutGlobalNodeIdArrayOff()
        """
        ...
    
    def WriteOutGlobalNodeIdArrayOn(self):
        """
        V.WriteOutGlobalNodeIdArrayOn()
        C++: virtual void WriteOutGlobalNodeIdArrayOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkModelMetadata(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkModelMetadata - This class encapsulates the metadata
      that appear in mesh-based file formats but do not appear in
      vtkUnstructuredGrid.
    
    Superclass: vtkObject
    
    This class is inspired by the Exodus II file format, but
      because this class does not depend on the Exodus library, it
      should be possible to use it to represent metadata for other
      dataset file formats.  Sandia Labs uses it in their Exodus II
      reader, their Exodus II writer and their EnSight writer.
      vtkDistributedDataFilter looks for metadata attached to
      it's input and redistributes the metadata with the grid.
    
    
      The fields in this class are those described in the document
      "EXODUS II: A Finite Element Data Model", SAND92-2137, November
    1995.
    
    
      Element and node IDs stored in this object must be global IDs,
      in the event that the original dataset was partitioned across
      many files.
    
    
      One way to initialize this object is by using vtkExodusModel
      (a Sandia class used by the Sandia Exodus reader).
      That class will take an open Exodus II file and a
      vtkUnstructuredGrid drawn from it and will set the required fields.
    
    
      Alternatively, you can use all the Set*
      methods to set the individual fields. This class does not
      copy the data, it simply uses your pointer. This
      class will free the storage associated with your pointer
      when the class is deleted.  Most fields have sensible defaults.
      The only requirement is that if you are using this ModelMetadata
      to write out an Exodus or EnSight file in parallel, you must
      SetBlockIds and SetBlockIdArrayName.  Your vtkUnstructuredGrid must
      have a cell array giving the block ID for each cell.
    
    @warning
      The Exodus II library supports an optimized element order map
      (section 3.7 in the SAND document).  It contains all the element
      IDs, listed in the order in which a solver should process them.
      We don't include this, and won't unless there is a request.
    
    @warning
      There is an assumption in some classes that the name of the cell
      array containing global element ids is "GlobalElementId" and the
      name of the point array containing global node ids is
    "GlobalNodeId".
      (element == cell) and (node == point).
    
    @sa
      vtkDistributedDataFilter vtkExtractCells
    """
    def AllVariablesDefinedInAllBlocksOff(self):
        """
        V.AllVariablesDefinedInAllBlocksOff()
        C++: virtual void AllVariablesDefinedInAllBlocksOff()
        
        Instead of a truth table of all "1"s, you can set this instance
        variable to indicate that all variables are defined in all
        blocks.
        """
        ...
    
    def AllVariablesDefinedInAllBlocksOn(self):
        """
        V.AllVariablesDefinedInAllBlocksOn()
        C++: virtual void AllVariablesDefinedInAllBlocksOn()
        
        Instead of a truth table of all "1"s, you can set this instance
        variable to indicate that all variables are defined in all
        blocks.
        """
        ...
    
    def FreeAllGlobalData(self):
        """
        V.FreeAllGlobalData()
        C++: void FreeAllGlobalData()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeAllLocalData(self):
        """
        V.FreeAllLocalData()
        C++: void FreeAllLocalData()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeBlockDependentData(self):
        """
        V.FreeBlockDependentData()
        C++: void FreeBlockDependentData()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeOriginalElementVariableNames(self):
        """
        V.FreeOriginalElementVariableNames()
        C++: void FreeOriginalElementVariableNames()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeOriginalNodeVariableNames(self):
        """
        V.FreeOriginalNodeVariableNames()
        C++: void FreeOriginalNodeVariableNames()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeUsedElementVariableNames(self):
        """
        V.FreeUsedElementVariableNames()
        C++: void FreeUsedElementVariableNames()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeUsedElementVariables(self):
        """
        V.FreeUsedElementVariables()
        C++: void FreeUsedElementVariables()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeUsedNodeVariableNames(self):
        """
        V.FreeUsedNodeVariableNames()
        C++: void FreeUsedNodeVariableNames()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def FreeUsedNodeVariables(self):
        """
        V.FreeUsedNodeVariables()
        C++: void FreeUsedNodeVariables()
        
        Free selected portions of the metadata when updating values in
        the vtkModelMetadata object.  Resetting a particular field, (i.e.
        SetNodeSetIds) frees the previous setting, but if you are not
        setting every field, you may want to do a wholesale "Free" first.
        
        * FreeAllGlobalData frees all the fields which don't depend on
        * which time step, which blocks, or which variables are in the
          input.
        * FreeAllLocalData frees all the fields which do depend on which
        * time step, blocks or variables are in the input.
        * FreeBlockDependentData frees all metadata fields which depend
          on
        * which blocks were read in.
        """
        ...
    
    def GetAllVariablesDefinedInAllBlocks(self):
        """
        V.GetAllVariablesDefinedInAllBlocks() -> int
        C++: vtkTypeBool GetAllVariablesDefinedInAllBlocks()
        
        Instead of a truth table of all "1"s, you can set this instance
        variable to indicate that all variables are defined in all
        blocks.
        """
        ...
    
    def GetBlockAttributes(self):
        """
        V.GetBlockAttributes() -> (float, ...)
        C++: float *GetBlockAttributes()
        """
        ...
    
    def GetBlockAttributesIndex(self):
        """
        V.GetBlockAttributesIndex() -> (int, ...)
        C++: int *GetBlockAttributesIndex()
        
        Get a list of the index into the BlockAttributes of the start of
        each block's element attribute list.
        """
        ...
    
    def GetBlockElementIdList(self):
        """
        V.GetBlockElementIdList() -> (int, ...)
        C++: int *GetBlockElementIdList()
        """
        ...
    
    def GetBlockElementIdListIndex(self):
        """
        V.GetBlockElementIdListIndex() -> (int, ...)
        C++: int *GetBlockElementIdListIndex()
        
        Get a list of the index into the BlockElementIdList of the start
        of each block's elements.
        """
        ...
    
    def GetBlockIds(self):
        """
        V.GetBlockIds() -> (int, ...)
        C++: int *GetBlockIds()
        """
        ...
    
    def GetBlockNodesPerElement(self):
        """
        V.GetBlockNodesPerElement() -> (int, ...)
        C++: int *GetBlockNodesPerElement()
        """
        ...
    
    def GetBlockNumberOfAttributesPerElement(self):
        """
        V.GetBlockNumberOfAttributesPerElement() -> (int, ...)
        C++: int *GetBlockNumberOfAttributesPerElement()
        """
        ...
    
    def GetBlockNumberOfElements(self):
        """
        V.GetBlockNumberOfElements() -> (int, ...)
        C++: int *GetBlockNumberOfElements()
        """
        ...
    
    def GetBlockPropertyValue(self):
        """
        V.GetBlockPropertyValue() -> (int, ...)
        C++: int *GetBlockPropertyValue()
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension()
        
        Get the dimension of the model.  This is also the number of
        coordinate names.
        """
        ...
    
    def GetElementVariableNumberOfComponents(self):
        """
        V.GetElementVariableNumberOfComponents() -> (int, ...)
        C++: int *GetElementVariableNumberOfComponents()
        """
        ...
    
    def GetElementVariableTruthTable(self):
        """
        V.GetElementVariableTruthTable() -> (int, ...)
        C++: int *GetElementVariableTruthTable()
        """
        ...
    
    def GetGlobalVariableValue(self):
        """
        V.GetGlobalVariableValue() -> (float, ...)
        C++: float *GetGlobalVariableValue()
        """
        ...
    
    def GetMapToOriginalElementVariableNames(self):
        """
        V.GetMapToOriginalElementVariableNames() -> (int, ...)
        C++: int *GetMapToOriginalElementVariableNames()
        """
        ...
    
    def GetMapToOriginalNodeVariableNames(self):
        """
        V.GetMapToOriginalNodeVariableNames() -> (int, ...)
        C++: int *GetMapToOriginalNodeVariableNames()
        """
        ...
    
    def GetNodeSetDistributionFactorIndex(self):
        """
        V.GetNodeSetDistributionFactorIndex() -> (int, ...)
        C++: int *GetNodeSetDistributionFactorIndex()
        
        Get a list of the index of the starting entry for each node set
        in the list of node set distribution factors.
        """
        ...
    
    def GetNodeSetDistributionFactors(self):
        """
        V.GetNodeSetDistributionFactors() -> (float, ...)
        C++: float *GetNodeSetDistributionFactors()
        """
        ...
    
    def GetNodeSetIds(self):
        """
        V.GetNodeSetIds() -> (int, ...)
        C++: int *GetNodeSetIds()
        """
        ...
    
    def GetNodeSetNames(self):
        """
        V.GetNodeSetNames() -> vtkStringArray
        C++: vtkStringArray *GetNodeSetNames()
        """
        ...
    
    def GetNodeSetNodeIdList(self):
        """
        V.GetNodeSetNodeIdList() -> (int, ...)
        C++: int *GetNodeSetNodeIdList()
        """
        ...
    
    def GetNodeSetNodeIdListIndex(self):
        """
        V.GetNodeSetNodeIdListIndex() -> (int, ...)
        C++: int *GetNodeSetNodeIdListIndex()
        
        Get a list of the index of the starting entry for each node set
        in the list of node set node IDs.
        """
        ...
    
    def GetNodeSetNumberOfDistributionFactors(self):
        """
        V.GetNodeSetNumberOfDistributionFactors() -> (int, ...)
        C++: int *GetNodeSetNumberOfDistributionFactors()
        """
        ...
    
    def GetNodeSetPropertyValue(self):
        """
        V.GetNodeSetPropertyValue() -> (int, ...)
        C++: int *GetNodeSetPropertyValue()
        """
        ...
    
    def GetNodeSetSize(self):
        """
        V.GetNodeSetSize() -> (int, ...)
        C++: int *GetNodeSetSize()
        """
        ...
    
    def GetNodeVariableNumberOfComponents(self):
        """
        V.GetNodeVariableNumberOfComponents() -> (int, ...)
        C++: int *GetNodeVariableNumberOfComponents()
        """
        ...
    
    def GetNumberOfBlockProperties(self):
        """
        V.GetNumberOfBlockProperties() -> int
        C++: int GetNumberOfBlockProperties()
        
        The number of block properties (global variables)
        """
        ...
    
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: int GetNumberOfBlocks()
        
        The number of blocks in the file.  Set this before setting any of
        the block arrays.
        """
        ...
    
    def GetNumberOfElementVariables(self):
        """
        V.GetNumberOfElementVariables() -> int
        C++: int GetNumberOfElementVariables()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGlobalVariables(self):
        """
        V.GetNumberOfGlobalVariables() -> int
        C++: int GetNumberOfGlobalVariables()
        
        Get the number of global variables per time step
        """
        ...
    
    def GetNumberOfInformationLines(self):
        """
        V.GetNumberOfInformationLines() -> int
        C++: int GetNumberOfInformationLines()
        
        Get the number of information lines.
        """
        ...
    
    def GetNumberOfNodeSetProperties(self):
        """
        V.GetNumberOfNodeSetProperties() -> int
        C++: int GetNumberOfNodeSetProperties()
        
        The number of node set properties (global variables)
        """
        ...
    
    def GetNumberOfNodeSets(self):
        """
        V.GetNumberOfNodeSets() -> int
        C++: int GetNumberOfNodeSets()
        
        The number of node sets in the file.  Set this value before
        setting the various node set arrays.
        """
        ...
    
    def GetNumberOfNodeVariables(self):
        """
        V.GetNumberOfNodeVariables() -> int
        C++: int GetNumberOfNodeVariables()
        """
        ...
    
    def GetNumberOfSideSetProperties(self):
        """
        V.GetNumberOfSideSetProperties() -> int
        C++: int GetNumberOfSideSetProperties()
        
        The number of side set properties (global variables)
        """
        ...
    
    def GetNumberOfSideSets(self):
        """
        V.GetNumberOfSideSets() -> int
        C++: int GetNumberOfSideSets()
        
        Set or get the number of side sets.  Set this value before
        setting any of the other side set arrays.
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: int GetNumberOfTimeSteps()
        """
        ...
    
    def GetOriginalNumberOfElementVariables(self):
        """
        V.GetOriginalNumberOfElementVariables() -> int
        C++: int GetOriginalNumberOfElementVariables()
        
        The ModelMetadata object may contain these lists: o  the
        variables in the original data file o  the variables created in
        the u grid from those original variables o  a mapping from the
        grid variable names to the original names o  a list of the number
        of components each grid variable has
        
        * (Example: Variables in Exodus II files are all scalars.  Some
          are
        * combined by the ExodusReader into vector variables in the
          grid.)
        
        * These methods return names of the original variables, the names
        * of the grid variables, a list of the number of components in
        * each grid variable, and a list of the index into the list of
        * original variable names where the original name of the first
        * component of a grid variable may be found.  The names of
          subsequent
        * components would immediately follow the name of the first
        * component.
        """
        ...
    
    def GetOriginalNumberOfNodeVariables(self):
        """
        V.GetOriginalNumberOfNodeVariables() -> int
        C++: int GetOriginalNumberOfNodeVariables()
        """
        ...
    
    def GetSideSetDistributionFactorIndex(self):
        """
        V.GetSideSetDistributionFactorIndex() -> (int, ...)
        C++: int *GetSideSetDistributionFactorIndex()
        
        Get a list of the index of the starting entry for each side set
        in the list of side set distribution factors.
        """
        ...
    
    def GetSideSetDistributionFactors(self):
        """
        V.GetSideSetDistributionFactors() -> (float, ...)
        C++: float *GetSideSetDistributionFactors()
        """
        ...
    
    def GetSideSetElementList(self):
        """
        V.GetSideSetElementList() -> (int, ...)
        C++: int *GetSideSetElementList()
        """
        ...
    
    def GetSideSetIds(self):
        """
        V.GetSideSetIds() -> (int, ...)
        C++: int *GetSideSetIds()
        """
        ...
    
    def GetSideSetListIndex(self):
        """
        V.GetSideSetListIndex() -> (int, ...)
        C++: int *GetSideSetListIndex()
        
        Get a list of the index of the starting entry for each side set
        in the list of side set side IDs.
        """
        ...
    
    def GetSideSetNames(self):
        """
        V.GetSideSetNames() -> vtkStringArray
        C++: vtkStringArray *GetSideSetNames()
        """
        ...
    
    def GetSideSetNumberOfDistributionFactors(self):
        """
        V.GetSideSetNumberOfDistributionFactors() -> (int, ...)
        C++: int *GetSideSetNumberOfDistributionFactors()
        """
        ...
    
    def GetSideSetNumDFPerSide(self):
        """
        V.GetSideSetNumDFPerSide() -> (int, ...)
        C++: int *GetSideSetNumDFPerSide()
        """
        ...
    
    def GetSideSetPropertyValue(self):
        """
        V.GetSideSetPropertyValue() -> (int, ...)
        C++: int *GetSideSetPropertyValue()
        """
        ...
    
    def GetSideSetSideList(self):
        """
        V.GetSideSetSideList() -> (int, ...)
        C++: int *GetSideSetSideList()
        """
        ...
    
    def GetSideSetSize(self):
        """
        V.GetSideSetSize() -> (int, ...)
        C++: int *GetSideSetSize()
        """
        ...
    
    def GetSizeBlockAttributeArray(self):
        """
        V.GetSizeBlockAttributeArray() -> int
        C++: int GetSizeBlockAttributeArray()
        
        Get the length of the list of floating point block attributes.
        """
        ...
    
    def GetSumDistFactPerNodeSet(self):
        """
        V.GetSumDistFactPerNodeSet() -> int
        C++: int GetSumDistFactPerNodeSet()
        
        Get the total number of distribution factors stored for all node
        sets
        """
        ...
    
    def GetSumDistFactPerSideSet(self):
        """
        V.GetSumDistFactPerSideSet() -> int
        C++: int GetSumDistFactPerSideSet()
        
        Get the total number of distribution factors stored for all side
        sets
        """
        ...
    
    def GetSumElementsPerBlock(self):
        """
        V.GetSumElementsPerBlock() -> int
        C++: int GetSumElementsPerBlock()
        
        Get the length of the list of elements in every block.
        """
        ...
    
    def GetSumNodesPerNodeSet(self):
        """
        V.GetSumNodesPerNodeSet() -> int
        C++: int GetSumNodesPerNodeSet()
        
        Get the total number of nodes in all node sets
        """
        ...
    
    def GetSumSidesPerSideSet(self):
        """
        V.GetSumSidesPerSideSet() -> int
        C++: int GetSumSidesPerSideSet()
        
        Get the total number of sides in all side sets
        """
        ...
    
    def GetTimeStepIndex(self):
        """
        V.GetTimeStepIndex() -> int
        C++: int GetTimeStepIndex()
        
        Set the index of the time step represented by the results data in
        the file attached to this ModelMetadata object.  Time step
        indices start at 0 in this file, they start at 1 in an Exodus
        file.
        """
        ...
    
    def GetTimeStepValues(self):
        """
        V.GetTimeStepValues() -> (float, ...)
        C++: float *GetTimeStepValues()
        
        Get the time step values
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: const char *GetTitle()
        
        The title of the dataset.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkModelMetadata
        C++: vtkModelMetadata *NewInstance()
        """
        ...
    
    def PrintGlobalInformation(self):
        """
        V.PrintGlobalInformation()
        C++: virtual void PrintGlobalInformation()
        
        The global fields are those which pertain to the whole file. 
        Examples are the title, information lines, and list of block IDs.
         This method prints out all the global information.
        """
        ...
    
    def PrintLocalInformation(self):
        """
        V.PrintLocalInformation()
        C++: virtual void PrintLocalInformation()
        
        The local fields are those which depend on exactly which blocks,
        which time step, and which variables you read in from the file. 
        Examples are the number of cells in each block, and the list of
        nodes in a node set, or the value of the global variables at a
        time step.  If VERBOSE_TESTING is defined in your execution
        environment, this method will print more than mere counts, and
        actually print a few of the IDs, distribution factors and so on. 
        If VERY_VERBOSE_TESTING is defined, it will print out all ID
        lists, distribution factor lists, and so on.
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Set the object back to it's initial state
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkModelMetadata
        C++: static vtkModelMetadata *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllVariablesDefinedInAllBlocks(self, p_int):
        """
        V.SetAllVariablesDefinedInAllBlocks(int)
        C++: virtual void SetAllVariablesDefinedInAllBlocks(
            vtkTypeBool _arg)
        
        Instead of a truth table of all "1"s, you can set this instance
        variable to indicate that all variables are defined in all
        blocks.
        """
        ...
    
    def SetBlockAttributes(self, *float):
        """
        V.SetBlockAttributes([float, ...])
        C++: void SetBlockAttributes(float *)
        
        Set or get a pointer to a list of the attributes for all blocks. 
        The order of the list should be by block, by element within the
        block, by attribute.  Omit blocks that don't have element
        attributes.
        """
        ...
    
    def SetBlockElementIdList(self, *int):
        """
        V.SetBlockElementIdList([int, ...])
        C++: void SetBlockElementIdList(int *)
        
        Set or get a pointer to a list global element IDs for the
        elements in each block. We use your pointers, and free the memory
        when the object is freed.
        """
        ...
    
    def SetBlockIds(self, *int):
        """
        V.SetBlockIds([int, ...])
        C++: void SetBlockIds(int *)
        
        An arbitrary integer ID for each block. We use your pointer, and
        free the memory when the object is freed.
        """
        ...
    
    def SetBlockNodesPerElement(self, *int):
        """
        V.SetBlockNodesPerElement([int, ...])
        C++: void SetBlockNodesPerElement(int *)
        
        Set or get a pointer to a list of the number of nodes in the
        elements of each block. We use your pointers, and free the memory
        when the object is freed.
        """
        ...
    
    def SetBlockNumberOfAttributesPerElement(self, *int):
        """
        V.SetBlockNumberOfAttributesPerElement([int, ...]) -> int
        C++: int SetBlockNumberOfAttributesPerElement(int *natts)
        
        Set or get a pointer to a list of the number of attributes stored
        for the elements in each block. We use your pointers, and free
        the memory when the object is freed.
        """
        ...
    
    def SetBlockNumberOfElements(self, *int):
        """
        V.SetBlockNumberOfElements([int, ...]) -> int
        C++: int SetBlockNumberOfElements(int *nelts)
        
        Set or get a pointer to a list of the number of elements in each
        block. We use your pointers, and free the memory when the object
        is freed.
        """
        ...
    
    def SetBlockPropertyValue(self, *int):
        """
        V.SetBlockPropertyValue([int, ...])
        C++: void SetBlockPropertyValue(int *)
        
        Set or get value for each variable for each block.  List the
        integer values in order by variable and within variable by block.
        """
        ...
    
    def SetElementVariableTruthTable(self, *int):
        """
        V.SetElementVariableTruthTable([int, ...])
        C++: void SetElementVariableTruthTable(int *)
        
        A truth table indicating which element variables are defined for
        which blocks. The variables are all the original element
        variables that were in the file. The table is by block ID and
        within block ID by variable.
        """
        ...
    
    def SetGlobalVariableValue(self, *float):
        """
        V.SetGlobalVariableValue([float, ...])
        C++: void SetGlobalVariableValue(float *f)
        
        Set or get the values of the global variables at the current time
        step.
        """
        ...
    
    def SetNodeSetDistributionFactors(self, *float):
        """
        V.SetNodeSetDistributionFactors([float, ...])
        C++: void SetNodeSetDistributionFactors(float *)
        
        Set or get a list of the distribution factors for the node sets.
        The list is organized by node set, and within node set by node.
        We use your pointer, and free the memory when the object is
        freed.
        """
        ...
    
    def SetNodeSetIds(self, *int):
        """
        V.SetNodeSetIds([int, ...])
        C++: void SetNodeSetIds(int *)
        
        Set or get the list the IDs for each node set. Length of list is
        the number of node sets. We use your pointer, and free the memory
        when the object is freed.
        """
        ...
    
    def SetNodeSetNames(self, vtkStringArray):
        """
        V.SetNodeSetNames(vtkStringArray)
        C++: void SetNodeSetNames(vtkStringArray *names)
        """
        ...
    
    def SetNodeSetNodeIdList(self, *int):
        """
        V.SetNodeSetNodeIdList([int, ...])
        C++: void SetNodeSetNodeIdList(int *)
        
        Set or get a pointer to a concatenated list of the IDs of all
        nodes in each node set.  First list all IDs in node set 0, then
        all IDs in node set 1, and so on. We use your pointer, and free
        the memory when the object is freed.
        """
        ...
    
    def SetNodeSetNumberOfDistributionFactors(self, *int):
        """
        V.SetNodeSetNumberOfDistributionFactors([int, ...])
        C++: void SetNodeSetNumberOfDistributionFactors(int *)
        
        Set or get a list of the number of distribution factors stored by
        each node set.  This is either 0 or equal to the number of nodes
        in the node set. Length of list is number of node sets. We use
        your pointer, and free the memory when the object is freed.
        """
        ...
    
    def SetNodeSetPropertyValue(self, *int):
        """
        V.SetNodeSetPropertyValue([int, ...])
        C++: void SetNodeSetPropertyValue(int *)
        
        Set or get value for each variable for each node set.  List the
        integer values in order by variable and within variable by node
        set.
        """
        ...
    
    def SetNodeSetSize(self, *int):
        """
        V.SetNodeSetSize([int, ...])
        C++: void SetNodeSetSize(int *)
        
        Set or get a pointer to a list of the number of nodes in each
        node set. We use your pointer, and free the memory when the
        object is freed.
        """
        ...
    
    def SetNumberOfBlocks(self, p_int):
        """
        V.SetNumberOfBlocks(int)
        C++: virtual void SetNumberOfBlocks(int _arg)
        
        The number of blocks in the file.  Set this before setting any of
        the block arrays.
        """
        ...
    
    def SetNumberOfNodeSets(self, p_int):
        """
        V.SetNumberOfNodeSets(int)
        C++: virtual void SetNumberOfNodeSets(int _arg)
        
        The number of node sets in the file.  Set this value before
        setting the various node set arrays.
        """
        ...
    
    def SetNumberOfSideSets(self, p_int):
        """
        V.SetNumberOfSideSets(int)
        C++: virtual void SetNumberOfSideSets(int _arg)
        
        Set or get the number of side sets.  Set this value before
        setting any of the other side set arrays.
        """
        ...
    
    def SetSideSetDistributionFactors(self, *float):
        """
        V.SetSideSetDistributionFactors([float, ...])
        C++: void SetSideSetDistributionFactors(float *)
        
        Set or get a pointer to a list of all the distribution factors.
        For every side set that has distribution factors, the number of
        factors per node was given in the
        SideSetNumberOfDistributionFactors array.  If this number for a
        given side set is N, then for that side set we have N floating
        point values for each node for each side in the side set.  If
        nodes are repeated in more than one side, we repeat the
        distribution factors.  So this list is in order by side set, by
        node. We use your pointer, and free the memory when the object is
        freed.
        """
        ...
    
    def SetSideSetElementList(self, *int):
        """
        V.SetSideSetElementList([int, ...])
        C++: void SetSideSetElementList(int *)
        
        Set or get a pointer to a list of the elements containing each
        side in each side set.  The list is organized by side set, and
        within side set by element. We use your pointer, and free the
        memory when the object is freed.
        """
        ...
    
    def SetSideSetIds(self, *int):
        """
        V.SetSideSetIds([int, ...])
        C++: void SetSideSetIds(int *)
        
        Set or get a pointer to a list giving the ID of each side set. We
        use your pointer, and free the memory when the object is freed.
        """
        ...
    
    def SetSideSetNames(self, vtkStringArray):
        """
        V.SetSideSetNames(vtkStringArray)
        C++: void SetSideSetNames(vtkStringArray *names)
        """
        ...
    
    def SetSideSetNumberOfDistributionFactors(self, *int):
        """
        V.SetSideSetNumberOfDistributionFactors([int, ...]) -> int
        C++: int SetSideSetNumberOfDistributionFactors(int *df)
        
        Set or get a pointer to a list of the number of distribution
        factors stored by each side set.   Each side set has either no
        distribution factors, or 1 per node in the side set. We use your
        pointer, and free the memory when the object is freed.
        """
        ...
    
    def SetSideSetNumDFPerSide(self, *int):
        """
        V.SetSideSetNumDFPerSide([int, ...])
        C++: void SetSideSetNumDFPerSide(int *numNodes)
        
        Set or get a pointer to a list of the number of nodes in each
        side of each side set.  This list is organized by side set, and
        within side set by side. We use your pointer, and free the memory
        when the object is freed.
        """
        ...
    
    def SetSideSetPropertyValue(self, *int):
        """
        V.SetSideSetPropertyValue([int, ...])
        C++: void SetSideSetPropertyValue(int *)
        
        Set or get value for each variable for each side set.  List the
        integer values in order by variable and within variable by side
        set.
        """
        ...
    
    def SetSideSetSideList(self, *int):
        """
        V.SetSideSetSideList([int, ...])
        C++: void SetSideSetSideList(int *)
        
        Set or get a pointer to the element side for each side in the
        side set. (See the manual for the convention for numbering sides
        in different types of cells.)  Side Ids are arranged by side set
        and within side set by side, and correspond to the
        SideSetElementList. We use your pointer, and free the memory when
        the object is freed.
        """
        ...
    
    def SetSideSetSize(self, *int):
        """
        V.SetSideSetSize([int, ...]) -> int
        C++: int SetSideSetSize(int *sizes)
        
        Set or get a pointer to a list of the number of sides in each
        side set. We use your pointer, and free the memory when the
        object is freed.
        """
        ...
    
    def SetSumNodesPerNodeSet(self, p_int):
        """
        V.SetSumNodesPerNodeSet(int)
        C++: virtual void SetSumNodesPerNodeSet(int _arg)
        
        Get the total number of nodes in all node sets
        """
        ...
    
    def SetSumSidesPerSideSet(self, p_int):
        """
        V.SetSumSidesPerSideSet(int)
        C++: virtual void SetSumSidesPerSideSet(int _arg)
        
        Get the total number of sides in all side sets
        """
        ...
    
    def SetTimeStepIndex(self, p_int):
        """
        V.SetTimeStepIndex(int)
        C++: virtual void SetTimeStepIndex(int _arg)
        
        Set the index of the time step represented by the results data in
        the file attached to this ModelMetadata object.  Time step
        indices start at 0 in this file, they start at 1 in an Exodus
        file.
        """
        ...
    
    def SetTimeSteps(self, p_int, *float):
        """
        V.SetTimeSteps(int, [float, ...])
        C++: void SetTimeSteps(int numberOfTimeSteps,
            float *timeStepValues)
        
        Set the total number of time steps in the file, and the value at
        each time step.  We use your time step value array and delete it
        when we're done.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        The title of the dataset.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
