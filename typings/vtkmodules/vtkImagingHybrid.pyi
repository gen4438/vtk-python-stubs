"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

VTK_ACCUMULATION_MODE_MAX = ...
VTK_ACCUMULATION_MODE_MIN = ...
VTK_ACCUMULATION_MODE_SUM = ...
VTK_WIPE_HORIZONTAL = ...
VTK_WIPE_LOWER_LEFT = ...
VTK_WIPE_LOWER_RIGHT = ...
VTK_WIPE_QUAD = ...
VTK_WIPE_UPPER_LEFT = ...
VTK_WIPE_UPPER_RIGHT = ...
VTK_WIPE_VERTICAL = ...
class vtkBooleanTexture(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkBooleanTexture - generate 2D texture map based on combinations of
    inside, outside, and on region boundary
    
    Superclass: vtkImageAlgorithm
    
    vtkBooleanTexture is a filter to generate a 2D texture map based on
    combinations of inside, outside, and on region boundary. The "region"
    is implicitly represented via 2D texture coordinates. These texture
    coordinates are normally generated using a filter like
    vtkImplicitTextureCoords, which generates the texture coordinates for
    any implicit function.
    
    vtkBooleanTexture generates the map according to the s-t texture
    coordinates plus the notion of being in, on, or outside of a region.
    An in region is when the texture coordinate is between
    (0,0.5-thickness/2).  An out region is where the texture coordinate
    is (0.5+thickness/2). An on region is between
    (0.5-thickness/2,0.5+thickness/2). The combination in, on, and out
    for each of the s-t texture coordinates results in 16 possible
    combinations (see text). For each combination, a different value of
    intensity and transparency can be assigned. To assign maximum
    intensity and/or opacity use the value 255. A minimum value of 0
    results in a black region (for intensity) and a fully transparent
    region (for transparency).
    
    @sa
    vtkImplicitTextureCoords vtkThresholdTextureCoords
    """
    def GetInIn(self):
        """
        V.GetInIn() -> (int, int)
        C++: virtual unsigned char *GetInIn()
        
        Specify intensity/transparency for "in/in" region.
        """
        ...
    
    def GetInOn(self):
        """
        V.GetInOn() -> (int, int)
        C++: virtual unsigned char *GetInOn()
        
        Specify intensity/transparency for "in/on" region.
        """
        ...
    
    def GetInOut(self):
        """
        V.GetInOut() -> (int, int)
        C++: virtual unsigned char *GetInOut()
        
        Specify intensity/transparency for "in/out" region.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOnIn(self):
        """
        V.GetOnIn() -> (int, int)
        C++: virtual unsigned char *GetOnIn()
        
        Specify intensity/transparency for "on/in" region.
        """
        ...
    
    def GetOnOn(self):
        """
        V.GetOnOn() -> (int, int)
        C++: virtual unsigned char *GetOnOn()
        
        Specify intensity/transparency for "on/on" region.
        """
        ...
    
    def GetOnOut(self):
        """
        V.GetOnOut() -> (int, int)
        C++: virtual unsigned char *GetOnOut()
        
        Specify intensity/transparency for "on/out" region.
        """
        ...
    
    def GetOutIn(self):
        """
        V.GetOutIn() -> (int, int)
        C++: virtual unsigned char *GetOutIn()
        
        Specify intensity/transparency for "out/in" region.
        """
        ...
    
    def GetOutOn(self):
        """
        V.GetOutOn() -> (int, int)
        C++: virtual unsigned char *GetOutOn()
        
        Specify intensity/transparency for "out/on" region.
        """
        ...
    
    def GetOutOut(self):
        """
        V.GetOutOut() -> (int, int)
        C++: virtual unsigned char *GetOutOut()
        
        Specify intensity/transparency for "out/out" region.
        """
        ...
    
    def GetThickness(self):
        """
        V.GetThickness() -> int
        C++: virtual int GetThickness()
        
        Set the thickness of the "on" region.
        """
        ...
    
    def GetXSize(self):
        """
        V.GetXSize() -> int
        C++: virtual int GetXSize()
        
        Set the X texture map dimension.
        """
        ...
    
    def GetYSize(self):
        """
        V.GetYSize() -> int
        C++: virtual int GetYSize()
        
        Set the Y texture map dimension.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBooleanTexture
        C++: vtkBooleanTexture *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBooleanTexture
        C++: static vtkBooleanTexture *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInIn(self, p_int, p_int_1):
        """
        V.SetInIn(int, int)
        C++: virtual void SetInIn(unsigned char _arg1,
            unsigned char _arg2)
        V.SetInIn((int, int))
        C++: void SetInIn(const unsigned char _arg[2])
        
        Specify intensity/transparency for "in/in" region.
        """
        ...
    
    def SetInOn(self, p_int, p_int_1):
        """
        V.SetInOn(int, int)
        C++: virtual void SetInOn(unsigned char _arg1,
            unsigned char _arg2)
        V.SetInOn((int, int))
        C++: void SetInOn(const unsigned char _arg[2])
        
        Specify intensity/transparency for "in/on" region.
        """
        ...
    
    def SetInOut(self, p_int, p_int_1):
        """
        V.SetInOut(int, int)
        C++: virtual void SetInOut(unsigned char _arg1,
            unsigned char _arg2)
        V.SetInOut((int, int))
        C++: void SetInOut(const unsigned char _arg[2])
        
        Specify intensity/transparency for "in/out" region.
        """
        ...
    
    def SetOnIn(self, p_int, p_int_1):
        """
        V.SetOnIn(int, int)
        C++: virtual void SetOnIn(unsigned char _arg1,
            unsigned char _arg2)
        V.SetOnIn((int, int))
        C++: void SetOnIn(const unsigned char _arg[2])
        
        Specify intensity/transparency for "on/in" region.
        """
        ...
    
    def SetOnOn(self, p_int, p_int_1):
        """
        V.SetOnOn(int, int)
        C++: virtual void SetOnOn(unsigned char _arg1,
            unsigned char _arg2)
        V.SetOnOn((int, int))
        C++: void SetOnOn(const unsigned char _arg[2])
        
        Specify intensity/transparency for "on/on" region.
        """
        ...
    
    def SetOnOut(self, p_int, p_int_1):
        """
        V.SetOnOut(int, int)
        C++: virtual void SetOnOut(unsigned char _arg1,
            unsigned char _arg2)
        V.SetOnOut((int, int))
        C++: void SetOnOut(const unsigned char _arg[2])
        
        Specify intensity/transparency for "on/out" region.
        """
        ...
    
    def SetOutIn(self, p_int, p_int_1):
        """
        V.SetOutIn(int, int)
        C++: virtual void SetOutIn(unsigned char _arg1,
            unsigned char _arg2)
        V.SetOutIn((int, int))
        C++: void SetOutIn(const unsigned char _arg[2])
        
        Specify intensity/transparency for "out/in" region.
        """
        ...
    
    def SetOutOn(self, p_int, p_int_1):
        """
        V.SetOutOn(int, int)
        C++: virtual void SetOutOn(unsigned char _arg1,
            unsigned char _arg2)
        V.SetOutOn((int, int))
        C++: void SetOutOn(const unsigned char _arg[2])
        
        Specify intensity/transparency for "out/on" region.
        """
        ...
    
    def SetOutOut(self, p_int, p_int_1):
        """
        V.SetOutOut(int, int)
        C++: virtual void SetOutOut(unsigned char _arg1,
            unsigned char _arg2)
        V.SetOutOut((int, int))
        C++: void SetOutOut(const unsigned char _arg[2])
        
        Specify intensity/transparency for "out/out" region.
        """
        ...
    
    def SetThickness(self, p_int):
        """
        V.SetThickness(int)
        C++: virtual void SetThickness(int _arg)
        
        Set the thickness of the "on" region.
        """
        ...
    
    def SetXSize(self, p_int):
        """
        V.SetXSize(int)
        C++: virtual void SetXSize(int _arg)
        
        Set the X texture map dimension.
        """
        ...
    
    def SetYSize(self, p_int):
        """
        V.SetYSize(int)
        C++: virtual void SetYSize(int _arg)
        
        Set the Y texture map dimension.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCheckerboardSplatter(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkCheckerboardSplatter - splat points into a volume with an
    elliptical, Gaussian distribution
    
    Superclass: vtkImageAlgorithm
    
    vtkCheckerboardSplatter is a filter that injects input points into a
    structured points (volume) dataset using a multithreaded 8-way
    checkerboard approach. It produces a scalar field of a specified
    type. As each point is injected, it "splats" or distributes values to
    nearby voxels. Data is distributed using an elliptical, Gaussian
    distribution function. The distribution function is modified using
    scalar values (expands distribution) or normals (creates ellipsoidal
    distribution rather than spherical). This algorithm is designed for
    scalability through multithreading.
    
    In general, the Gaussian distribution function f(x) around a given
    splat point p is given by
    
    
        f(x) = ScaleFactor * exp( ExponentFactor*((r/Radius)**2) )
    
    where x is the current voxel sample point; r is the distance |x-p|
    ExponentFactor <= 0.0, and ScaleFactor can be multiplied by the
    scalar value of the point p that is currently being splatted.
    
    If point normals are present (and NormalWarping is on), then the
    splat function becomes elliptical (as compared to the spherical one
    described by the previous equation). The Gaussian distribution
    function then becomes:
    
    
        f(x) = ScaleFactor *
                  exp( ExponentFactor*( ((rxy/E)**2 + z**2)/R**2) )
    
    where E is a user-defined eccentricity factor that controls the
    elliptical shape of the splat; z is the distance of the current voxel
    sample point along normal N; and rxy is the distance of x in the
    direction prependicular to N.
    
    This class is typically used to convert point-valued distributions
    into a volume representation. The volume is then usually iso-surfaced
    or volume rendered to generate a visualization. It can be used to
    create surfaces from point distributions, or to create structure
    (i.e., topology) when none exists.
    
    This class makes use of vtkSMPTools to implement a parallel,
    shared-memory implementation. Hence performance will be significantly
    improved if VTK is built with VTK_SMP_IMPLEMENTATION_TYPE set to
    something other than "Sequential" (typically TBB). For example, on a
    standard laptop with four threads it is common to see a >10x speedup
    as compared to the serial version of vtkGaussianSplatter.
    
    In summary, the algorithm operates by dividing the volume into a 3D
    checkerboard, where the squares of the checkerboard overlay voxels in
    the volume. The checkerboard overlay is designed as a function of the
    splat footprint, so that when splatting occurs in a group (or color)
    of checkerboard squares, the splat operation will not cause write
    contention as the splatting proceeds in parallel. There are eight
    colors in this checkerboard (like an octree) and parallel splatting
    occurs simultaneously in one of the eight colors (e.g., octants). A
    single splat operation (across the given 3D footprint) may also be
    parallelized if the splat is large enough.
    
    @warning
    The input to this filter is of type vtkPointSet. Currently only real
    types (e.g., float, double) are supported as input, but this could
    easily be extended to other types. The output type is limited to real
    types as well.
    
    @warning
    Some voxels may never receive a contribution during the splatting
    process. The final value of these points can be specified with the
    "NullValue" instance variable. Note that NullValue is also the
    initial value of the output voxel values and will affect the
    accumulation process.
    
    @warning
    While this class is very similar to vtkGaussianSplatter, it does
    produce slightly different output in most cases (due to the way the
    footprint is computed).
    
    @sa
    vtkShepardMethod vtkGaussianSplatter
    """
    def CappingOff(self):
        """
        V.CappingOff()
        C++: virtual void CappingOff()
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def CappingOn(self):
        """
        V.CappingOn()
        C++: virtual void CappingOn()
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def ComputeModelBounds(self, vtkDataSet, vtkImageData, vtkInformation):
        """
        V.ComputeModelBounds(vtkDataSet, vtkImageData, vtkInformation)
        C++: void ComputeModelBounds(vtkDataSet *input,
            vtkImageData *output, vtkInformation *outInfo)
        
        Compute the size of the sample bounding box automatically from
        the input data. This is an internal helper function.
        """
        ...
    
    def GetAccumulationMode(self):
        """
        V.GetAccumulationMode() -> int
        C++: virtual int GetAccumulationMode()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def GetAccumulationModeAsString(self):
        """
        V.GetAccumulationModeAsString() -> string
        C++: const char *GetAccumulationModeAsString()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def GetAccumulationModeMaxValue(self):
        """
        V.GetAccumulationModeMaxValue() -> int
        C++: virtual int GetAccumulationModeMaxValue()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def GetAccumulationModeMinValue(self):
        """
        V.GetAccumulationModeMinValue() -> int
        C++: virtual int GetAccumulationModeMinValue()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def GetCapping(self):
        """
        V.GetCapping() -> int
        C++: virtual vtkTypeBool GetCapping()
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def GetCapValue(self):
        """
        V.GetCapValue() -> float
        C++: virtual double GetCapValue()
        
        Specify the cap value to use. (This instance variable only has
        effect if the ivar Capping is on.)
        """
        ...
    
    def GetEccentricity(self):
        """
        V.GetEccentricity() -> float
        C++: virtual double GetEccentricity()
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def GetEccentricityMaxValue(self):
        """
        V.GetEccentricityMaxValue() -> float
        C++: virtual double GetEccentricityMaxValue()
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def GetEccentricityMinValue(self):
        """
        V.GetEccentricityMinValue() -> float
        C++: virtual double GetEccentricityMinValue()
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def GetExponentFactor(self):
        """
        V.GetExponentFactor() -> float
        C++: virtual double GetExponentFactor()
        
        Set / get the sharpness of decay of the splats. This is the
        exponent constant in the Gaussian equation described above.
        Normally this is a negative value.
        """
        ...
    
    def GetFootprint(self):
        """
        V.GetFootprint() -> int
        C++: virtual int GetFootprint()
        
        Control the footprint size of the splat in terms of propagation
        across a voxel neighborhood. The Footprint value simply indicates
        the number of neighboring voxels in the i-j-k directions to
        extend the splat. A value of zero means that only the voxel
        containing the splat point is affected. A value of one means the
        immediate neighbors touching the affected voxel are affected as
        well. Larger numbers increase the splat footprint and
        significantly increase processing time. Note that the footprint
        is always 3D rectangular.
        """
        ...
    
    def GetFootprintMaxValue(self):
        """
        V.GetFootprintMaxValue() -> int
        C++: virtual int GetFootprintMaxValue()
        
        Control the footprint size of the splat in terms of propagation
        across a voxel neighborhood. The Footprint value simply indicates
        the number of neighboring voxels in the i-j-k directions to
        extend the splat. A value of zero means that only the voxel
        containing the splat point is affected. A value of one means the
        immediate neighbors touching the affected voxel are affected as
        well. Larger numbers increase the splat footprint and
        significantly increase processing time. Note that the footprint
        is always 3D rectangular.
        """
        ...
    
    def GetFootprintMinValue(self):
        """
        V.GetFootprintMinValue() -> int
        C++: virtual int GetFootprintMinValue()
        
        Control the footprint size of the splat in terms of propagation
        across a voxel neighborhood. The Footprint value simply indicates
        the number of neighboring voxels in the i-j-k directions to
        extend the splat. A value of zero means that only the voxel
        containing the splat point is affected. A value of one means the
        immediate neighbors touching the affected voxel are affected as
        well. Larger numbers increase the splat footprint and
        significantly increase processing time. Note that the footprint
        is always 3D rectangular.
        """
        ...
    
    def GetMaximumDimension(self):
        """
        V.GetMaximumDimension() -> int
        C++: virtual int GetMaximumDimension()
        
        Set/Get the maximum dimension of the checkerboard (i.e., the
        number of squares in any of the i, j, or k directions). This
        number also impacts the granularity of the parallel threading
        (since each checker square is processed separaely). Because of
        the internal addressing, the maximum dimension is limited to 255
        (maximum value of an unsigned char).
        """
        ...
    
    def GetMaximumDimensionMaxValue(self):
        """
        V.GetMaximumDimensionMaxValue() -> int
        C++: virtual int GetMaximumDimensionMaxValue()
        
        Set/Get the maximum dimension of the checkerboard (i.e., the
        number of squares in any of the i, j, or k directions). This
        number also impacts the granularity of the parallel threading
        (since each checker square is processed separaely). Because of
        the internal addressing, the maximum dimension is limited to 255
        (maximum value of an unsigned char).
        """
        ...
    
    def GetMaximumDimensionMinValue(self):
        """
        V.GetMaximumDimensionMinValue() -> int
        C++: virtual int GetMaximumDimensionMinValue()
        
        Set/Get the maximum dimension of the checkerboard (i.e., the
        number of squares in any of the i, j, or k directions). This
        number also impacts the granularity of the parallel threading
        (since each checker square is processed separaely). Because of
        the internal addressing, the maximum dimension is limited to 255
        (maximum value of an unsigned char).
        """
        ...
    
    def GetModelBounds(self):
        """
        V.GetModelBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetModelBounds()
        
        Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in
        which the sampling is performed. If any of the (min,max) bounds
        values are min >= max, then the bounds will be computed
        automatically from the input data. Otherwise, the user-specified
        bounds will be used.
        """
        ...
    
    def GetNormalWarping(self):
        """
        V.GetNormalWarping() -> int
        C++: virtual vtkTypeBool GetNormalWarping()
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def GetNullValue(self):
        """
        V.GetNullValue() -> float
        C++: virtual double GetNullValue()
        
        Set the Null value for output points not receiving a contribution
        from the input points. (This is the initial value of the voxel
        samples, by default it is set to zero.) Note that the value
        should be consistent with the output dataset type. The NullValue
        also provides the initial value on which the accumulations
        process operates.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        Set what type of scalar data this source should generate. Only
        double and float types are supported currently due to precision
        requirements during accumulation. By default, float scalars are
        produced.
        """
        ...
    
    def GetParallelSplatCrossover(self):
        """
        V.GetParallelSplatCrossover() -> int
        C++: virtual int GetParallelSplatCrossover()
        
        Set/get the crossover point expressed in footprint size where the
        splatting operation is parallelized (through vtkSMPTools). By
        default the parallel crossover point is for splat footprints of
        size two or greater (i.e., at footprint=2 then splat is 5x5x5 and
        parallel splatting occurs). This is really meant for experimental
        purposes.
        """
        ...
    
    def GetParallelSplatCrossoverMaxValue(self):
        """
        V.GetParallelSplatCrossoverMaxValue() -> int
        C++: virtual int GetParallelSplatCrossoverMaxValue()
        
        Set/get the crossover point expressed in footprint size where the
        splatting operation is parallelized (through vtkSMPTools). By
        default the parallel crossover point is for splat footprints of
        size two or greater (i.e., at footprint=2 then splat is 5x5x5 and
        parallel splatting occurs). This is really meant for experimental
        purposes.
        """
        ...
    
    def GetParallelSplatCrossoverMinValue(self):
        """
        V.GetParallelSplatCrossoverMinValue() -> int
        C++: virtual int GetParallelSplatCrossoverMinValue()
        
        Set/get the crossover point expressed in footprint size where the
        splatting operation is parallelized (through vtkSMPTools). By
        default the parallel crossover point is for splat footprints of
        size two or greater (i.e., at footprint=2 then splat is 5x5x5 and
        parallel splatting occurs). This is really meant for experimental
        purposes.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set / get the radius variable that controls the Gaussian
        exponential function (see equation above). If set to zero, it is
        automatically set to the radius of the circumsphere bounding a
        single voxel. (By default, the Radius is set to zero and is
        automatically computed.)
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set / get the radius variable that controls the Gaussian
        exponential function (see equation above). If set to zero, it is
        automatically set to the radius of the circumsphere bounding a
        single voxel. (By default, the Radius is set to zero and is
        automatically computed.)
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set / get the radius variable that controls the Gaussian
        exponential function (see equation above). If set to zero, it is
        automatically set to the radius of the circumsphere bounding a
        single voxel. (By default, the Radius is set to zero and is
        automatically computed.)
        """
        ...
    
    def GetSampleDimensions(self):
        """
        V.GetSampleDimensions() -> (int, int, int)
        C++: virtual int *GetSampleDimensions()
        
        Set / get the dimensions of the sampling structured point set.
        Higher values produce better results but may be much slower.
        """
        ...
    
    def GetScalarWarping(self):
        """
        V.GetScalarWarping() -> int
        C++: virtual vtkTypeBool GetScalarWarping()
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def GetScaleFactorMaxValue(self):
        """
        V.GetScaleFactorMaxValue() -> float
        C++: virtual double GetScaleFactorMaxValue()
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def GetScaleFactorMinValue(self):
        """
        V.GetScaleFactorMinValue() -> float
        C++: virtual double GetScaleFactorMinValue()
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCheckerboardSplatter
        C++: vtkCheckerboardSplatter *NewInstance()
        """
        ...
    
    def NormalWarpingOff(self):
        """
        V.NormalWarpingOff()
        C++: virtual void NormalWarpingOff()
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def NormalWarpingOn(self):
        """
        V.NormalWarpingOn()
        C++: virtual void NormalWarpingOn()
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCheckerboardSplatter
        C++: static vtkCheckerboardSplatter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def ScalarWarpingOff(self):
        """
        V.ScalarWarpingOff()
        C++: virtual void ScalarWarpingOff()
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def ScalarWarpingOn(self):
        """
        V.ScalarWarpingOn()
        C++: virtual void ScalarWarpingOn()
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def SetAccumulationMode(self, p_int):
        """
        V.SetAccumulationMode(int)
        C++: virtual void SetAccumulationMode(int _arg)
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def SetAccumulationModeToMax(self):
        """
        V.SetAccumulationModeToMax()
        C++: void SetAccumulationModeToMax()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def SetAccumulationModeToMin(self):
        """
        V.SetAccumulationModeToMin()
        C++: void SetAccumulationModeToMin()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def SetAccumulationModeToSum(self):
        """
        V.SetAccumulationModeToSum()
        C++: void SetAccumulationModeToSum()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats overlap one another. The
        Max mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird (and can potentially cause accumulation overflow in
        extreme cases). Note that the NullValue must be set consistent
        with the accumulation operation.
        """
        ...
    
    def SetCapping(self, p_int):
        """
        V.SetCapping(int)
        C++: virtual void SetCapping(vtkTypeBool _arg)
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def SetCapValue(self, p_float):
        """
        V.SetCapValue(float)
        C++: virtual void SetCapValue(double _arg)
        
        Specify the cap value to use. (This instance variable only has
        effect if the ivar Capping is on.)
        """
        ...
    
    def SetEccentricity(self, p_float):
        """
        V.SetEccentricity(float)
        C++: virtual void SetEccentricity(double _arg)
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def SetExponentFactor(self, p_float):
        """
        V.SetExponentFactor(float)
        C++: virtual void SetExponentFactor(double _arg)
        
        Set / get the sharpness of decay of the splats. This is the
        exponent constant in the Gaussian equation described above.
        Normally this is a negative value.
        """
        ...
    
    def SetFootprint(self, p_int):
        """
        V.SetFootprint(int)
        C++: virtual void SetFootprint(int _arg)
        
        Control the footprint size of the splat in terms of propagation
        across a voxel neighborhood. The Footprint value simply indicates
        the number of neighboring voxels in the i-j-k directions to
        extend the splat. A value of zero means that only the voxel
        containing the splat point is affected. A value of one means the
        immediate neighbors touching the affected voxel are affected as
        well. Larger numbers increase the splat footprint and
        significantly increase processing time. Note that the footprint
        is always 3D rectangular.
        """
        ...
    
    def SetMaximumDimension(self, p_int):
        """
        V.SetMaximumDimension(int)
        C++: virtual void SetMaximumDimension(int _arg)
        
        Set/Get the maximum dimension of the checkerboard (i.e., the
        number of squares in any of the i, j, or k directions). This
        number also impacts the granularity of the parallel threading
        (since each checker square is processed separaely). Because of
        the internal addressing, the maximum dimension is limited to 255
        (maximum value of an unsigned char).
        """
        ...
    
    def SetModelBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetModelBounds(float, float, float, float, float, float)
        C++: virtual void SetModelBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetModelBounds((float, float, float, float, float, float))
        C++: virtual void SetModelBounds(const double _arg[6])
        
        Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in
        which the sampling is performed. If any of the (min,max) bounds
        values are min >= max, then the bounds will be computed
        automatically from the input data. Otherwise, the user-specified
        bounds will be used.
        """
        ...
    
    def SetNormalWarping(self, p_int):
        """
        V.SetNormalWarping(int)
        C++: virtual void SetNormalWarping(vtkTypeBool _arg)
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def SetNullValue(self, p_float):
        """
        V.SetNullValue(float)
        C++: virtual void SetNullValue(double _arg)
        
        Set the Null value for output points not receiving a contribution
        from the input points. (This is the initial value of the voxel
        samples, by default it is set to zero.) Note that the value
        should be consistent with the output dataset type. The NullValue
        also provides the initial value on which the accumulations
        process operates.
        """
        ...
    
    def SetOutputScalarType(self, p_int):
        """
        V.SetOutputScalarType(int)
        C++: virtual void SetOutputScalarType(int _arg)
        
        Set what type of scalar data this source should generate. Only
        double and float types are supported currently due to precision
        requirements during accumulation. By default, float scalars are
        produced.
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        Set what type of scalar data this source should generate. Only
        double and float types are supported currently due to precision
        requirements during accumulation. By default, float scalars are
        produced.
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        Set what type of scalar data this source should generate. Only
        double and float types are supported currently due to precision
        requirements during accumulation. By default, float scalars are
        produced.
        """
        ...
    
    def SetParallelSplatCrossover(self, p_int):
        """
        V.SetParallelSplatCrossover(int)
        C++: virtual void SetParallelSplatCrossover(int _arg)
        
        Set/get the crossover point expressed in footprint size where the
        splatting operation is parallelized (through vtkSMPTools). By
        default the parallel crossover point is for splat footprints of
        size two or greater (i.e., at footprint=2 then splat is 5x5x5 and
        parallel splatting occurs). This is really meant for experimental
        purposes.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set / get the radius variable that controls the Gaussian
        exponential function (see equation above). If set to zero, it is
        automatically set to the radius of the circumsphere bounding a
        single voxel. (By default, the Radius is set to zero and is
        automatically computed.)
        """
        ...
    
    def SetSampleDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetSampleDimensions(int, int, int)
        C++: void SetSampleDimensions(int i, int j, int k)
        V.SetSampleDimensions([int, int, int])
        C++: void SetSampleDimensions(int dim[3])
        
        Set / get the dimensions of the sampling structured point set.
        Higher values produce better results but may be much slower.
        """
        ...
    
    def SetScalarWarping(self, p_int):
        """
        V.SetScalarWarping(int)
        C++: virtual void SetScalarWarping(vtkTypeBool _arg)
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFastSplatter(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkFastSplatter - A splatter optimized for splatting single kernels.
    
    Superclass: vtkImageAlgorithm
    
    vtkFastSplatter takes any vtkPointSet as input (of which vtkPolyData
    and vtkUnstructuredGrid inherit).  Each point in the data set is
    considered to be an impulse.  These impulses are convolved with a
    given splat image.  In other words, the splat image is added to the
    final image at every place where there is an input point.
    
    Note that point and cell data are thrown away.  If you want a
    sampling of unstructured points consider vtkGaussianSplatter or
    vtkShepardMethod.
    
    Use input port 0 for the impulse data (vtkPointSet), and input port 1
    for the splat image (vtkImageData)
    
    @bug Any point outside of the extents of the image is thrown away,
    even if it is close enough such that it's convolution with the splat
    image would overlap the extents.
    """
    def GetLimitMode(self):
        """
        V.GetLimitMode() -> int
        C++: virtual int GetLimitMode()
        
        Set/get the way voxel values will be limited.  If this is set to
        None (the default), the output can have arbitrarily large values.
         If set to clamp, the output will be clamped to
        [MinValue,MaxValue].  If set to scale, the output will be
        linearly scaled between MinValue and MaxValue.
        """
        ...
    
    def GetMaxValue(self):
        """
        V.GetMaxValue() -> float
        C++: virtual double GetMaxValue()
        
        See the LimitMode method.
        """
        ...
    
    def GetMinValue(self):
        """
        V.GetMinValue() -> float
        C++: virtual double GetMinValue()
        
        See the LimitMode method.
        """
        ...
    
    def GetModelBounds(self):
        """
        V.GetModelBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetModelBounds()
        
        Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in
        which the sampling is performed. If any of the (min,max) bounds
        values are min >= max, then the bounds will be computed
        automatically from the input data. Otherwise, the user-specified
        bounds will be used.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointsSplatted(self):
        """
        V.GetNumberOfPointsSplatted() -> int
        C++: virtual int GetNumberOfPointsSplatted()
        
        This returns the number of points splatted (as opposed to
        discarded for being outside the image) during the previous pass.
        """
        ...
    
    def GetOutputDimensions(self):
        """
        V.GetOutputDimensions() -> (int, int, int)
        C++: virtual int *GetOutputDimensions()
        
        Set/get the dimensions of the output image
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFastSplatter
        C++: vtkFastSplatter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFastSplatter
        C++: static vtkFastSplatter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLimitMode(self, p_int):
        """
        V.SetLimitMode(int)
        C++: virtual void SetLimitMode(int _arg)
        
        Set/get the way voxel values will be limited.  If this is set to
        None (the default), the output can have arbitrarily large values.
         If set to clamp, the output will be clamped to
        [MinValue,MaxValue].  If set to scale, the output will be
        linearly scaled between MinValue and MaxValue.
        """
        ...
    
    def SetLimitModeToClamp(self):
        """
        V.SetLimitModeToClamp()
        C++: void SetLimitModeToClamp()
        
        Set/get the way voxel values will be limited.  If this is set to
        None (the default), the output can have arbitrarily large values.
         If set to clamp, the output will be clamped to
        [MinValue,MaxValue].  If set to scale, the output will be
        linearly scaled between MinValue and MaxValue.
        """
        ...
    
    def SetLimitModeToFreezeScale(self):
        """
        V.SetLimitModeToFreezeScale()
        C++: void SetLimitModeToFreezeScale()
        
        Set/get the way voxel values will be limited.  If this is set to
        None (the default), the output can have arbitrarily large values.
         If set to clamp, the output will be clamped to
        [MinValue,MaxValue].  If set to scale, the output will be
        linearly scaled between MinValue and MaxValue.
        """
        ...
    
    def SetLimitModeToNone(self):
        """
        V.SetLimitModeToNone()
        C++: void SetLimitModeToNone()
        
        Set/get the way voxel values will be limited.  If this is set to
        None (the default), the output can have arbitrarily large values.
         If set to clamp, the output will be clamped to
        [MinValue,MaxValue].  If set to scale, the output will be
        linearly scaled between MinValue and MaxValue.
        """
        ...
    
    def SetLimitModeToScale(self):
        """
        V.SetLimitModeToScale()
        C++: void SetLimitModeToScale()
        
        Set/get the way voxel values will be limited.  If this is set to
        None (the default), the output can have arbitrarily large values.
         If set to clamp, the output will be clamped to
        [MinValue,MaxValue].  If set to scale, the output will be
        linearly scaled between MinValue and MaxValue.
        """
        ...
    
    def SetMaxValue(self, p_float):
        """
        V.SetMaxValue(float)
        C++: virtual void SetMaxValue(double _arg)
        
        See the LimitMode method.
        """
        ...
    
    def SetMinValue(self, p_float):
        """
        V.SetMinValue(float)
        C++: virtual void SetMinValue(double _arg)
        
        See the LimitMode method.
        """
        ...
    
    def SetModelBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetModelBounds(float, float, float, float, float, float)
        C++: virtual void SetModelBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetModelBounds((float, float, float, float, float, float))
        C++: virtual void SetModelBounds(const double _arg[6])
        
        Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in
        which the sampling is performed. If any of the (min,max) bounds
        values are min >= max, then the bounds will be computed
        automatically from the input data. Otherwise, the user-specified
        bounds will be used.
        """
        ...
    
    def SetOutputDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetOutputDimensions(int, int, int)
        C++: virtual void SetOutputDimensions(int _arg1, int _arg2,
            int _arg3)
        V.SetOutputDimensions((int, int, int))
        C++: virtual void SetOutputDimensions(const int _arg[3])
        
        Set/get the dimensions of the output image
        """
        ...
    
    def SetSplatConnection(self, vtkAlgorithmOutput):
        """
        V.SetSplatConnection(vtkAlgorithmOutput)
        C++: void SetSplatConnection(vtkAlgorithmOutput *)
        
        Convenience function for connecting the splat algorithm source.
        This is provided mainly for convenience using the filter with
        ParaView, VTK users should prefer SetInputConnection(1, splat)
        instead.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ClampLimit = ...
    FreezeScaleLimit = ...
    NoneLimit = ...
    ScaleLimit = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGaussianSplatter(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkGaussianSplatter - splat points into a volume with an elliptical,
    Gaussian distribution
    
    Superclass: vtkImageAlgorithm
    
    vtkGaussianSplatter is a filter that injects input points into a
    structured points (volume) dataset. As each point is injected, it
    "splats" or distributes values to nearby voxels. Data is distributed
    using an elliptical, Gaussian distribution function. The distribution
    function is modified using scalar values (expands distribution) or
    normals (creates ellipsoidal distribution rather than spherical).
    
    In general, the Gaussian distribution function f(x) around a given
    splat point p is given by
    
    
        f(x) = ScaleFactor * exp( ExponentFactor*((r/Radius)**2) )
    
    where x is the current voxel sample point; r is the distance |x-p|
    ExponentFactor <= 0.0, and ScaleFactor can be multiplied by the
    scalar value of the point p that is currently being splatted.
    
    If points normals are present (and NormalWarping is on), then the
    splat function becomes elliptical (as compared to the spherical one
    described by the previous equation). The Gaussian distribution
    function then becomes:
    
    
        f(x) = ScaleFactor *
                  exp( ExponentFactor*( ((rxy/E)**2 + z**2)/R**2) )
    
    where E is a user-defined eccentricity factor that controls the
    elliptical shape of the splat; z is the distance of the current voxel
    sample point along normal N; and rxy is the distance of x in the
    direction prependicular to N.
    
    This class is typically used to convert point-valued distributions
    into a volume representation. The volume is then usually iso-surfaced
    or volume rendered to generate a visualization. It can be used to
    create surfaces from point distributions, or to create structure
    (i.e., topology) when none exists.
    
    @warning
    The input to this filter is any dataset type. This filter can be used
    to resample any form of data, i.e., the input data need not be
    unstructured.
    
    @warning
    Some voxels may never receive a contribution during the splatting
    process. The final value of these points can be specified with the
    "NullValue" instance variable.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkShepardMethod vtkCheckerboardSplatter
    """
    def CappingOff(self):
        """
        V.CappingOff()
        C++: virtual void CappingOff()
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def CappingOn(self):
        """
        V.CappingOn()
        C++: virtual void CappingOn()
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def ComputeModelBounds(self, vtkDataSet, vtkImageData, vtkInformation):
        """
        V.ComputeModelBounds(vtkDataSet, vtkImageData, vtkInformation)
        C++: void ComputeModelBounds(vtkDataSet *input,
            vtkImageData *output, vtkInformation *outInfo)
        V.ComputeModelBounds(vtkCompositeDataSet, vtkImageData,
            vtkInformation)
        C++: void ComputeModelBounds(vtkCompositeDataSet *input,
            vtkImageData *output, vtkInformation *outInfo)
        
        Compute the size of the sample bounding box automatically from
        the input data. This is an internal helper function.
        """
        ...
    
    def GetAccumulationMode(self):
        """
        V.GetAccumulationMode() -> int
        C++: virtual int GetAccumulationMode()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def GetAccumulationModeAsString(self):
        """
        V.GetAccumulationModeAsString() -> string
        C++: const char *GetAccumulationModeAsString()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def GetAccumulationModeMaxValue(self):
        """
        V.GetAccumulationModeMaxValue() -> int
        C++: virtual int GetAccumulationModeMaxValue()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def GetAccumulationModeMinValue(self):
        """
        V.GetAccumulationModeMinValue() -> int
        C++: virtual int GetAccumulationModeMinValue()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def GetCapping(self):
        """
        V.GetCapping() -> int
        C++: virtual vtkTypeBool GetCapping()
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def GetCapValue(self):
        """
        V.GetCapValue() -> float
        C++: virtual double GetCapValue()
        
        Specify the cap value to use. (This instance variable only has
        effect if the ivar Capping is on.)
        """
        ...
    
    def GetEccentricity(self):
        """
        V.GetEccentricity() -> float
        C++: virtual double GetEccentricity()
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def GetEccentricityMaxValue(self):
        """
        V.GetEccentricityMaxValue() -> float
        C++: virtual double GetEccentricityMaxValue()
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def GetEccentricityMinValue(self):
        """
        V.GetEccentricityMinValue() -> float
        C++: virtual double GetEccentricityMinValue()
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def GetExponentFactor(self):
        """
        V.GetExponentFactor() -> float
        C++: virtual double GetExponentFactor()
        
        Set / get the sharpness of decay of the splats. This is the
        exponent constant in the Gaussian equation. Normally this is a
        negative value.
        """
        ...
    
    def GetModelBounds(self):
        """
        V.GetModelBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetModelBounds()
        
        Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in
        which the sampling is performed. If any of the (min,max) bounds
        values are min >= max, then the bounds will be computed
        automatically from the input data. Otherwise, the user-specified
        bounds will be used.
        """
        ...
    
    def GetNormalWarping(self):
        """
        V.GetNormalWarping() -> int
        C++: virtual vtkTypeBool GetNormalWarping()
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def GetNullValue(self):
        """
        V.GetNullValue() -> float
        C++: virtual double GetNullValue()
        
        Set the Null value for output points not receiving a contribution
        from the input points. (This is the initial value of the voxel
        samples.)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set / get the radius of propagation of the splat. This value is
        expressed as a percentage of the length of the longest side of
        the sampling volume. Smaller numbers greatly reduce execution
        time.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set / get the radius of propagation of the splat. This value is
        expressed as a percentage of the length of the longest side of
        the sampling volume. Smaller numbers greatly reduce execution
        time.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set / get the radius of propagation of the splat. This value is
        expressed as a percentage of the length of the longest side of
        the sampling volume. Smaller numbers greatly reduce execution
        time.
        """
        ...
    
    def GetSampleDimensions(self):
        """
        V.GetSampleDimensions() -> (int, int, int)
        C++: virtual int *GetSampleDimensions()
        
        Set / get the dimensions of the sampling structured point set.
        Higher values produce better results but are much slower.
        """
        ...
    
    def GetScalarWarping(self):
        """
        V.GetScalarWarping() -> int
        C++: virtual vtkTypeBool GetScalarWarping()
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def GetScaleFactorMaxValue(self):
        """
        V.GetScaleFactorMaxValue() -> float
        C++: virtual double GetScaleFactorMaxValue()
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def GetScaleFactorMinValue(self):
        """
        V.GetScaleFactorMinValue() -> float
        C++: virtual double GetScaleFactorMinValue()
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGaussianSplatter
        C++: vtkGaussianSplatter *NewInstance()
        """
        ...
    
    def NormalWarpingOff(self):
        """
        V.NormalWarpingOff()
        C++: virtual void NormalWarpingOff()
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def NormalWarpingOn(self):
        """
        V.NormalWarpingOn()
        C++: virtual void NormalWarpingOn()
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGaussianSplatter
        C++: static vtkGaussianSplatter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SamplePoint(self, p_float=..., p_float=..., p_float=...):
        """
        V.SamplePoint([float, float, float]) -> float
        C++: double SamplePoint(double x[3])
        
        Provide access to templated helper class. Note that SamplePoint()
        method is public here because some compilers don't handle friend
        functions properly.
        """
        ...
    
    def ScalarWarpingOff(self):
        """
        V.ScalarWarpingOff()
        C++: virtual void ScalarWarpingOff()
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def ScalarWarpingOn(self):
        """
        V.ScalarWarpingOn()
        C++: virtual void ScalarWarpingOn()
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def SetAccumulationMode(self, p_int):
        """
        V.SetAccumulationMode(int)
        C++: virtual void SetAccumulationMode(int _arg)
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def SetAccumulationModeToMax(self):
        """
        V.SetAccumulationModeToMax()
        C++: void SetAccumulationModeToMax()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def SetAccumulationModeToMin(self):
        """
        V.SetAccumulationModeToMin()
        C++: void SetAccumulationModeToMin()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def SetAccumulationModeToSum(self):
        """
        V.SetAccumulationModeToSum()
        C++: void SetAccumulationModeToSum()
        
        Specify the scalar accumulation mode. This mode expresses how
        scalar values are combined when splats are overlapped. The Max
        mode acts like a set union operation and is the most commonly
        used; the Min mode acts like a set intersection, and the sum is
        just weird.
        """
        ...
    
    def SetCapping(self, p_int):
        """
        V.SetCapping(int)
        C++: virtual void SetCapping(vtkTypeBool _arg)
        
        Turn on/off the capping of the outer boundary of the volume to a
        specified cap value. This can be used to close surfaces (after
        iso-surfacing) and create other effects.
        """
        ...
    
    def SetCapValue(self, p_float):
        """
        V.SetCapValue(float)
        C++: virtual void SetCapValue(double _arg)
        
        Specify the cap value to use. (This instance variable only has
        effect if the ivar Capping is on.)
        """
        ...
    
    def SetEccentricity(self, p_float):
        """
        V.SetEccentricity(float)
        C++: virtual void SetEccentricity(double _arg)
        
        Control the shape of elliptical splatting. Eccentricity is the
        ratio of the major axis (aligned along normal) to the minor
        (axes) aligned along other two axes. So Eccentricity > 1 creates
        needles with the long axis in the direction of the normal;
        Eccentricity<1 creates pancakes perpendicular to the normal
        vector.
        """
        ...
    
    def SetExponentFactor(self, p_float):
        """
        V.SetExponentFactor(float)
        C++: virtual void SetExponentFactor(double _arg)
        
        Set / get the sharpness of decay of the splats. This is the
        exponent constant in the Gaussian equation. Normally this is a
        negative value.
        """
        ...
    
    def SetModelBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetModelBounds(float, float, float, float, float, float)
        C++: virtual void SetModelBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetModelBounds((float, float, float, float, float, float))
        C++: virtual void SetModelBounds(const double _arg[6])
        
        Set / get the (xmin,xmax, ymin,ymax, zmin,zmax) bounding box in
        which the sampling is performed. If any of the (min,max) bounds
        values are min >= max, then the bounds will be computed
        automatically from the input data. Otherwise, the user-specified
        bounds will be used.
        """
        ...
    
    def SetNormalWarping(self, p_int):
        """
        V.SetNormalWarping(int)
        C++: virtual void SetNormalWarping(vtkTypeBool _arg)
        
        Turn on/off the generation of elliptical splats. If normal
        warping is on, then the input normals affect the distribution of
        the splat. This boolean is used in combination with the
        Eccentricity ivar.
        """
        ...
    
    def SetNullValue(self, p_float):
        """
        V.SetNullValue(float)
        C++: virtual void SetNullValue(double _arg)
        
        Set the Null value for output points not receiving a contribution
        from the input points. (This is the initial value of the voxel
        samples.)
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set / get the radius of propagation of the splat. This value is
        expressed as a percentage of the length of the longest side of
        the sampling volume. Smaller numbers greatly reduce execution
        time.
        """
        ...
    
    def SetSampleDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetSampleDimensions(int, int, int)
        C++: void SetSampleDimensions(int i, int j, int k)
        V.SetSampleDimensions([int, int, int])
        C++: void SetSampleDimensions(int dim[3])
        
        Set / get the dimensions of the sampling structured point set.
        Higher values produce better results but are much slower.
        """
        ...
    
    def SetScalar(self, p_int, p_float, *float):
        """
        V.SetScalar(int, float, [float, ...])
        C++: void SetScalar(vtkIdType idx, double dist2, double *sPtr)
        
        Provide access to templated helper class. Note that SamplePoint()
        method is public here because some compilers don't handle friend
        functions properly.
        """
        ...
    
    def SetScalarWarping(self, p_int):
        """
        V.SetScalarWarping(int)
        C++: virtual void SetScalarWarping(vtkTypeBool _arg)
        
        Turn on/off the scaling of splats by scalar value.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Multiply Gaussian splat distribution by this value. If
        ScalarWarping is on, then the Scalar value will be multiplied by
        the ScaleFactor times the Gaussian function.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageCursor3D(__vtkmodules_vtkCommonExecutionModel.vtkImageInPlaceFilter):
    """
    vtkImageCursor3D - Paints a cursor on top of an image or volume.
    
    Superclass: vtkImageInPlaceFilter
    
    vtkImageCursor3D will draw a cursor on a 2d image or 3d volume.
    """
    def GetCursorPosition(self):
        """
        V.GetCursorPosition() -> (float, float, float)
        C++: virtual double *GetCursorPosition()
        
        Sets/Gets the center point of the 3d cursor.
        """
        ...
    
    def GetCursorRadius(self):
        """
        V.GetCursorRadius() -> int
        C++: virtual int GetCursorRadius()
        
        Sets/Gets the radius of the cursor. The radius determines how far
        the axis lines project out from the cursors center.
        """
        ...
    
    def GetCursorValue(self):
        """
        V.GetCursorValue() -> float
        C++: virtual double GetCursorValue()
        
        Sets/Gets what pixel value to draw the cursor in.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageCursor3D
        C++: vtkImageCursor3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageCursor3D
        C++: static vtkImageCursor3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCursorPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetCursorPosition(float, float, float)
        C++: virtual void SetCursorPosition(double _arg1, double _arg2,
            double _arg3)
        V.SetCursorPosition((float, float, float))
        C++: virtual void SetCursorPosition(const double _arg[3])
        
        Sets/Gets the center point of the 3d cursor.
        """
        ...
    
    def SetCursorRadius(self, p_int):
        """
        V.SetCursorRadius(int)
        C++: virtual void SetCursorRadius(int _arg)
        
        Sets/Gets the radius of the cursor. The radius determines how far
        the axis lines project out from the cursors center.
        """
        ...
    
    def SetCursorValue(self, p_float):
        """
        V.SetCursorValue(float)
        C++: virtual void SetCursorValue(double _arg)
        
        Sets/Gets what pixel value to draw the cursor in.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageRectilinearWipe(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageRectilinearWipe - make a rectilinear combination of two
    images.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageRectilinearWipe makes a rectilinear combination of two
    images. The two input images must correspond in size, scalar type and
    number of components. The resulting image has four possible
    configurations called:
      Quad - alternate input 0 and input 1 horizontally and
        vertically. Select this with SetWipeModeToQuad. The Position
        specifies the location of the quad intersection.
      Corner - 3 of one input and 1 of the other. Select the location of
        input 0 with with SetWipeModeToLowerLeft,
    SetWipeModeToLowerRight,
        SetWipeModeToUpperLeft and SetWipeModeToUpperRight. The Position
        selects the location of the corner.
      Horizontal - alternate input 0 and input 1 with a vertical
        split. Select this with SetWipeModeToHorizontal. Position[0]
        specifies the location of the vertical transition between input 0
        and input 1.
      Vertical - alternate input 0 and input 1 with a horizontal
        split. Only the y The intersection point of the rectilinear
    points
        is controlled with the Point ivar.
    
    @par Thanks: This work was supported by PHS Research Grant No. 1 P41
    RR13218-01 from the National Center for Research Resources.
    
    @sa
    vtkImageCheckerboard
    """
    def GetAxis(self):
        """
        V.GetAxis() -> (int, int)
        C++: virtual int *GetAxis()
        
        Set/Get the location of the wipe axes. The default is X,Y (ie
        vector values of 0 and 1).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (int, int)
        C++: virtual int *GetPosition()
        
        Set/Get the location of the image transition. Note that position
        is specified in pixels.
        """
        ...
    
    def GetWipe(self):
        """
        V.GetWipe() -> int
        C++: virtual int GetWipe()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def GetWipeMaxValue(self):
        """
        V.GetWipeMaxValue() -> int
        C++: virtual int GetWipeMaxValue()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def GetWipeMinValue(self):
        """
        V.GetWipeMinValue() -> int
        C++: virtual int GetWipeMinValue()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageRectilinearWipe
        C++: vtkImageRectilinearWipe *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageRectilinearWipe
        C++: static vtkImageRectilinearWipe *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAxis(self, p_int, p_int_1):
        """
        V.SetAxis(int, int)
        C++: virtual void SetAxis(int _arg1, int _arg2)
        V.SetAxis((int, int))
        C++: void SetAxis(const int _arg[2])
        
        Set/Get the location of the wipe axes. The default is X,Y (ie
        vector values of 0 and 1).
        """
        ...
    
    def SetInput1Data(self, vtkDataObject):
        """
        V.SetInput1Data(vtkDataObject)
        C++: virtual void SetInput1Data(vtkDataObject *in)
        
        Set the two inputs to this filter.
        """
        ...
    
    def SetInput2Data(self, vtkDataObject):
        """
        V.SetInput2Data(vtkDataObject)
        C++: virtual void SetInput2Data(vtkDataObject *in)
        """
        ...
    
    def SetPosition(self, p_int, p_int_1):
        """
        V.SetPosition(int, int)
        C++: virtual void SetPosition(int _arg1, int _arg2)
        V.SetPosition((int, int))
        C++: void SetPosition(const int _arg[2])
        
        Set/Get the location of the image transition. Note that position
        is specified in pixels.
        """
        ...
    
    def SetWipe(self, p_int):
        """
        V.SetWipe(int)
        C++: virtual void SetWipe(int _arg)
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def SetWipeToHorizontal(self):
        """
        V.SetWipeToHorizontal()
        C++: void SetWipeToHorizontal()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def SetWipeToLowerLeft(self):
        """
        V.SetWipeToLowerLeft()
        C++: void SetWipeToLowerLeft()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def SetWipeToLowerRight(self):
        """
        V.SetWipeToLowerRight()
        C++: void SetWipeToLowerRight()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def SetWipeToQuad(self):
        """
        V.SetWipeToQuad()
        C++: void SetWipeToQuad()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def SetWipeToUpperLeft(self):
        """
        V.SetWipeToUpperLeft()
        C++: void SetWipeToUpperLeft()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def SetWipeToUpperRight(self):
        """
        V.SetWipeToUpperRight()
        C++: void SetWipeToUpperRight()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def SetWipeToVertical(self):
        """
        V.SetWipeToVertical()
        C++: void SetWipeToVertical()
        
        Specify the wipe mode. This mode determnis how input 0 and input
        1 are combined to produce the output. Each mode uses one or both
        of the values stored in Position. SetWipeToQuad - alternate input
        0 and input 1 horizontally and vertically. The Position specifies
        the location of the quad intersection.
        SetWipeToLowerLeft{LowerRight,UpperLeft.UpperRight} - 3 of one
        input and 1 of the other. Select the location of input 0 to the
        LowerLeft{LowerRight,UpperLeft,UpperRight}. Position selects the
        location of the corner. SetWipeToHorizontal - alternate input 0
        and input 1 with a vertical split. Position[0] specifies the
        location of the vertical transition between input 0 and input 1.
        SetWipeToVertical - alternate input 0 and input 1 with a
        horizontal split. Position[1] specifies the location of the
        horizontal transition between input 0 and input 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageToPoints(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkImageToPoints - Extract all image voxels as points.
    
    Superclass: vtkPolyDataAlgorithm
    
    This filter takes an input image and an optional stencil, and creates
    a vtkPolyData that contains the points and the point attributes but
    no cells.  If a stencil is provided, only the points inside the
    stencil are included.@par Thanks: Thanks to David Gobbi, Calgary
    Image Processing and Analysis Centre, University of Calgary, for
    providing this class.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set the desired precision for the output points. See
        vtkAlgorithm::DesiredOutputPrecision for the available choices.
        The default is double precision.
        """
        ...
    
    def GetStencilConnection(self):
        """
        V.GetStencilConnection() -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetStencilConnection()
        
        Only extract the points that lie within the stencil.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageToPoints
        C++: vtkImageToPoints *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageToPoints
        C++: static vtkImageToPoints *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set the desired precision for the output points. See
        vtkAlgorithm::DesiredOutputPrecision for the available choices.
        The default is double precision.
        """
        ...
    
    def SetStencilConnection(self, vtkAlgorithmOutput):
        """
        V.SetStencilConnection(vtkAlgorithmOutput)
        C++: void SetStencilConnection(vtkAlgorithmOutput *port)
        
        Only extract the points that lie within the stencil.
        """
        ...
    
    def SetStencilData(self, vtkImageStencilData):
        """
        V.SetStencilData(vtkImageStencilData)
        C++: void SetStencilData(vtkImageStencilData *stencil)
        
        Only extract the points that lie within the stencil.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPointLoad(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkPointLoad - compute stress tensors given point load on
    semi-infinite domain
    
    Superclass: vtkImageAlgorithm
    
    vtkPointLoad is a source object that computes stress tensors on a
    volume. The tensors are computed from the application of a point load
    on a semi-infinite domain. (The analytical results are adapted from
    Saada - see text.) It also is possible to compute effective stress
    scalars if desired. This object serves as a specialized data
    generator for some of the examples in the text.
    
    @sa
    vtkTensorGlyph, vtkHyperStreamline
    """
    def ComputeEffectiveStressOff(self):
        """
        V.ComputeEffectiveStressOff()
        C++: void ComputeEffectiveStressOff()
        """
        ...
    
    def ComputeEffectiveStressOn(self):
        """
        V.ComputeEffectiveStressOn()
        C++: void ComputeEffectiveStressOn()
        """
        ...
    
    def GetComputeEffectiveStress(self):
        """
        V.GetComputeEffectiveStress() -> int
        C++: int GetComputeEffectiveStress()
        """
        ...
    
    def GetLoadValue(self):
        """
        V.GetLoadValue() -> float
        C++: virtual double GetLoadValue()
        
        Set/Get value of applied load.
        """
        ...
    
    def GetModelBounds(self):
        """
        V.GetModelBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetModelBounds()
        
        Specify the region in space over which the tensors are computed.
        The point load is assumed to be applied at top center of the
        volume.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPoissonsRatio(self):
        """
        V.GetPoissonsRatio() -> float
        C++: virtual double GetPoissonsRatio()
        
        Set/Get Poisson's ratio.
        """
        ...
    
    def GetSampleDimensions(self):
        """
        V.GetSampleDimensions() -> (int, int, int)
        C++: virtual int *GetSampleDimensions()
        
        Specify the dimensions of the volume. A stress tensor will be
        computed for each point in the volume.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointLoad
        C++: vtkPointLoad *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointLoad
        C++: static vtkPointLoad *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComputeEffectiveStress(self, p_int):
        """
        V.SetComputeEffectiveStress(int)
        C++: void SetComputeEffectiveStress(int)
        
        Turn on/off computation of effective stress scalar. These methods
        do nothing. The effective stress is always computed.
        """
        ...
    
    def SetLoadValue(self, p_float):
        """
        V.SetLoadValue(float)
        C++: virtual void SetLoadValue(double _arg)
        
        Set/Get value of applied load.
        """
        ...
    
    def SetModelBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetModelBounds(float, float, float, float, float, float)
        C++: virtual void SetModelBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetModelBounds((float, float, float, float, float, float))
        C++: virtual void SetModelBounds(const double _arg[6])
        
        Specify the region in space over which the tensors are computed.
        The point load is assumed to be applied at top center of the
        volume.
        """
        ...
    
    def SetPoissonsRatio(self, p_float):
        """
        V.SetPoissonsRatio(float)
        C++: virtual void SetPoissonsRatio(double _arg)
        
        Set/Get Poisson's ratio.
        """
        ...
    
    def SetSampleDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetSampleDimensions(int, int, int)
        C++: void SetSampleDimensions(int i, int j, int k)
        V.SetSampleDimensions([int, int, int])
        C++: void SetSampleDimensions(int dim[3])
        
        Specify the dimensions of the volume. A stress tensor will be
        computed for each point in the volume.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSampleFunction(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkSampleFunction - sample an implicit function over a structured
    point set
    
    Superclass: vtkImageAlgorithm
    
    vtkSampleFunction is a source object that evaluates an implicit
    function and normals at each point in a vtkStructuredPoints. The user
    can specify the sample dimensions and location in space to perform
    the sampling. To create closed surfaces (in conjunction with the
    vtkContourFilter), capping can be turned on to set a particular value
    on the boundaries of the sample space.
    
    @sa
    vtkImplicitModeller
    """
    def CappingOff(self):
        """
        V.CappingOff()
        C++: virtual void CappingOff()
        
        Turn on/off capping. If capping is on, then the outer boundaries
        of the structured point set are set to cap value. This can be
        used to insure surfaces are closed.
        """
        ...
    
    def CappingOn(self):
        """
        V.CappingOn()
        C++: virtual void CappingOn()
        
        Turn on/off capping. If capping is on, then the outer boundaries
        of the structured point set are set to cap value. This can be
        used to insure surfaces are closed.
        """
        ...
    
    def ComputeNormalsOff(self):
        """
        V.ComputeNormalsOff()
        C++: virtual void ComputeNormalsOff()
        
        Turn on/off the computation of normals (normals are float
        values).
        """
        ...
    
    def ComputeNormalsOn(self):
        """
        V.ComputeNormalsOn()
        C++: virtual void ComputeNormalsOn()
        
        Turn on/off the computation of normals (normals are float
        values).
        """
        ...
    
    def GetCapping(self):
        """
        V.GetCapping() -> int
        C++: virtual vtkTypeBool GetCapping()
        
        Turn on/off capping. If capping is on, then the outer boundaries
        of the structured point set are set to cap value. This can be
        used to insure surfaces are closed.
        """
        ...
    
    def GetCapValue(self):
        """
        V.GetCapValue() -> float
        C++: virtual double GetCapValue()
        
        Set the cap value.
        """
        ...
    
    def GetComputeNormals(self):
        """
        V.GetComputeNormals() -> int
        C++: virtual vtkTypeBool GetComputeNormals()
        
        Turn on/off the computation of normals (normals are float
        values).
        """
        ...
    
    def GetImplicitFunction(self):
        """
        V.GetImplicitFunction() -> vtkImplicitFunction
        C++: virtual vtkImplicitFunction *GetImplicitFunction()
        
        Specify the implicit function to use to generate data.
        """
        ...
    
    def GetModelBounds(self):
        """
        V.GetModelBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetModelBounds()
        
        Specify the region in space over which the sampling occurs. The
        bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the implicit function.
        """
        ...
    
    def GetNormalArrayName(self):
        """
        V.GetNormalArrayName() -> string
        C++: virtual char *GetNormalArrayName()
        
        Set/get the normal array name for this data set. Initial value is
        "normals".
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def GetSampleDimensions(self):
        """
        V.GetSampleDimensions() -> (int, int, int)
        C++: virtual int *GetSampleDimensions()
        
        Specify the dimensions of the data on which to sample.
        """
        ...
    
    def GetScalarArrayName(self):
        """
        V.GetScalarArrayName() -> string
        C++: virtual char *GetScalarArrayName()
        
        Set/get the scalar array name for this data set. Initial value is
        "scalars".
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSampleFunction
        C++: vtkSampleFunction *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSampleFunction
        C++: static vtkSampleFunction *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCapping(self, p_int):
        """
        V.SetCapping(int)
        C++: virtual void SetCapping(vtkTypeBool _arg)
        
        Turn on/off capping. If capping is on, then the outer boundaries
        of the structured point set are set to cap value. This can be
        used to insure surfaces are closed.
        """
        ...
    
    def SetCapValue(self, p_float):
        """
        V.SetCapValue(float)
        C++: virtual void SetCapValue(double _arg)
        
        Set the cap value.
        """
        ...
    
    def SetComputeNormals(self, p_int):
        """
        V.SetComputeNormals(int)
        C++: virtual void SetComputeNormals(vtkTypeBool _arg)
        
        Turn on/off the computation of normals (normals are float
        values).
        """
        ...
    
    def SetImplicitFunction(self, vtkImplicitFunction):
        """
        V.SetImplicitFunction(vtkImplicitFunction)
        C++: virtual void SetImplicitFunction(vtkImplicitFunction *)
        
        Specify the implicit function to use to generate data.
        """
        ...
    
    def SetModelBounds(self, ):
        """
        V.SetModelBounds((float, float, float, float, float, float))
        C++: void SetModelBounds(const double bounds[6])
        V.SetModelBounds(float, float, float, float, float, float)
        C++: void SetModelBounds(double xMin, double xMax, double yMin,
            double yMax, double zMin, double zMax)
        
        Specify the region in space over which the sampling occurs. The
        bounds is specified as (xMin,xMax, yMin,yMax, zMin,zMax).
        """
        ...
    
    def SetNormalArrayName(self, string):
        """
        V.SetNormalArrayName(string)
        C++: virtual void SetNormalArrayName(const char *_arg)
        
        Set/get the normal array name for this data set. Initial value is
        "normals".
        """
        ...
    
    def SetOutputScalarType(self, p_int):
        """
        V.SetOutputScalarType(int)
        C++: virtual void SetOutputScalarType(int _arg)
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToChar(self):
        """
        V.SetOutputScalarTypeToChar()
        C++: void SetOutputScalarTypeToChar()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToInt(self):
        """
        V.SetOutputScalarTypeToInt()
        C++: void SetOutputScalarTypeToInt()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToLong(self):
        """
        V.SetOutputScalarTypeToLong()
        C++: void SetOutputScalarTypeToLong()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToShort(self):
        """
        V.SetOutputScalarTypeToShort()
        C++: void SetOutputScalarTypeToShort()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedChar(self):
        """
        V.SetOutputScalarTypeToUnsignedChar()
        C++: void SetOutputScalarTypeToUnsignedChar()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedInt(self):
        """
        V.SetOutputScalarTypeToUnsignedInt()
        C++: void SetOutputScalarTypeToUnsignedInt()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedLong(self):
        """
        V.SetOutputScalarTypeToUnsignedLong()
        C++: void SetOutputScalarTypeToUnsignedLong()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedShort(self):
        """
        V.SetOutputScalarTypeToUnsignedShort()
        C++: void SetOutputScalarTypeToUnsignedShort()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetSampleDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetSampleDimensions(int, int, int)
        C++: void SetSampleDimensions(int i, int j, int k)
        V.SetSampleDimensions([int, int, int])
        C++: void SetSampleDimensions(int dim[3])
        
        Specify the dimensions of the data on which to sample.
        """
        ...
    
    def SetScalarArrayName(self, string):
        """
        V.SetScalarArrayName(string)
        C++: virtual void SetScalarArrayName(const char *_arg)
        
        Set/get the scalar array name for this data set. Initial value is
        "scalars".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkShepardMethod(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkShepardMethod - interpolate points and associated scalars onto
    volume using the method of Shepard
    
    Superclass: vtkImageAlgorithm
    
    vtkShepardMethod is a filter used to interpolate point scalar values
    using Shepard's method. The method works by resampling the scalars
    associated with points defined on an arbitrary dataset onto a volume
    (i.e., structured points) dataset. The influence functions are
    described as "inverse distance weighted". Once the interpolation is
    performed across the volume, the usual volume visualization
    techniques (e.g., iso-contouring or volume rendering) can be used.
    
    Note that this implementation also provides the ability to specify
    the power parameter p. Given the generalized Inverse Distance
    Weighting (IDW) function with distance between points measured as
    d(x,xi), p is defined as:
    
    u(x) = Sum(wi(x) * ui) / Sum(wi(x)) if d(x,xi) != 0 u(x) = ui        
                      if d(x,xi) == 0
    
    where wi(x) = 1 / (d(x,xi)^p  Typically p=2, so the weights wi(x) are
    the inverse of the distance squared. However, power parameters > 2
    can be used which assign higher weights for data closer to the
    interpolated point; or <2 which assigns greater weight to points
    further away. (Note that if p!=2, performance may be significantly
    impacted as the algorithm is tuned for p=2.)
    
    @warning
    Strictly speaking, this is a modified Shepard's methodsince only
    points within the MaxiumDistance are used for interpolation. By
    setting the maximum distance to include the entire bounding box and
    therefore all points, the class executes much slower but incorporates
    all points into the interpolation process (i.e., a pure Shepard
    method).
    
    @warning
    The input to this filter is any dataset type. This filter can be used
    to resample the points of any type of dataset onto the output volume;
    i.e., the input data need not be unstructured with explicit point
    representations.
    
    @warning
    The bounds of the data (i.e., the sample space) is automatically
    computed if not set by the user.
    
    @warning
    If you use a maximum distance less than 1.0 (i.e., using a modified
    Shephard's method), some output points may never receive a
    contribution. The final value of these points can be specified with
    the "NullValue" instance variable.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkGaussianSplatter vtkCheckerboardSplatter
    """
    def ComputeModelBounds(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeModelBounds([float, float, float], [float, float, float])
             -> float
        C++: double ComputeModelBounds(double origin[3], double ar[3])
        
        Compute ModelBounds from the input geometry.
        """
        ...
    
    def GetMaximumDistance(self):
        """
        V.GetMaximumDistance() -> float
        C++: virtual double GetMaximumDistance()
        
        Specify the maximum influence distance of each input point. This
        distance is a fraction of the length of the diagonal of the
        sample space. Thus, values of 1.0 will cause each input point to
        influence all points in the volume dataset. Values less than 1.0
        can improve performance significantly. By default the maximum
        distance is 0.25.
        """
        ...
    
    def GetMaximumDistanceMaxValue(self):
        """
        V.GetMaximumDistanceMaxValue() -> float
        C++: virtual double GetMaximumDistanceMaxValue()
        
        Specify the maximum influence distance of each input point. This
        distance is a fraction of the length of the diagonal of the
        sample space. Thus, values of 1.0 will cause each input point to
        influence all points in the volume dataset. Values less than 1.0
        can improve performance significantly. By default the maximum
        distance is 0.25.
        """
        ...
    
    def GetMaximumDistanceMinValue(self):
        """
        V.GetMaximumDistanceMinValue() -> float
        C++: virtual double GetMaximumDistanceMinValue()
        
        Specify the maximum influence distance of each input point. This
        distance is a fraction of the length of the diagonal of the
        sample space. Thus, values of 1.0 will cause each input point to
        influence all points in the volume dataset. Values less than 1.0
        can improve performance significantly. By default the maximum
        distance is 0.25.
        """
        ...
    
    def GetModelBounds(self):
        """
        V.GetModelBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetModelBounds()
        
        Specify the position in space to perform the sampling. The
        ModelBounds and SampleDimensions together define the output
        volume. (Note: if the ModelBounds are set to an invalid state
        [zero or negative volume] then the bounds are computed
        automatically.)
        """
        ...
    
    def GetNullValue(self):
        """
        V.GetNullValue() -> float
        C++: virtual double GetNullValue()
        
        Set the value for output points not receiving a contribution from
        any input point(s). Output points may not receive a contribution
        when the MaximumDistance < 1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard type and print methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def GetPowerParameter(self):
        """
        V.GetPowerParameter() -> float
        C++: virtual double GetPowerParameter()
        
        Set / Get the power parameter p. By default p=2. Values (which
        must be a positive, real value) != 2 may affect performance
        significantly.
        """
        ...
    
    def GetPowerParameterMaxValue(self):
        """
        V.GetPowerParameterMaxValue() -> float
        C++: virtual double GetPowerParameterMaxValue()
        
        Set / Get the power parameter p. By default p=2. Values (which
        must be a positive, real value) != 2 may affect performance
        significantly.
        """
        ...
    
    def GetPowerParameterMinValue(self):
        """
        V.GetPowerParameterMinValue() -> float
        C++: virtual double GetPowerParameterMinValue()
        
        Set / Get the power parameter p. By default p=2. Values (which
        must be a positive, real value) != 2 may affect performance
        significantly.
        """
        ...
    
    def GetSampleDimensions(self):
        """
        V.GetSampleDimensions() -> (int, int, int)
        C++: virtual int *GetSampleDimensions()
        
        Retrieve the i-j-k dimensions on which to interpolate the input
        points.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard type and print methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkShepardMethod
        C++: vtkShepardMethod *NewInstance()
        
        Standard type and print methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkShepardMethod
        C++: static vtkShepardMethod *SafeDownCast(vtkObjectBase *o)
        
        Standard type and print methods.
        """
        ...
    
    def SetMaximumDistance(self, p_float):
        """
        V.SetMaximumDistance(float)
        C++: virtual void SetMaximumDistance(double _arg)
        
        Specify the maximum influence distance of each input point. This
        distance is a fraction of the length of the diagonal of the
        sample space. Thus, values of 1.0 will cause each input point to
        influence all points in the volume dataset. Values less than 1.0
        can improve performance significantly. By default the maximum
        distance is 0.25.
        """
        ...
    
    def SetModelBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetModelBounds(float, float, float, float, float, float)
        C++: virtual void SetModelBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetModelBounds((float, float, float, float, float, float))
        C++: virtual void SetModelBounds(const double _arg[6])
        
        Specify the position in space to perform the sampling. The
        ModelBounds and SampleDimensions together define the output
        volume. (Note: if the ModelBounds are set to an invalid state
        [zero or negative volume] then the bounds are computed
        automatically.)
        """
        ...
    
    def SetNullValue(self, p_float):
        """
        V.SetNullValue(float)
        C++: virtual void SetNullValue(double _arg)
        
        Set the value for output points not receiving a contribution from
        any input point(s). Output points may not receive a contribution
        when the MaximumDistance < 1.
        """
        ...
    
    def SetPowerParameter(self, p_float):
        """
        V.SetPowerParameter(float)
        C++: virtual void SetPowerParameter(double _arg)
        
        Set / Get the power parameter p. By default p=2. Values (which
        must be a positive, real value) != 2 may affect performance
        significantly.
        """
        ...
    
    def SetSampleDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetSampleDimensions(int, int, int)
        C++: void SetSampleDimensions(int i, int j, int k)
        V.SetSampleDimensions([int, int, int])
        C++: void SetSampleDimensions(int dim[3])
        
        Set the i-j-k dimensions on which to interpolate the input
        points.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSliceCubes(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkSliceCubes - generate isosurface(s) from volume four slices at a
    time
    
    Superclass: vtkObject
    
    vtkSliceCubes is a special version of the marching cubes filter.
    Instead of ingesting an entire volume at once it processes only four
    slices at a time. This way, it can generate isosurfaces from huge
    volumes. Also, the output of this object is written to a marching
    cubes triangle file. That way, output triangles do not need to be
    held in memory.
    
    To use vtkSliceCubes you must specify an instance of vtkVolumeReader
    to read the data. Set this object up with the proper file prefix,
    image range, data origin, data dimensions, header size, data mask,
    and swap bytes flag. The vtkSliceCubes object will then take over and
    read slices as necessary. You also will need to specify the name of
    an output marching cubes triangle file.
    
    @warning
    This process object is both a source and mapper (i.e., it reads and
    writes data to a file). This is different than the other marching
    cubes objects (and most process objects in the system). It's
    specialized to handle very large data.
    
    @warning
    This object only extracts a single isosurface. This compares with the
    other contouring objects in vtk that generate multiple surfaces.
    
    @warning
    To read the output file use vtkMCubesReader.
    
    @sa
    vtkMarchingCubes vtkContourFilter vtkMCubesReader vtkDividingCubes
    vtkVolumeReader
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of marching cubes output file.
        """
        ...
    
    def GetLimitsFileName(self):
        """
        V.GetLimitsFileName() -> string
        C++: virtual char *GetLimitsFileName()
        
        Specify file name of marching cubes limits file. The limits file
        speeds up subsequent reading of output triangle file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReader(self):
        """
        V.GetReader() -> vtkVolumeReader
        C++: virtual vtkVolumeReader *GetReader()
        
        Set/get object to read slices.
        """
        ...
    
    def GetValue(self):
        """
        V.GetValue() -> float
        C++: virtual double GetValue()
        
        Set/get isosurface contour value.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSliceCubes
        C++: vtkSliceCubes *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSliceCubes
        C++: static vtkSliceCubes *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of marching cubes output file.
        """
        ...
    
    def SetLimitsFileName(self, string):
        """
        V.SetLimitsFileName(string)
        C++: virtual void SetLimitsFileName(const char *_arg)
        
        Specify file name of marching cubes limits file. The limits file
        speeds up subsequent reading of output triangle file.
        """
        ...
    
    def SetReader(self, vtkVolumeReader):
        """
        V.SetReader(vtkVolumeReader)
        C++: virtual void SetReader(vtkVolumeReader *)
        
        Set/get object to read slices.
        """
        ...
    
    def SetValue(self, p_float):
        """
        V.SetValue(float)
        C++: virtual void SetValue(double _arg)
        
        Set/get isosurface contour value.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update()
        """
        ...
    
    def Write(self):
        """
        V.Write()
        C++: void Write()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSurfaceReconstructionFilter(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkSurfaceReconstructionFilter - reconstructs a surface from
    unorganized points
    
    Superclass: vtkImageAlgorithm
    
    vtkSurfaceReconstructionFilter takes a list of points assumed to lie
    on the surface of a solid 3D object. A signed measure of the distance
    to the surface is computed and sampled on a regular grid. The grid
    can then be contoured at zero to extract the surface. The default
    values for neighborhood size and sample spacing should give
    reasonable results for most uses but can be set if desired. This
    procedure is based on the PhD work of Hugues Hoppe:
    http://www.research.microsoft.com/~hoppe
    """
    def GetNeighborhoodSize(self):
        """
        V.GetNeighborhoodSize() -> int
        C++: virtual int GetNeighborhoodSize()
        
        Specify the number of neighbors each point has, used for
        estimating the local surface orientation.  The default value of
        20 should be OK for most applications, higher values can be
        specified if the spread of points is uneven. Values as low as 10
        may yield adequate results for some surfaces. Higher values cause
        the algorithm to take longer. Higher values will cause errors on
        sharp boundaries.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSampleSpacing(self):
        """
        V.GetSampleSpacing() -> float
        C++: virtual double GetSampleSpacing()
        
        Specify the spacing of the 3D sampling grid. If not set, a
        reasonable guess will be made.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSurfaceReconstructionFilter
        C++: vtkSurfaceReconstructionFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSurfaceReconstructionFilter
        C++: static vtkSurfaceReconstructionFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetNeighborhoodSize(self, p_int):
        """
        V.SetNeighborhoodSize(int)
        C++: virtual void SetNeighborhoodSize(int _arg)
        
        Specify the number of neighbors each point has, used for
        estimating the local surface orientation.  The default value of
        20 should be OK for most applications, higher values can be
        specified if the spread of points is uneven. Values as low as 10
        may yield adequate results for some surfaces. Higher values cause
        the algorithm to take longer. Higher values will cause errors on
        sharp boundaries.
        """
        ...
    
    def SetSampleSpacing(self, p_float):
        """
        V.SetSampleSpacing(float)
        C++: virtual void SetSampleSpacing(double _arg)
        
        Specify the spacing of the 3D sampling grid. If not set, a
        reasonable guess will be made.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTriangularTexture(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkTriangularTexture - generate 2D triangular texture map
    
    Superclass: vtkImageAlgorithm
    
    vtkTriangularTexture is a filter that generates a 2D texture map
    based on the paper "Opacity-modulating Triangular Textures for Irregular
    Surfaces," by Penny Rheingans, IEEE Visualization '96, pp. 219-225.
    The textures assume texture coordinates of (0,0), (1.0) and (.5,
    sqrt(3)/2). The sequence of texture values is the same along each
    edge of the triangular texture map. So, the assignment order of
    texture coordinates is arbitrary.
    
    @sa
    vtkTriangularTCoords
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Set a Scale Factor.
        """
        ...
    
    def GetTexturePattern(self):
        """
        V.GetTexturePattern() -> int
        C++: virtual int GetTexturePattern()
        
        Set the texture pattern. 1 = opaque at centroid (default) 2 =
        opaque at vertices 3 = opaque in rings around vertices
        """
        ...
    
    def GetTexturePatternMaxValue(self):
        """
        V.GetTexturePatternMaxValue() -> int
        C++: virtual int GetTexturePatternMaxValue()
        
        Set the texture pattern. 1 = opaque at centroid (default) 2 =
        opaque at vertices 3 = opaque in rings around vertices
        """
        ...
    
    def GetTexturePatternMinValue(self):
        """
        V.GetTexturePatternMinValue() -> int
        C++: virtual int GetTexturePatternMinValue()
        
        Set the texture pattern. 1 = opaque at centroid (default) 2 =
        opaque at vertices 3 = opaque in rings around vertices
        """
        ...
    
    def GetXSize(self):
        """
        V.GetXSize() -> int
        C++: virtual int GetXSize()
        
        Set the X texture map dimension. Default is 64.
        """
        ...
    
    def GetYSize(self):
        """
        V.GetYSize() -> int
        C++: virtual int GetYSize()
        
        Set the Y texture map dimension. Default is 64.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTriangularTexture
        C++: vtkTriangularTexture *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTriangularTexture
        C++: static vtkTriangularTexture *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Set a Scale Factor.
        """
        ...
    
    def SetTexturePattern(self, p_int):
        """
        V.SetTexturePattern(int)
        C++: virtual void SetTexturePattern(int _arg)
        
        Set the texture pattern. 1 = opaque at centroid (default) 2 =
        opaque at vertices 3 = opaque in rings around vertices
        """
        ...
    
    def SetXSize(self, p_int):
        """
        V.SetXSize(int)
        C++: virtual void SetXSize(int _arg)
        
        Set the X texture map dimension. Default is 64.
        """
        ...
    
    def SetYSize(self, p_int):
        """
        V.SetYSize(int)
        C++: virtual void SetYSize(int _arg)
        
        Set the Y texture map dimension. Default is 64.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkVoxelModeller(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkVoxelModeller - convert an arbitrary dataset to a voxel
    representation
    
    Superclass: vtkImageAlgorithm
    
    vtkVoxelModeller is a filter that converts an arbitrary data set to a
    structured point (i.e., voxel) representation. It is very similar to
    vtkImplicitModeller, except that it doesn't record distance; instead
    it records occupancy. By default it supports a compact output of 0/1
    VTK_BIT. Other vtk scalar types can be specified. The Foreground and
    Background values of the output can also be specified. NOTE: Not all
    vtk filters/readers/writers support the VTK_BIT scalar type. You may
    want to use VTK_CHAR as an alternative.
    @sa
    vtkImplicitModeller
    """
    def ComputeModelBounds(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeModelBounds([float, float, float], [float, float, float])
             -> float
        C++: double ComputeModelBounds(double origin[3], double ar[3])
        
        Compute the ModelBounds based on the input geometry.
        """
        ...
    
    def GetBackgroundValue(self):
        """
        V.GetBackgroundValue() -> float
        C++: virtual double GetBackgroundValue()
        
        Set the Foreground/Background values of the output. The
        Foreground value is set when a voxel is occupied. The Background
        value is set when a voxel is not occupied. The default
        ForegroundValue is 1. The default BackgroundValue is 0.
        """
        ...
    
    def GetForegroundValue(self):
        """
        V.GetForegroundValue() -> float
        C++: virtual double GetForegroundValue()
        
        Set the Foreground/Background values of the output. The
        Foreground value is set when a voxel is occupied. The Background
        value is set when a voxel is not occupied. The default
        ForegroundValue is 1. The default BackgroundValue is 0.
        """
        ...
    
    def GetMaximumDistance(self):
        """
        V.GetMaximumDistance() -> float
        C++: virtual double GetMaximumDistance()
        
        Specify distance away from surface of input geometry to sample.
        Smaller values make large increases in performance. Default is
        1.0.
        """
        ...
    
    def GetMaximumDistanceMaxValue(self):
        """
        V.GetMaximumDistanceMaxValue() -> float
        C++: virtual double GetMaximumDistanceMaxValue()
        
        Specify distance away from surface of input geometry to sample.
        Smaller values make large increases in performance. Default is
        1.0.
        """
        ...
    
    def GetMaximumDistanceMinValue(self):
        """
        V.GetMaximumDistanceMinValue() -> float
        C++: virtual double GetMaximumDistanceMinValue()
        
        Specify distance away from surface of input geometry to sample.
        Smaller values make large increases in performance. Default is
        1.0.
        """
        ...
    
    def GetModelBounds(self):
        """
        V.GetModelBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetModelBounds()
        
        Specify the position in space to perform the voxelization.
        Default is (0, 0, 0, 0, 0, 0)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSampleDimensions(self):
        """
        V.GetSampleDimensions() -> (int, int, int)
        C++: virtual int *GetSampleDimensions()
        
        Set the i-j-k dimensions on which to sample the distance
        function. Default is (50, 50, 50)
        """
        ...
    
    def GetScalarType(self):
        """
        V.GetScalarType() -> int
        C++: virtual int GetScalarType()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVoxelModeller
        C++: vtkVoxelModeller *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVoxelModeller
        C++: static vtkVoxelModeller *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBackgroundValue(self, p_float):
        """
        V.SetBackgroundValue(float)
        C++: virtual void SetBackgroundValue(double _arg)
        
        Set the Foreground/Background values of the output. The
        Foreground value is set when a voxel is occupied. The Background
        value is set when a voxel is not occupied. The default
        ForegroundValue is 1. The default BackgroundValue is 0.
        """
        ...
    
    def SetForegroundValue(self, p_float):
        """
        V.SetForegroundValue(float)
        C++: virtual void SetForegroundValue(double _arg)
        
        Set the Foreground/Background values of the output. The
        Foreground value is set when a voxel is occupied. The Background
        value is set when a voxel is not occupied. The default
        ForegroundValue is 1. The default BackgroundValue is 0.
        """
        ...
    
    def SetMaximumDistance(self, p_float):
        """
        V.SetMaximumDistance(float)
        C++: virtual void SetMaximumDistance(double _arg)
        
        Specify distance away from surface of input geometry to sample.
        Smaller values make large increases in performance. Default is
        1.0.
        """
        ...
    
    def SetModelBounds(self, ):
        """
        V.SetModelBounds((float, float, float, float, float, float))
        C++: void SetModelBounds(const double bounds[6])
        V.SetModelBounds(float, float, float, float, float, float)
        C++: void SetModelBounds(double xmin, double xmax, double ymin,
            double ymax, double zmin, double zmax)
        
        Specify the position in space to perform the voxelization.
        Default is (0, 0, 0, 0, 0, 0)
        """
        ...
    
    def SetSampleDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetSampleDimensions(int, int, int)
        C++: void SetSampleDimensions(int i, int j, int k)
        V.SetSampleDimensions([int, int, int])
        C++: void SetSampleDimensions(int dim[3])
        
        Set the i-j-k dimensions on which to sample the distance
        function. Default is (50, 50, 50)
        """
        ...
    
    def SetScalarType(self, p_int):
        """
        V.SetScalarType(int)
        C++: virtual void SetScalarType(int _arg)
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToBit(self):
        """
        V.SetScalarTypeToBit()
        C++: void SetScalarTypeToBit()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToChar(self):
        """
        V.SetScalarTypeToChar()
        C++: void SetScalarTypeToChar()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToDouble(self):
        """
        V.SetScalarTypeToDouble()
        C++: void SetScalarTypeToDouble()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToFloat(self):
        """
        V.SetScalarTypeToFloat()
        C++: void SetScalarTypeToFloat()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToInt(self):
        """
        V.SetScalarTypeToInt()
        C++: void SetScalarTypeToInt()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToLong(self):
        """
        V.SetScalarTypeToLong()
        C++: void SetScalarTypeToLong()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToShort(self):
        """
        V.SetScalarTypeToShort()
        C++: void SetScalarTypeToShort()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToUnsignedChar(self):
        """
        V.SetScalarTypeToUnsignedChar()
        C++: void SetScalarTypeToUnsignedChar()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToUnsignedInt(self):
        """
        V.SetScalarTypeToUnsignedInt()
        C++: void SetScalarTypeToUnsignedInt()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToUnsignedLong(self):
        """
        V.SetScalarTypeToUnsignedLong()
        C++: void SetScalarTypeToUnsignedLong()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def SetScalarTypeToUnsignedShort(self):
        """
        V.SetScalarTypeToUnsignedShort()
        C++: void SetScalarTypeToUnsignedShort()
        
        Control the scalar type of the output image. The default is
        VTK_BIT. NOTE: Not all filters/readers/writers support the
        VTK_BIT scalar type. You may want to use VTK_CHAR as an
        alternative.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
