"""
This type stub file was generated by pyright.
"""

from .vtkXMLUnstructuredDataReader import vtkXMLUnstructuredDataReader

class vtkXMLPolyDataReader(vtkXMLUnstructuredDataReader):
    """
    vtkXMLPolyDataReader - Read VTK XML PolyData files.
    
    Superclass: vtkXMLUnstructuredDataReader
    
    vtkXMLPolyDataReader reads the VTK XML PolyData file format.  One
    polygonal data file can be read to produce one output.  Streaming is
    supported.  The standard extension for this reader's file format is
    "vtp".  This reader is also used to read a single piece of the
    parallel file format.
    
    @sa
    vtkXMLPPolyDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLines(self):
        """
        V.GetNumberOfLines() -> int
        C++: virtual vtkIdType GetNumberOfLines()
        
        Get the number of verts/lines/strips/polys in the output.
        """
        ...
    
    def GetNumberOfPolys(self):
        """
        V.GetNumberOfPolys() -> int
        C++: virtual vtkIdType GetNumberOfPolys()
        
        Get the number of verts/lines/strips/polys in the output.
        """
        ...
    
    def GetNumberOfStrips(self):
        """
        V.GetNumberOfStrips() -> int
        C++: virtual vtkIdType GetNumberOfStrips()
        
        Get the number of verts/lines/strips/polys in the output.
        """
        ...
    
    def GetNumberOfVerts(self):
        """
        V.GetNumberOfVerts() -> int
        C++: virtual vtkIdType GetNumberOfVerts()
        
        Get the number of verts/lines/strips/polys in the output.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkPolyData
        C++: vtkPolyData *GetOutput()
        V.GetOutput(int) -> vtkPolyData
        C++: vtkPolyData *GetOutput(int idx)
        
        Get the reader's output.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLPolyDataReader
        C++: vtkXMLPolyDataReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLPolyDataReader
        C++: static vtkXMLPolyDataReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


