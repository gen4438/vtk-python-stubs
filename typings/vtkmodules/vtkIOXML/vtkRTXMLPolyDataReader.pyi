"""
This type stub file was generated by pyright.
"""

from .vtkXMLPolyDataReader import vtkXMLPolyDataReader

class vtkRTXMLPolyDataReader(vtkXMLPolyDataReader):
    """
    vtkRTXMLPolyDataReader - Read RealTime VTK XML PolyData files.
    
    Superclass: vtkXMLPolyDataReader
    
    vtkRTXMLPolyDataReader reads the VTK XML PolyData file format in real
    time.
    """
    def GetDataLocation(self):
        """
        V.GetDataLocation() -> string
        C++: virtual char *GetDataLocation()
        """
        ...
    
    def GetNextFileName(self):
        """
        V.GetNextFileName() -> string
        C++: const char *GetNextFileName()
        
        Return the name of the next available data file assume
        NewDataAvailable() return VTK_OK
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewDataAvailable(self):
        """
        V.NewDataAvailable() -> int
        C++: virtual int NewDataAvailable()
        
        check if there is new data file available in the given
        DataLocation
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRTXMLPolyDataReader
        C++: vtkRTXMLPolyDataReader *NewInstance()
        """
        ...
    
    def ResetReader(self):
        """
        V.ResetReader()
        C++: virtual void ResetReader()
        
        ResetReader check the data directory specified in
        this->DataLocation, and reset the Internal data structure
        specifically: this->Internal->ProcessedFileList for monitoring
        the arriving new data files if SetDataLocation(char*) is set by
        the user, this ResetReader() should also be invoked.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRTXMLPolyDataReader
        C++: static vtkRTXMLPolyDataReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLocation(self, string):
        """
        V.SetLocation(string)
        C++: void SetLocation(const char *dataLocation)
        """
        ...
    
    def UpdateToNextFile(self):
        """
        V.UpdateToNextFile()
        C++: virtual void UpdateToNextFile()
        
        Reader will read in the next available data file The filename is
        this->NextFileName maintained internally
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


