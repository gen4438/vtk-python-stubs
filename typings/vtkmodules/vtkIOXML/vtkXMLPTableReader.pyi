"""
This type stub file was generated by pyright.
"""

from .vtkXMLPDataObjectReader import vtkXMLPDataObjectReader

class vtkXMLPTableReader(vtkXMLPDataObjectReader):
    """
    vtkXMLPTableReader - Read PVTK XML Table files.
    
    Superclass: vtkXMLPDataObjectReader
    
    vtkXMLPTableReader reads the PVTK XML Table file format.  This reads
    the parallel format's summary file and then uses vtkXMLTableReader to
    read data from the individual Table piece files.  Streaming is
    supported. The standard extension for this reader's file format is
    "pvtt".
    
    @sa
    vtkXMLTableReader
    """
    def CopyOutputInformation(self, vtkInformation, p_int):
        """
        V.CopyOutputInformation(vtkInformation, int)
        C++: void CopyOutputInformation(vtkInformation *outInfo, int port)
             override;
        
        For the specified port, copy the information this reader sets up
        in SetupOutputInformation to outInfo
        """
        ...
    
    def GetColumnArrayName(self, p_int):
        """
        V.GetColumnArrayName(int) -> string
        C++: const char *GetColumnArrayName(int index)
        
        Get the name of the column with the given index in the input.
        """
        ...
    
    def GetColumnArrayStatus(self, string):
        """
        V.GetColumnArrayStatus(string) -> int
        C++: int GetColumnArrayStatus(const char *name)
        
        Get/Set whether the column array with the given name is to be
        read.
        """
        ...
    
    def GetColumnSelection(self):
        """
        V.GetColumnSelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetColumnSelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetNumberOfColumnArrays(self):
        """
        V.GetNumberOfColumnArrays() -> int
        C++: int GetNumberOfColumnArrays()
        
        Get the number of columns arrays available in the input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkTable
        C++: vtkTable *GetOutput()
        V.GetOutput(int) -> vtkTable
        C++: vtkTable *GetOutput(int idx)
        
        Get the reader's output.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLPTableReader
        C++: vtkXMLPTableReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLPTableReader
        C++: static vtkXMLPTableReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColumnArrayStatus(self, string, p_int):
        """
        V.SetColumnArrayStatus(string, int)
        C++: void SetColumnArrayStatus(const char *name, int status)
        
        Get/Set whether the column array with the given name is to be
        read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


