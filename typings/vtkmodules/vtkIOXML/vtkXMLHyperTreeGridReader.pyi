"""
This type stub file was generated by pyright.
"""

from .vtkXMLReader import vtkXMLReader

class vtkXMLHyperTreeGridReader(vtkXMLReader):
    """
    vtkXMLHyperTreeGridReader - Read VTK XML HyperTreeGrid files.
    
    Superclass: vtkXMLReader
    
    vtkXMLHyperTreeGridReader reads the VTK XML HyperTreeGrid file
    format. The standard extension for this reader's file format is
    "htg".
    
    NOTE: HyperTree exists as separate units with all data within htg
          But each htg file is considered one piece for the parallel
    reader
          Later may want to treat individual HyperTrees as separate
    pieces.
    
    For developpers: To ensure the durability of this storage format over
    time, at least, the drive must continue to support playback of
    previous format.
    
    Understand:
    - version 0.0 (P. Fasel and D. DeMarle Kitware US)
    - version 1.0 (J-B Lekien CEA, DAM, DIF, F-91297 Arpajon, France)
      This version of the format offers extensive loading options. With
      these options, regardless of the size of the backed-up mesh, it is
      possible to view a "reduced" version either by setting the maximum
      level (by SetFixedLevel) or/and setting the HyperTrees to load (by
      SetCoordinatesBoundingBox, SetIndicesBoundingBox,
      ClearAndAddSelectedHT and AddSelectedHT.
    """
    def AddSelectedHT(self, p_int, p_int_1):
        """
        V.AddSelectedHT(int, int)
        C++: void AddSelectedHT(unsigned int idg,
            unsigned int fixedLevel=UINT_MAX)
        
        Set/Get the selected HyperTrees (HTs) to read : by default, all
        Hts, or by set coordinates bounding box, exclusive or by set
        indices coordinates bounding box, exclusive or by set indices HTs
        (ClearAndAdd and more Add). Only available for files whose major
        version > 1 Option avaiblable in 1.0
        """
        ...
    
    def ClearAndAddSelectedHT(self, p_int, p_int_1):
        """
        V.ClearAndAddSelectedHT(int, int)
        C++: void ClearAndAddSelectedHT(unsigned int idg,
            unsigned int fixedLevel=UINT_MAX)
        
        Set/Get the selected HyperTrees (HTs) to read : by default, all
        Hts, or by set coordinates bounding box, exclusive or by set
        indices coordinates bounding box, exclusive or by set indices HTs
        (ClearAndAdd and more Add). Only available for files whose major
        version > 1 Option avaiblable in 1.0
        """
        ...
    
    def CopyOutputInformation(self, vtkInformation, p_int):
        """
        V.CopyOutputInformation(vtkInformation, int)
        C++: void CopyOutputInformation(vtkInformation *outInfo, int port)
             override;
        """
        ...
    
    def GetFixedLevel(self):
        """
        V.GetFixedLevel() -> int
        C++: virtual unsigned int GetFixedLevel()
        
        Set/Get the fixed level to read. Option avaiblable in 1.0
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPieces(self):
        """
        V.GetNumberOfPieces() -> int
        C++: vtkIdType GetNumberOfPieces()
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: vtkIdType GetNumberOfPoints()
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkHyperTreeGrid
        C++: vtkHyperTreeGrid *GetOutput()
        V.GetOutput(int) -> vtkHyperTreeGrid
        C++: vtkHyperTreeGrid *GetOutput(int idx)
        
        Get the reader's output.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLHyperTreeGridReader
        C++: vtkXMLHyperTreeGridReader *NewInstance()
        """
        ...
    
    def ReadXMLData(self):
        """
        V.ReadXMLData()
        C++: void ReadXMLData() override;
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLHyperTreeGridReader
        C++: static vtkXMLHyperTreeGridReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCoordinatesBoundingBox(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetCoordinatesBoundingBox(float, float, float, float, float,
            float)
        C++: void SetCoordinatesBoundingBox(double xmin, double xmax,
            double ymin, double ymax, double zmin, double zmax)
        
        Set/Get the selected HyperTrees (HTs) to read : by default, all
        Hts, or by set coordinates bounding box, exclusive or by set
        indices coordinates bounding box, exclusive or by set indices HTs
        (ClearAndAdd and more Add). Only available for files whose major
        version > 1 Option avaiblable in 1.0
        """
        ...
    
    def SetFixedLevel(self, p_int):
        """
        V.SetFixedLevel(int)
        C++: virtual void SetFixedLevel(unsigned int _arg)
        
        Set/Get the fixed level to read. Option avaiblable in 1.0
        """
        ...
    
    def SetIndicesBoundingBox(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetIndicesBoundingBox(int, int, int, int, int, int)
        C++: void SetIndicesBoundingBox(unsigned int imin,
            unsigned int imax, unsigned int jmin, unsigned int jmax,
            unsigned int kmin, unsigned int kmax)
        
        Set/Get the selected HyperTrees (HTs) to read : by default, all
        Hts, or by set coordinates bounding box, exclusive or by set
        indices coordinates bounding box, exclusive or by set indices HTs
        (ClearAndAdd and more Add). Only available for files whose major
        version > 1 Option avaiblable in 1.0
        """
        ...
    
    def SetupUpdateExtent(self, p_int, p_int_1):
        """
        V.SetupUpdateExtent(int, int)
        C++: void SetupUpdateExtent(int piece, int numberOfPieces)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


