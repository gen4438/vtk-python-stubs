"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkXMLWriter(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkXMLWriter - Superclass for VTK's XML file writers.
    
    Superclass: vtkAlgorithm
    
    vtkXMLWriter provides methods implementing most of the functionality
    needed to write VTK XML file formats.  Concrete subclasses provide
    actual writer implementations calling upon this functionality.
    
    @par Thanks CompressionLevel getters/setters exposed by Quincy
    Wofford (qwofford@lanl.gov) and John Patchett (patchett@lanl.gov),
    Los Alamos National Laboratory (2017)
    """
    def EncodeAppendedDataOff(self):
        """
        V.EncodeAppendedDataOff()
        C++: virtual void EncodeAppendedDataOff()
        
        Get/Set whether the appended data section is base64 encoded.  If
        encoded, reading and writing will be slower, but the file will be
        fully valid XML and text-only.  If not encoded, the XML
        specification will be violated, but reading and writing will be
        fast.  The default is to do the encoding.
        """
        ...
    
    def EncodeAppendedDataOn(self):
        """
        V.EncodeAppendedDataOn()
        C++: virtual void EncodeAppendedDataOn()
        
        Get/Set whether the appended data section is base64 encoded.  If
        encoded, reading and writing will be slower, but the file will be
        fully valid XML and text-only.  If not encoded, the XML
        specification will be violated, but reading and writing will be
        fast.  The default is to do the encoding.
        """
        ...
    
    def GetBlockSize(self):
        """
        V.GetBlockSize() -> int
        C++: virtual size_t GetBlockSize()
        
        Get/Set the block size used in compression.  When reading, this
        controls the granularity of how much extra information must be
        read when only part of the data are requested.  The value should
        be a multiple of the largest scalar data type.
        """
        ...
    
    def GetByteOrder(self):
        """
        V.GetByteOrder() -> int
        C++: virtual int GetByteOrder()
        
        Get/Set the byte order of data written to the file.  The default
        is the machine's hardware byte order.
        """
        ...
    
    def GetCompressionLevel(self):
        """
        V.GetCompressionLevel() -> int
        C++: virtual int GetCompressionLevel()
        
        Convenience functions to set the compressor to certain known
        types.
        """
        ...
    
    def GetCompressor(self):
        """
        V.GetCompressor() -> vtkDataCompressor
        C++: virtual vtkDataCompressor *GetCompressor()
        
        Get/Set the compressor used to compress binary and appended data
        before writing to the file.  Default is a vtkZLibDataCompressor.
        """
        ...
    
    def GetDataMode(self):
        """
        V.GetDataMode() -> int
        C++: virtual int GetDataMode()
        
        Get/Set the data mode used for the file's data.  The options are
        vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and
        vtkXMLWriter::Appended.
        """
        ...
    
    def GetDefaultFileExtension(self):
        """
        V.GetDefaultFileExtension() -> string
        C++: virtual const char *GetDefaultFileExtension()
        
        Get the default file extension for files written by this writer.
        """
        ...
    
    def GetEncodeAppendedData(self):
        """
        V.GetEncodeAppendedData() -> int
        C++: virtual vtkTypeBool GetEncodeAppendedData()
        
        Get/Set whether the appended data section is base64 encoded.  If
        encoded, reading and writing will be slower, but the file will be
        fully valid XML and text-only.  If not encoded, the XML
        specification will be violated, but reading and writing will be
        fast.  The default is to do the encoding.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the name of the output file.
        """
        ...
    
    def GetHeaderType(self):
        """
        V.GetHeaderType() -> int
        C++: virtual int GetHeaderType()
        
        Get/Set the binary data header word type.  The default is UInt32.
        Set to UInt64 when storing arrays requiring 64-bit indexing.
        """
        ...
    
    def GetIdType(self):
        """
        V.GetIdType() -> int
        C++: virtual int GetIdType()
        
        Get/Set the size of the vtkIdType values stored in the file.  The
        default is the real size of vtkIdType.
        """
        ...
    
    def GetInput(self, p_int):
        """
        V.GetInput(int) -> vtkDataObject
        C++: vtkDataObject *GetInput(int port)
        V.GetInput() -> vtkDataObject
        C++: vtkDataObject *GetInput()
        
        Assign a data object as input. Note that this method does not
        establish a pipeline connection. Use SetInputConnection() to
        setup a pipeline connection.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: virtual int GetNumberOfTimeSteps()
        
        Set the number of time steps
        """
        ...
    
    def GetOutputString(self):
        """
        V.GetOutputString() -> string
        C++: std::string GetOutputString()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> int
        C++: virtual vtkTypeBool GetWriteToOutputString()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLWriter
        C++: vtkXMLWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLWriter
        C++: static vtkXMLWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBlockSize(self, p_int):
        """
        V.SetBlockSize(int)
        C++: virtual void SetBlockSize(size_t blockSize)
        
        Get/Set the block size used in compression.  When reading, this
        controls the granularity of how much extra information must be
        read when only part of the data are requested.  The value should
        be a multiple of the largest scalar data type.
        """
        ...
    
    def SetByteOrder(self, p_int):
        """
        V.SetByteOrder(int)
        C++: virtual void SetByteOrder(int _arg)
        
        Get/Set the byte order of data written to the file.  The default
        is the machine's hardware byte order.
        """
        ...
    
    def SetByteOrderToBigEndian(self):
        """
        V.SetByteOrderToBigEndian()
        C++: void SetByteOrderToBigEndian()
        
        Get/Set the byte order of data written to the file.  The default
        is the machine's hardware byte order.
        """
        ...
    
    def SetByteOrderToLittleEndian(self):
        """
        V.SetByteOrderToLittleEndian()
        C++: void SetByteOrderToLittleEndian()
        
        Get/Set the byte order of data written to the file.  The default
        is the machine's hardware byte order.
        """
        ...
    
    def SetCompressionLevel(self, p_int):
        """
        V.SetCompressionLevel(int)
        C++: void SetCompressionLevel(int compressorLevel)
        
        Convenience functions to set the compressor to certain known
        types.
        """
        ...
    
    def SetCompressor(self, vtkDataCompressor):
        """
        V.SetCompressor(vtkDataCompressor)
        C++: virtual void SetCompressor(vtkDataCompressor *)
        
        Get/Set the compressor used to compress binary and appended data
        before writing to the file.  Default is a vtkZLibDataCompressor.
        """
        ...
    
    def SetCompressorType(self, p_int):
        """
        V.SetCompressorType(int)
        C++: void SetCompressorType(int compressorType)
        
        Convenience functions to set the compressor to certain known
        types.
        """
        ...
    
    def SetCompressorTypeToLZ4(self):
        """
        V.SetCompressorTypeToLZ4()
        C++: void SetCompressorTypeToLZ4()
        
        Convenience functions to set the compressor to certain known
        types.
        """
        ...
    
    def SetCompressorTypeToLZMA(self):
        """
        V.SetCompressorTypeToLZMA()
        C++: void SetCompressorTypeToLZMA()
        
        Convenience functions to set the compressor to certain known
        types.
        """
        ...
    
    def SetCompressorTypeToNone(self):
        """
        V.SetCompressorTypeToNone()
        C++: void SetCompressorTypeToNone()
        
        Convenience functions to set the compressor to certain known
        types.
        """
        ...
    
    def SetCompressorTypeToZLib(self):
        """
        V.SetCompressorTypeToZLib()
        C++: void SetCompressorTypeToZLib()
        
        Convenience functions to set the compressor to certain known
        types.
        """
        ...
    
    def SetDataMode(self, p_int):
        """
        V.SetDataMode(int)
        C++: virtual void SetDataMode(int _arg)
        
        Get/Set the data mode used for the file's data.  The options are
        vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and
        vtkXMLWriter::Appended.
        """
        ...
    
    def SetDataModeToAppended(self):
        """
        V.SetDataModeToAppended()
        C++: void SetDataModeToAppended()
        
        Get/Set the data mode used for the file's data.  The options are
        vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and
        vtkXMLWriter::Appended.
        """
        ...
    
    def SetDataModeToAscii(self):
        """
        V.SetDataModeToAscii()
        C++: void SetDataModeToAscii()
        
        Get/Set the data mode used for the file's data.  The options are
        vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and
        vtkXMLWriter::Appended.
        """
        ...
    
    def SetDataModeToBinary(self):
        """
        V.SetDataModeToBinary()
        C++: void SetDataModeToBinary()
        
        Get/Set the data mode used for the file's data.  The options are
        vtkXMLWriter::Ascii, vtkXMLWriter::Binary, and
        vtkXMLWriter::Appended.
        """
        ...
    
    def SetEncodeAppendedData(self, p_int):
        """
        V.SetEncodeAppendedData(int)
        C++: virtual void SetEncodeAppendedData(vtkTypeBool _arg)
        
        Get/Set whether the appended data section is base64 encoded.  If
        encoded, reading and writing will be slower, but the file will be
        fully valid XML and text-only.  If not encoded, the XML
        specification will be violated, but reading and writing will be
        fast.  The default is to do the encoding.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the name of the output file.
        """
        ...
    
    def SetHeaderType(self, p_int):
        """
        V.SetHeaderType(int)
        C++: virtual void SetHeaderType(int)
        
        Get/Set the binary data header word type.  The default is UInt32.
        Set to UInt64 when storing arrays requiring 64-bit indexing.
        """
        ...
    
    def SetHeaderTypeToUInt32(self):
        """
        V.SetHeaderTypeToUInt32()
        C++: void SetHeaderTypeToUInt32()
        
        Get/Set the binary data header word type.  The default is UInt32.
        Set to UInt64 when storing arrays requiring 64-bit indexing.
        """
        ...
    
    def SetHeaderTypeToUInt64(self):
        """
        V.SetHeaderTypeToUInt64()
        C++: void SetHeaderTypeToUInt64()
        
        Get/Set the binary data header word type.  The default is UInt32.
        Set to UInt64 when storing arrays requiring 64-bit indexing.
        """
        ...
    
    def SetIdType(self, p_int):
        """
        V.SetIdType(int)
        C++: virtual void SetIdType(int)
        
        Get/Set the size of the vtkIdType values stored in the file.  The
        default is the real size of vtkIdType.
        """
        ...
    
    def SetIdTypeToInt32(self):
        """
        V.SetIdTypeToInt32()
        C++: void SetIdTypeToInt32()
        
        Get/Set the size of the vtkIdType values stored in the file.  The
        default is the real size of vtkIdType.
        """
        ...
    
    def SetIdTypeToInt64(self):
        """
        V.SetIdTypeToInt64()
        C++: void SetIdTypeToInt64()
        
        Get/Set the size of the vtkIdType values stored in the file.  The
        default is the real size of vtkIdType.
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: void SetInputData(vtkDataObject *)
        V.SetInputData(int, vtkDataObject)
        C++: void SetInputData(int, vtkDataObject *)
        
        Assign a data object as input. Note that this method does not
        establish a pipeline connection. Use SetInputConnection() to
        setup a pipeline connection.
        """
        ...
    
    def SetNumberOfTimeSteps(self, p_int):
        """
        V.SetNumberOfTimeSteps(int)
        C++: virtual void SetNumberOfTimeSteps(int _arg)
        
        Set the number of time steps
        """
        ...
    
    def SetWriteToOutputString(self, p_int):
        """
        V.SetWriteToOutputString(int)
        C++: virtual void SetWriteToOutputString(vtkTypeBool _arg)
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def Start(self):
        """
        V.Start()
        C++: void Start()
        
        API to interface an outside the VTK pipeline control
        """
        ...
    
    def Stop(self):
        """
        V.Stop()
        C++: void Stop()
        
        API to interface an outside the VTK pipeline control
        """
        ...
    
    def Write(self):
        """
        V.Write() -> int
        C++: int Write()
        
        Invoke the writer.  Returns 1 for success, 0 for failure.
        """
        ...
    
    def WriteNextTime(self, p_float):
        """
        V.WriteNextTime(float)
        C++: void WriteNextTime(double time)
        
        API to interface an outside the VTK pipeline control
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: virtual void WriteToOutputStringOff()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: virtual void WriteToOutputStringOn()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Appended = ...
    Ascii = ...
    BigEndian = ...
    Binary = ...
    CompressorType = ...
    Int32 = ...
    Int64 = ...
    LittleEndian = ...
    LZ4 = ...
    LZMA = ...
    NONE = ...
    UInt32 = ...
    UInt64 = ...
    ZLIB = ...
    __dict__ = ...
    __vtkname__ = ...


