"""
This type stub file was generated by pyright.
"""

from .vtkXMLWriter import vtkXMLWriter

class vtkXMLHyperTreeGridWriter(vtkXMLWriter):
    """
    vtkXMLHyperTreeGridWriter - Write VTK XML HyperTreeGrid files.
    
    Superclass: vtkXMLWriter
    
    vtkXMLHyperTreeGridWriter writes the VTK XML HyperTreeGrid file
    format. The standard extension for this writer's file format is
    "htg".
    
    Note for developers: The VTK XML HyperTreeGrid file format is
    versioned. Any evolution of the format must lead to:
    - a move to a higher major version number, X+1.0, if the evolution is
      incompatible with the previous versions either at the level of the
      description of the information or the semantic understanding made
      by the reader;
    - a move to a higher minor version number, X.y+1, if its consists of
      adding information without calling into question the general
      interpretation.
    
    Version 0.0 (P. Fasel and D. DeMarle) ... Version 1.0 (J-B Lekien
    CEA, DAM, DIF, F-91297 Arpajon, France)
    - writing by HyperTree description and fields;
    - saving the minimal tree (a hidden refined node becomes a hidden
      leaf node);
    - saving the tree by level of refinement (course in width);
    - the last null values in the binary description of the tree or mask
      (if defined) may not / are not explicitly described. The size of
      the table given elsewhere is authentic;
    - all fields are copied to be saved in the implicit order, so even if
    an explicit global index map exists, it disappears;
    - writing in this version requires more memory and CPU;
    - reading of a part is accelerated (non iterative construction of the
    tree) and consumes potentially less memory (suppression of the global
    index map explicit);
    - expanded possibility at the reader level, today these options allow
    to accelerate the obtaining of a result which will be less precise
      and to allow the loading of a part of a mesh which would not hold
      in memory:
    - loading by limiting the maximum level to load;
    - loading by selecting (differentes description possibilities are
      offered) the HTs to take into account.
    
    The default version of the VTK XML HyperTreeGrid file format is the
    latest version, now version 1.0.
    
    For developpers: To ensure the durability of this storage format over
    time, at least, the drive must continue to support playback of
    previous format.
    """
    def GetDefaultFileExtension(self):
        """
        V.GetDefaultFileExtension() -> string
        C++: const char *GetDefaultFileExtension() override;
        
        Get the default file extension for files written by this writer.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkHyperTreeGrid
        C++: vtkHyperTreeGrid *GetInput()
        
        Get/Set the writer's input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLHyperTreeGridWriter
        C++: vtkXMLHyperTreeGridWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLHyperTreeGridWriter
        C++: static vtkXMLHyperTreeGridWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDataSetMajorVersion(self, p_int):
        """
        V.SetDataSetMajorVersion(int)
        C++: virtual void SetDataSetMajorVersion(int _arg)
        
        Methods to define the file's major and minor version numbers.
        Major version incremented since v0.1 hypertreegrid data readers
        cannot read the files written by this new reader. A version is
        defined by defect, so there is no need to call this function. The
        default choice is usually the best choice.
        """
        ...
    
    def SetDataSetMinorVersion(self, p_int):
        """
        V.SetDataSetMinorVersion(int)
        C++: virtual void SetDataSetMinorVersion(int _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


