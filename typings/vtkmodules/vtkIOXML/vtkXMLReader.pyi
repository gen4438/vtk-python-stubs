"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkXMLReader(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkXMLReader - Superclass for VTK's XML format readers.
    
    Superclass: vtkAlgorithm
    
    vtkXMLReader uses vtkXMLDataParser to parse a <a
    href="http://www.vtk.org/Wiki/VTK_XML_Formats">VTK XMLinput file.
    Concrete subclasses then traverse the parsed file structure and
    extract data.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: virtual int CanReadFile(const char *name)
        
        Test whether the file (type) with the given name can be read by
        this reader. If the file has a newer version than the reader, we
        still say we can read the file type and we fail later, when we
        try to read the file. This enables clients (ParaView) to
        distinguish between failures when we need to look for another
        reader and failures when we don't.
        """
        ...
    
    def CopyOutputInformation(self, vtkInformation, p_int):
        """
        V.CopyOutputInformation(vtkInformation, int)
        C++: virtual void CopyOutputInformation(vtkInformation *outInfo,
            int port)
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        
        Get the name of the point, cell or column array with the given
        index in the input.
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        
        Get/Set whether the point, cell or column array with the given
        name is to be read.
        """
        ...
    
    def GetCellDataArraySelection(self):
        """
        V.GetCellDataArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetCellDataArraySelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetColumnArrayName(self, p_int):
        """
        V.GetColumnArrayName(int) -> string
        C++: const char *GetColumnArrayName(int index)
        
        Get the name of the point, cell or column array with the given
        index in the input.
        """
        ...
    
    def GetColumnArraySelection(self):
        """
        V.GetColumnArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetColumnArraySelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetColumnArrayStatus(self, string):
        """
        V.GetColumnArrayStatus(string) -> int
        C++: int GetColumnArrayStatus(const char *name)
        
        Get/Set whether the point, cell or column array with the given
        name is to be read.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the name of the input file.
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays()
        
        Get the number of point, cell or column arrays available in the
        input.
        """
        ...
    
    def GetNumberOfColumnArrays(self):
        """
        V.GetNumberOfColumnArrays() -> int
        C++: int GetNumberOfColumnArrays()
        
        Get the number of point, cell or column arrays available in the
        input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays()
        
        Get the number of point, cell or column arrays available in the
        input.
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: virtual int GetNumberOfTimeSteps()
        """
        ...
    
    def GetOutputAsDataSet(self):
        """
        V.GetOutputAsDataSet() -> vtkDataSet
        C++: vtkDataSet *GetOutputAsDataSet()
        V.GetOutputAsDataSet(int) -> vtkDataSet
        C++: vtkDataSet *GetOutputAsDataSet(int index)
        
        Get the output as a vtkDataSet pointer.
        """
        ...
    
    def GetParserErrorObserver(self):
        """
        V.GetParserErrorObserver() -> vtkCommand
        C++: virtual vtkCommand *GetParserErrorObserver()
        
        Set/get the ErrorObserver for the internal xml parser This is
        useful for applications that want to catch error messages.
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        Get the name of the point, cell or column array with the given
        index in the input.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        
        Get/Set whether the point, cell or column array with the given
        name is to be read.
        """
        ...
    
    def GetPointDataArraySelection(self):
        """
        V.GetPointDataArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetPointDataArraySelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetReaderErrorObserver(self):
        """
        V.GetReaderErrorObserver() -> vtkCommand
        C++: virtual vtkCommand *GetReaderErrorObserver()
        
        Set/get the ErrorObserver for the internal reader This is useful
        for applications that want to catch error messages.
        """
        ...
    
    def GetReadFromInputString(self):
        """
        V.GetReadFromInputString() -> int
        C++: virtual vtkTypeBool GetReadFromInputString()
        
        Enable reading from an InputString instead of the default, a
        file.
        """
        ...
    
    def GetTimeStep(self):
        """
        V.GetTimeStep() -> int
        C++: virtual int GetTimeStep()
        
        Which TimeStep to read.
        """
        ...
    
    def GetTimeStepRange(self):
        """
        V.GetTimeStepRange() -> (int, int)
        C++: virtual int *GetTimeStepRange()
        
        Which TimeStepRange to read
        """
        ...
    
    def GetXMLParser(self):
        """
        V.GetXMLParser() -> vtkXMLDataParser
        C++: vtkXMLDataParser *GetXMLParser()
        
        Returns the internal XML parser. This can be used to access the
        XML DOM after RequestInformation() was called.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLReader
        C++: vtkXMLReader *NewInstance()
        """
        ...
    
    def ReadFromInputStringOff(self):
        """
        V.ReadFromInputStringOff()
        C++: virtual void ReadFromInputStringOff()
        
        Enable reading from an InputString instead of the default, a
        file.
        """
        ...
    
    def ReadFromInputStringOn(self):
        """
        V.ReadFromInputStringOn()
        C++: virtual void ReadFromInputStringOn()
        
        Enable reading from an InputString instead of the default, a
        file.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLReader
        C++: static vtkXMLReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        
        Get/Set whether the point, cell or column array with the given
        name is to be read.
        """
        ...
    
    def SetColumnArrayStatus(self, string, p_int):
        """
        V.SetColumnArrayStatus(string, int)
        C++: void SetColumnArrayStatus(const char *name, int status)
        
        Get/Set whether the point, cell or column array with the given
        name is to be read.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the name of the input file.
        """
        ...
    
    def SetInputString(self, string):
        """
        V.SetInputString(string)
        C++: void SetInputString(const std::string &s)
        
        Enable reading from an InputString instead of the default, a
        file.
        """
        ...
    
    def SetParserErrorObserver(self, vtkCommand):
        """
        V.SetParserErrorObserver(vtkCommand)
        C++: void SetParserErrorObserver(vtkCommand *)
        
        Set/get the ErrorObserver for the internal xml parser This is
        useful for applications that want to catch error messages.
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        
        Get/Set whether the point, cell or column array with the given
        name is to be read.
        """
        ...
    
    def SetReaderErrorObserver(self, vtkCommand):
        """
        V.SetReaderErrorObserver(vtkCommand)
        C++: void SetReaderErrorObserver(vtkCommand *)
        
        Set/get the ErrorObserver for the internal reader This is useful
        for applications that want to catch error messages.
        """
        ...
    
    def SetReadFromInputString(self, p_int):
        """
        V.SetReadFromInputString(int)
        C++: virtual void SetReadFromInputString(vtkTypeBool _arg)
        
        Enable reading from an InputString instead of the default, a
        file.
        """
        ...
    
    def SetTimeStep(self, p_int):
        """
        V.SetTimeStep(int)
        C++: virtual void SetTimeStep(int _arg)
        
        Which TimeStep to read.
        """
        ...
    
    def SetTimeStepRange(self, p_int, p_int_1):
        """
        V.SetTimeStepRange(int, int)
        C++: virtual void SetTimeStepRange(int _arg1, int _arg2)
        V.SetTimeStepRange((int, int))
        C++: void SetTimeStepRange(const int _arg[2])
        
        Which TimeStepRange to read
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CELL_DATA = ...
    FieldType = ...
    OTHER = ...
    POINT_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


