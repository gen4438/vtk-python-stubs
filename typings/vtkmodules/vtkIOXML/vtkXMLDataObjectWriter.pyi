"""
This type stub file was generated by pyright.
"""

from .vtkXMLWriter import vtkXMLWriter

class vtkXMLDataObjectWriter(vtkXMLWriter):
    """
    vtkXMLDataObjectWriter - Write any type of VTK XML file.
    
    Superclass: vtkXMLWriter
    
    vtkXMLDataObjectWriter is a wrapper around the VTK XML file format
    writers.  Given an input vtkDataSet, the correct writer is
    automatically selected based on the type of input.
    
    @sa
    vtkXMLImageDataWriter vtkXMLStructuredGridWriter
    vtkXMLRectilinearGridWriter vtkXMLPolyDataWriter
    vtkXMLUnstructuredGridWriter
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkDataSet
        C++: vtkDataSet *GetInput()
        
        Get/Set the writer's input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLDataObjectWriter
        C++: vtkXMLDataObjectWriter *NewInstance()
        """
        ...
    
    def NewWriter(self, p_int):
        """
        V.NewWriter(int) -> vtkXMLWriter
        C++: static vtkXMLWriter *NewWriter(int dataset_type)
        
        Creates a writer for the given dataset type. May return nullptr
        for unsupported/unrecognized dataset types. Returns a new
        instance. The caller is responsible of calling
        vtkObject::Delete() or vtkObject::UnRegister() on it when done.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLDataObjectWriter
        C++: static vtkXMLDataObjectWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


