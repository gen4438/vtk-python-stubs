"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMPASReader(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkMPASReader - Read an MPAS netCDF file
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    This program reads an MPAS netCDF data file to allow paraview to
    display a dual-grid sphere or latlon projection.  Also allows display
    of primal-grid sphere. The variables that have time dim are available
    to ParaView.
    
    Assume all variables are of interest if they have dims (Time,
    nCells|nVertices, nVertLevels, [nTracers]). Does not deal with edge
    data.
    
    When using this reader, it is important that you remember to do the
    following:
    1.  When changing a selected variable, remember to select it also in
       the drop down box to "color by".  It doesn't color by that
       variable automatically.
    2.  When selecting multilayer sphere view, make layer thickness
       around 100,000.
    3.  When selecting multilayer lat/lon view, make layer thickness
       around 10.
    4.  Always click the -Z orientation after making a switch from
       lat/lon to sphere, from single to multilayer or changing
       thickness.
    5.  Be conservative on the number of changes you make before hitting
       Apply, since there may be bugs in this reader.  Just make one
       change and then hit Apply.
    
    Christine Ahrens (cahrens@lanl.gov) Version 1.3
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: static int CanReadFile(const char *filename)
        
        Returns true if the given file can be read.
        """
        ...
    
    def DisableAllCellArrays(self):
        """
        V.DisableAllCellArrays()
        C++: void DisableAllCellArrays()
        """
        ...
    
    def DisableAllPointArrays(self):
        """
        V.DisableAllPointArrays()
        C++: void DisableAllPointArrays()
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def EnableAllCellArrays(self):
        """
        V.EnableAllCellArrays()
        C++: void EnableAllCellArrays()
        """
        ...
    
    def EnableAllPointArrays(self):
        """
        V.EnableAllPointArrays()
        C++: void EnableAllPointArrays()
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def GetAllDimensions(self):
        """
        V.GetAllDimensions() -> vtkStringArray
        C++: vtkStringArray *GetAllDimensions()
        
        If the point/cell arrays contain dimensions other than Time,
        nCells, or nVertices, they are configured here. Use
        GetNumberOfDimensions to get the number of arbitrary dimensions
        in the loaded arrays and GetDimensionName to retrieve the
        dimension names. GetDimensionSize returns the number of values in
        the dimensions, and Set/GetDimensionCurrentIndex controls the
        value to fix a given dimension at when extracting slices of data.
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        """
        ...
    
    def GetCenterLonRange(self):
        """
        V.GetCenterLonRange() -> (int, int)
        C++: virtual int *GetCenterLonRange()
        """
        ...
    
    def GetDimensionCurrentIndex(self, string):
        """
        V.GetDimensionCurrentIndex(string) -> int
        C++: int GetDimensionCurrentIndex(const std::string &dim)
        
        If the point/cell arrays contain dimensions other than Time,
        nCells, or nVertices, they are configured here. Use
        GetNumberOfDimensions to get the number of arbitrary dimensions
        in the loaded arrays and GetDimensionName to retrieve the
        dimension names. GetDimensionSize returns the number of values in
        the dimensions, and Set/GetDimensionCurrentIndex controls the
        value to fix a given dimension at when extracting slices of data.
        """
        ...
    
    def GetDimensionName(self, p_int):
        """
        V.GetDimensionName(int) -> string
        C++: std::string GetDimensionName(int idx)
        
        If the point/cell arrays contain dimensions other than Time,
        nCells, or nVertices, they are configured here. Use
        GetNumberOfDimensions to get the number of arbitrary dimensions
        in the loaded arrays and GetDimensionName to retrieve the
        dimension names. GetDimensionSize returns the number of values in
        the dimensions, and Set/GetDimensionCurrentIndex controls the
        value to fix a given dimension at when extracting slices of data.
        """
        ...
    
    def GetDimensionSize(self, string):
        """
        V.GetDimensionSize(string) -> int
        C++: int GetDimensionSize(const std::string &dim)
        
        If the point/cell arrays contain dimensions other than Time,
        nCells, or nVertices, they are configured here. Use
        GetNumberOfDimensions to get the number of arbitrary dimensions
        in the loaded arrays and GetDimensionName to retrieve the
        dimension names. GetDimensionSize returns the number of values in
        the dimensions, and Set/GetDimensionCurrentIndex controls the
        value to fix a given dimension at when extracting slices of data.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of MPAS data file to read.
        """
        ...
    
    def GetIsAtmosphere(self):
        """
        V.GetIsAtmosphere() -> bool
        C++: virtual bool GetIsAtmosphere()
        """
        ...
    
    def GetIsZeroCentered(self):
        """
        V.GetIsZeroCentered() -> bool
        C++: virtual bool GetIsZeroCentered()
        """
        ...
    
    def GetLayerThickness(self):
        """
        V.GetLayerThickness() -> int
        C++: virtual int GetLayerThickness()
        """
        ...
    
    def GetLayerThicknessRange(self):
        """
        V.GetLayerThicknessRange() -> (int, int)
        C++: virtual int *GetLayerThicknessRange()
        """
        ...
    
    def GetMaximumCells(self):
        """
        V.GetMaximumCells() -> int
        C++: virtual int GetMaximumCells()
        
        Get the number of data cells
        """
        ...
    
    def GetMaximumPoints(self):
        """
        V.GetMaximumPoints() -> int
        C++: virtual int GetMaximumPoints()
        
        Get the number of points
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return this object's modified time.
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays()
        """
        ...
    
    def GetNumberOfCellVars(self):
        """
        V.GetNumberOfCellVars() -> int
        C++: virtual int GetNumberOfCellVars()
        
        Get the number of data variables at the cell centers and points
        """
        ...
    
    def GetNumberOfDimensions(self):
        """
        V.GetNumberOfDimensions() -> int
        C++: vtkIdType GetNumberOfDimensions()
        
        If the point/cell arrays contain dimensions other than Time,
        nCells, or nVertices, they are configured here. Use
        GetNumberOfDimensions to get the number of arbitrary dimensions
        in the loaded arrays and GetDimensionName to retrieve the
        dimension names. GetDimensionSize returns the number of values in
        the dimensions, and Set/GetDimensionCurrentIndex controls the
        value to fix a given dimension at when extracting slices of data.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays()
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def GetNumberOfPointVars(self):
        """
        V.GetNumberOfPointVars() -> int
        C++: virtual int GetNumberOfPointVars()
        
        Get the number of data variables at the cell centers and points
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetOutput()
        V.GetOutput(int) -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetOutput(int index)
        
        Get the reader's output
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def GetProjectLatLon(self):
        """
        V.GetProjectLatLon() -> bool
        C++: virtual bool GetProjectLatLon()
        """
        ...
    
    def GetShowMultilayerView(self):
        """
        V.GetShowMultilayerView() -> bool
        C++: virtual bool GetShowMultilayerView()
        """
        ...
    
    def GetUseDimensionedArrayNames(self):
        """
        V.GetUseDimensionedArrayNames() -> bool
        C++: virtual bool GetUseDimensionedArrayNames()
        
        If true, dimension info is included in the array name. For
        instance, "tracers" will become "tracers(Time, nCells, nVertLevels,
        nTracers)". This is useful for user-visible array selection, but
        is disabled by default for backwards compatibility.
        """
        ...
    
    def GetVerticalDimension(self):
        """
        V.GetVerticalDimension() -> string
        C++: virtual std::string GetVerticalDimension()
        
        Get/Set the name to the dimension that identifies the vertical
        dimension. Defaults to "nVertLevels".
        """
        ...
    
    def GetVerticalLevel(self):
        """
        V.GetVerticalLevel() -> int
        C++: int GetVerticalLevel()
        
        Convenience function for setting/querying
        [GS]etDimensionCurrentIndex for the dimension returned by
        GetVerticalDimension.
        """
        ...
    
    def GetVerticalLevelRange(self):
        """
        V.GetVerticalLevelRange() -> (int, int)
        C++: virtual int *GetVerticalLevelRange()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMPASReader
        C++: vtkMPASReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMPASReader
        C++: static vtkMPASReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        """
        ...
    
    def SetCenterLon(self, p_int):
        """
        V.SetCenterLon(int)
        C++: void SetCenterLon(int val)
        """
        ...
    
    def SetDimensionCurrentIndex(self, string, p_int):
        """
        V.SetDimensionCurrentIndex(string, int)
        C++: void SetDimensionCurrentIndex(const std::string &dim,
            int idx)
        
        If the point/cell arrays contain dimensions other than Time,
        nCells, or nVertices, they are configured here. Use
        GetNumberOfDimensions to get the number of arbitrary dimensions
        in the loaded arrays and GetDimensionName to retrieve the
        dimension names. GetDimensionSize returns the number of values in
        the dimensions, and Set/GetDimensionCurrentIndex controls the
        value to fix a given dimension at when extracting slices of data.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of MPAS data file to read.
        """
        ...
    
    def SetIsAtmosphere(self, bool):
        """
        V.SetIsAtmosphere(bool)
        C++: virtual void SetIsAtmosphere(bool _arg)
        """
        ...
    
    def SetIsZeroCentered(self, bool):
        """
        V.SetIsZeroCentered(bool)
        C++: virtual void SetIsZeroCentered(bool _arg)
        """
        ...
    
    def SetLayerThickness(self, p_int):
        """
        V.SetLayerThickness(int)
        C++: virtual void SetLayerThickness(int _arg)
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def SetProjectLatLon(self, bool):
        """
        V.SetProjectLatLon(bool)
        C++: virtual void SetProjectLatLon(bool _arg)
        """
        ...
    
    def SetShowMultilayerView(self, bool):
        """
        V.SetShowMultilayerView(bool)
        C++: virtual void SetShowMultilayerView(bool _arg)
        """
        ...
    
    def SetUseDimensionedArrayNames(self, bool):
        """
        V.SetUseDimensionedArrayNames(bool)
        C++: virtual void SetUseDimensionedArrayNames(bool _arg)
        
        If true, dimension info is included in the array name. For
        instance, "tracers" will become "tracers(Time, nCells, nVertLevels,
        nTracers)". This is useful for user-visible array selection, but
        is disabled by default for backwards compatibility.
        """
        ...
    
    def SetVerticalDimension(self, string):
        """
        V.SetVerticalDimension(string)
        C++: virtual void SetVerticalDimension(std::string _arg)
        
        Get/Set the name to the dimension that identifies the vertical
        dimension. Defaults to "nVertLevels".
        """
        ...
    
    def SetVerticalLevel(self, p_int):
        """
        V.SetVerticalLevel(int)
        C++: void SetVerticalLevel(int level)
        
        Convenience function for setting/querying
        [GS]etDimensionCurrentIndex for the dimension returned by
        GetVerticalDimension.
        """
        ...
    
    def UseDimensionedArrayNamesOff(self):
        """
        V.UseDimensionedArrayNamesOff()
        C++: virtual void UseDimensionedArrayNamesOff()
        
        If true, dimension info is included in the array name. For
        instance, "tracers" will become "tracers(Time, nCells, nVertLevels,
        nTracers)". This is useful for user-visible array selection, but
        is disabled by default for backwards compatibility.
        """
        ...
    
    def UseDimensionedArrayNamesOn(self):
        """
        V.UseDimensionedArrayNamesOn()
        C++: virtual void UseDimensionedArrayNamesOn()
        
        If true, dimension info is included in the array name. For
        instance, "tracers" will become "tracers(Time, nCells, nVertLevels,
        nTracers)". This is useful for user-visible array selection, but
        is disabled by default for backwards compatibility.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNetCDFCAMReader(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkNetCDFCAMReader - Read unstructured NetCDF CAM files.
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    Reads in a NetCDF CAM (Community Atmospheric Model) file and produces
    and unstructured grid.  The grid is actually unstructured in the X
    and Y directions and rectilinear in the Z direction. If we read one
    layer we produce quad cells otherwise we produce hex cells.  The
    reader requires 2 NetCDF files: the main file has all attributes, the
    connectivity file has point positions and cell connectivity
    information.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: static int CanReadFile(const char *fileName)
        
        Returns 1 if this file can be read and 0 if the file cannot be
        read. Because NetCDF CAM files come in pairs and we only check
        one of the files, the result is not definitive.  Invalid files
        may still return 1 although a valid file will never return 0.
        """
        ...
    
    def DisableAllPointArrays(self):
        """
        V.DisableAllPointArrays()
        C++: void DisableAllPointArrays()
        
        The following methods allow selective reading of variables. By
        default, ALL data variables on the nodes are read.
        """
        ...
    
    def EnableAllPointArrays(self):
        """
        V.EnableAllPointArrays()
        C++: void EnableAllPointArrays()
        
        The following methods allow selective reading of variables. By
        default, ALL data variables on the nodes are read.
        """
        ...
    
    def GetConnectivityFileName(self):
        """
        V.GetConnectivityFileName() -> string
        C++: virtual char *GetConnectivityFileName()
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetInterfaceLayerIndex(self):
        """
        V.GetInterfaceLayerIndex() -> int
        C++: virtual int GetInterfaceLayerIndex()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def GetInterfaceLayersRange(self):
        """
        V.GetInterfaceLayersRange() -> (int, int)
        C++: virtual int *GetInterfaceLayersRange()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def GetMidpointLayerIndex(self):
        """
        V.GetMidpointLayerIndex() -> int
        C++: virtual int GetMidpointLayerIndex()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def GetMidpointLayersRange(self):
        """
        V.GetMidpointLayersRange() -> (int, int)
        C++: virtual int *GetMidpointLayersRange()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays()
        
        The following methods allow selective reading of variables. By
        default, ALL data variables on the nodes are read.
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        The following methods allow selective reading of variables. By
        default, ALL data variables on the nodes are read.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        
        The following methods allow selective reading of variables. By
        default, ALL data variables on the nodes are read.
        """
        ...
    
    def GetSingleInterfaceLayer(self):
        """
        V.GetSingleInterfaceLayer() -> int
        C++: virtual vtkTypeBool GetSingleInterfaceLayer()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def GetSingleMidpointLayer(self):
        """
        V.GetSingleMidpointLayer() -> int
        C++: virtual vtkTypeBool GetSingleMidpointLayer()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def GetVerticalDimension(self):
        """
        V.GetVerticalDimension() -> int
        C++: virtual int GetVerticalDimension()
        
        Set whether to read a single layer, midpoint layers or interface
        layers. VERTICAL_DIMENSION_SINGLE_LAYER (0) indicates that only a
        single layer will be read in. The NetCDF variables loaded will be
        the ones with dimensions (time, ncol).
        VERTICAL_DIMENSION_MIDPOINT_LAYERS (1) indicates that variables
        defined on midpoint layers will be read in. These are variables
        with dimensions (time, lev, ncol).
        VERTICAL_DIMENSION_INTERFACE_LAYERS (2) indicates that variables
        defined on interface layers will be read in. These are variables
        with dimensions (time, ilev, ncol).
        """
        ...
    
    def GetVerticalDimensionMaxValue(self):
        """
        V.GetVerticalDimensionMaxValue() -> int
        C++: virtual int GetVerticalDimensionMaxValue()
        
        Set whether to read a single layer, midpoint layers or interface
        layers. VERTICAL_DIMENSION_SINGLE_LAYER (0) indicates that only a
        single layer will be read in. The NetCDF variables loaded will be
        the ones with dimensions (time, ncol).
        VERTICAL_DIMENSION_MIDPOINT_LAYERS (1) indicates that variables
        defined on midpoint layers will be read in. These are variables
        with dimensions (time, lev, ncol).
        VERTICAL_DIMENSION_INTERFACE_LAYERS (2) indicates that variables
        defined on interface layers will be read in. These are variables
        with dimensions (time, ilev, ncol).
        """
        ...
    
    def GetVerticalDimensionMinValue(self):
        """
        V.GetVerticalDimensionMinValue() -> int
        C++: virtual int GetVerticalDimensionMinValue()
        
        Set whether to read a single layer, midpoint layers or interface
        layers. VERTICAL_DIMENSION_SINGLE_LAYER (0) indicates that only a
        single layer will be read in. The NetCDF variables loaded will be
        the ones with dimensions (time, ncol).
        VERTICAL_DIMENSION_MIDPOINT_LAYERS (1) indicates that variables
        defined on midpoint layers will be read in. These are variables
        with dimensions (time, lev, ncol).
        VERTICAL_DIMENSION_INTERFACE_LAYERS (2) indicates that variables
        defined on interface layers will be read in. These are variables
        with dimensions (time, ilev, ncol).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNetCDFCAMReader
        C++: vtkNetCDFCAMReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNetCDFCAMReader
        C++: static vtkNetCDFCAMReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetConnectivityFileName(self, string):
        """
        V.SetConnectivityFileName(string)
        C++: void SetConnectivityFileName(const char *fileName)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fileName)
        """
        ...
    
    def SetInterfaceLayerIndex(self, p_int):
        """
        V.SetInterfaceLayerIndex(int)
        C++: virtual void SetInterfaceLayerIndex(int _arg)
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def SetMidpointLayerIndex(self, p_int):
        """
        V.SetMidpointLayerIndex(int)
        C++: virtual void SetMidpointLayerIndex(int _arg)
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        
        The following methods allow selective reading of variables. By
        default, ALL data variables on the nodes are read.
        """
        ...
    
    def SetSingleInterfaceLayer(self, p_int):
        """
        V.SetSingleInterfaceLayer(int)
        C++: virtual void SetSingleInterfaceLayer(vtkTypeBool _arg)
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def SetSingleMidpointLayer(self, p_int):
        """
        V.SetSingleMidpointLayer(int)
        C++: virtual void SetSingleMidpointLayer(vtkTypeBool _arg)
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def SetVerticalDimension(self, p_int):
        """
        V.SetVerticalDimension(int)
        C++: virtual void SetVerticalDimension(int _arg)
        
        Set whether to read a single layer, midpoint layers or interface
        layers. VERTICAL_DIMENSION_SINGLE_LAYER (0) indicates that only a
        single layer will be read in. The NetCDF variables loaded will be
        the ones with dimensions (time, ncol).
        VERTICAL_DIMENSION_MIDPOINT_LAYERS (1) indicates that variables
        defined on midpoint layers will be read in. These are variables
        with dimensions (time, lev, ncol).
        VERTICAL_DIMENSION_INTERFACE_LAYERS (2) indicates that variables
        defined on interface layers will be read in. These are variables
        with dimensions (time, ilev, ncol).
        """
        ...
    
    def SingleInterfaceLayerOff(self):
        """
        V.SingleInterfaceLayerOff()
        C++: virtual void SingleInterfaceLayerOff()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def SingleInterfaceLayerOn(self):
        """
        V.SingleInterfaceLayerOn()
        C++: virtual void SingleInterfaceLayerOn()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def SingleMidpointLayerOff(self):
        """
        V.SingleMidpointLayerOff()
        C++: virtual void SingleMidpointLayerOff()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def SingleMidpointLayerOn(self):
        """
        V.SingleMidpointLayerOn()
        C++: virtual void SingleMidpointLayerOn()
        
        If SingleXXXLayer is 1, we'll load only the layer specified by
        XXXLayerIndex.  Otherwise, we load all layers. We do that for
        midpoint layer variables ( which have dimension 'lev') or for
        interface layer variables (which have dimension 'ilev').
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    VerticalDimension = ...
    VERTICAL_DIMENSION_COUNT = ...
    VERTICAL_DIMENSION_INTERFACE_LAYERS = ...
    VERTICAL_DIMENSION_MIDPOINT_LAYERS = ...
    VERTICAL_DIMENSION_SINGLE_LAYER = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNetCDFReader(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkNetCDFReader - A superclass for reading netCDF files.
    
    Superclass: vtkDataObjectAlgorithm
    
    Subclass add conventions to the reader.  This class just outputs data
    into a multi block data set with a vtkImageData at each block.  A
    block is created for each variable except that variables with
    matching dimensions will be placed in the same block.
    """
    def ComputeArraySelection(self):
        """
        V.ComputeArraySelection() -> bool
        C++: bool ComputeArraySelection()
        
        Enables arrays in VariableArraySelection depending on Dimensions.
        Returns true if one variable matching Dimensions was found.
        """
        ...
    
    def GetAllDimensions(self):
        """
        V.GetAllDimensions() -> vtkStringArray
        C++: virtual vtkStringArray *GetAllDimensions()
        
        Returns an array with string encodings for the dimension
        combinations used in the variables.  The result is the same as
        GetVariableDimensions except that each entry in the array is
        unique (a set of dimensions is only given once even if it occurs
        for multiple variables) and the order is meaningless.
        """
        ...
    
    def GetAllVariableArrayNames(self):
        """
        V.GetAllVariableArrayNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetAllVariableArrayNames()
        
        Convenience method to get a list of variable arrays.  The length
        of the returned list is the same as GetNumberOfVariableArrays,
        and the string at each index i is the same as returned from
        GetVariableArrayname(i).
        """
        ...
    
    def GetCalendar(self):
        """
        V.GetCalendar() -> string
        C++: virtual char *GetCalendar()
        
        Access to the time dimensions units. Can be used by the udunits
        library to convert raw numerical time values into meaningful
        representations.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfVariableArrays(self):
        """
        V.GetNumberOfVariableArrays() -> int
        C++: virtual int GetNumberOfVariableArrays()
        
        Variable array selection.
        """
        ...
    
    def GetReplaceFillValueWithNan(self):
        """
        V.GetReplaceFillValueWithNan() -> int
        C++: virtual vtkTypeBool GetReplaceFillValueWithNan()
        
        If on, any float or double variable read that has a _FillValue
        attribute will have that fill value replaced with a not-a-number
        (NaN) value.  The advantage of setting these to NaN values is
        that, if implemented properly by the system and careful math
        operations are used, they can implicitly be ignored by
        calculations like finding the range of the values.  That said,
        this option should be used with caution as VTK does not fully
        support NaN values and therefore odd calculations may occur.  By
        default this is off.
        """
        ...
    
    def GetTimeUnits(self):
        """
        V.GetTimeUnits() -> string
        C++: virtual char *GetTimeUnits()
        
        Access to the time dimensions units. Can be used by the udunits
        library to convert raw numerical time values into meaningful
        representations.
        """
        ...
    
    def GetVariableArrayName(self, p_int):
        """
        V.GetVariableArrayName(int) -> string
        C++: virtual const char *GetVariableArrayName(int idx)
        
        Variable array selection.
        """
        ...
    
    def GetVariableArrayStatus(self, string):
        """
        V.GetVariableArrayStatus(string) -> int
        C++: virtual int GetVariableArrayStatus(const char *name)
        
        Variable array selection.
        """
        ...
    
    def GetVariableDimensions(self):
        """
        V.GetVariableDimensions() -> vtkStringArray
        C++: virtual vtkStringArray *GetVariableDimensions()
        
        Returns an array with string encodings for the dimensions used in
        each of the variables.  The indices in the returned array
        correspond to those used in the GetVariableArrayName method.  Two
        arrays with the same dimensions will have the same encoded string
        returned by this method.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNetCDFReader
        C++: vtkNetCDFReader *NewInstance()
        """
        ...
    
    def QueryArrayUnits(self, string):
        """
        V.QueryArrayUnits(string) -> string
        C++: std::string QueryArrayUnits(const char *ArrayName)
        
        Get units attached to a particular array in the netcdf file.
        """
        ...
    
    def ReplaceFillValueWithNanOff(self):
        """
        V.ReplaceFillValueWithNanOff()
        C++: virtual void ReplaceFillValueWithNanOff()
        
        If on, any float or double variable read that has a _FillValue
        attribute will have that fill value replaced with a not-a-number
        (NaN) value.  The advantage of setting these to NaN values is
        that, if implemented properly by the system and careful math
        operations are used, they can implicitly be ignored by
        calculations like finding the range of the values.  That said,
        this option should be used with caution as VTK does not fully
        support NaN values and therefore odd calculations may occur.  By
        default this is off.
        """
        ...
    
    def ReplaceFillValueWithNanOn(self):
        """
        V.ReplaceFillValueWithNanOn()
        C++: virtual void ReplaceFillValueWithNanOn()
        
        If on, any float or double variable read that has a _FillValue
        attribute will have that fill value replaced with a not-a-number
        (NaN) value.  The advantage of setting these to NaN values is
        that, if implemented properly by the system and careful math
        operations are used, they can implicitly be ignored by
        calculations like finding the range of the values.  That said,
        this option should be used with caution as VTK does not fully
        support NaN values and therefore odd calculations may occur.  By
        default this is off.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNetCDFReader
        C++: static vtkNetCDFReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDimensions(self, string):
        """
        V.SetDimensions(string)
        C++: virtual void SetDimensions(const char *dimensions)
        
        Loads the grid with the given dimensions.  The dimensions are
        encoded in a string that conforms to the same format as returned
        by GetVariableDimensions and GetAllDimensions.  This method is
        really a convenience method for SetVariableArrayStatus.  It turns
        on all variables that have the given dimensions and turns off all
        other variables.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *filename)
        """
        ...
    
    def SetReplaceFillValueWithNan(self, p_int):
        """
        V.SetReplaceFillValueWithNan(int)
        C++: virtual void SetReplaceFillValueWithNan(vtkTypeBool _arg)
        
        If on, any float or double variable read that has a _FillValue
        attribute will have that fill value replaced with a not-a-number
        (NaN) value.  The advantage of setting these to NaN values is
        that, if implemented properly by the system and careful math
        operations are used, they can implicitly be ignored by
        calculations like finding the range of the values.  That said,
        this option should be used with caution as VTK does not fully
        support NaN values and therefore odd calculations may occur.  By
        default this is off.
        """
        ...
    
    def SetVariableArrayStatus(self, string, p_int):
        """
        V.SetVariableArrayStatus(string, int)
        C++: virtual void SetVariableArrayStatus(const char *name,
            int status)
        
        Variable array selection.
        """
        ...
    
    def UpdateMetaData(self):
        """
        V.UpdateMetaData() -> int
        C++: int UpdateMetaData()
        
        Update the meta data from the current file.  Automatically called
        during the RequestInformation pipeline update stage.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNetCDFCFReader(vtkNetCDFReader):
    """
    vtkNetCDFCFReader - Reads netCDF files that follow the CF convention.
    
    Superclass: vtkNetCDFReader
    
    Details on this convention can be found at
    <http://cf-pcmdi.llnl.gov/>.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: static int CanReadFile(const char *filename)
        
        Returns true if the given file can be read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputType(self):
        """
        V.GetOutputType() -> int
        C++: virtual int GetOutputType()
        
        Set/get the data type of the output.  The index used is taken
        from the list of VTK data types in vtkType.h.  Valid types are
        VTK_IMAGE_DATA, VTK_RECTILINEAR_GRID, VTK_STRUCTURED_GRID, and
        VTK_UNSTRUCTURED_GRID.  In addition you can set the type to -1
        (the default), and this reader will pick the data type best
        suited for the dimensions being read.
        """
        ...
    
    def GetSphericalCoordinates(self):
        """
        V.GetSphericalCoordinates() -> int
        C++: virtual vtkTypeBool GetSphericalCoordinates()
        
        If on (the default), then 3D data with latitude/longitude
        dimensions will be read in as curvilinear data shaped like
        spherical coordinates. If false, then the data will always be
        read in Cartesian coordinates.
        """
        ...
    
    def GetVerticalBias(self):
        """
        V.GetVerticalBias() -> float
        C++: virtual double GetVerticalBias()
        
        The scale and bias of the vertical component of spherical
        coordinates.  It is common to write the vertical component with
        respect to something other than the center of the sphere (for
        example, the surface).  In this case, it might be necessary to
        scale and/or bias the vertical height.  The height will become
        height*scale + bias.  Keep in mind that if the positive attribute
        of the vertical dimension is down, then the height is negated. By
        default the scale is 1 and the bias is 0 (that is, no change). 
        The scaling will be adjusted if it results in invalid (negative)
        vertical values.
        """
        ...
    
    def GetVerticalScale(self):
        """
        V.GetVerticalScale() -> float
        C++: virtual double GetVerticalScale()
        
        The scale and bias of the vertical component of spherical
        coordinates.  It is common to write the vertical component with
        respect to something other than the center of the sphere (for
        example, the surface).  In this case, it might be necessary to
        scale and/or bias the vertical height.  The height will become
        height*scale + bias.  Keep in mind that if the positive attribute
        of the vertical dimension is down, then the height is negated. By
        default the scale is 1 and the bias is 0 (that is, no change). 
        The scaling will be adjusted if it results in invalid (negative)
        vertical values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNetCDFCFReader
        C++: vtkNetCDFCFReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNetCDFCFReader
        C++: static vtkNetCDFCFReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutputType(self, p_int):
        """
        V.SetOutputType(int)
        C++: virtual void SetOutputType(int type)
        
        Set/get the data type of the output.  The index used is taken
        from the list of VTK data types in vtkType.h.  Valid types are
        VTK_IMAGE_DATA, VTK_RECTILINEAR_GRID, VTK_STRUCTURED_GRID, and
        VTK_UNSTRUCTURED_GRID.  In addition you can set the type to -1
        (the default), and this reader will pick the data type best
        suited for the dimensions being read.
        """
        ...
    
    def SetOutputTypeToAutomatic(self):
        """
        V.SetOutputTypeToAutomatic()
        C++: void SetOutputTypeToAutomatic()
        
        Set/get the data type of the output.  The index used is taken
        from the list of VTK data types in vtkType.h.  Valid types are
        VTK_IMAGE_DATA, VTK_RECTILINEAR_GRID, VTK_STRUCTURED_GRID, and
        VTK_UNSTRUCTURED_GRID.  In addition you can set the type to -1
        (the default), and this reader will pick the data type best
        suited for the dimensions being read.
        """
        ...
    
    def SetOutputTypeToImage(self):
        """
        V.SetOutputTypeToImage()
        C++: void SetOutputTypeToImage()
        
        Set/get the data type of the output.  The index used is taken
        from the list of VTK data types in vtkType.h.  Valid types are
        VTK_IMAGE_DATA, VTK_RECTILINEAR_GRID, VTK_STRUCTURED_GRID, and
        VTK_UNSTRUCTURED_GRID.  In addition you can set the type to -1
        (the default), and this reader will pick the data type best
        suited for the dimensions being read.
        """
        ...
    
    def SetOutputTypeToRectilinear(self):
        """
        V.SetOutputTypeToRectilinear()
        C++: void SetOutputTypeToRectilinear()
        
        Set/get the data type of the output.  The index used is taken
        from the list of VTK data types in vtkType.h.  Valid types are
        VTK_IMAGE_DATA, VTK_RECTILINEAR_GRID, VTK_STRUCTURED_GRID, and
        VTK_UNSTRUCTURED_GRID.  In addition you can set the type to -1
        (the default), and this reader will pick the data type best
        suited for the dimensions being read.
        """
        ...
    
    def SetOutputTypeToStructured(self):
        """
        V.SetOutputTypeToStructured()
        C++: void SetOutputTypeToStructured()
        
        Set/get the data type of the output.  The index used is taken
        from the list of VTK data types in vtkType.h.  Valid types are
        VTK_IMAGE_DATA, VTK_RECTILINEAR_GRID, VTK_STRUCTURED_GRID, and
        VTK_UNSTRUCTURED_GRID.  In addition you can set the type to -1
        (the default), and this reader will pick the data type best
        suited for the dimensions being read.
        """
        ...
    
    def SetOutputTypeToUnstructured(self):
        """
        V.SetOutputTypeToUnstructured()
        C++: void SetOutputTypeToUnstructured()
        
        Set/get the data type of the output.  The index used is taken
        from the list of VTK data types in vtkType.h.  Valid types are
        VTK_IMAGE_DATA, VTK_RECTILINEAR_GRID, VTK_STRUCTURED_GRID, and
        VTK_UNSTRUCTURED_GRID.  In addition you can set the type to -1
        (the default), and this reader will pick the data type best
        suited for the dimensions being read.
        """
        ...
    
    def SetSphericalCoordinates(self, p_int):
        """
        V.SetSphericalCoordinates(int)
        C++: virtual void SetSphericalCoordinates(vtkTypeBool _arg)
        
        If on (the default), then 3D data with latitude/longitude
        dimensions will be read in as curvilinear data shaped like
        spherical coordinates. If false, then the data will always be
        read in Cartesian coordinates.
        """
        ...
    
    def SetVerticalBias(self, p_float):
        """
        V.SetVerticalBias(float)
        C++: virtual void SetVerticalBias(double _arg)
        
        The scale and bias of the vertical component of spherical
        coordinates.  It is common to write the vertical component with
        respect to something other than the center of the sphere (for
        example, the surface).  In this case, it might be necessary to
        scale and/or bias the vertical height.  The height will become
        height*scale + bias.  Keep in mind that if the positive attribute
        of the vertical dimension is down, then the height is negated. By
        default the scale is 1 and the bias is 0 (that is, no change). 
        The scaling will be adjusted if it results in invalid (negative)
        vertical values.
        """
        ...
    
    def SetVerticalScale(self, p_float):
        """
        V.SetVerticalScale(float)
        C++: virtual void SetVerticalScale(double _arg)
        
        The scale and bias of the vertical component of spherical
        coordinates.  It is common to write the vertical component with
        respect to something other than the center of the sphere (for
        example, the surface).  In this case, it might be necessary to
        scale and/or bias the vertical height.  The height will become
        height*scale + bias.  Keep in mind that if the positive attribute
        of the vertical dimension is down, then the height is negated. By
        default the scale is 1 and the bias is 0 (that is, no change). 
        The scaling will be adjusted if it results in invalid (negative)
        vertical values.
        """
        ...
    
    def SphericalCoordinatesOff(self):
        """
        V.SphericalCoordinatesOff()
        C++: virtual void SphericalCoordinatesOff()
        
        If on (the default), then 3D data with latitude/longitude
        dimensions will be read in as curvilinear data shaped like
        spherical coordinates. If false, then the data will always be
        read in Cartesian coordinates.
        """
        ...
    
    def SphericalCoordinatesOn(self):
        """
        V.SphericalCoordinatesOn()
        C++: virtual void SphericalCoordinatesOn()
        
        If on (the default), then 3D data with latitude/longitude
        dimensions will be read in as curvilinear data shaped like
        spherical coordinates. If false, then the data will always be
        read in Cartesian coordinates.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNetCDFPOPReader(__vtkmodules_vtkCommonExecutionModel.vtkRectilinearGridAlgorithm):
    """
    vtkNetCDFPOPReader - read NetCDF files .Author Joshua Wu 09.15.2009
    
    Superclass: vtkRectilinearGridAlgorithm
    
    vtkNetCDFPOPReader is a source object that reads NetCDF files. It
    should be able to read most any NetCDF file that wants to output a
    rectilinear grid.  The ordering of the variables is changed such that
    the NetCDF x, y, z directions correspond to the vtkRectilinearGrid z,
    y, x directions, respectively.  The striding is done with respect to
    the vtkRectilinearGrid ordering.  Additionally, the z coordinates of
    the vtkRectilinearGrid are negated so that the first slice/plane has
    the highest z-value and the last slice/plane has the lowest z-value.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The file to open
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfVariableArrays(self):
        """
        V.GetNumberOfVariableArrays() -> int
        C++: virtual int GetNumberOfVariableArrays()
        
        Variable array selection.
        """
        ...
    
    def GetStride(self):
        """
        V.GetStride() -> (int, int, int)
        C++: virtual int *GetStride()
        
        Enable subsampling in i,j and k dimensions in the
        vtkRectilinearGrid
        """
        ...
    
    def GetVariableArrayName(self, p_int):
        """
        V.GetVariableArrayName(int) -> string
        C++: virtual const char *GetVariableArrayName(int idx)
        
        Variable array selection.
        """
        ...
    
    def GetVariableArrayStatus(self, string):
        """
        V.GetVariableArrayStatus(string) -> int
        C++: virtual int GetVariableArrayStatus(const char *name)
        
        Variable array selection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNetCDFPOPReader
        C++: vtkNetCDFPOPReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNetCDFPOPReader
        C++: static vtkNetCDFPOPReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The file to open
        """
        ...
    
    def SetStride(self, p_int, p_int_1, p_int_2):
        """
        V.SetStride(int, int, int)
        C++: virtual void SetStride(int _arg1, int _arg2, int _arg3)
        V.SetStride((int, int, int))
        C++: virtual void SetStride(const int _arg[3])
        
        Enable subsampling in i,j and k dimensions in the
        vtkRectilinearGrid
        """
        ...
    
    def SetVariableArrayStatus(self, string, p_int):
        """
        V.SetVariableArrayStatus(string, int)
        C++: virtual void SetVariableArrayStatus(const char *name,
            int status)
        
        Variable array selection.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSLACParticleReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSLACParticleReader - A reader for a data format used by Omega3p,
    Tau3p, and several other tools used at the Standford Linear
    Accelerator Center (SLAC).
    
    Superclass: vtkPolyDataAlgorithm
    
    The underlying format uses netCDF to store arrays, but also imposes
    some conventions to store a list of particles in 3D space.
    
    This reader supports pieces, but in actuality only loads anything in
    piece 0.  All other pieces are empty.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: static int CanReadFile(const char *filename)
        
        Returns true if the given file can be read by this reader.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSLACParticleReader
        C++: vtkSLACParticleReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSLACParticleReader
        C++: static vtkSLACParticleReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSLACReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkSLACReader - A reader for a data format used by Omega3p, Tau3p,
    and several other tools used at the Standford Linear Accelerator
    Center (SLAC).
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    The underlying format uses netCDF to store arrays, but also imposes
    several conventions to form an unstructured grid of elements.
    """
    def AddModeFileName(self, string):
        """
        V.AddModeFileName(string)
        C++: virtual void AddModeFileName(const char *fname)
        
        There may be one mode file (usually for actual modes) or multiple
        mode files (which usually actually represent time series).  These
        methods set and clear the list of mode files (which can be a
        single mode file).
        """
        ...
    
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: static int CanReadFile(const char *filename)
        
        Returns true if the given file can be read by this reader.
        """
        ...
    
    def GetFrequencyScales(self):
        """
        V.GetFrequencyScales() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetFrequencyScales()
        
        NOTE: This is not thread-safe.
        """
        ...
    
    def GetMeshFileName(self):
        """
        V.GetMeshFileName() -> string
        C++: virtual char *GetMeshFileName()
        """
        ...
    
    def GetModeFileName(self, p_int):
        """
        V.GetModeFileName(int) -> string
        C++: virtual const char *GetModeFileName(unsigned int idx)
        
        There may be one mode file (usually for actual modes) or multiple
        mode files (which usually actually represent time series).  These
        methods set and clear the list of mode files (which can be a
        single mode file).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfModeFileNames(self):
        """
        V.GetNumberOfModeFileNames() -> int
        C++: virtual unsigned int GetNumberOfModeFileNames()
        
        There may be one mode file (usually for actual modes) or multiple
        mode files (which usually actually represent time series).  These
        methods set and clear the list of mode files (which can be a
        single mode file).
        """
        ...
    
    def GetNumberOfVariableArrays(self):
        """
        V.GetNumberOfVariableArrays() -> int
        C++: virtual int GetNumberOfVariableArrays()
        
        Variable array selection.
        """
        ...
    
    def GetPhaseShifts(self):
        """
        V.GetPhaseShifts() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetPhaseShifts()
        
        NOTE: This is not thread-safe.
        """
        ...
    
    def GetReadExternalSurface(self):
        """
        V.GetReadExternalSurface() -> int
        C++: virtual vtkTypeBool GetReadExternalSurface()
        
        If on, reads the external surfaces of the data set.  Set to on by
        default.
        """
        ...
    
    def GetReadInternalVolume(self):
        """
        V.GetReadInternalVolume() -> int
        C++: virtual vtkTypeBool GetReadInternalVolume()
        
        If on, reads the internal volume of the data set.  Set to off by
        default.
        """
        ...
    
    def GetReadMidpoints(self):
        """
        V.GetReadMidpoints() -> int
        C++: virtual vtkTypeBool GetReadMidpoints()
        
        If on, reads midpoint information for external surfaces and
        builds quadratic surface triangles.  Set to on by default.
        """
        ...
    
    def GetVariableArrayName(self, p_int):
        """
        V.GetVariableArrayName(int) -> string
        C++: virtual const char *GetVariableArrayName(int idx)
        
        Variable array selection.
        """
        ...
    
    def GetVariableArrayStatus(self, string):
        """
        V.GetVariableArrayStatus(string) -> int
        C++: virtual int GetVariableArrayStatus(const char *name)
        
        Variable array selection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IS_EXTERNAL_SURFACE(self):
        """
        V.IS_EXTERNAL_SURFACE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *IS_EXTERNAL_SURFACE()
        
        This key is attached to the metadata information of all data sets
        in the output that are part of the external surface.
        """
        ...
    
    def IS_INTERNAL_VOLUME(self):
        """
        V.IS_INTERNAL_VOLUME() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *IS_INTERNAL_VOLUME()
        
        This key is attached to the metadata information of all data sets
        in the output that are part of the internal volume.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSLACReader
        C++: vtkSLACReader *NewInstance()
        """
        ...
    
    def POINTS(self):
        """
        V.POINTS() -> vtkInformationObjectBaseKey
        C++: static vtkInformationObjectBaseKey *POINTS()
        
        All the data sets stored in the multiblock output share the same
        point data.  For convenience, the point coordinates (vtkPoints)
        and point data (vtkPointData) are saved under these keys in the
        vtkInformation of the output data set.
        """
        ...
    
    def POINT_DATA(self):
        """
        V.POINT_DATA() -> vtkInformationObjectBaseKey
        C++: static vtkInformationObjectBaseKey *POINT_DATA()
        
        All the data sets stored in the multiblock output share the same
        point data.  For convenience, the point coordinates (vtkPoints)
        and point data (vtkPointData) are saved under these keys in the
        vtkInformation of the output data set.
        """
        ...
    
    def ReadExternalSurfaceOff(self):
        """
        V.ReadExternalSurfaceOff()
        C++: virtual void ReadExternalSurfaceOff()
        
        If on, reads the external surfaces of the data set.  Set to on by
        default.
        """
        ...
    
    def ReadExternalSurfaceOn(self):
        """
        V.ReadExternalSurfaceOn()
        C++: virtual void ReadExternalSurfaceOn()
        
        If on, reads the external surfaces of the data set.  Set to on by
        default.
        """
        ...
    
    def ReadInternalVolumeOff(self):
        """
        V.ReadInternalVolumeOff()
        C++: virtual void ReadInternalVolumeOff()
        
        If on, reads the internal volume of the data set.  Set to off by
        default.
        """
        ...
    
    def ReadInternalVolumeOn(self):
        """
        V.ReadInternalVolumeOn()
        C++: virtual void ReadInternalVolumeOn()
        
        If on, reads the internal volume of the data set.  Set to off by
        default.
        """
        ...
    
    def ReadMidpointsOff(self):
        """
        V.ReadMidpointsOff()
        C++: virtual void ReadMidpointsOff()
        
        If on, reads midpoint information for external surfaces and
        builds quadratic surface triangles.  Set to on by default.
        """
        ...
    
    def ReadMidpointsOn(self):
        """
        V.ReadMidpointsOn()
        C++: virtual void ReadMidpointsOn()
        
        If on, reads midpoint information for external surfaces and
        builds quadratic surface triangles.  Set to on by default.
        """
        ...
    
    def RemoveAllModeFileNames(self):
        """
        V.RemoveAllModeFileNames()
        C++: virtual void RemoveAllModeFileNames()
        
        There may be one mode file (usually for actual modes) or multiple
        mode files (which usually actually represent time series).  These
        methods set and clear the list of mode files (which can be a
        single mode file).
        """
        ...
    
    def ResetFrequencyScales(self):
        """
        V.ResetFrequencyScales()
        C++: virtual void ResetFrequencyScales()
        
        Sets the scale factor for each mode. Each scale factor is reset
        to 1.
        """
        ...
    
    def ResetPhaseShifts(self):
        """
        V.ResetPhaseShifts()
        C++: virtual void ResetPhaseShifts()
        
        Sets the phase offset for each mode. Each shift is reset to 0.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSLACReader
        C++: static vtkSLACReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFrequencyScale(self, p_int, p_float):
        """
        V.SetFrequencyScale(int, float)
        C++: virtual void SetFrequencyScale(int index, double scale)
        
        Sets the scale factor for each mode. Each scale factor is reset
        to 1.
        """
        ...
    
    def SetMeshFileName(self, string):
        """
        V.SetMeshFileName(string)
        C++: virtual void SetMeshFileName(const char *_arg)
        """
        ...
    
    def SetPhaseShift(self, p_int, p_float):
        """
        V.SetPhaseShift(int, float)
        C++: virtual void SetPhaseShift(int index, double shift)
        
        Sets the phase offset for each mode. Each shift is reset to 0.
        """
        ...
    
    def SetReadExternalSurface(self, p_int):
        """
        V.SetReadExternalSurface(int)
        C++: virtual void SetReadExternalSurface(vtkTypeBool _arg)
        
        If on, reads the external surfaces of the data set.  Set to on by
        default.
        """
        ...
    
    def SetReadInternalVolume(self, p_int):
        """
        V.SetReadInternalVolume(int)
        C++: virtual void SetReadInternalVolume(vtkTypeBool _arg)
        
        If on, reads the internal volume of the data set.  Set to off by
        default.
        """
        ...
    
    def SetReadMidpoints(self, p_int):
        """
        V.SetReadMidpoints(int)
        C++: virtual void SetReadMidpoints(vtkTypeBool _arg)
        
        If on, reads midpoint information for external surfaces and
        builds quadratic surface triangles.  Set to on by default.
        """
        ...
    
    def SetVariableArrayStatus(self, string, p_int):
        """
        V.SetVariableArrayStatus(string, int)
        C++: virtual void SetVariableArrayStatus(const char *name,
            int status)
        
        Variable array selection.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    NUM_OUTPUTS = ...
    SURFACE_OUTPUT = ...
    VOLUME_OUTPUT = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
