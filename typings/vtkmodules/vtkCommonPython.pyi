"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkPythonArchiver(__vtkmodules_vtkCommonCore.vtkArchiver):
    """
    vtkPythonArchiver - A version of vtkArchiver that can be implemented
    in Python
    
    Superclass: vtkArchiver
    
    vtkPythonArchiver is an implementation of vtkArchiver that calls a
    Python object to do the actual work. It defers the following methods
    to Python:
    - OpenArchive()
    - CloseArchive()
    - InsertIntoArchive()
    - Contains()
    
    Python signature of these methods is as follows:
    - OpenArchive(self, vtkself) : vtkself is the vtk object
    - CloseArchive(self, vtkself)
    - InsertIntoArchive(self, vtkself, relativePath, data, size)
    - Contains()
    
    @sa
    vtkPythonArchiver
    """
    def CloseArchive(self):
        """
        V.CloseArchive()
        C++: void CloseArchive() override;
        
        Close the arhive.
        """
        ...
    
    def Contains(self, string):
        """
        V.Contains(string) -> bool
        C++: bool Contains(const std::string &relativePath) override;
        
        Checks if relativePath represents an entry in the archive.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InsertIntoArchive(self, string, string_1, p_int):
        """
        V.InsertIntoArchive(string, string, int)
        C++: void InsertIntoArchive(const std::string &relativePath,
            const char *data, std::size_t size) override;
        
        Insert data of size size into the archive at relativePath.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPythonArchiver
        C++: vtkPythonArchiver *NewInstance()
        """
        ...
    
    def OpenArchive(self):
        """
        V.OpenArchive()
        C++: void OpenArchive() override;
        
        Open the arhive for writing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPythonArchiver
        C++: static vtkPythonArchiver *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPythonObject(self, PyObject):
        """
        V.SetPythonObject(PyObject)
        C++: void SetPythonObject(PyObject *obj)
        
        Specify the Python object to use to perform the archiving. A
        reference will be taken on the object.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
