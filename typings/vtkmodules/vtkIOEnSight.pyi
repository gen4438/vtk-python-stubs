"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

IMPLICIT_STRUCTURED_MODE = ...
NON_SPARSE_MODE = ...
SINGLE_PROCESS_MODE = ...
SPARSE_MODE = ...
class EnsightReaderCellIdMode(int):
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class vtkGenericEnSightReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkGenericEnSightReader - class to read any type of EnSight files
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    The class vtkGenericEnSightReader allows the user to read an EnSight
    data set without a priori knowledge of what type of EnSight data set
    it is.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: virtual int CanReadFile(const char *casefilename)
        
        Returns IsEnSightFile() by default, but can be overridden
        """
        ...
    
    def DetermineEnSightVersion(self, p_int):
        """
        V.DetermineEnSightVersion(int) -> int
        C++: int DetermineEnSightVersion(int quiet=0)
        
        Reads the FORMAT part of the case file to determine whether this
        is an EnSight6 or EnSightGold data set.  Returns an identifier
        listed in the FileTypes enum or -1 if an error occurred or the
        file could not be identified as any EnSight type.
        """
        ...
    
    def GetByteOrder(self):
        """
        V.GetByteOrder() -> int
        C++: virtual int GetByteOrder()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def GetByteOrderAsString(self):
        """
        V.GetByteOrderAsString() -> string
        C++: const char *GetByteOrderAsString()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def GetCaseFileName(self):
        """
        V.GetCaseFileName() -> string
        C++: virtual char *GetCaseFileName()
        
        Set/Get the Case file name.
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        
        Get the name of the point or cell array with the given index in
        the input.
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def GetCellDataArraySelection(self):
        """
        V.GetCellDataArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetCellDataArraySelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetComplexDescription(self, p_int):
        """
        V.GetComplexDescription(int) -> string
        C++: const char *GetComplexDescription(int n)
        
        Get the nth description for a complex variable.
        """
        ...
    
    def GetComplexVariableType(self, p_int):
        """
        V.GetComplexVariableType(int) -> int
        C++: int GetComplexVariableType(int n)
        
        Get the variable type of variable n.
        """
        ...
    
    def GetDescription(self, p_int):
        """
        V.GetDescription(int) -> string
        C++: const char *GetDescription(int n)
        V.GetDescription(int, int) -> string
        C++: const char *GetDescription(int n, int type)
        
        Get the nth description for a non-complex variable.
        """
        ...
    
    def GetEnSightVersion(self):
        """
        V.GetEnSightVersion() -> int
        C++: virtual int GetEnSightVersion()
        
        Get the EnSight file version being read.
        """
        ...
    
    def GetFilePath(self):
        """
        V.GetFilePath() -> string
        C++: virtual char *GetFilePath()
        
        Set/Get the file path.
        """
        ...
    
    def GetGeometryFileName(self):
        """
        V.GetGeometryFileName() -> string
        C++: virtual char *GetGeometryFileName()
        
        Get the Geometry file name. Made public to allow access from apps
        requiring detailed info about the Data contents
        """
        ...
    
    def GetMaximumTimeValue(self):
        """
        V.GetMaximumTimeValue() -> float
        C++: virtual float GetMaximumTimeValue()
        
        Get the minimum or maximum time value for this data set.
        """
        ...
    
    def GetMinimumTimeValue(self):
        """
        V.GetMinimumTimeValue() -> float
        C++: virtual float GetMinimumTimeValue()
        
        Get the minimum or maximum time value for this data set.
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays()
        
        Get the number of point or cell arrays available in the input.
        """
        ...
    
    def GetNumberOfComplexScalarsPerElement(self):
        """
        V.GetNumberOfComplexScalarsPerElement() -> int
        C++: virtual int GetNumberOfComplexScalarsPerElement()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfComplexScalarsPerNode(self):
        """
        V.GetNumberOfComplexScalarsPerNode() -> int
        C++: virtual int GetNumberOfComplexScalarsPerNode()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfComplexVariables(self):
        """
        V.GetNumberOfComplexVariables() -> int
        C++: virtual int GetNumberOfComplexVariables()
        
        Get the number of variables listed in the case file.
        """
        ...
    
    def GetNumberOfComplexVectorsPerElement(self):
        """
        V.GetNumberOfComplexVectorsPerElement() -> int
        C++: virtual int GetNumberOfComplexVectorsPerElement()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfComplexVectorsPerNode(self):
        """
        V.GetNumberOfComplexVectorsPerNode() -> int
        C++: virtual int GetNumberOfComplexVectorsPerNode()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays()
        
        Get the number of point or cell arrays available in the input.
        """
        ...
    
    def GetNumberOfScalarsPerElement(self):
        """
        V.GetNumberOfScalarsPerElement() -> int
        C++: virtual int GetNumberOfScalarsPerElement()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfScalarsPerMeasuredNode(self):
        """
        V.GetNumberOfScalarsPerMeasuredNode() -> int
        C++: virtual int GetNumberOfScalarsPerMeasuredNode()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfScalarsPerNode(self):
        """
        V.GetNumberOfScalarsPerNode() -> int
        C++: virtual int GetNumberOfScalarsPerNode()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfTensorsSymmPerElement(self):
        """
        V.GetNumberOfTensorsSymmPerElement() -> int
        C++: virtual int GetNumberOfTensorsSymmPerElement()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfTensorsSymmPerNode(self):
        """
        V.GetNumberOfTensorsSymmPerNode() -> int
        C++: virtual int GetNumberOfTensorsSymmPerNode()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfVariables(self):
        """
        V.GetNumberOfVariables() -> int
        C++: virtual int GetNumberOfVariables()
        V.GetNumberOfVariables(int) -> int
        C++: int GetNumberOfVariables(int type)
        
        Get the number of variables listed in the case file.
        """
        ...
    
    def GetNumberOfVectorsPerElement(self):
        """
        V.GetNumberOfVectorsPerElement() -> int
        C++: virtual int GetNumberOfVectorsPerElement()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfVectorsPerMeasuredNode(self):
        """
        V.GetNumberOfVectorsPerMeasuredNode() -> int
        C++: virtual int GetNumberOfVectorsPerMeasuredNode()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetNumberOfVectorsPerNode(self):
        """
        V.GetNumberOfVectorsPerNode() -> int
        C++: virtual int GetNumberOfVectorsPerNode()
        
        Get the number of variables of a particular type.
        """
        ...
    
    def GetParticleCoordinatesByIndex(self):
        """
        V.GetParticleCoordinatesByIndex() -> int
        C++: virtual vtkTypeBool GetParticleCoordinatesByIndex()
        
        The MeasuredGeometryFile should list particle coordinates from
        0->N-1. If a file is loaded where point Ids are listed from 1-N
        the Id to points reference will be wrong and the data will be
        generated incorrectly. Setting ParticleCoordinatesByIndex to true
        will force all Id's to increment from 0->N-1 (relative to their
        order in the file) and regardless of the actual Id of the point.
        Warning, if the Points are listed in non sequential order then
        setting this flag will reorder them.
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        Get the name of the point or cell array with the given index in
        the input.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def GetPointDataArraySelection(self):
        """
        V.GetPointDataArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetPointDataArraySelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetReadAllVariables(self):
        """
        V.GetReadAllVariables() -> int
        C++: virtual vtkTypeBool GetReadAllVariables()
        
        Set/get the flag for whether to read all the variables
        """
        ...
    
    def GetReader(self):
        """
        V.GetReader() -> vtkGenericEnSightReader
        C++: vtkGenericEnSightReader *GetReader()
        """
        ...
    
    def GetTimeSets(self):
        """
        V.GetTimeSets() -> vtkDataArrayCollection
        C++: virtual vtkDataArrayCollection *GetTimeSets()
        
        Get the time values per time set
        """
        ...
    
    def GetTimeValue(self):
        """
        V.GetTimeValue() -> float
        C++: virtual float GetTimeValue()
        
        Set/Get the time value at which to get the value.
        """
        ...
    
    def GetVariableType(self, p_int):
        """
        V.GetVariableType(int) -> int
        C++: int GetVariableType(int n)
        
        Get the variable type of variable n.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsEnSightFile(self, string):
        """
        V.IsEnSightFile(string) -> bool
        C++: static bool IsEnSightFile(const char *casefilename)
        
        Returns true if the file pointed to by casefilename appears to be
        a valid EnSight case file.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericEnSightReader
        C++: vtkGenericEnSightReader *NewInstance()
        """
        ...
    
    def ParticleCoordinatesByIndexOff(self):
        """
        V.ParticleCoordinatesByIndexOff()
        C++: virtual void ParticleCoordinatesByIndexOff()
        
        The MeasuredGeometryFile should list particle coordinates from
        0->N-1. If a file is loaded where point Ids are listed from 1-N
        the Id to points reference will be wrong and the data will be
        generated incorrectly. Setting ParticleCoordinatesByIndex to true
        will force all Id's to increment from 0->N-1 (relative to their
        order in the file) and regardless of the actual Id of the point.
        Warning, if the Points are listed in non sequential order then
        setting this flag will reorder them.
        """
        ...
    
    def ParticleCoordinatesByIndexOn(self):
        """
        V.ParticleCoordinatesByIndexOn()
        C++: virtual void ParticleCoordinatesByIndexOn()
        
        The MeasuredGeometryFile should list particle coordinates from
        0->N-1. If a file is loaded where point Ids are listed from 1-N
        the Id to points reference will be wrong and the data will be
        generated incorrectly. Setting ParticleCoordinatesByIndex to true
        will force all Id's to increment from 0->N-1 (relative to their
        order in the file) and regardless of the actual Id of the point.
        Warning, if the Points are listed in non sequential order then
        setting this flag will reorder them.
        """
        ...
    
    def ReadAllVariablesOff(self):
        """
        V.ReadAllVariablesOff()
        C++: virtual void ReadAllVariablesOff()
        
        Set/get the flag for whether to read all the variables
        """
        ...
    
    def ReadAllVariablesOn(self):
        """
        V.ReadAllVariablesOn()
        C++: virtual void ReadAllVariablesOn()
        
        Set/get the flag for whether to read all the variables
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericEnSightReader
        C++: static vtkGenericEnSightReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetByteOrder(self, p_int):
        """
        V.SetByteOrder(int)
        C++: virtual void SetByteOrder(int _arg)
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def SetByteOrderToBigEndian(self):
        """
        V.SetByteOrderToBigEndian()
        C++: void SetByteOrderToBigEndian()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def SetByteOrderToLittleEndian(self):
        """
        V.SetByteOrderToLittleEndian()
        C++: void SetByteOrderToLittleEndian()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def SetCaseFileName(self, string):
        """
        V.SetCaseFileName(string)
        C++: void SetCaseFileName(const char *fileName)
        
        Set/Get the Case file name.
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def SetFilePath(self, string):
        """
        V.SetFilePath(string)
        C++: virtual void SetFilePath(const char *_arg)
        
        Set/Get the file path.
        """
        ...
    
    def SetParticleCoordinatesByIndex(self, p_int):
        """
        V.SetParticleCoordinatesByIndex(int)
        C++: virtual void SetParticleCoordinatesByIndex(vtkTypeBool _arg)
        
        The MeasuredGeometryFile should list particle coordinates from
        0->N-1. If a file is loaded where point Ids are listed from 1-N
        the Id to points reference will be wrong and the data will be
        generated incorrectly. Setting ParticleCoordinatesByIndex to true
        will force all Id's to increment from 0->N-1 (relative to their
        order in the file) and regardless of the actual Id of the point.
        Warning, if the Points are listed in non sequential order then
        setting this flag will reorder them.
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def SetReadAllVariables(self, p_int):
        """
        V.SetReadAllVariables(int)
        C++: virtual void SetReadAllVariables(vtkTypeBool _arg)
        
        Set/get the flag for whether to read all the variables
        """
        ...
    
    def SetTimeValue(self, p_float):
        """
        V.SetTimeValue(float)
        C++: virtual void SetTimeValue(float value)
        
        Set/Get the time value at which to get the value.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ENSIGHT_6 = ...
    ENSIGHT_6_BINARY = ...
    ENSIGHT_GOLD = ...
    ENSIGHT_GOLD_BINARY = ...
    ENSIGHT_MASTER_SERVER = ...
    FileTypes = ...
    FILE_BIG_ENDIAN = ...
    FILE_LITTLE_ENDIAN = ...
    FILE_UNKNOWN_ENDIAN = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkEnSightReader(vtkGenericEnSightReader):
    """
    vtkEnSightReader - superclass for EnSight file readers
    
    Superclass: vtkGenericEnSightReader
    """
    def GetMatchFileName(self):
        """
        V.GetMatchFileName() -> string
        C++: virtual char *GetMatchFileName()
        
        Get the Match file name. Made public to allow access from apps
        requiring detailed info about the Data contents
        """
        ...
    
    def GetMeasuredFileName(self):
        """
        V.GetMeasuredFileName() -> string
        C++: virtual char *GetMeasuredFileName()
        
        Get the Measured file name. Made public to allow access from apps
        requiring detailed info about the Data contents
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnSightReader
        C++: vtkEnSightReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnSightReader
        C++: static vtkEnSightReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BAR2 = ...
    BAR3 = ...
    BLOCK = ...
    COMPLEX_SCALAR_PER_ELEMENT = ...
    COMPLEX_SCALAR_PER_NODE = ...
    COMPLEX_VECTOR_PER_ELEMENT = ...
    COMPLEX_VECTOR_PER_NODE = ...
    COORDINATES = ...
    ELEMENT = ...
    ElementTypesList = ...
    HEXA20 = ...
    HEXA8 = ...
    NFACED = ...
    NSIDED = ...
    NUMBER_OF_ELEMENT_TYPES = ...
    PENTA15 = ...
    PENTA6 = ...
    POINT = ...
    PYRAMID13 = ...
    PYRAMID5 = ...
    QUAD4 = ...
    QUAD8 = ...
    SCALAR_PER_ELEMENT = ...
    SCALAR_PER_MEASURED_NODE = ...
    SCALAR_PER_NODE = ...
    SectionTypeList = ...
    TENSOR_SYMM_PER_ELEMENT = ...
    TENSOR_SYMM_PER_NODE = ...
    TETRA10 = ...
    TETRA4 = ...
    TRIA3 = ...
    TRIA6 = ...
    VariableTypesList = ...
    VECTOR_PER_ELEMENT = ...
    VECTOR_PER_MEASURED_NODE = ...
    VECTOR_PER_NODE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkEnSight6BinaryReader(vtkEnSightReader):
    """
    vtkEnSight6BinaryReader - class to read binary EnSight6 files
    
    Superclass: vtkEnSightReader
    
    vtkEnSight6BinaryReader is a class to read binary EnSight6 files into
    vtk. Because the different parts of the EnSight data can be of
    various data types, this reader produces multiple outputs, one per
    part in the input file. All variable information is being stored in
    field data.  The descriptions listed in the case file are used as the
    array names in the field data. For complex vector variables, the
    description is appended with _r (for the array of real values) and _i
    (for the array if imaginary values).  Complex scalar variables are
    stored as a single array with 2 components, real and imaginary,
    listed in that order.
    @warning
    You must manually call Update on this reader and then connect the
    rest of the pipeline because (due to the nature of the file format)
    it is not possible to know ahead of time how many outputs you will
    have or what types they will be. This reader can only handle static
    EnSight datasets (both static geometry and variables).
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnSight6BinaryReader
        C++: vtkEnSight6BinaryReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnSight6BinaryReader
        C++: static vtkEnSight6BinaryReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkEnSight6Reader(vtkEnSightReader):
    """
    vtkEnSight6Reader - class to read EnSight6 files
    
    Superclass: vtkEnSightReader
    
    vtkEnSight6Reader is a class to read EnSight6 files into vtk. Because
    the different parts of the EnSight data can be of various data types,
    this reader produces multiple outputs, one per part in the input
    file. All variable information is being stored in field data.  The
    descriptions listed in the case file are used as the array names in
    the field data. For complex vector variables, the description is
    appended with _r (for the array of real values) and _i (for the array
    if imaginary values).  Complex scalar variables are stored as a
    single array with 2 components, real and imaginary, listed in that
    order.
    @warning
    You must manually call Update on this reader and then connect the
    rest of the pipeline because (due to the nature of the file format)
    it is not possible to know ahead of time how many outputs you will
    have or what types they will be. This reader can only handle static
    EnSight datasets (both static geometry and variables).
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnSight6Reader
        C++: vtkEnSight6Reader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnSight6Reader
        C++: static vtkEnSight6Reader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkEnSightGoldBinaryReader(vtkEnSightReader):
    """
    vtkEnSightGoldBinaryReader - class to read binary EnSight Gold files
    
    Superclass: vtkEnSightReader
    
    vtkEnSightGoldBinaryReader is a class to read EnSight Gold files into
    vtk. Because the different parts of the EnSight data can be of
    various data types, this reader produces multiple outputs, one per
    part in the input file. All variable information is being stored in
    field data.  The descriptions listed in the case file are used as the
    array names in the field data. For complex vector variables, the
    description is appended with _r (for the array of real values) and _i
    (for the array if imaginary values).  Complex scalar variables are
    stored as a single array with 2 components, real and imaginary,
    listed in that order.
    @warning
    You must manually call Update on this reader and then connect the
    rest of the pipeline because (due to the nature of the file format)
    it is not possible to know ahead of time how many outputs you will
    have or what types they will be. This reader can only handle static
    EnSight datasets (both static geometry and variables).@par Thanks:
    Thanks to Yvan Fournier for providing the code to support nfaced
    elements.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnSightGoldBinaryReader
        C++: vtkEnSightGoldBinaryReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnSightGoldBinaryReader
        C++: static vtkEnSightGoldBinaryReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkEnSightGoldReader(vtkEnSightReader):
    """
    vtkEnSightGoldReader - class to read EnSight Gold files
    
    Superclass: vtkEnSightReader
    
    vtkEnSightGoldReader is a class to read EnSight Gold files into vtk.
    Because the different parts of the EnSight data can be of various
    data types, this reader produces multiple outputs, one per part in
    the input file. All variable information is being stored in field
    data.  The descriptions listed in the case file are used as the array
    names in the field data. For complex vector variables, the
    description is appended with _r (for the array of real values) and _i
    (for the array if imaginary values).  Complex scalar variables are
    stored as a single array with 2 components, real and imaginary,
    listed in that order.
    @warning
    You must manually call Update on this reader and then connect the
    rest of the pipeline because (due to the nature of the file format)
    it is not possible to know ahead of time how many outputs you will
    have or what types they will be. This reader can only handle static
    EnSight datasets (both static geometry and variables).@par Thanks:
    Thanks to Yvan Fournier for providing the code to support nfaced
    elements.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnSightGoldReader
        C++: vtkEnSightGoldReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnSightGoldReader
        C++: static vtkEnSightGoldReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkEnSightMasterServerReader(vtkGenericEnSightReader):
    """
    vtkEnSightMasterServerReader - reader for compound EnSight files
    
    Superclass: vtkGenericEnSightReader
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *fname) override;
        
        Returns IsEnSightFile() by default, but can be overridden
        """
        ...
    
    def DetermineFileName(self, p_int):
        """
        V.DetermineFileName(int) -> int
        C++: int DetermineFileName(int piece)
        
        Determine which file should be read for piece
        """
        ...
    
    def GetCurrentPiece(self):
        """
        V.GetCurrentPiece() -> int
        C++: virtual int GetCurrentPiece()
        
        Set or get the current piece.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPieceCaseFileName(self):
        """
        V.GetPieceCaseFileName() -> string
        C++: virtual char *GetPieceCaseFileName()
        
        Get the file name that will be read.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnSightMasterServerReader
        C++: vtkEnSightMasterServerReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnSightMasterServerReader
        C++: static vtkEnSightMasterServerReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCurrentPiece(self, p_int):
        """
        V.SetCurrentPiece(int)
        C++: virtual void SetCurrentPiece(int _arg)
        
        Set or get the current piece.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
