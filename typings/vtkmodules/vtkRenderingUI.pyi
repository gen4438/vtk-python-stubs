"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkGenericRenderWindowInteractor(__vtkmodules_vtkRenderingCore.vtkRenderWindowInteractor):
    """
    vtkGenericRenderWindowInteractor - platform-independent programmable
    render window interactor.
    
    Superclass: vtkRenderWindowInteractor
    
    vtkGenericRenderWindowInteractor provides a way to translate native
    mouse and keyboard events into vtk Events.   By calling the methods
    on this class, vtk events will be invoked.   This will allow
    scripting languages to use vtkInteractorStyles and 3D widgets.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTimerEventResetsTimer(self):
        """
        V.GetTimerEventResetsTimer() -> int
        C++: virtual vtkTypeBool GetTimerEventResetsTimer()
        
        Flag that indicates whether the TimerEvent method should call
        ResetTimer to simulate repeating timers with an endless stream of
        one shot timers. By default this flag is on and all repeating
        timers are implemented as a stream of sequential one shot timers.
        If the observer of CreateTimerEvent actually creates a "natively
        repeating" timer, setting this flag to off will prevent (perhaps
        many many) unnecessary calls to ResetTimer. Having the flag on by
        default means that "natively one shot" timers can be either one
        shot or repeating timers with no additional work. Also, "natively
        repeating" timers still work with the default setting, but with
        potentially many create and destroy calls.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericRenderWindowInteractor
        C++: vtkGenericRenderWindowInteractor *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericRenderWindowInteractor
        C++: static vtkGenericRenderWindowInteractor *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetTimerEventResetsTimer(self, p_int):
        """
        V.SetTimerEventResetsTimer(int)
        C++: virtual void SetTimerEventResetsTimer(vtkTypeBool _arg)
        
        Flag that indicates whether the TimerEvent method should call
        ResetTimer to simulate repeating timers with an endless stream of
        one shot timers. By default this flag is on and all repeating
        timers are implemented as a stream of sequential one shot timers.
        If the observer of CreateTimerEvent actually creates a "natively
        repeating" timer, setting this flag to off will prevent (perhaps
        many many) unnecessary calls to ResetTimer. Having the flag on by
        default means that "natively one shot" timers can be either one
        shot or repeating timers with no additional work. Also, "natively
        repeating" timers still work with the default setting, but with
        potentially many create and destroy calls.
        """
        ...
    
    def TimerEvent(self):
        """
        V.TimerEvent()
        C++: virtual void TimerEvent()
        
        Fire TimerEvent. SetEventInformation should be called just prior
        to calling any of these methods. These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def TimerEventResetsTimerOff(self):
        """
        V.TimerEventResetsTimerOff()
        C++: virtual void TimerEventResetsTimerOff()
        
        Flag that indicates whether the TimerEvent method should call
        ResetTimer to simulate repeating timers with an endless stream of
        one shot timers. By default this flag is on and all repeating
        timers are implemented as a stream of sequential one shot timers.
        If the observer of CreateTimerEvent actually creates a "natively
        repeating" timer, setting this flag to off will prevent (perhaps
        many many) unnecessary calls to ResetTimer. Having the flag on by
        default means that "natively one shot" timers can be either one
        shot or repeating timers with no additional work. Also, "natively
        repeating" timers still work with the default setting, but with
        potentially many create and destroy calls.
        """
        ...
    
    def TimerEventResetsTimerOn(self):
        """
        V.TimerEventResetsTimerOn()
        C++: virtual void TimerEventResetsTimerOn()
        
        Flag that indicates whether the TimerEvent method should call
        ResetTimer to simulate repeating timers with an endless stream of
        one shot timers. By default this flag is on and all repeating
        timers are implemented as a stream of sequential one shot timers.
        If the observer of CreateTimerEvent actually creates a "natively
        repeating" timer, setting this flag to off will prevent (perhaps
        many many) unnecessary calls to ResetTimer. Having the flag on by
        default means that "natively one shot" timers can be either one
        shot or repeating timers with no additional work. Also, "natively
        repeating" timers still work with the default setting, but with
        potentially many create and destroy calls.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXRenderWindowInteractor(__vtkmodules_vtkRenderingCore.vtkRenderWindowInteractor):
    """
    vtkXRenderWindowInteractor - an X event driven interface for a
    RenderWindow
    
    Superclass: vtkRenderWindowInteractor
    
    vtkXRenderWindowInteractor is a convenience object that provides
    event bindings to common graphics functions. For example, camera and
    actor functions such as zoom-in/zoom-out, azimuth, roll, and pan. IT
    is one of the window system specific subclasses of
    vtkRenderWindowInteractor. Please see vtkRenderWindowInteractor
    documentation for event bindings.
    
    @sa
    vtkRenderWindowInteractor
    """
    def BreakLoopFlagOff(self):
        """
        V.BreakLoopFlagOff()
        C++: void BreakLoopFlagOff()
        
        The BreakLoopFlag is checked in the Start() method. Setting it to
        anything other than zero will cause the interactor loop to
        terminate and return to the calling function.
        """
        ...
    
    def BreakLoopFlagOn(self):
        """
        V.BreakLoopFlagOn()
        C++: void BreakLoopFlagOn()
        
        The BreakLoopFlag is checked in the Start() method. Setting it to
        anything other than zero will cause the interactor loop to
        terminate and return to the calling function.
        """
        ...
    
    def Disable(self):
        """
        V.Disable()
        C++: void Disable() override;
        
        Enable/Disable interactions.  By default interactors are enabled
        when initialized.  Initialize() must be called prior to
        enabling/disabling interaction. These methods are used when a
        window/widget is being shared by multiple renderers and
        interactors.  This allows a "modal" display where one interactor
        is active when its data is to be displayed and all other
        interactors associated with the widget are disabled when their
        data is not displayed.
        """
        ...
    
    def Enable(self):
        """
        V.Enable()
        C++: void Enable() override;
        
        Enable/Disable interactions.  By default interactors are enabled
        when initialized.  Initialize() must be called prior to
        enabling/disabling interaction. These methods are used when a
        window/widget is being shared by multiple renderers and
        interactors.  This allows a "modal" display where one interactor
        is active when its data is to be displayed and all other
        interactors associated with the widget are disabled when their
        data is not displayed.
        """
        ...
    
    def GetBreakLoopFlag(self):
        """
        V.GetBreakLoopFlag() -> int
        C++: virtual int GetBreakLoopFlag()
        
        The BreakLoopFlag is checked in the Start() method. Setting it to
        anything other than zero will cause the interactor loop to
        terminate and return to the calling function.
        """
        ...
    
    def GetMousePosition(self, *int, **kwargs):
        """
        V.GetMousePosition([int, ...], [int, ...])
        C++: void GetMousePosition(int *x, int *y) override;
        
        Re-defines virtual function to get mouse position by querying
        X-server.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        Initializes the event handlers without an XtAppContext.  This is
        good for when you don't have a user interface, but you still want
        to have mouse interaction.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXRenderWindowInteractor
        C++: vtkXRenderWindowInteractor *NewInstance()
        """
        ...
    
    def ProcessEvents(self):
        """
        V.ProcessEvents()
        C++: void ProcessEvents() override;
        
        Run the event loop and return. This is provided so that you can
        implement your own event loop but yet use the vtk event handling
        as well.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXRenderWindowInteractor
        C++: static vtkXRenderWindowInteractor *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBreakLoopFlag(self, p_int):
        """
        V.SetBreakLoopFlag(int)
        C++: void SetBreakLoopFlag(int)
        
        The BreakLoopFlag is checked in the Start() method. Setting it to
        anything other than zero will cause the interactor loop to
        terminate and return to the calling function.
        """
        ...
    
    def TerminateApp(self):
        """
        V.TerminateApp()
        C++: void TerminateApp() override;
        
        Break the event loop on 'q','e' keypress. Want more ???
        """
        ...
    
    def UpdateSize(self, p_int, p_int_1):
        """
        V.UpdateSize(int, int)
        C++: void UpdateSize(int, int) override;
        
        Update the Size data member and set the associated RenderWindow's
        size.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
