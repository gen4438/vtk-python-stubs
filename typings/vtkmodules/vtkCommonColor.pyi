"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkColorSeries(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkColorSeries - stores a list of colors.
    
    Superclass: vtkObject
    
    The vtkColorSeries stores palettes of colors. There are several
    default palettes (or schemes) available and functions to control
    several aspects of what colors are returned. In essence a color
    scheme is set and then the number of colors and individual color
    values may be requested.
    
    For a web page of the default palettes, see: <a
    href="http://htmlpreview.github.io/?https://github.com/lorensen/VTKExamples/blob/master/src/Python/Visualization/VTKColorSeriesPatches.html"
    >VTKColorSeriesPatches. Use <a
    href="https://lorensen.github.io/VTKExamples/site/Python/Visualization/ColorSeriesPatches/"
    >ColorSeriesPatches to generate this table.
    
    It is also possible to add schemes beyond the default palettes.
    Whenever SetColorScheme is called with a string for which no palette
    already exists, a new, empty palette is created. You may then use
    SetNumberOfColors and SetColor to populate the palette. You may not
    extend default palettes by calling functions that alter a scheme; if
    called while a predefined palette is in use, they will create a new
    non-default scheme and populate it with the current palette before
    continuing.
    
    The "Brewer" palettes are courtesy of Cynthia A. Brewer (Dept. of
    Geography, Pennsylvania State University) and present under the
    Apache License. See the source code for details.
    """
    def AddColor(self, vtkColor3ub):
        """
        V.AddColor(vtkColor3ub)
        C++: virtual void AddColor(const vtkColor3ub &color)
        
        Adds the color to the end of the list.
        """
        ...
    
    def BuildLookupTable(self, vtkLookupTable, p_int):
        """
        V.BuildLookupTable(vtkLookupTable, int)
        C++: void BuildLookupTable(vtkLookupTable *lkup,
            int lutIndexing=CATEGORICAL)
        
        Populate a lookup table with all the colors in the current
        scheme.
        
        * The default behavior is to return categorical data. Set
          lutIndexing
        * to ORDINAL to return ordinal data. Any other value for
          lutIndexing
        * is treated as CATEGORICAL.
        """
        ...
    
    def ClearColors(self):
        """
        V.ClearColors()
        C++: virtual void ClearColors()
        
        Clears the list of colors.
        """
        ...
    
    def CreateLookupTable(self, p_int):
        """
        V.CreateLookupTable(int) -> vtkLookupTable
        C++: vtkLookupTable *CreateLookupTable(
            int lutIndexing=CATEGORICAL)
        
        Create a new lookup table with all the colors in the current
        scheme.
        
        * The caller is responsible for deleting the table after use.
        
        * The default behavior is to return categorical data. Set
          lutIndexing
        * to ORDINAL to return ordinal data. Any other value for
          lutIndexing
        * is treated as CATEGORICAL.
        """
        ...
    
    def DeepCopy(self, vtkColorSeries):
        """
        V.DeepCopy(vtkColorSeries)
        C++: virtual void DeepCopy(vtkColorSeries *chartColors)
        
        Make a deep copy of the supplied object.
        """
        ...
    
    def GetColor(self, p_int):
        """
        V.GetColor(int) -> vtkColor3ub
        C++: vtkColor3ub GetColor(int index)
        
        Get the color at the specified index. If the index is out of
        range then black will be returned.
        """
        ...
    
    def GetColorRepeating(self, p_int):
        """
        V.GetColorRepeating(int) -> vtkColor3ub
        C++: vtkColor3ub GetColorRepeating(int index)
        
        Get the color at the specified index. If the index is out of
        range then the call wraps around, i.e. uses the mod operator.
        """
        ...
    
    def GetColorScheme(self):
        """
        V.GetColorScheme() -> int
        C++: virtual int GetColorScheme()
        
        Return the ID of the color scheme currently in use.
        """
        ...
    
    def GetColorSchemeName(self):
        """
        V.GetColorSchemeName() -> string
        C++: virtual vtkStdString GetColorSchemeName()
        
        Get the color scheme that is currently being used.
        """
        ...
    
    def GetNumberOfColors(self):
        """
        V.GetNumberOfColors() -> int
        C++: virtual int GetNumberOfColors()
        
        Get the number of colors available in the current color scheme.
        """
        ...
    
    def GetNumberOfColorSchemes(self):
        """
        V.GetNumberOfColorSchemes() -> int
        C++: int GetNumberOfColorSchemes()
        
        Return the number of schemes currently defined.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InsertColor(self, p_int, vtkColor3ub):
        """
        V.InsertColor(int, vtkColor3ub)
        C++: virtual void InsertColor(int index, const vtkColor3ub &color)
        
        Inserts the color at the specified index in the list.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkColorSeries
        C++: vtkColorSeries *NewInstance()
        """
        ...
    
    def RemoveColor(self, p_int):
        """
        V.RemoveColor(int)
        C++: virtual void RemoveColor(int index)
        
        Removes the color at the specified index in the list.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkColorSeries
        C++: static vtkColorSeries *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColor(self, p_int, vtkColor3ub):
        """
        V.SetColor(int, vtkColor3ub)
        C++: virtual void SetColor(int index, const vtkColor3ub &color)
        
        Set the color at the specified index. Does nothing if the index
        is out of range.
        """
        ...
    
    def SetColorScheme(self, p_int):
        """
        V.SetColorScheme(int)
        C++: virtual void SetColorScheme(int scheme)
        
        Set the color scheme that should be used. The variant of this
        function that takes an integer should pass a number from those in
        the enum, or a value returned by the string variant. The variant
        that accepts a string returns the integer index of the resulting
        palette (whether it already existed or is newly-created).
        """
        ...
    
    def SetColorSchemeByName(self, string):
        """
        V.SetColorSchemeByName(string) -> int
        C++: virtual int SetColorSchemeByName(
            const vtkStdString &schemeName)
        
        Set the color scheme that should be used. The variant of this
        function that takes an integer should pass a number from those in
        the enum, or a value returned by the string variant. The variant
        that accepts a string returns the integer index of the resulting
        palette (whether it already existed or is newly-created).
        """
        ...
    
    def SetColorSchemeName(self, string):
        """
        V.SetColorSchemeName(string)
        C++: virtual void SetColorSchemeName(const vtkStdString &scheme)
        
        Set the name of the current color scheme
        """
        ...
    
    def SetNumberOfColors(self, p_int):
        """
        V.SetNumberOfColors(int)
        C++: virtual void SetNumberOfColors(int numColors)
        
        Set the number of colors to be stored in a non-default color
        scheme. Calling this function on a predefined color scheme will
        cause the scheme to be duplicated to a new custom scheme.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BLUES = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_10 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_11 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_3 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_4 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_5 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_6 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_7 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_8 = ...
    BREWER_DIVERGING_BROWN_BLUE_GREEN_9 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_10 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_11 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_3 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_4 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_5 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_6 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_7 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_8 = ...
    BREWER_DIVERGING_PURPLE_ORANGE_9 = ...
    BREWER_DIVERGING_SPECTRAL_10 = ...
    BREWER_DIVERGING_SPECTRAL_11 = ...
    BREWER_DIVERGING_SPECTRAL_3 = ...
    BREWER_DIVERGING_SPECTRAL_4 = ...
    BREWER_DIVERGING_SPECTRAL_5 = ...
    BREWER_DIVERGING_SPECTRAL_6 = ...
    BREWER_DIVERGING_SPECTRAL_7 = ...
    BREWER_DIVERGING_SPECTRAL_8 = ...
    BREWER_DIVERGING_SPECTRAL_9 = ...
    BREWER_QUALITATIVE_ACCENT = ...
    BREWER_QUALITATIVE_DARK2 = ...
    BREWER_QUALITATIVE_PAIRED = ...
    BREWER_QUALITATIVE_PASTEL1 = ...
    BREWER_QUALITATIVE_PASTEL2 = ...
    BREWER_QUALITATIVE_SET1 = ...
    BREWER_QUALITATIVE_SET2 = ...
    BREWER_QUALITATIVE_SET3 = ...
    BREWER_SEQUENTIAL_BLUE_GREEN_3 = ...
    BREWER_SEQUENTIAL_BLUE_GREEN_4 = ...
    BREWER_SEQUENTIAL_BLUE_GREEN_5 = ...
    BREWER_SEQUENTIAL_BLUE_GREEN_6 = ...
    BREWER_SEQUENTIAL_BLUE_GREEN_7 = ...
    BREWER_SEQUENTIAL_BLUE_GREEN_8 = ...
    BREWER_SEQUENTIAL_BLUE_GREEN_9 = ...
    BREWER_SEQUENTIAL_BLUE_PURPLE_3 = ...
    BREWER_SEQUENTIAL_BLUE_PURPLE_4 = ...
    BREWER_SEQUENTIAL_BLUE_PURPLE_5 = ...
    BREWER_SEQUENTIAL_BLUE_PURPLE_6 = ...
    BREWER_SEQUENTIAL_BLUE_PURPLE_7 = ...
    BREWER_SEQUENTIAL_BLUE_PURPLE_8 = ...
    BREWER_SEQUENTIAL_BLUE_PURPLE_9 = ...
    BREWER_SEQUENTIAL_YELLOW_ORANGE_BROWN_3 = ...
    BREWER_SEQUENTIAL_YELLOW_ORANGE_BROWN_4 = ...
    BREWER_SEQUENTIAL_YELLOW_ORANGE_BROWN_5 = ...
    BREWER_SEQUENTIAL_YELLOW_ORANGE_BROWN_6 = ...
    BREWER_SEQUENTIAL_YELLOW_ORANGE_BROWN_7 = ...
    BREWER_SEQUENTIAL_YELLOW_ORANGE_BROWN_8 = ...
    BREWER_SEQUENTIAL_YELLOW_ORANGE_BROWN_9 = ...
    CATEGORICAL = ...
    CITRUS = ...
    ColorSchemes = ...
    COOL = ...
    CUSTOM = ...
    LUTMode = ...
    ORDINAL = ...
    SPECTRUM = ...
    WARM = ...
    WILD_FLOWER = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNamedColors(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkNamedColors - A class holding colors and their names.
    
    Superclass: vtkObject
    
    For a web page of VTK Named Colors and their RGB values, see: <a
    href="http://htmlpreview.github.io/?https://github.com/lorensen/VTKExamples/blob/master/src/Python/Visualization/VTKNamedColorPatches.html"
    >VTKNamedColorPatches. Use <a
    href="https://lorensen.github.io/VTKExamples/site/Python/Visualization/NamedColorPatches/"
    >NamedColorPatches to generate this table.
    
    Color names are case insensitive and are stored as lower-case names
    along with a 4-element array whose elements are red, green, blue and
    alpha, in that order, corresponding to the RGBA value of the color.
    
    It is assumed that if the RGBA values are unsigned char then each
    element lies in the range 0...255 and if the RGBA values are double
    then each element lies in the range 0...1.
    
    The colors and names are those in <a
    href="http://en.wikipedia.org/wiki/Web_colors">Web colorsthat are
    derived from the CSS3 specification: <a
    href="http://www.w3.org/TR/css3-color/#svg-color">CSS Color Module
    Level 3In this table common synonyms such as cyan/aqua and
    magenta/fuchsia are also included.
    
    Also included in this class are names and colors taken from
    Wrapping/Tcl/vtktesting/colors.tcl and
    Wrapping/Python/vtk/util/colors.py.
    
    Web colors and names in <a
    href="http://en.wikipedia.org/wiki/Web_colors">Web colorstake
    precedence over those in colors.py. One consequence of this is that
    while colors.py specifies green as equivalent to (0,255,0), the web
    color standard defines it as (0,128,0).
    
    The SetColor methods will overwrite existing colors if the name of
    the color being set matches an existing color. Note that
    ColorExists() can be used to test for existence of the color being
    set.
    
    In the case of the GetColor methods returning doubles, alternative
    versions, identified by the letters RGB in the names, are provided.
    These get functions return just the red, green and blue components of
    a color.
    
    The class also provides methods for defining a color through an HTML
    color string. The following formats are supported:
    
    - #RGB                  (3-digit hexadecimal number, where #4F2 is a
      shortcut for #44FF22)
    - #RRGGBB               (6-digit hexadecimal number)
    - rgb(r, g, b)          (where r, g, b are in 0..255 or percentage
      values)
    - rgba(r, g, b, a)      (where r, g, b, are in 0..255 or percentage
      values, a is in 0.0..1.0)
    - a CSS3 color name     (e.g. "steelblue")
    """
    def ColorExists(self, string):
        """
        V.ColorExists(string) -> bool
        C++: bool ColorExists(const vtkStdString &name)
        
        Return true if the color exists.
        """
        ...
    
    def GetColor(self, string, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.GetColor(string, int, int, int, int)
        C++: void GetColor(const vtkStdString &name, unsigned char &r,
            unsigned char &g, unsigned char &b, unsigned char &a)
        V.GetColor(string, [int, int, int, int])
        C++: void GetColor(const vtkStdString &name,
            unsigned char rgba[4])
        V.GetColor(string, vtkColor4ub)
        C++: void GetColor(const vtkStdString &name, vtkColor4ub &rgba)
        V.GetColor(string, float, float, float, float)
        C++: void GetColor(const vtkStdString &name, double &r, double &g,
             double &b, double &a)
        V.GetColor(string, [float, float, float, float])
        C++: void GetColor(const vtkStdString &name, double rgba[4])
        V.GetColor(string, vtkColor4d)
        C++: void GetColor(const vtkStdString &name, vtkColor4d &rgba)
        V.GetColor(string, float, float, float)
        C++: void GetColor(const vtkStdString &name, double &r, double &g,
             double &b)
        V.GetColor(string, vtkColor3ub)
        C++: void GetColor(const vtkStdString &name, vtkColor3ub &rgb)
        V.GetColor(string, vtkColor3d)
        C++: void GetColor(const vtkStdString &name, vtkColor3d &rgb)
        
        Get the color by name. The name is treated as being
        case-insensitive. The color is returned as four unsigned char
        variables: red, green, blue, alpha. The range of each element is
        0...255. The color black is returned if the color is not found.
        """
        ...
    
    def GetColor3d(self, string):
        """
        V.GetColor3d(string) -> vtkColor3d
        C++: vtkColor3d GetColor3d(const vtkStdString &name)
        
        Get the color by name. The name is treated as being
        case-insensitive. The color is returned as a vtkColor3d class.
        The color black is returned if the color is not found.
        """
        ...
    
    def GetColor3ub(self, string):
        """
        V.GetColor3ub(string) -> vtkColor3ub
        C++: vtkColor3ub GetColor3ub(const vtkStdString &name)
        
        Get the color by name. The name is treated as being
        case-insensitive. The color is returned as a vtkColor3ub class.
        The color black is returned if the color is not found.
        """
        ...
    
    def GetColor4d(self, string):
        """
        V.GetColor4d(string) -> vtkColor4d
        C++: vtkColor4d GetColor4d(const vtkStdString &name)
        
        Get the color by name. The name is treated as being
        case-insensitive. The color is returned as a vtkColor4d class.
        The color black is returned if the color is not found.
        """
        ...
    
    def GetColor4ub(self, string):
        """
        V.GetColor4ub(string) -> vtkColor4ub
        C++: vtkColor4ub GetColor4ub(const vtkStdString &name)
        
        Get the color by name. The name is treated as being
        case-insensitive. The color is returned as a vtkColor4ub class.
        The color black is returned if the color is not found.
        """
        ...
    
    def GetColorNames(self):
        """
        V.GetColorNames() -> string
        C++: vtkStdString GetColorNames()
        V.GetColorNames(vtkStringArray)
        C++: void GetColorNames(vtkStringArray *colorNames)
        
        Return a string of color names with each name delimited by a line
        feed. This is easily parsed by the user into whatever data
        structure they require. Examples for parsing are provided in:
        TestNamedColors.cxx and TestNamedColorsIntegration.py
        """
        ...
    
    def GetColorRGB(self, string, p_float=..., p_float=..., p_float=...):
        """
        V.GetColorRGB(string, [float, float, float])
        C++: void GetColorRGB(const vtkStdString &name, double rgb[3])
        
        Get the color by name. The name is treated as being
        case-insensitive. The color is returned as a double array: [red,
        green, blue]. The range of each element is 0...1. The color black
        is returned if the color is not found.
        """
        ...
    
    def GetNumberOfColors(self):
        """
        V.GetNumberOfColors() -> int
        C++: int GetNumberOfColors()
        
        Get the number of colors.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSynonyms(self):
        """
        V.GetSynonyms() -> string
        C++: vtkStdString GetSynonyms()
        
        Return a string of synonyms such as cyan/aqua and
        magenta/fuchsia. The string is formatted such that a single line
        feed delimits each color in the synonym and a double line feed
        delimits each synonym. Warning this could take a long time for
        very large color maps. This is easily parsed by the user into
        whatever data structure they require.
        """
        ...
    
    def HTMLColorToRGB(self, string):
        """
        V.HTMLColorToRGB(string) -> vtkColor3ub
        C++: vtkColor3ub HTMLColorToRGB(const vtkStdString &colorString)
        
        Return a vtkColor3ub instance from an HTML color string in any of
        the following formats:
        - #RGB
        - #RRGGBB
        - rgb(r, g, b)
        - rgba(r, g, b, a)
        - a CSS3 color name, e.g. "steelblue" If the string argument
          defines a color using one of the above formats the method
          returns the successfully parsed color else returns the color
          black.
        """
        ...
    
    def HTMLColorToRGBA(self, string):
        """
        V.HTMLColorToRGBA(string) -> vtkColor4ub
        C++: vtkColor4ub HTMLColorToRGBA(const vtkStdString &colorString)
        
        Return a vtkColor4ub instance from an HTML color string in any of
        the following formats:
        - #RGB
        - #RRGGBB
        - rgb(r, g, b)
        - rgba(r, g, b, a)
        - a CSS3 color name, e.g. "steelblue" If the string argument
          defines a color using one of the above formats the method
          returns the successfully parsed color else returns a color
          equal to `rgba(0, 0, 0, 0)`.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNamedColors
        C++: vtkNamedColors *NewInstance()
        """
        ...
    
    def RemoveColor(self, string):
        """
        V.RemoveColor(string)
        C++: void RemoveColor(const vtkStdString &name)
        
        Remove the color by name. The name is treated as being
        case-insensitive. Examples for parsing are provided in:
        TestNamedColors.cxx and TestNamedColorsIntegration.py
        """
        ...
    
    def ResetColors(self):
        """
        V.ResetColors()
        C++: void ResetColors()
        
        Reset the colors in the color map to the original colors. Any
        colors inserted by the user will be lost.
        """
        ...
    
    def RGBAToHTMLColor(self, vtkColor4ub):
        """
        V.RGBAToHTMLColor(vtkColor4ub) -> string
        C++: vtkStdString RGBAToHTMLColor(const vtkColor4ub &rgba)
        
        Given a vtkColor4ub instance as input color return a valid HTML
        color string in the `rgba(r, g, b, a)` format.
        """
        ...
    
    def RGBToHTMLColor(self, vtkColor3ub):
        """
        V.RGBToHTMLColor(vtkColor3ub) -> string
        C++: vtkStdString RGBToHTMLColor(const vtkColor3ub &rgb)
        
        Given a vtkColor3ub instance as input color return a valid HTML
        color string in the `#RRGGBB` format.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNamedColors
        C++: static vtkNamedColors *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColor(self, string, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.SetColor(string, int, int, int, int)
        C++: virtual void SetColor(const vtkStdString &name,
            const unsigned char &r, const unsigned char &g,
            const unsigned char &b, const unsigned char &a=255)
        V.SetColor(string, float, float, float, float)
        C++: virtual void SetColor(const vtkStdString &name,
            const double &r, const double &g, const double &b,
            const double &a=1)
        V.SetColor(string, (int, int, int, int))
        C++: virtual void SetColor(const vtkStdString &name,
            const unsigned char rgba[4])
        V.SetColor(string, vtkColor4ub)
        C++: virtual void SetColor(const vtkStdString &name,
            const vtkColor4ub &rgba)
        V.SetColor(string, vtkColor3ub)
        C++: virtual void SetColor(const vtkStdString &name,
            const vtkColor3ub &rgb)
        V.SetColor(string, (float, float, float, float))
        C++: virtual void SetColor(const vtkStdString &name,
            const double rgba[4])
        V.SetColor(string, vtkColor4d)
        C++: virtual void SetColor(const vtkStdString &name,
            const vtkColor4d &rgba)
        V.SetColor(string, vtkColor3d)
        C++: virtual void SetColor(const vtkStdString &name,
            const vtkColor3d &rgb)
        V.SetColor(string, string)
        C++: void SetColor(const vtkStdString &name,
            const vtkStdString &htmlString)
        
        Set the color by name. The name is treated as being
        case-insensitive. The range of each color is 0...255. No color is
        set if the name is empty.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
