"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

VTK_DEFAULT_NUMBER_OF_RADIAL_AXES = ...
VTK_IV_COLUMN = ...
VTK_IV_ROW = ...
VTK_MAXIMUM_NUMBER_OF_POLAR_AXIS_TICKS = ...
VTK_MAXIMUM_NUMBER_OF_RADIAL_AXES = ...
VTK_MAXIMUM_RATIO = ...
VTK_ORIENT_HORIZONTAL = ...
VTK_ORIENT_VERTICAL = ...
VTK_PLOT_FIELD_DATA = ...
VTK_PLOT_NORMALS = ...
VTK_PLOT_SCALARS = ...
VTK_PLOT_TCOORDS = ...
VTK_PLOT_TENSORS = ...
VTK_PLOT_VECTORS = ...
VTK_POLAR_ARC_RESOLUTION_PER_DEG = ...
VTK_XYPLOT_ARC_LENGTH = ...
VTK_XYPLOT_COLUMN = ...
VTK_XYPLOT_INDEX = ...
VTK_XYPLOT_NORMALIZED_ARC_LENGTH = ...
VTK_XYPLOT_ROW = ...
VTK_XYPLOT_VALUE = ...
VTK_XYPLOT_Y_AXIS_HCENTER = ...
VTK_XYPLOT_Y_AXIS_TOP = ...
VTK_XYPLOT_Y_AXIS_VCENTER = ...
class vtkAnnotatedCubeActor(__vtkmodules_vtkRenderingCore.vtkProp3D):
    """
    vtkAnnotatedCubeActor - a 3D cube with face labels
    
    Superclass: vtkProp3D
    
    vtkAnnotatedCubeActor is a hybrid 3D actor used to represent an
    anatomical orientation marker in a scene.  The class consists of a 3D
    unit cube centered on the origin with each face labelled in
    correspondence to a particular coordinate direction.  For example,
    with Cartesian directions, the user defined text labels could be: +X,
    -X, +Y, -Y, +Z, -Z, while for anatomical directions: A, P, L, R, S,
    I.  Text is automatically centered on each cube face and is not
    restriceted to single characters. In addition to or in replace of a
    solid text label representation, the outline edges of the labels can
    be displayed.  The individual properties of the cube, face labels and
    text outlines can be manipulated as can their visibility.
    
    @warning
    vtkAnnotatedCubeActor is primarily intended for use with
    vtkOrientationMarkerWidget. The cube face text is generated by
    vtkVectorText and therefore the font attributes are restricted.
    
    @sa
    vtkAxesActor vtkOrientationMarkerWidget vtkVectorText
    """
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        For some exporters and other other operations we must be able to
        collect all the actors or volumes. These methods are used in that
        process.
        """
        ...
    
    def GetAssembly(self):
        """
        V.GetAssembly() -> vtkAssembly
        C++: vtkAssembly *GetAssembly()
        
        Get the assembly so that user supplied transforms can be applied
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        (The method GetBounds(double bounds[6]) is available from the
        superclass.)
        """
        ...
    
    def GetCubeProperty(self):
        """
        V.GetCubeProperty() -> vtkProperty
        C++: vtkProperty *GetCubeProperty()
        
        Get the cube properties.
        """
        ...
    
    def GetCubeVisibility(self):
        """
        V.GetCubeVisibility() -> int
        C++: int GetCubeVisibility()
        
        Enable/disable drawing the cube.
        """
        ...
    
    def GetFaceTextScale(self):
        """
        V.GetFaceTextScale() -> float
        C++: virtual double GetFaceTextScale()
        
        Set/Get the scale factor for the face text
        """
        ...
    
    def GetFaceTextVisibility(self):
        """
        V.GetFaceTextVisibility() -> int
        C++: int GetFaceTextVisibility()
        
        Enable/disable drawing the vector text.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the actors mtime plus consider its properties and texture if
        set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTextEdgesProperty(self):
        """
        V.GetTextEdgesProperty() -> vtkProperty
        C++: vtkProperty *GetTextEdgesProperty()
        
        Get the text edges properties.
        """
        ...
    
    def GetTextEdgesVisibility(self):
        """
        V.GetTextEdgesVisibility() -> int
        C++: int GetTextEdgesVisibility()
        
        Enable/disable drawing the vector text edges.
        """
        ...
    
    def GetXFaceTextRotation(self):
        """
        V.GetXFaceTextRotation() -> float
        C++: virtual double GetXFaceTextRotation()
        
        Augment individual face text orientations.
        """
        ...
    
    def GetXMinusFaceProperty(self):
        """
        V.GetXMinusFaceProperty() -> vtkProperty
        C++: vtkProperty *GetXMinusFaceProperty()
        
        Get the individual face text properties.
        """
        ...
    
    def GetXMinusFaceText(self):
        """
        V.GetXMinusFaceText() -> string
        C++: virtual char *GetXMinusFaceText()
        
        Set/get the face text.
        """
        ...
    
    def GetXPlusFaceProperty(self):
        """
        V.GetXPlusFaceProperty() -> vtkProperty
        C++: vtkProperty *GetXPlusFaceProperty()
        
        Get the individual face text properties.
        """
        ...
    
    def GetXPlusFaceText(self):
        """
        V.GetXPlusFaceText() -> string
        C++: virtual char *GetXPlusFaceText()
        
        Set/get the face text.
        """
        ...
    
    def GetYFaceTextRotation(self):
        """
        V.GetYFaceTextRotation() -> float
        C++: virtual double GetYFaceTextRotation()
        
        Augment individual face text orientations.
        """
        ...
    
    def GetYMinusFaceProperty(self):
        """
        V.GetYMinusFaceProperty() -> vtkProperty
        C++: vtkProperty *GetYMinusFaceProperty()
        
        Get the individual face text properties.
        """
        ...
    
    def GetYMinusFaceText(self):
        """
        V.GetYMinusFaceText() -> string
        C++: virtual char *GetYMinusFaceText()
        
        Set/get the face text.
        """
        ...
    
    def GetYPlusFaceProperty(self):
        """
        V.GetYPlusFaceProperty() -> vtkProperty
        C++: vtkProperty *GetYPlusFaceProperty()
        
        Get the individual face text properties.
        """
        ...
    
    def GetYPlusFaceText(self):
        """
        V.GetYPlusFaceText() -> string
        C++: virtual char *GetYPlusFaceText()
        
        Set/get the face text.
        """
        ...
    
    def GetZFaceTextRotation(self):
        """
        V.GetZFaceTextRotation() -> float
        C++: virtual double GetZFaceTextRotation()
        
        Augment individual face text orientations.
        """
        ...
    
    def GetZMinusFaceProperty(self):
        """
        V.GetZMinusFaceProperty() -> vtkProperty
        C++: vtkProperty *GetZMinusFaceProperty()
        
        Get the individual face text properties.
        """
        ...
    
    def GetZMinusFaceText(self):
        """
        V.GetZMinusFaceText() -> string
        C++: virtual char *GetZMinusFaceText()
        
        Set/get the face text.
        """
        ...
    
    def GetZPlusFaceProperty(self):
        """
        V.GetZPlusFaceProperty() -> vtkProperty
        C++: vtkProperty *GetZPlusFaceProperty()
        
        Get the individual face text properties.
        """
        ...
    
    def GetZPlusFaceText(self):
        """
        V.GetZPlusFaceText() -> string
        C++: virtual char *GetZPlusFaceText()
        
        Set/get the face text.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAnnotatedCubeActor
        C++: vtkAnnotatedCubeActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Support the standard render methods.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Support the standard render methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAnnotatedCubeActor
        C++: static vtkAnnotatedCubeActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCubeVisibility(self, p_int):
        """
        V.SetCubeVisibility(int)
        C++: void SetCubeVisibility(int)
        
        Enable/disable drawing the cube.
        """
        ...
    
    def SetFaceTextScale(self, p_float):
        """
        V.SetFaceTextScale(float)
        C++: void SetFaceTextScale(double)
        
        Set/Get the scale factor for the face text
        """
        ...
    
    def SetFaceTextVisibility(self, p_int):
        """
        V.SetFaceTextVisibility(int)
        C++: void SetFaceTextVisibility(int)
        
        Enable/disable drawing the vector text.
        """
        ...
    
    def SetTextEdgesVisibility(self, p_int):
        """
        V.SetTextEdgesVisibility(int)
        C++: void SetTextEdgesVisibility(int)
        
        Enable/disable drawing the vector text edges.
        """
        ...
    
    def SetXFaceTextRotation(self, p_float):
        """
        V.SetXFaceTextRotation(float)
        C++: virtual void SetXFaceTextRotation(double _arg)
        
        Augment individual face text orientations.
        """
        ...
    
    def SetXMinusFaceText(self, string):
        """
        V.SetXMinusFaceText(string)
        C++: virtual void SetXMinusFaceText(const char *_arg)
        
        Set/get the face text.
        """
        ...
    
    def SetXPlusFaceText(self, string):
        """
        V.SetXPlusFaceText(string)
        C++: virtual void SetXPlusFaceText(const char *_arg)
        
        Set/get the face text.
        """
        ...
    
    def SetYFaceTextRotation(self, p_float):
        """
        V.SetYFaceTextRotation(float)
        C++: virtual void SetYFaceTextRotation(double _arg)
        
        Augment individual face text orientations.
        """
        ...
    
    def SetYMinusFaceText(self, string):
        """
        V.SetYMinusFaceText(string)
        C++: virtual void SetYMinusFaceText(const char *_arg)
        
        Set/get the face text.
        """
        ...
    
    def SetYPlusFaceText(self, string):
        """
        V.SetYPlusFaceText(string)
        C++: virtual void SetYPlusFaceText(const char *_arg)
        
        Set/get the face text.
        """
        ...
    
    def SetZFaceTextRotation(self, p_float):
        """
        V.SetZFaceTextRotation(float)
        C++: virtual void SetZFaceTextRotation(double _arg)
        
        Augment individual face text orientations.
        """
        ...
    
    def SetZMinusFaceText(self, string):
        """
        V.SetZMinusFaceText(string)
        C++: virtual void SetZMinusFaceText(const char *_arg)
        
        Set/get the face text.
        """
        ...
    
    def SetZPlusFaceText(self, string):
        """
        V.SetZPlusFaceText(string)
        C++: virtual void SetZPlusFaceText(const char *_arg)
        
        Set/get the face text.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of an axes actor. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkArcPlotter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkArcPlotter - plot data along an arbitrary polyline
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkArcPlotter performs plotting of attribute data along polylines
    defined with an input vtkPolyData data object. Any type of attribute
    data can be plotted including scalars, vectors, tensors, normals,
    texture coordinates, and field data. Either one or multiple data
    components can be plotted.
    
    To use this class you must specify an input data set that contains
    one or more polylines, and some attribute data including which
    component of the attribute data. (By default, this class processes
    the first component of scalar data.) You will also need to set an
    offset radius (the distance of the polyline to the median line of the
    plot), a width for the plot (the distance that the minimum and
    maximum plot values are mapped into), an possibly an offset (used to
    offset attribute data with multiple components).
    
    Normally the filter automatically computes normals for generating the
    offset arc plot. However, you can specify a default normal and use
    that instead.
    
    @sa
    vtkXYPlotActor
    """
    def GetCamera(self):
        """
        V.GetCamera() -> vtkCamera
        C++: virtual vtkCamera *GetCamera()
        
        Specify a camera used to orient the plot along the arc. If no
        camera is specified, then the orientation of the plot is
        arbitrary.
        """
        ...
    
    def GetDefaultNormal(self):
        """
        V.GetDefaultNormal() -> (float, float, float)
        C++: virtual float *GetDefaultNormal()
        
        Set the default normal to use if you do not wish automatic normal
        calculation. The arc plot will be generated using this normal.
        """
        ...
    
    def GetFieldDataArray(self):
        """
        V.GetFieldDataArray() -> int
        C++: virtual int GetFieldDataArray()
        
        Set/Get the field data array to plot. This instance variable is
        only applicable if field data is plotted.
        """
        ...
    
    def GetFieldDataArrayMaxValue(self):
        """
        V.GetFieldDataArrayMaxValue() -> int
        C++: virtual int GetFieldDataArrayMaxValue()
        
        Set/Get the field data array to plot. This instance variable is
        only applicable if field data is plotted.
        """
        ...
    
    def GetFieldDataArrayMinValue(self):
        """
        V.GetFieldDataArrayMinValue() -> int
        C++: virtual int GetFieldDataArrayMinValue()
        
        Set/Get the field data array to plot. This instance variable is
        only applicable if field data is plotted.
        """
        ...
    
    def GetHeight(self):
        """
        V.GetHeight() -> float
        C++: virtual double GetHeight()
        
        Set the height of the plot. (The radius combined with the height
        define the location of the plot relative to the generating
        polyline.)
        """
        ...
    
    def GetHeightMaxValue(self):
        """
        V.GetHeightMaxValue() -> float
        C++: virtual double GetHeightMaxValue()
        
        Set the height of the plot. (The radius combined with the height
        define the location of the plot relative to the generating
        polyline.)
        """
        ...
    
    def GetHeightMinValue(self):
        """
        V.GetHeightMinValue() -> float
        C++: virtual double GetHeightMinValue()
        
        Set the height of the plot. (The radius combined with the height
        define the location of the plot relative to the generating
        polyline.)
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        New GetMTime because of camera dependency.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOffset(self):
        """
        V.GetOffset() -> float
        C++: virtual double GetOffset()
        
        Specify an offset that translates each subsequent plot (if there
        is more than one component plotted) from the defining arc (i.e.,
        polyline).
        """
        ...
    
    def GetOffsetMaxValue(self):
        """
        V.GetOffsetMaxValue() -> float
        C++: virtual double GetOffsetMaxValue()
        
        Specify an offset that translates each subsequent plot (if there
        is more than one component plotted) from the defining arc (i.e.,
        polyline).
        """
        ...
    
    def GetOffsetMinValue(self):
        """
        V.GetOffsetMinValue() -> float
        C++: virtual double GetOffsetMinValue()
        
        Specify an offset that translates each subsequent plot (if there
        is more than one component plotted) from the defining arc (i.e.,
        polyline).
        """
        ...
    
    def GetPlotComponent(self):
        """
        V.GetPlotComponent() -> int
        C++: virtual int GetPlotComponent()
        
        Set/Get the component number to plot if the data has more than
        one component. If the value of the plot component is == (-1),
        then all the components will be plotted.
        """
        ...
    
    def GetPlotMode(self):
        """
        V.GetPlotMode() -> int
        C++: virtual int GetPlotMode()
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set the radius of the "median" value of the first plotted
        component.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set the radius of the "median" value of the first plotted
        component.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set the radius of the "median" value of the first plotted
        component.
        """
        ...
    
    def GetUseDefaultNormal(self):
        """
        V.GetUseDefaultNormal() -> int
        C++: virtual vtkTypeBool GetUseDefaultNormal()
        
        Set a boolean to control whether to use default normals. By
        default, normals are automatically computed from the generating
        polyline and camera.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArcPlotter
        C++: vtkArcPlotter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArcPlotter
        C++: static vtkArcPlotter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCamera(self, vtkCamera):
        """
        V.SetCamera(vtkCamera)
        C++: virtual void SetCamera(vtkCamera *)
        
        Specify a camera used to orient the plot along the arc. If no
        camera is specified, then the orientation of the plot is
        arbitrary.
        """
        ...
    
    def SetDefaultNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetDefaultNormal(float, float, float)
        C++: virtual void SetDefaultNormal(float _arg1, float _arg2,
            float _arg3)
        V.SetDefaultNormal((float, float, float))
        C++: virtual void SetDefaultNormal(const float _arg[3])
        
        Set the default normal to use if you do not wish automatic normal
        calculation. The arc plot will be generated using this normal.
        """
        ...
    
    def SetFieldDataArray(self, p_int):
        """
        V.SetFieldDataArray(int)
        C++: virtual void SetFieldDataArray(int _arg)
        
        Set/Get the field data array to plot. This instance variable is
        only applicable if field data is plotted.
        """
        ...
    
    def SetHeight(self, p_float):
        """
        V.SetHeight(float)
        C++: virtual void SetHeight(double _arg)
        
        Set the height of the plot. (The radius combined with the height
        define the location of the plot relative to the generating
        polyline.)
        """
        ...
    
    def SetOffset(self, p_float):
        """
        V.SetOffset(float)
        C++: virtual void SetOffset(double _arg)
        
        Specify an offset that translates each subsequent plot (if there
        is more than one component plotted) from the defining arc (i.e.,
        polyline).
        """
        ...
    
    def SetPlotComponent(self, p_int):
        """
        V.SetPlotComponent(int)
        C++: virtual void SetPlotComponent(int _arg)
        
        Set/Get the component number to plot if the data has more than
        one component. If the value of the plot component is == (-1),
        then all the components will be plotted.
        """
        ...
    
    def SetPlotMode(self, p_int):
        """
        V.SetPlotMode(int)
        C++: virtual void SetPlotMode(int _arg)
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def SetPlotModeToPlotFieldData(self):
        """
        V.SetPlotModeToPlotFieldData()
        C++: void SetPlotModeToPlotFieldData()
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def SetPlotModeToPlotNormals(self):
        """
        V.SetPlotModeToPlotNormals()
        C++: void SetPlotModeToPlotNormals()
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def SetPlotModeToPlotScalars(self):
        """
        V.SetPlotModeToPlotScalars()
        C++: void SetPlotModeToPlotScalars()
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def SetPlotModeToPlotTCoords(self):
        """
        V.SetPlotModeToPlotTCoords()
        C++: void SetPlotModeToPlotTCoords()
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def SetPlotModeToPlotTensors(self):
        """
        V.SetPlotModeToPlotTensors()
        C++: void SetPlotModeToPlotTensors()
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def SetPlotModeToPlotVectors(self):
        """
        V.SetPlotModeToPlotVectors()
        C++: void SetPlotModeToPlotVectors()
        
        Specify which data to plot: scalars, vectors, normals, texture
        coords, tensors, or field data. If the data has more than one
        component, use the method SetPlotComponent to control which
        component to plot.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set the radius of the "median" value of the first plotted
        component.
        """
        ...
    
    def SetUseDefaultNormal(self, p_int):
        """
        V.SetUseDefaultNormal(int)
        C++: virtual void SetUseDefaultNormal(vtkTypeBool _arg)
        
        Set a boolean to control whether to use default normals. By
        default, normals are automatically computed from the generating
        polyline and camera.
        """
        ...
    
    def UseDefaultNormalOff(self):
        """
        V.UseDefaultNormalOff()
        C++: virtual void UseDefaultNormalOff()
        
        Set a boolean to control whether to use default normals. By
        default, normals are automatically computed from the generating
        polyline and camera.
        """
        ...
    
    def UseDefaultNormalOn(self):
        """
        V.UseDefaultNormalOn()
        C++: virtual void UseDefaultNormalOn()
        
        Set a boolean to control whether to use default normals. By
        default, normals are automatically computed from the generating
        polyline and camera.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAxesActor(__vtkmodules_vtkRenderingCore.vtkProp3D):
    """
    vtkAxesActor - a 3D axes representation
    
    Superclass: vtkProp3D
    
    vtkAxesActor is a hybrid 2D/3D actor used to represent 3D axes in a
    scene. The user can define the geometry to use for the shaft or the
    tip, and the user can set the text for the three axes. The text will
    appear to follow the camera since it is implemented by means of
    vtkCaptionActor2D.  All of the functionality of the underlying
    vtkCaptionActor2D objects are accessible so that, for instance, the
    font attributes of the axes text can be manipulated through
    vtkTextProperty. Since this class inherits from vtkProp3D, one can
    apply a user transform to the underlying geometry and the positioning
    of the labels. For example, a rotation transform could be used to
    generate a left-handed axes representation.
    
    @par Thanks: Thanks to Goodwin Lawlor for posting a tcl script which
    featured the use of vtkCaptionActor2D to implement the text labels. 
    This class is based on Paraview's vtkPVAxesActor.
    
    @warning
    vtkAxesActor is primarily intended for use with
    vtkOrientationMarkerWidget. The bounds of this actor are calculated
    as though the geometry of the axes were symmetric: that is, although
    only positive axes are visible, bounds are calculated as though
    negative axes are present too.  This is done intentionally to
    implement functionality of the camera update mechanism in
    vtkOrientationMarkerWidget.
    
    @sa
    vtkAnnotatedCubeActor vtkOrientationMarkerWidget vtkCaptionActor2D
    vtkTextProperty
    """
    def AxisLabelsOff(self):
        """
        V.AxisLabelsOff()
        C++: virtual void AxisLabelsOff()
        
        Enable/disable drawing the axis labels.
        """
        ...
    
    def AxisLabelsOn(self):
        """
        V.AxisLabelsOn()
        C++: virtual void AxisLabelsOn()
        
        Enable/disable drawing the axis labels.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        For some exporters and other other operations we must be able to
        collect all the actors or volumes. These methods are used in that
        process.
        """
        ...
    
    def GetAxisLabels(self):
        """
        V.GetAxisLabels() -> int
        C++: virtual vtkTypeBool GetAxisLabels()
        
        Enable/disable drawing the axis labels.
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        (The method GetBounds(double bounds[6]) is available from the
        superclass.)
        """
        ...
    
    def GetConeRadius(self):
        """
        V.GetConeRadius() -> float
        C++: virtual double GetConeRadius()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetConeRadiusMaxValue(self):
        """
        V.GetConeRadiusMaxValue() -> float
        C++: virtual double GetConeRadiusMaxValue()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetConeRadiusMinValue(self):
        """
        V.GetConeRadiusMinValue() -> float
        C++: virtual double GetConeRadiusMinValue()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetConeResolution(self):
        """
        V.GetConeResolution() -> int
        C++: virtual int GetConeResolution()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetConeResolutionMaxValue(self):
        """
        V.GetConeResolutionMaxValue() -> int
        C++: virtual int GetConeResolutionMaxValue()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetConeResolutionMinValue(self):
        """
        V.GetConeResolutionMinValue() -> int
        C++: virtual int GetConeResolutionMinValue()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetCylinderRadius(self):
        """
        V.GetCylinderRadius() -> float
        C++: virtual double GetCylinderRadius()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetCylinderRadiusMaxValue(self):
        """
        V.GetCylinderRadiusMaxValue() -> float
        C++: virtual double GetCylinderRadiusMaxValue()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetCylinderRadiusMinValue(self):
        """
        V.GetCylinderRadiusMinValue() -> float
        C++: virtual double GetCylinderRadiusMinValue()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetCylinderResolution(self):
        """
        V.GetCylinderResolution() -> int
        C++: virtual int GetCylinderResolution()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetCylinderResolutionMaxValue(self):
        """
        V.GetCylinderResolutionMaxValue() -> int
        C++: virtual int GetCylinderResolutionMaxValue()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetCylinderResolutionMinValue(self):
        """
        V.GetCylinderResolutionMinValue() -> int
        C++: virtual int GetCylinderResolutionMinValue()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the actors mtime plus consider its properties and texture if
        set.
        """
        ...
    
    def GetNormalizedLabelPosition(self):
        """
        V.GetNormalizedLabelPosition() -> (float, float, float)
        C++: virtual double *GetNormalizedLabelPosition()
        
        Set the normalized (0-1) position of the label along the length
        of the shaft.  A value > 1 is permissible.
        """
        ...
    
    def GetNormalizedShaftLength(self):
        """
        V.GetNormalizedShaftLength() -> (float, float, float)
        C++: virtual double *GetNormalizedShaftLength()
        
        Set the normalized (0-1) length of the shaft.
        """
        ...
    
    def GetNormalizedTipLength(self):
        """
        V.GetNormalizedTipLength() -> (float, float, float)
        C++: virtual double *GetNormalizedTipLength()
        
        Set the normalized (0-1) length of the tip.  Normally, this would
        be 1 - the normalized length of the shaft.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRedrawMTime(self):
        """
        V.GetRedrawMTime() -> int
        C++: vtkMTimeType GetRedrawMTime() override;
        
        Return the mtime of anything that would cause the rendered image
        to appear differently. Usually this involves checking the mtime
        of the prop plus anything else it depends on such as properties,
        textures etc.
        """
        ...
    
    def GetShaftType(self):
        """
        V.GetShaftType() -> int
        C++: virtual int GetShaftType()
        
        Set the type of the shaft to a cylinder, line, or user defined
        geometry.
        """
        ...
    
    def GetSphereRadius(self):
        """
        V.GetSphereRadius() -> float
        C++: virtual double GetSphereRadius()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetSphereRadiusMaxValue(self):
        """
        V.GetSphereRadiusMaxValue() -> float
        C++: virtual double GetSphereRadiusMaxValue()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetSphereRadiusMinValue(self):
        """
        V.GetSphereRadiusMinValue() -> float
        C++: virtual double GetSphereRadiusMinValue()
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def GetSphereResolution(self):
        """
        V.GetSphereResolution() -> int
        C++: virtual int GetSphereResolution()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetSphereResolutionMaxValue(self):
        """
        V.GetSphereResolutionMaxValue() -> int
        C++: virtual int GetSphereResolutionMaxValue()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetSphereResolutionMinValue(self):
        """
        V.GetSphereResolutionMinValue() -> int
        C++: virtual int GetSphereResolutionMinValue()
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def GetTipType(self):
        """
        V.GetTipType() -> int
        C++: virtual int GetTipType()
        
        Set the type of the tip to a cone, sphere, or user defined
        geometry.
        """
        ...
    
    def GetTotalLength(self):
        """
        V.GetTotalLength() -> (float, float, float)
        C++: virtual double *GetTotalLength()
        
        Set the total length of the axes in 3 dimensions.
        """
        ...
    
    def GetUserDefinedShaft(self):
        """
        V.GetUserDefinedShaft() -> vtkPolyData
        C++: virtual vtkPolyData *GetUserDefinedShaft()
        
        Set the user defined shaft polydata.
        """
        ...
    
    def GetUserDefinedTip(self):
        """
        V.GetUserDefinedTip() -> vtkPolyData
        C++: virtual vtkPolyData *GetUserDefinedTip()
        
        Set the user defined tip polydata.
        """
        ...
    
    def GetXAxisCaptionActor2D(self):
        """
        V.GetXAxisCaptionActor2D() -> vtkCaptionActor2D
        C++: vtkCaptionActor2D *GetXAxisCaptionActor2D()
        
        Retrieve handles to the X, Y and Z axis (so that you can set
        their text properties for example)
        """
        ...
    
    def GetXAxisLabelText(self):
        """
        V.GetXAxisLabelText() -> string
        C++: virtual char *GetXAxisLabelText()
        
        Set/get the label text.
        """
        ...
    
    def GetXAxisShaftProperty(self):
        """
        V.GetXAxisShaftProperty() -> vtkProperty
        C++: vtkProperty *GetXAxisShaftProperty()
        
        Get the shaft properties.
        """
        ...
    
    def GetXAxisTipProperty(self):
        """
        V.GetXAxisTipProperty() -> vtkProperty
        C++: vtkProperty *GetXAxisTipProperty()
        
        Get the tip properties.
        """
        ...
    
    def GetYAxisCaptionActor2D(self):
        """
        V.GetYAxisCaptionActor2D() -> vtkCaptionActor2D
        C++: vtkCaptionActor2D *GetYAxisCaptionActor2D()
        """
        ...
    
    def GetYAxisLabelText(self):
        """
        V.GetYAxisLabelText() -> string
        C++: virtual char *GetYAxisLabelText()
        
        Set/get the label text.
        """
        ...
    
    def GetYAxisShaftProperty(self):
        """
        V.GetYAxisShaftProperty() -> vtkProperty
        C++: vtkProperty *GetYAxisShaftProperty()
        
        Get the shaft properties.
        """
        ...
    
    def GetYAxisTipProperty(self):
        """
        V.GetYAxisTipProperty() -> vtkProperty
        C++: vtkProperty *GetYAxisTipProperty()
        
        Get the tip properties.
        """
        ...
    
    def GetZAxisCaptionActor2D(self):
        """
        V.GetZAxisCaptionActor2D() -> vtkCaptionActor2D
        C++: vtkCaptionActor2D *GetZAxisCaptionActor2D()
        """
        ...
    
    def GetZAxisLabelText(self):
        """
        V.GetZAxisLabelText() -> string
        C++: virtual char *GetZAxisLabelText()
        
        Set/get the label text.
        """
        ...
    
    def GetZAxisShaftProperty(self):
        """
        V.GetZAxisShaftProperty() -> vtkProperty
        C++: vtkProperty *GetZAxisShaftProperty()
        
        Get the shaft properties.
        """
        ...
    
    def GetZAxisTipProperty(self):
        """
        V.GetZAxisTipProperty() -> vtkProperty
        C++: vtkProperty *GetZAxisTipProperty()
        
        Get the tip properties.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAxesActor
        C++: vtkAxesActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Support the standard render methods.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Support the standard render methods.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Support the standard render methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAxesActor
        C++: static vtkAxesActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAxisLabels(self, p_int):
        """
        V.SetAxisLabels(int)
        C++: virtual void SetAxisLabels(vtkTypeBool _arg)
        
        Enable/disable drawing the axis labels.
        """
        ...
    
    def SetConeRadius(self, p_float):
        """
        V.SetConeRadius(float)
        C++: virtual void SetConeRadius(double _arg)
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def SetConeResolution(self, p_int):
        """
        V.SetConeResolution(int)
        C++: virtual void SetConeResolution(int _arg)
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def SetCylinderRadius(self, p_float):
        """
        V.SetCylinderRadius(float)
        C++: virtual void SetCylinderRadius(double _arg)
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def SetCylinderResolution(self, p_int):
        """
        V.SetCylinderResolution(int)
        C++: virtual void SetCylinderResolution(int _arg)
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def SetNormalizedLabelPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetNormalizedLabelPosition([float, float, float])
        C++: void SetNormalizedLabelPosition(double v[3])
        V.SetNormalizedLabelPosition(float, float, float)
        C++: void SetNormalizedLabelPosition(double x, double y, double z)
        
        Set the normalized (0-1) position of the label along the length
        of the shaft.  A value > 1 is permissible.
        """
        ...
    
    def SetNormalizedShaftLength(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetNormalizedShaftLength([float, float, float])
        C++: void SetNormalizedShaftLength(double v[3])
        V.SetNormalizedShaftLength(float, float, float)
        C++: void SetNormalizedShaftLength(double x, double y, double z)
        
        Set the normalized (0-1) length of the shaft.
        """
        ...
    
    def SetNormalizedTipLength(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetNormalizedTipLength([float, float, float])
        C++: void SetNormalizedTipLength(double v[3])
        V.SetNormalizedTipLength(float, float, float)
        C++: void SetNormalizedTipLength(double x, double y, double z)
        
        Set the normalized (0-1) length of the tip.  Normally, this would
        be 1 - the normalized length of the shaft.
        """
        ...
    
    def SetShaftType(self, p_int):
        """
        V.SetShaftType(int)
        C++: void SetShaftType(int type)
        
        Set the type of the shaft to a cylinder, line, or user defined
        geometry.
        """
        ...
    
    def SetShaftTypeToCylinder(self):
        """
        V.SetShaftTypeToCylinder()
        C++: void SetShaftTypeToCylinder()
        
        Set the type of the shaft to a cylinder, line, or user defined
        geometry.
        """
        ...
    
    def SetShaftTypeToLine(self):
        """
        V.SetShaftTypeToLine()
        C++: void SetShaftTypeToLine()
        
        Set the type of the shaft to a cylinder, line, or user defined
        geometry.
        """
        ...
    
    def SetShaftTypeToUserDefined(self):
        """
        V.SetShaftTypeToUserDefined()
        C++: void SetShaftTypeToUserDefined()
        
        Set the type of the shaft to a cylinder, line, or user defined
        geometry.
        """
        ...
    
    def SetSphereRadius(self, p_float):
        """
        V.SetSphereRadius(float)
        C++: virtual void SetSphereRadius(double _arg)
        
        Set/get the radius of the pieces of the axes actor.
        """
        ...
    
    def SetSphereResolution(self, p_int):
        """
        V.SetSphereResolution(int)
        C++: virtual void SetSphereResolution(int _arg)
        
        Set/get the resolution of the pieces of the axes actor.
        """
        ...
    
    def SetTipType(self, p_int):
        """
        V.SetTipType(int)
        C++: void SetTipType(int type)
        
        Set the type of the tip to a cone, sphere, or user defined
        geometry.
        """
        ...
    
    def SetTipTypeToCone(self):
        """
        V.SetTipTypeToCone()
        C++: void SetTipTypeToCone()
        
        Set the type of the tip to a cone, sphere, or user defined
        geometry.
        """
        ...
    
    def SetTipTypeToSphere(self):
        """
        V.SetTipTypeToSphere()
        C++: void SetTipTypeToSphere()
        
        Set the type of the tip to a cone, sphere, or user defined
        geometry.
        """
        ...
    
    def SetTipTypeToUserDefined(self):
        """
        V.SetTipTypeToUserDefined()
        C++: void SetTipTypeToUserDefined()
        
        Set the type of the tip to a cone, sphere, or user defined
        geometry.
        """
        ...
    
    def SetTotalLength(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetTotalLength([float, float, float])
        C++: void SetTotalLength(double v[3])
        V.SetTotalLength(float, float, float)
        C++: void SetTotalLength(double x, double y, double z)
        
        Set the total length of the axes in 3 dimensions.
        """
        ...
    
    def SetUserDefinedShaft(self, vtkPolyData):
        """
        V.SetUserDefinedShaft(vtkPolyData)
        C++: void SetUserDefinedShaft(vtkPolyData *)
        
        Set the user defined shaft polydata.
        """
        ...
    
    def SetUserDefinedTip(self, vtkPolyData):
        """
        V.SetUserDefinedTip(vtkPolyData)
        C++: void SetUserDefinedTip(vtkPolyData *)
        
        Set the user defined tip polydata.
        """
        ...
    
    def SetXAxisLabelText(self, string):
        """
        V.SetXAxisLabelText(string)
        C++: virtual void SetXAxisLabelText(const char *_arg)
        
        Set/get the label text.
        """
        ...
    
    def SetYAxisLabelText(self, string):
        """
        V.SetYAxisLabelText(string)
        C++: virtual void SetYAxisLabelText(const char *_arg)
        
        Set/get the label text.
        """
        ...
    
    def SetZAxisLabelText(self, string):
        """
        V.SetZAxisLabelText(string)
        C++: virtual void SetZAxisLabelText(const char *_arg)
        
        Set/get the label text.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of an axes actor. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CONE_TIP = ...
    CYLINDER_SHAFT = ...
    LINE_SHAFT = ...
    SPHERE_TIP = ...
    USER_DEFINED_SHAFT = ...
    USER_DEFINED_TIP = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAxisActor(__vtkmodules_vtkRenderingCore.vtkActor):
    """
    vtkAxisActor - Create an axis with tick marks and labels
    
    Superclass: vtkActor
    
    vtkAxisActor creates an axis with tick marks, labels, and/or a title,
    depending on the particular instance variable settings. It is assumed
    that the axes is part of a bounding box and is orthogonal to one of
    the coordinate axes.  To use this class, you typically specify two
    points defining the start and end points of the line (xyz definition
    using vtkCoordinate class), the axis type (X, Y or Z), the axis
    location in relation to the bounding box, the bounding box, the
    number of labels, and the data range (min,max). You can also control
    what parts of the axis are visible including the line, the tick
    marks, the labels, and the title. It is also possible to control
    gridlines, and specify on which 'side' the tickmarks are drawn (again
    with respect to the underlying assumed bounding box). You can also
    specify the label format (a printf style format).
    
    This class decides how to locate the labels, and how to create
    reasonable tick marks and labels.
    
    Labels follow the camera so as to be legible from any viewpoint.
    
    The instance variables Point1 and Point2 are instances of
    vtkCoordinate. All calculations and references are in World
    Coordinates.
    
    @par Thanks: This class was written by: Hank Childs, Kathleen
    Bonnell, Amy Squillacote, Brad Whitlock, Eric Brugger, Claire
    Guilbaud, Nicolas Dolegieviez, Will Schroeder, Karthik Krishnan,
    Aashish Chaudhary, Philippe Pebay, David Gobbi, David Partyka,
    Utkarsh Ayachit David Cole, Francois Bertel, and Mark Olesen Part of
    this work was supported by CEA/DIF - Commissariat a l'Energie
    Atomique, Centre DAM Ile-De-France, BP12, F-91297 Arpajon, France.
    
    @sa
    vtkActor vtkVectorText vtkPolyDataMapper vtkAxisActor2D vtkCoordinate
    """
    def AxisVisibilityOff(self):
        """
        V.AxisVisibilityOff()
        C++: virtual void AxisVisibilityOff()
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def AxisVisibilityOn(self):
        """
        V.AxisVisibilityOn()
        C++: virtual void AxisVisibilityOn()
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def BuildAxis(self, vtkViewport, bool):
        """
        V.BuildAxis(vtkViewport, bool)
        C++: void BuildAxis(vtkViewport *viewport, bool)
        """
        ...
    
    def CalculateLabelOffsetOff(self):
        """
        V.CalculateLabelOffsetOff()
        C++: virtual void CalculateLabelOffsetOff()
        
        Set/Get flag whether to calculate label offset. Default is true.
        """
        ...
    
    def CalculateLabelOffsetOn(self):
        """
        V.CalculateLabelOffsetOn()
        C++: virtual void CalculateLabelOffsetOn()
        
        Set/Get flag whether to calculate label offset. Default is true.
        """
        ...
    
    def CalculateTitleOffsetOff(self):
        """
        V.CalculateTitleOffsetOff()
        C++: virtual void CalculateTitleOffsetOff()
        
        Set/Get flag whether to calculate title offset. Default is true.
        """
        ...
    
    def CalculateTitleOffsetOn(self):
        """
        V.CalculateTitleOffsetOn()
        C++: virtual void CalculateTitleOffsetOn()
        
        Set/Get flag whether to calculate title offset. Default is true.
        """
        ...
    
    def ComputeMaxLabelLength(self, ):
        """
        V.ComputeMaxLabelLength((float, float, float)) -> float
        C++: double ComputeMaxLabelLength(const double[3])
        """
        ...
    
    def ComputeTitleLength(self, ):
        """
        V.ComputeTitleLength((float, float, float)) -> float
        C++: double ComputeTitleLength(const double[3])
        """
        ...
    
    def DrawGridlinesOff(self):
        """
        V.DrawGridlinesOff()
        C++: virtual void DrawGridlinesOff()
        
        Set/Get whether gridlines should be drawn.
        """
        ...
    
    def DrawGridlinesOn(self):
        """
        V.DrawGridlinesOn()
        C++: virtual void DrawGridlinesOn()
        
        Set/Get whether gridlines should be drawn.
        """
        ...
    
    def DrawGridlinesOnlyOff(self):
        """
        V.DrawGridlinesOnlyOff()
        C++: virtual void DrawGridlinesOnlyOff()
        
        Set/Get whether ONLY the gridlines should be drawn. This will
        only draw GridLines and will skip any other part of the rendering
        such as Axis/Tick/Title/...
        """
        ...
    
    def DrawGridlinesOnlyOn(self):
        """
        V.DrawGridlinesOnlyOn()
        C++: virtual void DrawGridlinesOnlyOn()
        
        Set/Get whether ONLY the gridlines should be drawn. This will
        only draw GridLines and will skip any other part of the rendering
        such as Axis/Tick/Title/...
        """
        ...
    
    def DrawGridpolysOff(self):
        """
        V.DrawGridpolysOff()
        C++: virtual void DrawGridpolysOff()
        
        Set/Get whether gridpolys should be drawn.
        """
        ...
    
    def DrawGridpolysOn(self):
        """
        V.DrawGridpolysOn()
        C++: virtual void DrawGridpolysOn()
        
        Set/Get whether gridpolys should be drawn.
        """
        ...
    
    def DrawInnerGridlinesOff(self):
        """
        V.DrawInnerGridlinesOff()
        C++: virtual void DrawInnerGridlinesOff()
        
        Set/Get whether inner gridlines should be drawn.
        """
        ...
    
    def DrawInnerGridlinesOn(self):
        """
        V.DrawInnerGridlinesOn()
        C++: virtual void DrawInnerGridlinesOn()
        
        Set/Get whether inner gridlines should be drawn.
        """
        ...
    
    def ExponentVisibilityOff(self):
        """
        V.ExponentVisibilityOff()
        C++: virtual void ExponentVisibilityOff()
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def ExponentVisibilityOn(self):
        """
        V.ExponentVisibilityOn()
        C++: virtual void ExponentVisibilityOn()
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def GetAxisBaseForX(self):
        """
        V.GetAxisBaseForX() -> (float, float, float)
        C++: virtual double *GetAxisBaseForX()
        
        Provide real vector for non aligned axis
        """
        ...
    
    def GetAxisBaseForY(self):
        """
        V.GetAxisBaseForY() -> (float, float, float)
        C++: virtual double *GetAxisBaseForY()
        
        Provide real vector for non aligned axis
        """
        ...
    
    def GetAxisBaseForZ(self):
        """
        V.GetAxisBaseForZ() -> (float, float, float)
        C++: virtual double *GetAxisBaseForZ()
        
        Provide real vector for non aligned axis
        """
        ...
    
    def GetAxisLinesProperty(self):
        """
        V.GetAxisLinesProperty() -> vtkProperty
        C++: vtkProperty *GetAxisLinesProperty()
        
        Get/Set axis actor property (axis and its ticks) (kept for
        compatibility)
        """
        ...
    
    def GetAxisMainLineProperty(self):
        """
        V.GetAxisMainLineProperty() -> vtkProperty
        C++: vtkProperty *GetAxisMainLineProperty()
        
        Get/Set main line axis actor property
        """
        ...
    
    def GetAxisMajorTicksProperty(self):
        """
        V.GetAxisMajorTicksProperty() -> vtkProperty
        C++: vtkProperty *GetAxisMajorTicksProperty()
        
        Get/Set axis actor property (axis and its ticks)
        """
        ...
    
    def GetAxisMinorTicksProperty(self):
        """
        V.GetAxisMinorTicksProperty() -> vtkProperty
        C++: vtkProperty *GetAxisMinorTicksProperty()
        
        Get/Set axis actor property (axis and its ticks)
        """
        ...
    
    def GetAxisOnOrigin(self):
        """
        V.GetAxisOnOrigin() -> int
        C++: virtual int GetAxisOnOrigin()
        
        Notify the axes that is not part of a cube anymore
        """
        ...
    
    def GetAxisPosition(self):
        """
        V.GetAxisPosition() -> int
        C++: virtual int GetAxisPosition()
        
        Set/Get the position of this axis (in relation to an an assumed
        bounding box).  For an x-type axis, MINMIN corresponds to the
        x-edge in the bounding box where Y values are minimum and Z
        values are minimum. For a y-type axis, MAXMIN corresponds to the
        y-edge where X values are maximum and Z values are minimum.
        """
        ...
    
    def GetAxisPositionMaxValue(self):
        """
        V.GetAxisPositionMaxValue() -> int
        C++: virtual int GetAxisPositionMaxValue()
        
        Set/Get the position of this axis (in relation to an an assumed
        bounding box).  For an x-type axis, MINMIN corresponds to the
        x-edge in the bounding box where Y values are minimum and Z
        values are minimum. For a y-type axis, MAXMIN corresponds to the
        y-edge where X values are maximum and Z values are minimum.
        """
        ...
    
    def GetAxisPositionMinValue(self):
        """
        V.GetAxisPositionMinValue() -> int
        C++: virtual int GetAxisPositionMinValue()
        
        Set/Get the position of this axis (in relation to an an assumed
        bounding box).  For an x-type axis, MINMIN corresponds to the
        x-edge in the bounding box where Y values are minimum and Z
        values are minimum. For a y-type axis, MAXMIN corresponds to the
        y-edge where X values are maximum and Z values are minimum.
        """
        ...
    
    def GetAxisType(self):
        """
        V.GetAxisType() -> int
        C++: virtual int GetAxisType()
        
        Set/Get the type of this axis.
        """
        ...
    
    def GetAxisTypeMaxValue(self):
        """
        V.GetAxisTypeMaxValue() -> int
        C++: virtual int GetAxisTypeMaxValue()
        
        Set/Get the type of this axis.
        """
        ...
    
    def GetAxisTypeMinValue(self):
        """
        V.GetAxisTypeMinValue() -> int
        C++: virtual int GetAxisTypeMinValue()
        
        Set/Get the type of this axis.
        """
        ...
    
    def GetAxisVisibility(self):
        """
        V.GetAxisVisibility() -> int
        C++: virtual vtkTypeBool GetAxisVisibility()
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds(void) override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Set or get the bounds for this Actor as
        (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        """
        ...
    
    def GetCalculateLabelOffset(self):
        """
        V.GetCalculateLabelOffset() -> int
        C++: virtual vtkTypeBool GetCalculateLabelOffset()
        
        Set/Get flag whether to calculate label offset. Default is true.
        """
        ...
    
    def GetCalculateTitleOffset(self):
        """
        V.GetCalculateTitleOffset() -> int
        C++: virtual vtkTypeBool GetCalculateTitleOffset()
        
        Set/Get flag whether to calculate title offset. Default is true.
        """
        ...
    
    def GetCamera(self):
        """
        V.GetCamera() -> vtkCamera
        C++: virtual vtkCamera *GetCamera()
        
        Set/Get the camera for this axis.  The camera is used by the
        labels to 'follow' the camera and be legible from any viewpoint.
        """
        ...
    
    def GetDeltaMajor(self, p_int):
        """
        V.GetDeltaMajor(int) -> float
        C++: double GetDeltaMajor(int axis)
        """
        ...
    
    def GetDeltaMinor(self):
        """
        V.GetDeltaMinor() -> float
        C++: virtual double GetDeltaMinor()
        """
        ...
    
    def GetDeltaRangeMajor(self):
        """
        V.GetDeltaRangeMajor() -> float
        C++: virtual double GetDeltaRangeMajor()
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def GetDeltaRangeMinor(self):
        """
        V.GetDeltaRangeMinor() -> float
        C++: virtual double GetDeltaRangeMinor()
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def GetDrawGridlines(self):
        """
        V.GetDrawGridlines() -> int
        C++: virtual vtkTypeBool GetDrawGridlines()
        
        Set/Get whether gridlines should be drawn.
        """
        ...
    
    def GetDrawGridlinesLocation(self):
        """
        V.GetDrawGridlinesLocation() -> int
        C++: virtual int GetDrawGridlinesLocation()
        """
        ...
    
    def GetDrawGridlinesOnly(self):
        """
        V.GetDrawGridlinesOnly() -> int
        C++: virtual vtkTypeBool GetDrawGridlinesOnly()
        
        Set/Get whether ONLY the gridlines should be drawn. This will
        only draw GridLines and will skip any other part of the rendering
        such as Axis/Tick/Title/...
        """
        ...
    
    def GetDrawGridpolys(self):
        """
        V.GetDrawGridpolys() -> int
        C++: virtual vtkTypeBool GetDrawGridpolys()
        
        Set/Get whether gridpolys should be drawn.
        """
        ...
    
    def GetDrawInnerGridlines(self):
        """
        V.GetDrawInnerGridlines() -> int
        C++: virtual vtkTypeBool GetDrawInnerGridlines()
        
        Set/Get whether inner gridlines should be drawn.
        """
        ...
    
    def GetExponent(self):
        """
        V.GetExponent() -> string
        C++: virtual char *GetExponent()
        
        Set/Get the common exponent of the labels values
        """
        ...
    
    def GetExponentActor(self):
        """
        V.GetExponentActor() -> vtkAxisFollower
        C++: virtual vtkAxisFollower *GetExponentActor()
        
        Get exponent follower actor
        """
        ...
    
    def GetExponentLocation(self):
        """
        V.GetExponentLocation() -> int
        C++: virtual int GetExponentLocation()
        
        Get/Set the location of the Detached Exponent related to the
        axis. Possible Location: VTK_ALIGN_TOP, VTK_ALIGN_BOTTOM,
        VTK_ALIGN_POINT1, VTK_ALIGN_POINT2
        """
        ...
    
    def GetExponentOffset(self):
        """
        V.GetExponentOffset() -> float
        C++: virtual double GetExponentOffset()
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def GetExponentProp3D(self):
        """
        V.GetExponentProp3D() -> vtkProp3DAxisFollower
        C++: virtual vtkProp3DAxisFollower *GetExponentProp3D()
        
        Get title actor and it is responsible for drawing title text.
        """
        ...
    
    def GetExponentVisibility(self):
        """
        V.GetExponentVisibility() -> bool
        C++: virtual bool GetExponentVisibility()
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def GetGridlinesProperty(self):
        """
        V.GetGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetGridlinesProperty()
        
        Get/Set gridlines actor property (outer grid lines)
        """
        ...
    
    def GetGridlineXLength(self):
        """
        V.GetGridlineXLength() -> float
        C++: virtual double GetGridlineXLength()
        
        Set/Get the length to use when drawing gridlines.
        """
        ...
    
    def GetGridlineYLength(self):
        """
        V.GetGridlineYLength() -> float
        C++: virtual double GetGridlineYLength()
        
        Set/Get the length to use when drawing gridlines.
        """
        ...
    
    def GetGridlineZLength(self):
        """
        V.GetGridlineZLength() -> float
        C++: virtual double GetGridlineZLength()
        
        Set/Get the length to use when drawing gridlines.
        """
        ...
    
    def GetGridpolysProperty(self):
        """
        V.GetGridpolysProperty() -> vtkProperty
        C++: vtkProperty *GetGridpolysProperty()
        
        Get/Set gridPolys actor property (grid quads)
        """
        ...
    
    def GetHorizontalOffsetYTitle2D(self):
        """
        V.GetHorizontalOffsetYTitle2D() -> float
        C++: virtual double GetHorizontalOffsetYTitle2D()
        
        Set/Get the 2D mode the horizontal offset for Y title in 2D mode
        """
        ...
    
    def GetInnerGridlinesProperty(self):
        """
        V.GetInnerGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetInnerGridlinesProperty()
        
        Get/Set inner gridlines actor property
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Set/Get the format with which to print the labels on the axis.
        """
        ...
    
    def GetLabelOffset(self):
        """
        V.GetLabelOffset() -> float
        C++: virtual double GetLabelOffset()
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Set/Get the axis labels text property.
        """
        ...
    
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> int
        C++: virtual vtkTypeBool GetLabelVisibility()
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def GetLastMajorTickPointCorrection(self):
        """
        V.GetLastMajorTickPointCorrection() -> bool
        C++: virtual bool GetLastMajorTickPointCorrection()
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def GetLog(self):
        """
        V.GetLog() -> bool
        C++: virtual bool GetLog()
        
        Set/Get The type of scale, enable logarithmic scale or linear by
        default
        """
        ...
    
    def GetMajorRangeStart(self):
        """
        V.GetMajorRangeStart() -> float
        C++: virtual double GetMajorRangeStart()
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def GetMajorStart(self, p_int):
        """
        V.GetMajorStart(int) -> float
        C++: double GetMajorStart(int axis)
        
        Set/Get the starting position for minor and major tick points,
        and the delta values that determine their spacing.
        """
        ...
    
    def GetMajorTickSize(self):
        """
        V.GetMajorTickSize() -> float
        C++: virtual double GetMajorTickSize()
        
        Set/Get the size of the major tick marks
        """
        ...
    
    def GetMinorRangeStart(self):
        """
        V.GetMinorRangeStart() -> float
        C++: virtual double GetMinorRangeStart()
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def GetMinorStart(self):
        """
        V.GetMinorStart() -> float
        C++: virtual double GetMinorStart()
        
        Set/Get the starting position for minor and major tick points,
        and the delta values that determine their spacing.
        """
        ...
    
    def GetMinorTickSize(self):
        """
        V.GetMinorTickSize() -> float
        C++: virtual double GetMinorTickSize()
        
        Set/Get the size of the major tick marks
        """
        ...
    
    def GetMinorTicksVisible(self):
        """
        V.GetMinorTicksVisible() -> int
        C++: virtual vtkTypeBool GetMinorTicksVisible()
        
        Set/Get the flag that controls whether the minor ticks are
        visible.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLabelsBuilt(self):
        """
        V.GetNumberOfLabelsBuilt() -> int
        C++: virtual int GetNumberOfLabelsBuilt()
        
        Get total number of labels built. Once built this count does not
        change.
        """
        ...
    
    def GetPoint1(self):
        """
        V.GetPoint1() -> (float, ...)
        C++: virtual double *GetPoint1()
        
        Specify the position of the first point defining the axis.
        """
        ...
    
    def GetPoint1Coordinate(self):
        """
        V.GetPoint1Coordinate() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetPoint1Coordinate()
        
        Specify the position of the first point defining the axis.
        """
        ...
    
    def GetPoint2(self):
        """
        V.GetPoint2() -> (float, ...)
        C++: virtual double *GetPoint2()
        
        Specify the position of the second point defining the axis.
        """
        ...
    
    def GetPoint2Coordinate(self):
        """
        V.GetPoint2Coordinate() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetPoint2Coordinate()
        
        Specify the position of the second point defining the axis.
        """
        ...
    
    def GetRange(self):
        """
        V.GetRange() -> (float, float)
        C++: virtual double *GetRange()
        
        Specify the (min,max) axis range. This will be used in the
        generation of labels, if labels are visible.
        """
        ...
    
    def GetSaveTitlePosition(self):
        """
        V.GetSaveTitlePosition() -> int
        C++: virtual int GetSaveTitlePosition()
        
        Set/Get whether title position must be saved in 2D mode
        """
        ...
    
    def GetScreenSize(self):
        """
        V.GetScreenSize() -> float
        C++: virtual double GetScreenSize()
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def GetTickLocation(self):
        """
        V.GetTickLocation() -> int
        C++: virtual int GetTickLocation()
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def GetTickLocationMaxValue(self):
        """
        V.GetTickLocationMaxValue() -> int
        C++: virtual int GetTickLocationMaxValue()
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def GetTickLocationMinValue(self):
        """
        V.GetTickLocationMinValue() -> int
        C++: virtual int GetTickLocationMinValue()
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def GetTickVisibility(self):
        """
        V.GetTickVisibility() -> int
        C++: virtual vtkTypeBool GetTickVisibility()
        
        Set/Get visibility of the axis major tick marks.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the axis actor,
        """
        ...
    
    def GetTitleActor(self):
        """
        V.GetTitleActor() -> vtkAxisFollower
        C++: virtual vtkAxisFollower *GetTitleActor()
        
        Get title actor and it is responsible for drawing title text.
        """
        ...
    
    def GetTitleAlignLocation(self):
        """
        V.GetTitleAlignLocation() -> int
        C++: virtual int GetTitleAlignLocation()
        
        Get/Set the alignment of the title related to the axis. Possible
        Alignment: VTK_ALIGN_TOP, VTK_ALIGN_BOTTOM, VTK_ALIGN_POINT1,
        VTK_ALIGN_POINT2
        """
        ...
    
    def GetTitleOffset(self):
        """
        V.GetTitleOffset() -> float
        C++: virtual double GetTitleOffset()
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def GetTitleProp3D(self):
        """
        V.GetTitleProp3D() -> vtkProp3DAxisFollower
        C++: virtual vtkProp3DAxisFollower *GetTitleProp3D()
        
        Get title actor and it is responsible for drawing title text.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the axis title text property.
        """
        ...
    
    def GetTitleVisibility(self):
        """
        V.GetTitleVisibility() -> int
        C++: virtual vtkTypeBool GetTitleVisibility()
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def GetUse2DMode(self):
        """
        V.GetUse2DMode() -> int
        C++: virtual int GetUse2DMode()
        
        Set/Get the 2D mode
        """
        ...
    
    def GetUseTextActor3D(self):
        """
        V.GetUseTextActor3D() -> int
        C++: virtual int GetUseTextActor3D()
        
        Render text as polygons (vtkVectorText) or as sprites
        (vtkTextActor3D). In 2D mode, the value is ignored and text is
        rendered as vtkTextActor. False(0) by default. See Also:
        GetUse2DMode(), SetUse2DMode
        """
        ...
    
    def GetVerticalOffsetXTitle2D(self):
        """
        V.GetVerticalOffsetXTitle2D() -> float
        C++: virtual double GetVerticalOffsetXTitle2D()
        
        Set/Get the 2D mode the vertical offset for X title in 2D mode
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Draw the axis.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def LastMajorTickPointCorrectionOff(self):
        """
        V.LastMajorTickPointCorrectionOff()
        C++: virtual void LastMajorTickPointCorrectionOff()
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def LastMajorTickPointCorrectionOn(self):
        """
        V.LastMajorTickPointCorrectionOn()
        C++: virtual void LastMajorTickPointCorrectionOn()
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def LogOff(self):
        """
        V.LogOff()
        C++: virtual void LogOff()
        
        Set/Get The type of scale, enable logarithmic scale or linear by
        default
        """
        ...
    
    def LogOn(self):
        """
        V.LogOn()
        C++: virtual void LogOn()
        
        Set/Get The type of scale, enable logarithmic scale or linear by
        default
        """
        ...
    
    def MinorTicksVisibleOff(self):
        """
        V.MinorTicksVisibleOff()
        C++: virtual void MinorTicksVisibleOff()
        
        Set/Get the flag that controls whether the minor ticks are
        visible.
        """
        ...
    
    def MinorTicksVisibleOn(self):
        """
        V.MinorTicksVisibleOn()
        C++: virtual void MinorTicksVisibleOn()
        
        Set/Get the flag that controls whether the minor ticks are
        visible.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAxisActor
        C++: vtkAxisActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Draw the axis.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Draw the axis.
        """
        ...
    
    def RenderTranslucentGeometry(self, vtkViewport):
        """
        V.RenderTranslucentGeometry(vtkViewport) -> int
        C++: virtual int RenderTranslucentGeometry(vtkViewport *viewport)
        
        Draw the axis.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Draw the axis.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAxisActor
        C++: static vtkAxisActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAxisBaseForX(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisBaseForX(float, float, float)
        C++: virtual void SetAxisBaseForX(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisBaseForX((float, float, float))
        C++: virtual void SetAxisBaseForX(const double _arg[3])
        
        Provide real vector for non aligned axis
        """
        ...
    
    def SetAxisBaseForY(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisBaseForY(float, float, float)
        C++: virtual void SetAxisBaseForY(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisBaseForY((float, float, float))
        C++: virtual void SetAxisBaseForY(const double _arg[3])
        
        Provide real vector for non aligned axis
        """
        ...
    
    def SetAxisBaseForZ(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisBaseForZ(float, float, float)
        C++: virtual void SetAxisBaseForZ(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisBaseForZ((float, float, float))
        C++: virtual void SetAxisBaseForZ(const double _arg[3])
        
        Provide real vector for non aligned axis
        """
        ...
    
    def SetAxisLinesProperty(self, vtkProperty):
        """
        V.SetAxisLinesProperty(vtkProperty)
        C++: void SetAxisLinesProperty(vtkProperty *)
        
        Get/Set axis actor property (axis and its ticks) (kept for
        compatibility)
        """
        ...
    
    def SetAxisMainLineProperty(self, vtkProperty):
        """
        V.SetAxisMainLineProperty(vtkProperty)
        C++: void SetAxisMainLineProperty(vtkProperty *)
        
        Get/Set main line axis actor property
        """
        ...
    
    def SetAxisMajorTicksProperty(self, vtkProperty):
        """
        V.SetAxisMajorTicksProperty(vtkProperty)
        C++: void SetAxisMajorTicksProperty(vtkProperty *)
        
        Get/Set axis actor property (axis and its ticks)
        """
        ...
    
    def SetAxisMinorTicksProperty(self, vtkProperty):
        """
        V.SetAxisMinorTicksProperty(vtkProperty)
        C++: void SetAxisMinorTicksProperty(vtkProperty *)
        
        Get/Set axis actor property (axis and its ticks)
        """
        ...
    
    def SetAxisOnOrigin(self, p_int):
        """
        V.SetAxisOnOrigin(int)
        C++: virtual void SetAxisOnOrigin(int _arg)
        
        Notify the axes that is not part of a cube anymore
        """
        ...
    
    def SetAxisPosition(self, p_int):
        """
        V.SetAxisPosition(int)
        C++: virtual void SetAxisPosition(int _arg)
        
        Set/Get the position of this axis (in relation to an an assumed
        bounding box).  For an x-type axis, MINMIN corresponds to the
        x-edge in the bounding box where Y values are minimum and Z
        values are minimum. For a y-type axis, MAXMIN corresponds to the
        y-edge where X values are maximum and Z values are minimum.
        """
        ...
    
    def SetAxisPositionToMaxMax(self):
        """
        V.SetAxisPositionToMaxMax()
        C++: void SetAxisPositionToMaxMax(void)
        """
        ...
    
    def SetAxisPositionToMaxMin(self):
        """
        V.SetAxisPositionToMaxMin()
        C++: void SetAxisPositionToMaxMin(void)
        """
        ...
    
    def SetAxisPositionToMinMax(self):
        """
        V.SetAxisPositionToMinMax()
        C++: void SetAxisPositionToMinMax(void)
        """
        ...
    
    def SetAxisPositionToMinMin(self):
        """
        V.SetAxisPositionToMinMin()
        C++: void SetAxisPositionToMinMin(void)
        """
        ...
    
    def SetAxisType(self, p_int):
        """
        V.SetAxisType(int)
        C++: virtual void SetAxisType(int _arg)
        
        Set/Get the type of this axis.
        """
        ...
    
    def SetAxisTypeToX(self):
        """
        V.SetAxisTypeToX()
        C++: void SetAxisTypeToX(void)
        
        Set/Get the type of this axis.
        """
        ...
    
    def SetAxisTypeToY(self):
        """
        V.SetAxisTypeToY()
        C++: void SetAxisTypeToY(void)
        
        Set/Get the type of this axis.
        """
        ...
    
    def SetAxisTypeToZ(self):
        """
        V.SetAxisTypeToZ()
        C++: void SetAxisTypeToZ(void)
        
        Set/Get the type of this axis.
        """
        ...
    
    def SetAxisVisibility(self, p_int):
        """
        V.SetAxisVisibility(int)
        C++: virtual void SetAxisVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def SetBounds(self, ):
        """
        V.SetBounds((float, float, float, float, float, float))
        C++: void SetBounds(const double bounds[6])
        V.SetBounds(float, float, float, float, float, float)
        C++: void SetBounds(double xmin, double xmax, double ymin,
            double ymax, double zmin, double zmax)
        
        Set or get the bounds for this Actor as
        (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        """
        ...
    
    def SetCalculateLabelOffset(self, p_int):
        """
        V.SetCalculateLabelOffset(int)
        C++: virtual void SetCalculateLabelOffset(vtkTypeBool _arg)
        
        Set/Get flag whether to calculate label offset. Default is true.
        """
        ...
    
    def SetCalculateTitleOffset(self, p_int):
        """
        V.SetCalculateTitleOffset(int)
        C++: virtual void SetCalculateTitleOffset(vtkTypeBool _arg)
        
        Set/Get flag whether to calculate title offset. Default is true.
        """
        ...
    
    def SetCamera(self, vtkCamera):
        """
        V.SetCamera(vtkCamera)
        C++: virtual void SetCamera(vtkCamera *)
        
        Set/Get the camera for this axis.  The camera is used by the
        labels to 'follow' the camera and be legible from any viewpoint.
        """
        ...
    
    def SetDeltaMajor(self, p_int, p_float):
        """
        V.SetDeltaMajor(int, float)
        C++: void SetDeltaMajor(int axis, double value)
        """
        ...
    
    def SetDeltaMinor(self, p_float):
        """
        V.SetDeltaMinor(float)
        C++: virtual void SetDeltaMinor(double _arg)
        """
        ...
    
    def SetDeltaRangeMajor(self, p_float):
        """
        V.SetDeltaRangeMajor(float)
        C++: virtual void SetDeltaRangeMajor(double _arg)
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def SetDeltaRangeMinor(self, p_float):
        """
        V.SetDeltaRangeMinor(float)
        C++: virtual void SetDeltaRangeMinor(double _arg)
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def SetDrawGridlines(self, p_int):
        """
        V.SetDrawGridlines(int)
        C++: virtual void SetDrawGridlines(vtkTypeBool _arg)
        
        Set/Get whether gridlines should be drawn.
        """
        ...
    
    def SetDrawGridlinesLocation(self, p_int):
        """
        V.SetDrawGridlinesLocation(int)
        C++: virtual void SetDrawGridlinesLocation(int _arg)
        """
        ...
    
    def SetDrawGridlinesOnly(self, p_int):
        """
        V.SetDrawGridlinesOnly(int)
        C++: virtual void SetDrawGridlinesOnly(vtkTypeBool _arg)
        
        Set/Get whether ONLY the gridlines should be drawn. This will
        only draw GridLines and will skip any other part of the rendering
        such as Axis/Tick/Title/...
        """
        ...
    
    def SetDrawGridpolys(self, p_int):
        """
        V.SetDrawGridpolys(int)
        C++: virtual void SetDrawGridpolys(vtkTypeBool _arg)
        
        Set/Get whether gridpolys should be drawn.
        """
        ...
    
    def SetDrawInnerGridlines(self, p_int):
        """
        V.SetDrawInnerGridlines(int)
        C++: virtual void SetDrawInnerGridlines(vtkTypeBool _arg)
        
        Set/Get whether inner gridlines should be drawn.
        """
        ...
    
    def SetExponent(self, string):
        """
        V.SetExponent(string)
        C++: void SetExponent(const char *t)
        
        Set/Get the common exponent of the labels values
        """
        ...
    
    def SetExponentLocation(self, p_int):
        """
        V.SetExponentLocation(int)
        C++: virtual void SetExponentLocation(int location)
        
        Get/Set the location of the Detached Exponent related to the
        axis. Possible Location: VTK_ALIGN_TOP, VTK_ALIGN_BOTTOM,
        VTK_ALIGN_POINT1, VTK_ALIGN_POINT2
        """
        ...
    
    def SetExponentOffset(self, p_float):
        """
        V.SetExponentOffset(float)
        C++: virtual void SetExponentOffset(double _arg)
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def SetExponentVisibility(self, bool):
        """
        V.SetExponentVisibility(bool)
        C++: virtual void SetExponentVisibility(bool _arg)
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def SetGridlinesProperty(self, vtkProperty):
        """
        V.SetGridlinesProperty(vtkProperty)
        C++: void SetGridlinesProperty(vtkProperty *)
        
        Get/Set gridlines actor property (outer grid lines)
        """
        ...
    
    def SetGridlineXLength(self, p_float):
        """
        V.SetGridlineXLength(float)
        C++: virtual void SetGridlineXLength(double _arg)
        
        Set/Get the length to use when drawing gridlines.
        """
        ...
    
    def SetGridlineYLength(self, p_float):
        """
        V.SetGridlineYLength(float)
        C++: virtual void SetGridlineYLength(double _arg)
        
        Set/Get the length to use when drawing gridlines.
        """
        ...
    
    def SetGridlineZLength(self, p_float):
        """
        V.SetGridlineZLength(float)
        C++: virtual void SetGridlineZLength(double _arg)
        
        Set/Get the length to use when drawing gridlines.
        """
        ...
    
    def SetGridpolysProperty(self, vtkProperty):
        """
        V.SetGridpolysProperty(vtkProperty)
        C++: void SetGridpolysProperty(vtkProperty *)
        
        Get/Set gridPolys actor property (grid quads)
        """
        ...
    
    def SetHorizontalOffsetYTitle2D(self, p_float):
        """
        V.SetHorizontalOffsetYTitle2D(float)
        C++: virtual void SetHorizontalOffsetYTitle2D(double _arg)
        
        Set/Get the 2D mode the horizontal offset for Y title in 2D mode
        """
        ...
    
    def SetInnerGridlinesProperty(self, vtkProperty):
        """
        V.SetInnerGridlinesProperty(vtkProperty)
        C++: void SetInnerGridlinesProperty(vtkProperty *)
        
        Get/Set inner gridlines actor property
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on the axis.
        """
        ...
    
    def SetLabelOffset(self, p_float):
        """
        V.SetLabelOffset(float)
        C++: virtual void SetLabelOffset(double _arg)
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def SetLabels(self, vtkStringArray):
        """
        V.SetLabels(vtkStringArray)
        C++: void SetLabels(vtkStringArray *labels)
        """
        ...
    
    def SetLabelScale(self, p_float):
        """
        V.SetLabelScale(float)
        C++: void SetLabelScale(const double scale)
        V.SetLabelScale(int, float)
        C++: void SetLabelScale(int labelIndex, const double scale)
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the axis labels text property.
        """
        ...
    
    def SetLabelVisibility(self, p_int):
        """
        V.SetLabelVisibility(int)
        C++: virtual void SetLabelVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def SetLastMajorTickPointCorrection(self, bool):
        """
        V.SetLastMajorTickPointCorrection(bool)
        C++: virtual void SetLastMajorTickPointCorrection(bool _arg)
        
        Set/Get visibility of the axis detached exponent.
        """
        ...
    
    def SetLog(self, bool):
        """
        V.SetLog(bool)
        C++: virtual void SetLog(bool _arg)
        
        Set/Get The type of scale, enable logarithmic scale or linear by
        default
        """
        ...
    
    def SetMajorRangeStart(self, p_float):
        """
        V.SetMajorRangeStart(float)
        C++: virtual void SetMajorRangeStart(double _arg)
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def SetMajorStart(self, p_int, p_float):
        """
        V.SetMajorStart(int, float)
        C++: void SetMajorStart(int axis, double value)
        
        Set/Get the starting position for minor and major tick points,
        and the delta values that determine their spacing.
        """
        ...
    
    def SetMajorTickSize(self, p_float):
        """
        V.SetMajorTickSize(float)
        C++: virtual void SetMajorTickSize(double _arg)
        
        Set/Get the size of the major tick marks
        """
        ...
    
    def SetMinorRangeStart(self, p_float):
        """
        V.SetMinorRangeStart(float)
        C++: virtual void SetMinorRangeStart(double _arg)
        
        Set/Get the starting position for minor and major tick points on
        the range and the delta values that determine their spacing. The
        range and the position need not be identical. ie the displayed
        values need not match the actual positions in 3D space.
        """
        ...
    
    def SetMinorStart(self, p_float):
        """
        V.SetMinorStart(float)
        C++: virtual void SetMinorStart(double _arg)
        
        Set/Get the starting position for minor and major tick points,
        and the delta values that determine their spacing.
        """
        ...
    
    def SetMinorTickSize(self, p_float):
        """
        V.SetMinorTickSize(float)
        C++: virtual void SetMinorTickSize(double _arg)
        
        Set/Get the size of the major tick marks
        """
        ...
    
    def SetMinorTicksVisible(self, p_int):
        """
        V.SetMinorTicksVisible(int)
        C++: virtual void SetMinorTicksVisible(vtkTypeBool _arg)
        
        Set/Get the flag that controls whether the minor ticks are
        visible.
        """
        ...
    
    def SetPoint1(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1([float, float, float])
        C++: virtual void SetPoint1(double x[3])
        V.SetPoint1(float, float, float)
        C++: virtual void SetPoint1(double x, double y, double z)
        
        Specify the position of the first point defining the axis.
        """
        ...
    
    def SetPoint2(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2([float, float, float])
        C++: virtual void SetPoint2(double x[3])
        V.SetPoint2(float, float, float)
        C++: virtual void SetPoint2(double x, double y, double z)
        
        Specify the position of the second point defining the axis.
        """
        ...
    
    def SetRange(self, p_float, p_float_1):
        """
        V.SetRange(float, float)
        C++: virtual void SetRange(double _arg1, double _arg2)
        V.SetRange((float, float))
        C++: void SetRange(const double _arg[2])
        
        Specify the (min,max) axis range. This will be used in the
        generation of labels, if labels are visible.
        """
        ...
    
    def SetSaveTitlePosition(self, p_int):
        """
        V.SetSaveTitlePosition(int)
        C++: virtual void SetSaveTitlePosition(int _arg)
        
        Set/Get whether title position must be saved in 2D mode
        """
        ...
    
    def SetScreenSize(self, p_float):
        """
        V.SetScreenSize(float)
        C++: virtual void SetScreenSize(double _arg)
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def SetTickLocation(self, p_int):
        """
        V.SetTickLocation(int)
        C++: virtual void SetTickLocation(int _arg)
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def SetTickLocationToBoth(self):
        """
        V.SetTickLocationToBoth()
        C++: void SetTickLocationToBoth(void)
        """
        ...
    
    def SetTickLocationToInside(self):
        """
        V.SetTickLocationToInside()
        C++: void SetTickLocationToInside(void)
        """
        ...
    
    def SetTickLocationToOutside(self):
        """
        V.SetTickLocationToOutside()
        C++: void SetTickLocationToOutside(void)
        """
        ...
    
    def SetTickVisibility(self, p_int):
        """
        V.SetTickVisibility(int)
        C++: virtual void SetTickVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis major tick marks.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: void SetTitle(const char *t)
        
        Set/Get the title of the axis actor,
        """
        ...
    
    def SetTitleAlignLocation(self, p_int):
        """
        V.SetTitleAlignLocation(int)
        C++: virtual void SetTitleAlignLocation(int location)
        
        Get/Set the alignment of the title related to the axis. Possible
        Alignment: VTK_ALIGN_TOP, VTK_ALIGN_BOTTOM, VTK_ALIGN_POINT1,
        VTK_ALIGN_POINT2
        """
        ...
    
    def SetTitleOffset(self, p_float):
        """
        V.SetTitleOffset(float)
        C++: virtual void SetTitleOffset(double _arg)
        
        Set/Get the offsets used to position texts.
        """
        ...
    
    def SetTitleScale(self, p_float):
        """
        V.SetTitleScale(float)
        C++: void SetTitleScale(const double scale)
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the axis title text property.
        """
        ...
    
    def SetTitleVisibility(self, p_int):
        """
        V.SetTitleVisibility(int)
        C++: virtual void SetTitleVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def SetUse2DMode(self, p_int):
        """
        V.SetUse2DMode(int)
        C++: virtual void SetUse2DMode(int _arg)
        
        Set/Get the 2D mode
        """
        ...
    
    def SetUseTextActor3D(self, p_int):
        """
        V.SetUseTextActor3D(int)
        C++: virtual void SetUseTextActor3D(int _arg)
        
        Render text as polygons (vtkVectorText) or as sprites
        (vtkTextActor3D). In 2D mode, the value is ignored and text is
        rendered as vtkTextActor. False(0) by default. See Also:
        GetUse2DMode(), SetUse2DMode
        """
        ...
    
    def SetVerticalOffsetXTitle2D(self, p_float):
        """
        V.SetVerticalOffsetXTitle2D(float)
        C++: virtual void SetVerticalOffsetXTitle2D(double _arg)
        
        Set/Get the 2D mode the vertical offset for X title in 2D mode
        """
        ...
    
    def TickVisibilityOff(self):
        """
        V.TickVisibilityOff()
        C++: virtual void TickVisibilityOff()
        
        Set/Get visibility of the axis major tick marks.
        """
        ...
    
    def TickVisibilityOn(self):
        """
        V.TickVisibilityOn()
        C++: virtual void TickVisibilityOn()
        
        Set/Get visibility of the axis major tick marks.
        """
        ...
    
    def TitleVisibilityOff(self):
        """
        V.TitleVisibilityOff()
        C++: virtual void TitleVisibilityOff()
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def TitleVisibilityOn(self):
        """
        V.TitleVisibilityOn()
        C++: virtual void TitleVisibilityOn()
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AlignLocation = ...
    AxisPosition = ...
    AxisType = ...
    TickLocation = ...
    VTK_ALIGN_BOTTOM = ...
    VTK_ALIGN_POINT1 = ...
    VTK_ALIGN_POINT2 = ...
    VTK_ALIGN_TOP = ...
    VTK_AXIS_POS_MAXMAX = ...
    VTK_AXIS_POS_MAXMIN = ...
    VTK_AXIS_POS_MINMAX = ...
    VTK_AXIS_POS_MINMIN = ...
    VTK_AXIS_TYPE_X = ...
    VTK_AXIS_TYPE_Y = ...
    VTK_AXIS_TYPE_Z = ...
    VTK_TICKS_BOTH = ...
    VTK_TICKS_INSIDE = ...
    VTK_TICKS_OUTSIDE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAxisActor2D(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkAxisActor2D - Create an axis with tick marks and labels
    
    Superclass: vtkActor2D
    
    vtkAxisActor2D creates an axis with tick marks, labels, and/or a
    title, depending on the particular instance variable settings.
    vtkAxisActor2D is a 2D actor; that is, it is drawn on the overlay
    plane and is not occluded by 3D geometry. To use this class, you
    typically specify two points defining the start and end points of the
    line (x-y definition using vtkCoordinate class), the number of
    labels, and the data range (min,max). You can also control what parts
    of the axis are visible including the line, the tick marks, the
    labels, and the title.  You can also specify the label format (a
    printf style format).
    
    This class decides what font size to use and how to locate the
    labels. It also decides how to create reasonable tick marks and
    labels. The number of labels and the range of values may not match
    the number specified, but should be close.
    
    Labels are drawn on the "right" side of the axis. The "right" side is
    the side of the axis on the right as you move from Position to
    Position2. The way the labels and title line up with the axis and
    tick marks depends on whether the line is considered horizontal or
    vertical.
    
    The vtkActor2D instance variables Position and Position2 are
    instances of vtkCoordinate. Note that the Position2 is an absolute
    position in that class (it was by default relative to Position in
    vtkActor2D).
    
    What this means is that you can specify the axis in a variety of
    coordinate systems. Also, the axis does not have to be either
    horizontal or vertical. The tick marks are created so that they are
    perpendicular to the axis.
    
    Set the text property/attributes of the title and the labels through
    the vtkTextProperty objects associated to this actor.
    
    @sa
    vtkCubeAxesActor2D can be used to create axes in world coordinate
    space.
    
    @sa
    vtkActor2D vtkTextMapper vtkPolyDataMapper2D vtkScalarBarActor
    vtkCoordinate vtkTextProperty
    """
    def AdjustLabelsOff(self):
        """
        V.AdjustLabelsOff()
        C++: virtual void AdjustLabelsOff()
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels. Note that if
        RulerMode is on, then the number of labels is a function of the
        range and ruler distance.
        """
        ...
    
    def AdjustLabelsOn(self):
        """
        V.AdjustLabelsOn()
        C++: virtual void AdjustLabelsOn()
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels. Note that if
        RulerMode is on, then the number of labels is a function of the
        range and ruler distance.
        """
        ...
    
    def AxisVisibilityOff(self):
        """
        V.AxisVisibilityOff()
        C++: virtual void AxisVisibilityOff()
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def AxisVisibilityOn(self):
        """
        V.AxisVisibilityOn()
        C++: virtual void AxisVisibilityOn()
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def ComputeRange(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeRange([float, float], [float, float], int, int, float)
        C++: static void ComputeRange(double inRange[2],
            double outRange[2], int inNumTicks, int &outNumTicks,
            double &interval)
        
        This method computes the range of the axis given an input range.
        It also computes the number of tick marks given a suggested
        number. (The number of tick marks includes end ticks as well.)
        The number of tick marks computed (in conjunction with the output
        range) will yield "nice" tick values. For example, if the input
        range is (0.25,96.7) and the number of ticks requested is 10, the
        output range will be (0,100) with the number of computed ticks to
        11 to yield tick values of (0,10,20,...,100).
        """
        ...
    
    def GetAdjustedNumberOfLabels(self):
        """
        V.GetAdjustedNumberOfLabels() -> int
        C++: virtual int GetAdjustedNumberOfLabels()
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels. Note that if
        RulerMode is on, then the number of labels is a function of the
        range and ruler distance.
        """
        ...
    
    def GetAdjustedRange(self):
        """
        V.GetAdjustedRange() -> (float, ...)
        C++: virtual double *GetAdjustedRange()
        V.GetAdjustedRange(float, float)
        C++: virtual void GetAdjustedRange(double &_arg1, double &_arg2)
        V.GetAdjustedRange([float, float])
        C++: virtual void GetAdjustedRange(double _arg[2])
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels. Note that if
        RulerMode is on, then the number of labels is a function of the
        range and ruler distance.
        """
        ...
    
    def GetAdjustLabels(self):
        """
        V.GetAdjustLabels() -> int
        C++: virtual vtkTypeBool GetAdjustLabels()
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels. Note that if
        RulerMode is on, then the number of labels is a function of the
        range and ruler distance.
        """
        ...
    
    def GetAxisVisibility(self):
        """
        V.GetAxisVisibility() -> int
        C++: virtual vtkTypeBool GetAxisVisibility()
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def GetFontFactor(self):
        """
        V.GetFontFactor() -> float
        C++: virtual double GetFontFactor()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes. This ivar used in conjunction
        with the LabelFactor can be used to control font sizes.
        """
        ...
    
    def GetFontFactorMaxValue(self):
        """
        V.GetFontFactorMaxValue() -> float
        C++: virtual double GetFontFactorMaxValue()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes. This ivar used in conjunction
        with the LabelFactor can be used to control font sizes.
        """
        ...
    
    def GetFontFactorMinValue(self):
        """
        V.GetFontFactorMinValue() -> float
        C++: virtual double GetFontFactorMinValue()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes. This ivar used in conjunction
        with the LabelFactor can be used to control font sizes.
        """
        ...
    
    def GetLabelFactor(self):
        """
        V.GetLabelFactor() -> float
        C++: virtual double GetLabelFactor()
        
        Set/Get the factor that controls the relative size of the axis
        labels to the axis title.
        """
        ...
    
    def GetLabelFactorMaxValue(self):
        """
        V.GetLabelFactorMaxValue() -> float
        C++: virtual double GetLabelFactorMaxValue()
        
        Set/Get the factor that controls the relative size of the axis
        labels to the axis title.
        """
        ...
    
    def GetLabelFactorMinValue(self):
        """
        V.GetLabelFactorMinValue() -> float
        C++: virtual double GetLabelFactorMinValue()
        
        Set/Get the factor that controls the relative size of the axis
        labels to the axis title.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Set/Get the format with which to print the labels on the scalar
        bar.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Set/Get the labels text property.
        """
        ...
    
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> int
        C++: virtual vtkTypeBool GetLabelVisibility()
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def GetMinorTickLength(self):
        """
        V.GetMinorTickLength() -> int
        C++: virtual int GetMinorTickLength()
        
        Set/Get the length of the minor tick marks (expressed in pixels
        or display coordinates).
        """
        ...
    
    def GetMinorTickLengthMaxValue(self):
        """
        V.GetMinorTickLengthMaxValue() -> int
        C++: virtual int GetMinorTickLengthMaxValue()
        
        Set/Get the length of the minor tick marks (expressed in pixels
        or display coordinates).
        """
        ...
    
    def GetMinorTickLengthMinValue(self):
        """
        V.GetMinorTickLengthMinValue() -> int
        C++: virtual int GetMinorTickLengthMinValue()
        
        Set/Get the length of the minor tick marks (expressed in pixels
        or display coordinates).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLabels(self):
        """
        V.GetNumberOfLabels() -> int
        C++: virtual int GetNumberOfLabels()
        
        Set/Get the number of annotation labels to show. This also
        controls the number of major ticks shown. Note that this ivar
        only holds meaning if the RulerMode is off.
        """
        ...
    
    def GetNumberOfLabelsMaxValue(self):
        """
        V.GetNumberOfLabelsMaxValue() -> int
        C++: virtual int GetNumberOfLabelsMaxValue()
        
        Set/Get the number of annotation labels to show. This also
        controls the number of major ticks shown. Note that this ivar
        only holds meaning if the RulerMode is off.
        """
        ...
    
    def GetNumberOfLabelsMinValue(self):
        """
        V.GetNumberOfLabelsMinValue() -> int
        C++: virtual int GetNumberOfLabelsMinValue()
        
        Set/Get the number of annotation labels to show. This also
        controls the number of major ticks shown. Note that this ivar
        only holds meaning if the RulerMode is off.
        """
        ...
    
    def GetNumberOfMinorTicks(self):
        """
        V.GetNumberOfMinorTicks() -> int
        C++: virtual int GetNumberOfMinorTicks()
        
        Number of minor ticks to be displayed between each tick. Default
        is 0.
        """
        ...
    
    def GetNumberOfMinorTicksMaxValue(self):
        """
        V.GetNumberOfMinorTicksMaxValue() -> int
        C++: virtual int GetNumberOfMinorTicksMaxValue()
        
        Number of minor ticks to be displayed between each tick. Default
        is 0.
        """
        ...
    
    def GetNumberOfMinorTicksMinValue(self):
        """
        V.GetNumberOfMinorTicksMinValue() -> int
        C++: virtual int GetNumberOfMinorTicksMinValue()
        
        Number of minor ticks to be displayed between each tick. Default
        is 0.
        """
        ...
    
    def GetPoint1(self):
        """
        V.GetPoint1() -> (float, ...)
        C++: virtual double *GetPoint1()
        
        Specify the position of the first point defining the axis. Note:
        backward compatibility only, use vtkActor2D's Position instead.
        """
        ...
    
    def GetPoint1Coordinate(self):
        """
        V.GetPoint1Coordinate() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetPoint1Coordinate()
        
        Specify the position of the first point defining the axis. Note:
        backward compatibility only, use vtkActor2D's Position instead.
        """
        ...
    
    def GetPoint2(self):
        """
        V.GetPoint2() -> (float, ...)
        C++: virtual double *GetPoint2()
        
        Specify the position of the second point defining the axis. Note
        that the order from Point1 to Point2 controls which side the tick
        marks are drawn on (ticks are drawn on the right, if visible).
        Note: backward compatibility only, use vtkActor2D's Position2
        instead.
        """
        ...
    
    def GetPoint2Coordinate(self):
        """
        V.GetPoint2Coordinate() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetPoint2Coordinate()
        
        Specify the position of the second point defining the axis. Note
        that the order from Point1 to Point2 controls which side the tick
        marks are drawn on (ticks are drawn on the right, if visible).
        Note: backward compatibility only, use vtkActor2D's Position2
        instead.
        """
        ...
    
    def GetRange(self):
        """
        V.GetRange() -> (float, float)
        C++: virtual double *GetRange()
        
        Specify the (min,max) axis range. This will be used in the
        generation of labels, if labels are visible.
        """
        ...
    
    def GetRulerDistance(self):
        """
        V.GetRulerDistance() -> float
        C++: virtual double GetRulerDistance()
        
        Specify the RulerDistance which indicates the spacing of the
        major ticks. This ivar only has effect when the RulerMode is on.
        """
        ...
    
    def GetRulerDistanceMaxValue(self):
        """
        V.GetRulerDistanceMaxValue() -> float
        C++: virtual double GetRulerDistanceMaxValue()
        
        Specify the RulerDistance which indicates the spacing of the
        major ticks. This ivar only has effect when the RulerMode is on.
        """
        ...
    
    def GetRulerDistanceMinValue(self):
        """
        V.GetRulerDistanceMinValue() -> float
        C++: virtual double GetRulerDistanceMinValue()
        
        Specify the RulerDistance which indicates the spacing of the
        major ticks. This ivar only has effect when the RulerMode is on.
        """
        ...
    
    def GetRulerMode(self):
        """
        V.GetRulerMode() -> int
        C++: virtual vtkTypeBool GetRulerMode()
        
        Specify whether this axis should act like a measuring tape (or
        ruler) with specified major tick spacing. If enabled, the
        distance between major ticks is controlled by the RulerDistance
        ivar.
        """
        ...
    
    def GetSizeFontRelativeToAxis(self):
        """
        V.GetSizeFontRelativeToAxis() -> int
        C++: virtual vtkTypeBool GetSizeFontRelativeToAxis()
        
        Specify whether to size the fonts relative to the viewport or
        relative to length of the axis. By default, fonts are resized
        relative to the viewport.
        """
        ...
    
    def GetTickLength(self):
        """
        V.GetTickLength() -> int
        C++: virtual int GetTickLength()
        
        Set/Get the length of the tick marks (expressed in pixels or
        display coordinates).
        """
        ...
    
    def GetTickLengthMaxValue(self):
        """
        V.GetTickLengthMaxValue() -> int
        C++: virtual int GetTickLengthMaxValue()
        
        Set/Get the length of the tick marks (expressed in pixels or
        display coordinates).
        """
        ...
    
    def GetTickLengthMinValue(self):
        """
        V.GetTickLengthMinValue() -> int
        C++: virtual int GetTickLengthMinValue()
        
        Set/Get the length of the tick marks (expressed in pixels or
        display coordinates).
        """
        ...
    
    def GetTickOffset(self):
        """
        V.GetTickOffset() -> int
        C++: virtual int GetTickOffset()
        
        Set/Get the offset of the labels (expressed in pixels or display
        coordinates). The offset is the distance of labels from tick
        marks or other objects.
        """
        ...
    
    def GetTickOffsetMaxValue(self):
        """
        V.GetTickOffsetMaxValue() -> int
        C++: virtual int GetTickOffsetMaxValue()
        
        Set/Get the offset of the labels (expressed in pixels or display
        coordinates). The offset is the distance of labels from tick
        marks or other objects.
        """
        ...
    
    def GetTickOffsetMinValue(self):
        """
        V.GetTickOffsetMinValue() -> int
        C++: virtual int GetTickOffsetMinValue()
        
        Set/Get the offset of the labels (expressed in pixels or display
        coordinates). The offset is the distance of labels from tick
        marks or other objects.
        """
        ...
    
    def GetTickVisibility(self):
        """
        V.GetTickVisibility() -> int
        C++: virtual vtkTypeBool GetTickVisibility()
        
        Set/Get visibility of the axis tick marks.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the scalar bar actor,
        """
        ...
    
    def GetTitlePosition(self):
        """
        V.GetTitlePosition() -> float
        C++: virtual double GetTitlePosition()
        
        Set/Get position of the axis title. 0 is at the start of the axis
        whereas 1 is at the end.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the title text property.
        """
        ...
    
    def GetTitleVisibility(self):
        """
        V.GetTitleVisibility() -> int
        C++: virtual vtkTypeBool GetTitleVisibility()
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def GetUseFontSizeFromProperty(self):
        """
        V.GetUseFontSizeFromProperty() -> int
        C++: virtual vtkTypeBool GetUseFontSizeFromProperty()
        
        By default the AxisActor controls the font size of the axis
        label.  If this option is set to true, it will instead use
        whatever font size is set in the vtkTextProperty, allowing
        external control of the axis size.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAxisActor2D
        C++: vtkAxisActor2D *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Draw the axis.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Draw the axis.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the axis.
        """
        ...
    
    def RulerModeOff(self):
        """
        V.RulerModeOff()
        C++: virtual void RulerModeOff()
        
        Specify whether this axis should act like a measuring tape (or
        ruler) with specified major tick spacing. If enabled, the
        distance between major ticks is controlled by the RulerDistance
        ivar.
        """
        ...
    
    def RulerModeOn(self):
        """
        V.RulerModeOn()
        C++: virtual void RulerModeOn()
        
        Specify whether this axis should act like a measuring tape (or
        ruler) with specified major tick spacing. If enabled, the
        distance between major ticks is controlled by the RulerDistance
        ivar.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAxisActor2D
        C++: static vtkAxisActor2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAdjustLabels(self, p_int):
        """
        V.SetAdjustLabels(int)
        C++: virtual void SetAdjustLabels(vtkTypeBool _arg)
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels. Note that if
        RulerMode is on, then the number of labels is a function of the
        range and ruler distance.
        """
        ...
    
    def SetAxisVisibility(self, p_int):
        """
        V.SetAxisVisibility(int)
        C++: virtual void SetAxisVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis line.
        """
        ...
    
    def SetFontFactor(self, p_float):
        """
        V.SetFontFactor(float)
        C++: virtual void SetFontFactor(double _arg)
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes. This ivar used in conjunction
        with the LabelFactor can be used to control font sizes.
        """
        ...
    
    def SetLabelFactor(self, p_float):
        """
        V.SetLabelFactor(float)
        C++: virtual void SetLabelFactor(double _arg)
        
        Set/Get the factor that controls the relative size of the axis
        labels to the axis title.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on the scalar
        bar.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the labels text property.
        """
        ...
    
    def SetLabelVisibility(self, p_int):
        """
        V.SetLabelVisibility(int)
        C++: virtual void SetLabelVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis labels.
        """
        ...
    
    def SetMinorTickLength(self, p_int):
        """
        V.SetMinorTickLength(int)
        C++: virtual void SetMinorTickLength(int _arg)
        
        Set/Get the length of the minor tick marks (expressed in pixels
        or display coordinates).
        """
        ...
    
    def SetNumberOfLabels(self, p_int):
        """
        V.SetNumberOfLabels(int)
        C++: virtual void SetNumberOfLabels(int _arg)
        
        Set/Get the number of annotation labels to show. This also
        controls the number of major ticks shown. Note that this ivar
        only holds meaning if the RulerMode is off.
        """
        ...
    
    def SetNumberOfMinorTicks(self, p_int):
        """
        V.SetNumberOfMinorTicks(int)
        C++: virtual void SetNumberOfMinorTicks(int _arg)
        
        Number of minor ticks to be displayed between each tick. Default
        is 0.
        """
        ...
    
    def SetPoint1(self, p_float=..., p_float=...):
        """
        V.SetPoint1([float, float])
        C++: virtual void SetPoint1(double x[2])
        V.SetPoint1(float, float)
        C++: virtual void SetPoint1(double x, double y)
        
        Specify the position of the first point defining the axis. Note:
        backward compatibility only, use vtkActor2D's Position instead.
        """
        ...
    
    def SetPoint2(self, p_float=..., p_float=...):
        """
        V.SetPoint2([float, float])
        C++: virtual void SetPoint2(double x[2])
        V.SetPoint2(float, float)
        C++: virtual void SetPoint2(double x, double y)
        
        Specify the position of the second point defining the axis. Note
        that the order from Point1 to Point2 controls which side the tick
        marks are drawn on (ticks are drawn on the right, if visible).
        Note: backward compatibility only, use vtkActor2D's Position2
        instead.
        """
        ...
    
    def SetRange(self, p_float, p_float_1):
        """
        V.SetRange(float, float)
        C++: virtual void SetRange(double _arg1, double _arg2)
        V.SetRange((float, float))
        C++: void SetRange(const double _arg[2])
        
        Specify the (min,max) axis range. This will be used in the
        generation of labels, if labels are visible.
        """
        ...
    
    def SetRulerDistance(self, p_float):
        """
        V.SetRulerDistance(float)
        C++: virtual void SetRulerDistance(double _arg)
        
        Specify the RulerDistance which indicates the spacing of the
        major ticks. This ivar only has effect when the RulerMode is on.
        """
        ...
    
    def SetRulerMode(self, p_int):
        """
        V.SetRulerMode(int)
        C++: virtual void SetRulerMode(vtkTypeBool _arg)
        
        Specify whether this axis should act like a measuring tape (or
        ruler) with specified major tick spacing. If enabled, the
        distance between major ticks is controlled by the RulerDistance
        ivar.
        """
        ...
    
    def SetSizeFontRelativeToAxis(self, p_int):
        """
        V.SetSizeFontRelativeToAxis(int)
        C++: virtual void SetSizeFontRelativeToAxis(vtkTypeBool _arg)
        
        Specify whether to size the fonts relative to the viewport or
        relative to length of the axis. By default, fonts are resized
        relative to the viewport.
        """
        ...
    
    def SetTickLength(self, p_int):
        """
        V.SetTickLength(int)
        C++: virtual void SetTickLength(int _arg)
        
        Set/Get the length of the tick marks (expressed in pixels or
        display coordinates).
        """
        ...
    
    def SetTickOffset(self, p_int):
        """
        V.SetTickOffset(int)
        C++: virtual void SetTickOffset(int _arg)
        
        Set/Get the offset of the labels (expressed in pixels or display
        coordinates). The offset is the distance of labels from tick
        marks or other objects.
        """
        ...
    
    def SetTickVisibility(self, p_int):
        """
        V.SetTickVisibility(int)
        C++: virtual void SetTickVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis tick marks.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set/Get the title of the scalar bar actor,
        """
        ...
    
    def SetTitlePosition(self, p_float):
        """
        V.SetTitlePosition(float)
        C++: virtual void SetTitlePosition(double _arg)
        
        Set/Get position of the axis title. 0 is at the start of the axis
        whereas 1 is at the end.
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property.
        """
        ...
    
    def SetTitleVisibility(self, p_int):
        """
        V.SetTitleVisibility(int)
        C++: virtual void SetTitleVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def SetUseFontSizeFromProperty(self, p_int):
        """
        V.SetUseFontSizeFromProperty(int)
        C++: virtual void SetUseFontSizeFromProperty(vtkTypeBool _arg)
        
        By default the AxisActor controls the font size of the axis
        label.  If this option is set to true, it will instead use
        whatever font size is set in the vtkTextProperty, allowing
        external control of the axis size.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of an axis actor. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def SizeFontRelativeToAxisOff(self):
        """
        V.SizeFontRelativeToAxisOff()
        C++: virtual void SizeFontRelativeToAxisOff()
        
        Specify whether to size the fonts relative to the viewport or
        relative to length of the axis. By default, fonts are resized
        relative to the viewport.
        """
        ...
    
    def SizeFontRelativeToAxisOn(self):
        """
        V.SizeFontRelativeToAxisOn()
        C++: virtual void SizeFontRelativeToAxisOn()
        
        Specify whether to size the fonts relative to the viewport or
        relative to length of the axis. By default, fonts are resized
        relative to the viewport.
        """
        ...
    
    def TickVisibilityOff(self):
        """
        V.TickVisibilityOff()
        C++: virtual void TickVisibilityOff()
        
        Set/Get visibility of the axis tick marks.
        """
        ...
    
    def TickVisibilityOn(self):
        """
        V.TickVisibilityOn()
        C++: virtual void TickVisibilityOn()
        
        Set/Get visibility of the axis tick marks.
        """
        ...
    
    def TitleVisibilityOff(self):
        """
        V.TitleVisibilityOff()
        C++: virtual void TitleVisibilityOff()
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def TitleVisibilityOn(self):
        """
        V.TitleVisibilityOn()
        C++: virtual void TitleVisibilityOn()
        
        Set/Get visibility of the axis title.
        """
        ...
    
    def UseFontSizeFromPropertyOff(self):
        """
        V.UseFontSizeFromPropertyOff()
        C++: virtual void UseFontSizeFromPropertyOff()
        
        By default the AxisActor controls the font size of the axis
        label.  If this option is set to true, it will instead use
        whatever font size is set in the vtkTextProperty, allowing
        external control of the axis size.
        """
        ...
    
    def UseFontSizeFromPropertyOn(self):
        """
        V.UseFontSizeFromPropertyOn()
        C++: virtual void UseFontSizeFromPropertyOn()
        
        By default the AxisActor controls the font size of the axis
        label.  If this option is set to true, it will instead use
        whatever font size is set in the vtkTextProperty, allowing
        external control of the axis size.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    LabelMax = ...
    VTK_MAX_LABELS = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAxisFollower(__vtkmodules_vtkRenderingCore.vtkFollower):
    """
    vtkAxisFollower - a subclass of vtkFollower that ensures that data is
    always parallel to the axis defined by a vtkAxisActor.
    
    Superclass: vtkFollower
    
    vtkAxisFollower is a subclass of vtkFollower that always follows its
    specified axis. More specifically it will not change its position or
    scale, but it will continually update its orientation so that it is
    aliged with the axis and facing at angle to the camera to provide
    maximum visibilty. This is typically used for text labels for 3d
    plots.
    @sa
    vtkActor vtkFollower vtkCamera vtkAxisActor vtkCubeAxesActor
    """
    def AutoCenterOff(self):
        """
        V.AutoCenterOff()
        C++: virtual void AutoCenterOff()
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def AutoCenterOn(self):
        """
        V.AutoCenterOn()
        C++: virtual void AutoCenterOn()
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def AutoScale(self, vtkViewport, vtkCamera, p_float, p_float=..., p_float=..., p_float=...):
        """
        V.AutoScale(vtkViewport, vtkCamera, float, [float, float, float])
            -> float
        C++: static double AutoScale(vtkViewport *viewport,
            vtkCamera *camera, double screenSize, double position[3])
        
        Calculate scale factor to maintain same size of a object on the
        screen.
        """
        ...
    
    def ComputeTransformMatrix(self, vtkRenderer):
        """
        V.ComputeTransformMatrix(vtkRenderer)
        C++: virtual void ComputeTransformMatrix(vtkRenderer *ren)
        
        Generate the matrix based on ivars. This method overloads its
        superclasses ComputeMatrix() method due to the special
        vtkFollower matrix operations.
        """
        ...
    
    def GetAutoCenter(self):
        """
        V.GetAutoCenter() -> int
        C++: virtual vtkTypeBool GetAutoCenter()
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def GetAxis(self):
        """
        V.GetAxis() -> vtkAxisActor
        C++: virtual vtkAxisActor *GetAxis()
        
        Set axis that needs to be followed.
        """
        ...
    
    def GetDistanceLODThreshold(self):
        """
        V.GetDistanceLODThreshold() -> float
        C++: virtual double GetDistanceLODThreshold()
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def GetDistanceLODThresholdMaxValue(self):
        """
        V.GetDistanceLODThresholdMaxValue() -> float
        C++: virtual double GetDistanceLODThresholdMaxValue()
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def GetDistanceLODThresholdMinValue(self):
        """
        V.GetDistanceLODThresholdMinValue() -> float
        C++: virtual double GetDistanceLODThresholdMinValue()
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def GetEnableDistanceLOD(self):
        """
        V.GetEnableDistanceLOD() -> int
        C++: virtual int GetEnableDistanceLOD()
        
        Enable / disable use of distance based LOD. If enabled the actor
        will not be visible at a certain distance from the camera.
        Default is false.
        """
        ...
    
    def GetEnableViewAngleLOD(self):
        """
        V.GetEnableViewAngleLOD() -> int
        C++: virtual int GetEnableViewAngleLOD()
        
        Enable / disable use of view angle based LOD. If enabled the
        actor will not be visible at a certain view angle. Default is
        true.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScreenOffset(self):
        """
        V.GetScreenOffset() -> float
        C++: double GetScreenOffset()
        
        Set/Get the desired screen offset from the axis. Convenience
        method, using a zero horizontal offset
        """
        ...
    
    def GetScreenOffsetVector(self):
        """
        V.GetScreenOffsetVector() -> (float, float)
        C++: virtual double *GetScreenOffsetVector()
        
        Set/Get the desired screen offset from the axis. first component
        is horizontal, second is vertical.
        """
        ...
    
    def GetViewAngleLODThreshold(self):
        """
        V.GetViewAngleLODThreshold() -> float
        C++: virtual double GetViewAngleLODThreshold()
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def GetViewAngleLODThresholdMaxValue(self):
        """
        V.GetViewAngleLODThresholdMaxValue() -> float
        C++: virtual double GetViewAngleLODThresholdMaxValue()
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def GetViewAngleLODThresholdMinValue(self):
        """
        V.GetViewAngleLODThresholdMinValue() -> float
        C++: virtual double GetViewAngleLODThresholdMinValue()
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAxisFollower
        C++: vtkAxisFollower *NewInstance()
        """
        ...
    
    def Render(self, vtkRenderer):
        """
        V.Render(vtkRenderer)
        C++: void Render(vtkRenderer *ren) override;
        
        This causes the actor to be rendered. It in turn will render the
        actor's property, texture map and then mapper. If a property
        hasn't been assigned, then the actor will create one
        automatically.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        This causes the actor to be rendered. It in turn will render the
        actor's property, texture map and then mapper. If a property
        hasn't been assigned, then the actor will create one
        automatically.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        This causes the actor to be rendered. It in turn will render the
        actor's property, texture map and then mapper. If a property
        hasn't been assigned, then the actor will create one
        automatically.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAxisFollower
        C++: static vtkAxisFollower *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAutoCenter(self, p_int):
        """
        V.SetAutoCenter(int)
        C++: virtual void SetAutoCenter(vtkTypeBool _arg)
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def SetAxis(self, vtkAxisActor):
        """
        V.SetAxis(vtkAxisActor)
        C++: virtual void SetAxis(vtkAxisActor *)
        
        Set axis that needs to be followed.
        """
        ...
    
    def SetDistanceLODThreshold(self, p_float):
        """
        V.SetDistanceLODThreshold(float)
        C++: virtual void SetDistanceLODThreshold(double _arg)
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def SetEnableDistanceLOD(self, p_int):
        """
        V.SetEnableDistanceLOD(int)
        C++: virtual void SetEnableDistanceLOD(int _arg)
        
        Enable / disable use of distance based LOD. If enabled the actor
        will not be visible at a certain distance from the camera.
        Default is false.
        """
        ...
    
    def SetEnableViewAngleLOD(self, p_int):
        """
        V.SetEnableViewAngleLOD(int)
        C++: virtual void SetEnableViewAngleLOD(int _arg)
        
        Enable / disable use of view angle based LOD. If enabled the
        actor will not be visible at a certain view angle. Default is
        true.
        """
        ...
    
    def SetScreenOffset(self, p_float):
        """
        V.SetScreenOffset(float)
        C++: void SetScreenOffset(double offset)
        
        Set/Get the desired screen offset from the axis. Convenience
        method, using a zero horizontal offset
        """
        ...
    
    def SetScreenOffsetVector(self, p_float, p_float_1):
        """
        V.SetScreenOffsetVector(float, float)
        C++: virtual void SetScreenOffsetVector(double _arg1,
            double _arg2)
        V.SetScreenOffsetVector((float, float))
        C++: void SetScreenOffsetVector(const double _arg[2])
        
        Set/Get the desired screen offset from the axis. first component
        is horizontal, second is vertical.
        """
        ...
    
    def SetViewAngleLODThreshold(self, p_float):
        """
        V.SetViewAngleLODThreshold(float)
        C++: virtual void SetViewAngleLODThreshold(double _arg)
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of a follower. Overloads the virtual vtkProp method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBarChartActor(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkBarChartActor - create a bar chart from an array
    
    Superclass: vtkActor2D
    
    vtkBarChartActor generates a bar chart from an array of numbers
    defined in field data (a vtkDataObject). To use this class, you must
    specify an input data object. You'll probably also want to specify
    the position of the plot be setting the Position and Position2
    instance variables, which define a rectangle in which the plot lies. 
    There are also many other instance variables that control the look of
    the plot includes its title and legend.
    
    Set the text property/attributes of the title and the labels through
    the vtkTextProperty objects associated with these components.
    
    @sa
    vtkParallelCoordinatesActor vtkXYPlotActor vtkSpiderPlotActor
    vtkPieChartActor
    """
    def GetBarColor(self, p_int):
        """
        V.GetBarColor(int) -> (float, ...)
        C++: double *GetBarColor(int i)
        
        Specify colors for each bar. If not specified, they are
        automatically generated.
        """
        ...
    
    def GetBarLabel(self, p_int):
        """
        V.GetBarLabel(int) -> string
        C++: const char *GetBarLabel(int i)
        
        Specify the names of each bar. If not specified, then an integer
        number is automatically generated.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataObject
        C++: virtual vtkDataObject *GetInput()
        
        Get the input data object to this actor.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Set/Get the labels text property. This controls the appearance of
        all bar bar labels.
        """
        ...
    
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> int
        C++: virtual vtkTypeBool GetLabelVisibility()
        
        Enable/Disable the display of bar labels.
        """
        ...
    
    def GetLegendActor(self):
        """
        V.GetLegendActor() -> vtkLegendBoxActor
        C++: virtual vtkLegendBoxActor *GetLegendActor()
        
        Retrieve handles to the legend box. This is useful if you would
        like to manually control the legend appearance.
        """
        ...
    
    def GetLegendVisibility(self):
        """
        V.GetLegendVisibility() -> int
        C++: virtual vtkTypeBool GetLegendVisibility()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the bar chart.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the title text property. The property controls the
        appearance of the plot title.
        """
        ...
    
    def GetTitleVisibility(self):
        """
        V.GetTitleVisibility() -> int
        C++: virtual vtkTypeBool GetTitleVisibility()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def GetYTitle(self):
        """
        V.GetYTitle() -> string
        C++: virtual char *GetYTitle()
        
        Specify the title of the y-axis.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        
        Enable/Disable the display of bar labels.
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        
        Enable/Disable the display of bar labels.
        """
        ...
    
    def LegendVisibilityOff(self):
        """
        V.LegendVisibilityOff()
        C++: virtual void LegendVisibilityOff()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def LegendVisibilityOn(self):
        """
        V.LegendVisibilityOn()
        C++: virtual void LegendVisibilityOn()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBarChartActor
        C++: vtkBarChartActor *NewInstance()
        
        Standard methods for type information and printing.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Draw the bar plot.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Draw the bar plot.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the bar plot.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBarChartActor
        C++: static vtkBarChartActor *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for type information and printing.
        """
        ...
    
    def SetBarColor(self, p_int, p_float, p_float_1, p_float_2):
        """
        V.SetBarColor(int, float, float, float)
        C++: void SetBarColor(int i, double r, double g, double b)
        V.SetBarColor(int, (float, float, float))
        C++: void SetBarColor(int i, const double color[3])
        
        Specify colors for each bar. If not specified, they are
        automatically generated.
        """
        ...
    
    def SetBarLabel(self, p_int, string):
        """
        V.SetBarLabel(int, string)
        C++: void SetBarLabel(const int i, const char *)
        
        Specify the names of each bar. If not specified, then an integer
        number is automatically generated.
        """
        ...
    
    def SetInput(self, vtkDataObject):
        """
        V.SetInput(vtkDataObject)
        C++: virtual void SetInput(vtkDataObject *)
        
        Set the input to the bar chart actor.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the labels text property. This controls the appearance of
        all bar bar labels.
        """
        ...
    
    def SetLabelVisibility(self, p_int):
        """
        V.SetLabelVisibility(int)
        C++: virtual void SetLabelVisibility(vtkTypeBool _arg)
        
        Enable/Disable the display of bar labels.
        """
        ...
    
    def SetLegendVisibility(self, p_int):
        """
        V.SetLegendVisibility(int)
        C++: virtual void SetLegendVisibility(vtkTypeBool _arg)
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set/Get the title of the bar chart.
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property. The property controls the
        appearance of the plot title.
        """
        ...
    
    def SetTitleVisibility(self, p_int):
        """
        V.SetTitleVisibility(int)
        C++: virtual void SetTitleVisibility(vtkTypeBool _arg)
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def SetYTitle(self, string):
        """
        V.SetYTitle(string)
        C++: virtual void SetYTitle(const char *_arg)
        
        Specify the title of the y-axis.
        """
        ...
    
    def TitleVisibilityOff(self):
        """
        V.TitleVisibilityOff()
        C++: virtual void TitleVisibilityOff()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def TitleVisibilityOn(self):
        """
        V.TitleVisibilityOn()
        C++: virtual void TitleVisibilityOn()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCaptionActor2D(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkCaptionActor2D - draw text label associated with a point
    
    Superclass: vtkActor2D
    
    vtkCaptionActor2D is a hybrid 2D/3D actor that is used to associate
    text with a point (the AttachmentPoint) in the scene. The caption can
    be drawn with a rectangular border and a leader connecting the
    caption to the attachment point. Optionally, the leader can be
    glyphed at its endpoint to create arrow heads or other indicators.
    
    To use the caption actor, you normally specify the Position and
    Position2 coordinates (these are inherited from the vtkActor2D
    superclass). (Note that Position2 can be set using vtkActor2D's
    SetWidth() and SetHeight() methods.)  Position and Position2 define
    the size of the caption, and a third point, the AttachmentPoint,
    defines a point that the caption is associated with.  You must also
    define the caption text, whether you want a border around the
    caption, and whether you want a leader from the caption to the
    attachment point. The font attributes of the text can be set through
    the vtkTextProperty associated to this actor. You also indicate
    whether you want the leader to be 2D or 3D. (2D leaders are always
    drawn over the underlying geometry. 3D leaders may be occluded by the
    geometry.) The leader may also be terminated by an optional glyph
    (e.g., arrow).
    
    The trickiest part about using this class is setting Position,
    Position2, and AttachmentPoint correctly. These instance variables
    are vtkCoordinates, and can be set up in various ways. In default
    usage, the AttachmentPoint is defined in the world coordinate system,
    Position is the lower-left corner of the caption and relative to
    AttachmentPoint (defined in display coordaintes, i.e., pixels), and
    Position2 is relative to Position and is the upper-right corner (also
    in display coordinates). However, the user has full control over the
    coordinates, and can do things like place the caption in a fixed
    position in the renderer, with the leader moving with the
    AttachmentPoint.
    
    @sa
    vtkLegendBoxActor vtkTextMapper vtkTextActor vtkTextProperty
    vtkCoordinate
    """
    def AttachEdgeOnlyOff(self):
        """
        V.AttachEdgeOnlyOff()
        C++: virtual void AttachEdgeOnlyOff()
        
        Enable/disable whether to attach the arrow only to the edge, NOT
        the vertices of the caption border.
        """
        ...
    
    def AttachEdgeOnlyOn(self):
        """
        V.AttachEdgeOnlyOn()
        C++: virtual void AttachEdgeOnlyOn()
        
        Enable/disable whether to attach the arrow only to the edge, NOT
        the vertices of the caption border.
        """
        ...
    
    def BorderOff(self):
        """
        V.BorderOff()
        C++: virtual void BorderOff()
        
        Enable/disable the placement of a border around the text.
        """
        ...
    
    def BorderOn(self):
        """
        V.BorderOn()
        C++: virtual void BorderOn()
        
        Enable/disable the placement of a border around the text.
        """
        ...
    
    def GetAttachEdgeOnly(self):
        """
        V.GetAttachEdgeOnly() -> int
        C++: virtual vtkTypeBool GetAttachEdgeOnly()
        
        Enable/disable whether to attach the arrow only to the edge, NOT
        the vertices of the caption border.
        """
        ...
    
    def GetAttachmentPoint(self):
        """
        V.GetAttachmentPoint() -> (float, float, float)
        C++: virtual double *GetAttachmentPoint()
        
        Set/Get the attachment point for the caption. By default, the
        attachment point is defined in world coordinates, but this can be
        changed using vtkCoordinate methods.
        """
        ...
    
    def GetAttachmentPointCoordinate(self):
        """
        V.GetAttachmentPointCoordinate() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetAttachmentPointCoordinate()
        
        Set/Get the attachment point for the caption. By default, the
        attachment point is defined in world coordinates, but this can be
        changed using vtkCoordinate methods.
        """
        ...
    
    def GetBorder(self):
        """
        V.GetBorder() -> int
        C++: virtual vtkTypeBool GetBorder()
        
        Enable/disable the placement of a border around the text.
        """
        ...
    
    def GetCaption(self):
        """
        V.GetCaption() -> string
        C++: virtual char *GetCaption()
        
        Define the text to be placed in the caption. The text can be
        multiple lines (separated by "\n").
        """
        ...
    
    def GetCaptionTextProperty(self):
        """
        V.GetCaptionTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetCaptionTextProperty()
        
        Set/Get the text property.
        """
        ...
    
    def GetLeader(self):
        """
        V.GetLeader() -> int
        C++: virtual vtkTypeBool GetLeader()
        
        Enable/disable drawing a "line" from the caption to the
        attachment point.
        """
        ...
    
    def GetLeaderGlyph(self):
        """
        V.GetLeaderGlyph() -> vtkPolyData
        C++: virtual vtkPolyData *GetLeaderGlyph()
        
        Specify a glyph to be used as the leader "head". This could be
        something like an arrow or sphere. If not specified, no glyph is
        drawn. Note that the glyph is assumed to be aligned along the
        x-axis and is rotated about the origin. SetLeaderGlyphData()
        directly uses the polydata without setting a pipeline connection.
        SetLeaderGlyphConnection() sets up a pipeline connection and
        causes an update to the input during render.
        """
        ...
    
    def GetLeaderGlyphSize(self):
        """
        V.GetLeaderGlyphSize() -> float
        C++: virtual double GetLeaderGlyphSize()
        
        Specify the relative size of the leader head. This is expressed
        as a fraction of the size (diagonal length) of the renderer. The
        leader head is automatically scaled so that window resize,
        zooming or other camera motion results in proportional changes in
        size to the leader glyph.
        """
        ...
    
    def GetLeaderGlyphSizeMaxValue(self):
        """
        V.GetLeaderGlyphSizeMaxValue() -> float
        C++: virtual double GetLeaderGlyphSizeMaxValue()
        
        Specify the relative size of the leader head. This is expressed
        as a fraction of the size (diagonal length) of the renderer. The
        leader head is automatically scaled so that window resize,
        zooming or other camera motion results in proportional changes in
        size to the leader glyph.
        """
        ...
    
    def GetLeaderGlyphSizeMinValue(self):
        """
        V.GetLeaderGlyphSizeMinValue() -> float
        C++: virtual double GetLeaderGlyphSizeMinValue()
        
        Specify the relative size of the leader head. This is expressed
        as a fraction of the size (diagonal length) of the renderer. The
        leader head is automatically scaled so that window resize,
        zooming or other camera motion results in proportional changes in
        size to the leader glyph.
        """
        ...
    
    def GetMaximumLeaderGlyphSize(self):
        """
        V.GetMaximumLeaderGlyphSize() -> int
        C++: virtual int GetMaximumLeaderGlyphSize()
        
        Specify the maximum size of the leader head (if any) in pixels.
        This is used in conjunction with LeaderGlyphSize to cap the
        maximum size of the LeaderGlyph.
        """
        ...
    
    def GetMaximumLeaderGlyphSizeMaxValue(self):
        """
        V.GetMaximumLeaderGlyphSizeMaxValue() -> int
        C++: virtual int GetMaximumLeaderGlyphSizeMaxValue()
        
        Specify the maximum size of the leader head (if any) in pixels.
        This is used in conjunction with LeaderGlyphSize to cap the
        maximum size of the LeaderGlyph.
        """
        ...
    
    def GetMaximumLeaderGlyphSizeMinValue(self):
        """
        V.GetMaximumLeaderGlyphSizeMinValue() -> int
        C++: virtual int GetMaximumLeaderGlyphSizeMinValue()
        
        Specify the maximum size of the leader head (if any) in pixels.
        This is used in conjunction with LeaderGlyphSize to cap the
        maximum size of the LeaderGlyph.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPadding(self):
        """
        V.GetPadding() -> int
        C++: virtual int GetPadding()
        
        Set/Get the padding between the caption and the border. The value
        is specified in pixels.
        """
        ...
    
    def GetPaddingMaxValue(self):
        """
        V.GetPaddingMaxValue() -> int
        C++: virtual int GetPaddingMaxValue()
        
        Set/Get the padding between the caption and the border. The value
        is specified in pixels.
        """
        ...
    
    def GetPaddingMinValue(self):
        """
        V.GetPaddingMinValue() -> int
        C++: virtual int GetPaddingMinValue()
        
        Set/Get the padding between the caption and the border. The value
        is specified in pixels.
        """
        ...
    
    def GetTextActor(self):
        """
        V.GetTextActor() -> vtkTextActor
        C++: virtual vtkTextActor *GetTextActor()
        
        Get the text actor used by the caption. This is useful if you
        want to control justification and other characteristics of the
        text actor.
        """
        ...
    
    def GetThreeDimensionalLeader(self):
        """
        V.GetThreeDimensionalLeader() -> int
        C++: virtual vtkTypeBool GetThreeDimensionalLeader()
        
        Indicate whether the leader is 2D (no hidden line) or 3D
        (z-buffered).
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LeaderOff(self):
        """
        V.LeaderOff()
        C++: virtual void LeaderOff()
        
        Enable/disable drawing a "line" from the caption to the
        attachment point.
        """
        ...
    
    def LeaderOn(self):
        """
        V.LeaderOn()
        C++: virtual void LeaderOn()
        
        Enable/disable drawing a "line" from the caption to the
        attachment point.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCaptionActor2D
        C++: vtkCaptionActor2D *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Release any
        graphics resources that are being consumed by this actor. The
        parameter window could be used to determine which graphic
        resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the legend
        box to the screen.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the legend
        box to the screen.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the legend
        box to the screen.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCaptionActor2D
        C++: static vtkCaptionActor2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAttachEdgeOnly(self, p_int):
        """
        V.SetAttachEdgeOnly(int)
        C++: virtual void SetAttachEdgeOnly(vtkTypeBool _arg)
        
        Enable/disable whether to attach the arrow only to the edge, NOT
        the vertices of the caption border.
        """
        ...
    
    def SetAttachmentPoint(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetAttachmentPoint([float, float, float])
        C++: virtual void SetAttachmentPoint(double x[3])
        V.SetAttachmentPoint(float, float, float)
        C++: virtual void SetAttachmentPoint(double x, double y, double z)
        
        Set/Get the attachment point for the caption. By default, the
        attachment point is defined in world coordinates, but this can be
        changed using vtkCoordinate methods.
        """
        ...
    
    def SetBorder(self, p_int):
        """
        V.SetBorder(int)
        C++: virtual void SetBorder(vtkTypeBool _arg)
        
        Enable/disable the placement of a border around the text.
        """
        ...
    
    def SetCaption(self, string):
        """
        V.SetCaption(string)
        C++: virtual void SetCaption(const char *caption)
        
        Define the text to be placed in the caption. The text can be
        multiple lines (separated by "\n").
        """
        ...
    
    def SetCaptionTextProperty(self, vtkTextProperty):
        """
        V.SetCaptionTextProperty(vtkTextProperty)
        C++: virtual void SetCaptionTextProperty(vtkTextProperty *p)
        
        Set/Get the text property.
        """
        ...
    
    def SetLeader(self, p_int):
        """
        V.SetLeader(int)
        C++: virtual void SetLeader(vtkTypeBool _arg)
        
        Enable/disable drawing a "line" from the caption to the
        attachment point.
        """
        ...
    
    def SetLeaderGlyphConnection(self, vtkAlgorithmOutput):
        """
        V.SetLeaderGlyphConnection(vtkAlgorithmOutput)
        C++: virtual void SetLeaderGlyphConnection(vtkAlgorithmOutput *)
        
        Specify a glyph to be used as the leader "head". This could be
        something like an arrow or sphere. If not specified, no glyph is
        drawn. Note that the glyph is assumed to be aligned along the
        x-axis and is rotated about the origin. SetLeaderGlyphData()
        directly uses the polydata without setting a pipeline connection.
        SetLeaderGlyphConnection() sets up a pipeline connection and
        causes an update to the input during render.
        """
        ...
    
    def SetLeaderGlyphData(self, vtkPolyData):
        """
        V.SetLeaderGlyphData(vtkPolyData)
        C++: virtual void SetLeaderGlyphData(vtkPolyData *)
        
        Specify a glyph to be used as the leader "head". This could be
        something like an arrow or sphere. If not specified, no glyph is
        drawn. Note that the glyph is assumed to be aligned along the
        x-axis and is rotated about the origin. SetLeaderGlyphData()
        directly uses the polydata without setting a pipeline connection.
        SetLeaderGlyphConnection() sets up a pipeline connection and
        causes an update to the input during render.
        """
        ...
    
    def SetLeaderGlyphSize(self, p_float):
        """
        V.SetLeaderGlyphSize(float)
        C++: virtual void SetLeaderGlyphSize(double _arg)
        
        Specify the relative size of the leader head. This is expressed
        as a fraction of the size (diagonal length) of the renderer. The
        leader head is automatically scaled so that window resize,
        zooming or other camera motion results in proportional changes in
        size to the leader glyph.
        """
        ...
    
    def SetMaximumLeaderGlyphSize(self, p_int):
        """
        V.SetMaximumLeaderGlyphSize(int)
        C++: virtual void SetMaximumLeaderGlyphSize(int _arg)
        
        Specify the maximum size of the leader head (if any) in pixels.
        This is used in conjunction with LeaderGlyphSize to cap the
        maximum size of the LeaderGlyph.
        """
        ...
    
    def SetPadding(self, p_int):
        """
        V.SetPadding(int)
        C++: virtual void SetPadding(int _arg)
        
        Set/Get the padding between the caption and the border. The value
        is specified in pixels.
        """
        ...
    
    def SetThreeDimensionalLeader(self, p_int):
        """
        V.SetThreeDimensionalLeader(int)
        C++: virtual void SetThreeDimensionalLeader(vtkTypeBool _arg)
        
        Indicate whether the leader is 2D (no hidden line) or 3D
        (z-buffered).
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of this scaled text actor. Overloads the virtual
        vtkProp method.
        """
        ...
    
    def ThreeDimensionalLeaderOff(self):
        """
        V.ThreeDimensionalLeaderOff()
        C++: virtual void ThreeDimensionalLeaderOff()
        
        Indicate whether the leader is 2D (no hidden line) or 3D
        (z-buffered).
        """
        ...
    
    def ThreeDimensionalLeaderOn(self):
        """
        V.ThreeDimensionalLeaderOn()
        C++: virtual void ThreeDimensionalLeaderOn()
        
        Indicate whether the leader is 2D (no hidden line) or 3D
        (z-buffered).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkConvexHull2D(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkConvexHull2D - Produce filled convex hulls around a set of points.
    
    Superclass: vtkPolyDataAlgorithm
    
    Produces a vtkPolyData comprised of a filled polygon of the convex
    hull of the input points. You may alternatively choose to output a
    bounding rectangle. Static methods are provided that calculate a
    (counter-clockwise) hull based on a set of input points.
    
    To help maintain the property of guaranteed visibilityhulls may be
    artificially scaled by setting MinHullSizeInWorld. This is
    particularly helpful in the case that there are only one or two
    points as it avoids producing a degenerate polygon. This setting is
    also available as an argument to the static methods.
    
    Setting a vtkRenderer on the filter enables the possibility to set
    MinHullSizeInDisplay to the desired number of display pixels to cover
    in each of the x- and y-dimensions.
    
    Setting OutlineOn() additionally produces an outline of the hull on
    output port 1.
    
    @attention This filter operates in the x,y-plane and as such works
    best with an interactor style that does not permit camera rotation
    such as vtkInteractorStyleRubberBand2D.
    
    @par Thanks: Thanks to Colin Myers, University of Leeds for providing
    this implementation.
    """
    def CalculateBoundingRectangle(self, vtkPoints, vtkPoints_1, p_float):
        """
        V.CalculateBoundingRectangle(vtkPoints, vtkPoints, float)
        C++: static void CalculateBoundingRectangle(vtkPoints *inPoints,
            vtkPoints *outPoints, double minimumHullSize=1.0)
        
        Convenience methods to calculate a convex hull from a set of
        vtkPointS.
        """
        ...
    
    def CalculateConvexHull(self, vtkPoints, vtkPoints_1, p_float):
        """
        V.CalculateConvexHull(vtkPoints, vtkPoints, float)
        C++: static void CalculateConvexHull(vtkPoints *inPoints,
            vtkPoints *outPoints, double minimumHullSize=1.0)
        
        Convenience methods to calculate a convex hull from a set of
        vtkPointS.
        """
        ...
    
    def GetHullShape(self):
        """
        V.GetHullShape() -> int
        C++: virtual int GetHullShape()
        
        Set the shape of the hull to BoundingRectangle or ConvexHull.
        """
        ...
    
    def GetHullShapeMaxValue(self):
        """
        V.GetHullShapeMaxValue() -> int
        C++: virtual int GetHullShapeMaxValue()
        
        Set the shape of the hull to BoundingRectangle or ConvexHull.
        """
        ...
    
    def GetHullShapeMinValue(self):
        """
        V.GetHullShapeMinValue() -> int
        C++: virtual int GetHullShapeMinValue()
        
        Set the shape of the hull to BoundingRectangle or ConvexHull.
        """
        ...
    
    def GetMinHullSizeInDisplay(self):
        """
        V.GetMinHullSizeInDisplay() -> int
        C++: virtual int GetMinHullSizeInDisplay()
        
        Set the minimum x,y-dimensions of each hull in pixels. You must
        also set a vtkRenderer. Defaults to 1. Set to 0 to disable.
        """
        ...
    
    def GetMinHullSizeInDisplayMaxValue(self):
        """
        V.GetMinHullSizeInDisplayMaxValue() -> int
        C++: virtual int GetMinHullSizeInDisplayMaxValue()
        
        Set the minimum x,y-dimensions of each hull in pixels. You must
        also set a vtkRenderer. Defaults to 1. Set to 0 to disable.
        """
        ...
    
    def GetMinHullSizeInDisplayMinValue(self):
        """
        V.GetMinHullSizeInDisplayMinValue() -> int
        C++: virtual int GetMinHullSizeInDisplayMinValue()
        
        Set the minimum x,y-dimensions of each hull in pixels. You must
        also set a vtkRenderer. Defaults to 1. Set to 0 to disable.
        """
        ...
    
    def GetMinHullSizeInWorld(self):
        """
        V.GetMinHullSizeInWorld() -> float
        C++: virtual double GetMinHullSizeInWorld()
        
        Set the minimum x,y-dimensions of each hull in world coordinates.
        Defaults to 1.0. Set to 0.0 to disable.
        """
        ...
    
    def GetMinHullSizeInWorldMaxValue(self):
        """
        V.GetMinHullSizeInWorldMaxValue() -> float
        C++: virtual double GetMinHullSizeInWorldMaxValue()
        
        Set the minimum x,y-dimensions of each hull in world coordinates.
        Defaults to 1.0. Set to 0.0 to disable.
        """
        ...
    
    def GetMinHullSizeInWorldMinValue(self):
        """
        V.GetMinHullSizeInWorldMinValue() -> float
        C++: virtual double GetMinHullSizeInWorldMinValue()
        
        Set the minimum x,y-dimensions of each hull in world coordinates.
        Defaults to 1.0. Set to 0.0 to disable.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        The modified time of this filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutline(self):
        """
        V.GetOutline() -> bool
        C++: virtual bool GetOutline()
        
        Produce an outline (polyline) of the hull on output port 1.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: vtkRenderer *GetRenderer()
        
        Renderer needed for MinHullSizeInDisplay calculation. Not
        reference counted.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Scale the hull by the amount specified. Defaults to 1.0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkConvexHull2D
        C++: vtkConvexHull2D *NewInstance()
        """
        ...
    
    def OutlineOff(self):
        """
        V.OutlineOff()
        C++: virtual void OutlineOff()
        
        Produce an outline (polyline) of the hull on output port 1.
        """
        ...
    
    def OutlineOn(self):
        """
        V.OutlineOn()
        C++: virtual void OutlineOn()
        
        Produce an outline (polyline) of the hull on output port 1.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkConvexHull2D
        C++: static vtkConvexHull2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetHullShape(self, p_int):
        """
        V.SetHullShape(int)
        C++: virtual void SetHullShape(int _arg)
        
        Set the shape of the hull to BoundingRectangle or ConvexHull.
        """
        ...
    
    def SetMinHullSizeInDisplay(self, p_int):
        """
        V.SetMinHullSizeInDisplay(int)
        C++: virtual void SetMinHullSizeInDisplay(int _arg)
        
        Set the minimum x,y-dimensions of each hull in pixels. You must
        also set a vtkRenderer. Defaults to 1. Set to 0 to disable.
        """
        ...
    
    def SetMinHullSizeInWorld(self, p_float):
        """
        V.SetMinHullSizeInWorld(float)
        C++: virtual void SetMinHullSizeInWorld(double _arg)
        
        Set the minimum x,y-dimensions of each hull in world coordinates.
        Defaults to 1.0. Set to 0.0 to disable.
        """
        ...
    
    def SetOutline(self, bool):
        """
        V.SetOutline(bool)
        C++: virtual void SetOutline(bool _arg)
        
        Produce an outline (polyline) of the hull on output port 1.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *renderer)
        
        Renderer needed for MinHullSizeInDisplay calculation. Not
        reference counted.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Scale the hull by the amount specified. Defaults to 1.0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BoundingRectangle = ...
    ConvexHull = ...
    HullShapes = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCornerAnnotation(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkCornerAnnotation - text annotation in four corners
    
    Superclass: vtkActor2D
    
    This is an annotation object that manages four text actors / mappers
    to provide annotation in the four corners of a viewport
    
    @par Special input text::
    - : will be replaced with slice number (relative number)
    - : will be replaced with slice number (relative number)
    - <image_and_max> : will be replaced with slice number and slice max
      (relative)
    - <slice_and_max> : will be replaced with slice number and slice max
      (relative)
    - <slice_pos> : will be replaced by the position of the current slice
    - : will be replaced with window value
    - : will be replaced with level value
    - <window_level> : will be replaced with window and level value
    
    @sa
    vtkActor2D vtkTextMapper
    """
    def ClearAllTexts(self):
        """
        V.ClearAllTexts()
        C++: void ClearAllTexts()
        
        Set/Get the text to be displayed for each corner
        \sa TextPosition
        """
        ...
    
    def CopyAllTextsFrom(self, vtkCornerAnnotation):
        """
        V.CopyAllTextsFrom(vtkCornerAnnotation)
        C++: void CopyAllTextsFrom(vtkCornerAnnotation *ca)
        
        Set/Get the text to be displayed for each corner
        \sa TextPosition
        """
        ...
    
    def GetImageActor(self):
        """
        V.GetImageActor() -> vtkImageActor
        C++: virtual vtkImageActor *GetImageActor()
        
        Set an image actor to look at for slice information
        """
        ...
    
    def GetLevelScale(self):
        """
        V.GetLevelScale() -> float
        C++: virtual double GetLevelScale()
        
        Set the value to scale the level by.
        """
        ...
    
    def GetLevelShift(self):
        """
        V.GetLevelShift() -> float
        C++: virtual double GetLevelShift()
        
        Set the value to shift the level by.
        """
        ...
    
    def GetLinearFontScaleFactor(self):
        """
        V.GetLinearFontScaleFactor() -> float
        C++: virtual double GetLinearFontScaleFactor()
        
        Set/Get font scaling factors The font size, f, is calculated as
        the largest possible value such that the annotations for the
        given viewport do not overlap. This font size is scaled
        non-linearly with the viewport size, to maintain an acceptable
        readable size at larger viewport sizes, without being too big. f'
        = linearScale * pow(f,nonlinearScale)
        """
        ...
    
    def GetMaximumFontSize(self):
        """
        V.GetMaximumFontSize() -> int
        C++: virtual int GetMaximumFontSize()
        
        Set/Get the minimum/maximum size font that will be shown. If the
        font drops below the minimum size it will not be rendered.
        """
        ...
    
    def GetMaximumLineHeight(self):
        """
        V.GetMaximumLineHeight() -> float
        C++: virtual double GetMaximumLineHeight()
        
        Set/Get the maximum height of a line of text as a percentage of
        the vertical area allocated to this scaled text actor. Defaults
        to 1.0
        """
        ...
    
    def GetMinimumFontSize(self):
        """
        V.GetMinimumFontSize() -> int
        C++: virtual int GetMinimumFontSize()
        
        Set/Get the minimum/maximum size font that will be shown. If the
        font drops below the minimum size it will not be rendered.
        """
        ...
    
    def GetNonlinearFontScaleFactor(self):
        """
        V.GetNonlinearFontScaleFactor() -> float
        C++: virtual double GetNonlinearFontScaleFactor()
        
        Set/Get font scaling factors The font size, f, is calculated as
        the largest possible value such that the annotations for the
        given viewport do not overlap. This font size is scaled
        non-linearly with the viewport size, to maintain an acceptable
        readable size at larger viewport sizes, without being too big. f'
        = linearScale * pow(f,nonlinearScale)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShowSliceAndImage(self):
        """
        V.GetShowSliceAndImage() -> int
        C++: virtual vtkTypeBool GetShowSliceAndImage()
        
        Even if there is an image actor, should `slice' and `image' be
        displayed?
        """
        ...
    
    def GetText(self, p_int):
        """
        V.GetText(int) -> string
        C++: const char *GetText(int i)
        
        Set/Get the text to be displayed for each corner
        \sa TextPosition
        """
        ...
    
    def GetTextProperty(self):
        """
        V.GetTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperty()
        
        Set/Get the text property of all corners.
        """
        ...
    
    def GetWindowLevel(self):
        """
        V.GetWindowLevel() -> vtkImageMapToWindowLevelColors
        C++: virtual vtkImageMapToWindowLevelColors *GetWindowLevel()
        
        Set an instance of vtkImageMapToWindowLevelColors to use for
        looking at window level changes
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCornerAnnotation
        C++: vtkCornerAnnotation *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Draw the scalar bar and annotation text to the screen.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Draw the scalar bar and annotation text to the screen.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the scalar bar and annotation text to the screen.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCornerAnnotation
        C++: static vtkCornerAnnotation *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetImageActor(self, vtkImageActor):
        """
        V.SetImageActor(vtkImageActor)
        C++: void SetImageActor(vtkImageActor *)
        
        Set an image actor to look at for slice information
        """
        ...
    
    def SetLevelScale(self, p_float):
        """
        V.SetLevelScale(float)
        C++: virtual void SetLevelScale(double _arg)
        
        Set the value to scale the level by.
        """
        ...
    
    def SetLevelShift(self, p_float):
        """
        V.SetLevelShift(float)
        C++: virtual void SetLevelShift(double _arg)
        
        Set the value to shift the level by.
        """
        ...
    
    def SetLinearFontScaleFactor(self, p_float):
        """
        V.SetLinearFontScaleFactor(float)
        C++: virtual void SetLinearFontScaleFactor(double _arg)
        
        Set/Get font scaling factors The font size, f, is calculated as
        the largest possible value such that the annotations for the
        given viewport do not overlap. This font size is scaled
        non-linearly with the viewport size, to maintain an acceptable
        readable size at larger viewport sizes, without being too big. f'
        = linearScale * pow(f,nonlinearScale)
        """
        ...
    
    def SetMaximumFontSize(self, p_int):
        """
        V.SetMaximumFontSize(int)
        C++: virtual void SetMaximumFontSize(int _arg)
        
        Set/Get the minimum/maximum size font that will be shown. If the
        font drops below the minimum size it will not be rendered.
        """
        ...
    
    def SetMaximumLineHeight(self, p_float):
        """
        V.SetMaximumLineHeight(float)
        C++: virtual void SetMaximumLineHeight(double _arg)
        
        Set/Get the maximum height of a line of text as a percentage of
        the vertical area allocated to this scaled text actor. Defaults
        to 1.0
        """
        ...
    
    def SetMinimumFontSize(self, p_int):
        """
        V.SetMinimumFontSize(int)
        C++: virtual void SetMinimumFontSize(int _arg)
        
        Set/Get the minimum/maximum size font that will be shown. If the
        font drops below the minimum size it will not be rendered.
        """
        ...
    
    def SetNonlinearFontScaleFactor(self, p_float):
        """
        V.SetNonlinearFontScaleFactor(float)
        C++: virtual void SetNonlinearFontScaleFactor(double _arg)
        
        Set/Get font scaling factors The font size, f, is calculated as
        the largest possible value such that the annotations for the
        given viewport do not overlap. This font size is scaled
        non-linearly with the viewport size, to maintain an acceptable
        readable size at larger viewport sizes, without being too big. f'
        = linearScale * pow(f,nonlinearScale)
        """
        ...
    
    def SetShowSliceAndImage(self, p_int):
        """
        V.SetShowSliceAndImage(int)
        C++: virtual void SetShowSliceAndImage(vtkTypeBool _arg)
        
        Even if there is an image actor, should `slice' and `image' be
        displayed?
        """
        ...
    
    def SetText(self, p_int, string):
        """
        V.SetText(int, string)
        C++: void SetText(int i, const char *text)
        
        Set/Get the text to be displayed for each corner
        \sa TextPosition
        """
        ...
    
    def SetTextProperty(self, vtkTextProperty):
        """
        V.SetTextProperty(vtkTextProperty)
        C++: virtual void SetTextProperty(vtkTextProperty *p)
        
        Set/Get the text property of all corners.
        """
        ...
    
    def SetWindowLevel(self, vtkImageMapToWindowLevelColors):
        """
        V.SetWindowLevel(vtkImageMapToWindowLevelColors)
        C++: void SetWindowLevel(vtkImageMapToWindowLevelColors *)
        
        Set an instance of vtkImageMapToWindowLevelColors to use for
        looking at window level changes
        """
        ...
    
    def ShowSliceAndImageOff(self):
        """
        V.ShowSliceAndImageOff()
        C++: virtual void ShowSliceAndImageOff()
        
        Even if there is an image actor, should `slice' and `image' be
        displayed?
        """
        ...
    
    def ShowSliceAndImageOn(self):
        """
        V.ShowSliceAndImageOn()
        C++: virtual void ShowSliceAndImageOn()
        
        Even if there is an image actor, should `slice' and `image' be
        displayed?
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    LeftEdge = ...
    LowerEdge = ...
    LowerLeft = ...
    LowerRight = ...
    NumTextPositions = ...
    RightEdge = ...
    TextPosition = ...
    UpperEdge = ...
    UpperLeft = ...
    UpperRight = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCubeAxesActor(__vtkmodules_vtkRenderingCore.vtkActor):
    """
    vtkCubeAxesActor - create a plot of a bounding box edges - used for
    navigation
    
    Superclass: vtkActor
    
    vtkCubeAxesActor is a composite actor that draws axes of the bounding
    box of an input dataset. The axes include labels and titles for the
    x-y-z axes. The algorithm selects which axes to draw based on the
    user-defined 'fly' mode.  (STATIC is default). 'STATIC' constructs
    axes from all edges of the bounding box. 'CLOSEST_TRIAD' consists of
    the three axes x-y-z forming a triad that lies closest to the
    specified camera. 'FURTHEST_TRIAD' consists of the three axes x-y-z
    forming a triad that lies furthest from the specified camera.
    'OUTER_EDGES' is constructed from edges that are on the "exterior" of
    the bounding box, exterior as determined from examining outer edges
    of the bounding box in projection (display) space.
    
    To use this object you must define a bounding box and the camera used
    to render the vtkCubeAxesActor. You can optionally turn on/off
    labels, ticks, gridlines, and set tick location, number of labels,
    and text to use for axis-titles.  A 'corner offset' can also be set. 
    This allows the axes to be set partially away from the actual
    bounding box to perhaps prevent overlap of labels between the various
    axes.
    
    The Bounds instance variable (an array of six doubles) is used to
    determine the bounding box.
    
    @par Thanks: This class was written by: Hank Childs, Kathleen
    Bonnell, Amy Squillacote, Brad Whitlock, Will Schroeder, Eric
    Brugger, Daniel Aguilera, Claire Guilbaud, Nicolas Dolegieviez,
    Aashish Chaudhary, Philippe Pebay, David Gobbi, David Partyka,
    Utkarsh Ayachit David Cole, Francois Bertel, and Mark Olesen Part of
    this work was supported by CEA/DIF - Commissariat a l'Energie
    Atomique, Centre DAM Ile-De-France, BP12, F-91297 Arpajon, France.
    
    @sa
    vtkActor vtkAxisActor vtkCubeAxesActor2D
    """
    def CenterStickyAxesOff(self):
        """
        V.CenterStickyAxesOff()
        C++: virtual void CenterStickyAxesOff()
        
        Enable/Disable centering of axes when the Sticky option is on. If
        on, the axes bounds will be centered in the viewport. Otherwise,
        the axes can move about the longer of the horizontal or verical
        directions of the viewport to follow the data. Defaults to on.
        """
        ...
    
    def CenterStickyAxesOn(self):
        """
        V.CenterStickyAxesOn()
        C++: virtual void CenterStickyAxesOn()
        
        Enable/Disable centering of axes when the Sticky option is on. If
        on, the axes bounds will be centered in the viewport. Otherwise,
        the axes can move about the longer of the horizontal or verical
        directions of the viewport to follow the data. Defaults to on.
        """
        ...
    
    def DrawXGridlinesOff(self):
        """
        V.DrawXGridlinesOff()
        C++: virtual void DrawXGridlinesOff()
        """
        ...
    
    def DrawXGridlinesOn(self):
        """
        V.DrawXGridlinesOn()
        C++: virtual void DrawXGridlinesOn()
        """
        ...
    
    def DrawXGridpolysOff(self):
        """
        V.DrawXGridpolysOff()
        C++: virtual void DrawXGridpolysOff()
        """
        ...
    
    def DrawXGridpolysOn(self):
        """
        V.DrawXGridpolysOn()
        C++: virtual void DrawXGridpolysOn()
        """
        ...
    
    def DrawXInnerGridlinesOff(self):
        """
        V.DrawXInnerGridlinesOff()
        C++: virtual void DrawXInnerGridlinesOff()
        """
        ...
    
    def DrawXInnerGridlinesOn(self):
        """
        V.DrawXInnerGridlinesOn()
        C++: virtual void DrawXInnerGridlinesOn()
        """
        ...
    
    def DrawYGridlinesOff(self):
        """
        V.DrawYGridlinesOff()
        C++: virtual void DrawYGridlinesOff()
        """
        ...
    
    def DrawYGridlinesOn(self):
        """
        V.DrawYGridlinesOn()
        C++: virtual void DrawYGridlinesOn()
        """
        ...
    
    def DrawYGridpolysOff(self):
        """
        V.DrawYGridpolysOff()
        C++: virtual void DrawYGridpolysOff()
        """
        ...
    
    def DrawYGridpolysOn(self):
        """
        V.DrawYGridpolysOn()
        C++: virtual void DrawYGridpolysOn()
        """
        ...
    
    def DrawYInnerGridlinesOff(self):
        """
        V.DrawYInnerGridlinesOff()
        C++: virtual void DrawYInnerGridlinesOff()
        """
        ...
    
    def DrawYInnerGridlinesOn(self):
        """
        V.DrawYInnerGridlinesOn()
        C++: virtual void DrawYInnerGridlinesOn()
        """
        ...
    
    def DrawZGridlinesOff(self):
        """
        V.DrawZGridlinesOff()
        C++: virtual void DrawZGridlinesOff()
        """
        ...
    
    def DrawZGridlinesOn(self):
        """
        V.DrawZGridlinesOn()
        C++: virtual void DrawZGridlinesOn()
        """
        ...
    
    def DrawZGridpolysOff(self):
        """
        V.DrawZGridpolysOff()
        C++: virtual void DrawZGridpolysOff()
        """
        ...
    
    def DrawZGridpolysOn(self):
        """
        V.DrawZGridpolysOn()
        C++: virtual void DrawZGridpolysOn()
        """
        ...
    
    def DrawZInnerGridlinesOff(self):
        """
        V.DrawZInnerGridlinesOff()
        C++: virtual void DrawZInnerGridlinesOff()
        """
        ...
    
    def DrawZInnerGridlinesOn(self):
        """
        V.DrawZInnerGridlinesOn()
        C++: virtual void DrawZInnerGridlinesOn()
        """
        ...
    
    def GetAxisBaseForX(self):
        """
        V.GetAxisBaseForX() -> (float, float, float)
        C++: virtual double *GetAxisBaseForX()
        
        Vector that should be use as the base for X
        """
        ...
    
    def GetAxisBaseForY(self):
        """
        V.GetAxisBaseForY() -> (float, float, float)
        C++: virtual double *GetAxisBaseForY()
        
        Vector that should be use as the base for Y
        """
        ...
    
    def GetAxisBaseForZ(self):
        """
        V.GetAxisBaseForZ() -> (float, float, float)
        C++: virtual double *GetAxisBaseForZ()
        
        Vector that should be use as the base for Z
        """
        ...
    
    def GetAxisLabels(self, p_int):
        """
        V.GetAxisLabels(int) -> vtkStringArray
        C++: vtkStringArray *GetAxisLabels(int axis)
        
        Explicitly specify the axis labels along an axis as an array of
        strings instead of using the values.
        """
        ...
    
    def GetAxisOrigin(self):
        """
        V.GetAxisOrigin() -> (float, float, float)
        C++: virtual double *GetAxisOrigin()
        
        Provide a custom AxisOrigin. This point must be inside the
        bounding box and will represent the point where the 3 axes will
        intersect
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Explicitly specify the region in space around which to draw the
        bounds. The bounds is used only when no Input or Prop is
        specified. The bounds are specified according to (xmin,xmax,
        ymin,ymax, zmin,zmax), making sure that the min's are less than the
        max's.
        """
        ...
    
    def GetCamera(self):
        """
        V.GetCamera() -> vtkCamera
        C++: virtual vtkCamera *GetCamera()
        
        Set/Get the camera to perform scaling and translation of the
        vtkCubeAxesActor.
        """
        ...
    
    def GetCenterStickyAxes(self):
        """
        V.GetCenterStickyAxes() -> int
        C++: virtual vtkTypeBool GetCenterStickyAxes()
        
        Enable/Disable centering of axes when the Sticky option is on. If
        on, the axes bounds will be centered in the viewport. Otherwise,
        the axes can move about the longer of the horizontal or verical
        directions of the viewport to follow the data. Defaults to on.
        """
        ...
    
    def GetCornerOffset(self):
        """
        V.GetCornerOffset() -> float
        C++: virtual double GetCornerOffset()
        
        Specify an offset value to "pull back" the axes from the corner
        at which they are joined to avoid overlap of axes labels. The
        "CornerOffset" is the fraction of the axis length to pull back.
        """
        ...
    
    def GetDistanceLODThreshold(self):
        """
        V.GetDistanceLODThreshold() -> float
        C++: virtual double GetDistanceLODThreshold()
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetDistanceLODThresholdMaxValue(self):
        """
        V.GetDistanceLODThresholdMaxValue() -> float
        C++: virtual double GetDistanceLODThresholdMaxValue()
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetDistanceLODThresholdMinValue(self):
        """
        V.GetDistanceLODThresholdMinValue() -> float
        C++: virtual double GetDistanceLODThresholdMinValue()
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetDrawXGridlines(self):
        """
        V.GetDrawXGridlines() -> int
        C++: virtual vtkTypeBool GetDrawXGridlines()
        """
        ...
    
    def GetDrawXGridpolys(self):
        """
        V.GetDrawXGridpolys() -> int
        C++: virtual vtkTypeBool GetDrawXGridpolys()
        """
        ...
    
    def GetDrawXInnerGridlines(self):
        """
        V.GetDrawXInnerGridlines() -> int
        C++: virtual vtkTypeBool GetDrawXInnerGridlines()
        """
        ...
    
    def GetDrawYGridlines(self):
        """
        V.GetDrawYGridlines() -> int
        C++: virtual vtkTypeBool GetDrawYGridlines()
        """
        ...
    
    def GetDrawYGridpolys(self):
        """
        V.GetDrawYGridpolys() -> int
        C++: virtual vtkTypeBool GetDrawYGridpolys()
        """
        ...
    
    def GetDrawYInnerGridlines(self):
        """
        V.GetDrawYInnerGridlines() -> int
        C++: virtual vtkTypeBool GetDrawYInnerGridlines()
        """
        ...
    
    def GetDrawZGridlines(self):
        """
        V.GetDrawZGridlines() -> int
        C++: virtual vtkTypeBool GetDrawZGridlines()
        """
        ...
    
    def GetDrawZGridpolys(self):
        """
        V.GetDrawZGridpolys() -> int
        C++: virtual vtkTypeBool GetDrawZGridpolys()
        """
        ...
    
    def GetDrawZInnerGridlines(self):
        """
        V.GetDrawZInnerGridlines() -> int
        C++: virtual vtkTypeBool GetDrawZInnerGridlines()
        """
        ...
    
    def GetEnableDistanceLOD(self):
        """
        V.GetEnableDistanceLOD() -> int
        C++: virtual int GetEnableDistanceLOD()
        
        Enable and disable the use of distance based LOD for titles and
        labels.
        """
        ...
    
    def GetEnableViewAngleLOD(self):
        """
        V.GetEnableViewAngleLOD() -> int
        C++: virtual int GetEnableViewAngleLOD()
        
        Enable and disable the use of view angle based LOD for titles and
        labels.
        """
        ...
    
    def GetFlyMode(self):
        """
        V.GetFlyMode() -> int
        C++: virtual int GetFlyMode()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def GetFlyModeMaxValue(self):
        """
        V.GetFlyModeMaxValue() -> int
        C++: virtual int GetFlyModeMaxValue()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def GetFlyModeMinValue(self):
        """
        V.GetFlyModeMinValue() -> int
        C++: virtual int GetFlyModeMinValue()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def GetGridLineLocation(self):
        """
        V.GetGridLineLocation() -> int
        C++: virtual int GetGridLineLocation()
        
        Specify the mode in which the cube axes should render its
        gridLines
        """
        ...
    
    def GetInertia(self):
        """
        V.GetInertia() -> int
        C++: virtual int GetInertia()
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def GetInertiaMaxValue(self):
        """
        V.GetInertiaMaxValue() -> int
        C++: virtual int GetInertiaMaxValue()
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def GetInertiaMinValue(self):
        """
        V.GetInertiaMinValue() -> int
        C++: virtual int GetInertiaMinValue()
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def GetLabelOffset(self):
        """
        V.GetLabelOffset() -> float
        C++: virtual double GetLabelOffset()
        
        Explicitly specify the distance between labels and the axis.
        Default is 20.0.
        """
        ...
    
    def GetLabelTextProperty(self, p_int):
        """
        V.GetLabelTextProperty(int) -> vtkTextProperty
        C++: vtkTextProperty *GetLabelTextProperty(int)
        
        Returns the text property for the labels on an axis.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientedBounds(self):
        """
        V.GetOrientedBounds() -> (float, float, float, float, float,
            float)
        C++: virtual double *GetOrientedBounds()
        
        Provide an oriented bounded box when using AxisBaseFor.
        """
        ...
    
    def GetRebuildAxes(self):
        """
        V.GetRebuildAxes() -> bool
        C++: virtual bool GetRebuildAxes()
        
        Gets/Sets the RebuildAxes flag
        """
        ...
    
    def GetRenderedBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetRenderedBounds([float, float, float, float, float, float])
        C++: virtual void GetRenderedBounds(double rBounds[6])
        V.GetRenderedBounds() -> (float, ...)
        C++: virtual double *GetRenderedBounds()
        
        Method used to properly return the bounds of the cube axis itself
        with all its labels.
        """
        ...
    
    def GetScreenSize(self):
        """
        V.GetScreenSize() -> float
        C++: virtual double GetScreenSize()
        
        Explicitly specify the screen size of title and label text.
        ScreenSize determines the size of the text in terms of screen
        pixels. Default is 10.0.
        """
        ...
    
    def GetStickyAxes(self):
        """
        V.GetStickyAxes() -> int
        C++: virtual vtkTypeBool GetStickyAxes()
        
        Enable/Disable axis stickiness. When on, the axes will be
        adjusted to always be visible in the viewport unless the original
        bounds of the axes are entirely outside the viewport. Defaults to
        off.
        """
        ...
    
    def GetTickLocation(self):
        """
        V.GetTickLocation() -> int
        C++: virtual int GetTickLocation()
        
        Set/Get the location of ticks marks.
        """
        ...
    
    def GetTickLocationMaxValue(self):
        """
        V.GetTickLocationMaxValue() -> int
        C++: virtual int GetTickLocationMaxValue()
        
        Set/Get the location of ticks marks.
        """
        ...
    
    def GetTickLocationMinValue(self):
        """
        V.GetTickLocationMinValue() -> int
        C++: virtual int GetTickLocationMinValue()
        
        Set/Get the location of ticks marks.
        """
        ...
    
    def GetTitleOffset(self):
        """
        V.GetTitleOffset() -> float
        C++: virtual double GetTitleOffset()
        
        Explicitly specify the distance between title and labels. Default
        is 20.0.
        """
        ...
    
    def GetTitleTextProperty(self, p_int):
        """
        V.GetTitleTextProperty(int) -> vtkTextProperty
        C++: vtkTextProperty *GetTitleTextProperty(int)
        
        Returns the text property for the title on an axis.
        """
        ...
    
    def GetUse2DMode(self):
        """
        V.GetUse2DMode() -> int
        C++: int GetUse2DMode()
        
        Get/Set 2D mode NB: Use vtkTextActor for titles in 2D instead of
        vtkAxisFollower
        """
        ...
    
    def GetUseAxisOrigin(self):
        """
        V.GetUseAxisOrigin() -> int
        C++: virtual int GetUseAxisOrigin()
        
        Enable/Disable the usage of the AxisOrigin
        """
        ...
    
    def GetUseOrientedBounds(self):
        """
        V.GetUseOrientedBounds() -> int
        C++: virtual int GetUseOrientedBounds()
        
        Enable/Disable the usage of the OrientedBounds
        """
        ...
    
    def GetUseTextActor3D(self):
        """
        V.GetUseTextActor3D() -> int
        C++: int GetUseTextActor3D()
        
        Use or not vtkTextActor3D for titles and labels. See Also:
        vtkAxisActor::SetUseTextActor3D(),
        vtkAxisActor::GetUseTextActor3D()
        """
        ...
    
    def GetViewAngleLODThreshold(self):
        """
        V.GetViewAngleLODThreshold() -> float
        C++: virtual double GetViewAngleLODThreshold()
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetViewAngleLODThresholdMaxValue(self):
        """
        V.GetViewAngleLODThresholdMaxValue() -> float
        C++: virtual double GetViewAngleLODThresholdMaxValue()
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetViewAngleLODThresholdMinValue(self):
        """
        V.GetViewAngleLODThresholdMinValue() -> float
        C++: virtual double GetViewAngleLODThresholdMinValue()
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetXAxesGridlinesProperty(self):
        """
        V.GetXAxesGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetXAxesGridlinesProperty()
        
        Get/Set axes (outer) gridlines actors properties.
        """
        ...
    
    def GetXAxesGridpolysProperty(self):
        """
        V.GetXAxesGridpolysProperty() -> vtkProperty
        C++: vtkProperty *GetXAxesGridpolysProperty()
        
        Get/Set axes gridPolys actors properties.
        """
        ...
    
    def GetXAxesInnerGridlinesProperty(self):
        """
        V.GetXAxesInnerGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetXAxesInnerGridlinesProperty()
        
        Get/Set axes inner gridlines actors properties.
        """
        ...
    
    def GetXAxesLinesProperty(self):
        """
        V.GetXAxesLinesProperty() -> vtkProperty
        C++: vtkProperty *GetXAxesLinesProperty()
        
        Get/Set axes actors properties.
        """
        ...
    
    def GetXAxisLabelVisibility(self):
        """
        V.GetXAxisLabelVisibility() -> int
        C++: virtual vtkTypeBool GetXAxisLabelVisibility()
        
        Turn on and off the visibility of labels for each axis.
        """
        ...
    
    def GetXAxisMinorTickVisibility(self):
        """
        V.GetXAxisMinorTickVisibility() -> int
        C++: virtual vtkTypeBool GetXAxisMinorTickVisibility()
        
        Turn on and off the visibility of minor ticks for each axis.
        """
        ...
    
    def GetXAxisRange(self):
        """
        V.GetXAxisRange() -> (float, float)
        C++: virtual double *GetXAxisRange()
        
        Explicitly specify the range of each axes that's used to define
        the prop. The default, (if you do not use these methods) is to
        use the bounds specified, or use the bounds of the Input Prop if
        one is specified. This method allows you to separate the notion
        of extent of the axes in physical space (bounds) and the extent
        of the values it represents. In other words, you can have the
        ticks and labels show a different range.
        """
        ...
    
    def GetXAxisTickVisibility(self):
        """
        V.GetXAxisTickVisibility() -> int
        C++: virtual vtkTypeBool GetXAxisTickVisibility()
        
        Turn on and off the visibility of ticks for each axis.
        """
        ...
    
    def GetXAxisVisibility(self):
        """
        V.GetXAxisVisibility() -> int
        C++: virtual vtkTypeBool GetXAxisVisibility()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def GetXLabelFormat(self):
        """
        V.GetXLabelFormat() -> string
        C++: virtual char *GetXLabelFormat()
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def GetXTitle(self):
        """
        V.GetXTitle() -> string
        C++: virtual char *GetXTitle()
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def GetXUnits(self):
        """
        V.GetXUnits() -> string
        C++: virtual char *GetXUnits()
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def GetYAxesGridlinesProperty(self):
        """
        V.GetYAxesGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetYAxesGridlinesProperty()
        
        Get/Set axes (outer) gridlines actors properties.
        """
        ...
    
    def GetYAxesGridpolysProperty(self):
        """
        V.GetYAxesGridpolysProperty() -> vtkProperty
        C++: vtkProperty *GetYAxesGridpolysProperty()
        
        Get/Set axes gridPolys actors properties.
        """
        ...
    
    def GetYAxesInnerGridlinesProperty(self):
        """
        V.GetYAxesInnerGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetYAxesInnerGridlinesProperty()
        
        Get/Set axes inner gridlines actors properties.
        """
        ...
    
    def GetYAxesLinesProperty(self):
        """
        V.GetYAxesLinesProperty() -> vtkProperty
        C++: vtkProperty *GetYAxesLinesProperty()
        
        Get/Set axes actors properties.
        """
        ...
    
    def GetYAxisLabelVisibility(self):
        """
        V.GetYAxisLabelVisibility() -> int
        C++: virtual vtkTypeBool GetYAxisLabelVisibility()
        """
        ...
    
    def GetYAxisMinorTickVisibility(self):
        """
        V.GetYAxisMinorTickVisibility() -> int
        C++: virtual vtkTypeBool GetYAxisMinorTickVisibility()
        """
        ...
    
    def GetYAxisRange(self):
        """
        V.GetYAxisRange() -> (float, float)
        C++: virtual double *GetYAxisRange()
        
        Explicitly specify the range of each axes that's used to define
        the prop. The default, (if you do not use these methods) is to
        use the bounds specified, or use the bounds of the Input Prop if
        one is specified. This method allows you to separate the notion
        of extent of the axes in physical space (bounds) and the extent
        of the values it represents. In other words, you can have the
        ticks and labels show a different range.
        """
        ...
    
    def GetYAxisTickVisibility(self):
        """
        V.GetYAxisTickVisibility() -> int
        C++: virtual vtkTypeBool GetYAxisTickVisibility()
        """
        ...
    
    def GetYAxisVisibility(self):
        """
        V.GetYAxisVisibility() -> int
        C++: virtual vtkTypeBool GetYAxisVisibility()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def GetYLabelFormat(self):
        """
        V.GetYLabelFormat() -> string
        C++: virtual char *GetYLabelFormat()
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def GetYTitle(self):
        """
        V.GetYTitle() -> string
        C++: virtual char *GetYTitle()
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def GetYUnits(self):
        """
        V.GetYUnits() -> string
        C++: virtual char *GetYUnits()
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def GetZAxesGridlinesProperty(self):
        """
        V.GetZAxesGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetZAxesGridlinesProperty()
        
        Get/Set axes (outer) gridlines actors properties.
        """
        ...
    
    def GetZAxesGridpolysProperty(self):
        """
        V.GetZAxesGridpolysProperty() -> vtkProperty
        C++: vtkProperty *GetZAxesGridpolysProperty()
        
        Get/Set axes gridPolys actors properties.
        """
        ...
    
    def GetZAxesInnerGridlinesProperty(self):
        """
        V.GetZAxesInnerGridlinesProperty() -> vtkProperty
        C++: vtkProperty *GetZAxesInnerGridlinesProperty()
        
        Get/Set axes inner gridlines actors properties.
        """
        ...
    
    def GetZAxesLinesProperty(self):
        """
        V.GetZAxesLinesProperty() -> vtkProperty
        C++: vtkProperty *GetZAxesLinesProperty()
        
        Get/Set axes actors properties.
        """
        ...
    
    def GetZAxisLabelVisibility(self):
        """
        V.GetZAxisLabelVisibility() -> int
        C++: virtual vtkTypeBool GetZAxisLabelVisibility()
        """
        ...
    
    def GetZAxisMinorTickVisibility(self):
        """
        V.GetZAxisMinorTickVisibility() -> int
        C++: virtual vtkTypeBool GetZAxisMinorTickVisibility()
        """
        ...
    
    def GetZAxisRange(self):
        """
        V.GetZAxisRange() -> (float, float)
        C++: virtual double *GetZAxisRange()
        """
        ...
    
    def GetZAxisTickVisibility(self):
        """
        V.GetZAxisTickVisibility() -> int
        C++: virtual vtkTypeBool GetZAxisTickVisibility()
        """
        ...
    
    def GetZAxisVisibility(self):
        """
        V.GetZAxisVisibility() -> int
        C++: virtual vtkTypeBool GetZAxisVisibility()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def GetZLabelFormat(self):
        """
        V.GetZLabelFormat() -> string
        C++: virtual char *GetZLabelFormat()
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def GetZTitle(self):
        """
        V.GetZTitle() -> string
        C++: virtual char *GetZTitle()
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def GetZUnits(self):
        """
        V.GetZUnits() -> string
        C++: virtual char *GetZUnits()
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCubeAxesActor
        C++: vtkCubeAxesActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def RenderTranslucentGeometry(self, vtkViewport):
        """
        V.RenderTranslucentGeometry(vtkViewport) -> int
        C++: virtual int RenderTranslucentGeometry(vtkViewport *)
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCubeAxesActor
        C++: static vtkCubeAxesActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAxisBaseForX(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisBaseForX(float, float, float)
        C++: virtual void SetAxisBaseForX(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisBaseForX((float, float, float))
        C++: virtual void SetAxisBaseForX(const double _arg[3])
        
        Vector that should be use as the base for X
        """
        ...
    
    def SetAxisBaseForY(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisBaseForY(float, float, float)
        C++: virtual void SetAxisBaseForY(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisBaseForY((float, float, float))
        C++: virtual void SetAxisBaseForY(const double _arg[3])
        
        Vector that should be use as the base for Y
        """
        ...
    
    def SetAxisBaseForZ(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisBaseForZ(float, float, float)
        C++: virtual void SetAxisBaseForZ(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisBaseForZ((float, float, float))
        C++: virtual void SetAxisBaseForZ(const double _arg[3])
        
        Vector that should be use as the base for Z
        """
        ...
    
    def SetAxisLabels(self, p_int, vtkStringArray):
        """
        V.SetAxisLabels(int, vtkStringArray)
        C++: void SetAxisLabels(int axis, vtkStringArray *value)
        
        Explicitly specify the axis labels along an axis as an array of
        strings instead of using the values.
        """
        ...
    
    def SetAxisOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisOrigin(float, float, float)
        C++: virtual void SetAxisOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisOrigin((float, float, float))
        C++: virtual void SetAxisOrigin(const double _arg[3])
        
        Provide a custom AxisOrigin. This point must be inside the
        bounding box and will represent the point where the 3 axes will
        intersect
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Explicitly specify the region in space around which to draw the
        bounds. The bounds is used only when no Input or Prop is
        specified. The bounds are specified according to (xmin,xmax,
        ymin,ymax, zmin,zmax), making sure that the min's are less than the
        max's.
        """
        ...
    
    def SetCamera(self, vtkCamera):
        """
        V.SetCamera(vtkCamera)
        C++: virtual void SetCamera(vtkCamera *)
        
        Set/Get the camera to perform scaling and translation of the
        vtkCubeAxesActor.
        """
        ...
    
    def SetCenterStickyAxes(self, p_int):
        """
        V.SetCenterStickyAxes(int)
        C++: virtual void SetCenterStickyAxes(vtkTypeBool _arg)
        
        Enable/Disable centering of axes when the Sticky option is on. If
        on, the axes bounds will be centered in the viewport. Otherwise,
        the axes can move about the longer of the horizontal or verical
        directions of the viewport to follow the data. Defaults to on.
        """
        ...
    
    def SetCornerOffset(self, p_float):
        """
        V.SetCornerOffset(float)
        C++: virtual void SetCornerOffset(double _arg)
        
        Specify an offset value to "pull back" the axes from the corner
        at which they are joined to avoid overlap of axes labels. The
        "CornerOffset" is the fraction of the axis length to pull back.
        """
        ...
    
    def SetDistanceLODThreshold(self, p_float):
        """
        V.SetDistanceLODThreshold(float)
        C++: virtual void SetDistanceLODThreshold(double _arg)
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def SetDrawXGridlines(self, p_int):
        """
        V.SetDrawXGridlines(int)
        C++: virtual void SetDrawXGridlines(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawXGridpolys(self, p_int):
        """
        V.SetDrawXGridpolys(int)
        C++: virtual void SetDrawXGridpolys(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawXInnerGridlines(self, p_int):
        """
        V.SetDrawXInnerGridlines(int)
        C++: virtual void SetDrawXInnerGridlines(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawYGridlines(self, p_int):
        """
        V.SetDrawYGridlines(int)
        C++: virtual void SetDrawYGridlines(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawYGridpolys(self, p_int):
        """
        V.SetDrawYGridpolys(int)
        C++: virtual void SetDrawYGridpolys(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawYInnerGridlines(self, p_int):
        """
        V.SetDrawYInnerGridlines(int)
        C++: virtual void SetDrawYInnerGridlines(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawZGridlines(self, p_int):
        """
        V.SetDrawZGridlines(int)
        C++: virtual void SetDrawZGridlines(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawZGridpolys(self, p_int):
        """
        V.SetDrawZGridpolys(int)
        C++: virtual void SetDrawZGridpolys(vtkTypeBool _arg)
        """
        ...
    
    def SetDrawZInnerGridlines(self, p_int):
        """
        V.SetDrawZInnerGridlines(int)
        C++: virtual void SetDrawZInnerGridlines(vtkTypeBool _arg)
        """
        ...
    
    def SetEnableDistanceLOD(self, p_int):
        """
        V.SetEnableDistanceLOD(int)
        C++: virtual void SetEnableDistanceLOD(int _arg)
        
        Enable and disable the use of distance based LOD for titles and
        labels.
        """
        ...
    
    def SetEnableViewAngleLOD(self, p_int):
        """
        V.SetEnableViewAngleLOD(int)
        C++: virtual void SetEnableViewAngleLOD(int _arg)
        
        Enable and disable the use of view angle based LOD for titles and
        labels.
        """
        ...
    
    def SetFlyMode(self, p_int):
        """
        V.SetFlyMode(int)
        C++: virtual void SetFlyMode(int _arg)
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def SetFlyModeToClosestTriad(self):
        """
        V.SetFlyModeToClosestTriad()
        C++: void SetFlyModeToClosestTriad()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def SetFlyModeToFurthestTriad(self):
        """
        V.SetFlyModeToFurthestTriad()
        C++: void SetFlyModeToFurthestTriad()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def SetFlyModeToOuterEdges(self):
        """
        V.SetFlyModeToOuterEdges()
        C++: void SetFlyModeToOuterEdges()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def SetFlyModeToStaticEdges(self):
        """
        V.SetFlyModeToStaticEdges()
        C++: void SetFlyModeToStaticEdges()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def SetFlyModeToStaticTriad(self):
        """
        V.SetFlyModeToStaticTriad()
        C++: void SetFlyModeToStaticTriad()
        
        Specify a mode to control how the axes are drawn: either static,
        closest triad, furthest triad or outer edges in relation to the
        camera position.
        """
        ...
    
    def SetGridLineLocation(self, p_int):
        """
        V.SetGridLineLocation(int)
        C++: virtual void SetGridLineLocation(int _arg)
        
        Specify the mode in which the cube axes should render its
        gridLines
        """
        ...
    
    def SetInertia(self, p_int):
        """
        V.SetInertia(int)
        C++: virtual void SetInertia(int _arg)
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def SetLabelOffset(self, p_float):
        """
        V.SetLabelOffset(float)
        C++: void SetLabelOffset(double offset)
        
        Explicitly specify the distance between labels and the axis.
        Default is 20.0.
        """
        ...
    
    def SetLabelScaling(self, bool, p_int, p_int_1, p_int_2):
        """
        V.SetLabelScaling(bool, int, int, int)
        C++: void SetLabelScaling(bool, int, int, int)
        """
        ...
    
    def SetOrientedBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetOrientedBounds(float, float, float, float, float, float)
        C++: virtual void SetOrientedBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetOrientedBounds((float, float, float, float, float, float))
        C++: virtual void SetOrientedBounds(const double _arg[6])
        
        Provide an oriented bounded box when using AxisBaseFor.
        """
        ...
    
    def SetRebuildAxes(self, bool):
        """
        V.SetRebuildAxes(bool)
        C++: virtual void SetRebuildAxes(bool _arg)
        
        Gets/Sets the RebuildAxes flag
        """
        ...
    
    def SetSaveTitlePosition(self, p_int):
        """
        V.SetSaveTitlePosition(int)
        C++: void SetSaveTitlePosition(int val)
        
        For 2D mode only: save axis title positions for later use
        """
        ...
    
    def SetScreenSize(self, p_float):
        """
        V.SetScreenSize(float)
        C++: void SetScreenSize(double screenSize)
        
        Explicitly specify the screen size of title and label text.
        ScreenSize determines the size of the text in terms of screen
        pixels. Default is 10.0.
        """
        ...
    
    def SetStickyAxes(self, p_int):
        """
        V.SetStickyAxes(int)
        C++: virtual void SetStickyAxes(vtkTypeBool _arg)
        
        Enable/Disable axis stickiness. When on, the axes will be
        adjusted to always be visible in the viewport unless the original
        bounds of the axes are entirely outside the viewport. Defaults to
        off.
        """
        ...
    
    def SetTickLocation(self, p_int):
        """
        V.SetTickLocation(int)
        C++: virtual void SetTickLocation(int _arg)
        
        Set/Get the location of ticks marks.
        """
        ...
    
    def SetTickLocationToBoth(self):
        """
        V.SetTickLocationToBoth()
        C++: void SetTickLocationToBoth(void)
        """
        ...
    
    def SetTickLocationToInside(self):
        """
        V.SetTickLocationToInside()
        C++: void SetTickLocationToInside(void)
        """
        ...
    
    def SetTickLocationToOutside(self):
        """
        V.SetTickLocationToOutside()
        C++: void SetTickLocationToOutside(void)
        """
        ...
    
    def SetTitleOffset(self, p_float):
        """
        V.SetTitleOffset(float)
        C++: void SetTitleOffset(double offset)
        
        Explicitly specify the distance between title and labels. Default
        is 20.0.
        """
        ...
    
    def SetUse2DMode(self, p_int):
        """
        V.SetUse2DMode(int)
        C++: void SetUse2DMode(int val)
        
        Get/Set 2D mode NB: Use vtkTextActor for titles in 2D instead of
        vtkAxisFollower
        """
        ...
    
    def SetUseAxisOrigin(self, p_int):
        """
        V.SetUseAxisOrigin(int)
        C++: virtual void SetUseAxisOrigin(int _arg)
        
        Enable/Disable the usage of the AxisOrigin
        """
        ...
    
    def SetUseOrientedBounds(self, p_int):
        """
        V.SetUseOrientedBounds(int)
        C++: virtual void SetUseOrientedBounds(int _arg)
        
        Enable/Disable the usage of the OrientedBounds
        """
        ...
    
    def SetUseTextActor3D(self, p_int):
        """
        V.SetUseTextActor3D(int)
        C++: void SetUseTextActor3D(int val)
        
        Use or not vtkTextActor3D for titles and labels. See Also:
        vtkAxisActor::SetUseTextActor3D(),
        vtkAxisActor::GetUseTextActor3D()
        """
        ...
    
    def SetViewAngleLODThreshold(self, p_float):
        """
        V.SetViewAngleLODThreshold(float)
        C++: virtual void SetViewAngleLODThreshold(double _arg)
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def SetXAxesGridlinesProperty(self, vtkProperty):
        """
        V.SetXAxesGridlinesProperty(vtkProperty)
        C++: void SetXAxesGridlinesProperty(vtkProperty *)
        
        Get/Set axes (outer) gridlines actors properties.
        """
        ...
    
    def SetXAxesGridpolysProperty(self, vtkProperty):
        """
        V.SetXAxesGridpolysProperty(vtkProperty)
        C++: void SetXAxesGridpolysProperty(vtkProperty *)
        
        Get/Set axes gridPolys actors properties.
        """
        ...
    
    def SetXAxesInnerGridlinesProperty(self, vtkProperty):
        """
        V.SetXAxesInnerGridlinesProperty(vtkProperty)
        C++: void SetXAxesInnerGridlinesProperty(vtkProperty *)
        
        Get/Set axes inner gridlines actors properties.
        """
        ...
    
    def SetXAxesLinesProperty(self, vtkProperty):
        """
        V.SetXAxesLinesProperty(vtkProperty)
        C++: void SetXAxesLinesProperty(vtkProperty *)
        
        Get/Set axes actors properties.
        """
        ...
    
    def SetXAxisLabelVisibility(self, p_int):
        """
        V.SetXAxisLabelVisibility(int)
        C++: virtual void SetXAxisLabelVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of labels for each axis.
        """
        ...
    
    def SetXAxisMinorTickVisibility(self, p_int):
        """
        V.SetXAxisMinorTickVisibility(int)
        C++: virtual void SetXAxisMinorTickVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of minor ticks for each axis.
        """
        ...
    
    def SetXAxisRange(self, p_float, p_float_1):
        """
        V.SetXAxisRange(float, float)
        C++: virtual void SetXAxisRange(double _arg1, double _arg2)
        V.SetXAxisRange((float, float))
        C++: void SetXAxisRange(const double _arg[2])
        
        Explicitly specify the range of each axes that's used to define
        the prop. The default, (if you do not use these methods) is to
        use the bounds specified, or use the bounds of the Input Prop if
        one is specified. This method allows you to separate the notion
        of extent of the axes in physical space (bounds) and the extent
        of the values it represents. In other words, you can have the
        ticks and labels show a different range.
        """
        ...
    
    def SetXAxisTickVisibility(self, p_int):
        """
        V.SetXAxisTickVisibility(int)
        C++: virtual void SetXAxisTickVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of ticks for each axis.
        """
        ...
    
    def SetXAxisVisibility(self, p_int):
        """
        V.SetXAxisVisibility(int)
        C++: virtual void SetXAxisVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def SetXLabelFormat(self, string):
        """
        V.SetXLabelFormat(string)
        C++: virtual void SetXLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def SetXTitle(self, string):
        """
        V.SetXTitle(string)
        C++: virtual void SetXTitle(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def SetXUnits(self, string):
        """
        V.SetXUnits(string)
        C++: virtual void SetXUnits(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def SetYAxesGridlinesProperty(self, vtkProperty):
        """
        V.SetYAxesGridlinesProperty(vtkProperty)
        C++: void SetYAxesGridlinesProperty(vtkProperty *)
        
        Get/Set axes (outer) gridlines actors properties.
        """
        ...
    
    def SetYAxesGridpolysProperty(self, vtkProperty):
        """
        V.SetYAxesGridpolysProperty(vtkProperty)
        C++: void SetYAxesGridpolysProperty(vtkProperty *)
        
        Get/Set axes gridPolys actors properties.
        """
        ...
    
    def SetYAxesInnerGridlinesProperty(self, vtkProperty):
        """
        V.SetYAxesInnerGridlinesProperty(vtkProperty)
        C++: void SetYAxesInnerGridlinesProperty(vtkProperty *)
        
        Get/Set axes inner gridlines actors properties.
        """
        ...
    
    def SetYAxesLinesProperty(self, vtkProperty):
        """
        V.SetYAxesLinesProperty(vtkProperty)
        C++: void SetYAxesLinesProperty(vtkProperty *)
        
        Get/Set axes actors properties.
        """
        ...
    
    def SetYAxisLabelVisibility(self, p_int):
        """
        V.SetYAxisLabelVisibility(int)
        C++: virtual void SetYAxisLabelVisibility(vtkTypeBool _arg)
        """
        ...
    
    def SetYAxisMinorTickVisibility(self, p_int):
        """
        V.SetYAxisMinorTickVisibility(int)
        C++: virtual void SetYAxisMinorTickVisibility(vtkTypeBool _arg)
        """
        ...
    
    def SetYAxisRange(self, p_float, p_float_1):
        """
        V.SetYAxisRange(float, float)
        C++: virtual void SetYAxisRange(double _arg1, double _arg2)
        V.SetYAxisRange((float, float))
        C++: void SetYAxisRange(const double _arg[2])
        
        Explicitly specify the range of each axes that's used to define
        the prop. The default, (if you do not use these methods) is to
        use the bounds specified, or use the bounds of the Input Prop if
        one is specified. This method allows you to separate the notion
        of extent of the axes in physical space (bounds) and the extent
        of the values it represents. In other words, you can have the
        ticks and labels show a different range.
        """
        ...
    
    def SetYAxisTickVisibility(self, p_int):
        """
        V.SetYAxisTickVisibility(int)
        C++: virtual void SetYAxisTickVisibility(vtkTypeBool _arg)
        """
        ...
    
    def SetYAxisVisibility(self, p_int):
        """
        V.SetYAxisVisibility(int)
        C++: virtual void SetYAxisVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def SetYLabelFormat(self, string):
        """
        V.SetYLabelFormat(string)
        C++: virtual void SetYLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def SetYTitle(self, string):
        """
        V.SetYTitle(string)
        C++: virtual void SetYTitle(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def SetYUnits(self, string):
        """
        V.SetYUnits(string)
        C++: virtual void SetYUnits(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def SetZAxesGridlinesProperty(self, vtkProperty):
        """
        V.SetZAxesGridlinesProperty(vtkProperty)
        C++: void SetZAxesGridlinesProperty(vtkProperty *)
        
        Get/Set axes (outer) gridlines actors properties.
        """
        ...
    
    def SetZAxesGridpolysProperty(self, vtkProperty):
        """
        V.SetZAxesGridpolysProperty(vtkProperty)
        C++: void SetZAxesGridpolysProperty(vtkProperty *)
        
        Get/Set axes gridPolys actors properties.
        """
        ...
    
    def SetZAxesInnerGridlinesProperty(self, vtkProperty):
        """
        V.SetZAxesInnerGridlinesProperty(vtkProperty)
        C++: void SetZAxesInnerGridlinesProperty(vtkProperty *)
        
        Get/Set axes inner gridlines actors properties.
        """
        ...
    
    def SetZAxesLinesProperty(self, vtkProperty):
        """
        V.SetZAxesLinesProperty(vtkProperty)
        C++: void SetZAxesLinesProperty(vtkProperty *)
        
        Get/Set axes actors properties.
        """
        ...
    
    def SetZAxisLabelVisibility(self, p_int):
        """
        V.SetZAxisLabelVisibility(int)
        C++: virtual void SetZAxisLabelVisibility(vtkTypeBool _arg)
        """
        ...
    
    def SetZAxisMinorTickVisibility(self, p_int):
        """
        V.SetZAxisMinorTickVisibility(int)
        C++: virtual void SetZAxisMinorTickVisibility(vtkTypeBool _arg)
        """
        ...
    
    def SetZAxisRange(self, p_float, p_float_1):
        """
        V.SetZAxisRange(float, float)
        C++: virtual void SetZAxisRange(double _arg1, double _arg2)
        V.SetZAxisRange((float, float))
        C++: void SetZAxisRange(const double _arg[2])
        
        Explicitly specify the range of each axes that's used to define
        the prop. The default, (if you do not use these methods) is to
        use the bounds specified, or use the bounds of the Input Prop if
        one is specified. This method allows you to separate the notion
        of extent of the axes in physical space (bounds) and the extent
        of the values it represents. In other words, you can have the
        ticks and labels show a different range.
        """
        ...
    
    def SetZAxisTickVisibility(self, p_int):
        """
        V.SetZAxisTickVisibility(int)
        C++: virtual void SetZAxisTickVisibility(vtkTypeBool _arg)
        """
        ...
    
    def SetZAxisVisibility(self, p_int):
        """
        V.SetZAxisVisibility(int)
        C++: virtual void SetZAxisVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def SetZLabelFormat(self, string):
        """
        V.SetZLabelFormat(string)
        C++: virtual void SetZLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def SetZTitle(self, string):
        """
        V.SetZTitle(string)
        C++: virtual void SetZTitle(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def SetZUnits(self, string):
        """
        V.SetZUnits(string)
        C++: virtual void SetZUnits(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use
        "X-Axis", "Y-Axis" and "Z-Axis".
        """
        ...
    
    def StickyAxesOff(self):
        """
        V.StickyAxesOff()
        C++: virtual void StickyAxesOff()
        
        Enable/Disable axis stickiness. When on, the axes will be
        adjusted to always be visible in the viewport unless the original
        bounds of the axes are entirely outside the viewport. Defaults to
        off.
        """
        ...
    
    def StickyAxesOn(self):
        """
        V.StickyAxesOn()
        C++: virtual void StickyAxesOn()
        
        Enable/Disable axis stickiness. When on, the axes will be
        adjusted to always be visible in the viewport unless the original
        bounds of the axes are entirely outside the viewport. Defaults to
        off.
        """
        ...
    
    def XAxisLabelVisibilityOff(self):
        """
        V.XAxisLabelVisibilityOff()
        C++: virtual void XAxisLabelVisibilityOff()
        
        Turn on and off the visibility of labels for each axis.
        """
        ...
    
    def XAxisLabelVisibilityOn(self):
        """
        V.XAxisLabelVisibilityOn()
        C++: virtual void XAxisLabelVisibilityOn()
        
        Turn on and off the visibility of labels for each axis.
        """
        ...
    
    def XAxisMinorTickVisibilityOff(self):
        """
        V.XAxisMinorTickVisibilityOff()
        C++: virtual void XAxisMinorTickVisibilityOff()
        
        Turn on and off the visibility of minor ticks for each axis.
        """
        ...
    
    def XAxisMinorTickVisibilityOn(self):
        """
        V.XAxisMinorTickVisibilityOn()
        C++: virtual void XAxisMinorTickVisibilityOn()
        
        Turn on and off the visibility of minor ticks for each axis.
        """
        ...
    
    def XAxisTickVisibilityOff(self):
        """
        V.XAxisTickVisibilityOff()
        C++: virtual void XAxisTickVisibilityOff()
        
        Turn on and off the visibility of ticks for each axis.
        """
        ...
    
    def XAxisTickVisibilityOn(self):
        """
        V.XAxisTickVisibilityOn()
        C++: virtual void XAxisTickVisibilityOn()
        
        Turn on and off the visibility of ticks for each axis.
        """
        ...
    
    def XAxisVisibilityOff(self):
        """
        V.XAxisVisibilityOff()
        C++: virtual void XAxisVisibilityOff()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def XAxisVisibilityOn(self):
        """
        V.XAxisVisibilityOn()
        C++: virtual void XAxisVisibilityOn()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def YAxisLabelVisibilityOff(self):
        """
        V.YAxisLabelVisibilityOff()
        C++: virtual void YAxisLabelVisibilityOff()
        """
        ...
    
    def YAxisLabelVisibilityOn(self):
        """
        V.YAxisLabelVisibilityOn()
        C++: virtual void YAxisLabelVisibilityOn()
        """
        ...
    
    def YAxisMinorTickVisibilityOff(self):
        """
        V.YAxisMinorTickVisibilityOff()
        C++: virtual void YAxisMinorTickVisibilityOff()
        """
        ...
    
    def YAxisMinorTickVisibilityOn(self):
        """
        V.YAxisMinorTickVisibilityOn()
        C++: virtual void YAxisMinorTickVisibilityOn()
        """
        ...
    
    def YAxisTickVisibilityOff(self):
        """
        V.YAxisTickVisibilityOff()
        C++: virtual void YAxisTickVisibilityOff()
        """
        ...
    
    def YAxisTickVisibilityOn(self):
        """
        V.YAxisTickVisibilityOn()
        C++: virtual void YAxisTickVisibilityOn()
        """
        ...
    
    def YAxisVisibilityOff(self):
        """
        V.YAxisVisibilityOff()
        C++: virtual void YAxisVisibilityOff()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def YAxisVisibilityOn(self):
        """
        V.YAxisVisibilityOn()
        C++: virtual void YAxisVisibilityOn()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def ZAxisLabelVisibilityOff(self):
        """
        V.ZAxisLabelVisibilityOff()
        C++: virtual void ZAxisLabelVisibilityOff()
        """
        ...
    
    def ZAxisLabelVisibilityOn(self):
        """
        V.ZAxisLabelVisibilityOn()
        C++: virtual void ZAxisLabelVisibilityOn()
        """
        ...
    
    def ZAxisMinorTickVisibilityOff(self):
        """
        V.ZAxisMinorTickVisibilityOff()
        C++: virtual void ZAxisMinorTickVisibilityOff()
        """
        ...
    
    def ZAxisMinorTickVisibilityOn(self):
        """
        V.ZAxisMinorTickVisibilityOn()
        C++: virtual void ZAxisMinorTickVisibilityOn()
        """
        ...
    
    def ZAxisTickVisibilityOff(self):
        """
        V.ZAxisTickVisibilityOff()
        C++: virtual void ZAxisTickVisibilityOff()
        """
        ...
    
    def ZAxisTickVisibilityOn(self):
        """
        V.ZAxisTickVisibilityOn()
        C++: virtual void ZAxisTickVisibilityOn()
        """
        ...
    
    def ZAxisVisibilityOff(self):
        """
        V.ZAxisVisibilityOff()
        C++: virtual void ZAxisVisibilityOff()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def ZAxisVisibilityOn(self):
        """
        V.ZAxisVisibilityOn()
        C++: virtual void ZAxisVisibilityOn()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    FlyMode = ...
    GridVisibility = ...
    TickLocation = ...
    VTK_FLY_CLOSEST_TRIAD = ...
    VTK_FLY_FURTHEST_TRIAD = ...
    VTK_FLY_OUTER_EDGES = ...
    VTK_FLY_STATIC_EDGES = ...
    VTK_FLY_STATIC_TRIAD = ...
    VTK_GRID_LINES_ALL = ...
    VTK_GRID_LINES_CLOSEST = ...
    VTK_GRID_LINES_FURTHEST = ...
    VTK_TICKS_BOTH = ...
    VTK_TICKS_INSIDE = ...
    VTK_TICKS_OUTSIDE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCubeAxesActor2D(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkCubeAxesActor2D - create a 2D plot of a bounding box edges - used
    for navigation
    
    Superclass: vtkActor2D
    
    vtkCubeAxesActor2D is a composite actor that draws three axes of the
    bounding box of an input dataset. The axes include labels and titles
    for the x-y-z axes. The algorithm selects the axes that are on the
    "exterior" of the bounding box, exterior as determined from examining
    outer edges of the bounding box in projection (display) space.
    Alternatively, the edges closest to the viewer (i.e., camera
    position) can be drawn.
    
    To use this object you must define a bounding box and the camera used
    to render the vtkCubeAxesActor2D. The camera is used to control the
    scaling and position of the vtkCubeAxesActor2D so that it fits in the
    viewport and always remains visible.)
    
    The font property of the axes titles and labels can be modified
    through the AxisTitleTextProperty and AxisLabelTextProperty
    attributes. You may also use the GetXAxisActor2D, GetYAxisActor2D or
    GetZAxisActor2D methods to access each individual axis actor to
    modify their font properties.
    
    The bounding box to use is defined in one of three ways. First, if
    the Input ivar is defined, then the input dataset's bounds is used.
    If the Input is not defined, and the Prop (superclass of all actors)
    is defined, then the Prop's bounds is used. If neither the Input or
    Prop is defined, then the Bounds instance variable (an array of six
    doubles) is used.
    
    @sa
    vtkActor2D vtkAxisActor2D vtkXYPlotActor vtkTextProperty
    """
    def GetAxisLabelTextProperty(self):
        """
        V.GetAxisLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetAxisLabelTextProperty()
        
        Set/Get the labels text property of all axes. Note that each axis
        can be controlled individually through the GetX/Y/ZAxisActor2D()
        methods.
        """
        ...
    
    def GetAxisTitleTextProperty(self):
        """
        V.GetAxisTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetAxisTitleTextProperty()
        
        Set/Get the title text property of all axes. Note that each axis
        can be controlled individually through the GetX/Y/ZAxisActor2D()
        methods.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds(float, float, float, float, float, float)
        C++: void GetBounds(double &xmin, double &xmax, double &ymin,
            double &ymax, double &zmin, double &zmax)
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Explicitly specify the region in space around which to draw the
        bounds. The bounds is used only when no Input or Prop is
        specified. The bounds are specified according to (xmin,xmax,
        ymin,ymax, zmin,zmax), making sure that the min's are less than the
        max's.
        """
        ...
    
    def GetCamera(self):
        """
        V.GetCamera() -> vtkCamera
        C++: virtual vtkCamera *GetCamera()
        
        Set/Get the camera to perform scaling and translation of the
        vtkCubeAxesActor2D.
        """
        ...
    
    def GetCornerOffset(self):
        """
        V.GetCornerOffset() -> float
        C++: virtual double GetCornerOffset()
        
        Specify an offset value to "pull back" the axes from the corner
        at which they are joined to avoid overlap of axes labels. The
        "CornerOffset" is the fraction of the axis length to pull back.
        """
        ...
    
    def GetFlyMode(self):
        """
        V.GetFlyMode() -> int
        C++: virtual int GetFlyMode()
        
        Specify a mode to control how the axes are drawn: either outer
        edges or closest triad to the camera position, or you may also
        disable flying of the axes.
        """
        ...
    
    def GetFlyModeMaxValue(self):
        """
        V.GetFlyModeMaxValue() -> int
        C++: virtual int GetFlyModeMaxValue()
        
        Specify a mode to control how the axes are drawn: either outer
        edges or closest triad to the camera position, or you may also
        disable flying of the axes.
        """
        ...
    
    def GetFlyModeMinValue(self):
        """
        V.GetFlyModeMinValue() -> int
        C++: virtual int GetFlyModeMinValue()
        
        Specify a mode to control how the axes are drawn: either outer
        edges or closest triad to the camera position, or you may also
        disable flying of the axes.
        """
        ...
    
    def GetFontFactor(self):
        """
        V.GetFontFactor() -> float
        C++: virtual double GetFontFactor()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes.
        """
        ...
    
    def GetFontFactorMaxValue(self):
        """
        V.GetFontFactorMaxValue() -> float
        C++: virtual double GetFontFactorMaxValue()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes.
        """
        ...
    
    def GetFontFactorMinValue(self):
        """
        V.GetFontFactorMinValue() -> float
        C++: virtual double GetFontFactorMinValue()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes.
        """
        ...
    
    def GetInertia(self):
        """
        V.GetInertia() -> int
        C++: virtual int GetInertia()
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def GetInertiaMaxValue(self):
        """
        V.GetInertiaMaxValue() -> int
        C++: virtual int GetInertiaMaxValue()
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def GetInertiaMinValue(self):
        """
        V.GetInertiaMinValue() -> int
        C++: virtual int GetInertiaMinValue()
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataSet
        C++: virtual vtkDataSet *GetInput()
        
        Use the bounding box of this input dataset to draw the cube axes.
        If this is not specified, then the class will attempt to
        determine the bounds from the defined Prop or Bounds.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLabels(self):
        """
        V.GetNumberOfLabels() -> int
        C++: virtual int GetNumberOfLabels()
        
        Set/Get the number of annotation labels to show along the x, y,
        and z axes. This values is a suggestion: the number of labels may
        vary depending on the particulars of the data.
        """
        ...
    
    def GetNumberOfLabelsMaxValue(self):
        """
        V.GetNumberOfLabelsMaxValue() -> int
        C++: virtual int GetNumberOfLabelsMaxValue()
        
        Set/Get the number of annotation labels to show along the x, y,
        and z axes. This values is a suggestion: the number of labels may
        vary depending on the particulars of the data.
        """
        ...
    
    def GetNumberOfLabelsMinValue(self):
        """
        V.GetNumberOfLabelsMinValue() -> int
        C++: virtual int GetNumberOfLabelsMinValue()
        
        Set/Get the number of annotation labels to show along the x, y,
        and z axes. This values is a suggestion: the number of labels may
        vary depending on the particulars of the data.
        """
        ...
    
    def GetRanges(self):
        """
        V.GetRanges() -> (float, float, float, float, float, float)
        C++: double *GetRanges()
        V.GetRanges(float, float, float, float, float, float)
        C++: void GetRanges(double &xmin, double &xmax, double &ymin,
            double &ymax, double &zmin, double &zmax)
        V.GetRanges([float, float, float, float, float, float])
        C++: void GetRanges(double ranges[6])
        
        Explicitly specify the range of values used on the bounds. The
        ranges are specified according to (xmin,xmax, ymin,ymax,
        zmin,zmax), making sure that the min's are less than the max's.
        """
        ...
    
    def GetScaling(self):
        """
        V.GetScaling() -> int
        C++: virtual vtkTypeBool GetScaling()
        
        Set/Get a flag that controls whether the axes are scaled to fit
        in the viewport. If off, the axes size remains constant (i.e.,
        stay the size of the bounding box). By default scaling is on so
        the axes are scaled to fit inside the viewport.
        """
        ...
    
    def GetShowActualBounds(self):
        """
        V.GetShowActualBounds() -> int
        C++: virtual int GetShowActualBounds()
        
        Set/Get the variable that controls whether the actual bounds of
        the dataset are always shown. Setting this variable to 1 means
        that clipping is disabled and that the actual value of the bounds
        is displayed even with corner offsets Setting this variable to 0
        means these axis will clip themselves and show variable bounds
        (legacy mode)
        """
        ...
    
    def GetShowActualBoundsMaxValue(self):
        """
        V.GetShowActualBoundsMaxValue() -> int
        C++: virtual int GetShowActualBoundsMaxValue()
        
        Set/Get the variable that controls whether the actual bounds of
        the dataset are always shown. Setting this variable to 1 means
        that clipping is disabled and that the actual value of the bounds
        is displayed even with corner offsets Setting this variable to 0
        means these axis will clip themselves and show variable bounds
        (legacy mode)
        """
        ...
    
    def GetShowActualBoundsMinValue(self):
        """
        V.GetShowActualBoundsMinValue() -> int
        C++: virtual int GetShowActualBoundsMinValue()
        
        Set/Get the variable that controls whether the actual bounds of
        the dataset are always shown. Setting this variable to 1 means
        that clipping is disabled and that the actual value of the bounds
        is displayed even with corner offsets Setting this variable to 0
        means these axis will clip themselves and show variable bounds
        (legacy mode)
        """
        ...
    
    def GetUseRanges(self):
        """
        V.GetUseRanges() -> int
        C++: virtual vtkTypeBool GetUseRanges()
        
        Set/Get a flag that controls whether the axes use the data ranges
        or the ranges set by SetRanges. By default the axes use the data
        ranges.
        """
        ...
    
    def GetViewProp(self):
        """
        V.GetViewProp() -> vtkProp
        C++: virtual vtkProp *GetViewProp()
        
        Use the bounding box of this prop to draw the cube axes. The
        ViewProp is used to determine the bounds only if the Input is not
        defined.
        """
        ...
    
    def GetXAxisActor2D(self):
        """
        V.GetXAxisActor2D() -> vtkAxisActor2D
        C++: vtkAxisActor2D *GetXAxisActor2D()
        
        Retrieve handles to the X, Y and Z axis (so that you can set
        their text properties for example)
        """
        ...
    
    def GetXAxisVisibility(self):
        """
        V.GetXAxisVisibility() -> int
        C++: virtual vtkTypeBool GetXAxisVisibility()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def GetXLabel(self):
        """
        V.GetXLabel() -> string
        C++: virtual char *GetXLabel()
        
        Set/Get the labels for the x, y, and z axes. By default, use "X",
        "Y" and "Z".
        """
        ...
    
    def GetYAxisActor2D(self):
        """
        V.GetYAxisActor2D() -> vtkAxisActor2D
        C++: vtkAxisActor2D *GetYAxisActor2D()
        """
        ...
    
    def GetYAxisVisibility(self):
        """
        V.GetYAxisVisibility() -> int
        C++: virtual vtkTypeBool GetYAxisVisibility()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def GetYLabel(self):
        """
        V.GetYLabel() -> string
        C++: virtual char *GetYLabel()
        
        Set/Get the labels for the x, y, and z axes. By default, use "X",
        "Y" and "Z".
        """
        ...
    
    def GetZAxisActor2D(self):
        """
        V.GetZAxisActor2D() -> vtkAxisActor2D
        C++: vtkAxisActor2D *GetZAxisActor2D()
        """
        ...
    
    def GetZAxisVisibility(self):
        """
        V.GetZAxisVisibility() -> int
        C++: virtual vtkTypeBool GetZAxisVisibility()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def GetZLabel(self):
        """
        V.GetZLabel() -> string
        C++: virtual char *GetZLabel()
        
        Set/Get the labels for the x, y, and z axes. By default, use "X",
        "Y" and "Z".
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCubeAxesActor2D
        C++: vtkCubeAxesActor2D *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the axes as per the vtkProp superclass' API.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCubeAxesActor2D
        C++: static vtkCubeAxesActor2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalingOff(self):
        """
        V.ScalingOff()
        C++: virtual void ScalingOff()
        
        Set/Get a flag that controls whether the axes are scaled to fit
        in the viewport. If off, the axes size remains constant (i.e.,
        stay the size of the bounding box). By default scaling is on so
        the axes are scaled to fit inside the viewport.
        """
        ...
    
    def ScalingOn(self):
        """
        V.ScalingOn()
        C++: virtual void ScalingOn()
        
        Set/Get a flag that controls whether the axes are scaled to fit
        in the viewport. If off, the axes size remains constant (i.e.,
        stay the size of the bounding box). By default scaling is on so
        the axes are scaled to fit inside the viewport.
        """
        ...
    
    def SetAxisLabelTextProperty(self, vtkTextProperty):
        """
        V.SetAxisLabelTextProperty(vtkTextProperty)
        C++: virtual void SetAxisLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the labels text property of all axes. Note that each axis
        can be controlled individually through the GetX/Y/ZAxisActor2D()
        methods.
        """
        ...
    
    def SetAxisTitleTextProperty(self, vtkTextProperty):
        """
        V.SetAxisTitleTextProperty(vtkTextProperty)
        C++: virtual void SetAxisTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property of all axes. Note that each axis
        can be controlled individually through the GetX/Y/ZAxisActor2D()
        methods.
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Explicitly specify the region in space around which to draw the
        bounds. The bounds is used only when no Input or Prop is
        specified. The bounds are specified according to (xmin,xmax,
        ymin,ymax, zmin,zmax), making sure that the min's are less than the
        max's.
        """
        ...
    
    def SetCamera(self, vtkCamera):
        """
        V.SetCamera(vtkCamera)
        C++: virtual void SetCamera(vtkCamera *)
        
        Set/Get the camera to perform scaling and translation of the
        vtkCubeAxesActor2D.
        """
        ...
    
    def SetCornerOffset(self, p_float):
        """
        V.SetCornerOffset(float)
        C++: virtual void SetCornerOffset(double _arg)
        
        Specify an offset value to "pull back" the axes from the corner
        at which they are joined to avoid overlap of axes labels. The
        "CornerOffset" is the fraction of the axis length to pull back.
        """
        ...
    
    def SetFlyMode(self, p_int):
        """
        V.SetFlyMode(int)
        C++: virtual void SetFlyMode(int _arg)
        
        Specify a mode to control how the axes are drawn: either outer
        edges or closest triad to the camera position, or you may also
        disable flying of the axes.
        """
        ...
    
    def SetFlyModeToClosestTriad(self):
        """
        V.SetFlyModeToClosestTriad()
        C++: void SetFlyModeToClosestTriad()
        
        Specify a mode to control how the axes are drawn: either outer
        edges or closest triad to the camera position, or you may also
        disable flying of the axes.
        """
        ...
    
    def SetFlyModeToNone(self):
        """
        V.SetFlyModeToNone()
        C++: void SetFlyModeToNone()
        
        Specify a mode to control how the axes are drawn: either outer
        edges or closest triad to the camera position, or you may also
        disable flying of the axes.
        """
        ...
    
    def SetFlyModeToOuterEdges(self):
        """
        V.SetFlyModeToOuterEdges()
        C++: void SetFlyModeToOuterEdges()
        
        Specify a mode to control how the axes are drawn: either outer
        edges or closest triad to the camera position, or you may also
        disable flying of the axes.
        """
        ...
    
    def SetFontFactor(self, p_float):
        """
        V.SetFontFactor(float)
        C++: virtual void SetFontFactor(double _arg)
        
        Set/Get the factor that controls the overall size of the fonts
        used to label and title the axes.
        """
        ...
    
    def SetInertia(self, p_int):
        """
        V.SetInertia(int)
        C++: virtual void SetInertia(int _arg)
        
        Set/Get the inertial factor that controls how often (i.e, how
        many renders) the axes can switch position (jump from one axes to
        another).
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *)
        
        Use the bounding box of this input dataset to draw the cube axes.
        If this is not specified, then the class will attempt to
        determine the bounds from the defined Prop or Bounds.
        """
        ...
    
    def SetInputData(self, vtkDataSet):
        """
        V.SetInputData(vtkDataSet)
        C++: virtual void SetInputData(vtkDataSet *)
        
        Use the bounding box of this input dataset to draw the cube axes.
        If this is not specified, then the class will attempt to
        determine the bounds from the defined Prop or Bounds.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on each of the
        x-y-z axes.
        """
        ...
    
    def SetNumberOfLabels(self, p_int):
        """
        V.SetNumberOfLabels(int)
        C++: virtual void SetNumberOfLabels(int _arg)
        
        Set/Get the number of annotation labels to show along the x, y,
        and z axes. This values is a suggestion: the number of labels may
        vary depending on the particulars of the data.
        """
        ...
    
    def SetRanges(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetRanges(float, float, float, float, float, float)
        C++: virtual void SetRanges(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetRanges((float, float, float, float, float, float))
        C++: virtual void SetRanges(const double _arg[6])
        
        Explicitly specify the range of values used on the bounds. The
        ranges are specified according to (xmin,xmax, ymin,ymax,
        zmin,zmax), making sure that the min's are less than the max's.
        """
        ...
    
    def SetScaling(self, p_int):
        """
        V.SetScaling(int)
        C++: virtual void SetScaling(vtkTypeBool _arg)
        
        Set/Get a flag that controls whether the axes are scaled to fit
        in the viewport. If off, the axes size remains constant (i.e.,
        stay the size of the bounding box). By default scaling is on so
        the axes are scaled to fit inside the viewport.
        """
        ...
    
    def SetShowActualBounds(self, p_int):
        """
        V.SetShowActualBounds(int)
        C++: virtual void SetShowActualBounds(int _arg)
        
        Set/Get the variable that controls whether the actual bounds of
        the dataset are always shown. Setting this variable to 1 means
        that clipping is disabled and that the actual value of the bounds
        is displayed even with corner offsets Setting this variable to 0
        means these axis will clip themselves and show variable bounds
        (legacy mode)
        """
        ...
    
    def SetUseRanges(self, p_int):
        """
        V.SetUseRanges(int)
        C++: virtual void SetUseRanges(vtkTypeBool _arg)
        
        Set/Get a flag that controls whether the axes use the data ranges
        or the ranges set by SetRanges. By default the axes use the data
        ranges.
        """
        ...
    
    def SetViewProp(self, vtkProp):
        """
        V.SetViewProp(vtkProp)
        C++: void SetViewProp(vtkProp *prop)
        
        Use the bounding box of this prop to draw the cube axes. The
        ViewProp is used to determine the bounds only if the Input is not
        defined.
        """
        ...
    
    def SetXAxisVisibility(self, p_int):
        """
        V.SetXAxisVisibility(int)
        C++: virtual void SetXAxisVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def SetXLabel(self, string):
        """
        V.SetXLabel(string)
        C++: virtual void SetXLabel(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use "X",
        "Y" and "Z".
        """
        ...
    
    def SetXOrigin(self, p_float):
        """
        V.SetXOrigin(float)
        C++: virtual void SetXOrigin(double _arg)
        
        Explicitly specify an origin for the axes. These usually
        intersect at one of the corners of the bounding box, however
        users have the option to override this if necessary
        """
        ...
    
    def SetYAxisVisibility(self, p_int):
        """
        V.SetYAxisVisibility(int)
        C++: virtual void SetYAxisVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def SetYLabel(self, string):
        """
        V.SetYLabel(string)
        C++: virtual void SetYLabel(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use "X",
        "Y" and "Z".
        """
        ...
    
    def SetYOrigin(self, p_float):
        """
        V.SetYOrigin(float)
        C++: virtual void SetYOrigin(double _arg)
        
        Explicitly specify an origin for the axes. These usually
        intersect at one of the corners of the bounding box, however
        users have the option to override this if necessary
        """
        ...
    
    def SetZAxisVisibility(self, p_int):
        """
        V.SetZAxisVisibility(int)
        C++: virtual void SetZAxisVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def SetZLabel(self, string):
        """
        V.SetZLabel(string)
        C++: virtual void SetZLabel(const char *_arg)
        
        Set/Get the labels for the x, y, and z axes. By default, use "X",
        "Y" and "Z".
        """
        ...
    
    def SetZOrigin(self, p_float):
        """
        V.SetZOrigin(float)
        C++: virtual void SetZOrigin(double _arg)
        
        Explicitly specify an origin for the axes. These usually
        intersect at one of the corners of the bounding box, however
        users have the option to override this if necessary
        """
        ...
    
    def ShallowCopy(self, vtkCubeAxesActor2D):
        """
        V.ShallowCopy(vtkCubeAxesActor2D)
        C++: void ShallowCopy(vtkCubeAxesActor2D *actor)
        
        Shallow copy of a CubeAxesActor2D.
        """
        ...
    
    def UseRangesOff(self):
        """
        V.UseRangesOff()
        C++: virtual void UseRangesOff()
        
        Set/Get a flag that controls whether the axes use the data ranges
        or the ranges set by SetRanges. By default the axes use the data
        ranges.
        """
        ...
    
    def UseRangesOn(self):
        """
        V.UseRangesOn()
        C++: virtual void UseRangesOn()
        
        Set/Get a flag that controls whether the axes use the data ranges
        or the ranges set by SetRanges. By default the axes use the data
        ranges.
        """
        ...
    
    def XAxisVisibilityOff(self):
        """
        V.XAxisVisibilityOff()
        C++: virtual void XAxisVisibilityOff()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def XAxisVisibilityOn(self):
        """
        V.XAxisVisibilityOn()
        C++: virtual void XAxisVisibilityOn()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def YAxisVisibilityOff(self):
        """
        V.YAxisVisibilityOff()
        C++: virtual void YAxisVisibilityOff()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def YAxisVisibilityOn(self):
        """
        V.YAxisVisibilityOn()
        C++: virtual void YAxisVisibilityOn()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def ZAxisVisibilityOff(self):
        """
        V.ZAxisVisibilityOff()
        C++: virtual void ZAxisVisibilityOff()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def ZAxisVisibilityOn(self):
        """
        V.ZAxisVisibilityOn()
        C++: virtual void ZAxisVisibilityOn()
        
        Turn on and off the visibility of each axis.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    FlyMode = ...
    VTK_FLY_CLOSEST_TRIAD = ...
    VTK_FLY_NONE = ...
    VTK_FLY_OUTER_EDGES = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGraphAnnotationLayersFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkGraphAnnotationLayersFilter - Produce filled convex hulls around
    subsets of vertices in a vtkGraph.
    
    Superclass: vtkPolyDataAlgorithm
    
    Produces a vtkPolyData comprised of filled polygons of the convex
    hull of a cluster. Alternatively, you may choose to output bounding
    rectangles. Clusters with fewer than three vertices are artificially
    expanded to ensure visibility (see vtkConvexHull2D).
    
    The first input is a vtkGraph with points, possibly set by passing
    the graph through vtkGraphLayout (z-values are ignored). The second
    input is a vtkAnnotationsLayer containing vtkSelectionNodeS of vertex
    ids (the 'clusters' output of vtkTulipReader for example).
    
    Setting OutlineOn() additionally produces outlines of the clusters on
    output port 1.
    
    Three arrays are added to the cells of the output: "Hull id"; "Hull
    name"; and "Hull color".
    
    Note: This filter operates in the x,y-plane and as such works best
    with an interactor style that does not allow camera rotation, such as
    vtkInteractorStyleRubberBand2D.
    
    @sa
    vtkContext2D
    
    @par Thanks: Thanks to Colin Myers, University of Leeds for providing
    this implementation.
    """
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        The modified time of this filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphAnnotationLayersFilter
        C++: vtkGraphAnnotationLayersFilter *NewInstance()
        """
        ...
    
    def OutlineOff(self):
        """
        V.OutlineOff()
        C++: void OutlineOff()
        
        Produce outlines of the hulls on output port 1.
        """
        ...
    
    def OutlineOn(self):
        """
        V.OutlineOn()
        C++: void OutlineOn()
        
        Produce outlines of the hulls on output port 1.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphAnnotationLayersFilter
        C++: static vtkGraphAnnotationLayersFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetHullShapeToBoundingRectangle(self):
        """
        V.SetHullShapeToBoundingRectangle()
        C++: void SetHullShapeToBoundingRectangle()
        
        Set the shape of the hulls to bounding rectangle.
        """
        ...
    
    def SetHullShapeToConvexHull(self):
        """
        V.SetHullShapeToConvexHull()
        C++: void SetHullShapeToConvexHull()
        
        Set the shape of the hulls to convex hull. Default.
        """
        ...
    
    def SetMinHullSizeInDisplay(self, p_int):
        """
        V.SetMinHullSizeInDisplay(int)
        C++: void SetMinHullSizeInDisplay(int size)
        
        Set the minimum x,y-dimensions of each hull in pixels. You must
        also set a vtkRenderer. Defaults to 1. Set to 0 to disable.
        """
        ...
    
    def SetMinHullSizeInWorld(self, p_float):
        """
        V.SetMinHullSizeInWorld(float)
        C++: void SetMinHullSizeInWorld(double size)
        
        Set the minimum x,y-dimensions of each hull in world coordinates.
        Defaults to 1.0. Set to 0.0 to disable.
        """
        ...
    
    def SetOutline(self, bool):
        """
        V.SetOutline(bool)
        C++: void SetOutline(bool b)
        
        Produce outlines of the hulls on output port 1.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *renderer)
        
        Renderer needed for MinHullSizeInDisplay calculation. Not
        reference counted.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: void SetScaleFactor(double scale)
        
        Scale each hull by the amount specified. Defaults to 1.0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLeaderActor2D(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkLeaderActor2D - create a leader with optional label and arrows
    
    Superclass: vtkActor2D
    
    vtkLeaderActor2D creates a leader with an optional label and arrows.
    (A leader is typically used to indicate distance between points.)
    vtkLeaderActor2D is a type of vtkActor2D; that is, it is drawn on the
    overlay plane and is not occluded by 3D geometry. To use this class,
    you typically specify two points defining the start and end points of
    the line (x-y definition using vtkCoordinate class), whether to place
    arrows on one or both end points, and whether to label the leader.
    Also, this class has a special feature that allows curved leaders to
    be created by specifying a radius.
    
    Use the vtkLeaderActor2D uses its superclass vtkActor2D instance
    variables Position and Position2 vtkCoordinates to place an instance
    of vtkLeaderActor2D (i.e., these two data members represent the start
    and end points of the leader).  Using these vtkCoordinates you can
    specify the position of the leader in a variety of coordinate
    systems.
    
    To control the appearance of the actor, use the superclasses
    vtkActor2D::vtkProperty2D and the vtkTextProperty objects associated
    with this actor.
    
    @sa
    vtkAxisActor2D vtkActor2D vtkCoordinate vtkTextProperty
    """
    def AutoLabelOff(self):
        """
        V.AutoLabelOff()
        C++: virtual void AutoLabelOff()
        
        Enable auto-labelling. In this mode, the label is automatically
        updated based on distance (in world coordinates) between the two
        end points; or if a curved leader is being generated, the angle
        in degrees between the two points.
        """
        ...
    
    def AutoLabelOn(self):
        """
        V.AutoLabelOn()
        C++: virtual void AutoLabelOn()
        
        Enable auto-labelling. In this mode, the label is automatically
        updated based on distance (in world coordinates) between the two
        end points; or if a curved leader is being generated, the angle
        in degrees between the two points.
        """
        ...
    
    def GetAngle(self):
        """
        V.GetAngle() -> float
        C++: virtual double GetAngle()
        
        Obtain the length of the leader if the leader is not curved,
        otherwise obtain the angle that the leader circumscribes.
        """
        ...
    
    def GetArrowLength(self):
        """
        V.GetArrowLength() -> float
        C++: virtual double GetArrowLength()
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def GetArrowLengthMaxValue(self):
        """
        V.GetArrowLengthMaxValue() -> float
        C++: virtual double GetArrowLengthMaxValue()
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def GetArrowLengthMinValue(self):
        """
        V.GetArrowLengthMinValue() -> float
        C++: virtual double GetArrowLengthMinValue()
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def GetArrowPlacement(self):
        """
        V.GetArrowPlacement() -> int
        C++: virtual int GetArrowPlacement()
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def GetArrowPlacementMaxValue(self):
        """
        V.GetArrowPlacementMaxValue() -> int
        C++: virtual int GetArrowPlacementMaxValue()
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def GetArrowPlacementMinValue(self):
        """
        V.GetArrowPlacementMinValue() -> int
        C++: virtual int GetArrowPlacementMinValue()
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def GetArrowStyle(self):
        """
        V.GetArrowStyle() -> int
        C++: virtual int GetArrowStyle()
        
        Control the appearance of the arrow heads. A solid arrow head is
        a filled triangle; a open arrow looks like a "V"; and a hollow
        arrow looks like a non-filled triangle.
        """
        ...
    
    def GetArrowStyleMaxValue(self):
        """
        V.GetArrowStyleMaxValue() -> int
        C++: virtual int GetArrowStyleMaxValue()
        
        Control the appearance of the arrow heads. A solid arrow head is
        a filled triangle; a open arrow looks like a "V"; and a hollow
        arrow looks like a non-filled triangle.
        """
        ...
    
    def GetArrowStyleMinValue(self):
        """
        V.GetArrowStyleMinValue() -> int
        C++: virtual int GetArrowStyleMinValue()
        
        Control the appearance of the arrow heads. A solid arrow head is
        a filled triangle; a open arrow looks like a "V"; and a hollow
        arrow looks like a non-filled triangle.
        """
        ...
    
    def GetArrowWidth(self):
        """
        V.GetArrowWidth() -> float
        C++: virtual double GetArrowWidth()
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def GetArrowWidthMaxValue(self):
        """
        V.GetArrowWidthMaxValue() -> float
        C++: virtual double GetArrowWidthMaxValue()
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def GetArrowWidthMinValue(self):
        """
        V.GetArrowWidthMinValue() -> float
        C++: virtual double GetArrowWidthMinValue()
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def GetAutoLabel(self):
        """
        V.GetAutoLabel() -> int
        C++: virtual vtkTypeBool GetAutoLabel()
        
        Enable auto-labelling. In this mode, the label is automatically
        updated based on distance (in world coordinates) between the two
        end points; or if a curved leader is being generated, the angle
        in degrees between the two points.
        """
        ...
    
    def GetLabel(self):
        """
        V.GetLabel() -> string
        C++: virtual char *GetLabel()
        
        Set/Get the label for the leader. If the label is an empty
        string, then it will not be drawn.
        """
        ...
    
    def GetLabelFactor(self):
        """
        V.GetLabelFactor() -> float
        C++: virtual double GetLabelFactor()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label the leader.
        """
        ...
    
    def GetLabelFactorMaxValue(self):
        """
        V.GetLabelFactorMaxValue() -> float
        C++: virtual double GetLabelFactorMaxValue()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label the leader.
        """
        ...
    
    def GetLabelFactorMinValue(self):
        """
        V.GetLabelFactorMinValue() -> float
        C++: virtual double GetLabelFactorMinValue()
        
        Set/Get the factor that controls the overall size of the fonts
        used to label the leader.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Specify the format to use for auto-labelling.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Set/Get the text property of the label.
        """
        ...
    
    def GetLength(self):
        """
        V.GetLength() -> float
        C++: virtual double GetLength()
        
        Obtain the length of the leader if the leader is not curved,
        otherwise obtain the angle that the leader circumscribes.
        """
        ...
    
    def GetMaximumArrowSize(self):
        """
        V.GetMaximumArrowSize() -> float
        C++: virtual double GetMaximumArrowSize()
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def GetMaximumArrowSizeMaxValue(self):
        """
        V.GetMaximumArrowSizeMaxValue() -> float
        C++: virtual double GetMaximumArrowSizeMaxValue()
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def GetMaximumArrowSizeMinValue(self):
        """
        V.GetMaximumArrowSizeMinValue() -> float
        C++: virtual double GetMaximumArrowSizeMinValue()
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def GetMinimumArrowSize(self):
        """
        V.GetMinimumArrowSize() -> float
        C++: virtual double GetMinimumArrowSize()
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def GetMinimumArrowSizeMaxValue(self):
        """
        V.GetMinimumArrowSizeMaxValue() -> float
        C++: virtual double GetMinimumArrowSizeMaxValue()
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def GetMinimumArrowSizeMinValue(self):
        """
        V.GetMinimumArrowSizeMinValue() -> float
        C++: virtual double GetMinimumArrowSizeMinValue()
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set/Get a radius which can be used to curve the leader.  If a
        radius is specified whose absolute value is greater than one half
        the distance between the two points defined by the superclasses'
        Position and Position2 ivars, then the leader will be curved. A
        positive radius will produce a curve such that the center is to
        the right of the line from Position and Position2; a negative
        radius will produce a curve in the opposite sense. By default,
        the radius is set to zero and thus there is no curvature. Note
        that the radius is expresses as a multiple of the distance
        between (Position,Position2); this avoids issues relative to
        coordinate system transformations.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLeaderActor2D
        C++: vtkLeaderActor2D *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Methods required by vtkProp and vtkActor2D superclasses.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Methods required by vtkProp and vtkActor2D superclasses.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Methods required by vtkProp and vtkActor2D superclasses.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLeaderActor2D
        C++: static vtkLeaderActor2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetArrowLength(self, p_float):
        """
        V.SetArrowLength(float)
        C++: virtual void SetArrowLength(double _arg)
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def SetArrowPlacement(self, p_int):
        """
        V.SetArrowPlacement(int)
        C++: virtual void SetArrowPlacement(int _arg)
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def SetArrowPlacementToBoth(self):
        """
        V.SetArrowPlacementToBoth()
        C++: void SetArrowPlacementToBoth()
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def SetArrowPlacementToNone(self):
        """
        V.SetArrowPlacementToNone()
        C++: void SetArrowPlacementToNone()
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def SetArrowPlacementToPoint1(self):
        """
        V.SetArrowPlacementToPoint1()
        C++: void SetArrowPlacementToPoint1()
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def SetArrowPlacementToPoint2(self):
        """
        V.SetArrowPlacementToPoint2()
        C++: void SetArrowPlacementToPoint2()
        
        Control whether arrow heads are drawn on the leader. Arrows may
        be drawn on one end, both ends, or not at all.
        """
        ...
    
    def SetArrowStyle(self, p_int):
        """
        V.SetArrowStyle(int)
        C++: virtual void SetArrowStyle(int _arg)
        
        Control the appearance of the arrow heads. A solid arrow head is
        a filled triangle; a open arrow looks like a "V"; and a hollow
        arrow looks like a non-filled triangle.
        """
        ...
    
    def SetArrowStyleToFilled(self):
        """
        V.SetArrowStyleToFilled()
        C++: void SetArrowStyleToFilled()
        
        Control the appearance of the arrow heads. A solid arrow head is
        a filled triangle; a open arrow looks like a "V"; and a hollow
        arrow looks like a non-filled triangle.
        """
        ...
    
    def SetArrowStyleToHollow(self):
        """
        V.SetArrowStyleToHollow()
        C++: void SetArrowStyleToHollow()
        
        Control the appearance of the arrow heads. A solid arrow head is
        a filled triangle; a open arrow looks like a "V"; and a hollow
        arrow looks like a non-filled triangle.
        """
        ...
    
    def SetArrowStyleToOpen(self):
        """
        V.SetArrowStyleToOpen()
        C++: void SetArrowStyleToOpen()
        
        Control the appearance of the arrow heads. A solid arrow head is
        a filled triangle; a open arrow looks like a "V"; and a hollow
        arrow looks like a non-filled triangle.
        """
        ...
    
    def SetArrowWidth(self, p_float):
        """
        V.SetArrowWidth(float)
        C++: virtual void SetArrowWidth(double _arg)
        
        Specify the arrow length and base width (in normalized viewport
        coordinates).
        """
        ...
    
    def SetAutoLabel(self, p_int):
        """
        V.SetAutoLabel(int)
        C++: virtual void SetAutoLabel(vtkTypeBool _arg)
        
        Enable auto-labelling. In this mode, the label is automatically
        updated based on distance (in world coordinates) between the two
        end points; or if a curved leader is being generated, the angle
        in degrees between the two points.
        """
        ...
    
    def SetLabel(self, string):
        """
        V.SetLabel(string)
        C++: virtual void SetLabel(const char *_arg)
        
        Set/Get the label for the leader. If the label is an empty
        string, then it will not be drawn.
        """
        ...
    
    def SetLabelFactor(self, p_float):
        """
        V.SetLabelFactor(float)
        C++: virtual void SetLabelFactor(double _arg)
        
        Set/Get the factor that controls the overall size of the fonts
        used to label the leader.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Specify the format to use for auto-labelling.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the text property of the label.
        """
        ...
    
    def SetMaximumArrowSize(self, p_float):
        """
        V.SetMaximumArrowSize(float)
        C++: virtual void SetMaximumArrowSize(double _arg)
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def SetMinimumArrowSize(self, p_float):
        """
        V.SetMinimumArrowSize(float)
        C++: virtual void SetMinimumArrowSize(double _arg)
        
        Limit the minimum and maximum size of the arrows. These values
        are expressed in pixels and clamp the minimum/maximum possible
        size for the width/length of the arrow head. (When clamped, the
        ratio between length and width is preserved.)
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set/Get a radius which can be used to curve the leader.  If a
        radius is specified whose absolute value is greater than one half
        the distance between the two points defined by the superclasses'
        Position and Position2 ivars, then the leader will be curved. A
        positive radius will produce a curve such that the center is to
        the right of the line from Position and Position2; a negative
        radius will produce a curve in the opposite sense. By default,
        the radius is set to zero and thus there is no curvature. Note
        that the radius is expresses as a multiple of the distance
        between (Position,Position2); this avoids issues relative to
        coordinate system transformations.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of this vtkActor2D. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, i_e_, these_two_data_members_represent_the_start, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    VTK_ARROW_BOTH = ...
    VTK_ARROW_FILLED = ...
    VTK_ARROW_HOLLOW = ...
    VTK_ARROW_NONE = ...
    VTK_ARROW_OPEN = ...
    VTK_ARROW_POINT1 = ...
    VTK_ARROW_POINT2 = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLegendBoxActor(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkLegendBoxActor - draw symbols with text
    
    Superclass: vtkActor2D
    
    vtkLegendBoxActor is used to associate a symbol with a text string.
    The user specifies a vtkPolyData to use as the symbol, and a string
    associated with the symbol. The actor can then be placed in the scene
    in the same way that any other vtkActor2D can be used.
    
    To use this class, you must define the position of the legend box by
    using the superclasses' vtkActor2D::Position coordinate and Position2
    coordinate. Then define the set of symbols and text strings that make
    up the menu box. The font attributes of the entries can be set
    through the vtkTextProperty associated to this actor. The class will
    scale the symbols and text to fit in the legend box defined by
    (Position,Position2). Optional features like turning on a border line
    and setting the spacing between the border and the symbols/text can
    also be set.
    
    @sa
    vtkXYPlotActor vtkActor2D vtkGlyphSource2D
    """
    def BorderOff(self):
        """
        V.BorderOff()
        C++: virtual void BorderOff()
        
        Set/Get the flag that controls whether a border will be drawn
        around the legend box.
        """
        ...
    
    def BorderOn(self):
        """
        V.BorderOn()
        C++: virtual void BorderOn()
        
        Set/Get the flag that controls whether a border will be drawn
        around the legend box.
        """
        ...
    
    def BoxOff(self):
        """
        V.BoxOff()
        C++: virtual void BoxOff()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def BoxOn(self):
        """
        V.BoxOn()
        C++: virtual void BoxOn()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def GetBackgroundColor(self):
        """
        V.GetBackgroundColor() -> (float, float, float)
        C++: virtual double *GetBackgroundColor()
        
        Set/Get background color. Default is: (0.3, 0.3, 0.3).
        """
        ...
    
    def GetBackgroundOpacity(self):
        """
        V.GetBackgroundOpacity() -> float
        C++: virtual double GetBackgroundOpacity()
        
        Set/Get background opacity. Default is: 1.0
        """
        ...
    
    def GetBackgroundOpacityMaxValue(self):
        """
        V.GetBackgroundOpacityMaxValue() -> float
        C++: virtual double GetBackgroundOpacityMaxValue()
        
        Set/Get background opacity. Default is: 1.0
        """
        ...
    
    def GetBackgroundOpacityMinValue(self):
        """
        V.GetBackgroundOpacityMinValue() -> float
        C++: virtual double GetBackgroundOpacityMinValue()
        
        Set/Get background opacity. Default is: 1.0
        """
        ...
    
    def GetBorder(self):
        """
        V.GetBorder() -> int
        C++: virtual vtkTypeBool GetBorder()
        
        Set/Get the flag that controls whether a border will be drawn
        around the legend box.
        """
        ...
    
    def GetBox(self):
        """
        V.GetBox() -> int
        C++: virtual vtkTypeBool GetBox()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def GetBoxProperty(self):
        """
        V.GetBoxProperty() -> vtkProperty2D
        C++: vtkProperty2D *GetBoxProperty()
        
        Get the box vtkProperty2D.
        """
        ...
    
    def GetEntryColor(self, p_int):
        """
        V.GetEntryColor(int) -> (float, float, float)
        C++: double *GetEntryColor(int i)
        """
        ...
    
    def GetEntryIcon(self, p_int):
        """
        V.GetEntryIcon(int) -> vtkImageData
        C++: vtkImageData *GetEntryIcon(int i)
        """
        ...
    
    def GetEntryString(self, p_int):
        """
        V.GetEntryString(int) -> string
        C++: const char *GetEntryString(int i)
        """
        ...
    
    def GetEntrySymbol(self, p_int):
        """
        V.GetEntrySymbol(int) -> vtkPolyData
        C++: vtkPolyData *GetEntrySymbol(int i)
        """
        ...
    
    def GetEntryTextProperty(self):
        """
        V.GetEntryTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetEntryTextProperty()
        
        Set/Get the text property.
        """
        ...
    
    def GetLockBorder(self):
        """
        V.GetLockBorder() -> int
        C++: virtual vtkTypeBool GetLockBorder()
        
        Set/Get the flag that controls whether the border and legend
        placement is locked into the rectangle defined by
        (Position,Position2). If off, then the legend box will adjust its
        size so that the border fits nicely around the text and symbols.
        (The ivar is off by default.) Note: the legend box is guaranteed
        to lie within the original border definition.
        """
        ...
    
    def GetNumberOfEntries(self):
        """
        V.GetNumberOfEntries() -> int
        C++: int GetNumberOfEntries()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPadding(self):
        """
        V.GetPadding() -> int
        C++: virtual int GetPadding()
        
        Set/Get the padding between the legend entries and the border.
        The value is specified in pixels.
        """
        ...
    
    def GetPaddingMaxValue(self):
        """
        V.GetPaddingMaxValue() -> int
        C++: virtual int GetPaddingMaxValue()
        
        Set/Get the padding between the legend entries and the border.
        The value is specified in pixels.
        """
        ...
    
    def GetPaddingMinValue(self):
        """
        V.GetPaddingMinValue() -> int
        C++: virtual int GetPaddingMinValue()
        
        Set/Get the padding between the legend entries and the border.
        The value is specified in pixels.
        """
        ...
    
    def GetScalarVisibility(self):
        """
        V.GetScalarVisibility() -> int
        C++: virtual vtkTypeBool GetScalarVisibility()
        
        Turn on/off flag to control whether the symbol's scalar data is
        used to color the symbol. If off, the color of the
        vtkLegendBoxActor is used.
        """
        ...
    
    def GetUseBackground(self):
        """
        V.GetUseBackground() -> int
        C++: virtual vtkTypeBool GetUseBackground()
        
        Turn on/off background.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LockBorderOff(self):
        """
        V.LockBorderOff()
        C++: virtual void LockBorderOff()
        
        Set/Get the flag that controls whether the border and legend
        placement is locked into the rectangle defined by
        (Position,Position2). If off, then the legend box will adjust its
        size so that the border fits nicely around the text and symbols.
        (The ivar is off by default.) Note: the legend box is guaranteed
        to lie within the original border definition.
        """
        ...
    
    def LockBorderOn(self):
        """
        V.LockBorderOn()
        C++: virtual void LockBorderOn()
        
        Set/Get the flag that controls whether the border and legend
        placement is locked into the rectangle defined by
        (Position,Position2). If off, then the legend box will adjust its
        size so that the border fits nicely around the text and symbols.
        (The ivar is off by default.) Note: the legend box is guaranteed
        to lie within the original border definition.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLegendBoxActor
        C++: vtkLegendBoxActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Release any
        graphics resources that are being consumed by this actor. The
        parameter window could be used to determine which graphic
        resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the legend
        box to the screen.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the legend
        box to the screen.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the legend
        box to the screen.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLegendBoxActor
        C++: static vtkLegendBoxActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalarVisibilityOff(self):
        """
        V.ScalarVisibilityOff()
        C++: virtual void ScalarVisibilityOff()
        
        Turn on/off flag to control whether the symbol's scalar data is
        used to color the symbol. If off, the color of the
        vtkLegendBoxActor is used.
        """
        ...
    
    def ScalarVisibilityOn(self):
        """
        V.ScalarVisibilityOn()
        C++: virtual void ScalarVisibilityOn()
        
        Turn on/off flag to control whether the symbol's scalar data is
        used to color the symbol. If off, the color of the
        vtkLegendBoxActor is used.
        """
        ...
    
    def SetBackgroundColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetBackgroundColor(float, float, float)
        C++: virtual void SetBackgroundColor(double _arg1, double _arg2,
            double _arg3)
        V.SetBackgroundColor((float, float, float))
        C++: virtual void SetBackgroundColor(const double _arg[3])
        
        Set/Get background color. Default is: (0.3, 0.3, 0.3).
        """
        ...
    
    def SetBackgroundOpacity(self, p_float):
        """
        V.SetBackgroundOpacity(float)
        C++: virtual void SetBackgroundOpacity(double _arg)
        
        Set/Get background opacity. Default is: 1.0
        """
        ...
    
    def SetBorder(self, p_int):
        """
        V.SetBorder(int)
        C++: virtual void SetBorder(vtkTypeBool _arg)
        
        Set/Get the flag that controls whether a border will be drawn
        around the legend box.
        """
        ...
    
    def SetBox(self, p_int):
        """
        V.SetBox(int)
        C++: virtual void SetBox(vtkTypeBool _arg)
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def SetEntry(self, p_int, vtkPolyData, string, p_float=..., p_float=..., p_float=...):
        """
        V.SetEntry(int, vtkPolyData, string, [float, float, float])
        C++: void SetEntry(int i, vtkPolyData *symbol, const char *string,
             double color[3])
        V.SetEntry(int, vtkImageData, string, [float, float, float])
        C++: void SetEntry(int i, vtkImageData *symbol,
            const char *string, double color[3])
        V.SetEntry(int, vtkPolyData, vtkImageData, string, [float, float,
            float])
        C++: void SetEntry(int i, vtkPolyData *symbol, vtkImageData *icon,
             const char *string, double color[3])
        
        Add an entry to the legend box. You must supply a vtkPolyData to
        be used as a symbol (it can be NULL) and a text string (which
        also can be NULL). The vtkPolyData is assumed to be defined in
        the x-y plane, and the text is assumed to be a single line in
        height. Note that when this method is invoked previous entries
        are deleted. Also supply a text string and optionally a color.
        (If a color is not specified, then the entry color is the same as
        this actor's color.) (Note: use the set methods when you use
        SetNumberOfEntries().)
        """
        ...
    
    def SetEntryColor(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.SetEntryColor(int, [float, float, float])
        C++: void SetEntryColor(int i, double color[3])
        V.SetEntryColor(int, float, float, float)
        C++: void SetEntryColor(int i, double r, double g, double b)
        """
        ...
    
    def SetEntryIcon(self, p_int, vtkImageData):
        """
        V.SetEntryIcon(int, vtkImageData)
        C++: void SetEntryIcon(int i, vtkImageData *icon)
        """
        ...
    
    def SetEntryString(self, p_int, string):
        """
        V.SetEntryString(int, string)
        C++: void SetEntryString(int i, const char *string)
        """
        ...
    
    def SetEntrySymbol(self, p_int, vtkPolyData):
        """
        V.SetEntrySymbol(int, vtkPolyData)
        C++: void SetEntrySymbol(int i, vtkPolyData *symbol)
        """
        ...
    
    def SetEntryTextProperty(self, vtkTextProperty):
        """
        V.SetEntryTextProperty(vtkTextProperty)
        C++: virtual void SetEntryTextProperty(vtkTextProperty *p)
        
        Set/Get the text property.
        """
        ...
    
    def SetLockBorder(self, p_int):
        """
        V.SetLockBorder(int)
        C++: virtual void SetLockBorder(vtkTypeBool _arg)
        
        Set/Get the flag that controls whether the border and legend
        placement is locked into the rectangle defined by
        (Position,Position2). If off, then the legend box will adjust its
        size so that the border fits nicely around the text and symbols.
        (The ivar is off by default.) Note: the legend box is guaranteed
        to lie within the original border definition.
        """
        ...
    
    def SetNumberOfEntries(self, p_int):
        """
        V.SetNumberOfEntries(int)
        C++: void SetNumberOfEntries(int num)
        
        Specify the number of entries in the legend box.
        """
        ...
    
    def SetPadding(self, p_int):
        """
        V.SetPadding(int)
        C++: virtual void SetPadding(int _arg)
        
        Set/Get the padding between the legend entries and the border.
        The value is specified in pixels.
        """
        ...
    
    def SetScalarVisibility(self, p_int):
        """
        V.SetScalarVisibility(int)
        C++: virtual void SetScalarVisibility(vtkTypeBool _arg)
        
        Turn on/off flag to control whether the symbol's scalar data is
        used to color the symbol. If off, the color of the
        vtkLegendBoxActor is used.
        """
        ...
    
    def SetUseBackground(self, p_int):
        """
        V.SetUseBackground(int)
        C++: virtual void SetUseBackground(vtkTypeBool _arg)
        
        Turn on/off background.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of this scaled text actor. Overloads the virtual
        vtkProp method.
        """
        ...
    
    def UseBackgroundOff(self):
        """
        V.UseBackgroundOff()
        C++: virtual void UseBackgroundOff()
        
        Turn on/off background.
        """
        ...
    
    def UseBackgroundOn(self):
        """
        V.UseBackgroundOn()
        C++: virtual void UseBackgroundOn()
        
        Turn on/off background.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLegendScaleActor(__vtkmodules_vtkRenderingCore.vtkProp):
    """
    vtkLegendScaleActor - annotate the render window with scale and
    distance information
    
    Superclass: vtkProp
    
    This class is used to annotate the render window. Its basic goal is
    to provide an indication of the scale of the scene. Four axes
    surrounding the render window indicate (in a variety of ways) the
    scale of what the camera is viewing. An option also exists for
    displaying a scale legend.
    
    The axes can be programmed either to display distance scales or x-y
    coordinate values. By default, the scales display a distance.
    However, if you know that the view is down the z-axis, the scales can
    be programmed to display x-y coordinate values.
    
    @warning
    Please be aware that the axes and scale values are subject to
    perspective effects. The distances are computed in the focal plane of
    the camera. When there are large view angles (i.e., perspective
    projection), the computed distances may provide users the wrong sense
    of scale. These effects are not present when parallel projection is
    enabled.
    """
    def AllAnnotationsOff(self):
        """
        V.AllAnnotationsOff()
        C++: void AllAnnotationsOff()
        
        Convenience method that turns all the axes and the legend scale.
        """
        ...
    
    def AllAnnotationsOn(self):
        """
        V.AllAnnotationsOn()
        C++: void AllAnnotationsOn()
        
        Convenience method that turns all the axes and the legend scale.
        """
        ...
    
    def AllAxesOff(self):
        """
        V.AllAxesOff()
        C++: void AllAxesOff()
        
        Convenience method that turns all the axes either on or off.
        """
        ...
    
    def AllAxesOn(self):
        """
        V.AllAxesOn()
        C++: void AllAxesOn()
        
        Convenience method that turns all the axes either on or off.
        """
        ...
    
    def BottomAxisVisibilityOff(self):
        """
        V.BottomAxisVisibilityOff()
        C++: virtual void BottomAxisVisibilityOff()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def BottomAxisVisibilityOn(self):
        """
        V.BottomAxisVisibilityOn()
        C++: virtual void BottomAxisVisibilityOn()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def BuildRepresentation(self, vtkViewport):
        """
        V.BuildRepresentation(vtkViewport)
        C++: virtual void BuildRepresentation(vtkViewport *viewport)
        
        Standard methods supporting the rendering process.
        """
        ...
    
    def GetActors2D(self, vtkPropCollection):
        """
        V.GetActors2D(vtkPropCollection)
        C++: void GetActors2D(vtkPropCollection *) override;
        
        Standard methods supporting the rendering process.
        """
        ...
    
    def GetBottomAxis(self):
        """
        V.GetBottomAxis() -> vtkAxisActor2D
        C++: virtual vtkAxisActor2D *GetBottomAxis()
        
        These are methods to retrieve the vtkAxisActors used to represent
        the four axes that form this representation. Users may retrieve
        and then modify these axes to control their appearance.
        """
        ...
    
    def GetBottomAxisVisibility(self):
        """
        V.GetBottomAxisVisibility() -> int
        C++: virtual vtkTypeBool GetBottomAxisVisibility()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def GetBottomBorderOffset(self):
        """
        V.GetBottomBorderOffset() -> int
        C++: virtual int GetBottomBorderOffset()
        
        Set/Get the offset of the bottom axis from the border. This
        number is expressed in pixels, and represents the approximate
        distance of the axes from the sides of the renderer. The default
        is 30.
        """
        ...
    
    def GetBottomBorderOffsetMaxValue(self):
        """
        V.GetBottomBorderOffsetMaxValue() -> int
        C++: virtual int GetBottomBorderOffsetMaxValue()
        
        Set/Get the offset of the bottom axis from the border. This
        number is expressed in pixels, and represents the approximate
        distance of the axes from the sides of the renderer. The default
        is 30.
        """
        ...
    
    def GetBottomBorderOffsetMinValue(self):
        """
        V.GetBottomBorderOffsetMinValue() -> int
        C++: virtual int GetBottomBorderOffsetMinValue()
        
        Set/Get the offset of the bottom axis from the border. This
        number is expressed in pixels, and represents the approximate
        distance of the axes from the sides of the renderer. The default
        is 30.
        """
        ...
    
    def GetCornerOffsetFactor(self):
        """
        V.GetCornerOffsetFactor() -> float
        C++: virtual double GetCornerOffsetFactor()
        
        Get/Set the corner offset. This is the offset factor used to
        offset the axes at the corners. Default value is 2.0.
        """
        ...
    
    def GetCornerOffsetFactorMaxValue(self):
        """
        V.GetCornerOffsetFactorMaxValue() -> float
        C++: virtual double GetCornerOffsetFactorMaxValue()
        
        Get/Set the corner offset. This is the offset factor used to
        offset the axes at the corners. Default value is 2.0.
        """
        ...
    
    def GetCornerOffsetFactorMinValue(self):
        """
        V.GetCornerOffsetFactorMinValue() -> float
        C++: virtual double GetCornerOffsetFactorMinValue()
        
        Get/Set the corner offset. This is the offset factor used to
        offset the axes at the corners. Default value is 2.0.
        """
        ...
    
    def GetLabelMode(self):
        """
        V.GetLabelMode() -> int
        C++: virtual int GetLabelMode()
        
        Specify the mode for labeling the scale axes. By default, the
        axes are labeled with the distance between points (centered at a
        distance of 0.0). Alternatively if you know that the view is down
        the z-axis; the axes can be labeled with x-y coordinate values.
        """
        ...
    
    def GetLabelModeMaxValue(self):
        """
        V.GetLabelModeMaxValue() -> int
        C++: virtual int GetLabelModeMaxValue()
        
        Specify the mode for labeling the scale axes. By default, the
        axes are labeled with the distance between points (centered at a
        distance of 0.0). Alternatively if you know that the view is down
        the z-axis; the axes can be labeled with x-y coordinate values.
        """
        ...
    
    def GetLabelModeMinValue(self):
        """
        V.GetLabelModeMinValue() -> int
        C++: virtual int GetLabelModeMinValue()
        
        Specify the mode for labeling the scale axes. By default, the
        axes are labeled with the distance between points (centered at a
        distance of 0.0). Alternatively if you know that the view is down
        the z-axis; the axes can be labeled with x-y coordinate values.
        """
        ...
    
    def GetLeftAxis(self):
        """
        V.GetLeftAxis() -> vtkAxisActor2D
        C++: virtual vtkAxisActor2D *GetLeftAxis()
        
        These are methods to retrieve the vtkAxisActors used to represent
        the four axes that form this representation. Users may retrieve
        and then modify these axes to control their appearance.
        """
        ...
    
    def GetLeftAxisVisibility(self):
        """
        V.GetLeftAxisVisibility() -> int
        C++: virtual vtkTypeBool GetLeftAxisVisibility()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def GetLeftBorderOffset(self):
        """
        V.GetLeftBorderOffset() -> int
        C++: virtual int GetLeftBorderOffset()
        
        Set/Get the offset of the left axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def GetLeftBorderOffsetMaxValue(self):
        """
        V.GetLeftBorderOffsetMaxValue() -> int
        C++: virtual int GetLeftBorderOffsetMaxValue()
        
        Set/Get the offset of the left axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def GetLeftBorderOffsetMinValue(self):
        """
        V.GetLeftBorderOffsetMinValue() -> int
        C++: virtual int GetLeftBorderOffsetMinValue()
        
        Set/Get the offset of the left axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def GetLegendLabelProperty(self):
        """
        V.GetLegendLabelProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLegendLabelProperty()
        
        Set/Get the labels text properties for the legend title and
        labels.
        """
        ...
    
    def GetLegendTitleProperty(self):
        """
        V.GetLegendTitleProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLegendTitleProperty()
        
        Set/Get the labels text properties for the legend title and
        labels.
        """
        ...
    
    def GetLegendVisibility(self):
        """
        V.GetLegendVisibility() -> int
        C++: virtual vtkTypeBool GetLegendVisibility()
        
        Indicate whether the legend scale should be displayed or not. The
        default is On.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def GetRightAxis(self):
        """
        V.GetRightAxis() -> vtkAxisActor2D
        C++: virtual vtkAxisActor2D *GetRightAxis()
        
        These are methods to retrieve the vtkAxisActors used to represent
        the four axes that form this representation. Users may retrieve
        and then modify these axes to control their appearance.
        """
        ...
    
    def GetRightAxisVisibility(self):
        """
        V.GetRightAxisVisibility() -> int
        C++: virtual vtkTypeBool GetRightAxisVisibility()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def GetRightBorderOffset(self):
        """
        V.GetRightBorderOffset() -> int
        C++: virtual int GetRightBorderOffset()
        
        Set/Get the offset of the right axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def GetRightBorderOffsetMaxValue(self):
        """
        V.GetRightBorderOffsetMaxValue() -> int
        C++: virtual int GetRightBorderOffsetMaxValue()
        
        Set/Get the offset of the right axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def GetRightBorderOffsetMinValue(self):
        """
        V.GetRightBorderOffsetMinValue() -> int
        C++: virtual int GetRightBorderOffsetMinValue()
        
        Set/Get the offset of the right axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def GetTopAxis(self):
        """
        V.GetTopAxis() -> vtkAxisActor2D
        C++: virtual vtkAxisActor2D *GetTopAxis()
        
        These are methods to retrieve the vtkAxisActors used to represent
        the four axes that form this representation. Users may retrieve
        and then modify these axes to control their appearance.
        """
        ...
    
    def GetTopAxisVisibility(self):
        """
        V.GetTopAxisVisibility() -> int
        C++: virtual vtkTypeBool GetTopAxisVisibility()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def GetTopBorderOffset(self):
        """
        V.GetTopBorderOffset() -> int
        C++: virtual int GetTopBorderOffset()
        
        Set/Get the offset of the top axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 30.
        """
        ...
    
    def GetTopBorderOffsetMaxValue(self):
        """
        V.GetTopBorderOffsetMaxValue() -> int
        C++: virtual int GetTopBorderOffsetMaxValue()
        
        Set/Get the offset of the top axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 30.
        """
        ...
    
    def GetTopBorderOffsetMinValue(self):
        """
        V.GetTopBorderOffsetMinValue() -> int
        C++: virtual int GetTopBorderOffsetMinValue()
        
        Set/Get the offset of the top axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 30.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for the class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def LeftAxisVisibilityOff(self):
        """
        V.LeftAxisVisibilityOff()
        C++: virtual void LeftAxisVisibilityOff()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def LeftAxisVisibilityOn(self):
        """
        V.LeftAxisVisibilityOn()
        C++: virtual void LeftAxisVisibilityOn()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def LegendVisibilityOff(self):
        """
        V.LegendVisibilityOff()
        C++: virtual void LegendVisibilityOff()
        
        Indicate whether the legend scale should be displayed or not. The
        default is On.
        """
        ...
    
    def LegendVisibilityOn(self):
        """
        V.LegendVisibilityOn()
        C++: virtual void LegendVisibilityOn()
        
        Indicate whether the legend scale should be displayed or not. The
        default is On.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLegendScaleActor
        C++: vtkLegendScaleActor *NewInstance()
        
        Standard methods for the class.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Standard methods supporting the rendering process.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Standard methods supporting the rendering process.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Standard methods supporting the rendering process.
        """
        ...
    
    def RightAxisVisibilityOff(self):
        """
        V.RightAxisVisibilityOff()
        C++: virtual void RightAxisVisibilityOff()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def RightAxisVisibilityOn(self):
        """
        V.RightAxisVisibilityOn()
        C++: virtual void RightAxisVisibilityOn()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLegendScaleActor
        C++: static vtkLegendScaleActor *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for the class.
        """
        ...
    
    def SetBottomAxisVisibility(self, p_int):
        """
        V.SetBottomAxisVisibility(int)
        C++: virtual void SetBottomAxisVisibility(vtkTypeBool _arg)
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def SetBottomBorderOffset(self, p_int):
        """
        V.SetBottomBorderOffset(int)
        C++: virtual void SetBottomBorderOffset(int _arg)
        
        Set/Get the offset of the bottom axis from the border. This
        number is expressed in pixels, and represents the approximate
        distance of the axes from the sides of the renderer. The default
        is 30.
        """
        ...
    
    def SetCornerOffsetFactor(self, p_float):
        """
        V.SetCornerOffsetFactor(float)
        C++: virtual void SetCornerOffsetFactor(double _arg)
        
        Get/Set the corner offset. This is the offset factor used to
        offset the axes at the corners. Default value is 2.0.
        """
        ...
    
    def SetLabelMode(self, p_int):
        """
        V.SetLabelMode(int)
        C++: virtual void SetLabelMode(int _arg)
        
        Specify the mode for labeling the scale axes. By default, the
        axes are labeled with the distance between points (centered at a
        distance of 0.0). Alternatively if you know that the view is down
        the z-axis; the axes can be labeled with x-y coordinate values.
        """
        ...
    
    def SetLabelModeToDistance(self):
        """
        V.SetLabelModeToDistance()
        C++: void SetLabelModeToDistance()
        
        Specify the mode for labeling the scale axes. By default, the
        axes are labeled with the distance between points (centered at a
        distance of 0.0). Alternatively if you know that the view is down
        the z-axis; the axes can be labeled with x-y coordinate values.
        """
        ...
    
    def SetLabelModeToXYCoordinates(self):
        """
        V.SetLabelModeToXYCoordinates()
        C++: void SetLabelModeToXYCoordinates()
        
        Specify the mode for labeling the scale axes. By default, the
        axes are labeled with the distance between points (centered at a
        distance of 0.0). Alternatively if you know that the view is down
        the z-axis; the axes can be labeled with x-y coordinate values.
        """
        ...
    
    def SetLeftAxisVisibility(self, p_int):
        """
        V.SetLeftAxisVisibility(int)
        C++: virtual void SetLeftAxisVisibility(vtkTypeBool _arg)
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def SetLeftBorderOffset(self, p_int):
        """
        V.SetLeftBorderOffset(int)
        C++: virtual void SetLeftBorderOffset(int _arg)
        
        Set/Get the offset of the left axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def SetLegendVisibility(self, p_int):
        """
        V.SetLegendVisibility(int)
        C++: virtual void SetLegendVisibility(vtkTypeBool _arg)
        
        Indicate whether the legend scale should be displayed or not. The
        default is On.
        """
        ...
    
    def SetRightAxisVisibility(self, p_int):
        """
        V.SetRightAxisVisibility(int)
        C++: virtual void SetRightAxisVisibility(vtkTypeBool _arg)
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def SetRightBorderOffset(self, p_int):
        """
        V.SetRightBorderOffset(int)
        C++: virtual void SetRightBorderOffset(int _arg)
        
        Set/Get the offset of the right axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 50.
        """
        ...
    
    def SetTopAxisVisibility(self, p_int):
        """
        V.SetTopAxisVisibility(int)
        C++: virtual void SetTopAxisVisibility(vtkTypeBool _arg)
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def SetTopBorderOffset(self, p_int):
        """
        V.SetTopBorderOffset(int)
        C++: virtual void SetTopBorderOffset(int _arg)
        
        Set/Get the offset of the top axis from the border. This number
        is expressed in pixels, and represents the approximate distance
        of the axes from the sides of the renderer. The default is 30.
        """
        ...
    
    def TopAxisVisibilityOff(self):
        """
        V.TopAxisVisibilityOff()
        C++: virtual void TopAxisVisibilityOff()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def TopAxisVisibilityOn(self):
        """
        V.TopAxisVisibilityOn()
        C++: virtual void TopAxisVisibilityOn()
        
        Set/Get the flags that control which of the four axes to display
        (top, bottom, left and right). By default, all the axes are
        displayed.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AttributeLocation = ...
    DISTANCE = ...
    XY_COORDINATES = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParallelCoordinatesActor(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkParallelCoordinatesActor - create parallel coordinate display from
    input field
    
    Superclass: vtkActor2D
    
    vtkParallelCoordinatesActor generates a parallel coordinates plot
    from an input field (i.e., vtkDataObject). Parallel coordinates
    represent N-dimensional data by using a set of N parallel axes (not
    orthogonal like the usual x-y-z Cartesian axes). Each N-dimensional
    point is plotted as a polyline, were each of the N components of the
    point lie on one of the N axes, and the components are connected by
    straight lines.
    
    To use this class, you must specify an input data object. You'll
    probably also want to specify the position of the plot be setting the
    Position and Position2 instance variables, which define a rectangle
    in which the plot lies. Another important parameter is the
    IndependentVariables ivar, which tells the instance how to interpret
    the field data (independent variables as the rows or columns of the
    field). There are also many other instance variables that control the
    look of the plot includes its title, attributes, number of ticks on
    the axes, etc.
    
    Set the text property/attributes of the title and the labels through
    the vtkTextProperty objects associated to this actor.
    
    @warning
    Field data is not necessarily "rectangular" in shape. In these cases,
    some of the data may not be plotted.
    
    @warning
    Field data can contain non-numeric arrays (i.e. arrays not subclasses
    of vtkDataArray). Such arrays are skipped.
    
    @warning
    The early implementation lacks many features that could be added in
    the future. This includes the ability to "brush" data (choose regions
    along an axis and highlight any points/lines passing through the
    region); efficiency is really bad; more control over the properties
    of the plot (separate properties for each axes,title,etc.; and using
    the labels found in the field to label each of the axes.
    
    @sa
    vtkAxisActor3D can be used to create axes in world coordinate space.
    vtkActor2D vtkTextMapper vtkPolyDataMapper2D vtkScalarBarActor
    vtkCoordinate vtkTextProperty
    """
    def GetIndependentVariables(self):
        """
        V.GetIndependentVariables() -> int
        C++: virtual int GetIndependentVariables()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def GetIndependentVariablesMaxValue(self):
        """
        V.GetIndependentVariablesMaxValue() -> int
        C++: virtual int GetIndependentVariablesMaxValue()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def GetIndependentVariablesMinValue(self):
        """
        V.GetIndependentVariablesMinValue() -> int
        C++: virtual int GetIndependentVariablesMinValue()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataObject
        C++: vtkDataObject *GetInput()
        
        Remove a dataset from the list of data to append.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Set/Get the format with which to print the labels on the axes.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Set/Get the labels text property.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLabels(self):
        """
        V.GetNumberOfLabels() -> int
        C++: virtual int GetNumberOfLabels()
        
        Set/Get the number of annotation labels to show along each axis.
        This values is a suggestion: the number of labels may vary
        depending on the particulars of the data.
        """
        ...
    
    def GetNumberOfLabelsMaxValue(self):
        """
        V.GetNumberOfLabelsMaxValue() -> int
        C++: virtual int GetNumberOfLabelsMaxValue()
        
        Set/Get the number of annotation labels to show along each axis.
        This values is a suggestion: the number of labels may vary
        depending on the particulars of the data.
        """
        ...
    
    def GetNumberOfLabelsMinValue(self):
        """
        V.GetNumberOfLabelsMinValue() -> int
        C++: virtual int GetNumberOfLabelsMinValue()
        
        Set/Get the number of annotation labels to show along each axis.
        This values is a suggestion: the number of labels may vary
        depending on the particulars of the data.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the parallel coordinates plot.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the title text property.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParallelCoordinatesActor
        C++: vtkParallelCoordinatesActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Draw the parallel coordinates plot.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Draw the parallel coordinates plot.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the parallel coordinates plot.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParallelCoordinatesActor
        C++: static vtkParallelCoordinatesActor *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetIndependentVariables(self, p_int):
        """
        V.SetIndependentVariables(int)
        C++: virtual void SetIndependentVariables(int _arg)
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def SetIndependentVariablesToColumns(self):
        """
        V.SetIndependentVariablesToColumns()
        C++: void SetIndependentVariablesToColumns()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def SetIndependentVariablesToRows(self):
        """
        V.SetIndependentVariablesToRows()
        C++: void SetIndependentVariablesToRows()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *)
        
        Set the input to the parallel coordinates actor. Creates a
        pipeline connection.
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: virtual void SetInputData(vtkDataObject *)
        
        Set the input to the parallel coordinates actor. Does not create
        a pipeline connection.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on the axes.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the labels text property.
        """
        ...
    
    def SetNumberOfLabels(self, p_int):
        """
        V.SetNumberOfLabels(int)
        C++: virtual void SetNumberOfLabels(int _arg)
        
        Set/Get the number of annotation labels to show along each axis.
        This values is a suggestion: the number of labels may vary
        depending on the particulars of the data.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set/Get the title of the parallel coordinates plot.
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPieChartActor(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkPieChartActor - create a pie chart from an array
    
    Superclass: vtkActor2D
    
    vtkPieChartActor generates a pie chart from an array of numbers
    defined in field data (a vtkDataObject). To use this class, you must
    specify an input data object. You'll probably also want to specify
    the position of the plot be setting the Position and Position2
    instance variables, which define a rectangle in which the plot lies. 
    There are also many other instance variables that control the look of
    the plot includes its title, and legend.
    
    Set the text property/attributes of the title and the labels through
    the vtkTextProperty objects associated with these components.
    
    @sa
    vtkParallelCoordinatesActor vtkXYPlotActor2D vtkSpiderPlotActor
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkDataObject
        C++: virtual vtkDataObject *GetInput()
        
        Get the input data object to this actor.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Set/Get the labels text property. This controls the appearance of
        all pie piece labels.
        """
        ...
    
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> int
        C++: virtual vtkTypeBool GetLabelVisibility()
        
        Enable/Disable the display of pie piece labels.
        """
        ...
    
    def GetLegendActor(self):
        """
        V.GetLegendActor() -> vtkLegendBoxActor
        C++: virtual vtkLegendBoxActor *GetLegendActor()
        
        Retrieve handles to the legend box. This is useful if you would
        like to manually control the legend appearance.
        """
        ...
    
    def GetLegendVisibility(self):
        """
        V.GetLegendVisibility() -> int
        C++: virtual vtkTypeBool GetLegendVisibility()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetPieceColor(self, p_int):
        """
        V.GetPieceColor(int) -> (float, ...)
        C++: double *GetPieceColor(int i)
        
        Specify colors for each piece of pie. If not specified, they are
        automatically generated.
        """
        ...
    
    def GetPieceLabel(self, p_int):
        """
        V.GetPieceLabel(int) -> string
        C++: const char *GetPieceLabel(int i)
        
        Specify the names for each piece of pie.  not specified, then an
        integer number is automatically generated.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the pie chart.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the title text property. The property controls the
        appearance of the plot title.
        """
        ...
    
    def GetTitleVisibility(self):
        """
        V.GetTitleVisibility() -> int
        C++: virtual vtkTypeBool GetTitleVisibility()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        
        Enable/Disable the display of pie piece labels.
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        
        Enable/Disable the display of pie piece labels.
        """
        ...
    
    def LegendVisibilityOff(self):
        """
        V.LegendVisibilityOff()
        C++: virtual void LegendVisibilityOff()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def LegendVisibilityOn(self):
        """
        V.LegendVisibilityOn()
        C++: virtual void LegendVisibilityOn()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPieChartActor
        C++: vtkPieChartActor *NewInstance()
        
        Standard methods for type information and printing.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Draw the pie plot.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Draw the pie plot.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the pie plot.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPieChartActor
        C++: static vtkPieChartActor *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for type information and printing.
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *)
        
        Set the input to the pie chart actor. SetInputData() does not
        connect the pipeline whereas SetInputConnection() does.
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: virtual void SetInputData(vtkDataObject *)
        
        Set the input to the pie chart actor. SetInputData() does not
        connect the pipeline whereas SetInputConnection() does.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the labels text property. This controls the appearance of
        all pie piece labels.
        """
        ...
    
    def SetLabelVisibility(self, p_int):
        """
        V.SetLabelVisibility(int)
        C++: virtual void SetLabelVisibility(vtkTypeBool _arg)
        
        Enable/Disable the display of pie piece labels.
        """
        ...
    
    def SetLegendVisibility(self, p_int):
        """
        V.SetLegendVisibility(int)
        C++: virtual void SetLegendVisibility(vtkTypeBool _arg)
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def SetPieceColor(self, p_int, p_float, p_float_1, p_float_2):
        """
        V.SetPieceColor(int, float, float, float)
        C++: void SetPieceColor(int i, double r, double g, double b)
        V.SetPieceColor(int, (float, float, float))
        C++: void SetPieceColor(int i, const double color[3])
        
        Specify colors for each piece of pie. If not specified, they are
        automatically generated.
        """
        ...
    
    def SetPieceLabel(self, p_int, string):
        """
        V.SetPieceLabel(int, string)
        C++: void SetPieceLabel(const int i, const char *)
        
        Specify the names for each piece of pie.  not specified, then an
        integer number is automatically generated.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set/Get the title of the pie chart.
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property. The property controls the
        appearance of the plot title.
        """
        ...
    
    def SetTitleVisibility(self, p_int):
        """
        V.SetTitleVisibility(int)
        C++: virtual void SetTitleVisibility(vtkTypeBool _arg)
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def TitleVisibilityOff(self):
        """
        V.TitleVisibilityOff()
        C++: virtual void TitleVisibilityOff()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def TitleVisibilityOn(self):
        """
        V.TitleVisibilityOn()
        C++: virtual void TitleVisibilityOn()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPolarAxesActor(__vtkmodules_vtkRenderingCore.vtkActor):
    """
    vtkPolarAxesActor - create an actor of a polar axes -
    
    Superclass: vtkActor
    
    vtkPolarAxesActor is a composite actor that draws polar axes in a
    specified plane for a give pole. Currently the plane has to be the xy
    plane.
    
    @par Thanks: This class was written by Philippe Pebay, Kitware SAS
    2011. This work was supported by CEA/DIF - Commissariat a l'Energie
    Atomique, Centre DAM Ile-De-France, BP12, F-91297 Arpajon, France.
    
    @sa
    vtkActor vtkAxisActor vtkPolarAxesActor
    """
    def ArcMinorTickVisibilityOff(self):
        """
        V.ArcMinorTickVisibilityOff()
        C++: virtual void ArcMinorTickVisibilityOff()
        
        Turn on and off the visibility of minor ticks on the last arc.
        """
        ...
    
    def ArcMinorTickVisibilityOn(self):
        """
        V.ArcMinorTickVisibilityOn()
        C++: virtual void ArcMinorTickVisibilityOn()
        
        Turn on and off the visibility of minor ticks on the last arc.
        """
        ...
    
    def ArcTicksOriginToPolarAxisOff(self):
        """
        V.ArcTicksOriginToPolarAxisOff()
        C++: virtual void ArcTicksOriginToPolarAxisOff()
        
        If On, the ticks are drawn from the angle of the polarAxis (i.e.
        this->MinimalRadius) and continue counterclockwise with the step
        DeltaAngle Major/Minor. if Off, the start angle is 0.0, i.e. the
        angle on the major radius of the ellipse.
        """
        ...
    
    def ArcTicksOriginToPolarAxisOn(self):
        """
        V.ArcTicksOriginToPolarAxisOn()
        C++: virtual void ArcTicksOriginToPolarAxisOn()
        
        If On, the ticks are drawn from the angle of the polarAxis (i.e.
        this->MinimalRadius) and continue counterclockwise with the step
        DeltaAngle Major/Minor. if Off, the start angle is 0.0, i.e. the
        angle on the major radius of the ellipse.
        """
        ...
    
    def ArcTickVisibilityOff(self):
        """
        V.ArcTickVisibilityOff()
        C++: virtual void ArcTickVisibilityOff()
        
        Turn on and off the visibility of major ticks on the last arc.
        """
        ...
    
    def ArcTickVisibilityOn(self):
        """
        V.ArcTickVisibilityOn()
        C++: virtual void ArcTickVisibilityOn()
        
        Turn on and off the visibility of major ticks on the last arc.
        """
        ...
    
    def AutoSubdividePolarAxisOff(self):
        """
        V.AutoSubdividePolarAxisOff()
        C++: virtual void AutoSubdividePolarAxisOff()
        
        Set/Get whether the number of polar axis ticks and arcs should be
        automatically calculated Default: true
        """
        ...
    
    def AutoSubdividePolarAxisOn(self):
        """
        V.AutoSubdividePolarAxisOn()
        C++: virtual void AutoSubdividePolarAxisOn()
        
        Set/Get whether the number of polar axis ticks and arcs should be
        automatically calculated Default: true
        """
        ...
    
    def AxisMinorTickVisibilityOff(self):
        """
        V.AxisMinorTickVisibilityOff()
        C++: virtual void AxisMinorTickVisibilityOff()
        
        Turn on and off the visibility of minor ticks on polar axis and
        last radial axis.
        """
        ...
    
    def AxisMinorTickVisibilityOn(self):
        """
        V.AxisMinorTickVisibilityOn()
        C++: virtual void AxisMinorTickVisibilityOn()
        
        Turn on and off the visibility of minor ticks on polar axis and
        last radial axis.
        """
        ...
    
    def AxisTickVisibilityOff(self):
        """
        V.AxisTickVisibilityOff()
        C++: virtual void AxisTickVisibilityOff()
        
        Turn on and off the visibility of major ticks on polar axis and
        last radial axis.
        """
        ...
    
    def AxisTickVisibilityOn(self):
        """
        V.AxisTickVisibilityOn()
        C++: virtual void AxisTickVisibilityOn()
        
        Turn on and off the visibility of major ticks on polar axis and
        last radial axis.
        """
        ...
    
    def DrawPolarArcsGridlinesOff(self):
        """
        V.DrawPolarArcsGridlinesOff()
        C++: virtual void DrawPolarArcsGridlinesOff()
        
        Turn on and off the visibility of inner polar arcs grid lines
        """
        ...
    
    def DrawPolarArcsGridlinesOn(self):
        """
        V.DrawPolarArcsGridlinesOn()
        C++: virtual void DrawPolarArcsGridlinesOn()
        
        Turn on and off the visibility of inner polar arcs grid lines
        """
        ...
    
    def DrawRadialGridlinesOff(self):
        """
        V.DrawRadialGridlinesOff()
        C++: virtual void DrawRadialGridlinesOff()
        
        Turn on and off the visibility of inner radial grid lines
        """
        ...
    
    def DrawRadialGridlinesOn(self):
        """
        V.DrawRadialGridlinesOn()
        C++: virtual void DrawRadialGridlinesOn()
        
        Turn on and off the visibility of inner radial grid lines
        """
        ...
    
    def GetArcMajorTickSize(self):
        """
        V.GetArcMajorTickSize() -> float
        C++: virtual double GetArcMajorTickSize()
        
        Set/Get the size of the major ticks on the last arc.
        """
        ...
    
    def GetArcMajorTickThickness(self):
        """
        V.GetArcMajorTickThickness() -> float
        C++: virtual double GetArcMajorTickThickness()
        
        Set/Get the size of the thickness of the last arc ticks
        """
        ...
    
    def GetArcMinorTickVisibility(self):
        """
        V.GetArcMinorTickVisibility() -> int
        C++: virtual vtkTypeBool GetArcMinorTickVisibility()
        
        Turn on and off the visibility of minor ticks on the last arc.
        """
        ...
    
    def GetArcTickRatioSize(self):
        """
        V.GetArcTickRatioSize() -> float
        C++: virtual double GetArcTickRatioSize()
        
        Set/Get the ratio between major and minor Arc ticks size
        """
        ...
    
    def GetArcTickRatioThickness(self):
        """
        V.GetArcTickRatioThickness() -> float
        C++: virtual double GetArcTickRatioThickness()
        
        Set/Get the ratio between major and minor Arc ticks thickness
        """
        ...
    
    def GetArcTicksOriginToPolarAxis(self):
        """
        V.GetArcTicksOriginToPolarAxis() -> int
        C++: virtual vtkTypeBool GetArcTicksOriginToPolarAxis()
        
        If On, the ticks are drawn from the angle of the polarAxis (i.e.
        this->MinimalRadius) and continue counterclockwise with the step
        DeltaAngle Major/Minor. if Off, the start angle is 0.0, i.e. the
        angle on the major radius of the ellipse.
        """
        ...
    
    def GetArcTickVisibility(self):
        """
        V.GetArcTickVisibility() -> int
        C++: virtual vtkTypeBool GetArcTickVisibility()
        
        Turn on and off the visibility of major ticks on the last arc.
        """
        ...
    
    def GetAutoSubdividePolarAxis(self):
        """
        V.GetAutoSubdividePolarAxis() -> bool
        C++: virtual bool GetAutoSubdividePolarAxis()
        
        Set/Get whether the number of polar axis ticks and arcs should be
        automatically calculated Default: true
        """
        ...
    
    def GetAxisMinorTickVisibility(self):
        """
        V.GetAxisMinorTickVisibility() -> int
        C++: virtual vtkTypeBool GetAxisMinorTickVisibility()
        
        Turn on and off the visibility of minor ticks on polar axis and
        last radial axis.
        """
        ...
    
    def GetAxisTickVisibility(self):
        """
        V.GetAxisTickVisibility() -> int
        C++: virtual vtkTypeBool GetAxisTickVisibility()
        
        Turn on and off the visibility of major ticks on polar axis and
        last radial axis.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds(float, float, float, float, float, float)
        C++: void GetBounds(double &xmin, double &xmax, double &ymin,
            double &ymax, double &zmin, double &zmax)
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Explicitly specify the region in space around which to draw the
        bounds. The bounds are used only when no Input or Prop is
        specified. The bounds are specified according to (xmin,xmax,
        ymin,ymax, zmin,zmax), making sure that the min's are less than the
        max's.
        """
        ...
    
    def GetCamera(self):
        """
        V.GetCamera() -> vtkCamera
        C++: virtual vtkCamera *GetCamera()
        
        Set/Get the camera to perform scaling and translation of the
        vtkPolarAxesActor.
        """
        ...
    
    def GetDeltaAngleMajor(self):
        """
        V.GetDeltaAngleMajor() -> float
        C++: virtual double GetDeltaAngleMajor()
        
        Set/Get the angle between 2 major ticks on the last arc.
        """
        ...
    
    def GetDeltaAngleMinor(self):
        """
        V.GetDeltaAngleMinor() -> float
        C++: virtual double GetDeltaAngleMinor()
        
        Set/Get the angle between 2 minor ticks on the last arc.
        """
        ...
    
    def GetDeltaAngleRadialAxes(self):
        """
        V.GetDeltaAngleRadialAxes() -> float
        C++: virtual double GetDeltaAngleRadialAxes()
        
        Set/Get the angle between 2 radial axes.
        """
        ...
    
    def GetDeltaRangeMajor(self):
        """
        V.GetDeltaRangeMajor() -> float
        C++: virtual double GetDeltaRangeMajor()
        
        Set/Get the step between 2 major ticks, in range value (values
        displayed on the axis).
        """
        ...
    
    def GetDeltaRangeMinor(self):
        """
        V.GetDeltaRangeMinor() -> float
        C++: virtual double GetDeltaRangeMinor()
        
        Set/Get the step between 2 minor ticks, in range value (values
        displayed on the axis).
        """
        ...
    
    def GetDistanceLODThreshold(self):
        """
        V.GetDistanceLODThreshold() -> float
        C++: virtual double GetDistanceLODThreshold()
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetDistanceLODThresholdMaxValue(self):
        """
        V.GetDistanceLODThresholdMaxValue() -> float
        C++: virtual double GetDistanceLODThresholdMaxValue()
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetDistanceLODThresholdMinValue(self):
        """
        V.GetDistanceLODThresholdMinValue() -> float
        C++: virtual double GetDistanceLODThresholdMinValue()
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetDrawPolarArcsGridlines(self):
        """
        V.GetDrawPolarArcsGridlines() -> int
        C++: virtual vtkTypeBool GetDrawPolarArcsGridlines()
        
        Turn on and off the visibility of inner polar arcs grid lines
        """
        ...
    
    def GetDrawRadialGridlines(self):
        """
        V.GetDrawRadialGridlines() -> int
        C++: virtual vtkTypeBool GetDrawRadialGridlines()
        
        Turn on and off the visibility of inner radial grid lines
        """
        ...
    
    def GetEnableDistanceLOD(self):
        """
        V.GetEnableDistanceLOD() -> int
        C++: virtual int GetEnableDistanceLOD()
        
        Enable and disable the use of distance based LOD for titles and
        labels.
        """
        ...
    
    def GetEnableViewAngleLOD(self):
        """
        V.GetEnableViewAngleLOD() -> int
        C++: virtual int GetEnableViewAngleLOD()
        
        Enable and disable the use of view angle based LOD for titles and
        labels.
        """
        ...
    
    def GetExponentLocation(self):
        """
        V.GetExponentLocation() -> int
        C++: virtual int GetExponentLocation()
        
        Get/Set the location of the exponent (if any) of the polar axis
        values. Possible location: VTK_EXPONENT_BOTTOM,
        VTK_EXPONENT_EXTERN, VTK_EXPONENT_LABELS
        """
        ...
    
    def GetExponentLocationMaxValue(self):
        """
        V.GetExponentLocationMaxValue() -> int
        C++: virtual int GetExponentLocationMaxValue()
        
        Get/Set the location of the exponent (if any) of the polar axis
        values. Possible location: VTK_EXPONENT_BOTTOM,
        VTK_EXPONENT_EXTERN, VTK_EXPONENT_LABELS
        """
        ...
    
    def GetExponentLocationMinValue(self):
        """
        V.GetExponentLocationMinValue() -> int
        C++: virtual int GetExponentLocationMinValue()
        
        Get/Set the location of the exponent (if any) of the polar axis
        values. Possible location: VTK_EXPONENT_BOTTOM,
        VTK_EXPONENT_EXTERN, VTK_EXPONENT_LABELS
        """
        ...
    
    def GetLastAxisTickRatioSize(self):
        """
        V.GetLastAxisTickRatioSize() -> float
        C++: virtual double GetLastAxisTickRatioSize()
        
        Set/Get the ratio between major and minor Last Radial axis ticks
        size
        """
        ...
    
    def GetLastAxisTickRatioThickness(self):
        """
        V.GetLastAxisTickRatioThickness() -> float
        C++: virtual double GetLastAxisTickRatioThickness()
        
        Set/Get the ratio between major and minor Last Radial axis ticks
        thickness
        """
        ...
    
    def GetLastRadialAxisMajorTickSize(self):
        """
        V.GetLastRadialAxisMajorTickSize() -> float
        C++: virtual double GetLastRadialAxisMajorTickSize()
        
        Set/Get the size of the major ticks on the last radial axis.
        """
        ...
    
    def GetLastRadialAxisMajorTickThickness(self):
        """
        V.GetLastRadialAxisMajorTickThickness() -> float
        C++: virtual double GetLastRadialAxisMajorTickThickness()
        
        Set/Get the size of the thickness of last radial axis ticks
        """
        ...
    
    def GetLastRadialAxisProperty(self):
        """
        V.GetLastRadialAxisProperty() -> vtkProperty
        C++: virtual vtkProperty *GetLastRadialAxisProperty()
        
        Get/Set last radial axis actor properties.
        """
        ...
    
    def GetLastRadialAxisTextProperty(self):
        """
        V.GetLastRadialAxisTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLastRadialAxisTextProperty()
        
        Set/Get the last radial axis text property.
        """
        ...
    
    def GetLog(self):
        """
        V.GetLog() -> bool
        C++: virtual bool GetLog()
        
        Enable/Disable log scale Default: false
        """
        ...
    
    def GetMaximumAngle(self):
        """
        V.GetMaximumAngle() -> float
        C++: virtual double GetMaximumAngle()
        
        Set/Get the maximum radius of the polar coordinates (in degrees).
        """
        ...
    
    def GetMaximumRadius(self):
        """
        V.GetMaximumRadius() -> float
        C++: virtual double GetMaximumRadius()
        
        Set/Get the maximum radius of the polar coordinates.
        """
        ...
    
    def GetMinimumAngle(self):
        """
        V.GetMinimumAngle() -> float
        C++: virtual double GetMinimumAngle()
        
        Set/Get the minimum radius of the polar coordinates (in degrees).
        """
        ...
    
    def GetMinimumRadius(self):
        """
        V.GetMinimumRadius() -> float
        C++: virtual double GetMinimumRadius()
        
        Set/Get the minimal radius of the polar coordinates.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPolarAxisTicks(self):
        """
        V.GetNumberOfPolarAxisTicks() -> int
        C++: int GetNumberOfPolarAxisTicks()
        
        Set/Get a number of ticks that one would like to display along
        polar axis NB: it modifies DeltaRangeMajor to correspond to this
        number
        """
        ...
    
    def GetPolarArcsProperty(self):
        """
        V.GetPolarArcsProperty() -> vtkProperty
        C++: vtkProperty *GetPolarArcsProperty()
        
        Get/Set principal polar arc actor property.
        """
        ...
    
    def GetPolarArcsVisibility(self):
        """
        V.GetPolarArcsVisibility() -> int
        C++: virtual vtkTypeBool GetPolarArcsVisibility()
        
        Turn on and off the visibility of arcs for polar axis.
        """
        ...
    
    def GetPolarAxisLabelTextProperty(self):
        """
        V.GetPolarAxisLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetPolarAxisLabelTextProperty()
        
        Set/Get the polar axis labels text property.
        """
        ...
    
    def GetPolarAxisMajorTickSize(self):
        """
        V.GetPolarAxisMajorTickSize() -> float
        C++: virtual double GetPolarAxisMajorTickSize()
        
        Set/Get the size of the major ticks on the polar axis.
        """
        ...
    
    def GetPolarAxisMajorTickThickness(self):
        """
        V.GetPolarAxisMajorTickThickness() -> float
        C++: virtual double GetPolarAxisMajorTickThickness()
        
        Set/Get the size of the thickness of polar axis ticks
        """
        ...
    
    def GetPolarAxisProperty(self):
        """
        V.GetPolarAxisProperty() -> vtkProperty
        C++: virtual vtkProperty *GetPolarAxisProperty()
        
        Get/Set polar axis actor properties.
        """
        ...
    
    def GetPolarAxisTickRatioSize(self):
        """
        V.GetPolarAxisTickRatioSize() -> float
        C++: virtual double GetPolarAxisTickRatioSize()
        
        Set/Get the ratio between major and minor Polar Axis ticks size
        """
        ...
    
    def GetPolarAxisTickRatioThickness(self):
        """
        V.GetPolarAxisTickRatioThickness() -> float
        C++: virtual double GetPolarAxisTickRatioThickness()
        
        Set/Get the ratio between major and minor Polar Axis ticks
        thickness
        """
        ...
    
    def GetPolarAxisTitle(self):
        """
        V.GetPolarAxisTitle() -> string
        C++: virtual char *GetPolarAxisTitle()
        
        Set/Get the labels for the polar axis. Default: "Radial
        Distance".
        """
        ...
    
    def GetPolarAxisTitleLocation(self):
        """
        V.GetPolarAxisTitleLocation() -> int
        C++: virtual int GetPolarAxisTitleLocation()
        
        Get/Set the alignment of the polar axes title related to the
        axis. Possible Alignment: VTKTITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def GetPolarAxisTitleLocationMaxValue(self):
        """
        V.GetPolarAxisTitleLocationMaxValue() -> int
        C++: virtual int GetPolarAxisTitleLocationMaxValue()
        
        Get/Set the alignment of the polar axes title related to the
        axis. Possible Alignment: VTKTITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def GetPolarAxisTitleLocationMinValue(self):
        """
        V.GetPolarAxisTitleLocationMinValue() -> int
        C++: virtual int GetPolarAxisTitleLocationMinValue()
        
        Get/Set the alignment of the polar axes title related to the
        axis. Possible Alignment: VTKTITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def GetPolarAxisTitleTextProperty(self):
        """
        V.GetPolarAxisTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetPolarAxisTitleTextProperty()
        
        Set/Get the polar axis title text property.
        """
        ...
    
    def GetPolarAxisVisibility(self):
        """
        V.GetPolarAxisVisibility() -> int
        C++: virtual vtkTypeBool GetPolarAxisVisibility()
        
        Turn on and off the visibility of the polar axis.
        """
        ...
    
    def GetPolarLabelFormat(self):
        """
        V.GetPolarLabelFormat() -> string
        C++: virtual char *GetPolarLabelFormat()
        
        Set/Get the format with which to print the polar axis labels.
        """
        ...
    
    def GetPolarLabelVisibility(self):
        """
        V.GetPolarLabelVisibility() -> int
        C++: virtual vtkTypeBool GetPolarLabelVisibility()
        
        Turn on and off the visibility of labels for polar axis.
        """
        ...
    
    def GetPolarTickVisibility(self):
        """
        V.GetPolarTickVisibility() -> int
        C++: virtual vtkTypeBool GetPolarTickVisibility()
        
        Turn on and off the overall visibility of ticks.
        """
        ...
    
    def GetPolarTitleVisibility(self):
        """
        V.GetPolarTitleVisibility() -> int
        C++: virtual vtkTypeBool GetPolarTitleVisibility()
        
        Turn on and off the visibility of titles for polar axis.
        """
        ...
    
    def GetPole(self):
        """
        V.GetPole() -> (float, float, float)
        C++: virtual double *GetPole()
        
        Explicitly specify the coordinate of the pole.
        """
        ...
    
    def GetRadialAngleFormat(self):
        """
        V.GetRadialAngleFormat() -> string
        C++: virtual char *GetRadialAngleFormat()
        
        String to format angle values displayed on the radial axes.
        """
        ...
    
    def GetRadialAxesOriginToPolarAxis(self):
        """
        V.GetRadialAxesOriginToPolarAxis() -> int
        C++: virtual vtkTypeBool GetRadialAxesOriginToPolarAxis()
        
        If On, the radial axes are drawn from the angle of the polarAxis
        (i.e. this->MinimalRadius) and continue counterclockwise with the
        step DeltaAngleRadialAxes. if Off, the start angle is 0.0, i.e.
        the angle on the major radius of the ellipse.
        """
        ...
    
    def GetRadialAxesVisibility(self):
        """
        V.GetRadialAxesVisibility() -> int
        C++: virtual vtkTypeBool GetRadialAxesVisibility()
        
        Turn on and off the visibility of non-polar radial axes.
        """
        ...
    
    def GetRadialAxisTitleLocation(self):
        """
        V.GetRadialAxisTitleLocation() -> int
        C++: virtual int GetRadialAxisTitleLocation()
        
        Get/Set the alignment of the radial axes title related to the
        axis. Possible Alignment: VTK_TITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def GetRadialAxisTitleLocationMaxValue(self):
        """
        V.GetRadialAxisTitleLocationMaxValue() -> int
        C++: virtual int GetRadialAxisTitleLocationMaxValue()
        
        Get/Set the alignment of the radial axes title related to the
        axis. Possible Alignment: VTK_TITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def GetRadialAxisTitleLocationMinValue(self):
        """
        V.GetRadialAxisTitleLocationMinValue() -> int
        C++: virtual int GetRadialAxisTitleLocationMinValue()
        
        Get/Set the alignment of the radial axes title related to the
        axis. Possible Alignment: VTK_TITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def GetRadialTitleVisibility(self):
        """
        V.GetRadialTitleVisibility() -> int
        C++: virtual vtkTypeBool GetRadialTitleVisibility()
        
        Turn on and off the visibility of titles for non-polar radial
        axes.
        """
        ...
    
    def GetRadialUnits(self):
        """
        V.GetRadialUnits() -> bool
        C++: virtual bool GetRadialUnits()
        
        Default: true
        """
        ...
    
    def GetRange(self):
        """
        V.GetRange() -> (float, float)
        C++: virtual double *GetRange()
        
        Define the range values displayed on the polar Axis.
        """
        ...
    
    def GetRatio(self):
        """
        V.GetRatio() -> float
        C++: virtual double GetRatio()
        
        Ratio
        """
        ...
    
    def GetRatioMaxValue(self):
        """
        V.GetRatioMaxValue() -> float
        C++: virtual double GetRatioMaxValue()
        
        Ratio
        """
        ...
    
    def GetRatioMinValue(self):
        """
        V.GetRatioMinValue() -> float
        C++: virtual double GetRatioMinValue()
        
        Ratio
        """
        ...
    
    def GetRequestedNumberOfRadialAxes(self):
        """
        V.GetRequestedNumberOfRadialAxes() -> int
        C++: virtual vtkIdType GetRequestedNumberOfRadialAxes()
        
        Gets/Sets the number of radial axes
        """
        ...
    
    def GetRequestedNumberOfRadialAxesMaxValue(self):
        """
        V.GetRequestedNumberOfRadialAxesMaxValue() -> int
        C++: virtual vtkIdType GetRequestedNumberOfRadialAxesMaxValue()
        
        Gets/Sets the number of radial axes
        """
        ...
    
    def GetRequestedNumberOfRadialAxesMinValue(self):
        """
        V.GetRequestedNumberOfRadialAxesMinValue() -> int
        C++: virtual vtkIdType GetRequestedNumberOfRadialAxesMinValue()
        
        Gets/Sets the number of radial axes
        """
        ...
    
    def GetScreenSize(self):
        """
        V.GetScreenSize() -> float
        C++: virtual double GetScreenSize()
        
        Explicitly specify the screen size of title and label text.
        ScreenSize determines the size of the text in terms of screen
        pixels. Default: 10.0.
        """
        ...
    
    def GetSecondaryPolarArcsProperty(self):
        """
        V.GetSecondaryPolarArcsProperty() -> vtkProperty
        C++: vtkProperty *GetSecondaryPolarArcsProperty()
        
        Get/Set secondary polar arcs actors property.
        """
        ...
    
    def GetSecondaryRadialAxesProperty(self):
        """
        V.GetSecondaryRadialAxesProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSecondaryRadialAxesProperty()
        
        Get/Set secondary radial axes actors properties.
        """
        ...
    
    def GetSecondaryRadialAxesTextProperty(self):
        """
        V.GetSecondaryRadialAxesTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetSecondaryRadialAxesTextProperty()
        
        Set/Get the secondary radial axes text property.
        """
        ...
    
    def GetSmallestVisiblePolarAngle(self):
        """
        V.GetSmallestVisiblePolarAngle() -> float
        C++: virtual double GetSmallestVisiblePolarAngle()
        
        Set/Get the minimum radial angle distinguishable from polar axis
        NB: This is used only when polar axis is visible Default: 0.5
        """
        ...
    
    def GetSmallestVisiblePolarAngleMaxValue(self):
        """
        V.GetSmallestVisiblePolarAngleMaxValue() -> float
        C++: virtual double GetSmallestVisiblePolarAngleMaxValue()
        
        Set/Get the minimum radial angle distinguishable from polar axis
        NB: This is used only when polar axis is visible Default: 0.5
        """
        ...
    
    def GetSmallestVisiblePolarAngleMinValue(self):
        """
        V.GetSmallestVisiblePolarAngleMinValue() -> float
        C++: virtual double GetSmallestVisiblePolarAngleMinValue()
        
        Set/Get the minimum radial angle distinguishable from polar axis
        NB: This is used only when polar axis is visible Default: 0.5
        """
        ...
    
    def GetTickLocation(self):
        """
        V.GetTickLocation() -> int
        C++: virtual int GetTickLocation()
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def GetTickLocationMaxValue(self):
        """
        V.GetTickLocationMaxValue() -> int
        C++: virtual int GetTickLocationMaxValue()
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def GetTickLocationMinValue(self):
        """
        V.GetTickLocationMinValue() -> int
        C++: virtual int GetTickLocationMinValue()
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def GetUse2DMode(self):
        """
        V.GetUse2DMode() -> int
        C++: int GetUse2DMode()
        
        Enable/Disable labels 2D mode (always facing the camera).
        """
        ...
    
    def GetViewAngleLODThreshold(self):
        """
        V.GetViewAngleLODThreshold() -> float
        C++: virtual double GetViewAngleLODThreshold()
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetViewAngleLODThresholdMaxValue(self):
        """
        V.GetViewAngleLODThresholdMaxValue() -> float
        C++: virtual double GetViewAngleLODThresholdMaxValue()
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def GetViewAngleLODThresholdMinValue(self):
        """
        V.GetViewAngleLODThresholdMinValue() -> float
        C++: virtual double GetViewAngleLODThresholdMinValue()
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LogOff(self):
        """
        V.LogOff()
        C++: virtual void LogOff()
        
        Enable/Disable log scale Default: false
        """
        ...
    
    def LogOn(self):
        """
        V.LogOn()
        C++: virtual void LogOn()
        
        Enable/Disable log scale Default: false
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolarAxesActor
        C++: vtkPolarAxesActor *NewInstance()
        """
        ...
    
    def PolarArcsVisibilityOff(self):
        """
        V.PolarArcsVisibilityOff()
        C++: virtual void PolarArcsVisibilityOff()
        
        Turn on and off the visibility of arcs for polar axis.
        """
        ...
    
    def PolarArcsVisibilityOn(self):
        """
        V.PolarArcsVisibilityOn()
        C++: virtual void PolarArcsVisibilityOn()
        
        Turn on and off the visibility of arcs for polar axis.
        """
        ...
    
    def PolarAxisVisibilityOff(self):
        """
        V.PolarAxisVisibilityOff()
        C++: virtual void PolarAxisVisibilityOff()
        
        Turn on and off the visibility of the polar axis.
        """
        ...
    
    def PolarAxisVisibilityOn(self):
        """
        V.PolarAxisVisibilityOn()
        C++: virtual void PolarAxisVisibilityOn()
        
        Turn on and off the visibility of the polar axis.
        """
        ...
    
    def PolarLabelVisibilityOff(self):
        """
        V.PolarLabelVisibilityOff()
        C++: virtual void PolarLabelVisibilityOff()
        
        Turn on and off the visibility of labels for polar axis.
        """
        ...
    
    def PolarLabelVisibilityOn(self):
        """
        V.PolarLabelVisibilityOn()
        C++: virtual void PolarLabelVisibilityOn()
        
        Turn on and off the visibility of labels for polar axis.
        """
        ...
    
    def PolarTickVisibilityOff(self):
        """
        V.PolarTickVisibilityOff()
        C++: virtual void PolarTickVisibilityOff()
        
        Turn on and off the overall visibility of ticks.
        """
        ...
    
    def PolarTickVisibilityOn(self):
        """
        V.PolarTickVisibilityOn()
        C++: virtual void PolarTickVisibilityOn()
        
        Turn on and off the overall visibility of ticks.
        """
        ...
    
    def PolarTitleVisibilityOff(self):
        """
        V.PolarTitleVisibilityOff()
        C++: virtual void PolarTitleVisibilityOff()
        
        Turn on and off the visibility of titles for polar axis.
        """
        ...
    
    def PolarTitleVisibilityOn(self):
        """
        V.PolarTitleVisibilityOn()
        C++: virtual void PolarTitleVisibilityOn()
        
        Turn on and off the visibility of titles for polar axis.
        """
        ...
    
    def RadialAxesOriginToPolarAxisOff(self):
        """
        V.RadialAxesOriginToPolarAxisOff()
        C++: virtual void RadialAxesOriginToPolarAxisOff()
        
        If On, the radial axes are drawn from the angle of the polarAxis
        (i.e. this->MinimalRadius) and continue counterclockwise with the
        step DeltaAngleRadialAxes. if Off, the start angle is 0.0, i.e.
        the angle on the major radius of the ellipse.
        """
        ...
    
    def RadialAxesOriginToPolarAxisOn(self):
        """
        V.RadialAxesOriginToPolarAxisOn()
        C++: virtual void RadialAxesOriginToPolarAxisOn()
        
        If On, the radial axes are drawn from the angle of the polarAxis
        (i.e. this->MinimalRadius) and continue counterclockwise with the
        step DeltaAngleRadialAxes. if Off, the start angle is 0.0, i.e.
        the angle on the major radius of the ellipse.
        """
        ...
    
    def RadialAxesVisibilityOff(self):
        """
        V.RadialAxesVisibilityOff()
        C++: virtual void RadialAxesVisibilityOff()
        
        Turn on and off the visibility of non-polar radial axes.
        """
        ...
    
    def RadialAxesVisibilityOn(self):
        """
        V.RadialAxesVisibilityOn()
        C++: virtual void RadialAxesVisibilityOn()
        
        Turn on and off the visibility of non-polar radial axes.
        """
        ...
    
    def RadialTitleVisibilityOff(self):
        """
        V.RadialTitleVisibilityOff()
        C++: virtual void RadialTitleVisibilityOff()
        
        Turn on and off the visibility of titles for non-polar radial
        axes.
        """
        ...
    
    def RadialTitleVisibilityOn(self):
        """
        V.RadialTitleVisibilityOn()
        C++: virtual void RadialTitleVisibilityOn()
        
        Turn on and off the visibility of titles for non-polar radial
        axes.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Draw the polar axes
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Draw the polar axes
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the polar axes
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolarAxesActor
        C++: static vtkPolarAxesActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetArcMajorTickSize(self, p_float):
        """
        V.SetArcMajorTickSize(float)
        C++: virtual void SetArcMajorTickSize(double _arg)
        
        Set/Get the size of the major ticks on the last arc.
        """
        ...
    
    def SetArcMajorTickThickness(self, p_float):
        """
        V.SetArcMajorTickThickness(float)
        C++: virtual void SetArcMajorTickThickness(double _arg)
        
        Set/Get the size of the thickness of the last arc ticks
        """
        ...
    
    def SetArcMinorTickVisibility(self, p_int):
        """
        V.SetArcMinorTickVisibility(int)
        C++: virtual void SetArcMinorTickVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of minor ticks on the last arc.
        """
        ...
    
    def SetArcTickRatioSize(self, p_float):
        """
        V.SetArcTickRatioSize(float)
        C++: virtual void SetArcTickRatioSize(double _arg)
        
        Set/Get the ratio between major and minor Arc ticks size
        """
        ...
    
    def SetArcTickRatioThickness(self, p_float):
        """
        V.SetArcTickRatioThickness(float)
        C++: virtual void SetArcTickRatioThickness(double _arg)
        
        Set/Get the ratio between major and minor Arc ticks thickness
        """
        ...
    
    def SetArcTicksOriginToPolarAxis(self, p_int):
        """
        V.SetArcTicksOriginToPolarAxis(int)
        C++: virtual void SetArcTicksOriginToPolarAxis(vtkTypeBool _arg)
        
        If On, the ticks are drawn from the angle of the polarAxis (i.e.
        this->MinimalRadius) and continue counterclockwise with the step
        DeltaAngle Major/Minor. if Off, the start angle is 0.0, i.e. the
        angle on the major radius of the ellipse.
        """
        ...
    
    def SetArcTickVisibility(self, p_int):
        """
        V.SetArcTickVisibility(int)
        C++: virtual void SetArcTickVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of major ticks on the last arc.
        """
        ...
    
    def SetAutoSubdividePolarAxis(self, bool):
        """
        V.SetAutoSubdividePolarAxis(bool)
        C++: virtual void SetAutoSubdividePolarAxis(bool _arg)
        
        Set/Get whether the number of polar axis ticks and arcs should be
        automatically calculated Default: true
        """
        ...
    
    def SetAxisMinorTickVisibility(self, p_int):
        """
        V.SetAxisMinorTickVisibility(int)
        C++: virtual void SetAxisMinorTickVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of minor ticks on polar axis and
        last radial axis.
        """
        ...
    
    def SetAxisTickVisibility(self, p_int):
        """
        V.SetAxisTickVisibility(int)
        C++: virtual void SetAxisTickVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of major ticks on polar axis and
        last radial axis.
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Explicitly specify the region in space around which to draw the
        bounds. The bounds are used only when no Input or Prop is
        specified. The bounds are specified according to (xmin,xmax,
        ymin,ymax, zmin,zmax), making sure that the min's are less than the
        max's.
        """
        ...
    
    def SetCamera(self, vtkCamera):
        """
        V.SetCamera(vtkCamera)
        C++: virtual void SetCamera(vtkCamera *)
        
        Set/Get the camera to perform scaling and translation of the
        vtkPolarAxesActor.
        """
        ...
    
    def SetDeltaAngleMajor(self, p_float):
        """
        V.SetDeltaAngleMajor(float)
        C++: virtual void SetDeltaAngleMajor(double _arg)
        
        Set/Get the angle between 2 major ticks on the last arc.
        """
        ...
    
    def SetDeltaAngleMinor(self, p_float):
        """
        V.SetDeltaAngleMinor(float)
        C++: virtual void SetDeltaAngleMinor(double _arg)
        
        Set/Get the angle between 2 minor ticks on the last arc.
        """
        ...
    
    def SetDeltaAngleRadialAxes(self, p_float):
        """
        V.SetDeltaAngleRadialAxes(float)
        C++: virtual void SetDeltaAngleRadialAxes(double _arg)
        
        Set/Get the angle between 2 radial axes.
        """
        ...
    
    def SetDeltaRangeMajor(self, p_float):
        """
        V.SetDeltaRangeMajor(float)
        C++: virtual void SetDeltaRangeMajor(double _arg)
        
        Set/Get the step between 2 major ticks, in range value (values
        displayed on the axis).
        """
        ...
    
    def SetDeltaRangeMinor(self, p_float):
        """
        V.SetDeltaRangeMinor(float)
        C++: virtual void SetDeltaRangeMinor(double _arg)
        
        Set/Get the step between 2 minor ticks, in range value (values
        displayed on the axis).
        """
        ...
    
    def SetDistanceLODThreshold(self, p_float):
        """
        V.SetDistanceLODThreshold(float)
        C++: virtual void SetDistanceLODThreshold(double _arg)
        
        Set distance LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def SetDrawPolarArcsGridlines(self, p_int):
        """
        V.SetDrawPolarArcsGridlines(int)
        C++: virtual void SetDrawPolarArcsGridlines(vtkTypeBool _arg)
        
        Turn on and off the visibility of inner polar arcs grid lines
        """
        ...
    
    def SetDrawRadialGridlines(self, p_int):
        """
        V.SetDrawRadialGridlines(int)
        C++: virtual void SetDrawRadialGridlines(vtkTypeBool _arg)
        
        Turn on and off the visibility of inner radial grid lines
        """
        ...
    
    def SetEnableDistanceLOD(self, p_int):
        """
        V.SetEnableDistanceLOD(int)
        C++: virtual void SetEnableDistanceLOD(int _arg)
        
        Enable and disable the use of distance based LOD for titles and
        labels.
        """
        ...
    
    def SetEnableViewAngleLOD(self, p_int):
        """
        V.SetEnableViewAngleLOD(int)
        C++: virtual void SetEnableViewAngleLOD(int _arg)
        
        Enable and disable the use of view angle based LOD for titles and
        labels.
        """
        ...
    
    def SetExponentLocation(self, p_int):
        """
        V.SetExponentLocation(int)
        C++: virtual void SetExponentLocation(int _arg)
        
        Get/Set the location of the exponent (if any) of the polar axis
        values. Possible location: VTK_EXPONENT_BOTTOM,
        VTK_EXPONENT_EXTERN, VTK_EXPONENT_LABELS
        """
        ...
    
    def SetLastAxisTickRatioSize(self, p_float):
        """
        V.SetLastAxisTickRatioSize(float)
        C++: virtual void SetLastAxisTickRatioSize(double _arg)
        
        Set/Get the ratio between major and minor Last Radial axis ticks
        size
        """
        ...
    
    def SetLastAxisTickRatioThickness(self, p_float):
        """
        V.SetLastAxisTickRatioThickness(float)
        C++: virtual void SetLastAxisTickRatioThickness(double _arg)
        
        Set/Get the ratio between major and minor Last Radial axis ticks
        thickness
        """
        ...
    
    def SetLastRadialAxisMajorTickSize(self, p_float):
        """
        V.SetLastRadialAxisMajorTickSize(float)
        C++: virtual void SetLastRadialAxisMajorTickSize(double _arg)
        
        Set/Get the size of the major ticks on the last radial axis.
        """
        ...
    
    def SetLastRadialAxisMajorTickThickness(self, p_float):
        """
        V.SetLastRadialAxisMajorTickThickness(float)
        C++: virtual void SetLastRadialAxisMajorTickThickness(double _arg)
        
        Set/Get the size of the thickness of last radial axis ticks
        """
        ...
    
    def SetLastRadialAxisProperty(self, vtkProperty):
        """
        V.SetLastRadialAxisProperty(vtkProperty)
        C++: virtual void SetLastRadialAxisProperty(vtkProperty *p)
        
        Get/Set last radial axis actor properties.
        """
        ...
    
    def SetLastRadialAxisTextProperty(self, vtkTextProperty):
        """
        V.SetLastRadialAxisTextProperty(vtkTextProperty)
        C++: virtual void SetLastRadialAxisTextProperty(
            vtkTextProperty *p)
        
        Set/Get the last radial axis text property.
        """
        ...
    
    def SetLog(self, bool):
        """
        V.SetLog(bool)
        C++: virtual void SetLog(bool _arg)
        
        Enable/Disable log scale Default: false
        """
        ...
    
    def SetMaximumAngle(self, p_float):
        """
        V.SetMaximumAngle(float)
        C++: virtual void SetMaximumAngle(double)
        
        Set/Get the maximum radius of the polar coordinates (in degrees).
        """
        ...
    
    def SetMaximumRadius(self, p_float):
        """
        V.SetMaximumRadius(float)
        C++: virtual void SetMaximumRadius(double)
        
        Set/Get the maximum radius of the polar coordinates.
        """
        ...
    
    def SetMinimumAngle(self, p_float):
        """
        V.SetMinimumAngle(float)
        C++: virtual void SetMinimumAngle(double)
        
        Set/Get the minimum radius of the polar coordinates (in degrees).
        """
        ...
    
    def SetMinimumRadius(self, p_float):
        """
        V.SetMinimumRadius(float)
        C++: virtual void SetMinimumRadius(double)
        
        Set/Get the minimal radius of the polar coordinates.
        """
        ...
    
    def SetNumberOfPolarAxisTicks(self, p_int):
        """
        V.SetNumberOfPolarAxisTicks(int)
        C++: virtual void SetNumberOfPolarAxisTicks(int)
        
        Set/Get a number of ticks that one would like to display along
        polar axis NB: it modifies DeltaRangeMajor to correspond to this
        number
        """
        ...
    
    def SetPolarArcsProperty(self, vtkProperty):
        """
        V.SetPolarArcsProperty(vtkProperty)
        C++: virtual void SetPolarArcsProperty(vtkProperty *p)
        
        Get/Set principal polar arc actor property.
        """
        ...
    
    def SetPolarArcsVisibility(self, p_int):
        """
        V.SetPolarArcsVisibility(int)
        C++: virtual void SetPolarArcsVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of arcs for polar axis.
        """
        ...
    
    def SetPolarAxisLabelTextProperty(self, vtkTextProperty):
        """
        V.SetPolarAxisLabelTextProperty(vtkTextProperty)
        C++: virtual void SetPolarAxisLabelTextProperty(
            vtkTextProperty *p)
        
        Set/Get the polar axis labels text property.
        """
        ...
    
    def SetPolarAxisMajorTickSize(self, p_float):
        """
        V.SetPolarAxisMajorTickSize(float)
        C++: virtual void SetPolarAxisMajorTickSize(double _arg)
        
        Set/Get the size of the major ticks on the polar axis.
        """
        ...
    
    def SetPolarAxisMajorTickThickness(self, p_float):
        """
        V.SetPolarAxisMajorTickThickness(float)
        C++: virtual void SetPolarAxisMajorTickThickness(double _arg)
        
        Set/Get the size of the thickness of polar axis ticks
        """
        ...
    
    def SetPolarAxisProperty(self, vtkProperty):
        """
        V.SetPolarAxisProperty(vtkProperty)
        C++: virtual void SetPolarAxisProperty(vtkProperty *)
        
        Get/Set polar axis actor properties.
        """
        ...
    
    def SetPolarAxisTickRatioSize(self, p_float):
        """
        V.SetPolarAxisTickRatioSize(float)
        C++: virtual void SetPolarAxisTickRatioSize(double _arg)
        
        Set/Get the ratio between major and minor Polar Axis ticks size
        """
        ...
    
    def SetPolarAxisTickRatioThickness(self, p_float):
        """
        V.SetPolarAxisTickRatioThickness(float)
        C++: virtual void SetPolarAxisTickRatioThickness(double _arg)
        
        Set/Get the ratio between major and minor Polar Axis ticks
        thickness
        """
        ...
    
    def SetPolarAxisTitle(self, string):
        """
        V.SetPolarAxisTitle(string)
        C++: virtual void SetPolarAxisTitle(const char *_arg)
        
        Set/Get the labels for the polar axis. Default: "Radial
        Distance".
        """
        ...
    
    def SetPolarAxisTitleLocation(self, p_int):
        """
        V.SetPolarAxisTitleLocation(int)
        C++: virtual void SetPolarAxisTitleLocation(int _arg)
        
        Get/Set the alignment of the polar axes title related to the
        axis. Possible Alignment: VTKTITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def SetPolarAxisTitleTextProperty(self, vtkTextProperty):
        """
        V.SetPolarAxisTitleTextProperty(vtkTextProperty)
        C++: virtual void SetPolarAxisTitleTextProperty(
            vtkTextProperty *p)
        
        Set/Get the polar axis title text property.
        """
        ...
    
    def SetPolarAxisVisibility(self, p_int):
        """
        V.SetPolarAxisVisibility(int)
        C++: virtual void SetPolarAxisVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of the polar axis.
        """
        ...
    
    def SetPolarLabelFormat(self, string):
        """
        V.SetPolarLabelFormat(string)
        C++: virtual void SetPolarLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the polar axis labels.
        """
        ...
    
    def SetPolarLabelVisibility(self, p_int):
        """
        V.SetPolarLabelVisibility(int)
        C++: virtual void SetPolarLabelVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of labels for polar axis.
        """
        ...
    
    def SetPolarTickVisibility(self, p_int):
        """
        V.SetPolarTickVisibility(int)
        C++: virtual void SetPolarTickVisibility(vtkTypeBool _arg)
        
        Turn on and off the overall visibility of ticks.
        """
        ...
    
    def SetPolarTitleVisibility(self, p_int):
        """
        V.SetPolarTitleVisibility(int)
        C++: virtual void SetPolarTitleVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of titles for polar axis.
        """
        ...
    
    def SetPole(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPole([float, float, float])
        C++: virtual void SetPole(double[3])
        V.SetPole(float, float, float)
        C++: virtual void SetPole(double, double, double)
        
        Explicitly specify the coordinate of the pole.
        """
        ...
    
    def SetRadialAngleFormat(self, string):
        """
        V.SetRadialAngleFormat(string)
        C++: virtual void SetRadialAngleFormat(const char *_arg)
        
        String to format angle values displayed on the radial axes.
        """
        ...
    
    def SetRadialAxesOriginToPolarAxis(self, p_int):
        """
        V.SetRadialAxesOriginToPolarAxis(int)
        C++: virtual void SetRadialAxesOriginToPolarAxis(vtkTypeBool _arg)
        
        If On, the radial axes are drawn from the angle of the polarAxis
        (i.e. this->MinimalRadius) and continue counterclockwise with the
        step DeltaAngleRadialAxes. if Off, the start angle is 0.0, i.e.
        the angle on the major radius of the ellipse.
        """
        ...
    
    def SetRadialAxesVisibility(self, p_int):
        """
        V.SetRadialAxesVisibility(int)
        C++: virtual void SetRadialAxesVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of non-polar radial axes.
        """
        ...
    
    def SetRadialAxisTitleLocation(self, p_int):
        """
        V.SetRadialAxisTitleLocation(int)
        C++: virtual void SetRadialAxisTitleLocation(int _arg)
        
        Get/Set the alignment of the radial axes title related to the
        axis. Possible Alignment: VTK_TITLE_BOTTOM, VTK_TITLE_EXTERN
        """
        ...
    
    def SetRadialTitleVisibility(self, p_int):
        """
        V.SetRadialTitleVisibility(int)
        C++: virtual void SetRadialTitleVisibility(vtkTypeBool _arg)
        
        Turn on and off the visibility of titles for non-polar radial
        axes.
        """
        ...
    
    def SetRadialUnits(self, bool):
        """
        V.SetRadialUnits(bool)
        C++: virtual void SetRadialUnits(bool _arg)
        
        Default: true
        """
        ...
    
    def SetRange(self, p_float, p_float_1):
        """
        V.SetRange(float, float)
        C++: virtual void SetRange(double _arg1, double _arg2)
        V.SetRange((float, float))
        C++: void SetRange(const double _arg[2])
        
        Define the range values displayed on the polar Axis.
        """
        ...
    
    def SetRatio(self, p_float):
        """
        V.SetRatio(float)
        C++: virtual void SetRatio(double _arg)
        
        Ratio
        """
        ...
    
    def SetRequestedNumberOfRadialAxes(self, p_int):
        """
        V.SetRequestedNumberOfRadialAxes(int)
        C++: virtual void SetRequestedNumberOfRadialAxes(vtkIdType _arg)
        
        Gets/Sets the number of radial axes
        """
        ...
    
    def SetScreenSize(self, p_float):
        """
        V.SetScreenSize(float)
        C++: virtual void SetScreenSize(double _arg)
        
        Explicitly specify the screen size of title and label text.
        ScreenSize determines the size of the text in terms of screen
        pixels. Default: 10.0.
        """
        ...
    
    def SetSecondaryPolarArcsProperty(self, vtkProperty):
        """
        V.SetSecondaryPolarArcsProperty(vtkProperty)
        C++: virtual void SetSecondaryPolarArcsProperty(vtkProperty *p)
        
        Get/Set secondary polar arcs actors property.
        """
        ...
    
    def SetSecondaryRadialAxesProperty(self, vtkProperty):
        """
        V.SetSecondaryRadialAxesProperty(vtkProperty)
        C++: virtual void SetSecondaryRadialAxesProperty(vtkProperty *p)
        
        Get/Set secondary radial axes actors properties.
        """
        ...
    
    def SetSecondaryRadialAxesTextProperty(self, vtkTextProperty):
        """
        V.SetSecondaryRadialAxesTextProperty(vtkTextProperty)
        C++: virtual void SetSecondaryRadialAxesTextProperty(
            vtkTextProperty *p)
        
        Set/Get the secondary radial axes text property.
        """
        ...
    
    def SetSmallestVisiblePolarAngle(self, p_float):
        """
        V.SetSmallestVisiblePolarAngle(float)
        C++: virtual void SetSmallestVisiblePolarAngle(double _arg)
        
        Set/Get the minimum radial angle distinguishable from polar axis
        NB: This is used only when polar axis is visible Default: 0.5
        """
        ...
    
    def SetTickLocation(self, p_int):
        """
        V.SetTickLocation(int)
        C++: virtual void SetTickLocation(int _arg)
        
        Set/Get the location of the ticks. Inside: tick end toward
        positive direction of perpendicular axes. Outside: tick end
        toward negative direction of perpendicular axes.
        """
        ...
    
    def SetUse2DMode(self, p_int):
        """
        V.SetUse2DMode(int)
        C++: void SetUse2DMode(int val)
        
        Enable/Disable labels 2D mode (always facing the camera).
        """
        ...
    
    def SetViewAngleLODThreshold(self, p_float):
        """
        V.SetViewAngleLODThreshold(float)
        C++: virtual void SetViewAngleLODThreshold(double _arg)
        
        Set view angle LOD threshold [0.0 - 1.0] for titles and labels.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ExponentLocation = ...
    TitleLocation = ...
    VTK_EXPONENT_BOTTOM = ...
    VTK_EXPONENT_EXTERN = ...
    VTK_EXPONENT_LABELS = ...
    VTK_TITLE_BOTTOM = ...
    VTK_TITLE_EXTERN = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkProp3DAxisFollower(__vtkmodules_vtkRenderingCore.vtkProp3DFollower):
    """
    vtkProp3DAxisFollower - a subclass of vtkProp3DFollower that ensures
    that data is always parallel to the axis defined by a vtkAxisActor.
    
    Superclass: vtkProp3DFollower
    
    vtkProp3DAxisFollower is a subclass of vtkProp3DFollower that always
    follows its specified axis. More specifically it will not change its
    position or scale, but it will continually update its orientation so
    that it is aligned with the axis and facing at angle to the camera to
    provide maximum visibilty. This is typically used for text labels for
    3d plots.
    @sa
    vtkFollower vtkAxisFollower vtkProp3DFollower
    """
    def AutoCenterOff(self):
        """
        V.AutoCenterOff()
        C++: virtual void AutoCenterOff()
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def AutoCenterOn(self):
        """
        V.AutoCenterOn()
        C++: virtual void AutoCenterOn()
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def AutoScale(self, vtkViewport, vtkCamera, p_float, p_float=..., p_float=..., p_float=...):
        """
        V.AutoScale(vtkViewport, vtkCamera, float, [float, float, float])
            -> float
        C++: static double AutoScale(vtkViewport *viewport,
            vtkCamera *camera, double screenSize, double position[3])
        
        Calculate scale factor to maintain same size of a object on the
        screen.
        """
        ...
    
    def ComputeMatrix(self):
        """
        V.ComputeMatrix()
        C++: void ComputeMatrix() override;
        
        Generate the matrix based on ivars. This method overloads its
        superclasses ComputeMatrix() method due to the special
        vtkProp3DAxisFollower matrix operations.
        """
        ...
    
    def GetAutoCenter(self):
        """
        V.GetAutoCenter() -> int
        C++: virtual vtkTypeBool GetAutoCenter()
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def GetAxis(self):
        """
        V.GetAxis() -> vtkAxisActor
        C++: virtual vtkAxisActor *GetAxis()
        
        Set axis that needs to be followed.
        """
        ...
    
    def GetDistanceLODThreshold(self):
        """
        V.GetDistanceLODThreshold() -> float
        C++: virtual double GetDistanceLODThreshold()
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def GetDistanceLODThresholdMaxValue(self):
        """
        V.GetDistanceLODThresholdMaxValue() -> float
        C++: virtual double GetDistanceLODThresholdMaxValue()
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def GetDistanceLODThresholdMinValue(self):
        """
        V.GetDistanceLODThresholdMinValue() -> float
        C++: virtual double GetDistanceLODThresholdMinValue()
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def GetEnableDistanceLOD(self):
        """
        V.GetEnableDistanceLOD() -> int
        C++: virtual int GetEnableDistanceLOD()
        
        Enable / disable use of distance based LOD. If enabled the actor
        will not be visible at a certain distance from the camera.
        Default is false.
        """
        ...
    
    def GetEnableViewAngleLOD(self):
        """
        V.GetEnableViewAngleLOD() -> int
        C++: virtual int GetEnableViewAngleLOD()
        
        Enable / disable use of view angle based LOD. If enabled the
        actor will not be visible at a certain view angle. Default is
        true.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods for type and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods for type and printing.
        """
        ...
    
    def GetScreenOffset(self):
        """
        V.GetScreenOffset() -> float
        C++: double GetScreenOffset()
        
        Set/Get the desired screen vertical offset from the axis.
        Convenience method, using a zero horizontal offset
        """
        ...
    
    def GetScreenOffsetVector(self):
        """
        V.GetScreenOffsetVector() -> (float, float)
        C++: virtual double *GetScreenOffsetVector()
        
        Set/Get the desired screen offset from the axis.
        """
        ...
    
    def GetViewAngleLODThreshold(self):
        """
        V.GetViewAngleLODThreshold() -> float
        C++: virtual double GetViewAngleLODThreshold()
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def GetViewAngleLODThresholdMaxValue(self):
        """
        V.GetViewAngleLODThresholdMaxValue() -> float
        C++: virtual double GetViewAngleLODThresholdMaxValue()
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def GetViewAngleLODThresholdMinValue(self):
        """
        V.GetViewAngleLODThresholdMinValue() -> float
        C++: virtual double GetViewAngleLODThresholdMinValue()
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def GetViewport(self):
        """
        V.GetViewport() -> vtkViewport
        C++: virtual vtkViewport *GetViewport()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods for type and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods for type and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProp3DAxisFollower
        C++: vtkProp3DAxisFollower *NewInstance()
        
        Standard VTK methods for type and printing.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        This causes the actor to be rendered. It in turn will render the
        actor's property, texture map and then mapper. If a property
        hasn't been assigned, then the actor will create one
        automatically.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        This causes the actor to be rendered. It in turn will render the
        actor's property, texture map and then mapper. If a property
        hasn't been assigned, then the actor will create one
        automatically.
        """
        ...
    
    def RenderVolumetricGeometry(self, vtkViewport):
        """
        V.RenderVolumetricGeometry(vtkViewport) -> int
        C++: int RenderVolumetricGeometry(vtkViewport *viewport) override;
        
        This causes the actor to be rendered. It in turn will render the
        actor's property, texture map and then mapper. If a property
        hasn't been assigned, then the actor will create one
        automatically.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProp3DAxisFollower
        C++: static vtkProp3DAxisFollower *SafeDownCast(vtkObjectBase *o)
        
        Standard VTK methods for type and printing.
        """
        ...
    
    def SetAutoCenter(self, p_int):
        """
        V.SetAutoCenter(int)
        C++: virtual void SetAutoCenter(vtkTypeBool _arg)
        
        Set/Get state of auto center mode where additional translation
        will be added to make sure the underlying geometry has its pivot
        point at the center of its bounds.
        """
        ...
    
    def SetAxis(self, vtkAxisActor):
        """
        V.SetAxis(vtkAxisActor)
        C++: virtual void SetAxis(vtkAxisActor *)
        
        Set axis that needs to be followed.
        """
        ...
    
    def SetDistanceLODThreshold(self, p_float):
        """
        V.SetDistanceLODThreshold(float)
        C++: virtual void SetDistanceLODThreshold(double _arg)
        
        Set distance LOD threshold (0.0 - 1.0).This determines at what
        fraction of camera far clip range, actor is not visible. Default
        is 0.80.
        """
        ...
    
    def SetEnableDistanceLOD(self, p_int):
        """
        V.SetEnableDistanceLOD(int)
        C++: virtual void SetEnableDistanceLOD(int _arg)
        
        Enable / disable use of distance based LOD. If enabled the actor
        will not be visible at a certain distance from the camera.
        Default is false.
        """
        ...
    
    def SetEnableViewAngleLOD(self, p_int):
        """
        V.SetEnableViewAngleLOD(int)
        C++: virtual void SetEnableViewAngleLOD(int _arg)
        
        Enable / disable use of view angle based LOD. If enabled the
        actor will not be visible at a certain view angle. Default is
        true.
        """
        ...
    
    def SetScreenOffset(self, p_float):
        """
        V.SetScreenOffset(float)
        C++: void SetScreenOffset(double offset)
        
        Set/Get the desired screen vertical offset from the axis.
        Convenience method, using a zero horizontal offset
        """
        ...
    
    def SetScreenOffsetVector(self, p_float, p_float_1):
        """
        V.SetScreenOffsetVector(float, float)
        C++: virtual void SetScreenOffsetVector(double _arg1,
            double _arg2)
        V.SetScreenOffsetVector((float, float))
        C++: void SetScreenOffsetVector(const double _arg[2])
        
        Set/Get the desired screen offset from the axis.
        """
        ...
    
    def SetViewAngleLODThreshold(self, p_float):
        """
        V.SetViewAngleLODThreshold(float)
        C++: virtual void SetViewAngleLODThreshold(double _arg)
        
        Set view angle LOD threshold (0.0 - 1.0).This determines at what
        view angle to geometry will make the geometry not visible.
        Default is 0.34.
        """
        ...
    
    def SetViewport(self, vtkViewport):
        """
        V.SetViewport(vtkViewport)
        C++: virtual void SetViewport(vtkViewport *viewport)
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of a follower. Overloads the virtual vtkProp method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkScalarBarActor(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkScalarBarActor - Create a scalar bar with labels
    
    Superclass: vtkActor2D
    
    vtkScalarBarActor creates a scalar bar with tick marks. A scalar bar
    is a legend that indicates to the viewer the correspondence between
    color value and data value. The legend consists of a rectangular bar
    made of rectangular pieces each colored a constant value. Since
    vtkScalarBarActor is a subclass of vtkActor2D, it is drawn in the
    image plane (i.e., in the renderer's viewport) on top of the 3D
    graphics window.
    
    To use vtkScalarBarActor you must associate a vtkScalarsToColors (or
    subclass) with it. The lookup table defines the colors and the range
    of scalar values used to map scalar data.  Typically, the number of
    colors shown in the scalar bar is not equal to the number of colors
    in the lookup table, in which case sampling of the lookup table is
    performed.
    
    Other optional capabilities include specifying the fraction of the
    viewport size (both x and y directions) which will control the size
    of the scalar bar and the number of tick labels. The actual position
    of the scalar bar on the screen is controlled by using the
    vtkActor2D::SetPosition() method (by default the scalar bar is
    centered in the viewport).  Other features include the ability to
    orient the scalar bar horizontally of vertically and controlling the
    format (printf style) with which to print the labels on the scalar
    bar. Also, the vtkScalarBarActor's property is applied to the scalar
    bar and annotations (including layer, and compositing operator).
    
    Set the text property/attributes of the title and the labels through
    the vtkTextProperty objects associated to this actor.
    
    @warning
    If a vtkLogLookupTable is specified as the lookup table to use, then
    the labels are created using a logarithmic scale.
    
    @sa
    vtkActor2D vtkTextProperty vtkTextMapper vtkPolyDataMapper2D
    """
    def AnnotationTextScalingOff(self):
        """
        V.AnnotationTextScalingOff()
        C++: virtual void AnnotationTextScalingOff()
        
        Set/get whether annotation labels should be scaled with the
        viewport.
        
        * The default value is 0 (no scaling).
        * If non-zero, the vtkTextActor instances used to render
          annotation
        * labels will have their TextScaleMode set to viewport-based
          scaling,
        * which nonlinearly scales font size with the viewport size.
        """
        ...
    
    def AnnotationTextScalingOn(self):
        """
        V.AnnotationTextScalingOn()
        C++: virtual void AnnotationTextScalingOn()
        
        Set/get whether annotation labels should be scaled with the
        viewport.
        
        * The default value is 0 (no scaling).
        * If non-zero, the vtkTextActor instances used to render
          annotation
        * labels will have their TextScaleMode set to viewport-based
          scaling,
        * which nonlinearly scales font size with the viewport size.
        """
        ...
    
    def DrawAboveRangeSwatchOff(self):
        """
        V.DrawAboveRangeSwatchOff()
        C++: virtual void DrawAboveRangeSwatchOff()
        
        Set/get whether the Above range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def DrawAboveRangeSwatchOn(self):
        """
        V.DrawAboveRangeSwatchOn()
        C++: virtual void DrawAboveRangeSwatchOn()
        
        Set/get whether the Above range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def DrawAnnotationsOff(self):
        """
        V.DrawAnnotationsOff()
        C++: virtual void DrawAnnotationsOff()
        
        Set/get whether text annotations should be rendered or not.
        Currently, this only affects rendering when IndexedLookup is
        true. The default is true.
        """
        ...
    
    def DrawAnnotationsOn(self):
        """
        V.DrawAnnotationsOn()
        C++: virtual void DrawAnnotationsOn()
        
        Set/get whether text annotations should be rendered or not.
        Currently, this only affects rendering when IndexedLookup is
        true. The default is true.
        """
        ...
    
    def DrawBackgroundOff(self):
        """
        V.DrawBackgroundOff()
        C++: virtual void DrawBackgroundOff()
        
        Set/Get whether a background should be drawn around the scalar
        bar. Default is off.
        """
        ...
    
    def DrawBackgroundOn(self):
        """
        V.DrawBackgroundOn()
        C++: virtual void DrawBackgroundOn()
        
        Set/Get whether a background should be drawn around the scalar
        bar. Default is off.
        """
        ...
    
    def DrawBelowRangeSwatchOff(self):
        """
        V.DrawBelowRangeSwatchOff()
        C++: virtual void DrawBelowRangeSwatchOff()
        
        Set/get whether the Below range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def DrawBelowRangeSwatchOn(self):
        """
        V.DrawBelowRangeSwatchOn()
        C++: virtual void DrawBelowRangeSwatchOn()
        
        Set/get whether the Below range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def DrawColorBarOff(self):
        """
        V.DrawColorBarOff()
        C++: virtual void DrawColorBarOff()
        
        Set/Get whether the color bar should be drawn. If off, only the
        tickmarks and text will be drawn. Default is on.
        """
        ...
    
    def DrawColorBarOn(self):
        """
        V.DrawColorBarOn()
        C++: virtual void DrawColorBarOn()
        
        Set/Get whether the color bar should be drawn. If off, only the
        tickmarks and text will be drawn. Default is on.
        """
        ...
    
    def DrawFrameOff(self):
        """
        V.DrawFrameOff()
        C++: virtual void DrawFrameOff()
        
        Set/Get whether a frame should be drawn around the scalar bar.
        Default is off.
        """
        ...
    
    def DrawFrameOn(self):
        """
        V.DrawFrameOn()
        C++: virtual void DrawFrameOn()
        
        Set/Get whether a frame should be drawn around the scalar bar.
        Default is off.
        """
        ...
    
    def DrawNanAnnotationOff(self):
        """
        V.DrawNanAnnotationOff()
        C++: virtual void DrawNanAnnotationOff()
        
        Set/get whether the NaN annotation should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def DrawNanAnnotationOn(self):
        """
        V.DrawNanAnnotationOn()
        C++: virtual void DrawNanAnnotationOn()
        
        Set/get whether the NaN annotation should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def DrawTickLabelsOff(self):
        """
        V.DrawTickLabelsOff()
        C++: virtual void DrawTickLabelsOff()
        
        Set/Get whether the tick labels should be drawn. Default is on.
        """
        ...
    
    def DrawTickLabelsOn(self):
        """
        V.DrawTickLabelsOn()
        C++: virtual void DrawTickLabelsOn()
        
        Set/Get whether the tick labels should be drawn. Default is on.
        """
        ...
    
    def FixedAnnotationLeaderLineColorOff(self):
        """
        V.FixedAnnotationLeaderLineColorOff()
        C++: virtual void FixedAnnotationLeaderLineColorOff()
        
        Set/get how leader lines connecting annotations to values should
        be colored.
        
        * When true, leader lines are all the same color (and match the
          LabelTextProperty color).
        * When false, leader lines take on the color of the value they
          correspond to.
        * This only affects rendering when DrawAnnotations is true.
        * The default is false.
        """
        ...
    
    def FixedAnnotationLeaderLineColorOn(self):
        """
        V.FixedAnnotationLeaderLineColorOn()
        C++: virtual void FixedAnnotationLeaderLineColorOn()
        
        Set/get how leader lines connecting annotations to values should
        be colored.
        
        * When true, leader lines are all the same color (and match the
          LabelTextProperty color).
        * When false, leader lines take on the color of the value they
          correspond to.
        * This only affects rendering when DrawAnnotations is true.
        * The default is false.
        """
        ...
    
    def GetAboveRangeAnnotation(self):
        """
        V.GetAboveRangeAnnotation() -> string
        C++: virtual char *GetAboveRangeAnnotation()
        
        Set/get the annotation text for "Above Range Swatch" values.
        """
        ...
    
    def GetAnnotationLeaderPadding(self):
        """
        V.GetAnnotationLeaderPadding() -> float
        C++: virtual double GetAnnotationLeaderPadding()
        
        Set/get the padding between the scalar bar and the text
        annotations. This space is used to draw leader lines. The default
        is 8 pixels.
        """
        ...
    
    def GetAnnotationTextProperty(self):
        """
        V.GetAnnotationTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetAnnotationTextProperty()
        
        Set/Get the annotation text property.
        """
        ...
    
    def GetAnnotationTextScaling(self):
        """
        V.GetAnnotationTextScaling() -> int
        C++: virtual vtkTypeBool GetAnnotationTextScaling()
        
        Set/get whether annotation labels should be scaled with the
        viewport.
        
        * The default value is 0 (no scaling).
        * If non-zero, the vtkTextActor instances used to render
          annotation
        * labels will have their TextScaleMode set to viewport-based
          scaling,
        * which nonlinearly scales font size with the viewport size.
        """
        ...
    
    def GetBackgroundProperty(self):
        """
        V.GetBackgroundProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetBackgroundProperty()
        
        Set/Get the background property.
        """
        ...
    
    def GetBarRatio(self):
        """
        V.GetBarRatio() -> float
        C++: virtual double GetBarRatio()
        
        Set/get the thickness of the color bar relative to the widget
        frame. The default is 0.375 and must always be in the range ]0,
        1[.
        """
        ...
    
    def GetBarRatioMaxValue(self):
        """
        V.GetBarRatioMaxValue() -> float
        C++: virtual double GetBarRatioMaxValue()
        
        Set/get the thickness of the color bar relative to the widget
        frame. The default is 0.375 and must always be in the range ]0,
        1[.
        """
        ...
    
    def GetBarRatioMinValue(self):
        """
        V.GetBarRatioMinValue() -> float
        C++: virtual double GetBarRatioMinValue()
        
        Set/get the thickness of the color bar relative to the widget
        frame. The default is 0.375 and must always be in the range ]0,
        1[.
        """
        ...
    
    def GetBelowRangeAnnotation(self):
        """
        V.GetBelowRangeAnnotation() -> string
        C++: virtual char *GetBelowRangeAnnotation()
        
        Set/get the annotation text for "Below Range" values.
        """
        ...
    
    def GetComponentTitle(self):
        """
        V.GetComponentTitle() -> string
        C++: virtual char *GetComponentTitle()
        
        Set/Get the title for the component that is selected,
        """
        ...
    
    def GetDrawAboveRangeSwatch(self):
        """
        V.GetDrawAboveRangeSwatch() -> bool
        C++: virtual bool GetDrawAboveRangeSwatch()
        
        Set/get whether the Above range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def GetDrawAnnotations(self):
        """
        V.GetDrawAnnotations() -> int
        C++: virtual vtkTypeBool GetDrawAnnotations()
        
        Set/get whether text annotations should be rendered or not.
        Currently, this only affects rendering when IndexedLookup is
        true. The default is true.
        """
        ...
    
    def GetDrawBackground(self):
        """
        V.GetDrawBackground() -> int
        C++: virtual vtkTypeBool GetDrawBackground()
        
        Set/Get whether a background should be drawn around the scalar
        bar. Default is off.
        """
        ...
    
    def GetDrawBelowRangeSwatch(self):
        """
        V.GetDrawBelowRangeSwatch() -> bool
        C++: virtual bool GetDrawBelowRangeSwatch()
        
        Set/get whether the Below range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def GetDrawColorBar(self):
        """
        V.GetDrawColorBar() -> int
        C++: virtual vtkTypeBool GetDrawColorBar()
        
        Set/Get whether the color bar should be drawn. If off, only the
        tickmarks and text will be drawn. Default is on.
        """
        ...
    
    def GetDrawFrame(self):
        """
        V.GetDrawFrame() -> int
        C++: virtual vtkTypeBool GetDrawFrame()
        
        Set/Get whether a frame should be drawn around the scalar bar.
        Default is off.
        """
        ...
    
    def GetDrawNanAnnotation(self):
        """
        V.GetDrawNanAnnotation() -> int
        C++: virtual vtkTypeBool GetDrawNanAnnotation()
        
        Set/get whether the NaN annotation should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def GetDrawTickLabels(self):
        """
        V.GetDrawTickLabels() -> int
        C++: virtual vtkTypeBool GetDrawTickLabels()
        
        Set/Get whether the tick labels should be drawn. Default is on.
        """
        ...
    
    def GetFixedAnnotationLeaderLineColor(self):
        """
        V.GetFixedAnnotationLeaderLineColor() -> int
        C++: virtual vtkTypeBool GetFixedAnnotationLeaderLineColor()
        
        Set/get how leader lines connecting annotations to values should
        be colored.
        
        * When true, leader lines are all the same color (and match the
          LabelTextProperty color).
        * When false, leader lines take on the color of the value they
          correspond to.
        * This only affects rendering when DrawAnnotations is true.
        * The default is false.
        """
        ...
    
    def GetFrameProperty(self):
        """
        V.GetFrameProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetFrameProperty()
        
        Set/Get the frame property.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Set/Get the format with which to print the labels on the scalar
        bar.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Set/Get the labels text property.
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: virtual vtkScalarsToColors *GetLookupTable()
        
        Set/Get the lookup table to use. The lookup table specifies the
        number of colors to use in the table (if not overridden), the
        scalar range, and any annotated values. Annotated values are
        rendered using vtkTextActor.
        """
        ...
    
    def GetMaximumHeightInPixels(self):
        """
        V.GetMaximumHeightInPixels() -> int
        C++: virtual int GetMaximumHeightInPixels()
        
        Set/Get the maximum width and height in pixels. Specifying the
        size as a relative fraction of the viewport can sometimes
        undesirably stretch the size of the actor too much. These methods
        allow the user to set bounds on the maximum size of the scalar
        bar in pixels along any direction. Defaults to unbounded.
        """
        ...
    
    def GetMaximumNumberOfColors(self):
        """
        V.GetMaximumNumberOfColors() -> int
        C++: virtual int GetMaximumNumberOfColors()
        
        Set/Get the maximum number of scalar bar segments to show. This
        may differ from the number of colors in the lookup table, in
        which case the colors are samples from the lookup table.
        """
        ...
    
    def GetMaximumNumberOfColorsMaxValue(self):
        """
        V.GetMaximumNumberOfColorsMaxValue() -> int
        C++: virtual int GetMaximumNumberOfColorsMaxValue()
        
        Set/Get the maximum number of scalar bar segments to show. This
        may differ from the number of colors in the lookup table, in
        which case the colors are samples from the lookup table.
        """
        ...
    
    def GetMaximumNumberOfColorsMinValue(self):
        """
        V.GetMaximumNumberOfColorsMinValue() -> int
        C++: virtual int GetMaximumNumberOfColorsMinValue()
        
        Set/Get the maximum number of scalar bar segments to show. This
        may differ from the number of colors in the lookup table, in
        which case the colors are samples from the lookup table.
        """
        ...
    
    def GetMaximumWidthInPixels(self):
        """
        V.GetMaximumWidthInPixels() -> int
        C++: virtual int GetMaximumWidthInPixels()
        
        Set/Get the maximum width and height in pixels. Specifying the
        size as a relative fraction of the viewport can sometimes
        undesirably stretch the size of the actor too much. These methods
        allow the user to set bounds on the maximum size of the scalar
        bar in pixels along any direction. Defaults to unbounded.
        """
        ...
    
    def GetNanAnnotation(self):
        """
        V.GetNanAnnotation() -> string
        C++: virtual char *GetNanAnnotation()
        
        Set/get the annotation text for "NaN" values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLabels(self):
        """
        V.GetNumberOfLabels() -> int
        C++: virtual int GetNumberOfLabels()
        
        Set/Get the number of tick labels to show.
        """
        ...
    
    def GetNumberOfLabelsMaxValue(self):
        """
        V.GetNumberOfLabelsMaxValue() -> int
        C++: virtual int GetNumberOfLabelsMaxValue()
        
        Set/Get the number of tick labels to show.
        """
        ...
    
    def GetNumberOfLabelsMinValue(self):
        """
        V.GetNumberOfLabelsMinValue() -> int
        C++: virtual int GetNumberOfLabelsMinValue()
        
        Set/Get the number of tick labels to show.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: virtual int GetOrientation()
        
        Control the orientation of the scalar bar.
        """
        ...
    
    def GetOrientationMaxValue(self):
        """
        V.GetOrientationMaxValue() -> int
        C++: virtual int GetOrientationMaxValue()
        
        Control the orientation of the scalar bar.
        """
        ...
    
    def GetOrientationMinValue(self):
        """
        V.GetOrientationMinValue() -> int
        C++: virtual int GetOrientationMinValue()
        
        Control the orientation of the scalar bar.
        """
        ...
    
    def GetScalarBarRect(self, p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.GetScalarBarRect([int, int, int, int], vtkViewport)
        C++: virtual void GetScalarBarRect(int rect[4],
            vtkViewport *viewport)
        
        Fills rect with the dimensions of the scalar bar in viewport
        coordinates. Only the color bar is considered -- text labels are
        not considered. rect is {xmin, xmax, width, height}
        """
        ...
    
    def GetTextPad(self):
        """
        V.GetTextPad() -> int
        C++: virtual int GetTextPad()
        
        Set/get the amount of padding around text boxes. The default is 1
        pixel.
        """
        ...
    
    def GetTextPosition(self):
        """
        V.GetTextPosition() -> int
        C++: virtual int GetTextPosition()
        
        Should the title and tick marks precede the scalar bar or succeed
        it? This is measured along the viewport coordinate direction
        perpendicular to the long axis of the scalar bar, not the reading
        direction. Thus, succeed implies the that the text is above
        scalar bar if the orientation is horizontal or right of scalar
        bar if the orientation is vertical. Precede is the opposite.
        """
        ...
    
    def GetTextPositionMaxValue(self):
        """
        V.GetTextPositionMaxValue() -> int
        C++: virtual int GetTextPositionMaxValue()
        
        Should the title and tick marks precede the scalar bar or succeed
        it? This is measured along the viewport coordinate direction
        perpendicular to the long axis of the scalar bar, not the reading
        direction. Thus, succeed implies the that the text is above
        scalar bar if the orientation is horizontal or right of scalar
        bar if the orientation is vertical. Precede is the opposite.
        """
        ...
    
    def GetTextPositionMinValue(self):
        """
        V.GetTextPositionMinValue() -> int
        C++: virtual int GetTextPositionMinValue()
        
        Should the title and tick marks precede the scalar bar or succeed
        it? This is measured along the viewport coordinate direction
        perpendicular to the long axis of the scalar bar, not the reading
        direction. Thus, succeed implies the that the text is above
        scalar bar if the orientation is horizontal or right of scalar
        bar if the orientation is vertical. Precede is the opposite.
        """
        ...
    
    def GetTextureActor(self):
        """
        V.GetTextureActor() -> vtkTexturedActor2D
        C++: virtual vtkTexturedActor2D *GetTextureActor()
        
        Get the texture actor.. you may want to change some properties on
        it
        """
        ...
    
    def GetTextureGridWidth(self):
        """
        V.GetTextureGridWidth() -> float
        C++: virtual double GetTextureGridWidth()
        
        Set the width of the texture grid. Used only if UseOpacity is ON.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the scalar bar actor,
        """
        ...
    
    def GetTitleRatio(self):
        """
        V.GetTitleRatio() -> float
        C++: virtual double GetTitleRatio()
        
        Set/get the ratio of the title height to the tick label height
        (used only when the Orientation is horizontal). The default is
        0.5, which attempts to make the labels and title the same size.
        This must be a number in the range ]0, 1[.
        """
        ...
    
    def GetTitleRatioMaxValue(self):
        """
        V.GetTitleRatioMaxValue() -> float
        C++: virtual double GetTitleRatioMaxValue()
        
        Set/get the ratio of the title height to the tick label height
        (used only when the Orientation is horizontal). The default is
        0.5, which attempts to make the labels and title the same size.
        This must be a number in the range ]0, 1[.
        """
        ...
    
    def GetTitleRatioMinValue(self):
        """
        V.GetTitleRatioMinValue() -> float
        C++: virtual double GetTitleRatioMinValue()
        
        Set/get the ratio of the title height to the tick label height
        (used only when the Orientation is horizontal). The default is
        0.5, which attempts to make the labels and title the same size.
        This must be a number in the range ]0, 1[.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the title text property.
        """
        ...
    
    def GetUnconstrainedFontSize(self):
        """
        V.GetUnconstrainedFontSize() -> bool
        C++: virtual bool GetUnconstrainedFontSize()
        
        Set/Get whether the font size of title and labels is
        unconstrained. Default is off. When it is constrained, the size
        of the scalar bar will constrained the font size When it is not,
        the size of the font will always be respected
        """
        ...
    
    def GetUseOpacity(self):
        """
        V.GetUseOpacity() -> int
        C++: virtual vtkTypeBool GetUseOpacity()
        
        Should be display the opacity as well. This is displayed by
        changing the opacity of the scalar bar in accordance with the
        opacity of the given color. For clarity, a texture grid is placed
        in the background if Opacity is ON. You might also want to play
        with SetTextureGridWith in that case. [Default: off]
        """
        ...
    
    def GetVerticalTitleSeparation(self):
        """
        V.GetVerticalTitleSeparation() -> int
        C++: virtual int GetVerticalTitleSeparation()
        
        Set/get the margin in pixels, between the title and the bar, when
        the Orientation is vertical. The default is 0 pixels.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkScalarBarActor
        C++: vtkScalarBarActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Draw the scalar bar and annotation text to the screen.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Draw the scalar bar and annotation text to the screen.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the scalar bar and annotation text to the screen.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkScalarBarActor
        C++: static vtkScalarBarActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAboveRangeAnnotation(self, string):
        """
        V.SetAboveRangeAnnotation(string)
        C++: virtual void SetAboveRangeAnnotation(const char *_arg)
        
        Set/get the annotation text for "Above Range Swatch" values.
        """
        ...
    
    def SetAnnotationLeaderPadding(self, p_float):
        """
        V.SetAnnotationLeaderPadding(float)
        C++: virtual void SetAnnotationLeaderPadding(double _arg)
        
        Set/get the padding between the scalar bar and the text
        annotations. This space is used to draw leader lines. The default
        is 8 pixels.
        """
        ...
    
    def SetAnnotationTextProperty(self, vtkTextProperty):
        """
        V.SetAnnotationTextProperty(vtkTextProperty)
        C++: virtual void SetAnnotationTextProperty(vtkTextProperty *p)
        
        Set/Get the annotation text property.
        """
        ...
    
    def SetAnnotationTextScaling(self, p_int):
        """
        V.SetAnnotationTextScaling(int)
        C++: virtual void SetAnnotationTextScaling(vtkTypeBool _arg)
        
        Set/get whether annotation labels should be scaled with the
        viewport.
        
        * The default value is 0 (no scaling).
        * If non-zero, the vtkTextActor instances used to render
          annotation
        * labels will have their TextScaleMode set to viewport-based
          scaling,
        * which nonlinearly scales font size with the viewport size.
        """
        ...
    
    def SetBackgroundProperty(self, vtkProperty2D):
        """
        V.SetBackgroundProperty(vtkProperty2D)
        C++: virtual void SetBackgroundProperty(vtkProperty2D *p)
        
        Set/Get the background property.
        """
        ...
    
    def SetBarRatio(self, p_float):
        """
        V.SetBarRatio(float)
        C++: virtual void SetBarRatio(double _arg)
        
        Set/get the thickness of the color bar relative to the widget
        frame. The default is 0.375 and must always be in the range ]0,
        1[.
        """
        ...
    
    def SetBelowRangeAnnotation(self, string):
        """
        V.SetBelowRangeAnnotation(string)
        C++: virtual void SetBelowRangeAnnotation(const char *_arg)
        
        Set/get the annotation text for "Below Range" values.
        """
        ...
    
    def SetComponentTitle(self, string):
        """
        V.SetComponentTitle(string)
        C++: virtual void SetComponentTitle(const char *_arg)
        
        Set/Get the title for the component that is selected,
        """
        ...
    
    def SetDrawAboveRangeSwatch(self, bool):
        """
        V.SetDrawAboveRangeSwatch(bool)
        C++: virtual void SetDrawAboveRangeSwatch(bool _arg)
        
        Set/get whether the Above range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def SetDrawAnnotations(self, p_int):
        """
        V.SetDrawAnnotations(int)
        C++: virtual void SetDrawAnnotations(vtkTypeBool _arg)
        
        Set/get whether text annotations should be rendered or not.
        Currently, this only affects rendering when IndexedLookup is
        true. The default is true.
        """
        ...
    
    def SetDrawBackground(self, p_int):
        """
        V.SetDrawBackground(int)
        C++: virtual void SetDrawBackground(vtkTypeBool _arg)
        
        Set/Get whether a background should be drawn around the scalar
        bar. Default is off.
        """
        ...
    
    def SetDrawBelowRangeSwatch(self, bool):
        """
        V.SetDrawBelowRangeSwatch(bool)
        C++: virtual void SetDrawBelowRangeSwatch(bool _arg)
        
        Set/get whether the Below range swatch should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def SetDrawColorBar(self, p_int):
        """
        V.SetDrawColorBar(int)
        C++: virtual void SetDrawColorBar(vtkTypeBool _arg)
        
        Set/Get whether the color bar should be drawn. If off, only the
        tickmarks and text will be drawn. Default is on.
        """
        ...
    
    def SetDrawFrame(self, p_int):
        """
        V.SetDrawFrame(int)
        C++: virtual void SetDrawFrame(vtkTypeBool _arg)
        
        Set/Get whether a frame should be drawn around the scalar bar.
        Default is off.
        """
        ...
    
    def SetDrawNanAnnotation(self, p_int):
        """
        V.SetDrawNanAnnotation(int)
        C++: virtual void SetDrawNanAnnotation(vtkTypeBool _arg)
        
        Set/get whether the NaN annotation should be rendered or not.
        This only affects rendering when DrawAnnotations is true. The
        default is false.
        """
        ...
    
    def SetDrawTickLabels(self, p_int):
        """
        V.SetDrawTickLabels(int)
        C++: virtual void SetDrawTickLabels(vtkTypeBool _arg)
        
        Set/Get whether the tick labels should be drawn. Default is on.
        """
        ...
    
    def SetFixedAnnotationLeaderLineColor(self, p_int):
        """
        V.SetFixedAnnotationLeaderLineColor(int)
        C++: virtual void SetFixedAnnotationLeaderLineColor(
            vtkTypeBool _arg)
        
        Set/get how leader lines connecting annotations to values should
        be colored.
        
        * When true, leader lines are all the same color (and match the
          LabelTextProperty color).
        * When false, leader lines take on the color of the value they
          correspond to.
        * This only affects rendering when DrawAnnotations is true.
        * The default is false.
        """
        ...
    
    def SetFrameProperty(self, vtkProperty2D):
        """
        V.SetFrameProperty(vtkProperty2D)
        C++: virtual void SetFrameProperty(vtkProperty2D *p)
        
        Set/Get the frame property.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels on the scalar
        bar.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the labels text property.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: virtual void SetLookupTable(vtkScalarsToColors *)
        
        Set/Get the lookup table to use. The lookup table specifies the
        number of colors to use in the table (if not overridden), the
        scalar range, and any annotated values. Annotated values are
        rendered using vtkTextActor.
        """
        ...
    
    def SetMaximumHeightInPixels(self, p_int):
        """
        V.SetMaximumHeightInPixels(int)
        C++: virtual void SetMaximumHeightInPixels(int _arg)
        
        Set/Get the maximum width and height in pixels. Specifying the
        size as a relative fraction of the viewport can sometimes
        undesirably stretch the size of the actor too much. These methods
        allow the user to set bounds on the maximum size of the scalar
        bar in pixels along any direction. Defaults to unbounded.
        """
        ...
    
    def SetMaximumNumberOfColors(self, p_int):
        """
        V.SetMaximumNumberOfColors(int)
        C++: virtual void SetMaximumNumberOfColors(int _arg)
        
        Set/Get the maximum number of scalar bar segments to show. This
        may differ from the number of colors in the lookup table, in
        which case the colors are samples from the lookup table.
        """
        ...
    
    def SetMaximumWidthInPixels(self, p_int):
        """
        V.SetMaximumWidthInPixels(int)
        C++: virtual void SetMaximumWidthInPixels(int _arg)
        
        Set/Get the maximum width and height in pixels. Specifying the
        size as a relative fraction of the viewport can sometimes
        undesirably stretch the size of the actor too much. These methods
        allow the user to set bounds on the maximum size of the scalar
        bar in pixels along any direction. Defaults to unbounded.
        """
        ...
    
    def SetNanAnnotation(self, string):
        """
        V.SetNanAnnotation(string)
        C++: virtual void SetNanAnnotation(const char *_arg)
        
        Set/get the annotation text for "NaN" values.
        """
        ...
    
    def SetNumberOfLabels(self, p_int):
        """
        V.SetNumberOfLabels(int)
        C++: virtual void SetNumberOfLabels(int _arg)
        
        Set/Get the number of tick labels to show.
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: virtual void SetOrientation(int _arg)
        
        Control the orientation of the scalar bar.
        """
        ...
    
    def SetOrientationToHorizontal(self):
        """
        V.SetOrientationToHorizontal()
        C++: void SetOrientationToHorizontal()
        
        Control the orientation of the scalar bar.
        """
        ...
    
    def SetOrientationToVertical(self):
        """
        V.SetOrientationToVertical()
        C++: void SetOrientationToVertical()
        
        Control the orientation of the scalar bar.
        """
        ...
    
    def SetTextPad(self, p_int):
        """
        V.SetTextPad(int)
        C++: virtual void SetTextPad(int _arg)
        
        Set/get the amount of padding around text boxes. The default is 1
        pixel.
        """
        ...
    
    def SetTextPosition(self, p_int):
        """
        V.SetTextPosition(int)
        C++: virtual void SetTextPosition(int _arg)
        
        Should the title and tick marks precede the scalar bar or succeed
        it? This is measured along the viewport coordinate direction
        perpendicular to the long axis of the scalar bar, not the reading
        direction. Thus, succeed implies the that the text is above
        scalar bar if the orientation is horizontal or right of scalar
        bar if the orientation is vertical. Precede is the opposite.
        """
        ...
    
    def SetTextPositionToPrecedeScalarBar(self):
        """
        V.SetTextPositionToPrecedeScalarBar()
        C++: virtual void SetTextPositionToPrecedeScalarBar()
        
        Should the title and tick marks precede the scalar bar or succeed
        it? This is measured along the viewport coordinate direction
        perpendicular to the long axis of the scalar bar, not the reading
        direction. Thus, succeed implies the that the text is above
        scalar bar if the orientation is horizontal or right of scalar
        bar if the orientation is vertical. Precede is the opposite.
        """
        ...
    
    def SetTextPositionToSucceedScalarBar(self):
        """
        V.SetTextPositionToSucceedScalarBar()
        C++: virtual void SetTextPositionToSucceedScalarBar()
        
        Should the title and tick marks precede the scalar bar or succeed
        it? This is measured along the viewport coordinate direction
        perpendicular to the long axis of the scalar bar, not the reading
        direction. Thus, succeed implies the that the text is above
        scalar bar if the orientation is horizontal or right of scalar
        bar if the orientation is vertical. Precede is the opposite.
        """
        ...
    
    def SetTextureGridWidth(self, p_float):
        """
        V.SetTextureGridWidth(float)
        C++: virtual void SetTextureGridWidth(double _arg)
        
        Set the width of the texture grid. Used only if UseOpacity is ON.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set/Get the title of the scalar bar actor,
        """
        ...
    
    def SetTitleRatio(self, p_float):
        """
        V.SetTitleRatio(float)
        C++: virtual void SetTitleRatio(double _arg)
        
        Set/get the ratio of the title height to the tick label height
        (used only when the Orientation is horizontal). The default is
        0.5, which attempts to make the labels and title the same size.
        This must be a number in the range ]0, 1[.
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property.
        """
        ...
    
    def SetUnconstrainedFontSize(self, bool):
        """
        V.SetUnconstrainedFontSize(bool)
        C++: virtual void SetUnconstrainedFontSize(bool _arg)
        
        Set/Get whether the font size of title and labels is
        unconstrained. Default is off. When it is constrained, the size
        of the scalar bar will constrained the font size When it is not,
        the size of the font will always be respected
        """
        ...
    
    def SetUseOpacity(self, p_int):
        """
        V.SetUseOpacity(int)
        C++: virtual void SetUseOpacity(vtkTypeBool _arg)
        
        Should be display the opacity as well. This is displayed by
        changing the opacity of the scalar bar in accordance with the
        opacity of the given color. For clarity, a texture grid is placed
        in the background if Opacity is ON. You might also want to play
        with SetTextureGridWith in that case. [Default: off]
        """
        ...
    
    def SetVerticalTitleSeparation(self, p_int):
        """
        V.SetVerticalTitleSeparation(int)
        C++: virtual void SetVerticalTitleSeparation(int _arg)
        
        Set/get the margin in pixels, between the title and the bar, when
        the Orientation is vertical. The default is 0 pixels.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of a scalar bar actor. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def UnconstrainedFontSizeOff(self):
        """
        V.UnconstrainedFontSizeOff()
        C++: virtual void UnconstrainedFontSizeOff()
        
        Set/Get whether the font size of title and labels is
        unconstrained. Default is off. When it is constrained, the size
        of the scalar bar will constrained the font size When it is not,
        the size of the font will always be respected
        """
        ...
    
    def UnconstrainedFontSizeOn(self):
        """
        V.UnconstrainedFontSizeOn()
        C++: virtual void UnconstrainedFontSizeOn()
        
        Set/Get whether the font size of title and labels is
        unconstrained. Default is off. When it is constrained, the size
        of the scalar bar will constrained the font size When it is not,
        the size of the font will always be respected
        """
        ...
    
    def UseOpacityOff(self):
        """
        V.UseOpacityOff()
        C++: virtual void UseOpacityOff()
        
        Should be display the opacity as well. This is displayed by
        changing the opacity of the scalar bar in accordance with the
        opacity of the given color. For clarity, a texture grid is placed
        in the background if Opacity is ON. You might also want to play
        with SetTextureGridWith in that case. [Default: off]
        """
        ...
    
    def UseOpacityOn(self):
        """
        V.UseOpacityOn()
        C++: virtual void UseOpacityOn()
        
        Should be display the opacity as well. This is displayed by
        changing the opacity of the scalar bar in accordance with the
        opacity of the given color. For clarity, a texture grid is placed
        in the background if Opacity is ON. You might also want to play
        with SetTextureGridWith in that case. [Default: off]
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    PrecedeScalarBar = ...
    SucceedScalarBar = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSpiderPlotActor(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkSpiderPlotActor - create a spider plot from input field
    
    Superclass: vtkActor2D
    
    vtkSpiderPlotActor generates a spider plot from an input field (i.e.,
    vtkDataObject). A spider plot represents N-dimensional data by using
    a set of N axes that originate from the center of a circle, and form
    the spokes of a wheel (like a spider web).  Each N-dimensional point
    is plotted as a polyline that forms a closed polygon; the vertices of
    the polygon are plotted against the radial axes.
    
    To use this class, you must specify an input data object. You'll
    probably also want to specify the position of the plot be setting the
    Position and Position2 instance variables, which define a rectangle
    in which the plot lies. Another important parameter is the
    IndependentVariables ivar, which tells the instance how to interpret
    the field data (independent variables as the rows or columns of the
    field). There are also many other instance variables that control the
    look of the plot includes its title and legend.
    
    Set the text property/attributes of the title and the labels through
    the vtkTextProperty objects associated with these components.
    
    @warning
    Field data is not necessarily "rectangular" in shape. In these cases,
    some of the data may not be plotted.
    
    @warning
    Field data can contain non-numeric arrays (i.e. arrays not subclasses
    of vtkDataArray). Such arrays are skipped.
    
    @sa
    vtkParallelCoordinatesActor vtkXYPlotActor2D
    """
    def GetAxisLabel(self, p_int):
        """
        V.GetAxisLabel(int) -> string
        C++: const char *GetAxisLabel(int i)
        
        Specify the names of the radial spokes (i.e., the radial axes).
        If not specified, then an integer number is automatically
        generated.
        """
        ...
    
    def GetAxisRange(self, p_int, p_float=..., p_float=...):
        """
        V.GetAxisRange(int, [float, float])
        C++: void GetAxisRange(int i, double range[2])
        
        Specify the range of data on each radial axis. If not specified,
        then the range is computed automatically.
        """
        ...
    
    def GetIndependentVariables(self):
        """
        V.GetIndependentVariables() -> int
        C++: virtual int GetIndependentVariables()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def GetIndependentVariablesMaxValue(self):
        """
        V.GetIndependentVariablesMaxValue() -> int
        C++: virtual int GetIndependentVariablesMaxValue()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def GetIndependentVariablesMinValue(self):
        """
        V.GetIndependentVariablesMinValue() -> int
        C++: virtual int GetIndependentVariablesMinValue()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataObject
        C++: virtual vtkDataObject *GetInput()
        
        Get the input data object to this actor.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> int
        C++: virtual vtkTypeBool GetLabelVisibility()
        """
        ...
    
    def GetLegendActor(self):
        """
        V.GetLegendActor() -> vtkLegendBoxActor
        C++: virtual vtkLegendBoxActor *GetLegendActor()
        
        Retrieve handles to the legend box. This is useful if you would
        like to manually control the legend appearance.
        """
        ...
    
    def GetLegendVisibility(self):
        """
        V.GetLegendVisibility() -> int
        C++: virtual vtkTypeBool GetLegendVisibility()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetNumberOfRings(self):
        """
        V.GetNumberOfRings() -> int
        C++: virtual int GetNumberOfRings()
        
        Specify the number of circumferential rings. If set to zero, then
        none will be shown; otherwise the specified number will be shown.
        """
        ...
    
    def GetNumberOfRingsMaxValue(self):
        """
        V.GetNumberOfRingsMaxValue() -> int
        C++: virtual int GetNumberOfRingsMaxValue()
        
        Specify the number of circumferential rings. If set to zero, then
        none will be shown; otherwise the specified number will be shown.
        """
        ...
    
    def GetNumberOfRingsMinValue(self):
        """
        V.GetNumberOfRingsMinValue() -> int
        C++: virtual int GetNumberOfRingsMinValue()
        
        Specify the number of circumferential rings. If set to zero, then
        none will be shown; otherwise the specified number will be shown.
        """
        ...
    
    def GetPlotColor(self, p_int):
        """
        V.GetPlotColor(int) -> (float, ...)
        C++: double *GetPlotColor(int i)
        
        Specify colors for each plot. If not specified, they are
        automatically generated.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the spider plot.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the title text property.
        """
        ...
    
    def GetTitleVisibility(self):
        """
        V.GetTitleVisibility() -> int
        C++: virtual vtkTypeBool GetTitleVisibility()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        """
        ...
    
    def LegendVisibilityOff(self):
        """
        V.LegendVisibilityOff()
        C++: virtual void LegendVisibilityOff()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def LegendVisibilityOn(self):
        """
        V.LegendVisibilityOn()
        C++: virtual void LegendVisibilityOn()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSpiderPlotActor
        C++: vtkSpiderPlotActor *NewInstance()
        
        Standard methods for type information and printing.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Draw the spider plot.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Draw the spider plot.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Draw the spider plot.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSpiderPlotActor
        C++: static vtkSpiderPlotActor *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for type information and printing.
        """
        ...
    
    def SetAxisLabel(self, p_int, string):
        """
        V.SetAxisLabel(int, string)
        C++: void SetAxisLabel(const int i, const char *)
        
        Specify the names of the radial spokes (i.e., the radial axes).
        If not specified, then an integer number is automatically
        generated.
        """
        ...
    
    def SetAxisRange(self, p_int, p_float, p_float_1):
        """
        V.SetAxisRange(int, float, float)
        C++: void SetAxisRange(int i, double min, double max)
        V.SetAxisRange(int, [float, float])
        C++: void SetAxisRange(int i, double range[2])
        
        Specify the range of data on each radial axis. If not specified,
        then the range is computed automatically.
        """
        ...
    
    def SetIndependentVariables(self, p_int):
        """
        V.SetIndependentVariables(int)
        C++: virtual void SetIndependentVariables(int _arg)
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def SetIndependentVariablesToColumns(self):
        """
        V.SetIndependentVariablesToColumns()
        C++: void SetIndependentVariablesToColumns()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def SetIndependentVariablesToRows(self):
        """
        V.SetIndependentVariablesToRows()
        C++: void SetIndependentVariablesToRows()
        
        Specify whether to use the rows or columns as independent
        variables. If columns, then each row represents a separate point.
        If rows, then each column represents a separate point.
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *)
        
        Set the input to the pie chart actor. SetInputData() does not
        connect the pipeline whereas SetInputConnection() does.
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: virtual void SetInputData(vtkDataObject *)
        
        Set the input to the pie chart actor. SetInputData() does not
        connect the pipeline whereas SetInputConnection() does.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def SetLabelVisibility(self, p_int):
        """
        V.SetLabelVisibility(int)
        C++: virtual void SetLabelVisibility(vtkTypeBool _arg)
        """
        ...
    
    def SetLegendVisibility(self, p_int):
        """
        V.SetLegendVisibility(int)
        C++: virtual void SetLegendVisibility(vtkTypeBool _arg)
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def SetNumberOfRings(self, p_int):
        """
        V.SetNumberOfRings(int)
        C++: virtual void SetNumberOfRings(int _arg)
        
        Specify the number of circumferential rings. If set to zero, then
        none will be shown; otherwise the specified number will be shown.
        """
        ...
    
    def SetPlotColor(self, p_int, p_float, p_float_1, p_float_2):
        """
        V.SetPlotColor(int, float, float, float)
        C++: void SetPlotColor(int i, double r, double g, double b)
        V.SetPlotColor(int, (float, float, float))
        C++: void SetPlotColor(int i, const double color[3])
        
        Specify colors for each plot. If not specified, they are
        automatically generated.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set/Get the title of the spider plot.
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property.
        """
        ...
    
    def SetTitleVisibility(self, p_int):
        """
        V.SetTitleVisibility(int)
        C++: virtual void SetTitleVisibility(vtkTypeBool _arg)
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def TitleVisibilityOff(self):
        """
        V.TitleVisibilityOff()
        C++: virtual void TitleVisibilityOff()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def TitleVisibilityOn(self):
        """
        V.TitleVisibilityOn()
        C++: virtual void TitleVisibilityOn()
        
        Enable/Disable the display of a plot title.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXYPlotActor(__vtkmodules_vtkRenderingCore.vtkActor2D):
    """
    vtkXYPlotActor - generate an x-y plot from input dataset(s) or field
    data
    
    Superclass: vtkActor2D
    
    vtkXYPlotActor creates an x-y plot of data from one or more input
    data sets or field data. The class plots dataset scalar values
    (y-axis) against the points (x-axis). The x-axis values are generated
    by taking the point ids, computing a cumulative arc length, or a
    normalized arc length. More than one input data set can be specified
    to generate multiple plots. Alternatively, if field data is supplied
    as input, the class plots one component against another. (The user
    must specify which component to use as the x-axis and which for the
    y-axis.)
    
    To use this class to plot dataset(s), you must specify one or more
    input datasets containing scalar and point data.  You'll probably
    also want to invoke a method to control how the point coordinates are
    converted into x values (by default point ids are used).
    
    To use this class to plot field data, you must specify one or more
    input data objects with its associated field data. You'll also want
    to specify which component to use as the x-axis and which to use as
    the y-axis. Note that when plotting field data, the x and y values
    are used directly (i.e., there are no options to normalize the
    components).
    
    Once you've set up the plot, you'll want to position it.  The
    PositionCoordinate defines the lower-left location of the x-y plot
    (specified in normalized viewport coordinates) and the
    Position2Coordinate define the upper-right corner. (Note: the
    Position2Coordinate is relative to PositionCoordinate, so you can
    move the vtkXYPlotActor around the viewport by setting just the
    PositionCoordinate.) The combination of the two position coordinates
    specifies a rectangle in which the plot will lie.
    
    Optional features include the ability to specify axes labels, label
    format and plot title. You can also manually specify the x and y plot
    ranges (by default they are computed automatically). The Border
    instance variable is used to create space between the boundary of the
    plot window (specified by PositionCoordinate and Position2Coordinate)
    and the plot itself.
    
    The font property of the plot title can be modified through the
    TitleTextProperty attribute. The font property of the axes titles and
    labels can be modified through the AxisTitleTextProperty and
    AxisLabelTextProperty attributes. You may also use the
    GetXAxisActor2D or GetYAxisActor2D methods to access each individual
    axis actor to modify their font properties. In the same way, the
    GetLegendBoxActor method can be used to access the legend box actor
    to modify its font properties.
    
    There are several advanced features as well. You can assign per curve
    properties (such as color and a plot symbol). (Note that each input
    dataset and/or data object creates a single curve.) Another option is
    to add a plot legend that graphically indicates the correspondence
    between the curve, curve symbols, and the data source. You can also
    exchange the x and y axes if you prefer you plot orientation that
    way.
    
    @warning
    If you are interested in plotting something other than scalar data,
    you can use the vtk data shuffling filters (e.g.,
    vtkAttributeDataToFieldDataFilter and
    vtkFieldDataToAttributeDataFilter) to convert the data into scalar
    data and/or points.
    
    @par Thanks: This class was written by: Will Schroeder, Jim Miller,
    Charles Law, Sebastien Barre, Amy Squillacote, Ken Martin, Mathieu
    Malaterre, Jeff Lee, Francois Finet, Julien Bertel, Claire Guilbaud,
    and Philippe Pebay
    
    @sa
    vtkActor2D vtkTextMapper vtkScalarBarActor vtkAxisActor2D
    vtkCubeAxesActor2D vtkAttributeDataToFieldDataFilter
    vtkFieldDataToAttributeDataFilter vtkTextProperty
    """
    def AddDataObjectInput(self, vtkDataObject):
        """
        V.AddDataObjectInput(vtkDataObject)
        C++: void AddDataObjectInput(vtkDataObject *in)
        
        Add a data object to the list of data to display.
        """
        ...
    
    def AddDataObjectInputConnection(self, vtkAlgorithmOutput):
        """
        V.AddDataObjectInputConnection(vtkAlgorithmOutput)
        C++: void AddDataObjectInputConnection(vtkAlgorithmOutput *alg)
        
        Add a data object to the list of data to display.
        """
        ...
    
    def AddDataSetInput(self, vtkDataSet, string, p_int):
        """
        V.AddDataSetInput(vtkDataSet, string, int)
        C++: void AddDataSetInput(vtkDataSet *ds, const char *arrayName,
            int component)
        V.AddDataSetInput(vtkDataSet)
        C++: void AddDataSetInput(vtkDataSet *ds)
        
        Add a dataset to the list of data to append. The array name
        specifies which point array to plot. The array must be a
        vtkDataArray subclass, i.e. a numeric array. If the array name is
        NULL, then the default scalars are used.  The array can have
        multiple components, but only the first component is ploted. Note
        that AddInputDataSet() does not setup a pipeline connection
        whereas AddInputConnection() does.
        """
        ...
    
    def AddDataSetInputConnection(self, vtkAlgorithmOutput, string, p_int):
        """
        V.AddDataSetInputConnection(vtkAlgorithmOutput, string, int)
        C++: void AddDataSetInputConnection(vtkAlgorithmOutput *in,
            const char *arrayName, int component)
        V.AddDataSetInputConnection(vtkAlgorithmOutput)
        C++: void AddDataSetInputConnection(vtkAlgorithmOutput *in)
        
        Add a dataset to the list of data to append. The array name
        specifies which point array to plot. The array must be a
        vtkDataArray subclass, i.e. a numeric array. If the array name is
        NULL, then the default scalars are used.  The array can have
        multiple components, but only the first component is ploted. Note
        that AddInputDataSet() does not setup a pipeline connection
        whereas AddInputConnection() does.
        """
        ...
    
    def AddUserCurvesPoint(self, p_float, p_float_1, p_float_2):
        """
        V.AddUserCurvesPoint(float, float, float)
        C++: virtual void AddUserCurvesPoint(double, double, double)
        
        Set plot properties
        """
        ...
    
    def AdjustTitlePositionOff(self):
        """
        V.AdjustTitlePositionOff()
        C++: virtual void AdjustTitlePositionOff()
        
        If true, the xyplot actor will adjust the position of the title
        automatically to be upper-middle. Default is true.
        """
        ...
    
    def AdjustTitlePositionOn(self):
        """
        V.AdjustTitlePositionOn()
        C++: virtual void AdjustTitlePositionOn()
        
        If true, the xyplot actor will adjust the position of the title
        automatically to be upper-middle. Default is true.
        """
        ...
    
    def ChartBorderOff(self):
        """
        V.ChartBorderOff()
        C++: virtual void ChartBorderOff()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def ChartBorderOn(self):
        """
        V.ChartBorderOn()
        C++: virtual void ChartBorderOn()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def ChartBoxOff(self):
        """
        V.ChartBoxOff()
        C++: virtual void ChartBoxOff()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the chart box.
        """
        ...
    
    def ChartBoxOn(self):
        """
        V.ChartBoxOn()
        C++: virtual void ChartBoxOn()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the chart box.
        """
        ...
    
    def ExchangeAxesOff(self):
        """
        V.ExchangeAxesOff()
        C++: virtual void ExchangeAxesOff()
        
        Enable/Disable exchange of the x-y axes (i.e., what was x becomes
        y, and vice-versa). Exchanging axes affects the labeling as well.
        """
        ...
    
    def ExchangeAxesOn(self):
        """
        V.ExchangeAxesOn()
        C++: virtual void ExchangeAxesOn()
        
        Enable/Disable exchange of the x-y axes (i.e., what was x becomes
        y, and vice-versa). Exchanging axes affects the labeling as well.
        """
        ...
    
    def GetAdjustTitlePosition(self):
        """
        V.GetAdjustTitlePosition() -> int
        C++: virtual vtkTypeBool GetAdjustTitlePosition()
        
        If true, the xyplot actor will adjust the position of the title
        automatically to be upper-middle. Default is true.
        """
        ...
    
    def GetAdjustTitlePositionMode(self):
        """
        V.GetAdjustTitlePositionMode() -> int
        C++: virtual int GetAdjustTitlePositionMode()
        
        If AdjustTitlePosition is true, the xyplot actor will adjust the
        position of the title automatically depending on the given mode,
        the mode is a combination of the Alignment flags. by default:
        vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top |
        vtkXYPlotActor::AlignAxisVCenter
        """
        ...
    
    def GetAdjustXLabels(self):
        """
        V.GetAdjustXLabels() -> int
        C++: virtual int GetAdjustXLabels()
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels.
        """
        ...
    
    def GetAdjustYLabels(self):
        """
        V.GetAdjustYLabels() -> int
        C++: virtual int GetAdjustYLabels()
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels.
        """
        ...
    
    def GetAxisLabelTextProperty(self):
        """
        V.GetAxisLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetAxisLabelTextProperty()
        
        Set/Get the labels text property of all axes. Note that each axis
        can be controlled individually through the GetX/YAxisActor2D()
        methods.
        """
        ...
    
    def GetAxisTitleTextProperty(self):
        """
        V.GetAxisTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetAxisTitleTextProperty()
        
        Set/Get the title text property of all axes. Note that each axis
        can be controlled individually through the GetX/YAxisActor2D()
        methods.
        """
        ...
    
    def GetBorder(self):
        """
        V.GetBorder() -> int
        C++: virtual int GetBorder()
        
        Set/Get the spacing between the plot window and the plot. The
        value is specified in pixels.
        """
        ...
    
    def GetBorderMaxValue(self):
        """
        V.GetBorderMaxValue() -> int
        C++: virtual int GetBorderMaxValue()
        
        Set/Get the spacing between the plot window and the plot. The
        value is specified in pixels.
        """
        ...
    
    def GetBorderMinValue(self):
        """
        V.GetBorderMinValue() -> int
        C++: virtual int GetBorderMinValue()
        
        Set/Get the spacing between the plot window and the plot. The
        value is specified in pixels.
        """
        ...
    
    def GetChartBorder(self):
        """
        V.GetChartBorder() -> int
        C++: virtual vtkTypeBool GetChartBorder()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def GetChartBox(self):
        """
        V.GetChartBox() -> int
        C++: virtual vtkTypeBool GetChartBox()
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the chart box.
        """
        ...
    
    def GetChartBoxProperty(self):
        """
        V.GetChartBoxProperty() -> vtkProperty2D
        C++: vtkProperty2D *GetChartBoxProperty()
        
        Get the box vtkProperty2D.
        """
        ...
    
    def GetDataObjectPlotMode(self):
        """
        V.GetDataObjectPlotMode() -> int
        C++: virtual int GetDataObjectPlotMode()
        
        Indicate whether to plot rows or columns. If plotting rows, then
        the dependent variables is taken from a specified row, versus
        rows (y).
        """
        ...
    
    def GetDataObjectPlotModeAsString(self):
        """
        V.GetDataObjectPlotModeAsString() -> string
        C++: const char *GetDataObjectPlotModeAsString()
        
        Indicate whether to plot rows or columns. If plotting rows, then
        the dependent variables is taken from a specified row, versus
        rows (y).
        """
        ...
    
    def GetDataObjectPlotModeMaxValue(self):
        """
        V.GetDataObjectPlotModeMaxValue() -> int
        C++: virtual int GetDataObjectPlotModeMaxValue()
        
        Indicate whether to plot rows or columns. If plotting rows, then
        the dependent variables is taken from a specified row, versus
        rows (y).
        """
        ...
    
    def GetDataObjectPlotModeMinValue(self):
        """
        V.GetDataObjectPlotModeMinValue() -> int
        C++: virtual int GetDataObjectPlotModeMinValue()
        
        Indicate whether to plot rows or columns. If plotting rows, then
        the dependent variables is taken from a specified row, versus
        rows (y).
        """
        ...
    
    def GetDataObjectXComponent(self, p_int):
        """
        V.GetDataObjectXComponent(int) -> int
        C++: int GetDataObjectXComponent(int i)
        
        Specify which component of the input data object to use as the
        independent variable for the ith input data object. (This ivar is
        ignored if plotting the index.) Note that the value is
        interpreted differently depending on DataObjectPlotMode. If the
        mode is Rows, then the value of DataObjectXComponent is the row
        number; otherwise it's the column number.
        """
        ...
    
    def GetDataObjectYComponent(self, p_int):
        """
        V.GetDataObjectYComponent(int) -> int
        C++: int GetDataObjectYComponent(int i)
        
        Specify which component of the input data object to use as the
        dependent variable for the ith input data object. (This ivar is
        ignored if plotting the index.) Note that the value is
        interpreted differently depending on DataObjectPlotMode. If the
        mode is Rows, then the value of DataObjectYComponent is the row
        number; otherwise it's the column number.
        """
        ...
    
    def GetExchangeAxes(self):
        """
        V.GetExchangeAxes() -> int
        C++: virtual vtkTypeBool GetExchangeAxes()
        
        Enable/Disable exchange of the x-y axes (i.e., what was x becomes
        y, and vice-versa). Exchanging axes affects the labeling as well.
        """
        ...
    
    def GetGlyphSize(self):
        """
        V.GetGlyphSize() -> float
        C++: virtual double GetGlyphSize()
        
        Set/Get the factor that controls how big glyphs are in the plot.
        The number is expressed as a fraction of the length of the
        diagonal of the plot bounding box.
        """
        ...
    
    def GetGlyphSizeMaxValue(self):
        """
        V.GetGlyphSizeMaxValue() -> float
        C++: virtual double GetGlyphSizeMaxValue()
        
        Set/Get the factor that controls how big glyphs are in the plot.
        The number is expressed as a fraction of the length of the
        diagonal of the plot bounding box.
        """
        ...
    
    def GetGlyphSizeMinValue(self):
        """
        V.GetGlyphSizeMinValue() -> float
        C++: virtual double GetGlyphSizeMinValue()
        
        Set/Get the factor that controls how big glyphs are in the plot.
        The number is expressed as a fraction of the length of the
        diagonal of the plot bounding box.
        """
        ...
    
    def GetGlyphSource(self):
        """
        V.GetGlyphSource() -> vtkGlyphSource2D
        C++: virtual vtkGlyphSource2D *GetGlyphSource()
        
        Retrieve handles to the legend box and glyph source. This is
        useful if you would like to change the default behavior of the
        legend box or glyph source. For example, the default glyph can be
        changed from a line to a vertex plus line, etc.)
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: const char *GetLabelFormat()
        
        Set/Get the format with which to print the labels . This sets
        both X and Y label formats. GetLabelFormat() returns X label
        format.
        """
        ...
    
    def GetLegend(self):
        """
        V.GetLegend() -> int
        C++: virtual vtkTypeBool GetLegend()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def GetLegendActor(self):
        """
        V.GetLegendActor() -> vtkLegendBoxActor
        C++: virtual vtkLegendBoxActor *GetLegendActor()
        
        Retrieve handles to the legend box and glyph source. This is
        useful if you would like to change the default behavior of the
        legend box or glyph source. For example, the default glyph can be
        changed from a line to a vertex plus line, etc.)
        """
        ...
    
    def GetLegendPosition(self):
        """
        V.GetLegendPosition() -> (float, float)
        C++: virtual double *GetLegendPosition()
        
        Use these methods to control the position of the legend. The
        variables LegendPosition and LegendPosition2 define the
        lower-left and upper-right position of the legend. The
        coordinates are expressed as normalized values with respect to
        the rectangle defined by PositionCoordinate and
        Position2Coordinate. Note that LegendPosition2 is relative to
        LegendPosition.
        """
        ...
    
    def GetLegendPosition2(self):
        """
        V.GetLegendPosition2() -> (float, float)
        C++: virtual double *GetLegendPosition2()
        
        Use these methods to control the position of the legend. The
        variables LegendPosition and LegendPosition2 define the
        lower-left and upper-right position of the legend. The
        coordinates are expressed as normalized values with respect to
        the rectangle defined by PositionCoordinate and
        Position2Coordinate. Note that LegendPosition2 is relative to
        LegendPosition.
        """
        ...
    
    def GetLogx(self):
        """
        V.GetLogx() -> int
        C++: virtual vtkTypeBool GetLogx()
        
        Enable/Disable plotting of Log of x-values.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Take into account the modified time of internal helper classes.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfXLabels(self):
        """
        V.GetNumberOfXLabels() -> int
        C++: virtual int GetNumberOfXLabels()
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def GetNumberOfXLabelsMaxValue(self):
        """
        V.GetNumberOfXLabelsMaxValue() -> int
        C++: virtual int GetNumberOfXLabelsMaxValue()
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def GetNumberOfXLabelsMinValue(self):
        """
        V.GetNumberOfXLabelsMinValue() -> int
        C++: virtual int GetNumberOfXLabelsMinValue()
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def GetNumberOfXMinorTicks(self):
        """
        V.GetNumberOfXMinorTicks() -> int
        C++: int GetNumberOfXMinorTicks()
        
        Set/Get the number of minor ticks in X or Y.
        """
        ...
    
    def GetNumberOfYLabels(self):
        """
        V.GetNumberOfYLabels() -> int
        C++: virtual int GetNumberOfYLabels()
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def GetNumberOfYLabelsMaxValue(self):
        """
        V.GetNumberOfYLabelsMaxValue() -> int
        C++: virtual int GetNumberOfYLabelsMaxValue()
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def GetNumberOfYLabelsMinValue(self):
        """
        V.GetNumberOfYLabelsMinValue() -> int
        C++: virtual int GetNumberOfYLabelsMinValue()
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def GetNumberOfYMinorTicks(self):
        """
        V.GetNumberOfYMinorTicks() -> int
        C++: int GetNumberOfYMinorTicks()
        
        Set/Get the number of minor ticks in X or Y.
        """
        ...
    
    def GetPlotColor(self, p_int):
        """
        V.GetPlotColor(int) -> (float, float, float)
        C++: double *GetPlotColor(int i)
        """
        ...
    
    def GetPlotCoordinate(self):
        """
        V.GetPlotCoordinate() -> (float, float)
        C++: virtual double *GetPlotCoordinate()
        
        An alternate form of ViewportToPlotCoordinate() above. This
        method inputs the viewport coordinate pair (defined by the ivar
        ViewportCoordinate)and then stores them in the ivar
        PlotCoordinate.
        """
        ...
    
    def GetPlotCurveLines(self):
        """
        V.GetPlotCurveLines() -> int
        C++: virtual vtkTypeBool GetPlotCurveLines()
        """
        ...
    
    def GetPlotCurvePoints(self):
        """
        V.GetPlotCurvePoints() -> int
        C++: virtual vtkTypeBool GetPlotCurvePoints()
        """
        ...
    
    def GetPlotLabel(self, p_int):
        """
        V.GetPlotLabel(int) -> string
        C++: const char *GetPlotLabel(int i)
        """
        ...
    
    def GetPlotLines(self, p_int):
        """
        V.GetPlotLines(int) -> int
        C++: int GetPlotLines(int i)
        V.GetPlotLines() -> int
        C++: virtual vtkTypeBool GetPlotLines()
        """
        ...
    
    def GetPlotPoints(self, p_int):
        """
        V.GetPlotPoints(int) -> int
        C++: int GetPlotPoints(int i)
        V.GetPlotPoints() -> int
        C++: virtual vtkTypeBool GetPlotPoints()
        """
        ...
    
    def GetPlotSymbol(self, p_int):
        """
        V.GetPlotSymbol(int) -> vtkPolyData
        C++: vtkPolyData *GetPlotSymbol(int i)
        """
        ...
    
    def GetPointComponent(self, p_int):
        """
        V.GetPointComponent(int) -> int
        C++: int GetPointComponent(int i)
        
        If plotting points by value, which component to use to determine
        the value. This sets a value per each input dataset (i.e., the
        ith dataset).
        """
        ...
    
    def GetReferenceXValue(self):
        """
        V.GetReferenceXValue() -> float
        C++: virtual double GetReferenceXValue()
        
        Set/Get the value for the X reference line
        """
        ...
    
    def GetReferenceYValue(self):
        """
        V.GetReferenceYValue() -> float
        C++: virtual double GetReferenceYValue()
        
        Set/Get the value for the Y reference line
        """
        ...
    
    def GetReverseXAxis(self):
        """
        V.GetReverseXAxis() -> int
        C++: virtual vtkTypeBool GetReverseXAxis()
        
        Normally the x-axis is plotted from minimum to maximum. Setting
        this instance variable causes the x-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        x-axis even if ExchangeAxes is set.
        """
        ...
    
    def GetReverseYAxis(self):
        """
        V.GetReverseYAxis() -> int
        C++: virtual vtkTypeBool GetReverseYAxis()
        
        Normally the y-axis is plotted from minimum to maximum. Setting
        this instance variable causes the y-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        y-axis even if ExchangeAxes is set.
        """
        ...
    
    def GetShowReferenceXLine(self):
        """
        V.GetShowReferenceXLine() -> int
        C++: virtual vtkTypeBool GetShowReferenceXLine()
        
        Set/Get if the X reference line is visible. hidden by default
        """
        ...
    
    def GetShowReferenceYLine(self):
        """
        V.GetShowReferenceYLine() -> int
        C++: virtual vtkTypeBool GetShowReferenceYLine()
        
        Set/Get if the Y reference line is visible. hidden by default
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set/Get the title of the x-y plot.
        """
        ...
    
    def GetTitlePosition(self):
        """
        V.GetTitlePosition() -> (float, float)
        C++: virtual double *GetTitlePosition()
        
        Set/Get the position of the title. This has no effect if
        AdjustTitlePosition is true.
        """
        ...
    
    def GetTitleTextProperty(self):
        """
        V.GetTitleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTitleTextProperty()
        
        Set/Get the title text property.
        """
        ...
    
    def GetViewportCoordinate(self):
        """
        V.GetViewportCoordinate() -> (float, float)
        C++: virtual double *GetViewportCoordinate()
        
        An alternate form of PlotToViewportCoordinate() above. This
        method inputs the plot coordinate pair (defined in the ivar
        PlotCoordinate) and then stores them in the ivar
        ViewportCoordinate. (This method can be wrapped.)
        """
        ...
    
    def GetXAxisActor2D(self):
        """
        V.GetXAxisActor2D() -> vtkAxisActor2D
        C++: vtkAxisActor2D *GetXAxisActor2D()
        
        Retrieve handles to the X and Y axis (so that you can set their
        text properties for example)
        """
        ...
    
    def GetXLabelFormat(self):
        """
        V.GetXLabelFormat() -> string
        C++: virtual char *GetXLabelFormat()
        
        Set/Get the format with which to print the X label.
        """
        ...
    
    def GetXRange(self):
        """
        V.GetXRange() -> (float, float)
        C++: virtual double *GetXRange()
        
        Set the plot range (range of independent and dependent variables)
        to plot. Data outside of the range will be clipped. If the plot
        range of either the x or y variables is set to (v1,v2), where v1
        == v2, then the range will be computed automatically. Note that
        the x-range values should be consistent with the way the
        independent variable is created (via INDEX, DISTANCE, or
        ARC_LENGTH).
        """
        ...
    
    def GetXTitle(self):
        """
        V.GetXTitle() -> string
        C++: virtual char *GetXTitle()
        
        Set/Get the title of the x axis
        """
        ...
    
    def GetXTitlePosition(self):
        """
        V.GetXTitlePosition() -> float
        C++: double GetXTitlePosition()
        
        Set/Get the position of the title of X axis.
        """
        ...
    
    def GetXValues(self):
        """
        V.GetXValues() -> int
        C++: virtual int GetXValues()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def GetXValuesAsString(self):
        """
        V.GetXValuesAsString() -> string
        C++: const char *GetXValuesAsString()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def GetXValuesMaxValue(self):
        """
        V.GetXValuesMaxValue() -> int
        C++: virtual int GetXValuesMaxValue()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def GetXValuesMinValue(self):
        """
        V.GetXValuesMinValue() -> int
        C++: virtual int GetXValuesMinValue()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def GetYAxisActor2D(self):
        """
        V.GetYAxisActor2D() -> vtkAxisActor2D
        C++: vtkAxisActor2D *GetYAxisActor2D()
        
        Retrieve handles to the X and Y axis (so that you can set their
        text properties for example)
        """
        ...
    
    def GetYLabelFormat(self):
        """
        V.GetYLabelFormat() -> string
        C++: virtual char *GetYLabelFormat()
        
        Set/Get the format with which to print the Y label.
        """
        ...
    
    def GetYRange(self):
        """
        V.GetYRange() -> (float, float)
        C++: virtual double *GetYRange()
        
        Set the plot range (range of independent and dependent variables)
        to plot. Data outside of the range will be clipped. If the plot
        range of either the x or y variables is set to (v1,v2), where v1
        == v2, then the range will be computed automatically. Note that
        the x-range values should be consistent with the way the
        independent variable is created (via INDEX, DISTANCE, or
        ARC_LENGTH).
        """
        ...
    
    def GetYTitle(self):
        """
        V.GetYTitle() -> string
        C++: char *GetYTitle()
        
        Set/Get the title of the y axis
        """
        ...
    
    def GetYTitlePosition(self):
        """
        V.GetYTitlePosition() -> int
        C++: virtual int GetYTitlePosition()
        
        Set/Get the position of the title of Y axis.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsInPlot(self, vtkViewport, p_float, p_float_1):
        """
        V.IsInPlot(vtkViewport, float, float) -> int
        C++: int IsInPlot(vtkViewport *viewport, double u, double v)
        
        Is the specified viewport position within the plot area (as
        opposed to the region used by the plot plus the labels)?
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LegendOff(self):
        """
        V.LegendOff()
        C++: virtual void LegendOff()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def LegendOn(self):
        """
        V.LegendOn()
        C++: virtual void LegendOn()
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def LogxOff(self):
        """
        V.LogxOff()
        C++: virtual void LogxOff()
        
        Enable/Disable plotting of Log of x-values.
        """
        ...
    
    def LogxOn(self):
        """
        V.LogxOn()
        C++: virtual void LogxOn()
        
        Enable/Disable plotting of Log of x-values.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXYPlotActor
        C++: vtkXYPlotActor *NewInstance()
        """
        ...
    
    def PlotCurveLinesOff(self):
        """
        V.PlotCurveLinesOff()
        C++: virtual void PlotCurveLinesOff()
        """
        ...
    
    def PlotCurveLinesOn(self):
        """
        V.PlotCurveLinesOn()
        C++: virtual void PlotCurveLinesOn()
        """
        ...
    
    def PlotCurvePointsOff(self):
        """
        V.PlotCurvePointsOff()
        C++: virtual void PlotCurvePointsOff()
        """
        ...
    
    def PlotCurvePointsOn(self):
        """
        V.PlotCurvePointsOn()
        C++: virtual void PlotCurvePointsOn()
        """
        ...
    
    def PlotLinesOff(self):
        """
        V.PlotLinesOff()
        C++: virtual void PlotLinesOff()
        
        Set/Get whether the lines are rendered.  The line width can be
        set in the property object.
        """
        ...
    
    def PlotLinesOn(self):
        """
        V.PlotLinesOn()
        C++: virtual void PlotLinesOn()
        
        Set/Get whether the lines are rendered.  The line width can be
        set in the property object.
        """
        ...
    
    def PlotPointsOff(self):
        """
        V.PlotPointsOff()
        C++: virtual void PlotPointsOff()
        
        Set/Get whether the points are rendered.  The point size can be
        set in the property object. This is a global flag which affects
        the plot only if per curve symbols are not defined.
        """
        ...
    
    def PlotPointsOn(self):
        """
        V.PlotPointsOn()
        C++: virtual void PlotPointsOn()
        
        Set/Get whether the points are rendered.  The point size can be
        set in the property object. This is a global flag which affects
        the plot only if per curve symbols are not defined.
        """
        ...
    
    def PlotToViewportCoordinate(self, vtkViewport, p_float, p_float_1):
        """
        V.PlotToViewportCoordinate(vtkViewport, float, float)
        C++: void PlotToViewportCoordinate(vtkViewport *viewport,
            double &u, double &v)
        V.PlotToViewportCoordinate(vtkViewport)
        C++: void PlotToViewportCoordinate(vtkViewport *viewport)
        
        Given a plot coordinate, return the viewpoint position
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RemoveAllActiveCurves(self):
        """
        V.RemoveAllActiveCurves()
        C++: virtual void RemoveAllActiveCurves()
        
        Set plot properties
        """
        ...
    
    def RemoveAllDataSetInputConnections(self):
        """
        V.RemoveAllDataSetInputConnections()
        C++: void RemoveAllDataSetInputConnections()
        
        This removes all of the data set inputs, but does not change the
        data object inputs.
        """
        ...
    
    def RemoveDataObjectInput(self, vtkDataObject):
        """
        V.RemoveDataObjectInput(vtkDataObject)
        C++: void RemoveDataObjectInput(vtkDataObject *in)
        
        Remove a dataset from the list of data to display.
        """
        ...
    
    def RemoveDataObjectInputConnection(self, vtkAlgorithmOutput):
        """
        V.RemoveDataObjectInputConnection(vtkAlgorithmOutput)
        C++: void RemoveDataObjectInputConnection(
            vtkAlgorithmOutput *aout)
        
        Remove a dataset from the list of data to display.
        """
        ...
    
    def RemoveDataSetInput(self, vtkDataSet, string, p_int):
        """
        V.RemoveDataSetInput(vtkDataSet, string, int)
        C++: void RemoveDataSetInput(vtkDataSet *ds,
            const char *arrayName, int component)
        V.RemoveDataSetInput(vtkDataSet)
        C++: void RemoveDataSetInput(vtkDataSet *ds)
        
        Remove a dataset from the list of data to append.
        """
        ...
    
    def RemoveDataSetInputConnection(self, vtkAlgorithmOutput, string, p_int):
        """
        V.RemoveDataSetInputConnection(vtkAlgorithmOutput, string, int)
        C++: void RemoveDataSetInputConnection(vtkAlgorithmOutput *in,
            const char *arrayName, int component)
        V.RemoveDataSetInputConnection(vtkAlgorithmOutput)
        C++: void RemoveDataSetInputConnection(vtkAlgorithmOutput *in)
        
        Remove a dataset from the list of data to append.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the x-y
        plot.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the x-y
        plot.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS. Draw the x-y
        plot.
        """
        ...
    
    def ReverseXAxisOff(self):
        """
        V.ReverseXAxisOff()
        C++: virtual void ReverseXAxisOff()
        
        Normally the x-axis is plotted from minimum to maximum. Setting
        this instance variable causes the x-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        x-axis even if ExchangeAxes is set.
        """
        ...
    
    def ReverseXAxisOn(self):
        """
        V.ReverseXAxisOn()
        C++: virtual void ReverseXAxisOn()
        
        Normally the x-axis is plotted from minimum to maximum. Setting
        this instance variable causes the x-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        x-axis even if ExchangeAxes is set.
        """
        ...
    
    def ReverseYAxisOff(self):
        """
        V.ReverseYAxisOff()
        C++: virtual void ReverseYAxisOff()
        
        Normally the y-axis is plotted from minimum to maximum. Setting
        this instance variable causes the y-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        y-axis even if ExchangeAxes is set.
        """
        ...
    
    def ReverseYAxisOn(self):
        """
        V.ReverseYAxisOn()
        C++: virtual void ReverseYAxisOn()
        
        Normally the y-axis is plotted from minimum to maximum. Setting
        this instance variable causes the y-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        y-axis even if ExchangeAxes is set.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXYPlotActor
        C++: static vtkXYPlotActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAdjustTitlePosition(self, p_int):
        """
        V.SetAdjustTitlePosition(int)
        C++: virtual void SetAdjustTitlePosition(vtkTypeBool _arg)
        
        If true, the xyplot actor will adjust the position of the title
        automatically to be upper-middle. Default is true.
        """
        ...
    
    def SetAdjustTitlePositionMode(self, p_int):
        """
        V.SetAdjustTitlePositionMode(int)
        C++: virtual void SetAdjustTitlePositionMode(int _arg)
        
        If AdjustTitlePosition is true, the xyplot actor will adjust the
        position of the title automatically depending on the given mode,
        the mode is a combination of the Alignment flags. by default:
        vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top |
        vtkXYPlotActor::AlignAxisVCenter
        """
        ...
    
    def SetAdjustXLabels(self, p_int):
        """
        V.SetAdjustXLabels(int)
        C++: void SetAdjustXLabels(int adjust)
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels.
        """
        ...
    
    def SetAdjustYLabels(self, p_int):
        """
        V.SetAdjustYLabels(int)
        C++: void SetAdjustYLabels(int adjust)
        
        Set/Get the flag that controls whether the labels and ticks are
        adjusted for "nice" numerical values to make it easier to read
        the labels. The adjustment is based in the Range instance
        variable. Call GetAdjustedRange and GetAdjustedNumberOfLabels to
        get the adjusted range and number of labels.
        """
        ...
    
    def SetAxisLabelBold(self, p_int):
        """
        V.SetAxisLabelBold(int)
        C++: virtual void SetAxisLabelBold(int)
        
        Set axis label properties
        """
        ...
    
    def SetAxisLabelColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisLabelColor(float, float, float)
        C++: virtual void SetAxisLabelColor(double, double, double)
        
        Set axis label properties
        """
        ...
    
    def SetAxisLabelFontFamily(self, p_int):
        """
        V.SetAxisLabelFontFamily(int)
        C++: virtual void SetAxisLabelFontFamily(int)
        
        Set axis label properties
        """
        ...
    
    def SetAxisLabelFontSize(self, p_int):
        """
        V.SetAxisLabelFontSize(int)
        C++: virtual void SetAxisLabelFontSize(int)
        
        Set axis label properties
        """
        ...
    
    def SetAxisLabelItalic(self, p_int):
        """
        V.SetAxisLabelItalic(int)
        C++: virtual void SetAxisLabelItalic(int)
        
        Set axis label properties
        """
        ...
    
    def SetAxisLabelJustification(self, p_int):
        """
        V.SetAxisLabelJustification(int)
        C++: virtual void SetAxisLabelJustification(int)
        
        Set axis label properties
        """
        ...
    
    def SetAxisLabelShadow(self, p_int):
        """
        V.SetAxisLabelShadow(int)
        C++: virtual void SetAxisLabelShadow(int)
        
        Set axis label properties
        """
        ...
    
    def SetAxisLabelTextProperty(self, vtkTextProperty):
        """
        V.SetAxisLabelTextProperty(vtkTextProperty)
        C++: virtual void SetAxisLabelTextProperty(vtkTextProperty *p)
        
        Set/Get the labels text property of all axes. Note that each axis
        can be controlled individually through the GetX/YAxisActor2D()
        methods.
        """
        ...
    
    def SetAxisLabelVerticalJustification(self, p_int):
        """
        V.SetAxisLabelVerticalJustification(int)
        C++: virtual void SetAxisLabelVerticalJustification(int)
        
        Set axis label properties
        """
        ...
    
    def SetAxisTitleBold(self, p_int):
        """
        V.SetAxisTitleBold(int)
        C++: virtual void SetAxisTitleBold(int)
        
        Set axis title properties
        """
        ...
    
    def SetAxisTitleColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisTitleColor(float, float, float)
        C++: virtual void SetAxisTitleColor(double, double, double)
        
        Set axis title properties
        """
        ...
    
    def SetAxisTitleFontFamily(self, p_int):
        """
        V.SetAxisTitleFontFamily(int)
        C++: virtual void SetAxisTitleFontFamily(int)
        
        Set axis title properties
        """
        ...
    
    def SetAxisTitleFontSize(self, p_int):
        """
        V.SetAxisTitleFontSize(int)
        C++: virtual void SetAxisTitleFontSize(int)
        
        Set axis title properties
        """
        ...
    
    def SetAxisTitleItalic(self, p_int):
        """
        V.SetAxisTitleItalic(int)
        C++: virtual void SetAxisTitleItalic(int)
        
        Set axis title properties
        """
        ...
    
    def SetAxisTitleJustification(self, p_int):
        """
        V.SetAxisTitleJustification(int)
        C++: virtual void SetAxisTitleJustification(int)
        
        Set axis title properties
        """
        ...
    
    def SetAxisTitleShadow(self, p_int):
        """
        V.SetAxisTitleShadow(int)
        C++: virtual void SetAxisTitleShadow(int)
        
        Set axis title properties
        """
        ...
    
    def SetAxisTitleTextProperty(self, vtkTextProperty):
        """
        V.SetAxisTitleTextProperty(vtkTextProperty)
        C++: virtual void SetAxisTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property of all axes. Note that each axis
        can be controlled individually through the GetX/YAxisActor2D()
        methods.
        """
        ...
    
    def SetAxisTitleVerticalJustification(self, p_int):
        """
        V.SetAxisTitleVerticalJustification(int)
        C++: virtual void SetAxisTitleVerticalJustification(int)
        
        Set axis title properties
        """
        ...
    
    def SetBorder(self, p_int):
        """
        V.SetBorder(int)
        C++: virtual void SetBorder(int _arg)
        
        Set/Get the spacing between the plot window and the plot. The
        value is specified in pixels.
        """
        ...
    
    def SetChartBorder(self, p_int):
        """
        V.SetChartBorder(int)
        C++: virtual void SetChartBorder(vtkTypeBool _arg)
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the legend box.
        """
        ...
    
    def SetChartBox(self, p_int):
        """
        V.SetChartBox(int)
        C++: virtual void SetChartBox(vtkTypeBool _arg)
        
        Set/Get the flag that controls whether a box will be drawn/filled
        corresponding to the chart box.
        """
        ...
    
    def SetDataObjectPlotMode(self, p_int):
        """
        V.SetDataObjectPlotMode(int)
        C++: virtual void SetDataObjectPlotMode(int _arg)
        
        Indicate whether to plot rows or columns. If plotting rows, then
        the dependent variables is taken from a specified row, versus
        rows (y).
        """
        ...
    
    def SetDataObjectPlotModeToColumns(self):
        """
        V.SetDataObjectPlotModeToColumns()
        C++: void SetDataObjectPlotModeToColumns()
        
        Indicate whether to plot rows or columns. If plotting rows, then
        the dependent variables is taken from a specified row, versus
        rows (y).
        """
        ...
    
    def SetDataObjectPlotModeToRows(self):
        """
        V.SetDataObjectPlotModeToRows()
        C++: void SetDataObjectPlotModeToRows()
        
        Indicate whether to plot rows or columns. If plotting rows, then
        the dependent variables is taken from a specified row, versus
        rows (y).
        """
        ...
    
    def SetDataObjectXComponent(self, p_int, p_int_1):
        """
        V.SetDataObjectXComponent(int, int)
        C++: void SetDataObjectXComponent(int i, int comp)
        
        Specify which component of the input data object to use as the
        independent variable for the ith input data object. (This ivar is
        ignored if plotting the index.) Note that the value is
        interpreted differently depending on DataObjectPlotMode. If the
        mode is Rows, then the value of DataObjectXComponent is the row
        number; otherwise it's the column number.
        """
        ...
    
    def SetDataObjectYComponent(self, p_int, p_int_1):
        """
        V.SetDataObjectYComponent(int, int)
        C++: void SetDataObjectYComponent(int i, int comp)
        
        Specify which component of the input data object to use as the
        dependent variable for the ith input data object. (This ivar is
        ignored if plotting the index.) Note that the value is
        interpreted differently depending on DataObjectPlotMode. If the
        mode is Rows, then the value of DataObjectYComponent is the row
        number; otherwise it's the column number.
        """
        ...
    
    def SetExchangeAxes(self, p_int):
        """
        V.SetExchangeAxes(int)
        C++: virtual void SetExchangeAxes(vtkTypeBool _arg)
        
        Enable/Disable exchange of the x-y axes (i.e., what was x becomes
        y, and vice-versa). Exchanging axes affects the labeling as well.
        """
        ...
    
    def SetGlyphSize(self, p_float):
        """
        V.SetGlyphSize(float)
        C++: virtual void SetGlyphSize(double _arg)
        
        Set/Get the factor that controls how big glyphs are in the plot.
        The number is expressed as a fraction of the length of the
        diagonal of the plot bounding box.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *)
        
        Set/Get the format with which to print the labels . This sets
        both X and Y label formats. GetLabelFormat() returns X label
        format.
        """
        ...
    
    def SetLegend(self, p_int):
        """
        V.SetLegend(int)
        C++: virtual void SetLegend(vtkTypeBool _arg)
        
        Enable/Disable the creation of a legend. If on, the legend labels
        will be created automatically unless the per plot legend symbol
        has been set.
        """
        ...
    
    def SetLegendBackgroundColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetLegendBackgroundColor(float, float, float)
        C++: virtual void SetLegendBackgroundColor(double, double, double)
        
        Set legend properties
        """
        ...
    
    def SetLegendBorder(self, p_int):
        """
        V.SetLegendBorder(int)
        C++: virtual void SetLegendBorder(int)
        
        Set legend properties
        """
        ...
    
    def SetLegendBox(self, p_int):
        """
        V.SetLegendBox(int)
        C++: virtual void SetLegendBox(int)
        
        Set legend properties
        """
        ...
    
    def SetLegendPosition(self, p_float, p_float_1):
        """
        V.SetLegendPosition(float, float)
        C++: virtual void SetLegendPosition(double _arg1, double _arg2)
        V.SetLegendPosition((float, float))
        C++: void SetLegendPosition(const double _arg[2])
        
        Use these methods to control the position of the legend. The
        variables LegendPosition and LegendPosition2 define the
        lower-left and upper-right position of the legend. The
        coordinates are expressed as normalized values with respect to
        the rectangle defined by PositionCoordinate and
        Position2Coordinate. Note that LegendPosition2 is relative to
        LegendPosition.
        """
        ...
    
    def SetLegendPosition2(self, p_float, p_float_1):
        """
        V.SetLegendPosition2(float, float)
        C++: virtual void SetLegendPosition2(double _arg1, double _arg2)
        V.SetLegendPosition2((float, float))
        C++: void SetLegendPosition2(const double _arg[2])
        
        Use these methods to control the position of the legend. The
        variables LegendPosition and LegendPosition2 define the
        lower-left and upper-right position of the legend. The
        coordinates are expressed as normalized values with respect to
        the rectangle defined by PositionCoordinate and
        Position2Coordinate. Note that LegendPosition2 is relative to
        LegendPosition.
        """
        ...
    
    def SetLegendUseBackground(self, p_int):
        """
        V.SetLegendUseBackground(int)
        C++: virtual void SetLegendUseBackground(int)
        
        Set legend properties
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: virtual void SetLineWidth(double)
        
        Set plot properties
        """
        ...
    
    def SetLogx(self, p_int):
        """
        V.SetLogx(int)
        C++: virtual void SetLogx(vtkTypeBool _arg)
        
        Enable/Disable plotting of Log of x-values.
        """
        ...
    
    def SetNumberOfLabels(self, p_int):
        """
        V.SetNumberOfLabels(int)
        C++: void SetNumberOfLabels(int num)
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def SetNumberOfXLabels(self, p_int):
        """
        V.SetNumberOfXLabels(int)
        C++: virtual void SetNumberOfXLabels(int _arg)
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def SetNumberOfXMinorTicks(self, p_int):
        """
        V.SetNumberOfXMinorTicks(int)
        C++: void SetNumberOfXMinorTicks(int num)
        
        Set/Get the number of minor ticks in X or Y.
        """
        ...
    
    def SetNumberOfYLabels(self, p_int):
        """
        V.SetNumberOfYLabels(int)
        C++: virtual void SetNumberOfYLabels(int _arg)
        
        Set/Get the number of annotation labels to show along the x and y
        axes. This values is a suggestion: the number of labels may vary
        depending on the particulars of the data. The convenience method
        SetNumberOfLabels() sets the number of x and y labels to the same
        value.
        """
        ...
    
    def SetNumberOfYMinorTicks(self, p_int):
        """
        V.SetNumberOfYMinorTicks(int)
        C++: void SetNumberOfYMinorTicks(int num)
        
        Set/Get the number of minor ticks in X or Y.
        """
        ...
    
    def SetPlotColor(self, p_int, p_float, p_float_1, p_float_2):
        """
        V.SetPlotColor(int, float, float, float)
        C++: void SetPlotColor(int i, double r, double g, double b)
        V.SetPlotColor(int, (float, float, float))
        C++: void SetPlotColor(int i, const double color[3])
        """
        ...
    
    def SetPlotCoordinate(self, p_float, p_float_1):
        """
        V.SetPlotCoordinate(float, float)
        C++: virtual void SetPlotCoordinate(double _arg1, double _arg2)
        V.SetPlotCoordinate((float, float))
        C++: void SetPlotCoordinate(const double _arg[2])
        
        An alternate form of ViewportToPlotCoordinate() above. This
        method inputs the viewport coordinate pair (defined by the ivar
        ViewportCoordinate)and then stores them in the ivar
        PlotCoordinate.
        """
        ...
    
    def SetPlotCurveLines(self, p_int):
        """
        V.SetPlotCurveLines(int)
        C++: virtual void SetPlotCurveLines(vtkTypeBool _arg)
        """
        ...
    
    def SetPlotCurvePoints(self, p_int):
        """
        V.SetPlotCurvePoints(int)
        C++: virtual void SetPlotCurvePoints(vtkTypeBool _arg)
        """
        ...
    
    def SetPlotGlyphType(self, p_int, p_int_1):
        """
        V.SetPlotGlyphType(int, int)
        C++: virtual void SetPlotGlyphType(int, int)
        
        Set plot properties
        """
        ...
    
    def SetPlotLabel(self, p_int, string):
        """
        V.SetPlotLabel(int, string)
        C++: void SetPlotLabel(int i, const char *label)
        """
        ...
    
    def SetPlotLines(self, p_int, p_int_1):
        """
        V.SetPlotLines(int, int)
        C++: void SetPlotLines(int i, int)
        V.SetPlotLines(int)
        C++: virtual void SetPlotLines(vtkTypeBool _arg)
        """
        ...
    
    def SetPlotPoints(self, p_int, p_int_1):
        """
        V.SetPlotPoints(int, int)
        C++: void SetPlotPoints(int i, int)
        V.SetPlotPoints(int)
        C++: virtual void SetPlotPoints(vtkTypeBool _arg)
        """
        ...
    
    def SetPlotRange(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetPlotRange(float, float, float, float)
        C++: void SetPlotRange(double xmin, double ymin, double xmax,
            double ymax)
        
        Set the plot range (range of independent and dependent variables)
        to plot. Data outside of the range will be clipped. If the plot
        range of either the x or y variables is set to (v1,v2), where v1
        == v2, then the range will be computed automatically. Note that
        the x-range values should be consistent with the way the
        independent variable is created (via INDEX, DISTANCE, or
        ARC_LENGTH).
        """
        ...
    
    def SetPlotSymbol(self, p_int, vtkPolyData):
        """
        V.SetPlotSymbol(int, vtkPolyData)
        C++: void SetPlotSymbol(int i, vtkPolyData *input)
        """
        ...
    
    def SetPointComponent(self, p_int, p_int_1):
        """
        V.SetPointComponent(int, int)
        C++: void SetPointComponent(int i, int comp)
        
        If plotting points by value, which component to use to determine
        the value. This sets a value per each input dataset (i.e., the
        ith dataset).
        """
        ...
    
    def SetReferenceXValue(self, p_float):
        """
        V.SetReferenceXValue(float)
        C++: virtual void SetReferenceXValue(double _arg)
        
        Set/Get the value for the X reference line
        """
        ...
    
    def SetReferenceYValue(self, p_float):
        """
        V.SetReferenceYValue(float)
        C++: virtual void SetReferenceYValue(double _arg)
        
        Set/Get the value for the Y reference line
        """
        ...
    
    def SetReverseXAxis(self, p_int):
        """
        V.SetReverseXAxis(int)
        C++: virtual void SetReverseXAxis(vtkTypeBool _arg)
        
        Normally the x-axis is plotted from minimum to maximum. Setting
        this instance variable causes the x-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        x-axis even if ExchangeAxes is set.
        """
        ...
    
    def SetReverseYAxis(self, p_int):
        """
        V.SetReverseYAxis(int)
        C++: virtual void SetReverseYAxis(vtkTypeBool _arg)
        
        Normally the y-axis is plotted from minimum to maximum. Setting
        this instance variable causes the y-axis to be plotted from
        maximum to minimum. Note that boolean always applies to the
        y-axis even if ExchangeAxes is set.
        """
        ...
    
    def SetShowReferenceXLine(self, p_int):
        """
        V.SetShowReferenceXLine(int)
        C++: virtual void SetShowReferenceXLine(vtkTypeBool _arg)
        
        Set/Get if the X reference line is visible. hidden by default
        """
        ...
    
    def SetShowReferenceYLine(self, p_int):
        """
        V.SetShowReferenceYLine(int)
        C++: virtual void SetShowReferenceYLine(vtkTypeBool _arg)
        
        Set/Get if the Y reference line is visible. hidden by default
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set/Get the title of the x-y plot.
        """
        ...
    
    def SetTitleBold(self, p_int):
        """
        V.SetTitleBold(int)
        C++: virtual void SetTitleBold(int)
        
        Set title properties
        """
        ...
    
    def SetTitleColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetTitleColor(float, float, float)
        C++: virtual void SetTitleColor(double, double, double)
        
        Set title properties
        """
        ...
    
    def SetTitleFontFamily(self, p_int):
        """
        V.SetTitleFontFamily(int)
        C++: virtual void SetTitleFontFamily(int)
        
        Set title properties
        """
        ...
    
    def SetTitleFontSize(self, p_int):
        """
        V.SetTitleFontSize(int)
        C++: virtual void SetTitleFontSize(int)
        
        Set title properties
        """
        ...
    
    def SetTitleItalic(self, p_int):
        """
        V.SetTitleItalic(int)
        C++: virtual void SetTitleItalic(int)
        
        Set title properties
        """
        ...
    
    def SetTitleJustification(self, p_int):
        """
        V.SetTitleJustification(int)
        C++: virtual void SetTitleJustification(int)
        
        Set title properties
        """
        ...
    
    def SetTitlePosition(self, p_float, p_float_1):
        """
        V.SetTitlePosition(float, float)
        C++: virtual void SetTitlePosition(double _arg1, double _arg2)
        V.SetTitlePosition((float, float))
        C++: void SetTitlePosition(const double _arg[2])
        
        Set/Get the position of the title. This has no effect if
        AdjustTitlePosition is true.
        """
        ...
    
    def SetTitleShadow(self, p_int):
        """
        V.SetTitleShadow(int)
        C++: virtual void SetTitleShadow(int)
        
        Set title properties
        """
        ...
    
    def SetTitleTextProperty(self, vtkTextProperty):
        """
        V.SetTitleTextProperty(vtkTextProperty)
        C++: virtual void SetTitleTextProperty(vtkTextProperty *p)
        
        Set/Get the title text property.
        """
        ...
    
    def SetTitleVerticalJustification(self, p_int):
        """
        V.SetTitleVerticalJustification(int)
        C++: virtual void SetTitleVerticalJustification(int)
        
        Set title properties
        """
        ...
    
    def SetViewportCoordinate(self, p_float, p_float_1):
        """
        V.SetViewportCoordinate(float, float)
        C++: virtual void SetViewportCoordinate(double _arg1,
            double _arg2)
        V.SetViewportCoordinate((float, float))
        C++: void SetViewportCoordinate(const double _arg[2])
        
        An alternate form of PlotToViewportCoordinate() above. This
        method inputs the plot coordinate pair (defined in the ivar
        PlotCoordinate) and then stores them in the ivar
        ViewportCoordinate. (This method can be wrapped.)
        """
        ...
    
    def SetXAxisColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetXAxisColor(float, float, float)
        C++: virtual void SetXAxisColor(double, double, double)
        
        Set axes properties
        """
        ...
    
    def SetXLabelFormat(self, string):
        """
        V.SetXLabelFormat(string)
        C++: virtual void SetXLabelFormat(const char *)
        
        Set/Get the format with which to print the X label.
        """
        ...
    
    def SetXRange(self, p_float, p_float_1):
        """
        V.SetXRange(float, float)
        C++: virtual void SetXRange(double _arg1, double _arg2)
        V.SetXRange((float, float))
        C++: void SetXRange(const double _arg[2])
        
        Set the plot range (range of independent and dependent variables)
        to plot. Data outside of the range will be clipped. If the plot
        range of either the x or y variables is set to (v1,v2), where v1
        == v2, then the range will be computed automatically. Note that
        the x-range values should be consistent with the way the
        independent variable is created (via INDEX, DISTANCE, or
        ARC_LENGTH).
        """
        ...
    
    def SetXTitle(self, string):
        """
        V.SetXTitle(string)
        C++: virtual void SetXTitle(const char *_arg)
        
        Set/Get the title of the x axis
        """
        ...
    
    def SetXTitlePosition(self, p_float):
        """
        V.SetXTitlePosition(float)
        C++: void SetXTitlePosition(double position)
        
        Set/Get the position of the title of X axis.
        """
        ...
    
    def SetXValues(self, p_int):
        """
        V.SetXValues(int)
        C++: virtual void SetXValues(int _arg)
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def SetXValuesToArcLength(self):
        """
        V.SetXValuesToArcLength()
        C++: void SetXValuesToArcLength()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def SetXValuesToIndex(self):
        """
        V.SetXValuesToIndex()
        C++: void SetXValuesToIndex()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def SetXValuesToNormalizedArcLength(self):
        """
        V.SetXValuesToNormalizedArcLength()
        C++: void SetXValuesToNormalizedArcLength()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def SetXValuesToValue(self):
        """
        V.SetXValuesToValue()
        C++: void SetXValuesToValue()
        
        Specify how the independent (x) variable is computed from the
        points. The independent variable can be the scalar/point index
        (i.e., point id), the accumulated arc length along the points,
        the normalized arc length, or by component value. If plotting
        datasets (e.g., points), the value that is used is specified by
        the PointComponent ivar.  (Note: these methods also control how
        field data is plotted. Field data is usually plotted by value or
        index, if plotting length 1-dimensional length measures are
        used.)
        """
        ...
    
    def SetYAxisColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetYAxisColor(float, float, float)
        C++: virtual void SetYAxisColor(double, double, double)
        
        Set axes properties
        """
        ...
    
    def SetYLabelFormat(self, string):
        """
        V.SetYLabelFormat(string)
        C++: virtual void SetYLabelFormat(const char *)
        
        Set/Get the format with which to print the Y label.
        """
        ...
    
    def SetYRange(self, p_float, p_float_1):
        """
        V.SetYRange(float, float)
        C++: virtual void SetYRange(double _arg1, double _arg2)
        V.SetYRange((float, float))
        C++: void SetYRange(const double _arg[2])
        
        Set the plot range (range of independent and dependent variables)
        to plot. Data outside of the range will be clipped. If the plot
        range of either the x or y variables is set to (v1,v2), where v1
        == v2, then the range will be computed automatically. Note that
        the x-range values should be consistent with the way the
        independent variable is created (via INDEX, DISTANCE, or
        ARC_LENGTH).
        """
        ...
    
    def SetYTitle(self, string):
        """
        V.SetYTitle(string)
        C++: virtual void SetYTitle(const char *)
        
        Set/Get the title of the y axis
        """
        ...
    
    def SetYTitlePosition(self, p_int):
        """
        V.SetYTitlePosition(int)
        C++: virtual void SetYTitlePosition(int _arg)
        
        Set/Get the position of the title of Y axis.
        """
        ...
    
    def SetYTitlePositionToHCenter(self):
        """
        V.SetYTitlePositionToHCenter()
        C++: void SetYTitlePositionToHCenter()
        
        Set/Get the position of the title of Y axis.
        """
        ...
    
    def SetYTitlePositionToTop(self):
        """
        V.SetYTitlePositionToTop()
        C++: void SetYTitlePositionToTop()
        
        Set/Get the position of the title of Y axis.
        """
        ...
    
    def SetYTitlePositionToVCenter(self):
        """
        V.SetYTitlePositionToVCenter()
        C++: void SetYTitlePositionToVCenter()
        
        Set/Get the position of the title of Y axis.
        """
        ...
    
    def ShowReferenceXLineOff(self):
        """
        V.ShowReferenceXLineOff()
        C++: virtual void ShowReferenceXLineOff()
        
        Set/Get if the X reference line is visible. hidden by default
        """
        ...
    
    def ShowReferenceXLineOn(self):
        """
        V.ShowReferenceXLineOn()
        C++: virtual void ShowReferenceXLineOn()
        
        Set/Get if the X reference line is visible. hidden by default
        """
        ...
    
    def ShowReferenceYLineOff(self):
        """
        V.ShowReferenceYLineOff()
        C++: virtual void ShowReferenceYLineOff()
        
        Set/Get if the Y reference line is visible. hidden by default
        """
        ...
    
    def ShowReferenceYLineOn(self):
        """
        V.ShowReferenceYLineOn()
        C++: virtual void ShowReferenceYLineOn()
        
        Set/Get if the Y reference line is visible. hidden by default
        """
        ...
    
    def ViewportToPlotCoordinate(self, vtkViewport, p_float, p_float_1):
        """
        V.ViewportToPlotCoordinate(vtkViewport, float, float)
        C++: void ViewportToPlotCoordinate(vtkViewport *viewport,
            double &u, double &v)
        V.ViewportToPlotCoordinate(vtkViewport)
        C++: void ViewportToPlotCoordinate(vtkViewport *viewport)
        
        Given a position within the viewport used by the plot, return the
        the plot coordinates (XAxis value, YAxis value)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AlignAxisBottom = ...
    AlignAxisHCenter = ...
    AlignAxisLeft = ...
    AlignAxisRight = ...
    AlignAxisTop = ...
    AlignAxisVCenter = ...
    AlignBottom = ...
    AlignHCenter = ...
    AlignLeft = ...
    Alignment = ...
    AlignRight = ...
    AlignTop = ...
    AlignVCenter = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
