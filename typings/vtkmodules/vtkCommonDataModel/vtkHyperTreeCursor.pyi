"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkHyperTreeCursor(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkHyperTreeCursor - Objects for depth-first traversal HyperTrees.
    
    Superclass: vtkObject
    
    Objects that can perform depth-first traversal of HyperTrees. This is
    an abstract class. Cursors are created by the HyperTree
    implementation.
    
    @sa
    vtkObject vtkHyperTree vtkHyperTreeGrid
    
    @par Thanks: This class was written by Philippe Pebay, Joachim
    Pouderoux, and Charles Law, Kitware 2013 This class was modified by
    Guenole Harel and Jacques-Bernard Lekien 2014 This class was revised
    by Philippe Pebay, 2016 This work was supported by Commissariat a
    l'Energie Atomique (CEA/DIF)
    """
    def Clone(self):
        """
        V.Clone() -> vtkHyperTreeCursor
        C++: virtual vtkHyperTreeCursor *Clone()
        
        Create a copy of `this'.
        \post results_exists:result!=0
        \post same_tree: result->SameTree(this)
        """
        ...
    
    def GetChildIndex(self):
        """
        V.GetChildIndex() -> int
        C++: virtual int GetChildIndex()
        
        Return the child number of the current vertex relative to its
        parent.
        \pre not_root: !IsRoot().
        \post valid_range: result>=0 && result<GetNumberOfChildren()
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: virtual int GetDimension()
        
        Return the dimension of the tree.
        \post positive_result: result>0
        """
        ...
    
    def GetLevel(self):
        """
        V.GetLevel() -> int
        C++: virtual unsigned int GetLevel()
        
        Return the level of the vertex pointed by the cursor.
        \post positive_result: result>=0
        """
        ...
    
    def GetNumberOfChildren(self):
        """
        V.GetNumberOfChildren() -> int
        C++: virtual int GetNumberOfChildren()
        
        Return the number of children for each node (non-vertex leaf) of
        the tree.
        \post positive_number: result>0
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTree(self):
        """
        V.GetTree() -> vtkHyperTree
        C++: virtual vtkHyperTree *GetTree()
        
        Return the HyperTree to which the cursor is pointing.
        """
        ...
    
    def GetVertexId(self):
        """
        V.GetVertexId() -> int
        C++: virtual vtkIdType GetVertexId()
        
        Return the index of the current vertex in the tree.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsEqual(self, vtkHyperTreeCursor):
        """
        V.IsEqual(vtkHyperTreeCursor) -> bool
        C++: virtual bool IsEqual(vtkHyperTreeCursor *other)
        
        Is `this' equal to `other'?
        \pre other_exists: other!=0
        \pre same_hypertree: this->SameTree(other);
        """
        ...
    
    def IsLeaf(self):
        """
        V.IsLeaf() -> bool
        C++: virtual bool IsLeaf()
        
        Is the cursor pointing to a leaf?
        """
        ...
    
    def IsRoot(self):
        """
        V.IsRoot() -> bool
        C++: virtual bool IsRoot()
        
        Is the cursor at tree root?
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHyperTreeCursor
        C++: vtkHyperTreeCursor *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHyperTreeCursor
        C++: static vtkHyperTreeCursor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SameTree(self, vtkHyperTreeCursor):
        """
        V.SameTree(vtkHyperTreeCursor) -> int
        C++: virtual int SameTree(vtkHyperTreeCursor *other)
        
        Are `this' and `other' pointing on the same hypertree?
        \pre other_exists: other!=0
        """
        ...
    
    def SetTree(self, vtkHyperTree):
        """
        V.SetTree(vtkHyperTree)
        C++: virtual void SetTree(vtkHyperTree *)
        
        Set the HyperTree to which the cursor is pointing.
        """
        ...
    
    def ToChild(self, p_int):
        """
        V.ToChild(int)
        C++: virtual void ToChild(int child)
        
        Move the cursor to child `child' of the current vertex.
        \pre not_leaf: !IsLeaf()
        \pre valid_child: child>=0 && child<this->GetNumberOfChildren()
        """
        ...
    
    def ToParent(self):
        """
        V.ToParent()
        C++: virtual void ToParent()
        
        Move the cursor to the parent of the current vertex.
        \pre not_root: !IsRoot()
        """
        ...
    
    def ToRoot(self):
        """
        V.ToRoot()
        C++: virtual void ToRoot()
        
        Move the cursor to the root vertex.
        \pre can be root
        \post is_root: IsRoot()
        """
        ...
    
    def ToSameVertex(self, vtkHyperTreeCursor):
        """
        V.ToSameVertex(vtkHyperTreeCursor)
        C++: virtual void ToSameVertex(vtkHyperTreeCursor *other)
        
        Move the cursor to the same vertex pointed by `other'.
        \pre other_exists: other!=0
        \pre same_hypertree: this->SameTree(other);
        \post equal: this->IsEqual(other)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


