"""
This type stub file was generated by pyright.
"""

from .vtkHyperTreeGridNonOrientedSuperCursorLight import vtkHyperTreeGridNonOrientedSuperCursorLight

class vtkHyperTreeGridNonOrientedVonNeumannSuperCursorLight(vtkHyperTreeGridNonOrientedSuperCursorLight):
    """
    vtkHyperTreeGridNonOrientedVonNeumannSuperCursorLight - Objects for
    traversal a HyperTreeGrid.
    
    Superclass: vtkHyperTreeGridNonOrientedSuperCursorLight
    
    JB A REVOIR Objects that can perform depth traversal of a hyper tree
    grid, take into account more parameters (related to the grid
    structure) than the compact hyper tree cursor implemented in
    vtkHyperTree can. This is an abstract class. Cursors are created by
    the HyperTreeGrid implementation.
    
    @sa
    vtkHyperTreeCursor vtkHyperTree vtkHyperTreeGrid
    
    @par Thanks: This class was written by Guenole Harel and
    Jacques-Bernard Lekien, 2014. This class was re-written by Philippe
    Pebay, 2016. This class was re-written and optimized by
    Jacques-Bernard Lekien, Guenole Harel and Jerome Dubois, 2018. This
    work was supported by Commissariat a l'Energie Atomique CEA, DAM,
    DIF, F-91297 Arpajon, France.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Initialize(self, vtkHyperTreeGrid, p_int, bool):
        """
        V.Initialize(vtkHyperTreeGrid, int, bool)
        C++: void Initialize(vtkHyperTreeGrid *grid, vtkIdType treeIndex,
            bool create=false) override;
        
        Initialize cursor at root of given tree index in grid. JB Le
        create ne s'applique que sur le HT central.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance()
            -> vtkHyperTreeGridNonOrientedVonNeumannSuperCursorLight
        C++: vtkHyperTreeGridNonOrientedVonNeumannSuperCursorLight *NewInstance(
            )
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkHyperTreeGridNonOrientedVonNeumannSuperCursorLight
        C++: static vtkHyperTreeGridNonOrientedVonNeumannSuperCursorLight *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


