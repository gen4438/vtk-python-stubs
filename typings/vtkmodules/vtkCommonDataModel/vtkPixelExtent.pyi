"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkPixelExtent(object):
    """
    vtkPixelExtent - Representation of a cartesian pixel plane and common
    operations on it.
    
    The implementation is intended to be fast and light so that it may be
    used in place of int[4] with little or no performance penalty.
    
    NOTE in most cases operation on an empty object produces incorrect
    results. If it an issue query Empty() first.
    
    vtkPixelExtent()
    vtkPixelExtent(const vtkPixelExtent &other)
    """
    def CellToNode(self):
        """
        V.CellToNode()
        C++: void CellToNode()
        V.CellToNode(vtkPixelExtent) -> vtkPixelExtent
        C++: static vtkPixelExtent CellToNode(
            const vtkPixelExtent &inputExt)
        
        In-place conversion from cell based to node based extent, and
        vise-versa.
        """
        ...
    
    def Clear(self):
        """
        V.Clear()
        C++: void Clear()
        """
        ...
    
    def Contains(self, vtkPixelExtent):
        """
        V.Contains(vtkPixelExtent) -> int
        C++: int Contains(const vtkPixelExtent &other)
        V.Contains(int, int) -> int
        C++: int Contains(int i, int j)
        
        Return non-zero if this extent contains the other.
        """
        ...
    
    def Disjoint(self, vtkPixelExtent):
        """
        V.Disjoint(vtkPixelExtent) -> int
        C++: int Disjoint(vtkPixelExtent other)
        
        Return non-zero if the extent is disjoint from the other
        """
        ...
    
    def Empty(self):
        """
        V.Empty() -> int
        C++: int Empty()
        
        Return true if empty.
        """
        ...
    
    def GetData(self):
        """
        V.GetData() -> (int, ...)
        C++: int *GetData()
        
        Direct access to internal data.
        """
        ...
    
    def GetDataU(self):
        """
        V.GetDataU() -> (int, ...)
        C++: unsigned int *GetDataU()
        """
        ...
    
    def GetEndIndex(self, p_int=..., p_int=...):
        """
        V.GetEndIndex([int, int])
        C++: void GetEndIndex(int last[2])
        
        Get the start/end index.
        """
        ...
    
    def GetStartIndex(self, p_int=..., p_int=...):
        """
        V.GetStartIndex([int, int])
        C++: void GetStartIndex(int first[2])
        V.GetStartIndex([int, int], (int, int))
        C++: void GetStartIndex(int first[2], const int origin[2])
        
        Get the start/end index.
        """
        ...
    
    def Grow(self, p_int):
        """
        V.Grow(int)
        C++: void Grow(int n)
        V.Grow(int, int)
        C++: void Grow(int q, int n)
        V.Grow(vtkPixelExtent, int) -> vtkPixelExtent
        C++: static vtkPixelExtent Grow(const vtkPixelExtent &inputExt,
            int n)
        V.Grow(vtkPixelExtent, vtkPixelExtent, int) -> vtkPixelExtent
        C++: static vtkPixelExtent Grow(const vtkPixelExtent &inputExt,
            const vtkPixelExtent &problemDomain, int n)
        
        Expand the extents by n.
        """
        ...
    
    def GrowHigh(self, p_int, p_int_1):
        """
        V.GrowHigh(int, int)
        C++: void GrowHigh(int q, int n)
        V.GrowHigh(vtkPixelExtent, int, int) -> vtkPixelExtent
        C++: static vtkPixelExtent GrowHigh(const vtkPixelExtent &ext,
            int q, int n)
        
        Expand the extents by n.
        """
        ...
    
    def GrowLow(self, p_int, p_int_1):
        """
        V.GrowLow(int, int)
        C++: void GrowLow(int q, int n)
        V.GrowLow(vtkPixelExtent, int, int) -> vtkPixelExtent
        C++: static vtkPixelExtent GrowLow(const vtkPixelExtent &ext,
            int q, int n)
        
        Expand the extents by n.
        """
        ...
    
    def NodeToCell(self):
        """
        V.NodeToCell()
        C++: void NodeToCell()
        V.NodeToCell(vtkPixelExtent) -> vtkPixelExtent
        C++: static vtkPixelExtent NodeToCell(
            const vtkPixelExtent &inputExt)
        
        In-place conversion from cell based to node based extent, and
        vise-versa.
        """
        ...
    
    def SetData(self, vtkPixelExtent):
        """
        V.SetData(vtkPixelExtent)
        C++: void SetData(const vtkPixelExtent &ext)
        
        Set the extent.
        """
        ...
    
    def Shift(self):
        """
        V.Shift()
        C++: void Shift()
        V.Shift(vtkPixelExtent)
        C++: void Shift(const vtkPixelExtent &ext)
        V.Shift([int, ...])
        C++: void Shift(int *n)
        V.Shift(int, int)
        C++: void Shift(int q, int n)
        V.Shift([int, ...], int)
        C++: static void Shift(int *ij, int n)
        V.Shift([int, ...], [int, ...])
        C++: static void Shift(int *ij, int *n)
        
        Shifts by low corner of this, moving to the origin.
        """
        ...
    
    def Shrink(self, p_int):
        """
        V.Shrink(int)
        C++: void Shrink(int n)
        V.Shrink(int, int)
        C++: void Shrink(int q, int n)
        V.Shrink(vtkPixelExtent, vtkPixelExtent, int) -> vtkPixelExtent
        C++: static vtkPixelExtent Shrink(const vtkPixelExtent &inputExt,
            const vtkPixelExtent &problemDomain, int n)
        V.Shrink(vtkPixelExtent, int) -> vtkPixelExtent
        C++: static vtkPixelExtent Shrink(const vtkPixelExtent &inputExt,
            int n)
        
        Shrink the extent by n.
        """
        ...
    
    def Size(self):
        """
        V.Size() -> int
        C++: size_t Size()
        V.Size(vtkPixelExtent) -> int
        C++: static size_t Size(const vtkPixelExtent &ext)
        
        Get the total number.
        """
        ...
    
    def Split(self, p_int):
        """
        V.Split(int) -> vtkPixelExtent
        C++: vtkPixelExtent Split(int dir)
        
        Divide the extent in half in the given direction. The operation
        is done in-place the other half of the split extent is returned.
        The return will be empty if the split could not be made.
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    


