"""
This type stub file was generated by pyright.
"""

from .vtkCell import vtkCell

class vtkGenericCell(vtkCell):
    """
    vtkGenericCell - provides thread-safe access to cells
    
    Superclass: vtkCell
    
    vtkGenericCell is a class that provides access to concrete types of
    cells. It's main purpose is to allow thread-safe access to cells,
    supporting the vtkDataSet::GetCell(vtkGenericCell *) method.
    vtkGenericCell acts like any type of cell, it just dereferences an
    internal representation. The SetCellType() methods use #define
    constants; these are defined in the file vtkCellType.h.
    
    @sa
    vtkCell vtkDataSet
    """
    def CellBoundary(self, p_int, , vtkIdList):
        """
        V.CellBoundary(int, (float, float, float), vtkIdList) -> int
        C++: int CellBoundary(int subId, const double pcoords[3],
            vtkIdList *pts) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def Clip(self, p_float, vtkDataArray, vtkIncrementalPointLocator, vtkCellArray, vtkPointData, vtkPointData_1, vtkCellData, p_int, vtkCellData_1, p_int_1):
        """
        V.Clip(float, vtkDataArray, vtkIncrementalPointLocator,
            vtkCellArray, vtkPointData, vtkPointData, vtkCellData, int,
            vtkCellData, int)
        C++: void Clip(double value, vtkDataArray *cellScalars,
            vtkIncrementalPointLocator *locator,
            vtkCellArray *connectivity, vtkPointData *inPd,
            vtkPointData *outPd, vtkCellData *inCd, vtkIdType cellId,
            vtkCellData *outCd, int insideOut) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def Contour(self, p_float, vtkDataArray, vtkIncrementalPointLocator, vtkCellArray, vtkCellArray_1, vtkCellArray_2, vtkPointData, vtkPointData_1, vtkCellData, p_int, vtkCellData_1):
        """
        V.Contour(float, vtkDataArray, vtkIncrementalPointLocator,
            vtkCellArray, vtkCellArray, vtkCellArray, vtkPointData,
            vtkPointData, vtkCellData, int, vtkCellData)
        C++: void Contour(double value, vtkDataArray *cellScalars,
            vtkIncrementalPointLocator *locator, vtkCellArray *verts,
            vtkCellArray *lines, vtkCellArray *polys, vtkPointData *inPd,
            vtkPointData *outPd, vtkCellData *inCd, vtkIdType cellId,
            vtkCellData *outCd) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def DeepCopy(self, vtkCell):
        """
        V.DeepCopy(vtkCell)
        C++: void DeepCopy(vtkCell *c) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def Derivatives(self, p_int, , float_tuple, p_int_1, *float):
        """
        V.Derivatives(int, (float, float, float), (float, ...), int,
            [float, ...])
        C++: void Derivatives(int subId, const double pcoords[3],
            const double *values, int dim, double *derivs) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def EvaluateLocation(self, p_int, , p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateLocation(int, (float, float, float), [float, float,
            float], [float, ...])
        C++: void EvaluateLocation(int &subId, const double pcoords[3],
            double x[3], double *weights) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def EvaluatePosition(self, , p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluatePosition((float, float, float), [float, float, float],
            int, [float, float, float], float, [float, ...]) -> int
        C++: int EvaluatePosition(const double x[3],
            double closestPoint[3], int &subId, double pcoords[3],
            double &dist2, double weights[]) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetCellDimension(self):
        """
        V.GetCellDimension() -> int
        C++: int GetCellDimension() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetCellType(self):
        """
        V.GetCellType() -> int
        C++: int GetCellType() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetEdge(self, p_int):
        """
        V.GetEdge(int) -> vtkCell
        C++: vtkCell *GetEdge(int edgeId) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetFace(self, p_int):
        """
        V.GetFace(int) -> vtkCell
        C++: vtkCell *GetFace(int faceId) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetFaces(self):
        """
        V.GetFaces() -> (int, ...)
        C++: vtkIdType *GetFaces() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetNumberOfEdges(self):
        """
        V.GetNumberOfEdges() -> int
        C++: int GetNumberOfEdges() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetNumberOfFaces(self):
        """
        V.GetNumberOfFaces() -> int
        C++: int GetNumberOfFaces() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetParametricCenter(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetParametricCenter([float, float, float]) -> int
        C++: int GetParametricCenter(double pcoords[3]) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetParametricCoords(self):
        """
        V.GetParametricCoords() -> (float, ...)
        C++: double *GetParametricCoords() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def GetRepresentativeCell(self):
        """
        V.GetRepresentativeCell() -> vtkCell
        C++: vtkCell *GetRepresentativeCell()
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def InstantiateCell(self, p_int):
        """
        V.InstantiateCell(int) -> vtkCell
        C++: static vtkCell *InstantiateCell(int cellType)
        
        Instantiate a new vtkCell based on it's cell type value
        """
        ...
    
    def InterpolateDerivs(self, , *float):
        """
        V.InterpolateDerivs((float, float, float), [float, ...])
        C++: void InterpolateDerivs(const double pcoords[3],
            double *derivs) override;
        
        Compute the interpolation functions/derivatives (aka shape
        functions/derivatives)
        """
        ...
    
    def InterpolateFunctions(self, , *float):
        """
        V.InterpolateFunctions((float, float, float), [float, ...])
        C++: void InterpolateFunctions(const double pcoords[3],
            double *weights) override;
        
        Compute the interpolation functions/derivatives (aka shape
        functions/derivatives)
        """
        ...
    
    def IntersectWithLine(self, , , p_float_6, p_float_7, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.IntersectWithLine((float, float, float), (float, float, float),
            float, float, [float, float, float], [float, float, float],
            int) -> int
        C++: int IntersectWithLine(const double p1[3], const double p2[3],
             double tol, double &t, double x[3], double pcoords[3],
            int &subId) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsLinear(self):
        """
        V.IsLinear() -> int
        C++: int IsLinear() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def IsPrimaryCell(self):
        """
        V.IsPrimaryCell() -> int
        C++: int IsPrimaryCell() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericCell
        C++: vtkGenericCell *NewInstance()
        """
        ...
    
    def RequiresExplicitFaceRepresentation(self):
        """
        V.RequiresExplicitFaceRepresentation() -> int
        C++: int RequiresExplicitFaceRepresentation() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def RequiresInitialization(self):
        """
        V.RequiresInitialization() -> int
        C++: int RequiresInitialization() override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericCell
        C++: static vtkGenericCell *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellType(self, p_int):
        """
        V.SetCellType(int)
        C++: void SetCellType(int cellType)
        
        This method is used to support the
        vtkDataSet::GetCell(vtkGenericCell *) method. It allows
        vtkGenericCell to act like any cell type by dereferencing an
        internal instance of a concrete cell type. When you set the cell
        type, you are resetting a pointer to an internal cell which is
        then used for computation.
        """
        ...
    
    def SetCellTypeToBezierCurve(self):
        """
        V.SetCellTypeToBezierCurve()
        C++: void SetCellTypeToBezierCurve()
        """
        ...
    
    def SetCellTypeToBezierHexahedron(self):
        """
        V.SetCellTypeToBezierHexahedron()
        C++: void SetCellTypeToBezierHexahedron()
        """
        ...
    
    def SetCellTypeToBezierQuadrilateral(self):
        """
        V.SetCellTypeToBezierQuadrilateral()
        C++: void SetCellTypeToBezierQuadrilateral()
        """
        ...
    
    def SetCellTypeToBezierTetra(self):
        """
        V.SetCellTypeToBezierTetra()
        C++: void SetCellTypeToBezierTetra()
        """
        ...
    
    def SetCellTypeToBezierTriangle(self):
        """
        V.SetCellTypeToBezierTriangle()
        C++: void SetCellTypeToBezierTriangle()
        """
        ...
    
    def SetCellTypeToBezierWedge(self):
        """
        V.SetCellTypeToBezierWedge()
        C++: void SetCellTypeToBezierWedge()
        """
        ...
    
    def SetCellTypeToBiQuadraticQuad(self):
        """
        V.SetCellTypeToBiQuadraticQuad()
        C++: void SetCellTypeToBiQuadraticQuad()
        """
        ...
    
    def SetCellTypeToBiQuadraticQuadraticHexahedron(self):
        """
        V.SetCellTypeToBiQuadraticQuadraticHexahedron()
        C++: void SetCellTypeToBiQuadraticQuadraticHexahedron()
        """
        ...
    
    def SetCellTypeToBiQuadraticQuadraticWedge(self):
        """
        V.SetCellTypeToBiQuadraticQuadraticWedge()
        C++: void SetCellTypeToBiQuadraticQuadraticWedge()
        """
        ...
    
    def SetCellTypeToBiQuadraticTriangle(self):
        """
        V.SetCellTypeToBiQuadraticTriangle()
        C++: void SetCellTypeToBiQuadraticTriangle()
        """
        ...
    
    def SetCellTypeToConvexPointSet(self):
        """
        V.SetCellTypeToConvexPointSet()
        C++: void SetCellTypeToConvexPointSet()
        """
        ...
    
    def SetCellTypeToCubicLine(self):
        """
        V.SetCellTypeToCubicLine()
        C++: void SetCellTypeToCubicLine()
        """
        ...
    
    def SetCellTypeToEmptyCell(self):
        """
        V.SetCellTypeToEmptyCell()
        C++: void SetCellTypeToEmptyCell()
        """
        ...
    
    def SetCellTypeToHexagonalPrism(self):
        """
        V.SetCellTypeToHexagonalPrism()
        C++: void SetCellTypeToHexagonalPrism()
        """
        ...
    
    def SetCellTypeToHexahedron(self):
        """
        V.SetCellTypeToHexahedron()
        C++: void SetCellTypeToHexahedron()
        """
        ...
    
    def SetCellTypeToLagrangeCurve(self):
        """
        V.SetCellTypeToLagrangeCurve()
        C++: void SetCellTypeToLagrangeCurve()
        """
        ...
    
    def SetCellTypeToLagrangeHexahedron(self):
        """
        V.SetCellTypeToLagrangeHexahedron()
        C++: void SetCellTypeToLagrangeHexahedron()
        """
        ...
    
    def SetCellTypeToLagrangeQuadrilateral(self):
        """
        V.SetCellTypeToLagrangeQuadrilateral()
        C++: void SetCellTypeToLagrangeQuadrilateral()
        """
        ...
    
    def SetCellTypeToLagrangeTetra(self):
        """
        V.SetCellTypeToLagrangeTetra()
        C++: void SetCellTypeToLagrangeTetra()
        """
        ...
    
    def SetCellTypeToLagrangeTriangle(self):
        """
        V.SetCellTypeToLagrangeTriangle()
        C++: void SetCellTypeToLagrangeTriangle()
        """
        ...
    
    def SetCellTypeToLagrangeWedge(self):
        """
        V.SetCellTypeToLagrangeWedge()
        C++: void SetCellTypeToLagrangeWedge()
        """
        ...
    
    def SetCellTypeToLine(self):
        """
        V.SetCellTypeToLine()
        C++: void SetCellTypeToLine()
        """
        ...
    
    def SetCellTypeToPentagonalPrism(self):
        """
        V.SetCellTypeToPentagonalPrism()
        C++: void SetCellTypeToPentagonalPrism()
        """
        ...
    
    def SetCellTypeToPixel(self):
        """
        V.SetCellTypeToPixel()
        C++: void SetCellTypeToPixel()
        """
        ...
    
    def SetCellTypeToPolygon(self):
        """
        V.SetCellTypeToPolygon()
        C++: void SetCellTypeToPolygon()
        """
        ...
    
    def SetCellTypeToPolyhedron(self):
        """
        V.SetCellTypeToPolyhedron()
        C++: void SetCellTypeToPolyhedron()
        """
        ...
    
    def SetCellTypeToPolyLine(self):
        """
        V.SetCellTypeToPolyLine()
        C++: void SetCellTypeToPolyLine()
        """
        ...
    
    def SetCellTypeToPolyVertex(self):
        """
        V.SetCellTypeToPolyVertex()
        C++: void SetCellTypeToPolyVertex()
        """
        ...
    
    def SetCellTypeToPyramid(self):
        """
        V.SetCellTypeToPyramid()
        C++: void SetCellTypeToPyramid()
        """
        ...
    
    def SetCellTypeToQuad(self):
        """
        V.SetCellTypeToQuad()
        C++: void SetCellTypeToQuad()
        """
        ...
    
    def SetCellTypeToQuadraticEdge(self):
        """
        V.SetCellTypeToQuadraticEdge()
        C++: void SetCellTypeToQuadraticEdge()
        """
        ...
    
    def SetCellTypeToQuadraticHexahedron(self):
        """
        V.SetCellTypeToQuadraticHexahedron()
        C++: void SetCellTypeToQuadraticHexahedron()
        """
        ...
    
    def SetCellTypeToQuadraticLinearQuad(self):
        """
        V.SetCellTypeToQuadraticLinearQuad()
        C++: void SetCellTypeToQuadraticLinearQuad()
        """
        ...
    
    def SetCellTypeToQuadraticLinearWedge(self):
        """
        V.SetCellTypeToQuadraticLinearWedge()
        C++: void SetCellTypeToQuadraticLinearWedge()
        """
        ...
    
    def SetCellTypeToQuadraticPolygon(self):
        """
        V.SetCellTypeToQuadraticPolygon()
        C++: void SetCellTypeToQuadraticPolygon()
        """
        ...
    
    def SetCellTypeToQuadraticPyramid(self):
        """
        V.SetCellTypeToQuadraticPyramid()
        C++: void SetCellTypeToQuadraticPyramid()
        """
        ...
    
    def SetCellTypeToQuadraticQuad(self):
        """
        V.SetCellTypeToQuadraticQuad()
        C++: void SetCellTypeToQuadraticQuad()
        """
        ...
    
    def SetCellTypeToQuadraticTetra(self):
        """
        V.SetCellTypeToQuadraticTetra()
        C++: void SetCellTypeToQuadraticTetra()
        """
        ...
    
    def SetCellTypeToQuadraticTriangle(self):
        """
        V.SetCellTypeToQuadraticTriangle()
        C++: void SetCellTypeToQuadraticTriangle()
        """
        ...
    
    def SetCellTypeToQuadraticWedge(self):
        """
        V.SetCellTypeToQuadraticWedge()
        C++: void SetCellTypeToQuadraticWedge()
        """
        ...
    
    def SetCellTypeToTetra(self):
        """
        V.SetCellTypeToTetra()
        C++: void SetCellTypeToTetra()
        """
        ...
    
    def SetCellTypeToTriangle(self):
        """
        V.SetCellTypeToTriangle()
        C++: void SetCellTypeToTriangle()
        """
        ...
    
    def SetCellTypeToTriangleStrip(self):
        """
        V.SetCellTypeToTriangleStrip()
        C++: void SetCellTypeToTriangleStrip()
        """
        ...
    
    def SetCellTypeToTriQuadraticHexahedron(self):
        """
        V.SetCellTypeToTriQuadraticHexahedron()
        C++: void SetCellTypeToTriQuadraticHexahedron()
        """
        ...
    
    def SetCellTypeToVertex(self):
        """
        V.SetCellTypeToVertex()
        C++: void SetCellTypeToVertex()
        """
        ...
    
    def SetCellTypeToVoxel(self):
        """
        V.SetCellTypeToVoxel()
        C++: void SetCellTypeToVoxel()
        """
        ...
    
    def SetCellTypeToWedge(self):
        """
        V.SetCellTypeToWedge()
        C++: void SetCellTypeToWedge()
        """
        ...
    
    def SetFaces(self, *int):
        """
        V.SetFaces([int, ...])
        C++: void SetFaces(vtkIdType *faces) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def SetPointIds(self, vtkIdList):
        """
        V.SetPointIds(vtkIdList)
        C++: void SetPointIds(vtkIdList *pointIds)
        
        Set the point ids to use for this cell. This updates the internal
        cell storage as well as the public member variable PointIds.
        """
        ...
    
    def SetPoints(self, vtkPoints):
        """
        V.SetPoints(vtkPoints)
        C++: void SetPoints(vtkPoints *points)
        
        Set the points object to use for this cell. This updates the
        internal cell storage as well as the public member variable
        Points.
        """
        ...
    
    def ShallowCopy(self, vtkCell):
        """
        V.ShallowCopy(vtkCell)
        C++: void ShallowCopy(vtkCell *c) override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def Triangulate(self, p_int, vtkIdList, vtkPoints):
        """
        V.Triangulate(int, vtkIdList, vtkPoints) -> int
        C++: int Triangulate(int index, vtkIdList *ptIds, vtkPoints *pts)
            override;
        
        See the vtkCell API for descriptions of these methods.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


