"""
This type stub file was generated by pyright.
"""

from .vtkDirectedGraph import vtkDirectedGraph

class vtkDirectedAcyclicGraph(vtkDirectedGraph):
    """
    vtkDirectedAcyclicGraph - A rooted tree data structure.
    
    Superclass: vtkDirectedGraph
    
    vtkDirectedAcyclicGraph is a connected directed graph with no cycles.
    A tree is a type of directed graph, so works with all graph
    algorithms.
    
    vtkDirectedAcyclicGraph is a read-only data structure. To construct a
    tree, create an instance of vtkMutableDirectedGraph. Add vertices and
    edges with AddVertex() and AddEdge(). You may alternately start by
    adding a single vertex as the root then call graph->AddChild(parent)
    which adds a new vertex and connects the parent to the child. The
    tree MUST have all edges in the proper direction, from parent to
    child. After building the tree, call tree->CheckedShallowCopy(graph)
    to copy the structure into a vtkDirectedAcyclicGraph. This method
    will return false if the graph is an invalid tree.
    
    vtkDirectedAcyclicGraph provides some convenience methods for
    obtaining the parent and children of a vertex, for finding the root,
    and determining if a vertex is a leaf (a vertex with no children).
    
    @sa
    vtkDirectedGraph vtkMutableDirectedGraph vtkGraph
    """
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkDirectedAcyclicGraph
        C++: static vtkDirectedAcyclicGraph *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkDirectedAcyclicGraph
        C++: static vtkDirectedAcyclicGraph *GetData(
            vtkInformationVector *v, int i=0)
        
        Retrieve a graph from an information vector.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return what type of dataset this is.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDirectedAcyclicGraph
        C++: vtkDirectedAcyclicGraph *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDirectedAcyclicGraph
        C++: static vtkDirectedAcyclicGraph *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


