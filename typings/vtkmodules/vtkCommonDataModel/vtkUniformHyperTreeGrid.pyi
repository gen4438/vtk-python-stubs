"""
This type stub file was generated by pyright.
"""

from .vtkHyperTreeGrid import vtkHyperTreeGrid

class vtkUniformHyperTreeGrid(vtkHyperTreeGrid):
    """
    vtkUniformHyperTreeGrid - A specifalized type of vtkHyperTreeGrid for
    the case when root cells have uniform sizes in each direction
    
    Superclass: vtkHyperTreeGrid
    
    @sa
    vtkHyperTree vtkHyperTreeGrid vtkRectilinearGrid
    
    @par Thanks: This class was written by Philippe Pebay, NexGen
    Analytics 2017 JB modify for introduce Scales by Jacques-Bernard
    Lekien, CEA 2018. This work was supported by Commissariat a l'Energie
    Atomique CEA, DAM, DIF, F-91297 Arpajon, France.
    """
    def CopyCoordinates(self, vtkHyperTreeGrid):
        """
        V.CopyCoordinates(vtkHyperTreeGrid)
        C++: void CopyCoordinates(const vtkHyperTreeGrid *output)
            override;
        
        JB Augented services on Coordinates.
        """
        ...
    
    def CopyStructure(self, vtkDataObject):
        """
        V.CopyStructure(vtkDataObject)
        C++: void CopyStructure(vtkDataObject *) override;
        
        Copy the internal geometric and topological structure of a
        vtkUniformHyperTreeGrid object.
        """
        ...
    
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *) override;
        
        Create deep copy of hyper tree grid.
        """
        ...
    
    def GetActualMemorySizeBytes(self):
        """
        V.GetActualMemorySizeBytes() -> int
        C++: unsigned long GetActualMemorySizeBytes() override;
        
        Return the actual size of the data bytes
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Return a pointer to the geometry bounding box in the form
        (xmin,xmax, ymin,ymax, zmin,zmax). THIS METHOD IS NOT THREAD
        SAFE.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return what type of dataset this is.
        """
        ...
    
    def GetGridScale(self):
        """
        V.GetGridScale() -> (float, float, float)
        C++: virtual double *GetGridScale()
        
        Set/Get scale of root cells along each direction
        """
        ...
    
    def GetLevelZeroOriginAndSizeFromIndex(self, p_int, *float, **kwargs):
        """
        V.GetLevelZeroOriginAndSizeFromIndex(int, [float, ...], [float,
            ...])
        C++: void GetLevelZeroOriginAndSizeFromIndex(vtkIdType, double *,
            double *) override;
        
        Convert the global index of a root to its Spacial coordinates
        origin and size.
        """
        ...
    
    def GetLevelZeroOriginFromIndex(self, p_int, *float):
        """
        V.GetLevelZeroOriginFromIndex(int, [float, ...])
        C++: void GetLevelZeroOriginFromIndex(vtkIdType, double *)
            override;
        
        Convert the global index of a root to its Spacial coordinates
        origin and size.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrigin(self):
        """
        V.GetOrigin() -> (float, float, float)
        C++: virtual double *GetOrigin()
        
        Set/Get origin of grid
        """
        ...
    
    def GetTree(self, p_int, bool):
        """
        V.GetTree(int, bool) -> vtkHyperTree
        C++: vtkHyperTree *GetTree(vtkIdType, bool create=false) override;
        
        Return tree located at given index of hyper tree grid NB: This
        will construct a new HyperTree if grid slot is empty.
        """
        ...
    
    def GetXCoordinates(self):
        """
        V.GetXCoordinates() -> vtkDataArray
        C++: vtkDataArray *GetXCoordinates() override;
        
        Set/Get the grid coordinates in the x-direction. NB: Set method
        deactivated in the case of uniform grids. Use SetSize() instead.
        """
        ...
    
    def GetYCoordinates(self):
        """
        V.GetYCoordinates() -> vtkDataArray
        C++: vtkDataArray *GetYCoordinates() override;
        
        Set/Get the grid coordinates in the y-direction. NB: Set method
        deactivated in the case of uniform grids. Use SetSize() instead.
        """
        ...
    
    def GetZCoordinates(self):
        """
        V.GetZCoordinates() -> vtkDataArray
        C++: vtkDataArray *GetZCoordinates() override;
        
        Set/Get the grid coordinates in the z-direction. NB: Set method
        deactivated in the case of uniform grids. Use SetSize() instead.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize() override;
        
        Restore data object to initial state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUniformHyperTreeGrid
        C++: vtkUniformHyperTreeGrid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUniformHyperTreeGrid
        C++: static vtkUniformHyperTreeGrid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFixedCoordinates(self, p_int, p_float):
        """
        V.SetFixedCoordinates(int, float)
        C++: void SetFixedCoordinates(unsigned int axis, double value)
            override;
        
        JB Augented services on Coordinates.
        """
        ...
    
    def SetGridScale(self, p_float, p_float_1, p_float_2):
        """
        V.SetGridScale(float, float, float)
        C++: void SetGridScale(double, double, double)
        V.SetGridScale([float, ...])
        C++: void SetGridScale(double *)
        V.SetGridScale(float)
        C++: void SetGridScale(double)
        
        Set/Get scale of root cells along each direction
        """
        ...
    
    def SetOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetOrigin(float, float, float)
        C++: virtual void SetOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetOrigin((float, float, float))
        C++: virtual void SetOrigin(const double _arg[3])
        
        Set/Get origin of grid
        """
        ...
    
    def SetXCoordinates(self, vtkDataArray):
        """
        V.SetXCoordinates(vtkDataArray)
        C++: void SetXCoordinates(vtkDataArray *XCoordinates) override;
        
        Set/Get the grid coordinates in the x-direction. NB: Set method
        deactivated in the case of uniform grids. Use SetSize() instead.
        """
        ...
    
    def SetYCoordinates(self, vtkDataArray):
        """
        V.SetYCoordinates(vtkDataArray)
        C++: void SetYCoordinates(vtkDataArray *YCoordinates) override;
        
        Set/Get the grid coordinates in the y-direction. NB: Set method
        deactivated in the case of uniform grids. Use SetSize() instead.
        """
        ...
    
    def SetZCoordinates(self, vtkDataArray):
        """
        V.SetZCoordinates(vtkDataArray)
        C++: void SetZCoordinates(vtkDataArray *ZCoordinates) override;
        
        Set/Get the grid coordinates in the z-direction. NB: Set method
        deactivated in the case of uniform grids. Use SetSize() instead.
        """
        ...
    
    def ShallowCopy(self, vtkDataObject):
        """
        V.ShallowCopy(vtkDataObject)
        C++: void ShallowCopy(vtkDataObject *) override;
        
        Create shallow copy of hyper tree grid.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


