"""
This type stub file was generated by pyright.
"""

from .vtkGraph import vtkGraph

class vtkUndirectedGraph(vtkGraph):
    """
    vtkUndirectedGraph - An undirected graph.
    
    Superclass: vtkGraph
    
    vtkUndirectedGraph is a collection of vertices along with a
    collection of undirected edges (they connect two vertices in no
    particular order). ShallowCopy(), DeepCopy(), CheckedShallowCopy(),
    CheckedDeepCopy() accept instances of vtkUndirectedGraph and
    vtkMutableUndirectedGraph. GetOutEdges(v, it) and GetInEdges(v, it)
    return the same list of edges, which is the list of all edges which
    have a v as an endpoint. GetInDegree(v), GetOutDegree(v) and
    GetDegree(v) all return the full degree of vertex v.
    
    vtkUndirectedGraph is read-only. To create an undirected graph, use
    an instance of vtkMutableUndirectedGraph, then you may set the
    structure to a vtkUndirectedGraph using ShallowCopy().
    
    @sa
    vtkGraph vtkMutableUndirectedGraph
    """
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkUndirectedGraph
        C++: static vtkUndirectedGraph *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkUndirectedGraph
        C++: static vtkUndirectedGraph *GetData(vtkInformationVector *v,
            int i=0)
        
        Retrieve a graph from an information vector.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return what type of dataset this is.
        """
        ...
    
    def GetInDegree(self, p_int):
        """
        V.GetInDegree(int) -> int
        C++: vtkIdType GetInDegree(vtkIdType v) override;
        
        Returns the full degree of the vertex.
        """
        ...
    
    def GetInEdge(self, p_int, p_int_1):
        """
        V.GetInEdge(int, int) -> vtkInEdgeType
        C++: vtkInEdgeType GetInEdge(vtkIdType v, vtkIdType i) override;
        V.GetInEdge(int, int, vtkGraphEdge)
        C++: void GetInEdge(vtkIdType v, vtkIdType i, vtkGraphEdge *e)
            override;
        
        Random-access method for retrieving the in edges of a vertex. For
        an undirected graph, this is the same as the out edges.
        """
        ...
    
    def GetInEdges(self, p_int, vtkInEdgeIterator):
        """
        V.GetInEdges(int, vtkInEdgeIterator)
        C++: void GetInEdges(vtkIdType v, vtkInEdgeIterator *it) override;
        
        Initialize the iterator to get the incoming edges to a vertex.
        For an undirected graph, this is all incident edges.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsStructureValid(self, vtkGraph):
        """
        V.IsStructureValid(vtkGraph) -> bool
        C++: bool IsStructureValid(vtkGraph *g) override;
        
        Check the structure, and accept it if it is a valid undirected
        graph. This is public to allow the ToDirected/UndirectedGraph to
        work.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUndirectedGraph
        C++: vtkUndirectedGraph *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUndirectedGraph
        C++: static vtkUndirectedGraph *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


