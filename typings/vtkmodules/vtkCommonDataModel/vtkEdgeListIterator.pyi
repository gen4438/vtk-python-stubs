"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkEdgeListIterator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkEdgeListIterator - Iterates through all edges in a graph.
    
    Superclass: vtkObject
    
    vtkEdgeListIterator iterates through all the edges in a graph, by
    traversing the adjacency list for each vertex. You may instantiate
    this class directly and call SetGraph() to traverse a certain graph.
    You may also call the graph's GetEdges() method to set up the
    iterator for a certain graph.
    
    Note that this class does NOT guarantee that the edges will be
    processed in order of their ids (i.e. it will not necessarily return
    edge 0, then edge 1, etc.).
    
    @sa
    vtkGraph
    """
    def GetGraph(self):
        """
        V.GetGraph() -> vtkGraph
        C++: virtual vtkGraph *GetGraph()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HasNext(self):
        """
        V.HasNext() -> bool
        C++: bool HasNext()
        
        Whether this iterator has more edges.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEdgeListIterator
        C++: vtkEdgeListIterator *NewInstance()
        """
        ...
    
    def Next(self):
        """
        V.Next() -> vtkEdgeType
        C++: vtkEdgeType Next()
        
        Returns the next edge in the graph.
        """
        ...
    
    def NextGraphEdge(self):
        """
        V.NextGraphEdge() -> vtkGraphEdge
        C++: vtkGraphEdge *NextGraphEdge()
        
        Just like Next(), but returns heavy-weight vtkGraphEdge object
        instead of the vtkEdgeType struct, for use with wrappers. The
        graph edge is owned by this iterator, and changes after each call
        to NextGraphEdge().
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEdgeListIterator
        C++: static vtkEdgeListIterator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGraph(self, vtkGraph):
        """
        V.SetGraph(vtkGraph)
        C++: virtual void SetGraph(vtkGraph *graph)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


