"""
This type stub file was generated by pyright.
"""

from .vtkImplicitFunction import vtkImplicitFunction

class vtkPlanes(vtkImplicitFunction):
    """
    vtkPlanes - implicit function for convex set of planes
    
    Superclass: vtkImplicitFunction
    
    vtkPlanes computes the implicit function and function gradient for a
    set of planes. The planes must define a convex space.
    
    The function value is the intersection (i.e., maximum value) obtained
    by evaluating the each of the supplied planes. Hence the value is the
    maximum distance of a point to the convex region defined by the
    planes. The function gradient is the plane normal at the function
    value.  Note that the normals must point outside of the convex
    region. Thus, a negative function value means that a point is inside
    the convex region.
    
    There are several methods to define the set of planes. The most
    general is to supply an instance of vtkPoints and an instance of
    vtkDataArray. (The points define a point on the plane, and the
    normals corresponding plane normals.) Two other specialized ways are
    to 1) supply six planes defining the view frustrum of a camera, and
    2) provide a bounding box.
    
    @sa
    vtkImplicitBoolean vtkSpheres vtkFrustrumSource vtkCamera
    """
    def EvaluateFunction(self, p_float=..., p_float=..., p_float=...):
        """
        V.EvaluateFunction([float, float, float]) -> float
        C++: double EvaluateFunction(double x[3]) override;
        V.EvaluateFunction(vtkDataArray, vtkDataArray)
        C++: virtual void EvaluateFunction(vtkDataArray *input,
            vtkDataArray *output)
        V.EvaluateFunction(float, float, float) -> float
        C++: virtual double EvaluateFunction(double x, double y, double z)
        
        Evaluate plane equations. Return largest value (i.e., an
        intersection operation between all planes).
        """
        ...
    
    def EvaluateGradient(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateGradient([float, float, float], [float, float, float])
        C++: void EvaluateGradient(double x[3], double n[3]) override;
        
        Evaluate planes gradient.
        """
        ...
    
    def GetNormals(self):
        """
        V.GetNormals() -> vtkDataArray
        C++: virtual vtkDataArray *GetNormals()
        
        Specify a list of normal vectors for the planes. There is a
        one-to-one correspondence between plane points and plane normals.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def GetNumberOfPlanes(self):
        """
        V.GetNumberOfPlanes() -> int
        C++: int GetNumberOfPlanes()
        
        Return the number of planes in the set of planes.
        """
        ...
    
    def GetPlane(self, p_int):
        """
        V.GetPlane(int) -> vtkPlane
        C++: vtkPlane *GetPlane(int i)
        V.GetPlane(int, vtkPlane)
        C++: void GetPlane(int i, vtkPlane *plane)
        
        Create and return a pointer to a vtkPlane object at the ith
        position. Asking for a plane outside the allowable range returns
        nullptr. This method always returns the same object. Use
        GetPlane(int i, vtkPlane *plane) instead.
        """
        ...
    
    def GetPoints(self):
        """
        V.GetPoints() -> vtkPoints
        C++: virtual vtkPoints *GetPoints()
        
        Specify a list of points defining points through which the planes
        pass.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlanes
        C++: vtkPlanes *NewInstance()
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlanes
        C++: static vtkPlanes *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def SetBounds(self, ):
        """
        V.SetBounds((float, float, float, float, float, float))
        C++: void SetBounds(const double bounds[6])
        V.SetBounds(float, float, float, float, float, float)
        C++: void SetBounds(double xmin, double xmax, double ymin,
            double ymax, double zmin, double zmax)
        
        An alternative method to specify six planes defined by a bounding
        box. The bounding box is a six-vector defined as
        (xmin,xmax,ymin,ymax,zmin,zmax). It defines six planes orthogonal
        to the x-y-z coordinate axes.
        """
        ...
    
    def SetFrustumPlanes(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.SetFrustumPlanes([float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float])
        C++: void SetFrustumPlanes(double planes[24])
        
        An alternative method to specify six planes defined by the camera
        view frustrum. See vtkCamera::GetFrustumPlanes() documentation.
        """
        ...
    
    def SetNormals(self, vtkDataArray):
        """
        V.SetNormals(vtkDataArray)
        C++: void SetNormals(vtkDataArray *normals)
        
        Specify a list of normal vectors for the planes. There is a
        one-to-one correspondence between plane points and plane normals.
        """
        ...
    
    def SetPoints(self, vtkPoints):
        """
        V.SetPoints(vtkPoints)
        C++: virtual void SetPoints(vtkPoints *)
        
        Specify a list of points defining points through which the planes
        pass.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


