"""
This type stub file was generated by pyright.
"""

from .vtkAbstractPointLocator import vtkAbstractPointLocator

class vtkIncrementalPointLocator(vtkAbstractPointLocator):
    """
    vtkIncrementalPointLocator - Abstract class in support of both
     point location and point insertion.
    
    Superclass: vtkAbstractPointLocator
    
    Compared to a static point locator for pure location functionalities
     through some search structure established from a fixed set of
    points,
     an incremental point locator allows for, in addition, point
    insertion
     capabilities, with the search structure maintaining a dynamically
     increasing number of points. There are two incremental point
    locators,
     i.e., vtkPointLocator and vtkIncrementalOctreePointLocator. As
    opposed
     to the uniform bin-based search structure (adopted in
    vtkPointLocator)
     with a fixed spatial resolution, an octree mechanism (employed in
     vtkIncrementalOctreePointlocator) resorts to a hierarchy of
    tree-like
     sub-division of the 3D data domain. Thus it enables data-aware
    multi-
     resolution and accordingly accelerated point location as well as
    point
     insertion, particularly when handling a radically imbalanced layout
    of
     points as not uncommon in datasets defined on adaptive meshes. In
    other
     words, vtkIncrementalOctreePointLocator is an octree-based
    accelerated
     implementation of all functionalities of vtkPointLocator.
    
    @sa
     vtkLocator, vtkIncrementalOctreePointLocator, vtkPointLocator,
     vtkMergePoints vtkStaticPointLocator
    """
    def FindClosestInsertedPoint(self, ):
        """
        V.FindClosestInsertedPoint((float, float, float)) -> int
        C++: virtual vtkIdType FindClosestInsertedPoint(const double x[3])
        
        Given a point x assumed to be covered by the search structure,
        return the index of the closest point (already inserted to the
        search structure) regardless of the associated minimum squared
        distance relative to the squared insertion-tolerance distance.
        This method is used when performing incremental point insertion.
        Note -1 indicates that no point is found. InitPointInsertion()
        should have been called in advance.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard type and print methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def InitPointInsertion(self, vtkPoints, ):
        """
        V.InitPointInsertion(vtkPoints, (float, float, float, float,
            float, float)) -> int
        C++: virtual int InitPointInsertion(vtkPoints *newPts,
            const double bounds[6])
        V.InitPointInsertion(vtkPoints, (float, float, float, float,
            float, float), int) -> int
        C++: virtual int InitPointInsertion(vtkPoints *newPts,
            const double bounds[6], vtkIdType estSize)
        
        Initialize the point insertion process. newPts is an object,
        storing 3D point coordinates, to which incremental point
        insertion puts coordinates. It is created and provided by an
        external VTK class. Argument bounds represents the spatial
        bounding box, into which the points fall.
        """
        ...
    
    def InsertNextPoint(self, ):
        """
        V.InsertNextPoint((float, float, float)) -> int
        C++: virtual vtkIdType InsertNextPoint(const double x[3])
        
        Insert a given point and return the point index.
        InitPointInsertion() should have been called prior to this
        function. Also, IsInsertedPoint() should have been called in
        advance to ensure that the given point has not been inserted
        unless point duplication is allowed.
        """
        ...
    
    def InsertPoint(self, p_int, ):
        """
        V.InsertPoint(int, (float, float, float))
        C++: virtual void InsertPoint(vtkIdType ptId, const double x[3])
        
        Insert a given point with a specified point index ptId.
        InitPointInsertion() should have been called prior to this
        function. Also, IsInsertedPoint() should have been called in
        advance to ensure that the given point has not been inserted
        unless point duplication is allowed.
        """
        ...
    
    def InsertUniquePoint(self, , p_int):
        """
        V.InsertUniquePoint((float, float, float), int) -> int
        C++: virtual int InsertUniquePoint(const double x[3],
            vtkIdType &ptId)
        
        Insert a point unless there has been a duplicate in the search
        structure. This method is not thread safe.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard type and print methods.
        """
        ...
    
    def IsInsertedPoint(self, p_float, p_float_1, p_float_2):
        """
        V.IsInsertedPoint(float, float, float) -> int
        C++: virtual vtkIdType IsInsertedPoint(double x, double y,
            double z)
        V.IsInsertedPoint((float, float, float)) -> int
        C++: virtual vtkIdType IsInsertedPoint(const double x[3])
        
        Determine whether or not a given point has been inserted. Return
        the id of the already inserted point if true, else return -1.
        InitPointInsertion() should have been called in advance.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkIncrementalPointLocator
        C++: vtkIncrementalPointLocator *NewInstance()
        
        Standard type and print methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkIncrementalPointLocator
        C++: static vtkIncrementalPointLocator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard type and print methods.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


