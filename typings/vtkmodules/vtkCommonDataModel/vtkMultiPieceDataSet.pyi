"""
This type stub file was generated by pyright.
"""

from .vtkPartitionedDataSet import vtkPartitionedDataSet

class vtkMultiPieceDataSet(vtkPartitionedDataSet):
    """
    vtkMultiPieceDataSet - composite dataset to encapsulates pieces of
    dataset.
    
    Superclass: vtkPartitionedDataSet
    
    A vtkMultiPieceDataSet dataset groups multiple data pieces together.
    For example, say that a simulation broke a volume into 16 piece so
    that each piece can be processed with 1 process in parallel. We want
    to load this volume in a visualization cluster of 4 nodes. Each node
    will get 4 pieces, not necessarily forming a whole rectangular piece.
    In this case, it is not possible to append the 4 pieces together into
    a vtkImageData. In this case, these 4 pieces can be collected
    together using a vtkMultiPieceDataSet. Note that vtkMultiPieceDataSet
    is intended to be included in other composite datasets eg.
    vtkMultiBlockDataSet, vtkHierarchicalBoxDataSet. Hence the lack of
    algorithms producting vtkMultiPieceDataSet.
    """
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkMultiPieceDataSet
        C++: static vtkMultiPieceDataSet *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkMultiPieceDataSet
        C++: static vtkMultiPieceDataSet *GetData(vtkInformationVector *v,
             int i=0)
        
        Retrieve an instance of this class from an information object.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return class name of data type (see vtkType.h for definitions).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPieces(self):
        """
        V.GetNumberOfPieces() -> int
        C++: unsigned int GetNumberOfPieces()
        
        Returns the number of pieces.
        """
        ...
    
    def GetPiece(self, p_int):
        """
        V.GetPiece(int) -> vtkDataSet
        C++: vtkDataSet *GetPiece(unsigned int pieceno)
        
        Returns the piece at the given index.
        """
        ...
    
    def GetPieceAsDataObject(self, p_int):
        """
        V.GetPieceAsDataObject(int) -> vtkDataObject
        C++: vtkDataObject *GetPieceAsDataObject(unsigned int pieceno)
        
        Returns the piece at the given index.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMultiPieceDataSet
        C++: vtkMultiPieceDataSet *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMultiPieceDataSet
        C++: static vtkMultiPieceDataSet *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfPieces(self, p_int):
        """
        V.SetNumberOfPieces(int)
        C++: void SetNumberOfPieces(unsigned int numpieces)
        
        Set the number of pieces. This will cause allocation if the new
        number of pieces is greater than the current size. All new pieces
        are initialized to null.
        """
        ...
    
    def SetPiece(self, p_int, vtkDataObject):
        """
        V.SetPiece(int, vtkDataObject)
        C++: void SetPiece(unsigned int pieceno, vtkDataObject *piece)
        
        Sets the data object as the given piece. The total number of
        pieces will be resized to fit the requested piece no.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


