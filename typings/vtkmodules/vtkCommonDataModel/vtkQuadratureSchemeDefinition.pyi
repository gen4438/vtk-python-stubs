"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkQuadratureSchemeDefinition(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkQuadratureSchemeDefinition - An Elemental data type that holds a
    definition of a numerical quadrature scheme.
    
    Superclass: vtkObject
    
    The definition contains the requisite information to interpolate to
    the so called quadrature points of the specific scheme. namely:
    
    1) A matrix of shape function weights(shape functions evaluated at
    parametric coordinates of the quadrature points).
    
    2) The number of quadrature points and cell nodes. These parameters
    size the matrix, and allow for convinent evaluation by users of the
    definition.
    """
    def Clear(self):
        """
        V.Clear()
        C++: void Clear()
        
        Release all allocated resources and set the object to an
        uninitialized state.
        """
        ...
    
    def DeepCopy(self, vtkQuadratureSchemeDefinition):
        """
        V.DeepCopy(vtkQuadratureSchemeDefinition) -> int
        C++: int DeepCopy(const vtkQuadratureSchemeDefinition *other)
        
        Deep copy.
        """
        ...
    
    def DICTIONARY(self):
        """
        V.DICTIONARY()
            -> vtkInformationQuadratureSchemeDefinitionVectorKey
        C++: static vtkInformationQuadratureSchemeDefinitionVectorKey *DICTIONARY(
            )
        """
        ...
    
    def GetCellType(self):
        """
        V.GetCellType() -> int
        C++: int GetCellType()
        
        Access the VTK cell type id.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfNodes(self):
        """
        V.GetNumberOfNodes() -> int
        C++: int GetNumberOfNodes()
        
        Get the number of nodes associated with the interpolation.
        """
        ...
    
    def GetNumberOfQuadraturePoints(self):
        """
        V.GetNumberOfQuadraturePoints() -> int
        C++: int GetNumberOfQuadraturePoints()
        
        Get the number of quadrature points associated with the scheme.
        """
        ...
    
    def GetQuadratureKey(self):
        """
        V.GetQuadratureKey() -> int
        C++: int GetQuadratureKey()
        
        Access to an alternative key.
        """
        ...
    
    def GetQuadratureWeights(self):
        """
        V.GetQuadratureWeights() -> (float, ...)
        C++: const double *GetQuadratureWeights()
        
        Access to the quadrature weights.
        """
        ...
    
    def GetShapeFunctionWeights(self):
        """
        V.GetShapeFunctionWeights() -> (float, ...)
        C++: const double *GetShapeFunctionWeights()
        V.GetShapeFunctionWeights(int) -> (float, ...)
        C++: const double *GetShapeFunctionWeights(int quadraturePointId)
        
        Get the array of shape function weights. Shape function weights
        are the shape functions evaluated at the quadrature points. There
        are "NumberOfNodes" weights for each quadrature point.
        """
        ...
    
    def Initialize(self, p_int, p_int_1, p_int_2, *float):
        """
        V.Initialize(int, int, int, [float, ...])
        C++: void Initialize(int cellType, int numberOfNodes,
            int numberOfQuadraturePoints, double *shapeFunctionWeights)
        V.Initialize(int, int, int, [float, ...], [float, ...])
        C++: void Initialize(int cellType, int numberOfNodes,
            int numberOfQuadraturePoints, double *shapeFunctionWeights,
            double *quadratureWeights)
        
        Initialize the object allocating resources as needed.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkQuadratureSchemeDefinition
        C++: vtkQuadratureSchemeDefinition *NewInstance()
        """
        ...
    
    def QUADRATURE_OFFSET_ARRAY_NAME(self):
        """
        V.QUADRATURE_OFFSET_ARRAY_NAME() -> vtkInformationStringKey
        C++: static vtkInformationStringKey *QUADRATURE_OFFSET_ARRAY_NAME(
            )
        """
        ...
    
    def RestoreState(self, vtkXMLDataElement):
        """
        V.RestoreState(vtkXMLDataElement) -> int
        C++: int RestoreState(vtkXMLDataElement *e)
        
        Restore the object from an XML representation.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkQuadratureSchemeDefinition
        C++: static vtkQuadratureSchemeDefinition *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SaveState(self, vtkXMLDataElement):
        """
        V.SaveState(vtkXMLDataElement) -> int
        C++: int SaveState(vtkXMLDataElement *e)
        
        Put the object into an XML representation. The element passed in
        is assumed to be empty.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


