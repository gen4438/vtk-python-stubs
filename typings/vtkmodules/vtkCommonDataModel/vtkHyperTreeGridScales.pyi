"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkHyperTreeGridScales(object):
    """
    vtkHyperTreeGridScales - A specifalized type of vtkHyperTreeGrid for
    the case when root cells have uniform sizes in each direction *
    
    @sa
    vtkHyperTree vtkHyperTreeGrid vtkRectilinearGrid
    
    @par Thanks: This class was written by Jacques-Bernard Lekien (CEA)
    This work was supported by Commissariat a l'Energie Atomique CEA,
    DAM, DIF, F-91297 Arpajon, France.
    
    vtkHyperTreeGridScales(double branchfactor, const double scale[3])
    vtkHyperTreeGridScales(const &vtkHyperTreeGridScales)
    """
    def GetBranchFactor(self):
        """
        V.GetBranchFactor() -> float
        C++: double GetBranchFactor()
        
        JB Retourne le scale des mailles du niveau demande
        """
        ...
    
    def GetCurrentFailLevel(self):
        """
        V.GetCurrentFailLevel() -> int
        C++: unsigned int GetCurrentFailLevel()
        
        JB
        """
        ...
    
    def GetScale(self, p_int):
        """
        V.GetScale(int) -> (float, ...)
        C++: double *GetScale(unsigned int level)
        V.GetScale(int, [float, float, float])
        C++: void GetScale(unsigned int level, double scale[3])
        
        JB Retourne le scale des mailles du niveau demande
        """
        ...
    
    def GetScaleX(self, p_int):
        """
        V.GetScaleX(int) -> float
        C++: double GetScaleX(unsigned int level)
        
        JB
        """
        ...
    
    def GetScaleY(self, p_int):
        """
        V.GetScaleY(int) -> float
        C++: double GetScaleY(unsigned int level)
        
        JB
        """
        ...
    
    def GetScaleZ(self, p_int):
        """
        V.GetScaleZ(int) -> float
        C++: double GetScaleZ(unsigned int level)
        
        JB
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, double_branchfactor, const_double_scale, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


