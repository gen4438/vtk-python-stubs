"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkGenericAttribute(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGenericAttribute - abstract class defined API for attribute data
    
    Superclass: vtkObject
    
    vtkGenericAttribute is an abstract class that defines an API for
    attribute data. Attribute data is data associated with the topology
    or geometry of a dataset (i.e., points, cells, etc.).
    vtkGenericAttribute is part of the adaptor framework (see
    GenericFiltering/README.html).
    
    vtkGenericAttribute provides a more general interface to attribute
    data than its counterpart vtkDataArray (which assumes a linear,
    contiguous array). It adopts an iterator interface, and allows
    attributes to be associated with points, edges, faces, or edges.
    """
    def DeepCopy(self, vtkGenericAttribute):
        """
        V.DeepCopy(vtkGenericAttribute)
        C++: virtual void DeepCopy(vtkGenericAttribute *other)
        
        Recursive duplication of `other' in `this'.
        \pre other_exists: other!=0
        \pre not_self: other!=this
        """
        ...
    
    def GetActualMemorySize(self):
        """
        V.GetActualMemorySize() -> int
        C++: virtual unsigned long GetActualMemorySize()
        
        Size in kibibytes (1024 bytes) taken by the attribute.
        """
        ...
    
    def GetCentering(self):
        """
        V.GetCentering() -> int
        C++: virtual int GetCentering()
        
        Is the attribute centered either on points, cells or boundaries?
        \post valid_result:
            (result==vtkPointCentered)||(result==vtkCellCentered)
        """
        ...
    
    def GetComponent(self, p_int, vtkGenericCellIterator, *float):
        """
        V.GetComponent(int, vtkGenericCellIterator, [float, ...])
        C++: virtual void GetComponent(int i, vtkGenericCellIterator *c,
            double *values)
        V.GetComponent(int, vtkGenericPointIterator) -> float
        C++: virtual double GetComponent(int i,
            vtkGenericPointIterator *p)
        
        Put component `i' of the attribute at all points of cell `c' in
        `values'.
        \pre valid_component: (i>=0) && (i<GetNumberOfComponents())
        \pre c_exists: c!=0
        \pre c_valid: !c->IsAtEnd()
        \pre values_exist: values!=0
        \pre valid_values:
            sizeof(values)>=c->GetCell()->GetNumberOfPoints()
        """
        ...
    
    def GetComponentType(self):
        """
        V.GetComponentType() -> int
        C++: virtual int GetComponentType()
        
        Type of the components of the attribute: int, float, double
        \post valid_result: (result==VTK_BIT)          
            ||(result==VTK_CHAR)
        ||(result==VTK_UNSIGNED_CHAR) ||(result==VTK_SHORT)
        ||(result==VTK_UNSIGNED_SHORT)||(result==VTK_INT)
        ||(result==VTK_UNSIGNED_INT)  ||(result==VTK_LONG)
        ||(result==VTK_UNSIGNED_LONG) ||(result==VTK_FLOAT)
        ||(result==VTK_DOUBLE)        ||(result==VTK_ID_TYPE)
        """
        ...
    
    def GetMaxNorm(self):
        """
        V.GetMaxNorm() -> float
        C++: virtual double GetMaxNorm()
        
        Return the maximum euclidean norm for the tuples.
        \post positive_result: result>=0
        """
        ...
    
    def GetName(self):
        """
        V.GetName() -> string
        C++: virtual const char *GetName()
        
        Name of the attribute. (e.g. "velocity")
        \post result_may_not_exist: result!=0 || result==0
        """
        ...
    
    def GetNumberOfComponents(self):
        """
        V.GetNumberOfComponents() -> int
        C++: virtual int GetNumberOfComponents()
        
        Dimension of the attribute. (1 for scalar, 3 for velocity)
        \post positive_result: result>=0
        \post GetType()==VTK_SCALARS implies result==1
        \post
            (GetType()==VTK_VECTORS||(GetType()==VTK_NORMALS)||(GetType()=
            =VTK_TCOORDS) implies
        result==3 \post GetType()==VTK_TENSORS implies result==6
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRange(self, p_int):
        """
        V.GetRange(int) -> (float, ...)
        C++: virtual double *GetRange(int component=0)
        V.GetRange(int, [float, float])
        C++: virtual void GetRange(int component, double range[2])
        
        Range of the attribute component `component'. If `component'==-1,
        it returns the range of the magnitude (euclidean norm). It
        returns double, even if GetType()==VTK_INT. NOT THREAD SAFE
        \pre valid_component:
            (component>=-1)&&(component<GetNumberOfComponents())
        \post result_exists: result!=0
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> int
        C++: virtual vtkIdType GetSize()
        
        Number of tuples.
        \post valid_result: result>=0
        """
        ...
    
    def GetTuple(self, vtkGenericAdaptorCell):
        """
        V.GetTuple(vtkGenericAdaptorCell) -> (float, ...)
        C++: virtual double *GetTuple(vtkGenericAdaptorCell *c)
        V.GetTuple(vtkGenericAdaptorCell, [float, ...])
        C++: virtual void GetTuple(vtkGenericAdaptorCell *c,
            double *tuple)
        V.GetTuple(vtkGenericCellIterator) -> (float, ...)
        C++: virtual double *GetTuple(vtkGenericCellIterator *c)
        V.GetTuple(vtkGenericCellIterator, [float, ...])
        C++: virtual void GetTuple(vtkGenericCellIterator *c,
            double *tuple)
        V.GetTuple(vtkGenericPointIterator) -> (float, ...)
        C++: virtual double *GetTuple(vtkGenericPointIterator *p)
        V.GetTuple(vtkGenericPointIterator, [float, ...])
        C++: virtual void GetTuple(vtkGenericPointIterator *p,
            double *tuple)
        
        Attribute at all points of cell `c'.
        \pre c_exists: c!=0
        \pre c_valid: !c->IsAtEnd()
        \post result_exists: result!=0
        \post valid_result:
            sizeof(result)==GetNumberOfComponents()*c->GetCell()->GetNumbe
            rOfPoints()
        """
        ...
    
    def GetType(self):
        """
        V.GetType() -> int
        C++: virtual int GetType()
        
        Type of the attribute: scalar, vector, normal, texture
        coordinate, tensor
        \post valid_result: (result==vtkDataSetAttributes::SCALARS)
        ||(result==vtkDataSetAttributes::VECTORS)
        ||(result==vtkDataSetAttributes::NORMALS)
        ||(result==vtkDataSetAttributes::TCOORDS)
        ||(result==vtkDataSetAttributes::TENSORS)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericAttribute
        C++: vtkGenericAttribute *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericAttribute
        C++: static vtkGenericAttribute *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ShallowCopy(self, vtkGenericAttribute):
        """
        V.ShallowCopy(vtkGenericAttribute)
        C++: virtual void ShallowCopy(vtkGenericAttribute *other)
        
        Update `this' using fields of `other'.
        \pre other_exists: other!=0
        \pre not_self: other!=this
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


