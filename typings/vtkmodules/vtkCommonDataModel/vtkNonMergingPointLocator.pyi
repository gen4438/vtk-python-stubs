"""
This type stub file was generated by pyright.
"""

from .vtkPointLocator import vtkPointLocator

class vtkNonMergingPointLocator(vtkPointLocator):
    """
    vtkNonMergingPointLocator - direct / check-free point insertion.
    
    Superclass: vtkPointLocator
    
    As a special sub-class of vtkPointLocator, vtkNonMergingPointLocator
    is
     intended for direct / check-free insertion of points into a
    vtkPoints
     object. In other words, any given point is always directly inserted.
     The name emphasizes the difference between this class and its
    sibling
     class vtkMergePoints in that the latter class performs check-based
    zero
     tolerance point insertion (or to 'merge' exactly duplicate /
    coincident
     points) by exploiting the uniform bin mechanism employed by the
    parent
     class vtkPointLocator. vtkPointLocator allows for generic (zero and
    non-
     zero) tolerance point insertion as well as point location.
    
    @sa
     vtkIncrementalPointLocator vtkPointLocator vtkMergePoints
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type management and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type management and printing.
        """
        ...
    
    def InsertUniquePoint(self, , p_int):
        """
        V.InsertUniquePoint((float, float, float), int) -> int
        C++: int InsertUniquePoint(const double x[3], vtkIdType &ptId)
            override;
        
        Determine whether a given point x has been inserted into the
        points list. Return 0 if a duplicate has been inserted in the
        list, or 1 else. Note this function always returns 1 since any
        point is always inserted. The index of the point is returned via
        ptId.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type management and printing.
        """
        ...
    
    def IsInsertedPoint(self, ):
        """
        V.IsInsertedPoint((float, float, float)) -> int
        C++: vtkIdType IsInsertedPoint(const double[3]) override;
        V.IsInsertedPoint(float, float, float) -> int
        C++: vtkIdType IsInsertedPoint(double, double, double) override;
        
        Determine whether a given point x has been inserted into the
        points list. Return the id of the already inserted point if it is
        true, or -1 else. Note this function always returns -1 since any
        point is always inserted.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type management and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNonMergingPointLocator
        C++: vtkNonMergingPointLocator *NewInstance()
        
        Standard methods for type management and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNonMergingPointLocator
        C++: static vtkNonMergingPointLocator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for type management and printing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


