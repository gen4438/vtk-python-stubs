"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkImageTransform(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkImageTransform - helper class to transform output of
    non-axis-aligned images
    
    Superclass: vtkObject
    
    vtkImageTransform is a helper class to transform the output of image
    filters (i.e., filter that input vtkImageData) by applying the Index
    to Physical transformation frmo the input image, which can include
    origin, spacing, direction. The transformation process is threaded
    with vtkSMPTools for performance.
    
    Typically in application the single method TransformPointSet() is
    invoked to transform the output of an image algorithm (assuming that
    the image's direction/orientation matrix is non-identity). Note that
    vtkPointSets encompass vtkPolyData as well as vtkUnstructuredGrids.
    In the future other output types may be added. Note that specific
    methods for transforming points, normals, and vectors is also
    provided by this class in case additional output data arrays need to
    be transformed (since TransformPointSet() only processes data arrays
    labeled as points, normals, and vectors).
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for construction, type information, printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for construction, type information, printing.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for construction, type information, printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for construction, type information, printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageTransform
        C++: vtkImageTransform *NewInstance()
        
        Standard methods for construction, type information, printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageTransform
        C++: static vtkImageTransform *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for construction, type information, printing.
        """
        ...
    
    def TransformNormals(self, vtkMatrix3x3, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.TransformNormals(vtkMatrix3x3, [float, float, float],
            vtkDataArray)
        C++: static void TransformNormals(vtkMatrix3x3 *m3,
            double spacing[3], vtkDataArray *da)
        
        Given three-component normals represented by a vtkDataArray,
        transform the normals using the matrix provided.
        """
        ...
    
    def TransformPoints(self, vtkMatrix4x4, vtkDataArray):
        """
        V.TransformPoints(vtkMatrix4x4, vtkDataArray)
        C++: static void TransformPoints(vtkMatrix4x4 *m4,
            vtkDataArray *da)
        
        Given x-y-z points represented by a vtkDataArray, transform the
        points using the matrix provided.
        """
        ...
    
    def TransformPointSet(self, vtkImageData, vtkPointSet):
        """
        V.TransformPointSet(vtkImageData, vtkPointSet)
        C++: static void TransformPointSet(vtkImageData *im,
            vtkPointSet *ps)
        
        Given a vtkImageData (and hence its associated orientation
        matrix), and an instance of vtkPointSet, transform its points, as
        well as any normals and vectors, associated with the vtkPointSet.
        This is a convenience function, internally it calls
        TranslatePoints(), TransformPoints(), TransformNormals(), and/or
        TransformVectors() as appropriate. Note that both the normals and
        vectors associated with the point and cell data are transformed.
        """
        ...
    
    def TransformVectors(self, vtkMatrix3x3, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.TransformVectors(vtkMatrix3x3, [float, float, float],
            vtkDataArray)
        C++: static void TransformVectors(vtkMatrix3x3 *m3,
            double spacing[3], vtkDataArray *da)
        
        Given three-component vectors represented by a vtkDataArray,
        transform the vectors using the matrix provided.
        """
        ...
    
    def TranslatePoints(self, *float, **kwargs):
        """
        V.TranslatePoints([float, ...], vtkDataArray)
        C++: static void TranslatePoints(double *t, vtkDataArray *da)
        
        Given x-y-z points represented by a vtkDataArray, translate the
        points using the image origin. This method is useful if there is
        no orientation or spacing to apply.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


