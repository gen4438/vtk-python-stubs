"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkPointsProjectedHull(__vtkmodules_vtkCommonCore.vtkPoints):
    """
    vtkPointsProjectedHull - the convex hull of the orthogonal
       projection of the vtkPoints in the 3 coordinate directions
    
    Superclass: vtkPoints
    
    a subclass of vtkPoints, it maintains the counter clockwise
       convex hull of the points (projected orthogonally in the
       three coordinate directions) and has a method to
       test for intersection of that hull with an axis aligned
       rectangle.  This is used for intersection tests of 3D volumes.
    """
    def GetCCWHullX(self, *float, **kwargs):
        """
        V.GetCCWHullX([float, ...], int) -> int
        C++: int GetCCWHullX(double *pts, int len)
        """
        ...
    
    def GetCCWHullY(self, *float, **kwargs):
        """
        V.GetCCWHullY([float, ...], int) -> int
        C++: int GetCCWHullY(double *pts, int len)
        """
        ...
    
    def GetCCWHullZ(self, *float, **kwargs):
        """
        V.GetCCWHullZ([float, ...], int) -> int
        C++: int GetCCWHullZ(double *pts, int len)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSizeCCWHullX(self):
        """
        V.GetSizeCCWHullX() -> int
        C++: int GetSizeCCWHullX()
        
        Returns the number of points in the convex hull of the projection
        of the points down the positive x-axis
        """
        ...
    
    def GetSizeCCWHullY(self):
        """
        V.GetSizeCCWHullY() -> int
        C++: int GetSizeCCWHullY()
        
        Returns the number of points in the convex hull of the projection
        of the points down the positive y-axis
        """
        ...
    
    def GetSizeCCWHullZ(self):
        """
        V.GetSizeCCWHullZ() -> int
        C++: int GetSizeCCWHullZ()
        
        Returns the number of points in the convex hull of the projection
        of the points down the positive z-axis
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        Return object to instantiated state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointsProjectedHull
        C++: vtkPointsProjectedHull *NewInstance()
        """
        ...
    
    def RectangleIntersectionX(self, vtkPoints):
        """
        V.RectangleIntersectionX(vtkPoints) -> int
        C++: int RectangleIntersectionX(vtkPoints *R)
        V.RectangleIntersectionX(float, float, float, float) -> int
        C++: int RectangleIntersectionX(double ymin, double ymax,
            double zmin, double zmax)
        
        determine whether the resulting rectangle intersects the convex
        hull of the projection of the points along that axis.
        """
        ...
    
    def RectangleIntersectionY(self, vtkPoints):
        """
        V.RectangleIntersectionY(vtkPoints) -> int
        C++: int RectangleIntersectionY(vtkPoints *R)
        V.RectangleIntersectionY(float, float, float, float) -> int
        C++: int RectangleIntersectionY(double zmin, double zmax,
            double xmin, double xmax)
        
        of the parallel projection along the Y axis of the points
        """
        ...
    
    def RectangleIntersectionZ(self, vtkPoints):
        """
        V.RectangleIntersectionZ(vtkPoints) -> int
        C++: int RectangleIntersectionZ(vtkPoints *R)
        V.RectangleIntersectionZ(float, float, float, float) -> int
        C++: int RectangleIntersectionZ(double xmin, double xmax,
            double ymin, double ymax)
        
        of the parallel projection along the Z axis of the points
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset() override;
        
        Make object look empty but do not delete memory.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointsProjectedHull
        C++: static vtkPointsProjectedHull *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update()
        
        Forces recalculation of convex hulls, use this if you delete/add
        points
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


