"""
This type stub file was generated by pyright.
"""

from .vtkGenericCellTessellator import vtkGenericCellTessellator

class vtkSimpleCellTessellator(vtkGenericCellTessellator):
    """
    vtkSimpleCellTessellator - helper class to perform cell tessellation
    
    Superclass: vtkGenericCellTessellator
    
    vtkSimpleCellTessellator is a helper class to perform adaptive
    tessellation of particular cell topologies. The major purpose for
    this class is to transform higher-order cell types (e.g.,
    higher-order finite elements) into linear cells that can then be
    easily visualized by VTK. This class works in conjunction with the
    vtkGenericDataSet and vtkGenericAdaptorCell classes.
    
    This algorithm is based on edge subdivision. An error metric along
    each edge is evaluated, and if the error is greater than some
    tolerance, the edge is subdivided (as well as all connected 2D and 3D
    cells). The process repeats until the error metric is satisfied.
    Since the algorithm is based on edge subdivision it inherently avoid
    T-junctions.
    
    A significant issue addressed by this algorithm is to insure face
    compatibility across neighboring cells. That is, diagonals due to
    face triangulation must match to insure that the mesh is compatible.
    The algorithm employs a precomputed table to accelerate the
    tessellation process. The table was generated with the help of
    vtkOrderedTriangulator the basic idea is that the choice of diagonal
    is made only by considering the relative value of the point ids.
    
    @sa
    vtkGenericCellTessellator vtkGenericSubdivisionErrorMetric
    vtkAttributesErrorMetric vtkGeometricErrorMetric
    vtkViewDependentErrorMetric
    """
    def GetFixedSubdivisions(self):
        """
        V.GetFixedSubdivisions() -> int
        C++: int GetFixedSubdivisions()
        
        Return the number of fixed subdivisions. It is used to prevent
        from infinite loop in degenerated cases. For order 3 or higher,
        if the inflection point is exactly on the mid-point, error metric
        will not detect that a subdivision is required. 0 means no fixed
        subdivision: there will be only adaptive subdivisions.
        
        * The algorithm first performs `GetFixedSubdivisions' non
          adaptive
        * subdivisions followed by at most `GetMaxAdaptiveSubdivisions'
          adaptive
        * subdivisions. Hence, there are at most `GetMaxSubdivisionLevel'
        * subdivisions.
        * \post positive_result: result>=0 &&
          result<=GetMaxSubdivisionLevel()
        """
        ...
    
    def GetGenericCell(self):
        """
        V.GetGenericCell() -> vtkGenericAdaptorCell
        C++: virtual vtkGenericAdaptorCell *GetGenericCell()
        
        Get the higher order cell in order to access the evaluation
        function.
        """
        ...
    
    def GetMaxAdaptiveSubdivisions(self):
        """
        V.GetMaxAdaptiveSubdivisions() -> int
        C++: int GetMaxAdaptiveSubdivisions()
        
        Return the maximum number of adaptive subdivisions.
        \post valid_result:
            result==GetMaxSubdivisionLevel()-GetFixedSubdivisions()
        """
        ...
    
    def GetMaxSubdivisionLevel(self):
        """
        V.GetMaxSubdivisionLevel() -> int
        C++: int GetMaxSubdivisionLevel()
        
        Return the maximum level of subdivision. It is used to prevent
        from infinite loop in degenerated cases. For order 3 or higher,
        if the inflection point is exactly on the mid-point, error metric
        will not detect that a subdivision is required. 0 means no
        subdivision, neither fixed nor adaptive.
        \post positive_result: result>=GetFixedSubdivisions()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Initialize(self, vtkGenericDataSet):
        """
        V.Initialize(vtkGenericDataSet)
        C++: void Initialize(vtkGenericDataSet *ds) override;
        
        Initialize the tessellator with a data set `ds'.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimpleCellTessellator
        C++: vtkSimpleCellTessellator *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reset the output for repeated use of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimpleCellTessellator
        C++: static vtkSimpleCellTessellator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFixedSubdivisions(self, p_int):
        """
        V.SetFixedSubdivisions(int)
        C++: void SetFixedSubdivisions(int level)
        
        Set the number of fixed subdivisions. See GetFixedSubdivisions()
        for more explanations.
        \pre positive_level: level>=0 && level<=GetMaxSubdivisionLevel()
        \post is_set: GetFixedSubdivisions()==level
        """
        ...
    
    def SetMaxSubdivisionLevel(self, p_int):
        """
        V.SetMaxSubdivisionLevel(int)
        C++: void SetMaxSubdivisionLevel(int level)
        
        Set the maximum level of subdivision. See
        GetMaxSubdivisionLevel() for more explanations.
        \pre positive_level: level>=GetFixedSubdivisions()
        \post is_set: level==GetMaxSubdivisionLevel()
        """
        ...
    
    def SetSubdivisionLevels(self, p_int, p_int_1):
        """
        V.SetSubdivisionLevels(int, int)
        C++: void SetSubdivisionLevels(int fixed, int maxLevel)
        
        Set both the number of fixed subdivisions and the maximum level
        of subdivisions. See GetFixedSubdivisions(),
        GetMaxSubdivisionLevel() and GetMaxAdaptiveSubdivisions() for
        more explanations.
        \pre positive_fixed: fixed>=0
        \pre valid_range: fixed<=maxLevel
        \post fixed_is_set: fixed==GetFixedSubdivisions()
        \post maxLevel_is_set: maxLevel==GetMaxSubdivisionLevel()
        """
        ...
    
    def Tessellate(self, vtkGenericAdaptorCell, vtkGenericAttributeCollection, vtkDoubleArray, vtkCellArray, vtkPointData):
        """
        V.Tessellate(vtkGenericAdaptorCell, vtkGenericAttributeCollection,
             vtkDoubleArray, vtkCellArray, vtkPointData)
        C++: void Tessellate(vtkGenericAdaptorCell *cell,
            vtkGenericAttributeCollection *att, vtkDoubleArray *points,
            vtkCellArray *cellArray, vtkPointData *internalPd) override;
        
        Tessellate a 3D `cell'. The result is a set of smaller linear
        tetrahedra in `cellArray' with `points' and point data
        `internalPd'.
        \pre cell_exists: cell!=0
        \pre valid_dimension: cell->GetDimension()==3
        \pre att_exists: att!=0
        \pre points_exists: points!=0
        \pre cellArray_exists: cellArray!=0
        \pre internalPd_exists: internalPd!=0
        """
        ...
    
    def TessellateFace(self, vtkGenericAdaptorCell, vtkGenericAttributeCollection, p_int, vtkDoubleArray, vtkCellArray, vtkPointData):
        """
        V.TessellateFace(vtkGenericAdaptorCell,
            vtkGenericAttributeCollection, int, vtkDoubleArray,
            vtkCellArray, vtkPointData)
        C++: void TessellateFace(vtkGenericAdaptorCell *cell,
            vtkGenericAttributeCollection *att, vtkIdType index,
            vtkDoubleArray *points, vtkCellArray *cellArray,
            vtkPointData *internalPd) override;
        
        Tessellate a face of a 3D `cell'. The face is specified by the
        index value. The result is a set of smaller linear triangles in
        `cellArray' with `points' and point data `internalPd'.
        \pre cell_exists: cell!=0
        \pre valid_dimension: cell->GetDimension()==3
        \pre valid_index_range: (index>=0) &&
            (index<cell->GetNumberOfBoundaries(2))
        \pre att_exists: att!=0
        \pre points_exists: points!=0
        \pre cellArray_exists: cellArray!=0
        \pre internalPd_exists: internalPd!=0
        """
        ...
    
    def Triangulate(self, vtkGenericAdaptorCell, vtkGenericAttributeCollection, vtkDoubleArray, vtkCellArray, vtkPointData):
        """
        V.Triangulate(vtkGenericAdaptorCell,
            vtkGenericAttributeCollection, vtkDoubleArray, vtkCellArray,
            vtkPointData)
        C++: void Triangulate(vtkGenericAdaptorCell *cell,
            vtkGenericAttributeCollection *att, vtkDoubleArray *points,
            vtkCellArray *cellArray, vtkPointData *internalPd) override;
        
        Triangulate a 2D `cell'. The result is a set of smaller linear
        triangles in `cellArray' with `points' and point data
        `internalPd'.
        \pre cell_exists: cell!=0
        \pre valid_dimension: cell->GetDimension()==2
        \pre att_exists: att!=0
        \pre points_exists: points!=0
        \pre cellArray_exists: cellArray!=0
        \pre internalPd_exists: internalPd!=0
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


