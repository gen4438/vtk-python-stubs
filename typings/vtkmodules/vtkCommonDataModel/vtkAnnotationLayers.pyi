"""
This type stub file was generated by pyright.
"""

from .vtkDataObject import vtkDataObject

class vtkAnnotationLayers(vtkDataObject):
    """
    vtkAnnotationLayers - Stores a ordered collection of annotation sets
    
    Superclass: vtkDataObject
    
    vtkAnnotationLayers stores a vector of annotation layers. Each layer
    may contain any number of vtkAnnotation objects. The ordering of the
    layers introduces a prioritization of annotations. Annotations in
    higher layers may obscure annotations in lower layers.
    """
    def AddAnnotation(self, vtkAnnotation):
        """
        V.AddAnnotation(vtkAnnotation)
        C++: void AddAnnotation(vtkAnnotation *ann)
        
        Add an annotation to a layer.
        """
        ...
    
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *other) override;
        
        Copy data from another data object into this one, performing a
        deep copy of member annotations.
        """
        ...
    
    def GetAnnotation(self, p_int):
        """
        V.GetAnnotation(int) -> vtkAnnotation
        C++: vtkAnnotation *GetAnnotation(unsigned int idx)
        
        Retrieve an annotation from a layer.
        """
        ...
    
    def GetCurrentAnnotation(self):
        """
        V.GetCurrentAnnotation() -> vtkAnnotation
        C++: virtual vtkAnnotation *GetCurrentAnnotation()
        
        The current annotation associated with this annotation link.
        """
        ...
    
    def GetCurrentSelection(self):
        """
        V.GetCurrentSelection() -> vtkSelection
        C++: virtual vtkSelection *GetCurrentSelection()
        
        The current selection associated with this annotation link. This
        is simply the selection contained in the current annotation.
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkAnnotationLayers
        C++: static vtkAnnotationLayers *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkAnnotationLayers
        C++: static vtkAnnotationLayers *GetData(vtkInformationVector *v,
            int i=0)
        
        Retrieve a vtkAnnotationLayers stored inside an information
        object.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        The modified time for this object.
        """
        ...
    
    def GetNumberOfAnnotations(self):
        """
        V.GetNumberOfAnnotations() -> int
        C++: unsigned int GetNumberOfAnnotations()
        
        The number of annotations in a specific layer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        Initialize the data structure to an empty state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAnnotationLayers
        C++: vtkAnnotationLayers *NewInstance()
        """
        ...
    
    def RemoveAnnotation(self, vtkAnnotation):
        """
        V.RemoveAnnotation(vtkAnnotation)
        C++: void RemoveAnnotation(vtkAnnotation *ann)
        
        Remove an annotation from a layer.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAnnotationLayers
        C++: static vtkAnnotationLayers *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCurrentAnnotation(self, vtkAnnotation):
        """
        V.SetCurrentAnnotation(vtkAnnotation)
        C++: virtual void SetCurrentAnnotation(vtkAnnotation *ann)
        
        The current annotation associated with this annotation link.
        """
        ...
    
    def SetCurrentSelection(self, vtkSelection):
        """
        V.SetCurrentSelection(vtkSelection)
        C++: virtual void SetCurrentSelection(vtkSelection *sel)
        
        The current selection associated with this annotation link. This
        is simply the selection contained in the current annotation.
        """
        ...
    
    def ShallowCopy(self, vtkDataObject):
        """
        V.ShallowCopy(vtkDataObject)
        C++: void ShallowCopy(vtkDataObject *other) override;
        
        Copy data from another data object into this one which references
        the same member annotations.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


