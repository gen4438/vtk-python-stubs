"""
This type stub file was generated by pyright.
"""

from .vtkLocator import vtkLocator

class vtkAbstractPointLocator(vtkLocator):
    """
    vtkAbstractPointLocator - abstract class to quickly locate points in
    3-space
    
    Superclass: vtkLocator
    
    vtkAbstractPointLocator is an abstract spatial search object to
    quickly locate points in 3D. vtkAbstractPointLocator works by
    dividing a specified region of space into "rectangular" buckets, and
    then keeping a list of points that lie in each bucket. Typical
    operation involves giving a position in 3D and finding the closest
    point.  The points are provided from the specified dataset input.
    
    @sa
    vtkPointLocator vtkStaticPointLocator vtkMergePoints
    """
    def FindClosestNPoints(self, p_int, , vtkIdList):
        """
        V.FindClosestNPoints(int, (float, float, float), vtkIdList)
        C++: virtual void FindClosestNPoints(int N, const double x[3],
            vtkIdList *result)
        V.FindClosestNPoints(int, float, float, float, vtkIdList)
        C++: void FindClosestNPoints(int N, double x, double y, double z,
            vtkIdList *result)
        
        Find the closest N points to a position. This returns the closest
        N points to a position. A faster method could be created that
        returned N close points to a position, but necessarily the exact
        N closest. The returned points are sorted from closest to
        farthest. These methods are thread safe if BuildLocator() is
        directly or indirectly called from a single thread first.
        """
        ...
    
    def FindClosestPoint(self, ):
        """
        V.FindClosestPoint((float, float, float)) -> int
        C++: virtual vtkIdType FindClosestPoint(const double x[3])
        V.FindClosestPoint(float, float, float) -> int
        C++: vtkIdType FindClosestPoint(double x, double y, double z)
        
        Given a position x, return the id of the point closest to it.
        Alternative method requires separate x-y-z values. These methods
        are thread safe if BuildLocator() is directly or indirectly
        called from a single thread first.
        """
        ...
    
    def FindClosestPointWithinRadius(self, p_float, , p_float_4):
        """
        V.FindClosestPointWithinRadius(float, (float, float, float),
            float) -> int
        C++: virtual vtkIdType FindClosestPointWithinRadius(double radius,
             const double x[3], double &dist2)
        
        Given a position x and a radius r, return the id of the point
        closest to the point in that radius. dist2 returns the squared
        distance to the point.
        """
        ...
    
    def FindPointsWithinRadius(self, p_float, , vtkIdList):
        """
        V.FindPointsWithinRadius(float, (float, float, float), vtkIdList)
        C++: virtual void FindPointsWithinRadius(double R,
            const double x[3], vtkIdList *result)
        V.FindPointsWithinRadius(float, float, float, float, vtkIdList)
        C++: void FindPointsWithinRadius(double R, double x, double y,
            double z, vtkIdList *result)
        
        Find all points within a specified radius R of position x. The
        result is not sorted in any specific manner. These methods are
        thread safe if BuildLocator() is directly or indirectly called
        from a single thread first.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, ...)
        C++: virtual double *GetBounds()
        V.GetBounds([float, ...])
        C++: virtual void GetBounds(double *)
        
        Provide an accessor to the bounds. Valid after the locator is
        built.
        """
        ...
    
    def GetNumberOfBuckets(self):
        """
        V.GetNumberOfBuckets() -> int
        C++: virtual vtkIdType GetNumberOfBuckets()
        
        Return the total number of buckets in the locator. This has
        meaning only after the locator is constructed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard type and print methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard type and print methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractPointLocator
        C++: vtkAbstractPointLocator *NewInstance()
        
        Standard type and print methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractPointLocator
        C++: static vtkAbstractPointLocator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard type and print methods.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


