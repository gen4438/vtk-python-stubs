"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkSelectionNode(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkSelectionNode - A node in a selection tree.
    
    Superclass: vtkObject
    
    Used to store selection results.
    
    vtkSelectionNode stores selection parameters for a selection (or part
    of a selection). It stores a list of properties (in a vtkInformation)
    and a list of selection values (in a vtkAbstractArray). The
    properties provide information about what the selection values mean.
    For example the CONTENT_TYPE property gives information about what is
    stored by the node. If the CONTENT_TYPE is GLOBALIDS, the
    SelectionList array should contain a list of cell or point ids, which
    identify the particular cells or points that have matching values in
    the GLOBALID vtkDataSetAttribute array. If the CONTENT_TYPE is
    PEDIGREEIDS, the SelectionList array should contain a list of cell or
    point ids, which identify the particular cells or points that have
    matching values in the PEDIGREEID vtkDataSetAttribute array. The
    FIELD_TYPE property designates whether the selection refers to cells
    or points.
    
    Usually, each node under the root is a selection from one data
    object. SOURCE or SOURCE_ID properties point to this object. If the
    selection was performed on a renderer, PROP or PROP_ID point to the
    prop the selection was made on. Selection nodes corresponding to
    composite datasets may contain child nodes. Each child node of a
    composite dataset should have COMPOSITE_INDEX set. This is the
    flat-index to identify a node with in the composite dataset to which
    the selection applies.
    
    @warning
    No SelectionList is created by default. It should be assigned.
    """
    def COMPONENT_NUMBER(self):
        """
        V.COMPONENT_NUMBER() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *COMPONENT_NUMBER()
        
        When ContentType==THRESHOLDS  or ContentType==VALUES i.e.
        threshold and value based selections, it is possible pick the
        component number using this key. If none is specified, the 0th
        component is used. If any number less than 0 is specified, then
        the magnitude is used.
        """
        ...
    
    def COMPOSITE_INDEX(self):
        """
        V.COMPOSITE_INDEX() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *COMPOSITE_INDEX()
        
        Used to identify a node in composite datasets.
        """
        ...
    
    def CONNECTED_LAYERS(self):
        """
        V.CONNECTED_LAYERS() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *CONNECTED_LAYERS()
        
        When specified, this indicates how many layers of *connected*
        elements in addition to those chosen explicitly are being
        selected. Currently, this is only supported for cells and points.
        """
        ...
    
    def CONTAINING_CELLS(self):
        """
        V.CONTAINING_CELLS() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *CONTAINING_CELLS()
        
        This flag tells the extraction filter, when FIELD_TYPE==POINT,
        that it should also extract the cells that contain any of the
        extracted points.
        """
        ...
    
    def CONTENT_TYPE(self):
        """
        V.CONTENT_TYPE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *CONTENT_TYPE()
        
        Get the (primary) property that describes the content of a
        selection node's data. This key takes on values from the
        SelectionContent enum. GetContentType() returns -1 if the content
        type is not set.
        
        \sa vtkSelectionNode::SelectionContent
        """
        ...
    
    def ConvertAttributeTypeToSelectionField(self, p_int):
        """
        V.ConvertAttributeTypeToSelectionField(int) -> int
        C++: static int ConvertAttributeTypeToSelectionField(int val)
        
        Methods to convert vtkSelectionNode::SelectionField to
        vtkDataSetAttribute::AttributeTypes and vice-versa.
        """
        ...
    
    def ConvertSelectionFieldToAttributeType(self, p_int):
        """
        V.ConvertSelectionFieldToAttributeType(int) -> int
        C++: static int ConvertSelectionFieldToAttributeType(int val)
        
        Methods to convert vtkSelectionNode::SelectionField to
        vtkDataSetAttribute::AttributeTypes and vice-versa.
        """
        ...
    
    def DeepCopy(self, vtkSelectionNode):
        """
        V.DeepCopy(vtkSelectionNode)
        C++: virtual void DeepCopy(vtkSelectionNode *src)
        
        Copy properties, selection list and children of the input.
        """
        ...
    
    def EPSILON(self):
        """
        V.EPSILON() -> vtkInformationDoubleKey
        C++: static vtkInformationDoubleKey *EPSILON()
        
        For location selection of points, if distance is greater than
        this reject.
        """
        ...
    
    def EqualProperties(self, vtkSelectionNode, bool):
        """
        V.EqualProperties(vtkSelectionNode, bool) -> bool
        C++: bool EqualProperties(vtkSelectionNode *other,
            bool fullcompare=true)
        
        Compares Properties of self and other to ensure that they are
        exactly same.
        """
        ...
    
    def FIELD_TYPE(self):
        """
        V.FIELD_TYPE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_TYPE()
        
        Controls whether cell, point, or field data determine what is
        inside and out. The default is CELL. Vertex and edge types are
        also available for graph classes. GetFieldType() returns -1 if
        the field type is not set.
        """
        ...
    
    def GetContentType(self):
        """
        V.GetContentType() -> int
        C++: virtual int GetContentType()
        
        Get or set the content type of the selection. This is the same as
        setting the CONTENT_TYPE() key on the property.
        """
        ...
    
    def GetContentTypeAsString(self, p_int):
        """
        V.GetContentTypeAsString(int) -> string
        C++: static const char *GetContentTypeAsString(int type)
        
        Get the content type as a string.
        """
        ...
    
    def GetFieldType(self):
        """
        V.GetFieldType() -> int
        C++: virtual int GetFieldType()
        
        Get or set the field type of the selection. This is the same as
        setting the FIELD_TYPE() key on the property.
        """
        ...
    
    def GetFieldTypeAsString(self, p_int):
        """
        V.GetFieldTypeAsString(int) -> string
        C++: static const char *GetFieldTypeAsString(int type)
        
        Get the field type as a string.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime taking into account changes to the properties
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetProperties(self):
        """
        V.GetProperties() -> vtkInformation
        C++: virtual vtkInformation *GetProperties()
        
        Returns the property map.
        """
        ...
    
    def GetQueryString(self):
        """
        V.GetQueryString() -> string
        C++: virtual char *GetQueryString()
        
        Set/Get the query expression string.
        """
        ...
    
    def GetSelectionData(self):
        """
        V.GetSelectionData() -> vtkDataSetAttributes
        C++: virtual vtkDataSetAttributes *GetSelectionData()
        
        Sets the selection table.
        """
        ...
    
    def GetSelectionList(self):
        """
        V.GetSelectionList() -> vtkAbstractArray
        C++: virtual vtkAbstractArray *GetSelectionList()
        
        Sets the selection list.
        """
        ...
    
    def HIERARCHICAL_INDEX(self):
        """
        V.HIERARCHICAL_INDEX() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *HIERARCHICAL_INDEX()
        
        Used to identify a dataset in a hiererchical box dataset.
        """
        ...
    
    def HIERARCHICAL_LEVEL(self):
        """
        V.HIERARCHICAL_LEVEL() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *HIERARCHICAL_LEVEL()
        
        Used to identify a dataset in a hiererchical box dataset.
        """
        ...
    
    def INDEXED_VERTICES(self):
        """
        V.INDEXED_VERTICES() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *INDEXED_VERTICES()
        
        This key is used when making visible vertex selection. It means
        that the cell ID selection has data about which vertices for each
        cell are visible.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize()
        
        Restore data object to initial state,
        """
        ...
    
    def INVERSE(self):
        """
        V.INVERSE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *INVERSE()
        
        This flag tells the extraction filter to exclude the selection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSelectionNode
        C++: vtkSelectionNode *NewInstance()
        """
        ...
    
    def PIXEL_COUNT(self):
        """
        V.PIXEL_COUNT() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *PIXEL_COUNT()
        
        A helper for visible cell selector, this is the number of pixels
        covered by the actor whose cells are listed in the selection.
        """
        ...
    
    def PROCESS_ID(self):
        """
        V.PROCESS_ID() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *PROCESS_ID()
        
        Process id the selection is on.
        """
        ...
    
    def PROP(self):
        """
        V.PROP() -> vtkInformationObjectBaseKey
        C++: static vtkInformationObjectBaseKey *PROP()
        
        Pointer to the prop the selection belongs to.
        """
        ...
    
    def PROP_ID(self):
        """
        V.PROP_ID() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *PROP_ID()
        
        ID of the prop the selection belongs to. What ID means is
        application specific.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSelectionNode
        C++: static vtkSelectionNode *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetContentType(self, p_int):
        """
        V.SetContentType(int)
        C++: virtual void SetContentType(int type)
        
        Get or set the content type of the selection. This is the same as
        setting the CONTENT_TYPE() key on the property.
        """
        ...
    
    def SetFieldType(self, p_int):
        """
        V.SetFieldType(int)
        C++: virtual void SetFieldType(int type)
        
        Get or set the field type of the selection. This is the same as
        setting the FIELD_TYPE() key on the property.
        """
        ...
    
    def SetQueryString(self, string):
        """
        V.SetQueryString(string)
        C++: virtual void SetQueryString(const char *_arg)
        
        Set/Get the query expression string.
        """
        ...
    
    def SetSelectionData(self, vtkDataSetAttributes):
        """
        V.SetSelectionData(vtkDataSetAttributes)
        C++: virtual void SetSelectionData(vtkDataSetAttributes *data)
        
        Sets the selection table.
        """
        ...
    
    def SetSelectionList(self, vtkAbstractArray):
        """
        V.SetSelectionList(vtkAbstractArray)
        C++: virtual void SetSelectionList(vtkAbstractArray *)
        
        Sets the selection list.
        """
        ...
    
    def ShallowCopy(self, vtkSelectionNode):
        """
        V.ShallowCopy(vtkSelectionNode)
        C++: virtual void ShallowCopy(vtkSelectionNode *src)
        
        Copy properties, selection list and children of the input. This
        is a shallow copy: selection lists and pointers in the properties
        are passed by reference.
        """
        ...
    
    def SOURCE(self):
        """
        V.SOURCE() -> vtkInformationObjectBaseKey
        C++: static vtkInformationObjectBaseKey *SOURCE()
        
        Pointer to the data or algorithm the selection belongs to.
        """
        ...
    
    def SOURCE_ID(self):
        """
        V.SOURCE_ID() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *SOURCE_ID()
        
        ID of the data or algorithm the selection belongs to. What ID
        means is application specific.
        """
        ...
    
    def SubtractSelectionList(self, vtkSelectionNode):
        """
        V.SubtractSelectionList(vtkSelectionNode)
        C++: void SubtractSelectionList(vtkSelectionNode *other)
        
        Subtracts the items in the selection list, other, from this
        selection list. Assumes that both selections have identical
        properties (i.e., test with EqualProperties before using).
        """
        ...
    
    def UnionSelectionList(self, vtkSelectionNode):
        """
        V.UnionSelectionList(vtkSelectionNode)
        C++: void UnionSelectionList(vtkSelectionNode *other)
        
        Merges the selection list between self and the other. Assumes
        that both has identical properties.
        """
        ...
    
    def ZBUFFER_VALUE(self):
        """
        V.ZBUFFER_VALUE() -> vtkInformationDoubleKey
        C++: static vtkInformationDoubleKey *ZBUFFER_VALUE()
        
        If present, closest zbuffer value of this selection
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BLOCKS = ...
    CELL = ...
    EDGE = ...
    FIELD = ...
    FRUSTUM = ...
    GLOBALIDS = ...
    INDICES = ...
    LOCATIONS = ...
    NUM_CONTENT_TYPES = ...
    NUM_FIELD_TYPES = ...
    PEDIGREEIDS = ...
    POINT = ...
    QUERY = ...
    ROW = ...
    SelectionContent = ...
    SelectionField = ...
    SELECTIONS = ...
    THRESHOLDS = ...
    USER = ...
    VALUES = ...
    VERTEX = ...
    __dict__ = ...
    __vtkname__ = ...


