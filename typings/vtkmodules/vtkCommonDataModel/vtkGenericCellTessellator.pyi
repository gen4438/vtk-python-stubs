"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkGenericCellTessellator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGenericCellTessellator - helper class to perform cell tessellation
    
    Superclass: vtkObject
    
    vtkGenericCellTessellator is a helper class to perform adaptive
    tessellation of particular cell topologies. The major purpose for
    this class is to transform higher-order cell types (e.g.,
    higher-order finite elements) into linear cells that can then be
    easily visualized by VTK. This class works in conjunction with the
    vtkGenericDataSet and vtkGenericAdaptorCell classes.
    
    This algorithm is based on edge subdivision. An error metric along
    each edge is evaluated, and if the error is greater than some
    tolerance, the edge is subdivided (as well as all connected 2D and 3D
    cells). The process repeats until the error metric is satisfied.
    
    A significant issue addressed by this algorithm is to insure face
    compatibility across neighboring cells. That is, diagonals due to
    face triangulation must match to insure that the mesh is compatible.
    The algorithm employs a precomputed table to accelerate the
    tessellation process. The table was generated with the help of
    vtkOrderedTriangulator; the basic idea is that the choice of diagonal
    is made by considering the relative value of the point ids.
    """
    def GetErrorMetrics(self):
        """
        V.GetErrorMetrics() -> vtkCollection
        C++: virtual vtkCollection *GetErrorMetrics()
        
        Specify the list of error metrics used to decide if an edge has
        to be split or not. It is a collection of
        vtkGenericSubdivisionErrorMetric-s.
        """
        ...
    
    def GetMaxErrors(self, *float):
        """
        V.GetMaxErrors([float, ...])
        C++: void GetMaxErrors(double *errors)
        
        Get the maximum error measured after the fixed subdivision.
        \pre errors_exists: errors!=0
        \pre valid_size:
            sizeof(errors)==GetErrorMetrics()->GetNumberOfItems()
        """
        ...
    
    def GetMeasurement(self):
        """
        V.GetMeasurement() -> int
        C++: virtual int GetMeasurement()
        
        If true, measure the quality of the fixed subdivision.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InitErrorMetrics(self, vtkGenericDataSet):
        """
        V.InitErrorMetrics(vtkGenericDataSet)
        C++: void InitErrorMetrics(vtkGenericDataSet *ds)
        
        Init the error metric with the dataset. Should be called in each
        filter before any tessellation of any cell.
        """
        ...
    
    def Initialize(self, vtkGenericDataSet):
        """
        V.Initialize(vtkGenericDataSet)
        C++: virtual void Initialize(vtkGenericDataSet *ds)
        
        Initialize the tessellator with a data set `ds'.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericCellTessellator
        C++: vtkGenericCellTessellator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericCellTessellator
        C++: static vtkGenericCellTessellator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetErrorMetrics(self, vtkCollection):
        """
        V.SetErrorMetrics(vtkCollection)
        C++: virtual void SetErrorMetrics(vtkCollection *someErrorMetrics)
        
        Specify the list of error metrics used to decide if an edge has
        to be split or not. It is a collection of
        vtkGenericSubdivisionErrorMetric-s.
        """
        ...
    
    def SetMeasurement(self, p_int):
        """
        V.SetMeasurement(int)
        C++: virtual void SetMeasurement(int _arg)
        
        If true, measure the quality of the fixed subdivision.
        """
        ...
    
    def Tessellate(self, vtkGenericAdaptorCell, vtkGenericAttributeCollection, vtkDoubleArray, vtkCellArray, vtkPointData):
        """
        V.Tessellate(vtkGenericAdaptorCell, vtkGenericAttributeCollection,
             vtkDoubleArray, vtkCellArray, vtkPointData)
        C++: virtual void Tessellate(vtkGenericAdaptorCell *cell,
            vtkGenericAttributeCollection *att, vtkDoubleArray *points,
            vtkCellArray *cellArray, vtkPointData *internalPd)
        
        Tessellate a 3D `cell'. The result is a set of smaller linear
        tetrahedra in `cellArray' with `points' and point data
        `internalPd'.
        \pre cell_exists: cell!=0
        \pre valid_dimension: cell->GetDimension()==3
        \pre att_exists: att!=0
        \pre points_exists: points!=0
        \pre cellArray_exists: cellArray!=0
        \pre internalPd_exists: internalPd!=0
        """
        ...
    
    def TessellateFace(self, vtkGenericAdaptorCell, vtkGenericAttributeCollection, p_int, vtkDoubleArray, vtkCellArray, vtkPointData):
        """
        V.TessellateFace(vtkGenericAdaptorCell,
            vtkGenericAttributeCollection, int, vtkDoubleArray,
            vtkCellArray, vtkPointData)
        C++: virtual void TessellateFace(vtkGenericAdaptorCell *cell,
            vtkGenericAttributeCollection *att, vtkIdType index,
            vtkDoubleArray *points, vtkCellArray *cellArray,
            vtkPointData *internalPd)
        
        Tessellate a face of a 3D `cell'. The face is specified by the
        index value. The result is a set of smaller linear triangles in
        `cellArray' with `points' and point data `internalPd'.
        \pre cell_exists: cell!=0
        \pre valid_dimension: cell->GetDimension()==3
        \pre valid_index_range: (index>=0) &&
            (index<cell->GetNumberOfBoundaries(2))
        \pre att_exists: att!=0
        \pre points_exists: points!=0
        \pre cellArray_exists: cellArray!=0
        \pre internalPd_exists: internalPd!=0
        """
        ...
    
    def Triangulate(self, vtkGenericAdaptorCell, vtkGenericAttributeCollection, vtkDoubleArray, vtkCellArray, vtkPointData):
        """
        V.Triangulate(vtkGenericAdaptorCell,
            vtkGenericAttributeCollection, vtkDoubleArray, vtkCellArray,
            vtkPointData)
        C++: virtual void Triangulate(vtkGenericAdaptorCell *cell,
            vtkGenericAttributeCollection *att, vtkDoubleArray *points,
            vtkCellArray *cellArray, vtkPointData *internalPd)
        
        Triangulate a 2D `cell'. The result is a set of smaller linear
        triangles in `cellArray' with `points' and point data
        `internalPd'.
        \pre cell_exists: cell!=0
        \pre valid_dimension: cell->GetDimension()==2
        \pre att_exists: att!=0
        \pre points_exists: points!=0
        \pre cellArray_exists: cellArray!=0
        \pre internalPd_exists: internalPd!=0
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


