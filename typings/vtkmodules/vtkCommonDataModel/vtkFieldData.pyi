"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkFieldData(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkFieldData - represent and manipulate fields of data
    
    Superclass: vtkObject
    
    vtkFieldData represents and manipulates fields of data. The model of
    a field is a m x n matrix of data values, where m is the number of
    tuples, and n is the number of components. (A tuple is a row of n
    components in the matrix.) The field is assumed to be composed of a
    set of one or more data arrays, where the data in the arrays are of
    different types (e.g., int, double, char, etc.), and there may be
    variable numbers of components in each array. Note that each data
    array is assumed to be "m" in length (i.e., number of tuples), which
    typically corresponds to the number of points or cells in a dataset.
    Also, each data array must have a character-string name. (This is
    used to manipulate data.)
    
    There are two ways of manipulating and interfacing to fields. You can
    do it generically by manipulating components/tuples via a double-type
    data exchange, or you can do it by grabbing the arrays and
    manipulating them directly. The former is simpler but performs type
    conversion, which is bad if your data has non-castable types like
    (void) pointers, or you lose information as a result of the cast.
    The, more efficient method means managing each array in the field. 
    Using this method you can create faster, more efficient algorithms
    that do not lose information.
    
    @sa
    vtkAbstractArray vtkDataSetAttributes vtkPointData vtkCellData
    """
    def AddArray(self, vtkAbstractArray):
        """
        V.AddArray(vtkAbstractArray) -> int
        C++: int AddArray(vtkAbstractArray *array)
        
        Add an array to the array list. If an array with the same name
        already exists - then the added array will replace it. Return the
        index of the added array.
        """
        ...
    
    def Allocate(self, p_int, p_int_1):
        """
        V.Allocate(int, int) -> int
        C++: vtkTypeBool Allocate(vtkIdType sz, vtkIdType ext=1000)
        
        Allocate data for each array. Note that ext is no longer used.
        """
        ...
    
    def AllocateArrays(self, p_int):
        """
        V.AllocateArrays(int)
        C++: void AllocateArrays(int num)
        
        AllocateOfArrays actually sets the number of vtkAbstractArray
        pointers in the vtkFieldData object, not the number of used
        pointers (arrays). Adding more arrays will cause the object to
        dynamically adjust the number of pointers if it needs to extend.
        Although AllocateArrays can be used if the number of arrays which
        will be added is known, it can be omitted with a small
        computation cost.
        """
        ...
    
    def CopyAllOff(self, p_int):
        """
        V.CopyAllOff(int)
        C++: virtual void CopyAllOff(int unused=0)
        
        Turn off copying of all data. During the copying/passing, the
        following rules are followed for each array:
        1. If the copy flag for an array is set (on or off), it is
           applied This overrides rule 2.
        2. If CopyAllOn is set, copy the array. If CopyAllOff is set, do
           not copy the array
        """
        ...
    
    def CopyAllOn(self, p_int):
        """
        V.CopyAllOn(int)
        C++: virtual void CopyAllOn(int unused=0)
        
        Turn on copying of all data. During the copying/passing, the
        following rules are followed for each array:
        1. If the copy flag for an array is set (on or off), it is
           applied This overrides rule 2.
        2. If CopyAllOn is set, copy the array. If CopyAllOff is set, do
           not copy the array
        """
        ...
    
    def CopyFieldOff(self, string):
        """
        V.CopyFieldOff(string)
        C++: void CopyFieldOff(const char *name)
        """
        ...
    
    def CopyFieldOn(self, string):
        """
        V.CopyFieldOn(string)
        C++: void CopyFieldOn(const char *name)
        
        Turn on/off the copying of the field specified by name. During
        the copying/passing, the following rules are followed for each
        array:
        1. If the copy flag for an array is set (on or off), it is
           applied This overrides rule 2.
        2. If CopyAllOn is set, copy the array. If CopyAllOff is set, do
           not copy the array
        """
        ...
    
    def CopyStructure(self, vtkFieldData):
        """
        V.CopyStructure(vtkFieldData)
        C++: void CopyStructure(vtkFieldData *)
        
        Copy data array structure from a given field.  The same arrays
        will exist with the same types, but will contain nothing in the
        copy.
        """
        ...
    
    def DeepCopy(self, vtkFieldData):
        """
        V.DeepCopy(vtkFieldData)
        C++: virtual void DeepCopy(vtkFieldData *da)
        
        Copy a field by creating new data arrays (i.e., duplicate
        storage).
        """
        ...
    
    def GetAbstractArray(self, p_int):
        """
        V.GetAbstractArray(int) -> vtkAbstractArray
        C++: vtkAbstractArray *GetAbstractArray(int i)
        V.GetAbstractArray(string, int) -> vtkAbstractArray
        C++: vtkAbstractArray *GetAbstractArray(const char *arrayName,
            int &index)
        V.GetAbstractArray(string) -> vtkAbstractArray
        C++: vtkAbstractArray *GetAbstractArray(const char *arrayName)
        
        Returns the ith array in the field. Unlike GetArray(), this
        method returns a vtkAbstractArray and can be used to access any
        array type. A nullptr is returned only if the index i is out of
        range.
        """
        ...
    
    def GetActualMemorySize(self):
        """
        V.GetActualMemorySize() -> int
        C++: virtual unsigned long GetActualMemorySize()
        
        Return the memory in kibibytes (1024 bytes) consumed by this
        field data. Used to support streaming and reading/writing data.
        The value returned is guaranteed to be greater than or equal to
        the memory required to actually represent the data represented by
        this object.
        """
        ...
    
    def GetArray(self, p_int):
        """
        V.GetArray(int) -> vtkDataArray
        C++: vtkDataArray *GetArray(int i)
        V.GetArray(string, int) -> vtkDataArray
        C++: vtkDataArray *GetArray(const char *arrayName, int &index)
        V.GetArray(string) -> vtkDataArray
        C++: vtkDataArray *GetArray(const char *arrayName)
        
        Not recommended for use. Use GetAbstractArray(int i) instead.
        
        Return the ith array in the field. A nullptr is returned if the
        index i is out of range, or if the array at the given index is
        not a vtkDataArray. To access vtkStringArray,
        vtkUnicodeStringArray, or vtkVariantArray, use
        GetAbstractArray(int i).
        """
        ...
    
    def GetArrayContainingComponent(self, p_int, p_int_1):
        """
        V.GetArrayContainingComponent(int, int) -> int
        C++: int GetArrayContainingComponent(int i, int &arrayComp)
        
        Return the array containing the ith component of the field. The
        return value is an integer number n 0<=n<this->NumberOfArrays.
        Also, an integer value is returned indicating the component in
        the array is returned. Method returns -1 if specified component
        is not in the field.
        """
        ...
    
    def GetArrayName(self, p_int):
        """
        V.GetArrayName(int) -> string
        C++: const char *GetArrayName(int i)
        
        Get the name of ith array. Note that this is equivalent to:
        GetAbstractArray(i)->GetName() if ith array pointer is not
        nullptr
        """
        ...
    
    def GetField(self, vtkIdList, vtkFieldData):
        """
        V.GetField(vtkIdList, vtkFieldData)
        C++: void GetField(vtkIdList *ptId, vtkFieldData *f)
        
        Get a field from a list of ids. Supplied field f should have same
        types and number of data arrays as this one (i.e., like
        CopyStructure() creates).  This method should not be used if the
        instance is from a subclass of vtkFieldData (vtkPointData or
        vtkCellData).  This is because in those cases, the attribute data
        is stored with the other fields and will cause the method to
        behave in an unexpected way.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Check object's components for modified times.
        """
        ...
    
    def GetNumberOfArrays(self):
        """
        V.GetNumberOfArrays() -> int
        C++: int GetNumberOfArrays()
        
        Get the number of arrays of data available. This does not include
        nullptr array pointers therefore after fd->AllocateArray(n);
        nArrays = GetNumberOfArrays() nArrays is not necessarily equal to
        n.
        """
        ...
    
    def GetNumberOfComponents(self):
        """
        V.GetNumberOfComponents() -> int
        C++: int GetNumberOfComponents()
        
        Get the number of components in the field. This is determined by
        adding up the components in each non-nullptr array. This method
        should not be used if the instance is from a subclass of
        vtkFieldData (vtkPointData or vtkCellData). This is because in
        those cases, the attribute data is stored with the other fields
        and will cause the method to behave in an unexpected way.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTuples(self):
        """
        V.GetNumberOfTuples() -> int
        C++: vtkIdType GetNumberOfTuples()
        
        Get the number of tuples in the field. Note: some fields have
        arrays with different numbers of tuples; this method returns the
        number of tuples in the first array. Mixed-length arrays may have
        to be treated specially. This method should not be used if the
        instance is from a subclass of vtkFieldData (vtkPointData or
        vtkCellData). This is because in those cases, the attribute data
        is stored with the other fields and will cause the method to
        behave in an unexpected way.
        """
        ...
    
    def HasArray(self, string):
        """
        V.HasArray(string) -> int
        C++: int HasArray(const char *name)
        
        Return 1 if an array with the given name could be found. 0
        otherwise.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize()
        
        Release all data but do not delete object. Also, clear the copy
        flags.
        """
        ...
    
    def InsertNextTuple(self, p_int, vtkFieldData):
        """
        V.InsertNextTuple(int, vtkFieldData) -> int
        C++: vtkIdType InsertNextTuple(const vtkIdType j,
            vtkFieldData *source)
        
        Insert the jth tuple in source field data at the end of the tuple
        matrix. Range checking is performed and memory is allocated as
        necessary.
        """
        ...
    
    def InsertTuple(self, p_int, p_int_1, vtkFieldData):
        """
        V.InsertTuple(int, int, vtkFieldData)
        C++: void InsertTuple(const vtkIdType i, const vtkIdType j,
            vtkFieldData *source)
        
        Insert the jth tuple in source field data at the ith location.
        Range checking is performed and memory allocates as necessary.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFieldData
        C++: vtkFieldData *NewInstance()
        """
        ...
    
    def PassData(self, vtkFieldData):
        """
        V.PassData(vtkFieldData)
        C++: virtual void PassData(vtkFieldData *fd)
        
        Pass entire arrays of input data through to output. Obey the
        "copy" flags.
        """
        ...
    
    def RemoveArray(self, string):
        """
        V.RemoveArray(string)
        C++: virtual void RemoveArray(const char *name)
        V.RemoveArray(int)
        C++: virtual void RemoveArray(int index)
        
        Remove an array (with the given name or index) from the list of
        arrays.
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Resets each data array in the field (Reset() does not release
        memory but it makes the arrays look like they are empty.)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFieldData
        C++: static vtkFieldData *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfTuples(self, p_int):
        """
        V.SetNumberOfTuples(int)
        C++: void SetNumberOfTuples(const vtkIdType number)
        
        Set the number of tuples for each data array in the field. This
        method should not be used if the instance is from a subclass of
        vtkFieldData (vtkPointData or vtkCellData). This is because in
        those cases, the attribute data is stored with the other fields
        and will cause the method to behave in an unexpected way.
        """
        ...
    
    def SetTuple(self, p_int, p_int_1, vtkFieldData):
        """
        V.SetTuple(int, int, vtkFieldData)
        C++: void SetTuple(const vtkIdType i, const vtkIdType j,
            vtkFieldData *source)
        
        Set the jth tuple in source field data at the ith location. Set
        operations mean that no range checking is performed, so they're
        faster.
        """
        ...
    
    def ShallowCopy(self, vtkFieldData):
        """
        V.ShallowCopy(vtkFieldData)
        C++: virtual void ShallowCopy(vtkFieldData *da)
        
        Copy a field by reference counting the data arrays.
        """
        ...
    
    def Squeeze(self):
        """
        V.Squeeze()
        C++: void Squeeze()
        
        Squeezes each data array in the field (Squeeze() reclaims unused
        memory.)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


