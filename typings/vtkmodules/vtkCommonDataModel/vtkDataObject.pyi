"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkDataObject(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkDataObject - general representation of visualization data
    
    Superclass: vtkObject
    
    vtkDataObject is an general representation of visualization data. It
    serves to encapsulate instance variables and methods for
    visualization network execution, as well as representing data
    consisting of a field (i.e., just an unstructured pile of data). This
    is to be compared with a vtkDataSet, which is data with geometric
    and/or topological structure.
    
    vtkDataObjects are used to represent arbitrary repositories of data
    via the vtkFieldData instance variable. These data must be eventually
    mapped into a concrete subclass of vtkDataSet before they can
    actually be displayed.
    
    @sa
    vtkDataSet vtkFieldData vtkDataObjectToDataSetFilter
    vtkFieldDataToAttributeDataFilter
    """
    def ALL_PIECES_EXTENT(self):
        """
        V.ALL_PIECES_EXTENT() -> vtkInformationIntegerVectorKey
        C++: static vtkInformationIntegerVectorKey *ALL_PIECES_EXTENT()
        """
        ...
    
    def BOUNDING_BOX(self):
        """
        V.BOUNDING_BOX() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *BOUNDING_BOX()
        """
        ...
    
    def CELL_DATA_VECTOR(self):
        """
        V.CELL_DATA_VECTOR() -> vtkInformationInformationVectorKey
        C++: static vtkInformationInformationVectorKey *CELL_DATA_VECTOR()
        """
        ...
    
    def CopyInformationFromPipeline(self, vtkInformation):
        """
        V.CopyInformationFromPipeline(vtkInformation)
        C++: virtual void CopyInformationFromPipeline(
            vtkInformation *info)
        
        Copy from the pipeline information to the data object's own
        information. Called right before the main execution pass.
        """
        ...
    
    def CopyInformationToPipeline(self, vtkInformation):
        """
        V.CopyInformationToPipeline(vtkInformation)
        C++: virtual void CopyInformationToPipeline(vtkInformation *info)
        
        Copy information from this data object to the pipeline
        information. This is used by the vtkTrivialProducer that is
        created when someone calls SetInputData() to connect a data
        object to a pipeline.
        """
        ...
    
    def Crop(self, int_tuple):
        """
        V.Crop((int, ...))
        C++: virtual void Crop(const int *updateExtent)
        
        This method crops the data object (if necessary) so that the
        extent matches the update extent.
        """
        ...
    
    def DataHasBeenGenerated(self):
        """
        V.DataHasBeenGenerated()
        C++: void DataHasBeenGenerated()
        
        This method is called by the source when it executes to generate
        data. It is sort of the opposite of ReleaseData. It sets the
        DataReleased flag to 0, and sets a new UpdateTime.
        """
        ...
    
    def DATA_EXTENT(self):
        """
        V.DATA_EXTENT() -> vtkInformationIntegerPointerKey
        C++: static vtkInformationIntegerPointerKey *DATA_EXTENT()
        """
        ...
    
    def DATA_EXTENT_TYPE(self):
        """
        V.DATA_EXTENT_TYPE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *DATA_EXTENT_TYPE()
        """
        ...
    
    def DATA_NUMBER_OF_GHOST_LEVELS(self):
        """
        V.DATA_NUMBER_OF_GHOST_LEVELS() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *DATA_NUMBER_OF_GHOST_LEVELS(
            )
        """
        ...
    
    def DATA_NUMBER_OF_PIECES(self):
        """
        V.DATA_NUMBER_OF_PIECES() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *DATA_NUMBER_OF_PIECES()
        """
        ...
    
    def DATA_OBJECT(self):
        """
        V.DATA_OBJECT() -> vtkInformationDataObjectKey
        C++: static vtkInformationDataObjectKey *DATA_OBJECT()
        """
        ...
    
    def DATA_PIECE_NUMBER(self):
        """
        V.DATA_PIECE_NUMBER() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *DATA_PIECE_NUMBER()
        """
        ...
    
    def DATA_TIME_STEP(self):
        """
        V.DATA_TIME_STEP() -> vtkInformationDoubleKey
        C++: static vtkInformationDoubleKey *DATA_TIME_STEP()
        """
        ...
    
    def DATA_TYPE_NAME(self):
        """
        V.DATA_TYPE_NAME() -> vtkInformationStringKey
        C++: static vtkInformationStringKey *DATA_TYPE_NAME()
        """
        ...
    
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: virtual void DeepCopy(vtkDataObject *src)
        
        Shallow and Deep copy.  These copy the data, but not any of the
        pipeline connections.
        """
        ...
    
    def DIRECTION(self):
        """
        V.DIRECTION() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *DIRECTION()
        """
        ...
    
    def EDGE_DATA_VECTOR(self):
        """
        V.EDGE_DATA_VECTOR() -> vtkInformationInformationVectorKey
        C++: static vtkInformationInformationVectorKey *EDGE_DATA_VECTOR()
        """
        ...
    
    def FIELD_ACTIVE_ATTRIBUTE(self):
        """
        V.FIELD_ACTIVE_ATTRIBUTE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_ACTIVE_ATTRIBUTE()
        """
        ...
    
    def FIELD_ARRAY_TYPE(self):
        """
        V.FIELD_ARRAY_TYPE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_ARRAY_TYPE()
        """
        ...
    
    def FIELD_ASSOCIATION(self):
        """
        V.FIELD_ASSOCIATION() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_ASSOCIATION()
        """
        ...
    
    def FIELD_ATTRIBUTE_TYPE(self):
        """
        V.FIELD_ATTRIBUTE_TYPE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_ATTRIBUTE_TYPE()
        """
        ...
    
    def FIELD_NAME(self):
        """
        V.FIELD_NAME() -> vtkInformationStringKey
        C++: static vtkInformationStringKey *FIELD_NAME()
        """
        ...
    
    def FIELD_NUMBER_OF_COMPONENTS(self):
        """
        V.FIELD_NUMBER_OF_COMPONENTS() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_NUMBER_OF_COMPONENTS()
        """
        ...
    
    def FIELD_NUMBER_OF_TUPLES(self):
        """
        V.FIELD_NUMBER_OF_TUPLES() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_NUMBER_OF_TUPLES()
        """
        ...
    
    def FIELD_OPERATION(self):
        """
        V.FIELD_OPERATION() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *FIELD_OPERATION()
        """
        ...
    
    def FIELD_RANGE(self):
        """
        V.FIELD_RANGE() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *FIELD_RANGE()
        """
        ...
    
    def GetActiveFieldInformation(self, vtkInformation, p_int, p_int_1):
        """
        V.GetActiveFieldInformation(vtkInformation, int, int)
            -> vtkInformation
        C++: static vtkInformation *GetActiveFieldInformation(
            vtkInformation *info, int fieldAssociation, int attributeType)
        
        Return the information object within the input information
        object's field data corresponding to the specified association
        (FIELD_ASSOCIATION_POINTS or FIELD_ASSOCIATION_CELLS) and
        attribute (SCALARS, VECTORS, NORMALS, TCOORDS, or TENSORS)
        """
        ...
    
    def GetActualMemorySize(self):
        """
        V.GetActualMemorySize() -> int
        C++: virtual unsigned long GetActualMemorySize()
        
        Return the actual size of the data in kibibytes (1024 bytes).
        This number is valid only after the pipeline has updated. The
        memory size returned is guaranteed to be greater than or equal to
        the memory required to represent the data (e.g., extra space in
        arrays, etc. are not included in the return value).
        """
        ...
    
    def GetAssociationTypeAsString(self, p_int):
        """
        V.GetAssociationTypeAsString(int) -> string
        C++: static const char *GetAssociationTypeAsString(
            int associationType)
        
        Given an integer association type, this static method returns a
        string type for the attribute (i.e. type = 0: returns "Points").
        """
        ...
    
    def GetAssociationTypeFromString(self, string):
        """
        V.GetAssociationTypeFromString(string) -> int
        C++: static int GetAssociationTypeFromString(
            const char *associationType)
        
        Given an integer association type, this static method returns a
        string type for the attribute (i.e. type = 0: returns "Points").
        """
        ...
    
    def GetAttributes(self, p_int):
        """
        V.GetAttributes(int) -> vtkDataSetAttributes
        C++: virtual vtkDataSetAttributes *GetAttributes(int type)
        
        Returns the attributes of the data object of the specified
        attribute type. The type may be:  POINT  - Defined in vtkDataSet
        subclasses. CELL   - Defined in vtkDataSet subclasses. VERTEX -
        Defined in vtkGraph subclasses. EDGE   - Defined in vtkGraph
        subclasses. ROW    - Defined in vtkTable.  The other attribute
        type, FIELD, will return nullptr since field data is stored as a
        vtkFieldData instance, not a vtkDataSetAttributes instance. To
        retrieve field data, use GetAttributesAsFieldData.
        
        @warning This method NEEDS to be
        overriden in subclasses to work as documented. If not, it returns
        nullptr for any type but FIELD.
        """
        ...
    
    def GetAttributesAsFieldData(self, p_int):
        """
        V.GetAttributesAsFieldData(int) -> vtkFieldData
        C++: virtual vtkFieldData *GetAttributesAsFieldData(int type)
        
        Returns the attributes of the data object as a vtkFieldData. This
        returns non-null values in all the same cases as GetAttributes,
        in addition to the case of FIELD, which will return the field
        data for any vtkDataObject subclass.
        """
        ...
    
    def GetAttributeTypeForArray(self, vtkAbstractArray):
        """
        V.GetAttributeTypeForArray(vtkAbstractArray) -> int
        C++: virtual int GetAttributeTypeForArray(vtkAbstractArray *arr)
        
        Retrieves the attribute type that an array came from. This is
        useful for obtaining which attribute type a input array to an
        algorithm came from (retrieved from
        GetInputAbstractArrayToProcesss).
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkDataObject
        C++: static vtkDataObject *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkDataObject
        C++: static vtkDataObject *GetData(vtkInformationVector *v,
            int i=0)
        
        Retrieve an instance of this class from an information object.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: virtual int GetDataObjectType()
        
        Return class name of data type. This is one of
        VTK_STRUCTURED_GRID, VTK_STRUCTURED_POINTS,
        VTK_UNSTRUCTURED_GRID, VTK_POLY_DATA, or VTK_RECTILINEAR_GRID
        (see vtkSetGet.h for definitions). THIS METHOD IS THREAD SAFE
        """
        ...
    
    def GetDataReleased(self):
        """
        V.GetDataReleased() -> int
        C++: virtual int GetDataReleased()
        
        Get the flag indicating the data has been released.
        """
        ...
    
    def GetExtentType(self):
        """
        V.GetExtentType() -> int
        C++: virtual int GetExtentType()
        
        The ExtentType will be left as VTK_PIECES_EXTENT for data objects
        such as vtkPolyData and vtkUnstructuredGrid. The ExtentType will
        be changed to VTK_3D_EXTENT for data objects with 3D structure
        such as vtkImageData (and its subclass vtkStructuredPoints),
        vtkRectilinearGrid, and vtkStructuredGrid. The default is the
        have an extent in pieces, with only one piece (no streaming
        possible).
        """
        ...
    
    def GetFieldData(self):
        """
        V.GetFieldData() -> vtkFieldData
        C++: virtual vtkFieldData *GetFieldData()
        
        Assign or retrieve a general field data to this data object.
        """
        ...
    
    def GetGhostArray(self, p_int):
        """
        V.GetGhostArray(int) -> vtkDataArray
        C++: virtual vtkDataArray *GetGhostArray(int type)
        
        Returns the ghost arrays of the data object of the specified
        atribute type. The type may be:  POINT    - Defined in vtkDataSet
        subclasses CELL   - Defined in vtkDataSet subclasses.  The other
        attribute types, will return nullptr since ghosts arrays are not
        defined for now outside of point or cell.
        """
        ...
    
    def GetGlobalReleaseDataFlag(self):
        """
        V.GetGlobalReleaseDataFlag() -> int
        C++: static int GetGlobalReleaseDataFlag()
        
        Turn on/off flag to control whether every object releases its
        data after being used by a filter.
        """
        ...
    
    def GetInformation(self):
        """
        V.GetInformation() -> vtkInformation
        C++: virtual vtkInformation *GetInformation()
        
        Set/Get the information object associated with this data object.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Data objects are composite objects and need to check each part
        for MTime. The information object also needs to be considered.
        """
        ...
    
    def GetNamedFieldInformation(self, vtkInformation, p_int, string):
        """
        V.GetNamedFieldInformation(vtkInformation, int, string)
            -> vtkInformation
        C++: static vtkInformation *GetNamedFieldInformation(
            vtkInformation *info, int fieldAssociation, const char *name)
        
        Return the information object within the input information
        object's field data corresponding to the specified association
        (FIELD_ASSOCIATION_POINTS or FIELD_ASSOCIATION_CELLS) and name.
        """
        ...
    
    def GetNumberOfElements(self, p_int):
        """
        V.GetNumberOfElements(int) -> int
        C++: virtual vtkIdType GetNumberOfElements(int type)
        
        Get the number of elements for a specific attribute type (POINT,
        CELL, etc.).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUpdateTime(self):
        """
        V.GetUpdateTime() -> int
        C++: vtkMTimeType GetUpdateTime()
        
        Used by Threaded ports to determine if they should initiate an
        asynchronous update (still in development).
        """
        ...
    
    def GlobalReleaseDataFlagOff(self):
        """
        V.GlobalReleaseDataFlagOff()
        C++: void GlobalReleaseDataFlagOff()
        
        Turn on/off flag to control whether every object releases its
        data after being used by a filter.
        """
        ...
    
    def GlobalReleaseDataFlagOn(self):
        """
        V.GlobalReleaseDataFlagOn()
        C++: void GlobalReleaseDataFlagOn()
        
        Turn on/off flag to control whether every object releases its
        data after being used by a filter.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize()
        
        Restore data object to initial state,
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataObject
        C++: vtkDataObject *NewInstance()
        """
        ...
    
    def ORIGIN(self):
        """
        V.ORIGIN() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *ORIGIN()
        """
        ...
    
    def PIECE_EXTENT(self):
        """
        V.PIECE_EXTENT() -> vtkInformationIntegerVectorKey
        C++: static vtkInformationIntegerVectorKey *PIECE_EXTENT()
        """
        ...
    
    def POINT_DATA_VECTOR(self):
        """
        V.POINT_DATA_VECTOR() -> vtkInformationInformationVectorKey
        C++: static vtkInformationInformationVectorKey *POINT_DATA_VECTOR(
            )
        """
        ...
    
    def PrepareForNewData(self):
        """
        V.PrepareForNewData()
        C++: virtual void PrepareForNewData()
        
        make the output data ready for new data to be inserted. For most
        objects we just call Initialize. But for vtkImageData we leave
        the old data in case the memory can be reused.
        """
        ...
    
    def ReleaseData(self):
        """
        V.ReleaseData()
        C++: void ReleaseData()
        
        Release data back to system to conserve memory resource. Used
        during visualization network execution.  Releasing this data does
        not make down-stream data invalid.
        """
        ...
    
    def RemoveNamedFieldInformation(self, vtkInformation, p_int, string):
        """
        V.RemoveNamedFieldInformation(vtkInformation, int, string)
        C++: static void RemoveNamedFieldInformation(vtkInformation *info,
             int fieldAssociation, const char *name)
        
        Remove the info associated with an array
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataObject
        C++: static vtkDataObject *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetActiveAttribute(self, vtkInformation, p_int, string, p_int_1):
        """
        V.SetActiveAttribute(vtkInformation, int, string, int)
            -> vtkInformation
        C++: static vtkInformation *SetActiveAttribute(
            vtkInformation *info, int fieldAssociation,
            const char *attributeName, int attributeType)
        
        Set the named array to be the active field for the specified type
        (SCALARS, VECTORS, NORMALS, TCOORDS, or TENSORS) and association
        (FIELD_ASSOCIATION_POINTS or FIELD_ASSOCIATION_CELLS).  Returns
        the active field information object and creates on entry if one
        not found.
        """
        ...
    
    def SetActiveAttributeInfo(self, vtkInformation, p_int, p_int_1, string, p_int_2, p_int_3, p_int_4):
        """
        V.SetActiveAttributeInfo(vtkInformation, int, int, string, int,
            int, int)
        C++: static void SetActiveAttributeInfo(vtkInformation *info,
            int fieldAssociation, int attributeType, const char *name,
            int arrayType, int numComponents, int numTuples)
        
        Set the name, array type, number of components, and number of
        tuples within the passed information object for the active
        attribute of type attributeType (in specified association,
        FIELD_ASSOCIATION_POINTS or FIELD_ASSOCIATION_CELLS).  If there
        is not an active attribute of the specified type, an entry in the
        information object is created.  If arrayType, numComponents, or
        numTuples equal to -1, or name=nullptr the value is not changed.
        """
        ...
    
    def SetFieldData(self, vtkFieldData):
        """
        V.SetFieldData(vtkFieldData)
        C++: virtual void SetFieldData(vtkFieldData *)
        
        Assign or retrieve a general field data to this data object.
        """
        ...
    
    def SetGlobalReleaseDataFlag(self, p_int):
        """
        V.SetGlobalReleaseDataFlag(int)
        C++: static void SetGlobalReleaseDataFlag(int val)
        
        Turn on/off flag to control whether every object releases its
        data after being used by a filter.
        """
        ...
    
    def SetInformation(self, vtkInformation):
        """
        V.SetInformation(vtkInformation)
        C++: virtual void SetInformation(vtkInformation *)
        
        Set/Get the information object associated with this data object.
        """
        ...
    
    def SetPointDataActiveScalarInfo(self, vtkInformation, p_int, p_int_1):
        """
        V.SetPointDataActiveScalarInfo(vtkInformation, int, int)
        C++: static void SetPointDataActiveScalarInfo(
            vtkInformation *info, int arrayType, int numComponents)
        
        Convenience version of previous method for use (primarily) by the
        Imaging filters. If arrayType or numComponents == -1, the value
        is not changed.
        """
        ...
    
    def ShallowCopy(self, vtkDataObject):
        """
        V.ShallowCopy(vtkDataObject)
        C++: virtual void ShallowCopy(vtkDataObject *src)
        
        Shallow and Deep copy.  These copy the data, but not any of the
        pipeline connections.
        """
        ...
    
    def SIL(self):
        """
        V.SIL() -> vtkInformationDataObjectKey
        C++: static vtkInformationDataObjectKey *SIL()
        """
        ...
    
    def SPACING(self):
        """
        V.SPACING() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *SPACING()
        """
        ...
    
    def VERTEX_DATA_VECTOR(self):
        """
        V.VERTEX_DATA_VECTOR() -> vtkInformationInformationVectorKey
        C++: static vtkInformationInformationVectorKey *VERTEX_DATA_VECTOR(
            )
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AttributeTypes = ...
    CELL = ...
    EDGE = ...
    FIELD = ...
    FieldAssociations = ...
    FieldOperations = ...
    FIELD_ASSOCIATION_CELLS = ...
    FIELD_ASSOCIATION_EDGES = ...
    FIELD_ASSOCIATION_NONE = ...
    FIELD_ASSOCIATION_POINTS = ...
    FIELD_ASSOCIATION_POINTS_THEN_CELLS = ...
    FIELD_ASSOCIATION_ROWS = ...
    FIELD_ASSOCIATION_VERTICES = ...
    FIELD_OPERATION_MODIFIED = ...
    FIELD_OPERATION_PRESERVED = ...
    FIELD_OPERATION_REINTERPOLATED = ...
    FIELD_OPERATION_REMOVED = ...
    NUMBER_OF_ASSOCIATIONS = ...
    NUMBER_OF_ATTRIBUTE_TYPES = ...
    POINT = ...
    POINT_THEN_CELL = ...
    ROW = ...
    VERTEX = ...
    __dict__ = ...
    __vtkname__ = ...


