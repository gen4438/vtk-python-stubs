"""
This type stub file was generated by pyright.
"""

from .vtkImageData import vtkImageData

class vtkUniformGrid(vtkImageData):
    """
    vtkUniformGrid - image data with blanking
    
    Superclass: vtkImageData
    
    vtkUniformGrid is a subclass of vtkImageData. In addition to all the
    image data functionality, it supports blanking.
    """
    def BlankCell(self, p_int):
        """
        V.BlankCell(int)
        C++: virtual void BlankCell(vtkIdType ptId)
        V.BlankCell(int, int, int)
        C++: virtual void BlankCell(const int i, const int j, const int k)
        
        Methods for supporting blanking of cells. Blanking turns on or
        off cells in the structured grid. These methods should be called
        only after the dimensions of the grid are set.
        """
        ...
    
    def BlankPoint(self, p_int):
        """
        V.BlankPoint(int)
        C++: virtual void BlankPoint(vtkIdType ptId)
        V.BlankPoint(int, int, int)
        C++: virtual void BlankPoint(const int i, const int j,
            const int k)
        
        Methods for supporting blanking of cells. Blanking turns on or
        off points in the structured grid, and hence the cells connected
        to them. These methods should be called only after the dimensions
        of the grid are set.
        """
        ...
    
    def CopyStructure(self, vtkDataSet):
        """
        V.CopyStructure(vtkDataSet)
        C++: void CopyStructure(vtkDataSet *ds) override;
        
        Copy the geometric and topological structure of an input image
        data object.
        """
        ...
    
    def FindAndGetCell(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindAndGetCell([float, float, float], vtkCell, int, float, int,
            [float, float, float], [float, ...]) -> vtkCell
        C++: vtkCell *FindAndGetCell(double x[3], vtkCell *cell,
            vtkIdType cellId, double tol2, int &subId, double pcoords[3],
            double *weights) override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def FindCell(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindCell([float, float, float], vtkCell, int, float, int,
            [float, float, float], [float, ...]) -> int
        C++: vtkIdType FindCell(double x[3], vtkCell *cell,
            vtkIdType cellId, double tol2, int &subId, double pcoords[3],
            double *weights) override;
        V.FindCell([float, float, float], vtkCell, vtkGenericCell, int,
            float, int, [float, float, float], [float, ...]) -> int
        C++: vtkIdType FindCell(double x[3], vtkCell *cell,
            vtkGenericCell *gencell, vtkIdType cellId, double tol2,
            int &subId, double pcoords[3], double *weights) override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def GetCell(self, p_int, p_int_1, p_int_2):
        """
        V.GetCell(int, int, int) -> vtkCell
        C++: vtkCell *GetCell(int i, int j, int k) override;
        V.GetCell(int) -> vtkCell
        C++: vtkCell *GetCell(vtkIdType cellId) override;
        V.GetCell(int, vtkGenericCell)
        C++: void GetCell(vtkIdType cellId, vtkGenericCell *cell)
            override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def GetCellPoints(self, p_int, vtkIdList):
        """
        V.GetCellPoints(int, vtkIdList)
        C++: void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds)
            override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def GetCellType(self, p_int):
        """
        V.GetCellType(int) -> int
        C++: int GetCellType(vtkIdType cellId) override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkUniformGrid
        C++: static vtkUniformGrid *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkUniformGrid
        C++: static vtkUniformGrid *GetData(vtkInformationVector *v,
            int i=0)
        
        Retrieve an instance of this class from an information object.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return what type of dataset this is.
        """
        ...
    
    def GetGridDescription(self):
        """
        V.GetGridDescription() -> int
        C++: int GetGridDescription()
        
        Returns the data description of this uniform grid instance.
        """
        ...
    
    def GetMaxCellSize(self):
        """
        V.GetMaxCellSize() -> int
        C++: int GetMaxCellSize() override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an empty uniform grid.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an empty uniform grid.
        """
        ...
    
    def GetPointCells(self, p_int, vtkIdList):
        """
        V.GetPointCells(int, vtkIdList)
        C++: void GetPointCells(vtkIdType ptId, vtkIdList *cellIds)
            override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def HasAnyBlankCells(self):
        """
        V.HasAnyBlankCells() -> bool
        C++: bool HasAnyBlankCells() override;
        
        Returns 1 if there is any visibility constraint on the cells, 0
        otherwise.
        """
        ...
    
    def HasAnyBlankPoints(self):
        """
        V.HasAnyBlankPoints() -> bool
        C++: bool HasAnyBlankPoints() override;
        
        Returns 1 if there is any visibility constraint on the points, 0
        otherwise.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        Standard vtkDataSet API methods. See vtkDataSet for more
        information.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an empty uniform grid.
        """
        ...
    
    def IsCellVisible(self, p_int):
        """
        V.IsCellVisible(int) -> int
        C++: virtual unsigned char IsCellVisible(vtkIdType cellId)
        
        Return non-zero value if specified cell is visible. These methods
        should be called only after the dimensions of the grid are set.
        """
        ...
    
    def IsPointVisible(self, p_int):
        """
        V.IsPointVisible(int) -> int
        C++: virtual unsigned char IsPointVisible(vtkIdType ptId)
        
        Return non-zero value if specified point is visible. These
        methods should be called only after the dimensions of the grid
        are set.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an empty uniform grid.
        """
        ...
    
    def NewImageDataCopy(self):
        """
        V.NewImageDataCopy() -> vtkImageData
        C++: virtual vtkImageData *NewImageDataCopy()
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUniformGrid
        C++: vtkUniformGrid *NewInstance()
        
        Construct an empty uniform grid.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUniformGrid
        C++: static vtkUniformGrid *SafeDownCast(vtkObjectBase *o)
        
        Construct an empty uniform grid.
        """
        ...
    
    def UnBlankCell(self, p_int):
        """
        V.UnBlankCell(int)
        C++: virtual void UnBlankCell(vtkIdType ptId)
        V.UnBlankCell(int, int, int)
        C++: virtual void UnBlankCell(const int i, const int j,
            const int k)
        
        Methods for supporting blanking of cells. Blanking turns on or
        off cells in the structured grid. These methods should be called
        only after the dimensions of the grid are set.
        """
        ...
    
    def UnBlankPoint(self, p_int):
        """
        V.UnBlankPoint(int)
        C++: virtual void UnBlankPoint(vtkIdType ptId)
        V.UnBlankPoint(int, int, int)
        C++: virtual void UnBlankPoint(const int i, const int j,
            const int k)
        
        Methods for supporting blanking of cells. Blanking turns on or
        off points in the structured grid, and hence the cells connected
        to them. These methods should be called only after the dimensions
        of the grid are set.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


