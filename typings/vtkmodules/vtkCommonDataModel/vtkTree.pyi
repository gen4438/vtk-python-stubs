"""
This type stub file was generated by pyright.
"""

from .vtkDirectedAcyclicGraph import vtkDirectedAcyclicGraph

class vtkTree(vtkDirectedAcyclicGraph):
    """
    vtkTree - A rooted tree data structure.
    
    Superclass: vtkDirectedAcyclicGraph
    
    vtkTree is a connected directed graph with no cycles. A tree is a
    type of directed graph, so works with all graph algorithms.
    
    vtkTree is a read-only data structure. To construct a tree, create an
    instance of vtkMutableDirectedGraph. Add vertices and edges with
    AddVertex() and AddEdge(). You may alternately start by adding a
    single vertex as the root then call graph->AddChild(parent) which
    adds a new vertex and connects the parent to the child. The tree MUST
    have all edges in the proper direction, from parent to child. After
    building the tree, call tree->CheckedShallowCopy(graph) to copy the
    structure into a vtkTree. This method will return false if the graph
    is an invalid tree.
    
    vtkTree provides some convenience methods for obtaining the parent
    and children of a vertex, for finding the root, and determining if a
    vertex is a leaf (a vertex with no children).
    
    @sa
    vtkDirectedGraph vtkMutableDirectedGraph vtkGraph
    """
    def GetChild(self, p_int, p_int_1):
        """
        V.GetChild(int, int) -> int
        C++: vtkIdType GetChild(vtkIdType v, vtkIdType i)
        
        Get the i-th child of a parent vertex.
        """
        ...
    
    def GetChildren(self, p_int, vtkAdjacentVertexIterator):
        """
        V.GetChildren(int, vtkAdjacentVertexIterator)
        C++: void GetChildren(vtkIdType v, vtkAdjacentVertexIterator *it)
        
        Get the child vertices of a vertex. This is a convenience method
        that functions exactly like GetAdjacentVertices.
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkTree
        C++: static vtkTree *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkTree
        C++: static vtkTree *GetData(vtkInformationVector *v, int i=0)
        
        Retrieve a graph from an information vector.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return what type of dataset this is.
        """
        ...
    
    def GetLevel(self, p_int):
        """
        V.GetLevel(int) -> int
        C++: vtkIdType GetLevel(vtkIdType v)
        
        Get the level of the vertex in the tree.  The root vertex has
        level 0. Returns -1 if the vertex id is < 0 or greater than the
        number of vertices in the tree.
        """
        ...
    
    def GetNumberOfChildren(self, p_int):
        """
        V.GetNumberOfChildren(int) -> int
        C++: vtkIdType GetNumberOfChildren(vtkIdType v)
        
        Get the number of children of a vertex.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetParent(self, p_int):
        """
        V.GetParent(int) -> int
        C++: vtkIdType GetParent(vtkIdType v)
        
        Get the parent of a vertex.
        """
        ...
    
    def GetParentEdge(self, p_int):
        """
        V.GetParentEdge(int) -> vtkEdgeType
        C++: vtkEdgeType GetParentEdge(vtkIdType v)
        
        Get the edge connecting the vertex to its parent.
        """
        ...
    
    def GetRoot(self):
        """
        V.GetRoot() -> int
        C++: virtual vtkIdType GetRoot()
        
        Get the root vertex of the tree.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsLeaf(self, p_int):
        """
        V.IsLeaf(int) -> bool
        C++: bool IsLeaf(vtkIdType vertex)
        
        Return whether the vertex is a leaf (i.e. it has no children).
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTree
        C++: vtkTree *NewInstance()
        """
        ...
    
    def ReorderChildren(self, p_int, vtkIdTypeArray):
        """
        V.ReorderChildren(int, vtkIdTypeArray)
        C++: virtual void ReorderChildren(vtkIdType parent,
            vtkIdTypeArray *children)
        
        Reorder the children of a parent vertex. The children array must
        contain all the children of parent, just in a different order.
        This does not change the topology of the tree.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTree
        C++: static vtkTree *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


