"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkGenericPointIterator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGenericPointIterator - iterator used to traverse points
    
    Superclass: vtkObject
    
    This class (and subclasses) are used to iterate over points. Use it
    only in conjunction with vtkGenericDataSet (i.e., the adaptor
    framework).
    
    Typical use is:
    
    vtkGenericDataSet *dataset; vtkGenericPointIterator *it =
    dataset->NewPointIterator(); for (it->Begin(); !it->IsAtEnd();
    it->Next());
      {
      x=it->GetPosition();
      }
    """
    def Begin(self):
        """
        V.Begin()
        C++: virtual void Begin()
        
        Move iterator to first position if any (loop initialization).
        """
        ...
    
    def GetId(self):
        """
        V.GetId() -> int
        C++: virtual vtkIdType GetId()
        
        Return the unique identifier for the point, could be
        non-contiguous.
        \pre not_off: !IsAtEnd()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK construction and type macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK construction and type macros.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, ...)
        C++: virtual double *GetPosition()
        V.GetPosition([float, float, float])
        C++: virtual void GetPosition(double x[3])
        
        Get the coordinates of the point at the current iterator
        position.
        \pre not_off: !IsAtEnd()
        \post result_exists: result!=0
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK construction and type macros.
        """
        ...
    
    def IsAtEnd(self):
        """
        V.IsAtEnd() -> int
        C++: virtual vtkTypeBool IsAtEnd()
        
        Is the iterator at the end of traversal?
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK construction and type macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericPointIterator
        C++: vtkGenericPointIterator *NewInstance()
        
        Standard VTK construction and type macros.
        """
        ...
    
    def Next(self):
        """
        V.Next()
        C++: virtual void Next()
        
        Move the iterator to the next position in the list.
        \pre not_off: !IsAtEnd()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericPointIterator
        C++: static vtkGenericPointIterator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK construction and type macros.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


