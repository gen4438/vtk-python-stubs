"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkEdgeTable(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkEdgeTable - keep track of edges (edge is pair of integer id's)
    
    Superclass: vtkObject
    
    vtkEdgeTable is a general object for keeping track of lists of edges.
    An edge is defined by the pair of point id's (p1,p2). Methods are
    available to insert edges, check if edges exist, and traverse the
    list of edges. Also, it's possible to associate attribute information
    with each edge. The attribute information may take the form of
    vtkIdType id's, void* pointers, or points. To store attributes, make
    sure that InitEdgeInsertion() is invoked with the storeAttributes
    flag set properly. If points are inserted, use the methods
    InitPointInsertion() and InsertUniquePoint().
    """
    def GetNextEdge(self, p_int, p_int_1):
        """
        V.GetNextEdge(int, int) -> int
        C++: vtkIdType GetNextEdge(vtkIdType &p1, vtkIdType &p2)
        
        Traverse list of edges in table. Return the edge as (p1,p2),
        where p1 and p2 are point id's. Method return value is <0 if list
        is exhausted; non-zero otherwise. The value of p1 is guaranteed
        to be <= p2.
        """
        ...
    
    def GetNumberOfEdges(self):
        """
        V.GetNumberOfEdges() -> int
        C++: virtual vtkIdType GetNumberOfEdges()
        
        Return the number of edges that have been inserted thus far.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InitEdgeInsertion(self, p_int, p_int_1):
        """
        V.InitEdgeInsertion(int, int) -> int
        C++: int InitEdgeInsertion(vtkIdType numPoints,
            int storeAttributes=0)
        
        Initialize the edge insertion process. Provide an estimate of the
        number of points in a dataset (the maximum range value of p1 or
        p2).  The storeAttributes variable controls whether attributes
        are to be stored with the edge, and what type of attributes. If
        storeAttributes==1, then attributes of vtkIdType can be stored.
        If storeAttributes==2, then attributes of type void* can be
        stored. In either case, additional memory will be required by the
        data structure to store attribute data per each edge.  This
        method is used in conjunction with one of the three InsertEdge()
        methods described below (don't mix the InsertEdge()
        methods---make sure that the one used is consistent with the
        storeAttributes flag set in InitEdgeInsertion()).
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Free memory and return to the initially instantiated state.
        """
        ...
    
    def InitPointInsertion(self, vtkPoints, p_int):
        """
        V.InitPointInsertion(vtkPoints, int) -> int
        C++: int InitPointInsertion(vtkPoints *newPts, vtkIdType estSize)
        
        Initialize the point insertion process. The newPts is an object
        representing point coordinates into which incremental insertion
        methods place their data. The points are associated with the
        edge.
        """
        ...
    
    def InitTraversal(self):
        """
        V.InitTraversal()
        C++: void InitTraversal()
        
        Initialize traversal of edges in table.
        """
        ...
    
    def InsertEdge(self, p_int, p_int_1):
        """
        V.InsertEdge(int, int) -> int
        C++: vtkIdType InsertEdge(vtkIdType p1, vtkIdType p2)
        V.InsertEdge(int, int, int)
        C++: void InsertEdge(vtkIdType p1, vtkIdType p2,
            vtkIdType attributeId)
        V.InsertEdge(int, int, void)
        C++: void InsertEdge(vtkIdType p1, vtkIdType p2, void *ptr)
        
        Insert the edge (p1,p2) into the table. It is the user's
        responsibility to check if the edge has already been inserted
        (use IsEdge()). If the storeAttributes flag in
        InitEdgeInsertion() has been set, then the method returns a
        unique integer id (i.e., the edge id) that can be used to set and
        get edge attributes. Otherwise, the method will return 1. Do not
        mix this method with the InsertEdge() method that follows.
        """
        ...
    
    def InsertUniquePoint(self, p_int, p_int_1, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.InsertUniquePoint(int, int, [float, float, float], int) -> int
        C++: int InsertUniquePoint(vtkIdType p1, vtkIdType p2,
            double x[3], vtkIdType &ptId)
        
        Insert a unique point on the specified edge. Invoke this method
        only after InitPointInsertion() has been called. Return 0 if
        point was already in the list, otherwise return 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsEdge(self, p_int, p_int_1):
        """
        V.IsEdge(int, int) -> int
        C++: vtkIdType IsEdge(vtkIdType p1, vtkIdType p2)
        
        Return an integer id for the edge, or an attribute id of the edge
        (p1,p2) if the edge has been previously defined (it depends upon
        which version of InsertEdge() is being used); otherwise -1. The
        unique integer id can be used to set and retrieve attributes to
        the edge.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEdgeTable
        C++: vtkEdgeTable *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reset the object and prepare for reinsertion of edges. Does not
        delete memory like the Initialize() method.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEdgeTable
        C++: static vtkEdgeTable *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


