"""
This type stub file was generated by pyright.
"""

from .vtkIncrementalPointLocator import vtkIncrementalPointLocator

class vtkPointLocator(vtkIncrementalPointLocator):
    """
    vtkPointLocator - quickly locate points in 3-space
    
    Superclass: vtkIncrementalPointLocator
    
    vtkPointLocator is a spatial search object to quickly locate points
    in 3D. vtkPointLocator works by dividing a specified region of space
    into a regular array of "rectangular" buckets, and then keeping a
    list of points that lie in each bucket. Typical operation involves
    giving a position in 3D and finding the closest point.
    
    vtkPointLocator has two distinct methods of interaction. In the first
    method, you supply it with a dataset, and it operates on the points
    in the dataset. In the second method, you supply it with an array of
    points, and the object operates on the array.
    
    @warning
    Many other types of spatial locators have been developed such as
    octrees and kd-trees. These are often more efficient for the
    operations described here.
    
    @sa
    vtkCellPicker vtkPointPicker vtkStaticPointLocator
    """
    def BuildLocator(self):
        """
        V.BuildLocator()
        C++: void BuildLocator() override;
        
        See vtkLocator interface documentation. These methods are not
        thread safe.
        """
        ...
    
    def FindClosestInsertedPoint(self, ):
        """
        V.FindClosestInsertedPoint((float, float, float)) -> int
        C++: vtkIdType FindClosestInsertedPoint(const double x[3])
            override;
        
        Given a position x, return the id of the point closest to it.
        This method is used when performing incremental point insertion.
        Note that -1 indicates that no point was found. This method is
        thread safe if BuildLocator() is directly or indirectly called
        from a single thread first.
        """
        ...
    
    def FindClosestNPoints(self, p_int, , vtkIdList):
        """
        V.FindClosestNPoints(int, (float, float, float), vtkIdList)
        C++: void FindClosestNPoints(int N, const double x[3],
            vtkIdList *result) override;
        
        Find the closest N points to a position. This returns the closest
        N points to a position. A faster method could be created that
        returned N close points to a position, but necessarily the exact
        N closest. The returned points are sorted from closest to
        farthest. These methods are thread safe if BuildLocator() is
        directly or indirectly called from a single thread first.
        """
        ...
    
    def FindClosestPoint(self, ):
        """
        V.FindClosestPoint((float, float, float)) -> int
        C++: vtkIdType FindClosestPoint(const double x[3]) override;
        V.FindClosestPoint(float, float, float) -> int
        C++: vtkIdType FindClosestPoint(double x, double y, double z)
        
        Given a position x, return the id of the point closest to it.
        Alternative method requires separate x-y-z values. These methods
        are thread safe if BuildLocator() is directly or indirectly
        called from a single thread first.
        """
        ...
    
    def FindClosestPointWithinRadius(self, p_float, , p_float_4):
        """
        V.FindClosestPointWithinRadius(float, (float, float, float),
            float) -> int
        C++: vtkIdType FindClosestPointWithinRadius(double radius,
            const double x[3], double &dist2) override;
        V.FindClosestPointWithinRadius(float, (float, float, float),
            float, float) -> int
        C++: virtual vtkIdType FindClosestPointWithinRadius(double radius,
             const double x[3], double inputDataLength, double &dist2)
        
        Given a position x and a radius r, return the id of the point
        closest to the point in that radius. These methods are thread
        safe if BuildLocator() is directly or indirectly called from a
        single thread first. dist2 returns the squared distance to the
        point.
        """
        ...
    
    def FindDistributedPoints(self, p_int, , vtkIdList, p_int_1):
        """
        V.FindDistributedPoints(int, (float, float, float), vtkIdList,
            int)
        C++: virtual void FindDistributedPoints(int N, const double x[3],
            vtkIdList *result, int M)
        V.FindDistributedPoints(int, float, float, float, vtkIdList, int)
        C++: virtual void FindDistributedPoints(int N, double x, double y,
             double z, vtkIdList *result, int M)
        
        Find the closest points to a position such that each octant of
        space around the position contains at least N points. Loosely
        limit the search to a maximum number of points evaluated, M.
        These methods are thread safe if BuildLocator() is directly or
        indirectly called from a single thread first.
        """
        ...
    
    def FindPointsWithinRadius(self, p_float, , vtkIdList):
        """
        V.FindPointsWithinRadius(float, (float, float, float), vtkIdList)
        C++: void FindPointsWithinRadius(double R, const double x[3],
            vtkIdList *result) override;
        
        Find all points within a specified radius R of position x. The
        result is not sorted in any specific manner. These methods are
        thread safe if BuildLocator() is directly or indirectly called
        from a single thread first.
        """
        ...
    
    def FreeSearchStructure(self):
        """
        V.FreeSearchStructure()
        C++: void FreeSearchStructure() override;
        
        See vtkLocator interface documentation. These methods are not
        thread safe.
        """
        ...
    
    def GenerateRepresentation(self, p_int, vtkPolyData):
        """
        V.GenerateRepresentation(int, vtkPolyData)
        C++: void GenerateRepresentation(int level, vtkPolyData *pd)
            override;
        
        See vtkLocator interface documentation. These methods are not
        thread safe.
        """
        ...
    
    def GetDivisions(self):
        """
        V.GetDivisions() -> (int, int, int)
        C++: virtual int *GetDivisions()
        
        Set the number of divisions in x-y-z directions.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type management and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type management and printing.
        """
        ...
    
    def GetNumberOfPointsPerBucket(self):
        """
        V.GetNumberOfPointsPerBucket() -> int
        C++: virtual int GetNumberOfPointsPerBucket()
        
        Specify the average number of points in each bucket.
        """
        ...
    
    def GetNumberOfPointsPerBucketMaxValue(self):
        """
        V.GetNumberOfPointsPerBucketMaxValue() -> int
        C++: virtual int GetNumberOfPointsPerBucketMaxValue()
        
        Specify the average number of points in each bucket.
        """
        ...
    
    def GetNumberOfPointsPerBucketMinValue(self):
        """
        V.GetNumberOfPointsPerBucketMinValue() -> int
        C++: virtual int GetNumberOfPointsPerBucketMinValue()
        
        Specify the average number of points in each bucket.
        """
        ...
    
    def GetPoints(self):
        """
        V.GetPoints() -> vtkPoints
        C++: virtual vtkPoints *GetPoints()
        
        Provide an accessor to the points.
        """
        ...
    
    def GetPointsInBucket(self, , p_int=..., p_int=..., p_int=...):
        """
        V.GetPointsInBucket((float, float, float), [int, int, int])
            -> vtkIdList
        C++: virtual vtkIdList *GetPointsInBucket(const double x[3],
            int ijk[3])
        
        Given a position x, return the list of points in the bucket that
        contains the point. It is possible that nullptr is returned. The
        user provides an ijk array that is the indices into the locator.
        This method is thread safe.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        See vtkLocator interface documentation. These methods are not
        thread safe.
        """
        ...
    
    def InitPointInsertion(self, vtkPoints, ):
        """
        V.InitPointInsertion(vtkPoints, (float, float, float, float,
            float, float)) -> int
        C++: int InitPointInsertion(vtkPoints *newPts,
            const double bounds[6]) override;
        V.InitPointInsertion(vtkPoints, (float, float, float, float,
            float, float), int) -> int
        C++: int InitPointInsertion(vtkPoints *newPts,
            const double bounds[6], vtkIdType estSize) override;
        
        Initialize the point insertion process. The newPts is an object
        representing point coordinates into which incremental insertion
        methods place their data. Bounds are the box that the points lie
        in. Not thread safe.
        """
        ...
    
    def InsertNextPoint(self, ):
        """
        V.InsertNextPoint((float, float, float)) -> int
        C++: vtkIdType InsertNextPoint(const double x[3]) override;
        
        Incrementally insert a point into search structure. The method
        returns the insertion location (i.e., point id). You should use
        the method IsInsertedPoint() to see whether this point has
        already been inserted (that is, if you desire to prevent
        duplicate points). Before using this method you must make sure
        that newPts have been supplied, the bounds has been set properly,
        and that divs are properly set. (See InitPointInsertion().) Not
        thread safe.
        """
        ...
    
    def InsertPoint(self, p_int, ):
        """
        V.InsertPoint(int, (float, float, float))
        C++: void InsertPoint(vtkIdType ptId, const double x[3]) override;
        
        Incrementally insert a point into search structure with a
        particular index value. You should use the method
        IsInsertedPoint() to see whether this point has already been
        inserted (that is, if you desire to prevent duplicate points).
        Before using this method you must make sure that newPts have been
        supplied, the bounds has been set properly, and that divs are
        properly set. (See InitPointInsertion().) Not thread safe.
        """
        ...
    
    def InsertUniquePoint(self, , p_int):
        """
        V.InsertUniquePoint((float, float, float), int) -> int
        C++: int InsertUniquePoint(const double x[3], vtkIdType &ptId)
            override;
        
        Determine whether point given by x[3] has been inserted into
        points list. Return 0 if point was already in the list, otherwise
        return 1. If the point was not in the list, it will be ADDED.  In
        either case, the id of the point (newly inserted or not) is
        returned in the ptId argument. Note this combines the
        functionality of IsInsertedPoint() followed by a call to
        InsertNextPoint(). This method is not thread safe.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type management and printing.
        """
        ...
    
    def IsInsertedPoint(self, p_float, p_float_1, p_float_2):
        """
        V.IsInsertedPoint(float, float, float) -> int
        C++: vtkIdType IsInsertedPoint(double x, double y, double z)
            override;
        V.IsInsertedPoint((float, float, float)) -> int
        C++: vtkIdType IsInsertedPoint(const double x[3]) override;
        
        Determine whether point given by x[3] has been inserted into
        points list. Return id of previously inserted point if this is
        true, otherwise return
        -1. This method is thread safe.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type management and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointLocator
        C++: vtkPointLocator *NewInstance()
        
        Standard methods for type management and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointLocator
        C++: static vtkPointLocator *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for type management and printing.
        """
        ...
    
    def SetDivisions(self, p_int, p_int_1, p_int_2):
        """
        V.SetDivisions(int, int, int)
        C++: virtual void SetDivisions(int _arg1, int _arg2, int _arg3)
        V.SetDivisions((int, int, int))
        C++: virtual void SetDivisions(const int _arg[3])
        
        Set the number of divisions in x-y-z directions.
        """
        ...
    
    def SetNumberOfPointsPerBucket(self, p_int):
        """
        V.SetNumberOfPointsPerBucket(int)
        C++: virtual void SetNumberOfPointsPerBucket(int _arg)
        
        Specify the average number of points in each bucket.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


