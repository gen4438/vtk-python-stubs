"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkInformationQuadratureSchemeDefinitionVectorKey(__vtkmodules_vtkCommonCore.vtkInformationKey):
    """
    vtkInformationQuadratureSchemeDefinitionVectorKey - Key for
    vtkQuadratureSchemeDefinition vector values.
    
    Superclass: vtkInformationKey
    
    vtkInformationQuadratureSchemeDefinitionVectorKey is used to
    represent keys for double vector values in vtkInformation.h. NOTE the
    interface in this key differs from that in other similar keys because
    of our internal use of smart pointers.
    """
    def Append(self, vtkInformation, vtkQuadratureSchemeDefinition):
        """
        V.Append(vtkInformation, vtkQuadratureSchemeDefinition)
        C++: void Append(vtkInformation *info,
            vtkQuadratureSchemeDefinition *value)
        
        Put the value on the back of the vector, with reference counting.
        """
        ...
    
    def Clear(self, vtkInformation):
        """
        V.Clear(vtkInformation)
        C++: void Clear(vtkInformation *info)
        
        Clear the vector.
        """
        ...
    
    def DeepCopy(self, vtkInformation, vtkInformation_1):
        """
        V.DeepCopy(vtkInformation, vtkInformation)
        C++: void DeepCopy(vtkInformation *from, vtkInformation *to)
            override;
        
        Copy the entry associated with this key from one information
        object to another.  If there is no entry in the first information
        object for this key, the value is removed from the second.
        """
        ...
    
    def Get(self, vtkInformation, p_int):
        """
        V.Get(vtkInformation, int) -> vtkQuadratureSchemeDefinition
        C++: vtkQuadratureSchemeDefinition *Get(vtkInformation *info,
            int idx)
        
        Get the vtkQuadratureSchemeDefinition at a specific location in
        the vector.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Length(self, vtkInformation):
        """
        V.Length(vtkInformation) -> int
        C++: int Length(vtkInformation *info)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance()
            -> vtkInformationQuadratureSchemeDefinitionVectorKey
        C++: vtkInformationQuadratureSchemeDefinitionVectorKey *NewInstance(
            )
        """
        ...
    
    def Resize(self, vtkInformation, p_int):
        """
        V.Resize(vtkInformation, int)
        C++: void Resize(vtkInformation *info, int n)
        
        Resize (extend) the vector to hold n objects. Any new elements
        created will be null initialized.
        """
        ...
    
    def RestoreState(self, vtkInformation, vtkXMLDataElement):
        """
        V.RestoreState(vtkInformation, vtkXMLDataElement) -> int
        C++: int RestoreState(vtkInformation *info,
            vtkXMLDataElement *element)
        
        Load key/value pairs from an XML state representation created
        with SaveState. Duplicate keys will generate a fatal error.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkInformationQuadratureSchemeDefinitionVectorKey
        C++: static vtkInformationQuadratureSchemeDefinitionVectorKey *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SaveState(self, vtkInformation, vtkXMLDataElement):
        """
        V.SaveState(vtkInformation, vtkXMLDataElement) -> int
        C++: int SaveState(vtkInformation *info,
            vtkXMLDataElement *element)
        
        Generate an XML representation of the object. Each key/value pair
        will be nested in the resulting XML hierarchy. The element passed
        in is assumed to be empty.
        """
        ...
    
    def Set(self, vtkInformation, vtkQuadratureSchemeDefinition, p_int):
        """
        V.Set(vtkInformation, vtkQuadratureSchemeDefinition, int)
        C++: void Set(vtkInformation *info,
            vtkQuadratureSchemeDefinition *value, int i)
        
        Set element i of the vector to value. Resizes the vector if
        needed.
        """
        ...
    
    def ShallowCopy(self, vtkInformation, vtkInformation_1):
        """
        V.ShallowCopy(vtkInformation, vtkInformation)
        C++: void ShallowCopy(vtkInformation *from, vtkInformation *to)
            override;
        
        Copy the entry associated with this key from one information
        object to another.  If there is no entry in the first information
        object for this key, the value is removed from the second.
        """
        ...
    
    def Size(self, vtkInformation):
        """
        V.Size(vtkInformation) -> int
        C++: int Size(vtkInformation *info)
        
        Get the vector's length.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


