"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkAtom(object):
    """
    vtkAtom - convenience proxy for vtkMolecule
    
    vtkAtom(const &vtkAtom)
    """
    def GetAtomicNumber(self):
        """
        V.GetAtomicNumber() -> int
        C++: unsigned short GetAtomicNumber()
        
        Get/Set the atomic number of this atom
        """
        ...
    
    def GetId(self):
        """
        V.GetId() -> int
        C++: vtkIdType GetId()
        
        Return the Id used to identify this atom in the parent molecule.
        """
        ...
    
    def GetMolecule(self):
        """
        V.GetMolecule() -> vtkMolecule
        C++: vtkMolecule *GetMolecule()
        
        Return the parent molecule of this atom.
        """
        ...
    
    def GetPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPosition([float, float, float])
        C++: void GetPosition(double pos[3])
        V.GetPosition() -> vtkVector3f
        C++: vtkVector3f GetPosition()
        
        Get/Set the position of this atom
        """
        ...
    
    def SetAtomicNumber(self, p_int):
        """
        V.SetAtomicNumber(int)
        C++: void SetAtomicNumber(unsigned short atomicNum)
        
        Get/Set the atomic number of this atom
        """
        ...
    
    def SetPosition(self, ):
        """
        V.SetPosition((float, float, float))
        C++: void SetPosition(const float pos[3])
        V.SetPosition(float, float, float)
        C++: void SetPosition(float x, float y, float z)
        V.SetPosition(vtkVector3f)
        C++: void SetPosition(const vtkVector3f &pos)
        
        Get/Set the position of this atom
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, const, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


