"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkOctreePointLocatorNode(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkOctreePointLocatorNode - Octree node that has 8 children each of
    equal size
    
    Superclass: vtkObject
    
    This class represents a single spatial region in a 3D axis octant
    partitioning.  It is intended to work efficiently with the
    vtkOctreePointLocator and is not meant for general use.  It is
    assumed the region bounds some set of points.  The ordering of the
    children is
    (-x,-y,-z),(+x,-y,-z),(-x,+y,-z),(+x,+y,-z),(-x,-y,+z),(+x,-y,+z),
    (-x,+y,+z),(+x,+y,+z).  The portion of the domain assigned to an
    octant is Min < x <= Max.
    
    @sa
    vtkOctreePointLocator
    """
    def ComputeOctreeNodeInformation(self, vtkOctreePointLocatorNode, p_int, p_int_1, *float):
        """
        V.ComputeOctreeNodeInformation(vtkOctreePointLocatorNode, int,
            int, [float, ...])
        C++: void ComputeOctreeNodeInformation(
            vtkOctreePointLocatorNode *Parent, int &NextLeafId,
            int &NextMinId, float *coordinates)
        
        Recursive function to compute ID, MinVal, MaxVal, and MinID.
        Parent is used for MinVal and MaxVal in the case that no points
        are in the leaf node.
        """
        ...
    
    def ContainsPoint(self, p_float, p_float_1, p_float_2, p_int):
        """
        V.ContainsPoint(float, float, float, int) -> int
        C++: vtkTypeBool ContainsPoint(double x, double y, double z,
            int useDataBounds)
        
        Return 1 if this spatial region entirely contains the given
        point. Use the possibly smaller bounds of the points within the
        region if useDataBounds is non-zero.
        """
        ...
    
    def CreateChildNodes(self):
        """
        V.CreateChildNodes()
        C++: void CreateChildNodes()
        
        Add the 8 children.
        """
        ...
    
    def DeleteChildNodes(self):
        """
        V.DeleteChildNodes()
        C++: void DeleteChildNodes()
        
        Delete the 8 children.
        """
        ...
    
    def GetBounds(self, *float):
        """
        V.GetBounds([float, ...])
        C++: void GetBounds(double *b)
        
        Set/Get the bounds of the spatial region represented by this
        node. Caller allocates storage for 6-vector in GetBounds.
        """
        ...
    
    def GetChild(self, p_int):
        """
        V.GetChild(int) -> vtkOctreePointLocatorNode
        C++: vtkOctreePointLocatorNode *GetChild(int i)
        
        Get a pointer to the ith child of this node.
        """
        ...
    
    def GetDataBounds(self, *float):
        """
        V.GetDataBounds([float, ...])
        C++: void GetDataBounds(double *b)
        
        Set/Get the bounds of the points contained in this spatial
        region. This may be smaller than the bounds of the region itself.
        Caller allocates storage for 6-vector in GetDataBounds.
        """
        ...
    
    def GetDistance2ToBoundary(self, p_float, p_float_1, p_float_2, vtkOctreePointLocatorNode, p_int):
        """
        V.GetDistance2ToBoundary(float, float, float,
            vtkOctreePointLocatorNode, int) -> float
        C++: double GetDistance2ToBoundary(double x, double y, double z,
            vtkOctreePointLocatorNode *top, int useDataBounds)
        V.GetDistance2ToBoundary(float, float, float, [float, ...],
            vtkOctreePointLocatorNode, int) -> float
        C++: double GetDistance2ToBoundary(double x, double y, double z,
            double *boundaryPt, vtkOctreePointLocatorNode *top,
            int useDataBounds)
        
        Calculate the distance squared from any point to the boundary of
        this region.  Use the boundary of the points within the region if
        useDataBounds is non-zero.
        """
        ...
    
    def GetDistance2ToInnerBoundary(self, p_float, p_float_1, p_float_2, vtkOctreePointLocatorNode):
        """
        V.GetDistance2ToInnerBoundary(float, float, float,
            vtkOctreePointLocatorNode) -> float
        C++: double GetDistance2ToInnerBoundary(double x, double y,
            double z, vtkOctreePointLocatorNode *top)
        
        Calculate the distance from the specified point (which is
        required to be inside this spatial region) to an interior
        boundary.  An interior boundary is one that is not also an
        boundary of the entire space partitioned by the tree of
        vtkOctreePointLocatorNode's.
        """
        ...
    
    def GetID(self):
        """
        V.GetID() -> int
        C++: virtual int GetID()
        
        Get the ID associated with the region described by this node.  If
        this is not a leaf node, this value should be -1.
        """
        ...
    
    def GetMaxBounds(self):
        """
        V.GetMaxBounds() -> (float, ...)
        C++: virtual double *GetMaxBounds()
        
        Get a pointer to the 3 bound minima (xmin, ymin and zmin) or the
        3 bound maxima (xmax, ymax, zmax).  Don't free this pointer.
        """
        ...
    
    def GetMaxDataBounds(self):
        """
        V.GetMaxDataBounds() -> (float, ...)
        C++: virtual double *GetMaxDataBounds()
        
        Get a pointer to the 3 data bound minima (xmin, ymin and zmin) or
        the 3 data bound maxima (xmax, ymax, zmax).  Don't free this
        pointer.
        """
        ...
    
    def GetMinBounds(self):
        """
        V.GetMinBounds() -> (float, ...)
        C++: virtual double *GetMinBounds()
        
        Get a pointer to the 3 bound minima (xmin, ymin and zmin) or the
        3 bound maxima (xmax, ymax, zmax).  Don't free this pointer.
        """
        ...
    
    def GetMinDataBounds(self):
        """
        V.GetMinDataBounds() -> (float, ...)
        C++: virtual double *GetMinDataBounds()
        
        Get a pointer to the 3 data bound minima (xmin, ymin and zmin) or
        the 3 data bound maxima (xmax, ymax, zmax).  Don't free this
        pointer.
        """
        ...
    
    def GetMinID(self):
        """
        V.GetMinID() -> int
        C++: virtual int GetMinID()
        
        If this node is not a leaf node, there are leaf nodes below it
        whose regions represent a partitioning of this region.  The IDs
        of these leaf nodes form a contiguous set.  Get the first of the
        first point's ID that is contained in this node.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: virtual int GetNumberOfPoints()
        
        Set/Get the number of points contained in this region.
        """
        ...
    
    def GetSubOctantIndex(self, *float, **kwargs):
        """
        V.GetSubOctantIndex([float, ...], int) -> int
        C++: int GetSubOctantIndex(double *point, int CheckContainment)
        
        Return the id of the suboctant that a given point is in. If
        CheckContainment is non-zero then it checks whether the point is
        in the actual bounding box of the suboctant, otherwise it only
        checks which octant the point is in that is created from the
        axis-aligned partitioning of the domain at this octant's center.
        """
        ...
    
    def IntersectsRegion(self, vtkPlanesIntersection, p_int):
        """
        V.IntersectsRegion(vtkPlanesIntersection, int) -> int
        C++: int IntersectsRegion(vtkPlanesIntersection *pi,
            int useDataBounds)
        
        A vtkPlanesIntersection object represents a convex 3D region
        bounded by planes, and it is capable of computing intersections
        of boxes with itself.  Return 1 if this spatial region intersects
        the spatial region described by the vtkPlanesIntersection object.
        Use the possibly smaller bounds of the points within the region
        if useDataBounds is non-zero.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOctreePointLocatorNode
        C++: vtkOctreePointLocatorNode *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOctreePointLocatorNode
        C++: static vtkOctreePointLocatorNode *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: void SetBounds(double xMin, double xMax, double yMin,
            double yMax, double zMin, double zMax)
        V.SetBounds((float, float, float, float, float, float))
        C++: void SetBounds(const double b[6])
        
        Set/Get the bounds of the spatial region represented by this
        node. Caller allocates storage for 6-vector in GetBounds.
        """
        ...
    
    def SetDataBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetDataBounds(float, float, float, float, float, float)
        C++: void SetDataBounds(double xMin, double xMax, double yMin,
            double yMax, double zMin, double zMax)
        
        Set/Get the bounds of the points contained in this spatial
        region. This may be smaller than the bounds of the region itself.
        Caller allocates storage for 6-vector in GetDataBounds.
        """
        ...
    
    def SetMaxBounds(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetMaxBounds([float, float, float])
        C++: void SetMaxBounds(double maxBounds[3])
        
        Set the xmax, ymax and zmax value of the bounds of this region
        """
        ...
    
    def SetMaxDataBounds(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetMaxDataBounds([float, float, float])
        C++: void SetMaxDataBounds(double maxDataBounds[3])
        
        Set the xmax, ymax and zmax value of the bounds of this data
        within this region.
        """
        ...
    
    def SetMinBounds(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetMinBounds([float, float, float])
        C++: void SetMinBounds(double minBounds[3])
        
        Set the xmin, ymin and zmin value of the bounds of this region
        """
        ...
    
    def SetMinDataBounds(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetMinDataBounds([float, float, float])
        C++: void SetMinDataBounds(double minDataBounds[3])
        
        Set the xmin, ymin and zmin value of the bounds of this data
        within this region.
        """
        ...
    
    def SetNumberOfPoints(self, p_int):
        """
        V.SetNumberOfPoints(int)
        C++: void SetNumberOfPoints(int numberOfPoints)
        
        Set/Get the number of points contained in this region.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


