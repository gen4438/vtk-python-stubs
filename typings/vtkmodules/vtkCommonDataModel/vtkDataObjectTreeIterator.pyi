"""
This type stub file was generated by pyright.
"""

from .vtkCompositeDataIterator import vtkCompositeDataIterator

class vtkDataObjectTreeIterator(vtkCompositeDataIterator):
    """
    vtkDataObjectTreeIterator - superclass for composite data iterators
    
    Superclass: vtkCompositeDataIterator
    
    vtkDataObjectTreeIterator provides an interface for accessing
    datasets in a collection (vtkDataObjectTreeIterator).
    """
    def GetCurrentDataObject(self):
        """
        V.GetCurrentDataObject() -> vtkDataObject
        C++: vtkDataObject *GetCurrentDataObject() override;
        
        Returns the current item. Valid only when IsDoneWithTraversal()
        returns 0.
        """
        ...
    
    def GetCurrentFlatIndex(self):
        """
        V.GetCurrentFlatIndex() -> int
        C++: unsigned int GetCurrentFlatIndex() override;
        
        Flat index is an index obtained by traversing the tree in
        preorder. This can be used to uniquely identify nodes in the
        tree. Not valid if IsDoneWithTraversal() returns true.
        """
        ...
    
    def GetCurrentMetaData(self):
        """
        V.GetCurrentMetaData() -> vtkInformation
        C++: vtkInformation *GetCurrentMetaData() override;
        
        Returns the meta-data associated with the current item. Note
        that, depending on iterator implementation, the returned
        information is not necessarily stored on the current object. So
        modifying the information is forbidden.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTraverseSubTree(self):
        """
        V.GetTraverseSubTree() -> int
        C++: virtual vtkTypeBool GetTraverseSubTree()
        
        If TraverseSubTree is set to true, the iterator will visit the
        entire tree structure, otherwise it only visits the first level
        children. Set to 1 by default.
        """
        ...
    
    def GetVisitOnlyLeaves(self):
        """
        V.GetVisitOnlyLeaves() -> int
        C++: virtual vtkTypeBool GetVisitOnlyLeaves()
        
        If VisitOnlyLeaves is true, the iterator will only visit nodes
        (sub-datasets) that are not composite. If it encounters a
        composite data set, it will automatically traverse that composite
        dataset until it finds non-composite datasets. With this options,
        it is possible to visit all non-composite datasets in tree of
        composite datasets (composite of composite of composite for
        example :-) ) If VisitOnlyLeaves is false, GetCurrentDataObject()
        may return vtkCompositeDataSet. By default, VisitOnlyLeaves is 1.
        """
        ...
    
    def GoToFirstItem(self):
        """
        V.GoToFirstItem()
        C++: void GoToFirstItem() override;
        
        Move the iterator to the beginning of the collection.
        """
        ...
    
    def GoToNextItem(self):
        """
        V.GoToNextItem()
        C++: void GoToNextItem() override;
        
        Move the iterator to the next item in the collection.
        """
        ...
    
    def HasCurrentMetaData(self):
        """
        V.HasCurrentMetaData() -> int
        C++: int HasCurrentMetaData() override;
        
        Returns if the a meta-data information object is present for the
        current item. Return 1 on success, 0 otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsDoneWithTraversal(self):
        """
        V.IsDoneWithTraversal() -> int
        C++: int IsDoneWithTraversal() override;
        
        Test whether the iterator is finished with the traversal. Returns
        1 for yes, and 0 for no. It is safe to call any of the
        GetCurrent...() methods only when IsDoneWithTraversal() returns
        0.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataObjectTreeIterator
        C++: vtkDataObjectTreeIterator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataObjectTreeIterator
        C++: static vtkDataObjectTreeIterator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetTraverseSubTree(self, p_int):
        """
        V.SetTraverseSubTree(int)
        C++: virtual void SetTraverseSubTree(vtkTypeBool _arg)
        
        If TraverseSubTree is set to true, the iterator will visit the
        entire tree structure, otherwise it only visits the first level
        children. Set to 1 by default.
        """
        ...
    
    def SetVisitOnlyLeaves(self, p_int):
        """
        V.SetVisitOnlyLeaves(int)
        C++: virtual void SetVisitOnlyLeaves(vtkTypeBool _arg)
        
        If VisitOnlyLeaves is true, the iterator will only visit nodes
        (sub-datasets) that are not composite. If it encounters a
        composite data set, it will automatically traverse that composite
        dataset until it finds non-composite datasets. With this options,
        it is possible to visit all non-composite datasets in tree of
        composite datasets (composite of composite of composite for
        example :-) ) If VisitOnlyLeaves is false, GetCurrentDataObject()
        may return vtkCompositeDataSet. By default, VisitOnlyLeaves is 1.
        """
        ...
    
    def TraverseSubTreeOff(self):
        """
        V.TraverseSubTreeOff()
        C++: virtual void TraverseSubTreeOff()
        
        If TraverseSubTree is set to true, the iterator will visit the
        entire tree structure, otherwise it only visits the first level
        children. Set to 1 by default.
        """
        ...
    
    def TraverseSubTreeOn(self):
        """
        V.TraverseSubTreeOn()
        C++: virtual void TraverseSubTreeOn()
        
        If TraverseSubTree is set to true, the iterator will visit the
        entire tree structure, otherwise it only visits the first level
        children. Set to 1 by default.
        """
        ...
    
    def VisitOnlyLeavesOff(self):
        """
        V.VisitOnlyLeavesOff()
        C++: virtual void VisitOnlyLeavesOff()
        
        If VisitOnlyLeaves is true, the iterator will only visit nodes
        (sub-datasets) that are not composite. If it encounters a
        composite data set, it will automatically traverse that composite
        dataset until it finds non-composite datasets. With this options,
        it is possible to visit all non-composite datasets in tree of
        composite datasets (composite of composite of composite for
        example :-) ) If VisitOnlyLeaves is false, GetCurrentDataObject()
        may return vtkCompositeDataSet. By default, VisitOnlyLeaves is 1.
        """
        ...
    
    def VisitOnlyLeavesOn(self):
        """
        V.VisitOnlyLeavesOn()
        C++: virtual void VisitOnlyLeavesOn()
        
        If VisitOnlyLeaves is true, the iterator will only visit nodes
        (sub-datasets) that are not composite. If it encounters a
        composite data set, it will automatically traverse that composite
        dataset until it finds non-composite datasets. With this options,
        it is possible to visit all non-composite datasets in tree of
        composite datasets (composite of composite of composite for
        example :-) ) If VisitOnlyLeaves is false, GetCurrentDataObject()
        may return vtkCompositeDataSet. By default, VisitOnlyLeaves is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


