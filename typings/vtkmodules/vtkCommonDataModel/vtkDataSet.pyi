"""
This type stub file was generated by pyright.
"""

from .vtkDataObject import vtkDataObject

class vtkDataSet(vtkDataObject):
    """
    vtkDataSet - abstract class to specify dataset behavior
    
    Superclass: vtkDataObject
    
    vtkDataSet is an abstract class that specifies an interface for
    dataset objects. vtkDataSet also provides methods to provide
    information about the data, such as center, bounding box, and
    representative length.
    
    In vtk a dataset consists of a structure (geometry and topology) and
    attribute data. The structure is defined implicitly or explicitly as
    a collection of cells. The geometry of the structure is contained in
    point coordinates plus the cell interpolation functions. The topology
    of the dataset structure is defined by cell types and how the cells
    share their defining points.
    
    Attribute data in vtk is either point data (data at points) or cell
    data (data at cells). Typically filters operate on point data, but
    some may operate on cell data, both cell and point data, either one,
    or none.
    
    @sa
    vtkPointSet vtkStructuredPoints vtkStructuredGrid vtkUnstructuredGrid
    vtkRectilinearGrid vtkPolyData vtkPointData vtkCellData vtkDataObject
    vtkFieldData
    """
    def AllocateCellGhostArray(self):
        """
        V.AllocateCellGhostArray() -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *AllocateCellGhostArray()
        
        Allocate ghost array for cells.
        """
        ...
    
    def AllocatePointGhostArray(self):
        """
        V.AllocatePointGhostArray() -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *AllocatePointGhostArray()
        
        Allocate ghost array for points.
        """
        ...
    
    def CheckAttributes(self):
        """
        V.CheckAttributes() -> int
        C++: int CheckAttributes()
        
        This method checks to see if the cell and point attributes match
        the geometry.  Many filters will crash if the number of tuples in
        an array is less than the number of points/cells. This method
        returns 1 if there is a mismatch, and 0 if everything is ok.  It
        prints an error if an array is too short, and a warning if an
        array is too long.
        """
        ...
    
    def ComputeBounds(self):
        """
        V.ComputeBounds()
        C++: virtual void ComputeBounds()
        
        Compute the data bounding box from data points. THIS METHOD IS
        NOT THREAD SAFE.
        """
        ...
    
    def CopyAttributes(self, vtkDataSet):
        """
        V.CopyAttributes(vtkDataSet)
        C++: virtual void CopyAttributes(vtkDataSet *ds)
        
        Copy the attributes associated with the specified dataset to this
        instance of vtkDataSet. THIS METHOD IS NOT THREAD SAFE.
        """
        ...
    
    def CopyStructure(self, vtkDataSet):
        """
        V.CopyStructure(vtkDataSet)
        C++: virtual void CopyStructure(vtkDataSet *ds)
        
        Copy the geometric and topological structure of an object. Note
        that the invoking object and the object pointed to by the
        parameter ds must be of the same type. THIS METHOD IS NOT THREAD
        SAFE.
        """
        ...
    
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *src) override;
        
        Shallow and Deep copy.
        """
        ...
    
    def FindAndGetCell(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindAndGetCell([float, float, float], vtkCell, int, float, int,
            [float, float, float], [float, ...]) -> vtkCell
        C++: virtual vtkCell *FindAndGetCell(double x[3], vtkCell *cell,
            vtkIdType cellId, double tol2, int &subId, double pcoords[3],
            double *weights)
        
        Locate the cell that contains a point and return the cell. Also
        returns the subcell id, parametric coordinates and weights for
        subsequent interpolation. This method combines the derived class
        methods int FindCell and vtkCell *GetCell. Derived classes may
        provide a more efficient implementation. See for example
        vtkStructuredPoints. THIS METHOD IS NOT THREAD SAFE.
        """
        ...
    
    def FindCell(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindCell([float, float, float], vtkCell, int, float, int,
            [float, float, float], [float, ...]) -> int
        C++: virtual vtkIdType FindCell(double x[3], vtkCell *cell,
            vtkIdType cellId, double tol2, int &subId, double pcoords[3],
            double *weights)
        V.FindCell([float, float, float], vtkCell, vtkGenericCell, int,
            float, int, [float, float, float], [float, ...]) -> int
        C++: virtual vtkIdType FindCell(double x[3], vtkCell *cell,
            vtkGenericCell *gencell, vtkIdType cellId, double tol2,
            int &subId, double pcoords[3], double *weights)
        
        Locate cell based on global coordinate x and tolerance squared.
        If cell and cellId is non-nullptr, then search starts from this
        cell and looks at immediate neighbors.  Returns cellId >= 0 if
        inside, < 0 otherwise.  The parametric coordinates are provided
        in pcoords[3]. The interpolation weights are returned in
        weights[]. (The number of weights is equal to the number of
        points in the found cell). Tolerance is used to control how close
        the point is to be considered "in" the cell. THIS METHOD IS NOT
        THREAD SAFE.
        """
        ...
    
    def FindPoint(self, p_float, p_float_1, p_float_2):
        """
        V.FindPoint(float, float, float) -> int
        C++: vtkIdType FindPoint(double x, double y, double z)
        V.FindPoint([float, float, float]) -> int
        C++: virtual vtkIdType FindPoint(double x[3])
        
        Locate the closest point to the global coordinate x. Return the
        point id. If point id < 0; then no point found. (This may arise
        when point is outside of dataset.) THIS METHOD IS THREAD SAFE IF
        FIRST CALLED FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED
        """
        ...
    
    def GenerateGhostArray(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GenerateGhostArray([int, int, int, int, int, int])
        C++: virtual void GenerateGhostArray(int zeroExt[6])
        V.GenerateGhostArray([int, int, int, int, int, int], bool)
        C++: virtual void GenerateGhostArray(int zeroExt[6],
            bool cellOnly)
        
        Normally called by pipeline executives or algorithms only. This
        method computes the ghost arrays for a given dataset. The zeroExt
        argument specifies the extent of the region which ghost type = 0.
        """
        ...
    
    def GetActualMemorySize(self):
        """
        V.GetActualMemorySize() -> int
        C++: unsigned long GetActualMemorySize() override;
        
        Return the actual size of the data in kibibytes (1024 bytes).
        This number is valid only after the pipeline has updated. The
        memory size returned is guaranteed to be greater than or equal to
        the memory required to represent the data (e.g., extra space in
        arrays, etc. are not included in the return value). THIS METHOD
        IS THREAD SAFE.
        """
        ...
    
    def GetAttributesAsFieldData(self, p_int):
        """
        V.GetAttributesAsFieldData(int) -> vtkFieldData
        C++: vtkFieldData *GetAttributesAsFieldData(int type) override;
        
        Returns the attributes of the data object as a vtkFieldData. This
        returns non-null values in all the same cases as GetAttributes,
        in addition to the case of FIELD, which will return the field
        data for any vtkDataObject subclass.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds()
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Return a pointer to the geometry bounding box in the form
        (xmin,xmax, ymin,ymax, zmin,zmax). THIS METHOD IS NOT THREAD
        SAFE.
        """
        ...
    
    def GetCell(self, p_int):
        """
        V.GetCell(int) -> vtkCell
        C++: virtual vtkCell *GetCell(vtkIdType cellId)
        V.GetCell(int, int, int) -> vtkCell
        C++: virtual vtkCell *GetCell(int i, int j, int k)
        V.GetCell(int, vtkGenericCell)
        C++: virtual void GetCell(vtkIdType cellId, vtkGenericCell *cell)
        
        Get cell with cellId such that: 0 <= cellId < NumberOfCells. THIS
        METHOD IS NOT THREAD SAFE.
        """
        ...
    
    def GetCellBounds(self, p_int, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetCellBounds(int, [float, float, float, float, float, float])
        C++: virtual void GetCellBounds(vtkIdType cellId,
            double bounds[6])
        
        Get the bounds of the cell with cellId such that: 0 <= cellId <
        NumberOfCells. A subclass may be able to determine the bounds of
        cell without using an expensive GetCell() method. A default
        implementation is provided that actually uses a GetCell() call. 
        This is to ensure the method is available to all datasets. 
        Subclasses should override this method to provide an efficient
        implementation. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A
        SINGLE THREAD AND THE DATASET IS NOT MODIFIED
        """
        ...
    
    def GetCellData(self):
        """
        V.GetCellData() -> vtkCellData
        C++: vtkCellData *GetCellData()
        
        Return a pointer to this dataset's cell data. THIS METHOD IS
        THREAD SAFE
        """
        ...
    
    def GetCellGhostArray(self):
        """
        V.GetCellGhostArray() -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *GetCellGhostArray()
        
        Get the array that defines the ghost type of each cell. We cache
        the pointer to the array to save a lookup involving string
        comparisons
        """
        ...
    
    def GetCellNeighbors(self, p_int, vtkIdList, vtkIdList_1):
        """
        V.GetCellNeighbors(int, vtkIdList, vtkIdList)
        C++: virtual void GetCellNeighbors(vtkIdType cellId,
            vtkIdList *ptIds, vtkIdList *cellIds)
        
        Topological inquiry to get all cells using list of points
        exclusive of cell specified (e.g., cellId). Note that the list
        consists of only cells that use ALL the points provided. THIS
        METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND
        THE DATASET IS NOT MODIFIED
        """
        ...
    
    def GetCellPoints(self, p_int, vtkIdList):
        """
        V.GetCellPoints(int, vtkIdList)
        C++: virtual void GetCellPoints(vtkIdType cellId,
            vtkIdList *ptIds)
        
        Topological inquiry to get points defining cell. THIS METHOD IS
        THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET
        IS NOT MODIFIED
        """
        ...
    
    def GetCellType(self, p_int):
        """
        V.GetCellType(int) -> int
        C++: virtual int GetCellType(vtkIdType cellId)
        
        Get type of cell with cellId such that: 0 <= cellId <
        NumberOfCells. THIS METHOD IS THREAD SAFE IF FIRST CALLED FROM A
        SINGLE THREAD AND THE DATASET IS NOT MODIFIED
        """
        ...
    
    def GetCellTypes(self, vtkCellTypes):
        """
        V.GetCellTypes(vtkCellTypes)
        C++: virtual void GetCellTypes(vtkCellTypes *types)
        
        Get a list of types of cells in a dataset. The list consists of
        an array of types (not necessarily in any order), with a single
        entry per type. For example a dataset 5 triangles, 3 lines, and
        100 hexahedra would result a list of three entries, corresponding
        to the types VTK_TRIANGLE, VTK_LINE, and VTK_HEXAHEDRON. THIS
        METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND
        THE DATASET IS NOT MODIFIED
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: double *GetCenter()
        V.GetCenter([float, float, float])
        C++: void GetCenter(double center[3])
        
        Get the center of the bounding box. THIS METHOD IS NOT THREAD
        SAFE.
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkDataSet
        C++: static vtkDataSet *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkDataSet
        C++: static vtkDataSet *GetData(vtkInformationVector *v, int i=0)
        
        Retrieve an instance of this class from an information object.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return the type of data object.
        """
        ...
    
    def GetLength(self):
        """
        V.GetLength() -> float
        C++: double GetLength()
        
        Return the length of the diagonal of the bounding box. THIS
        METHOD IS THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND
        THE DATASET IS NOT MODIFIED
        """
        ...
    
    def GetMaxCellSize(self):
        """
        V.GetMaxCellSize() -> int
        C++: virtual int GetMaxCellSize()
        
        Convenience method returns largest cell size in dataset. This is
        generally used to allocate memory for supporting data structures.
        THIS METHOD IS THREAD SAFE
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Datasets are composite objects and need to check each part for
        MTime THIS METHOD IS THREAD SAFE
        """
        ...
    
    def GetNumberOfCells(self):
        """
        V.GetNumberOfCells() -> int
        C++: virtual vtkIdType GetNumberOfCells()
        
        Determine the number of cells composing the dataset. THIS METHOD
        IS THREAD SAFE
        """
        ...
    
    def GetNumberOfElements(self, p_int):
        """
        V.GetNumberOfElements(int) -> int
        C++: vtkIdType GetNumberOfElements(int type) override;
        
        Get the number of elements for a specific attribute type (POINT,
        CELL, etc.).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: virtual vtkIdType GetNumberOfPoints()
        
        Determine the number of points composing the dataset. THIS METHOD
        IS THREAD SAFE
        """
        ...
    
    def GetPoint(self, p_int):
        """
        V.GetPoint(int) -> (float, float, float)
        C++: virtual double *GetPoint(vtkIdType ptId)
        V.GetPoint(int, [float, float, float])
        C++: virtual void GetPoint(vtkIdType id, double x[3])
        
        Get point coordinates with ptId such that: 0 <= ptId <
        NumberOfPoints. THIS METHOD IS NOT THREAD SAFE.
        """
        ...
    
    def GetPointCells(self, p_int, vtkIdList):
        """
        V.GetPointCells(int, vtkIdList)
        C++: virtual void GetPointCells(vtkIdType ptId,
            vtkIdList *cellIds)
        
        Topological inquiry to get cells using point. THIS METHOD IS
        THREAD SAFE IF FIRST CALLED FROM A SINGLE THREAD AND THE DATASET
        IS NOT MODIFIED
        """
        ...
    
    def GetPointData(self):
        """
        V.GetPointData() -> vtkPointData
        C++: vtkPointData *GetPointData()
        
        Return a pointer to this dataset's point data. THIS METHOD IS
        THREAD SAFE
        """
        ...
    
    def GetPointGhostArray(self):
        """
        V.GetPointGhostArray() -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *GetPointGhostArray()
        
        Gets the array that defines the ghost type of each point. We
        cache the pointer to the array to save a lookup involving string
        comparisons
        """
        ...
    
    def GetScalarRange(self, p_float=..., p_float=...):
        """
        V.GetScalarRange([float, float])
        C++: virtual void GetScalarRange(double range[2])
        V.GetScalarRange() -> (float, float)
        C++: double *GetScalarRange()
        
        Convenience method to get the range of the first component (and
        only the first component) of any scalars in the data set.  If the
        data has both point data and cell data, it returns the (min/max)
        range of combined point and cell data.  If there are no point or
        cell scalars the method will return (0,1).  Note: It might be
        necessary to call Update to create or refresh the scalars before
        calling this method. THIS METHOD IS THREAD SAFE IF FIRST CALLED
        FROM A SINGLE THREAD AND THE DATASET IS NOT MODIFIED
        """
        ...
    
    def HasAnyBlankCells(self):
        """
        V.HasAnyBlankCells() -> bool
        C++: virtual bool HasAnyBlankCells()
        
        Returns 1 if there are any blanking cells 0 otherwise. Blanking
        is supported only for vtkStructuredGrid and vtkUniformGrid
        """
        ...
    
    def HasAnyBlankPoints(self):
        """
        V.HasAnyBlankPoints() -> bool
        C++: virtual bool HasAnyBlankPoints()
        
        Returns 1 if there are any blanking points 0 otherwise. Blanking
        is supported only for vtkStructuredGrid and vtkUniformGrid
        """
        ...
    
    def HasAnyGhostCells(self):
        """
        V.HasAnyGhostCells() -> bool
        C++: bool HasAnyGhostCells()
        
        Returns 1 if there are any ghost cells 0 otherwise.
        """
        ...
    
    def HasAnyGhostPoints(self):
        """
        V.HasAnyGhostPoints() -> bool
        C++: bool HasAnyGhostPoints()
        
        Returns 1 if there are any ghost points 0 otherwise.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        Restore data object to initial state. THIS METHOD IS NOT THREAD
        SAFE.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewCellIterator(self):
        """
        V.NewCellIterator() -> vtkCellIterator
        C++: virtual vtkCellIterator *NewCellIterator()
        
        Return an iterator that traverses the cells in this data set.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataSet
        C++: vtkDataSet *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataSet
        C++: static vtkDataSet *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellOrderAndRationalWeights(self, p_int, vtkGenericCell):
        """
        V.SetCellOrderAndRationalWeights(int, vtkGenericCell)
        C++: void SetCellOrderAndRationalWeights(vtkIdType cellId,
            vtkGenericCell *cell)
        """
        ...
    
    def ShallowCopy(self, vtkDataObject):
        """
        V.ShallowCopy(vtkDataObject)
        C++: void ShallowCopy(vtkDataObject *src) override;
        
        Shallow and Deep copy.
        """
        ...
    
    def Squeeze(self):
        """
        V.Squeeze()
        C++: virtual void Squeeze()
        
        Reclaim any extra memory used to store data. THIS METHOD IS NOT
        THREAD SAFE.
        """
        ...
    
    def UpdateCellGhostArrayCache(self):
        """
        V.UpdateCellGhostArrayCache()
        C++: void UpdateCellGhostArrayCache()
        
        Updates the pointer to the cell ghost array.
        """
        ...
    
    def UpdatePointGhostArrayCache(self):
        """
        V.UpdatePointGhostArrayCache()
        C++: void UpdatePointGhostArrayCache()
        
        Updates the pointer to the point ghost array.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CELL_DATA_FIELD = ...
    DATA_OBJECT_FIELD = ...
    FieldDataType = ...
    POINT_DATA_FIELD = ...
    __dict__ = ...
    __vtkname__ = ...


