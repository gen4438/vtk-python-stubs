"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkTreeIterator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkTreeIterator - Abstract class for iterator over a vtkTree.
    
    Superclass: vtkObject
    
    The base class for tree iterators vtkTreeBFSIterator and
    vtkTreeDFSIterator.
    
    After setting up the iterator, the normal mode of operation is to set
    up a while(iter->HasNext())loop, with the statement vtkIdType vertex
    = iter->Next()inside the loop.
    
    @sa
    vtkTreeBFSIterator vtkTreeDFSIterator
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStartVertex(self):
        """
        V.GetStartVertex() -> int
        C++: virtual vtkIdType GetStartVertex()
        
        The start vertex of the traversal. The tree iterator will only
        iterate over the subtree rooted at vertex. If not set (or set to
        a negative value), starts at the root of the tree.
        """
        ...
    
    def GetTree(self):
        """
        V.GetTree() -> vtkTree
        C++: virtual vtkTree *GetTree()
        
        Set/get the graph to iterate over.
        """
        ...
    
    def HasNext(self):
        """
        V.HasNext() -> bool
        C++: bool HasNext()
        
        Return true when all vertices have been visited.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeIterator
        C++: vtkTreeIterator *NewInstance()
        """
        ...
    
    def Next(self):
        """
        V.Next() -> int
        C++: vtkIdType Next()
        
        The next vertex visited in the graph.
        """
        ...
    
    def Restart(self):
        """
        V.Restart()
        C++: void Restart()
        
        Reset the iterator to its start vertex.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeIterator
        C++: static vtkTreeIterator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetStartVertex(self, p_int):
        """
        V.SetStartVertex(int)
        C++: void SetStartVertex(vtkIdType vertex)
        
        The start vertex of the traversal. The tree iterator will only
        iterate over the subtree rooted at vertex. If not set (or set to
        a negative value), starts at the root of the tree.
        """
        ...
    
    def SetTree(self, vtkTree):
        """
        V.SetTree(vtkTree)
        C++: void SetTree(vtkTree *graph)
        
        Set/get the graph to iterate over.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


