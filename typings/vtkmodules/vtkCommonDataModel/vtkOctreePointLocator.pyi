"""
This type stub file was generated by pyright.
"""

from .vtkAbstractPointLocator import vtkAbstractPointLocator

class vtkOctreePointLocator(vtkAbstractPointLocator):
    """
    vtkOctreePointLocator - an octree spatial decomposition of a set of
    points
    
    Superclass: vtkAbstractPointLocator
    
    Given a vtkDataSet, create an octree that is locally refined such
    that all leaf octants contain less than a certain amount of points. 
    Note that there is no size constraint that a leaf octant in relation
    to any of its neighbors.
    
    This class can also generate a PolyData representation of the
    boundaries of the spatial regions in the decomposition.
    
    @sa
    vtkLocator vtkPointLocator vtkOctreePointLocatorNode
    """
    def BuildLocator(self):
        """
        V.BuildLocator()
        C++: void BuildLocator() override;
        
        Create the octree decomposition of the cells of the data set or
        data sets.  Cells are assigned to octree spatial regions based on
        the location of their centroids.
        """
        ...
    
    def FindClosestNPoints(self, p_int, , vtkIdList):
        """
        V.FindClosestNPoints(int, (float, float, float), vtkIdList)
        C++: void FindClosestNPoints(int N, const double x[3],
            vtkIdList *result) override;
        
        Find the closest N points to a position. This returns the closest
        N points to a position. A faster method could be created that
        returned N close points to a position, but not necessarily the
        exact N closest. The returned points are sorted from closest to
        farthest. These methods are thread safe if BuildLocator() is
        directly or indirectly called from a single thread first.
        """
        ...
    
    def FindClosestPoint(self, ):
        """
        V.FindClosestPoint((float, float, float)) -> int
        C++: vtkIdType FindClosestPoint(const double x[3]) override;
        V.FindClosestPoint(float, float, float, float) -> int
        C++: vtkIdType FindClosestPoint(double x, double y, double z,
            double &dist2)
        
        Return the Id of the point that is closest to the given point.
        Set the square of the distance between the two points.
        """
        ...
    
    def FindClosestPointInRegion(self, p_int, *float, **kwargs):
        """
        V.FindClosestPointInRegion(int, [float, ...], float) -> int
        C++: vtkIdType FindClosestPointInRegion(int regionId, double *x,
            double &dist2)
        V.FindClosestPointInRegion(int, float, float, float, float) -> int
        C++: vtkIdType FindClosestPointInRegion(int regionId, double x,
            double y, double z, double &dist2)
        
        Find the Id of the point in the given leaf region which is
        closest to the given point.  Return the ID of the point, and set
        the square of the distance of between the points.
        """
        ...
    
    def FindClosestPointWithinRadius(self, p_float, , p_float_4):
        """
        V.FindClosestPointWithinRadius(float, (float, float, float),
            float) -> int
        C++: vtkIdType FindClosestPointWithinRadius(double radius,
            const double x[3], double &dist2) override;
        
        Given a position x and a radius r, return the id of the point
        closest to the point in that radius. dist2 returns the squared
        distance to the point.
        """
        ...
    
    def FindPointsInArea(self, *float, **kwargs):
        """
        V.FindPointsInArea([float, ...], vtkIdTypeArray, bool)
        C++: void FindPointsInArea(double *area, vtkIdTypeArray *ids,
            bool clearArray=true)
        
        Fill ids with points found in area.  The area is a 6-tuple
        containing (xmin, xmax, ymin, ymax, zmin, zmax). This method will
        clear the array by default.  To append ids to an array, set
        clearArray to false.
        """
        ...
    
    def FindPointsWithinRadius(self, p_float, , vtkIdList):
        """
        V.FindPointsWithinRadius(float, (float, float, float), vtkIdList)
        C++: void FindPointsWithinRadius(double radius, const double x[3],
             vtkIdList *result) override;
        
        Find all points within a specified radius of position x. The
        result is not sorted in any specific manner.
        """
        ...
    
    def FreeSearchStructure(self):
        """
        V.FreeSearchStructure()
        C++: void FreeSearchStructure() override;
        
        Delete the octree data structure.
        """
        ...
    
    def GenerateRepresentation(self, p_int, vtkPolyData):
        """
        V.GenerateRepresentation(int, vtkPolyData)
        C++: void GenerateRepresentation(int level, vtkPolyData *pd)
            override;
        
        Create a polydata representation of the boundaries of the octree
        regions.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, ...)
        C++: double *GetBounds() override;
        V.GetBounds([float, ...])
        C++: void GetBounds(double *bounds) override;
        
        Get the spatial bounds of the entire octree space. Sets bounds
        array to xmin, xmax, ymin, ymax, zmin, zmax.
        """
        ...
    
    def GetCreateCubicOctants(self):
        """
        V.GetCreateCubicOctants() -> int
        C++: virtual int GetCreateCubicOctants()
        
        Get/Set macro for CreateCubicOctants.
        """
        ...
    
    def GetFudgeFactor(self):
        """
        V.GetFudgeFactor() -> float
        C++: virtual double GetFudgeFactor()
        
        Some algorithms on octrees require a value that is a very small
        distance relative to the diameter of the entire space divided by
        the octree.  This factor is the maximum axis-aligned width of the
        space multiplied by 10e-6.
        """
        ...
    
    def GetMaximumPointsPerRegion(self):
        """
        V.GetMaximumPointsPerRegion() -> int
        C++: virtual int GetMaximumPointsPerRegion()
        
        Maximum number of points per spatial region.  Default is 100.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard type and print methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def GetNumberOfLeafNodes(self):
        """
        V.GetNumberOfLeafNodes() -> int
        C++: virtual int GetNumberOfLeafNodes()
        
        The number of leaf nodes of the tree, the spatial regions
        """
        ...
    
    def GetPointsInRegion(self, p_int):
        """
        V.GetPointsInRegion(int) -> vtkIdTypeArray
        C++: vtkIdTypeArray *GetPointsInRegion(int leafNodeId)
        
        Get a list of the original IDs of all points in a leaf node.
        """
        ...
    
    def GetRegionBounds(self, p_int, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetRegionBounds(int, [float, float, float, float, float, float])
        C++: void GetRegionBounds(int regionID, double bounds[6])
        
        Get the spatial bounds of octree region
        """
        ...
    
    def GetRegionContainingPoint(self, p_float, p_float_1, p_float_2):
        """
        V.GetRegionContainingPoint(float, float, float) -> int
        C++: int GetRegionContainingPoint(double x, double y, double z)
        
        Get the id of the leaf region containing the specified location.
        """
        ...
    
    def GetRegionDataBounds(self, p_int, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetRegionDataBounds(int, [float, float, float, float, float,
            float])
        C++: void GetRegionDataBounds(int leafNodeID, double bounds[6])
        
        Get the bounds of the data within the leaf node
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard type and print methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOctreePointLocator
        C++: vtkOctreePointLocator *NewInstance()
        
        Standard type and print methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOctreePointLocator
        C++: static vtkOctreePointLocator *SafeDownCast(vtkObjectBase *o)
        
        Standard type and print methods.
        """
        ...
    
    def SetCreateCubicOctants(self, p_int):
        """
        V.SetCreateCubicOctants(int)
        C++: virtual void SetCreateCubicOctants(int _arg)
        
        Get/Set macro for CreateCubicOctants.
        """
        ...
    
    def SetFudgeFactor(self, p_float):
        """
        V.SetFudgeFactor(float)
        C++: virtual void SetFudgeFactor(double _arg)
        
        Some algorithms on octrees require a value that is a very small
        distance relative to the diameter of the entire space divided by
        the octree.  This factor is the maximum axis-aligned width of the
        space multiplied by 10e-6.
        """
        ...
    
    def SetMaximumPointsPerRegion(self, p_int):
        """
        V.SetMaximumPointsPerRegion(int)
        C++: virtual void SetMaximumPointsPerRegion(int _arg)
        
        Maximum number of points per spatial region.  Default is 100.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


