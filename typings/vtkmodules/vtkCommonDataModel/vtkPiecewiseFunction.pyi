"""
This type stub file was generated by pyright.
"""

from .vtkDataObject import vtkDataObject

class vtkPiecewiseFunction(vtkDataObject):
    """
    vtkPiecewiseFunction - Defines a 1D piecewise function.
    
    Superclass: vtkDataObject
    
    Defines a piecewise function mapping. This mapping allows the
    addition of control points, and allows the user to control the
    function between the control points. A piecewise hermite curve is
    used between control points, based on the sharpness and midpoint
    parameters. A sharpness of 0 yields a piecewise linear function and a
    sharpness of 1 yields a piecewise constant function. The midpoint is
    the normalized distance between control points at which the curve
    reaches the median Y value. The midpoint and sharpness values
    specified when adding a node are used to control the transition to
    the next node (the last node's values are ignored) Outside the range
    of nodes, the values are 0 if Clamping is off, or the nearest node
    point if Clamping is on. Using the legacy methods for adding points 
    (which do not have Sharpness and Midpoint parameters) will default to
    Midpoint = 0.5 (halfway between the control points) and Sharpness =
    0.0 (linear).
    """
    def AddPoint(self, p_float, p_float_1):
        """
        V.AddPoint(float, float) -> int
        C++: int AddPoint(double x, double y)
        V.AddPoint(float, float, float, float) -> int
        C++: int AddPoint(double x, double y, double midpoint,
            double sharpness)
        
        Add/Remove points to/from the function. If a duplicate point is
        added then the function value is changed at that location. Return
        the index of the point (0 based), or -1 on error.
        """
        ...
    
    def AddSegment(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.AddSegment(float, float, float, float)
        C++: void AddSegment(double x1, double y1, double x2, double y2)
        
        Add a line segment to the function. All points defined between
        the two points specified are removed from the function. This is a
        legacy method that does not allow the specification of the
        sharpness and midpoint values for the two nodes.
        """
        ...
    
    def AdjustRange(self, p_float=..., p_float=...):
        """
        V.AdjustRange([float, float]) -> int
        C++: int AdjustRange(double range[2])
        
        Remove all points out of the new range, and make sure there is a
        point at each end of that range. Return 1 on success, 0
        otherwise.
        """
        ...
    
    def AllowDuplicateScalarsOff(self):
        """
        V.AllowDuplicateScalarsOff()
        C++: virtual void AllowDuplicateScalarsOff()
        
        Toggle whether to allow duplicate scalar values in the piecewise
        function (off by default).
        """
        ...
    
    def AllowDuplicateScalarsOn(self):
        """
        V.AllowDuplicateScalarsOn()
        C++: virtual void AllowDuplicateScalarsOn()
        
        Toggle whether to allow duplicate scalar values in the piecewise
        function (off by default).
        """
        ...
    
    def BuildFunctionFromTable(self, p_float, p_float_1, p_int, *float, **kwargs):
        """
        V.BuildFunctionFromTable(float, float, int, [float, ...], int)
        C++: void BuildFunctionFromTable(double x1, double x2, int size,
            double *table, int stride=1)
        
        Constructs a piecewise function from a table.  Function range is
        is set to [x1, x2], function size is set to size, and function
        points are regularly spaced between x1 and x2.  Parameter
        "stride" is is step through the input table.
        """
        ...
    
    def ClampingOff(self):
        """
        V.ClampingOff()
        C++: virtual void ClampingOff()
        
        When zero range clamping is Off, GetValue() returns 0.0 when a
        value is requested outside of the points specified. When zero
        range clamping is On, GetValue() returns the value at the value
        at the lowest point for a request below all points specified and
        returns the value at the highest point for a request above all
        points specified. On is the default.
        """
        ...
    
    def ClampingOn(self):
        """
        V.ClampingOn()
        C++: virtual void ClampingOn()
        
        When zero range clamping is Off, GetValue() returns 0.0 when a
        value is requested outside of the points specified. When zero
        range clamping is On, GetValue() returns the value at the value
        at the lowest point for a request below all points specified and
        returns the value at the highest point for a request above all
        points specified. On is the default.
        """
        ...
    
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *f) override;
        
        Shallow and Deep copy.  These copy the data, but not any of the
        pipeline connections.
        """
        ...
    
    def EstimateMinNumberOfSamples(self, p_float, p_float_1):
        """
        V.EstimateMinNumberOfSamples(float, float) -> int
        C++: int EstimateMinNumberOfSamples(double const &x1,
            double const &x2)
        
        Estimates the minimum size of a table such that it would
        correctly sample this function. The returned value should be
        passed as parameter 'n' when calling GetTable().
        """
        ...
    
    def FillFromDataPointer(self, p_int, *float):
        """
        V.FillFromDataPointer(int, [float, ...])
        C++: void FillFromDataPointer(int, double *)
        
        Returns a pointer to the data stored in the table. Fills from a
        pointer to data stored in a similar table. These are legacy
        methods which will be maintained for compatibility - however,
        note that the vtkPiecewiseFunction no longer stores the nodes in
        a double array internally.
        """
        ...
    
    def GetAllowDuplicateScalars(self):
        """
        V.GetAllowDuplicateScalars() -> int
        C++: virtual vtkTypeBool GetAllowDuplicateScalars()
        
        Toggle whether to allow duplicate scalar values in the piecewise
        function (off by default).
        """
        ...
    
    def GetClamping(self):
        """
        V.GetClamping() -> int
        C++: virtual vtkTypeBool GetClamping()
        
        When zero range clamping is Off, GetValue() returns 0.0 when a
        value is requested outside of the points specified. When zero
        range clamping is On, GetValue() returns the value at the value
        at the lowest point for a request below all points specified and
        returns the value at the highest point for a request above all
        points specified. On is the default.
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkPiecewiseFunction
        C++: static vtkPiecewiseFunction *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkPiecewiseFunction
        C++: static vtkPiecewiseFunction *GetData(vtkInformationVector *v,
             int i=0)
        
        Retrieve an instance of this class from an information object.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return what type of dataset this is.
        """
        ...
    
    def GetDataPointer(self):
        """
        V.GetDataPointer() -> (float, ...)
        C++: double *GetDataPointer()
        
        Returns a pointer to the data stored in the table. Fills from a
        pointer to data stored in a similar table. These are legacy
        methods which will be maintained for compatibility - however,
        note that the vtkPiecewiseFunction no longer stores the nodes in
        a double array internally.
        """
        ...
    
    def GetFirstNonZeroValue(self):
        """
        V.GetFirstNonZeroValue() -> float
        C++: double GetFirstNonZeroValue()
        
        Returns the first point location which precedes a non-zero
        segment of the function. Note that the value at this point may be
        zero.
        """
        ...
    
    def GetNodeValue(self, p_int, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetNodeValue(int, [float, float, float, float]) -> int
        C++: int GetNodeValue(int index, double val[4])
        
        For the node specified by index, set/get the location (X), value
        (Y), midpoint, and sharpness values at the node. Returns -1 if
        the index is out of range, returns 1 otherwise.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRange(self):
        """
        V.GetRange() -> (float, float)
        C++: virtual double *GetRange()
        
        Returns the min and max node locations of the function.
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> int
        C++: int GetSize()
        
        Get the number of points used to specify the function
        """
        ...
    
    def GetTable(self, p_float, p_float_1, p_int, *float, **kwargs):
        """
        V.GetTable(float, float, int, [float, ...], int, int)
        C++: void GetTable(double x1, double x2, int size, double *table,
            int stride=1, int logIncrements=0)
        
        Fills in an array of function values evaluated at regular
        intervals. Parameter "stride" is used to step through the output
        "table". If logIncrements is true, the intervals between entries
        will be constant in logarithmic space.
        """
        ...
    
    def GetType(self):
        """
        V.GetType() -> string
        C++: const char *GetType()
        
        Return the type of function: Function Types: 0 : Constant       
        (No change in slope between end points) 1 : NonDecreasing  
        (Always increasing or zero slope) 2 : NonIncreasing   (Always
        decreasing or zero slope) 3 : Varied          (Contains both
        decreasing and increasing slopes)
        """
        ...
    
    def GetUseLogScale(self):
        """
        V.GetUseLogScale() -> bool
        C++: virtual bool GetUseLogScale()
        """
        ...
    
    def GetValue(self, p_float):
        """
        V.GetValue(float) -> float
        C++: double GetValue(double x)
        
        Returns the value of the function at the specified location using
        the specified interpolation.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        Clears out the current function. A newly created
        vtkPiecewiseFunction is already initialized, so there is no need
        to call this method which in turn simply calls RemoveAllPoints()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPiecewiseFunction
        C++: vtkPiecewiseFunction *NewInstance()
        """
        ...
    
    def RemoveAllPoints(self):
        """
        V.RemoveAllPoints()
        C++: void RemoveAllPoints()
        
        Removes all points from the function.
        """
        ...
    
    def RemovePoint(self, p_float):
        """
        V.RemovePoint(float) -> int
        C++: int RemovePoint(double x)
        
        Add/Remove points to/from the function. If a duplicate point is
        added then the function value is changed at that location. Return
        the index of the point (0 based), or -1 on error.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPiecewiseFunction
        C++: static vtkPiecewiseFunction *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllowDuplicateScalars(self, p_int):
        """
        V.SetAllowDuplicateScalars(int)
        C++: virtual void SetAllowDuplicateScalars(vtkTypeBool _arg)
        
        Toggle whether to allow duplicate scalar values in the piecewise
        function (off by default).
        """
        ...
    
    def SetClamping(self, p_int):
        """
        V.SetClamping(int)
        C++: virtual void SetClamping(vtkTypeBool _arg)
        
        When zero range clamping is Off, GetValue() returns 0.0 when a
        value is requested outside of the points specified. When zero
        range clamping is On, GetValue() returns the value at the value
        at the lowest point for a request below all points specified and
        returns the value at the highest point for a request above all
        points specified. On is the default.
        """
        ...
    
    def SetNodeValue(self, p_int, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.SetNodeValue(int, [float, float, float, float]) -> int
        C++: int SetNodeValue(int index, double val[4])
        
        For the node specified by index, set/get the location (X), value
        (Y), midpoint, and sharpness values at the node. Returns -1 if
        the index is out of range, returns 1 otherwise.
        """
        ...
    
    def SetUseLogScale(self, bool):
        """
        V.SetUseLogScale(bool)
        C++: virtual void SetUseLogScale(bool _arg)
        """
        ...
    
    def ShallowCopy(self, vtkDataObject):
        """
        V.ShallowCopy(vtkDataObject)
        C++: void ShallowCopy(vtkDataObject *f) override;
        
        Shallow and Deep copy.  These copy the data, but not any of the
        pipeline connections.
        """
        ...
    
    def UseLogScaleOff(self):
        """
        V.UseLogScaleOff()
        C++: virtual void UseLogScaleOff()
        """
        ...
    
    def UseLogScaleOn(self):
        """
        V.UseLogScaleOn()
        C++: virtual void UseLogScaleOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


