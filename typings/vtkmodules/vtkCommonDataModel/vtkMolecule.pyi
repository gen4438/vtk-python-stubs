"""
This type stub file was generated by pyright.
"""

from .vtkUndirectedGraph import vtkUndirectedGraph

class vtkMolecule(vtkUndirectedGraph):
    """
    vtkMolecule - class describing a molecule
    
    Superclass: vtkUndirectedGraph
    
    vtkMolecule and the convenience classes vtkAtom and vtkBond describe
    the geometry and connectivity of a molecule. The molecule can be
    constructed using the AppendAtom() and AppendBond() methods in one of
    two ways; either by fully specifying the atom/bond in a single call,
    or by incrementally setting the various attributes using the
    convenience vtkAtom and vtkBond classes:
    
    Single call:vtkMolecule *mol = vtkMolecule::New();
    vtkAtom h1 = mol->AppendAtom(1, 0.0, 0.0, -0.5);
    vtkAtom h2 = mol->AppendAtom(1, 0.0, 0.0,  0.5);
    vtkBond b  = mol->AppendBond(h1, h2, 1);
    
    Incremental:vtkMolecule *mol = vtkMolecule::New();
    
    vtkAtom h1 = mol->AppendAtom(); h1.SetAtomicNumber(1);
    h1.SetPosition(0.0, 0.0, -0.5);
    
    vtkAtom h2 = mol->AppendAtom(); h2.SetAtomicNumber(1); vtkVector3d
    displacement (0.0, 0.0, 1.0);
    h2.SetPosition(h1.GetPositionAsVector3d() + displacement);
    
    vtkBond b  = mol->AppendBond(h1, h2, 1);
    
    Both of the above methods will produce the same molecule, two
    hydrogens connected with a 1.0 Angstrom single bond, aligned to the
    z-axis. The second example also demonstrates the use of VTK's
    vtkVector class, which is fully supported by the Chemistry kit.
    
    The vtkMolecule object is intended to be used with the
    vtkMoleculeMapper class for visualizing molecular structure using
    common rendering techniques.
    
    \warning While direct use of the underlying vtkUndirectedGraph
    structure is possible due to vtkMolecule's public inheritance, this
    should not be relied upon and may change in the future.
    
    @sa
    vtkAtom vtkBond vtkMoleculeMapper vtkPeriodicTable
    """
    def AllocateAtomGhostArray(self):
        """
        V.AllocateAtomGhostArray()
        C++: void AllocateAtomGhostArray()
        
        Allocate ghost array for atoms.
        """
        ...
    
    def AllocateBondGhostArray(self):
        """
        V.AllocateBondGhostArray()
        C++: void AllocateBondGhostArray()
        
        Allocate ghost array for bonds.
        """
        ...
    
    def AppendAtom(self):
        """
        V.AppendAtom() -> vtkAtom
        C++: vtkAtom AppendAtom()
        V.AppendAtom(int, float, float, float) -> vtkAtom
        C++: vtkAtom AppendAtom(unsigned short atomicNumber, double x,
            double y, double z)
        V.AppendAtom(int, vtkVector3f) -> vtkAtom
        C++: vtkAtom AppendAtom(unsigned short atomicNumber,
            const vtkVector3f &pos)
        V.AppendAtom(int, [float, float, float]) -> vtkAtom
        C++: vtkAtom AppendAtom(unsigned short atomicNumber,
            double pos[3])
        
        Add new atom with atomic number 0 (dummy atom) at origin. Return
        a vtkAtom that refers to the new atom.
        """
        ...
    
    def AppendBond(self, p_int, p_int_1, p_int_2):
        """
        V.AppendBond(int, int, int) -> vtkBond
        C++: vtkBond AppendBond(vtkIdType atom1, vtkIdType atom2,
            unsigned short order=1)
        V.AppendBond(vtkAtom, vtkAtom, int) -> vtkBond
        C++: vtkBond AppendBond(const vtkAtom &atom1,
            const vtkAtom &atom2, unsigned short order=1)
        
        Add a bond between the specified atoms, optionally setting the
        bond order (default: 1). Return a vtkBond object referring to the
        new bond.
        """
        ...
    
    def CheckedDeepCopy(self, vtkGraph):
        """
        V.CheckedDeepCopy(vtkGraph) -> bool
        C++: bool CheckedDeepCopy(vtkGraph *g) override;
        
        Performs the same operation as DeepCopy(), but instead of
        reporting an error for an incompatible graph, returns false.
        """
        ...
    
    def CheckedShallowCopy(self, vtkGraph):
        """
        V.CheckedShallowCopy(vtkGraph) -> bool
        C++: bool CheckedShallowCopy(vtkGraph *g) override;
        
        Performs the same operation as ShallowCopy(), but instead of
        reporting an error for an incompatible graph, returns false.
        """
        ...
    
    def ClearLattice(self):
        """
        V.ClearLattice()
        C++: void ClearLattice()
        
        Remove any unit cell lattice information from the molecule.
        """
        ...
    
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *obj) override;
        
        Deep copies the data object into this molecule.
        """
        ...
    
    def DeepCopyAttributes(self, vtkMolecule):
        """
        V.DeepCopyAttributes(vtkMolecule)
        C++: virtual void DeepCopyAttributes(vtkMolecule *m)
        
        Deep copies attributes (i.e. everything besides atoms and bonds)
        fromm into this.
        """
        ...
    
    def DeepCopyStructure(self, vtkMolecule):
        """
        V.DeepCopyStructure(vtkMolecule)
        C++: virtual void DeepCopyStructure(vtkMolecule *m)
        
        Deep copies the atoms and bonds from m into this.
        """
        ...
    
    def GetActualMemorySize(self):
        """
        V.GetActualMemorySize() -> int
        C++: unsigned long GetActualMemorySize() override;
        
        Return the actual size of the data in kibibytes (1024 bytes).
        This number is valid only after the pipeline has updated. The
        memory size returned is guaranteed to be greater than or equal to
        the memory required to represent the data (e.g., extra space in
        arrays, etc. are not included in the return value).
        """
        ...
    
    def GetAtom(self, p_int):
        """
        V.GetAtom(int) -> vtkAtom
        C++: vtkAtom GetAtom(vtkIdType atomId)
        
        Return a vtkAtom that refers to the atom with the specified id.
        """
        ...
    
    def GetAtomAtomicNumber(self, p_int):
        """
        V.GetAtomAtomicNumber(int) -> int
        C++: unsigned short GetAtomAtomicNumber(vtkIdType atomId)
        
        Return the atomic number of the atom with the specified id.
        """
        ...
    
    def GetAtomData(self):
        """
        V.GetAtomData() -> vtkDataSetAttributes
        C++: vtkDataSetAttributes *GetAtomData()
        
        Return the VertexData of the underlying graph
        """
        ...
    
    def GetAtomGhostArray(self):
        """
        V.GetAtomGhostArray() -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *GetAtomGhostArray()
        
        Get the array that defines the ghost type of each atom.
        """
        ...
    
    def GetAtomicNumberArray(self):
        """
        V.GetAtomicNumberArray() -> vtkUnsignedShortArray
        C++: vtkUnsignedShortArray *GetAtomicNumberArray()
        
        Access the raw arrays used in this vtkMolecule instance
        """
        ...
    
    def GetAtomicNumberArrayName(self):
        """
        V.GetAtomicNumberArrayName() -> string
        C++: virtual char *GetAtomicNumberArrayName()
        
        Get/Set the atomic number array name.
        """
        ...
    
    def GetAtomicPositionArray(self):
        """
        V.GetAtomicPositionArray() -> vtkPoints
        C++: vtkPoints *GetAtomicPositionArray()
        
        Access the raw arrays used in this vtkMolecule instance
        """
        ...
    
    def GetAtomPosition(self, p_int):
        """
        V.GetAtomPosition(int) -> vtkVector3f
        C++: vtkVector3f GetAtomPosition(vtkIdType atomId)
        V.GetAtomPosition(int, [float, float, float])
        C++: void GetAtomPosition(vtkIdType atomId, double pos[3])
        
        Get the position of the atom with the specified id.
        """
        ...
    
    def GetBond(self, p_int):
        """
        V.GetBond(int) -> vtkBond
        C++: vtkBond GetBond(vtkIdType bondId)
        
        Return a vtkAtom that refers to the bond with the specified id.
        """
        ...
    
    def GetBondData(self):
        """
        V.GetBondData() -> vtkDataSetAttributes
        C++: vtkDataSetAttributes *GetBondData()
        
        Return the EdgeData of the underlying graph
        """
        ...
    
    def GetBondGhostArray(self):
        """
        V.GetBondGhostArray() -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *GetBondGhostArray()
        
        Get the array that defines the ghost type of each bond.
        """
        ...
    
    def GetBondId(self, p_int, p_int_1):
        """
        V.GetBondId(int, int) -> int
        C++: vtkIdType GetBondId(vtkIdType a, vtkIdType b)
        
        Return the edge id from the underlying graph.
        """
        ...
    
    def GetBondLength(self, p_int):
        """
        V.GetBondLength(int) -> float
        C++: double GetBondLength(vtkIdType bondId)
        
        Get the bond length of the bond with the specified id
        
        *
        
        ote If the associated vtkBond object is already available,
        * vtkBond::GetBondLength is potentially much faster than this
        * function, as a list of all bonds may need to be constructed to
        * locate the appropriate bond.
        * \sa UpdateBondList()
        """
        ...
    
    def GetBondOrder(self, p_int):
        """
        V.GetBondOrder(int) -> int
        C++: unsigned short GetBondOrder(vtkIdType bondId)
        
        Get/Set the bond order of the bond with the specified id
        """
        ...
    
    def GetBondOrdersArray(self):
        """
        V.GetBondOrdersArray() -> vtkUnsignedShortArray
        C++: vtkUnsignedShortArray *GetBondOrdersArray()
        
        Access the raw arrays used in this vtkMolecule instance
        """
        ...
    
    def GetBondOrdersArrayName(self):
        """
        V.GetBondOrdersArrayName() -> string
        C++: virtual char *GetBondOrdersArrayName()
        
        Get/Set the bond orders array name.
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkMolecule
        C++: static vtkMolecule *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkMolecule
        C++: static vtkMolecule *GetData(vtkInformationVector *v, int i=0)
        
        Retrieve a molecule from an information vector.
        """
        ...
    
    def GetDataObjectType(self):
        """
        V.GetDataObjectType() -> int
        C++: int GetDataObjectType() override;
        
        Return what type of dataset this is.
        """
        ...
    
    def GetElectronicData(self):
        """
        V.GetElectronicData() -> vtkAbstractElectronicData
        C++: virtual vtkAbstractElectronicData *GetElectronicData()
        
        Set/Get the AbstractElectronicData-subclassed object for this
        molecule.
        """
        ...
    
    def GetLattice(self):
        """
        V.GetLattice() -> vtkMatrix3x3
        C++: vtkMatrix3x3 *GetLattice()
        V.GetLattice(vtkVector3d, vtkVector3d, vtkVector3d)
        C++: void GetLattice(vtkVector3d &a, vtkVector3d &b,
            vtkVector3d &c)
        V.GetLattice(vtkVector3d, vtkVector3d, vtkVector3d, vtkVector3d)
        C++: void GetLattice(vtkVector3d &a, vtkVector3d &b,
            vtkVector3d &c, vtkVector3d &origin)
        
        Get the unit cell lattice vectors. The matrix is stored using a
        row-major layout, with the vectors encoded as columns. Will
        return nullptr if no unit cell information is available.
        @sa GetLatticeOrigin
        """
        ...
    
    def GetLatticeOrigin(self):
        """
        V.GetLatticeOrigin() -> vtkVector3d
        C++: virtual vtkVector3d GetLatticeOrigin()
        
        Get the unit cell origin (for rendering purposes).
        """
        ...
    
    def GetNumberOfAtoms(self):
        """
        V.GetNumberOfAtoms() -> int
        C++: vtkIdType GetNumberOfAtoms()
        
        Return the number of atoms in the molecule.
        """
        ...
    
    def GetNumberOfBonds(self):
        """
        V.GetNumberOfBonds() -> int
        C++: vtkIdType GetNumberOfBonds()
        
        Return the number of bonds in the molecule.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlaneFromBond(self, vtkBond, vtkVector3f, vtkPlane):
        """
        V.GetPlaneFromBond(vtkBond, vtkVector3f, vtkPlane) -> bool
        C++: static bool GetPlaneFromBond(const vtkBond &bond,
            const vtkVector3f &normal, vtkPlane *plane)
        V.GetPlaneFromBond(vtkAtom, vtkAtom, vtkVector3f, vtkPlane)
            -> bool
        C++: static bool GetPlaneFromBond(const vtkAtom &atom1,
            const vtkAtom &atom2, const vtkVector3f &normal,
            vtkPlane *plane)
        
        Obtain the plane that passes through the indicated bond with the
        given normal. If the plane is set successfully, the function
        returns true.
        
        * If the normal is not orthogonal to the bond, a new normal will
          be
        * constructed in such a way that the plane will be orthogonal to
        * the plane spanned by the bond vector and the input normal
          vector.
        
        * This ensures that the plane passes through the bond, and the
        * normal is more of a "hint" indicating the orientation of the
          plane.
        
        * The new normal (n) is defined as the input normal vector (n_i)
          minus
        * the projection of itself (proj[n_i]_v) onto the bond vector
          (v):
        
        * 
         * v ^
         * |  n = (n_i - proj[n_j]_v)
         * proj[n_i]_v ^  |----x
         * |  |   /
         * |  |  / n_i
         * |  | /
         * |  |/
         * 
        
        * If n_i is parallel to v, a warning will be printed and no plane
        will be
        * added. Obviously, n_i must not be parallel to v.
        """
        ...
    
    def HasLattice(self):
        """
        V.HasLattice() -> bool
        C++: bool HasLattice()
        
        Return true if a unit cell lattice is defined.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        V.Initialize(vtkPoints, vtkDataArray, vtkDataSetAttributes) -> int
        C++: int Initialize(vtkPoints *atomPositions,
            vtkDataArray *atomicNumberArray,
            vtkDataSetAttributes *atomData)
        V.Initialize(vtkPoints, vtkDataSetAttributes) -> int
        C++: int Initialize(vtkPoints *atomPositions,
            vtkDataSetAttributes *atomData)
        V.Initialize(vtkMolecule) -> int
        C++: int Initialize(vtkMolecule *molecule)
        
        Initialize to an empty graph.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMolecule
        C++: vtkMolecule *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMolecule
        C++: static vtkMolecule *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAtomAtomicNumber(self, p_int, p_int_1):
        """
        V.SetAtomAtomicNumber(int, int)
        C++: void SetAtomAtomicNumber(vtkIdType atomId,
            unsigned short atomicNum)
        
        Set the atomic number of the atom with the specified id.
        """
        ...
    
    def SetAtomicNumberArrayName(self, string):
        """
        V.SetAtomicNumberArrayName(string)
        C++: virtual void SetAtomicNumberArrayName(const char *_arg)
        
        Get/Set the atomic number array name.
        """
        ...
    
    def SetAtomPosition(self, p_int, vtkVector3f):
        """
        V.SetAtomPosition(int, vtkVector3f)
        C++: void SetAtomPosition(vtkIdType atomId,
            const vtkVector3f &pos)
        V.SetAtomPosition(int, float, float, float)
        C++: void SetAtomPosition(vtkIdType atomId, double x, double y,
            double z)
        V.SetAtomPosition(int, [float, float, float])
        C++: void SetAtomPosition(vtkIdType atomId, double pos[3])
        
        Set the position of the atom with the specified id.
        """
        ...
    
    def SetBondOrder(self, p_int, p_int_1):
        """
        V.SetBondOrder(int, int)
        C++: void SetBondOrder(vtkIdType bondId, unsigned short order)
        
        Get/Set the bond order of the bond with the specified id
        """
        ...
    
    def SetBondOrdersArrayName(self, string):
        """
        V.SetBondOrdersArrayName(string)
        C++: virtual void SetBondOrdersArrayName(const char *_arg)
        
        Get/Set the bond orders array name.
        """
        ...
    
    def SetElectronicData(self, vtkAbstractElectronicData):
        """
        V.SetElectronicData(vtkAbstractElectronicData)
        C++: virtual void SetElectronicData(vtkAbstractElectronicData *)
        
        Set/Get the AbstractElectronicData-subclassed object for this
        molecule.
        """
        ...
    
    def SetLattice(self, vtkMatrix3x3):
        """
        V.SetLattice(vtkMatrix3x3)
        C++: void SetLattice(vtkMatrix3x3 *matrix)
        V.SetLattice(vtkVector3d, vtkVector3d, vtkVector3d)
        C++: void SetLattice(const vtkVector3d &a, const vtkVector3d &b,
            const vtkVector3d &c)
        
        The unit cell vectors. The matrix is stored using a row-major
        layout, with the vectors encoded as columns.
        """
        ...
    
    def SetLatticeOrigin(self, vtkVector3d):
        """
        V.SetLatticeOrigin(vtkVector3d)
        C++: virtual void SetLatticeOrigin(vtkVector3d _arg)
        
        Get the unit cell origin (for rendering purposes).
        """
        ...
    
    def ShallowCopy(self, vtkDataObject):
        """
        V.ShallowCopy(vtkDataObject)
        C++: void ShallowCopy(vtkDataObject *obj) override;
        
        Shallow copies the data object into this molecule.
        """
        ...
    
    def ShallowCopyAttributes(self, vtkMolecule):
        """
        V.ShallowCopyAttributes(vtkMolecule)
        C++: virtual void ShallowCopyAttributes(vtkMolecule *m)
        
        Shallow copies attributes (i.e. everything besides atoms and
        bonds) fromm into this.
        """
        ...
    
    def ShallowCopyStructure(self, vtkMolecule):
        """
        V.ShallowCopyStructure(vtkMolecule)
        C++: virtual void ShallowCopyStructure(vtkMolecule *m)
        
        Shallow copies the atoms and bonds from m into this.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


