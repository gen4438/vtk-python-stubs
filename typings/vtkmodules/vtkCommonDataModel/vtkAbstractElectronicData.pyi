"""
This type stub file was generated by pyright.
"""

from .vtkDataObject import vtkDataObject

class vtkAbstractElectronicData(vtkDataObject):
    """
    vtkAbstractElectronicData - Provides access to and storage of
    chemical electronic data
    
    Superclass: vtkDataObject
    """
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *obj) override;
        
        Deep copies the data object into this.
        """
        ...
    
    def GetElectronDensity(self):
        """
        V.GetElectronDensity() -> vtkImageData
        C++: virtual vtkImageData *GetElectronDensity()
        
        Returns vtkImageData for the molecule's electron density. The
        data will be calculated when first requested, and cached for
        later requests.
        """
        ...
    
    def GetHOMO(self):
        """
        V.GetHOMO() -> vtkImageData
        C++: vtkImageData *GetHOMO()
        
        Returns vtkImageData for the Highest Occupied Molecular Orbital.
        """
        ...
    
    def GetHOMOOrbitalNumber(self):
        """
        V.GetHOMOOrbitalNumber() -> int
        C++: vtkIdType GetHOMOOrbitalNumber()
        
        Returns the orbital number of the Highest Occupied Molecular
        Orbital.
        """
        ...
    
    def GetLUMO(self):
        """
        V.GetLUMO() -> vtkImageData
        C++: vtkImageData *GetLUMO()
        
        Returns vtkImageData for the Lowest Unoccupied Molecular Orbital.
        """
        ...
    
    def GetLUMOOrbitalNumber(self):
        """
        V.GetLUMOOrbitalNumber() -> int
        C++: vtkIdType GetLUMOOrbitalNumber()
        
        Returns the orbital number of the Lowest Unoccupied Molecular
        Orbital.
        """
        ...
    
    def GetMO(self, p_int):
        """
        V.GetMO(int) -> vtkImageData
        C++: virtual vtkImageData *GetMO(vtkIdType orbitalNumber)
        
        Returns the vtkImageData for the requested molecular orbital.
        """
        ...
    
    def GetNumberOfElectrons(self):
        """
        V.GetNumberOfElectrons() -> int
        C++: virtual vtkIdType GetNumberOfElectrons()
        
        Returns the number of electrons in the molecule.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfMOs(self):
        """
        V.GetNumberOfMOs() -> int
        C++: virtual vtkIdType GetNumberOfMOs()
        
        Returns the number of molecular orbitals available.
        """
        ...
    
    def GetPadding(self):
        """
        V.GetPadding() -> float
        C++: virtual double GetPadding()
        
        Get the padding between the molecule and the cube boundaries.
        This is used to determine the dataset's bounds.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsHOMO(self, p_int):
        """
        V.IsHOMO(int) -> bool
        C++: bool IsHOMO(vtkIdType orbitalNumber)
        
        Returns true if the given orbital number is the Highest Occupied
        Molecular Orbital, false otherwise.
        """
        ...
    
    def IsLUMO(self, p_int):
        """
        V.IsLUMO(int) -> bool
        C++: bool IsLUMO(vtkIdType orbitalNumber)
        
        Returns true if the given orbital number is the Lowest Unoccupied
        Molecular Orbital, false otherwise.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractElectronicData
        C++: vtkAbstractElectronicData *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractElectronicData
        C++: static vtkAbstractElectronicData *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


