"""
This type stub file was generated by pyright.
"""

from .vtkDataSet import vtkDataSet

class vtkPointSet(vtkDataSet):
    """
    vtkPointSet - abstract class for specifying dataset behavior
    
    Superclass: vtkDataSet
    
    vtkPointSet is an abstract class that specifies the interface for
    datasets that explicitly use "point" arrays to represent geometry.
    For example, vtkPolyData, vtkUnstructuredGrid, and vtkStructuredGrid
    require point arrays to specify point positions, while vtkImageData
    represents point positions implicitly (and hence is not a subclass of
    vtkImageData).
    
    Note: The vtkPolyData and vtkUnstructuredGrid datasets (derived
    classes of vtkPointSet) are often used in geometric computation
    (e.g., vtkDelaunay2D).  In most cases during filter execution the
    output geometry and/or topology is created once and provided as
    output; however in a very few cases the underlying geometry/topology
    may be created and then incrementally modified. This has implications
    on the use of supporting classes like locators and cell links
    topological structures which may be required to support incremental
    editing operations. Consequently, there is a flag, Editable, that
    controls whether the dataset can be incrementally edited after it is
    initially created. By default, and for performance reasons,
    vtkPointSet derived classes are created as non-editable.  The few
    methods that require incremental editing capabilities are documented
    in derived classes.
    
    Another important feature of vtkPointSet classes is the use of an
    internal locator to speed up certain operations like FindCell().
    Depending on the application and desired performance, different
    locators (either a cell or point locator) of different locator types
    may be used, along with different strategies for using the locators
    to perform various operations. See the class vtkFindCellStrategy for
    more information
    
    @sa
    vtkPolyData vtkStructuredGrid vtkUnstructuredGrid vtkFindCellStrategy
    """
    def BuildCellLocator(self):
        """
        V.BuildCellLocator()
        C++: void BuildCellLocator()
        
        Build the cell locator. In a multi-threaded environment, call
        this method in a single thread before using FindCell().
        """
        ...
    
    def BuildLocator(self):
        """
        V.BuildLocator()
        C++: void BuildLocator()
        
        Build the internal point locator . In a multi-threaded
        environment, call this method in a single thread before using
        FindCell() or FindPoint().
        """
        ...
    
    def BuildPointLocator(self):
        """
        V.BuildPointLocator()
        C++: void BuildPointLocator()
        
        Build the internal point locator . In a multi-threaded
        environment, call this method in a single thread before using
        FindCell() or FindPoint().
        """
        ...
    
    def ComputeBounds(self):
        """
        V.ComputeBounds()
        C++: void ComputeBounds() override;
        
        Compute the (X, Y, Z)  bounds of the data.
        """
        ...
    
    def CopyStructure(self, vtkDataSet):
        """
        V.CopyStructure(vtkDataSet)
        C++: void CopyStructure(vtkDataSet *pd) override;
        
        Copy the geometric structure of an input point set object.
        """
        ...
    
    def DeepCopy(self, vtkDataObject):
        """
        V.DeepCopy(vtkDataObject)
        C++: void DeepCopy(vtkDataObject *src) override;
        
        Shallow and Deep copy.
        """
        ...
    
    def EditableOff(self):
        """
        V.EditableOff()
        C++: virtual void EditableOff()
        
        Specify whether this dataset is editable after creation. Meaning,
        once the points and cells are defined, can the dataset be
        incrementally modified. By default, this dataset is non-editable
        (i.e., "static") after construction. The reason for this is
        performance: cell links and locators can be built (and destroyed)
        much faster is it is known that the data is static (see
        vtkStaticCellLinks, vtkStaticPointLocator, vtkStaticCellLocator).
        """
        ...
    
    def EditableOn(self):
        """
        V.EditableOn()
        C++: virtual void EditableOn()
        
        Specify whether this dataset is editable after creation. Meaning,
        once the points and cells are defined, can the dataset be
        incrementally modified. By default, this dataset is non-editable
        (i.e., "static") after construction. The reason for this is
        performance: cell links and locators can be built (and destroyed)
        much faster is it is known that the data is static (see
        vtkStaticCellLinks, vtkStaticPointLocator, vtkStaticCellLocator).
        """
        ...
    
    def FindCell(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindCell([float, float, float], vtkCell, int, float, int,
            [float, float, float], [float, ...]) -> int
        C++: vtkIdType FindCell(double x[3], vtkCell *cell,
            vtkIdType cellId, double tol2, int &subId, double pcoords[3],
            double *weights) override;
        V.FindCell([float, float, float], vtkCell, vtkGenericCell, int,
            float, int, [float, float, float], [float, ...]) -> int
        C++: vtkIdType FindCell(double x[3], vtkCell *cell,
            vtkGenericCell *gencell, vtkIdType cellId, double tol2,
            int &subId, double pcoords[3], double *weights) override;
        
        See vtkDataSet for additional information.
        """
        ...
    
    def FindPoint(self, p_float=..., p_float=..., p_float=...):
        """
        V.FindPoint([float, float, float]) -> int
        C++: vtkIdType FindPoint(double x[3]) override;
        V.FindPoint(float, float, float) -> int
        C++: vtkIdType FindPoint(double x, double y, double z)
        
        See vtkDataSet for additional information.
        """
        ...
    
    def GetActualMemorySize(self):
        """
        V.GetActualMemorySize() -> int
        C++: unsigned long GetActualMemorySize() override;
        
        Return the actual size of the data in kibibytes (1024 bytes).
        This number is valid only after the pipeline has updated. The
        memory size returned is guaranteed to be greater than or equal to
        the memory required to represent the data (e.g., extra space in
        arrays, etc. are not included in the return value). THIS METHOD
        IS THREAD SAFE.
        """
        ...
    
    def GetCellLocator(self):
        """
        V.GetCellLocator() -> vtkAbstractCellLocator
        C++: virtual vtkAbstractCellLocator *GetCellLocator()
        
        Set / get an instance of vtkAbstractCellLocator which may be used
        when a vtkCellLocatorStrategy is used during a FindCelloperation.
        """
        ...
    
    def GetData(self, vtkInformation):
        """
        V.GetData(vtkInformation) -> vtkPointSet
        C++: static vtkPointSet *GetData(vtkInformation *info)
        V.GetData(vtkInformationVector, int) -> vtkPointSet
        C++: static vtkPointSet *GetData(vtkInformationVector *v, int i=0)
        
        Retrieve an instance of this class from an information object.
        """
        ...
    
    def GetEditable(self):
        """
        V.GetEditable() -> bool
        C++: virtual bool GetEditable()
        
        Specify whether this dataset is editable after creation. Meaning,
        once the points and cells are defined, can the dataset be
        incrementally modified. By default, this dataset is non-editable
        (i.e., "static") after construction. The reason for this is
        performance: cell links and locators can be built (and destroyed)
        much faster is it is known that the data is static (see
        vtkStaticCellLinks, vtkStaticPointLocator, vtkStaticCellLocator).
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get MTime which also considers its vtkPoints MTime.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methdos for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: vtkIdType GetNumberOfPoints() override;
        
        See vtkDataSet for additional information.
        """
        ...
    
    def GetPoint(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint(int, [float, float, float])
        C++: void GetPoint(vtkIdType ptId, double x[3]) override;
        V.GetPoint(int) -> (float, float, float)
        C++: double *GetPoint(vtkIdType ptId) override;
        
        See vtkDataSet for additional information.
        """
        ...
    
    def GetPointLocator(self):
        """
        V.GetPointLocator() -> vtkAbstractPointLocator
        C++: virtual vtkAbstractPointLocator *GetPointLocator()
        
        Set / get an instance of vtkAbstractPointLocator which is used to
        support the FindPoint() and FindCell() methods. By default a
        vtkStaticPointLocator is used, unless the class is set as
        Editable, in which case a vtkPointLocator is used.
        """
        ...
    
    def GetPoints(self):
        """
        V.GetPoints() -> vtkPoints
        C++: virtual vtkPoints *GetPoints()
        
        Specify point array to define point coordinates.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        Reset to an empty state and free any memory.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methdos for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def NewCellIterator(self):
        """
        V.NewCellIterator() -> vtkCellIterator
        C++: vtkCellIterator *NewCellIterator() override;
        
        Return an iterator that traverses the cells in this data set.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointSet
        C++: vtkPointSet *NewInstance()
        
        Standard methdos for type information and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointSet
        C++: static vtkPointSet *SafeDownCast(vtkObjectBase *o)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def SetCellLocator(self, vtkAbstractCellLocator):
        """
        V.SetCellLocator(vtkAbstractCellLocator)
        C++: virtual void SetCellLocator(vtkAbstractCellLocator *)
        
        Set / get an instance of vtkAbstractCellLocator which may be used
        when a vtkCellLocatorStrategy is used during a FindCelloperation.
        """
        ...
    
    def SetEditable(self, bool):
        """
        V.SetEditable(bool)
        C++: virtual void SetEditable(bool _arg)
        
        Specify whether this dataset is editable after creation. Meaning,
        once the points and cells are defined, can the dataset be
        incrementally modified. By default, this dataset is non-editable
        (i.e., "static") after construction. The reason for this is
        performance: cell links and locators can be built (and destroyed)
        much faster is it is known that the data is static (see
        vtkStaticCellLinks, vtkStaticPointLocator, vtkStaticCellLocator).
        """
        ...
    
    def SetPointLocator(self, vtkAbstractPointLocator):
        """
        V.SetPointLocator(vtkAbstractPointLocator)
        C++: virtual void SetPointLocator(vtkAbstractPointLocator *)
        
        Set / get an instance of vtkAbstractPointLocator which is used to
        support the FindPoint() and FindCell() methods. By default a
        vtkStaticPointLocator is used, unless the class is set as
        Editable, in which case a vtkPointLocator is used.
        """
        ...
    
    def SetPoints(self, vtkPoints):
        """
        V.SetPoints(vtkPoints)
        C++: virtual void SetPoints(vtkPoints *)
        
        Specify point array to define point coordinates.
        """
        ...
    
    def ShallowCopy(self, vtkDataObject):
        """
        V.ShallowCopy(vtkDataObject)
        C++: void ShallowCopy(vtkDataObject *src) override;
        
        Shallow and Deep copy.
        """
        ...
    
    def Squeeze(self):
        """
        V.Squeeze()
        C++: void Squeeze() override;
        
        Reclaim any unused memory.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


