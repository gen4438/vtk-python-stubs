"""
This type stub file was generated by pyright.
"""

from .vtkImplicitFunction import vtkImplicitFunction

class vtkImplicitSelectionLoop(vtkImplicitFunction):
    """
    vtkImplicitSelectionLoop - implicit function for a selection loop
    
    Superclass: vtkImplicitFunction
    
    vtkImplicitSelectionLoop computes the implicit function value and
    function gradient for a irregular, cylinder-like object whose cross
    section is defined by a set of points forming a loop. The loop need
    not be convex nor its points coplanar. However, the loop must be
    non-self-intersecting when projected onto the plane defined by the
    accumulated cross product around the loop (i.e., the axis of the
    loop). (Alternatively, you can specify the normal to use.)
    
    The following procedure is used to compute the implicit function
    value for a point x. Each point of the loop is first projected onto
    the plane defined by the loop normal. This forms a polygon. Then, to
    evaluate the implicit function value, inside/outside tests are used
    to determine if x is inside the polygon, and the distance to the loop
    boundary is computed (negative values are inside the loop).
    
    One example application of this implicit function class is to draw a
    loop on the surface of a mesh, and use the loop to clip or extract
    cells from within the loop. Remember, the selection loop is
    "infinite" in length, you can use a plane (in boolean combination) to
    cap the extent of the selection loop. Another trick is to use a
    connectivity filter to extract the closest region to a given point
    (i.e., one of the points used to define the selection loop).
    
    @sa
    vtkImplicitFunction vtkImplicitBoolean vtkExtractGeometry
    vtkClipPolyData vtkConnectivityFilter vtkPolyDataConnectivityFilter
    """
    def AutomaticNormalGenerationOff(self):
        """
        V.AutomaticNormalGenerationOff()
        C++: virtual void AutomaticNormalGenerationOff()
        
        Turn on/off automatic normal generation. By default, the normal
        is computed from the accumulated cross product of the edges. You
        can also specify the normal to use.
        """
        ...
    
    def AutomaticNormalGenerationOn(self):
        """
        V.AutomaticNormalGenerationOn()
        C++: virtual void AutomaticNormalGenerationOn()
        
        Turn on/off automatic normal generation. By default, the normal
        is computed from the accumulated cross product of the edges. You
        can also specify the normal to use.
        """
        ...
    
    def EvaluateFunction(self, p_float=..., p_float=..., p_float=...):
        """
        V.EvaluateFunction([float, float, float]) -> float
        C++: double EvaluateFunction(double x[3]) override;
        V.EvaluateFunction(vtkDataArray, vtkDataArray)
        C++: virtual void EvaluateFunction(vtkDataArray *input,
            vtkDataArray *output)
        V.EvaluateFunction(float, float, float) -> float
        C++: virtual double EvaluateFunction(double x, double y, double z)
        
        Evaluate selection loop returning a signed distance.
        """
        ...
    
    def EvaluateGradient(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateGradient([float, float, float], [float, float, float])
        C++: void EvaluateGradient(double x[3], double n[3]) override;
        
        Evaluate selection loop returning the gradient.
        """
        ...
    
    def GetAutomaticNormalGeneration(self):
        """
        V.GetAutomaticNormalGeneration() -> int
        C++: virtual vtkTypeBool GetAutomaticNormalGeneration()
        
        Turn on/off automatic normal generation. By default, the normal
        is computed from the accumulated cross product of the edges. You
        can also specify the normal to use.
        """
        ...
    
    def GetLoop(self):
        """
        V.GetLoop() -> vtkPoints
        C++: virtual vtkPoints *GetLoop()
        
        Set/Get the array of point coordinates defining the loop. There
        must be at least three points used to define a loop.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overload GetMTime() because we depend on the Loop
        """
        ...
    
    def GetNormal(self):
        """
        V.GetNormal() -> (float, float, float)
        C++: virtual double *GetNormal()
        
        Set / get the normal used to determine whether a point is inside
        or outside the selection loop.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods for printing and type information.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods for printing and type information.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods for printing and type information.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods for printing and type information.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImplicitSelectionLoop
        C++: vtkImplicitSelectionLoop *NewInstance()
        
        Standard VTK methods for printing and type information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImplicitSelectionLoop
        C++: static vtkImplicitSelectionLoop *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods for printing and type information.
        """
        ...
    
    def SetAutomaticNormalGeneration(self, p_int):
        """
        V.SetAutomaticNormalGeneration(int)
        C++: virtual void SetAutomaticNormalGeneration(vtkTypeBool _arg)
        
        Turn on/off automatic normal generation. By default, the normal
        is computed from the accumulated cross product of the edges. You
        can also specify the normal to use.
        """
        ...
    
    def SetLoop(self, vtkPoints):
        """
        V.SetLoop(vtkPoints)
        C++: virtual void SetLoop(vtkPoints *)
        
        Set/Get the array of point coordinates defining the loop. There
        must be at least three points used to define a loop.
        """
        ...
    
    def SetNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetNormal(float, float, float)
        C++: virtual void SetNormal(double _arg1, double _arg2,
            double _arg3)
        V.SetNormal((float, float, float))
        C++: virtual void SetNormal(const double _arg[3])
        
        Set / get the normal used to determine whether a point is inside
        or outside the selection loop.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


