"""
This type stub file was generated by pyright.
"""

from .vtkImplicitFunction import vtkImplicitFunction

class vtkImplicitSum(vtkImplicitFunction):
    """
    vtkImplicitSum - implicit sum of other implicit functions
    
    Superclass: vtkImplicitFunction
    
    vtkImplicitSum produces a linear combination of other implicit
    functions. The contribution of each function is weighted by a scalar
    coefficient. The NormalizeByWeight option normalizes the output so
    that the scalar weights add up to 1. Note that this function gives
    accurate sums and gradients only if the input functions are linear.
    """
    def AddFunction(self, vtkImplicitFunction, p_float):
        """
        V.AddFunction(vtkImplicitFunction, float)
        C++: void AddFunction(vtkImplicitFunction *in, double weight)
        V.AddFunction(vtkImplicitFunction)
        C++: void AddFunction(vtkImplicitFunction *in)
        
        Add another implicit function to the list of functions, along
        with a weighting factor.
        """
        ...
    
    def EvaluateFunction(self, p_float=..., p_float=..., p_float=...):
        """
        V.EvaluateFunction([float, float, float]) -> float
        C++: double EvaluateFunction(double x[3]) override;
        V.EvaluateFunction(vtkDataArray, vtkDataArray)
        C++: virtual void EvaluateFunction(vtkDataArray *input,
            vtkDataArray *output)
        V.EvaluateFunction(float, float, float) -> float
        C++: virtual double EvaluateFunction(double x, double y, double z)
        
        Evaluate implicit function using current functions and weights.
        """
        ...
    
    def EvaluateGradient(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateGradient([float, float, float], [float, float, float])
        C++: void EvaluateGradient(double x[3], double g[3]) override;
        
        Evaluate gradient of the weighted sum of functions.  Input
        functions should be linear.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override modified time retrieval because of object dependencies.
        """
        ...
    
    def GetNormalizeByWeight(self):
        """
        V.GetNormalizeByWeight() -> int
        C++: virtual vtkTypeBool GetNormalizeByWeight()
        
        When calculating the function and gradient values of the
        composite function, setting NormalizeByWeight on will divide the
        final result by the total weight of the component functions. This
        process does not otherwise normalize the gradient vector. By
        default, NormalizeByWeight is off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImplicitSum
        C++: vtkImplicitSum *NewInstance()
        """
        ...
    
    def NormalizeByWeightOff(self):
        """
        V.NormalizeByWeightOff()
        C++: virtual void NormalizeByWeightOff()
        
        When calculating the function and gradient values of the
        composite function, setting NormalizeByWeight on will divide the
        final result by the total weight of the component functions. This
        process does not otherwise normalize the gradient vector. By
        default, NormalizeByWeight is off.
        """
        ...
    
    def NormalizeByWeightOn(self):
        """
        V.NormalizeByWeightOn()
        C++: virtual void NormalizeByWeightOn()
        
        When calculating the function and gradient values of the
        composite function, setting NormalizeByWeight on will divide the
        final result by the total weight of the component functions. This
        process does not otherwise normalize the gradient vector. By
        default, NormalizeByWeight is off.
        """
        ...
    
    def RemoveAllFunctions(self):
        """
        V.RemoveAllFunctions()
        C++: void RemoveAllFunctions()
        
        Remove all functions from the list.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImplicitSum
        C++: static vtkImplicitSum *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFunctionWeight(self, vtkImplicitFunction, p_float):
        """
        V.SetFunctionWeight(vtkImplicitFunction, float)
        C++: void SetFunctionWeight(vtkImplicitFunction *f, double weight)
        
        Set the weight (coefficient) of the given function to be weight.
        """
        ...
    
    def SetNormalizeByWeight(self, p_int):
        """
        V.SetNormalizeByWeight(int)
        C++: virtual void SetNormalizeByWeight(vtkTypeBool _arg)
        
        When calculating the function and gradient values of the
        composite function, setting NormalizeByWeight on will divide the
        final result by the total weight of the component functions. This
        process does not otherwise normalize the gradient vector. By
        default, NormalizeByWeight is off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


