"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonMath as __vtkmodules_vtkCommonMath

class vtkColor3_IdE(__vtkmodules_vtkCommonMath.vtkTuple_IdLi3EE):
    """
    vtkColor3<double> - no description provided.
    
    Superclass: vtkTuple[float64,3]
    
    vtkColor3()
    explicit vtkColor3(const double &scalar)
    explicit vtkColor3(const double *init)
    vtkColor3(const double &red, const double &green, const double &blue)
    vtkColor3(const &vtkColor3<double>)
    """
    def GetBlue(self):
        """
        V.GetBlue() -> float
        C++: const double &GetBlue()
        
        Get the blue component of the color, i.e. element 2.
        """
        ...
    
    def GetGreen(self):
        """
        V.GetGreen() -> float
        C++: const double &GetGreen()
        
        Get the green component of the color, i.e. element 1.
        """
        ...
    
    def GetRed(self):
        """
        V.GetRed() -> float
        C++: const double &GetRed()
        
        Get the red component of the color, i.e. element 0.
        """
        ...
    
    def Set(self, p_float, p_float_1, p_float_2):
        """
        V.Set(float, float, float)
        C++: void Set(const double &red, const double &green,
            const double &blue)
        
        Set the red, green and blue components of the color.
        """
        ...
    
    def SetBlue(self, p_float):
        """
        V.SetBlue(float)
        C++: void SetBlue(const double &blue)
        
        Set the blue component of the color, i.e. element 2.
        """
        ...
    
    def SetGreen(self, p_float):
        """
        V.SetGreen(float)
        C++: void SetGreen(const double &green)
        
        Set the green component of the color, i.e. element 1.
        """
        ...
    
    def SetRed(self, p_float):
        """
        V.SetRed(float)
        C++: void SetRed(const double &red)
        
        Set the red component of the color, i.e. element 0.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


