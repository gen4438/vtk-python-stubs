"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkSpline(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkSpline - spline abstract class for interpolating splines
    
    Superclass: vtkObject
    
    vtkSpline interpolates a set of data points (i.e., interpolation
    means that the spline passes through the points).  vtkSpline is an
    abstract class: its subclasses vtkCardinalSpline and
    vtkKochanekSpline do the interpolation. Note that this spline maps
    the 1D parametric coordinate t into a single value x. Thus if you
    want to use the spline to interpolate points (i.e. x[3]), you have to
    create three splines for each of the x-y-z coordinates. Fortunately,
    the vtkParametricSpline class does this for you.
    
    Typically a spline is used by adding a sequence of parametric
    coordinate / data (t,x) values followed by use of an evaluation
    function (e.g., vtkCardinalSpline::Evaluate()).  Since these splines
    are 1D, a point in this context is an independent / dependent
    variable pair.
    
    Splines can also be set up to be closed or open. Closed splines
    continue from the last point to the first point with continuous
    function and derivative values. (You don't need to duplicate the
    first point to close the spline, just set ClosedOn.)
    
    This implementation of splines does not use a normalized parametric
    coordinate. If the spline is open, then the parameter space is (tMin
    <= t <= tMax) where tMin and tMax are the minimum and maximum
    parametric values seen when performing AddPoint(). If the spline is
    closed, then the parameter space is (tMin <= t <= (tMax+1)) where
    tMin and tMax are the minimum and maximum parametric values seen when
    performing AddPoint(). Note, however, that this behavior can be
    changed by explicitly setting the ParametricRange(tMin,tMax). If set,
    the parameter space remains (tMin <= t <= tMax), except that
    additions of data with parametric values outside this range are
    clamped within this range.
    
    @sa
    vtkCardinalSpline vtkKochanekSpline vtkParametricSpline
    vtkParametricFunctionSource
    """
    def AddPoint(self, p_float, p_float_1):
        """
        V.AddPoint(float, float)
        C++: void AddPoint(double t, double x)
        
        Add a pair of points to be fit with the spline.
        """
        ...
    
    def ClampValueOff(self):
        """
        V.ClampValueOff()
        C++: virtual void ClampValueOff()
        
        Set/Get ClampValue. If On, results of the interpolation will be
        clamped to the min/max of the input data.
        """
        ...
    
    def ClampValueOn(self):
        """
        V.ClampValueOn()
        C++: virtual void ClampValueOn()
        
        Set/Get ClampValue. If On, results of the interpolation will be
        clamped to the min/max of the input data.
        """
        ...
    
    def ClosedOff(self):
        """
        V.ClosedOff()
        C++: virtual void ClosedOff()
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def ClosedOn(self):
        """
        V.ClosedOn()
        C++: virtual void ClosedOn()
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def Compute(self):
        """
        V.Compute()
        C++: virtual void Compute()
        
        Compute the coefficients for the spline.
        """
        ...
    
    def DeepCopy(self, vtkSpline):
        """
        V.DeepCopy(vtkSpline)
        C++: virtual void DeepCopy(vtkSpline *s)
        
        Deep copy of spline data.
        """
        ...
    
    def Evaluate(self, p_float):
        """
        V.Evaluate(float) -> float
        C++: virtual double Evaluate(double t)
        
        Interpolate the value of the spline at parametric location of t.
        """
        ...
    
    def GetClampValue(self):
        """
        V.GetClampValue() -> int
        C++: virtual vtkTypeBool GetClampValue()
        
        Set/Get ClampValue. If On, results of the interpolation will be
        clamped to the min/max of the input data.
        """
        ...
    
    def GetClosed(self):
        """
        V.GetClosed() -> int
        C++: virtual vtkTypeBool GetClosed()
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def GetLeftConstraint(self):
        """
        V.GetLeftConstraint() -> int
        C++: virtual int GetLeftConstraint()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetLeftConstraintMaxValue(self):
        """
        V.GetLeftConstraintMaxValue() -> int
        C++: virtual int GetLeftConstraintMaxValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetLeftConstraintMinValue(self):
        """
        V.GetLeftConstraintMinValue() -> int
        C++: virtual int GetLeftConstraintMinValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetLeftValue(self):
        """
        V.GetLeftValue() -> float
        C++: virtual double GetLeftValue()
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the Piecewise function.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: int GetNumberOfPoints()
        
        Return the number of points inserted thus far.
        """
        ...
    
    def GetParametricRange(self, p_float=..., p_float=...):
        """
        V.GetParametricRange([float, float])
        C++: void GetParametricRange(double tRange[2])
        
        Set/Get the parametric range. If not set, the range is determined
        implicitly by keeping track of the (min,max) parameter values for
        t. If set, the AddPoint() method will clamp the t value to lie
        within the specified range.
        """
        ...
    
    def GetRightConstraint(self):
        """
        V.GetRightConstraint() -> int
        C++: virtual int GetRightConstraint()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetRightConstraintMaxValue(self):
        """
        V.GetRightConstraintMaxValue() -> int
        C++: virtual int GetRightConstraintMaxValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetRightConstraintMinValue(self):
        """
        V.GetRightConstraintMinValue() -> int
        C++: virtual int GetRightConstraintMinValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetRightValue(self):
        """
        V.GetRightValue() -> float
        C++: virtual double GetRightValue()
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSpline
        C++: vtkSpline *NewInstance()
        """
        ...
    
    def RemoveAllPoints(self):
        """
        V.RemoveAllPoints()
        C++: void RemoveAllPoints()
        
        Remove all points from the data.
        """
        ...
    
    def RemovePoint(self, p_float):
        """
        V.RemovePoint(float)
        C++: void RemovePoint(double t)
        
        Remove a point from the data to be fit with the spline.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSpline
        C++: static vtkSpline *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClampValue(self, p_int):
        """
        V.SetClampValue(int)
        C++: virtual void SetClampValue(vtkTypeBool _arg)
        
        Set/Get ClampValue. If On, results of the interpolation will be
        clamped to the min/max of the input data.
        """
        ...
    
    def SetClosed(self, p_int):
        """
        V.SetClosed(int)
        C++: virtual void SetClosed(vtkTypeBool _arg)
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def SetLeftConstraint(self, p_int):
        """
        V.SetLeftConstraint(int)
        C++: virtual void SetLeftConstraint(int _arg)
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def SetLeftValue(self, p_float):
        """
        V.SetLeftValue(float)
        C++: virtual void SetLeftValue(double _arg)
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def SetParametricRange(self, p_float, p_float_1):
        """
        V.SetParametricRange(float, float)
        C++: void SetParametricRange(double tMin, double tMax)
        V.SetParametricRange([float, float])
        C++: void SetParametricRange(double tRange[2])
        
        Set/Get the parametric range. If not set, the range is determined
        implicitly by keeping track of the (min,max) parameter values for
        t. If set, the AddPoint() method will clamp the t value to lie
        within the specified range.
        """
        ...
    
    def SetRightConstraint(self, p_int):
        """
        V.SetRightConstraint(int)
        C++: virtual void SetRightConstraint(int _arg)
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def SetRightValue(self, p_float):
        """
        V.SetRightValue(float)
        C++: virtual void SetRightValue(double _arg)
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


