"""
This type stub file was generated by pyright.
"""

from .vtkImplicitFunction import vtkImplicitFunction

class vtkImplicitVolume(vtkImplicitFunction):
    """
    vtkImplicitVolume - treat a volume as if it were an implicit function
    
    Superclass: vtkImplicitFunction
    
    vtkImplicitVolume treats a volume (e.g., structured point dataset) as
    if it were an implicit function. This means it computes a function
    value and gradient. vtkImplicitVolume is a concrete implementation of
    vtkImplicitFunction.
    
    vtkImplicitDataSet computes the function (at the point x) by
    performing cell interpolation. That is, it finds the cell containing
    x, and then uses the cell's interpolation functions to compute an
    interpolated scalar value at x. (A similar approach is used to find
    the gradient, if requested.) Points outside of the dataset are
    assigned the value of the ivar OutValue, and the gradient value
    OutGradient.
    
    @warning
    The input volume data is only updated when GetMTime() is called.
    Works for 3D structured points datasets, 0D-2D datasets won't work
    properly.
    
    @sa
    vtkImplicitFunction vtkImplicitDataSet vtkClipPolyData vtkCutter
    vtkImplicitWindowFunction
    """
    def EvaluateFunction(self, p_float=..., p_float=..., p_float=...):
        """
        V.EvaluateFunction([float, float, float]) -> float
        C++: double EvaluateFunction(double x[3]) override;
        V.EvaluateFunction(vtkDataArray, vtkDataArray)
        C++: virtual void EvaluateFunction(vtkDataArray *input,
            vtkDataArray *output)
        V.EvaluateFunction(float, float, float) -> float
        C++: virtual double EvaluateFunction(double x, double y, double z)
        
        Evaluate the ImplicitVolume. This returns the interpolated scalar
        value at x[3].
        """
        ...
    
    def EvaluateGradient(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateGradient([float, float, float], [float, float, float])
        C++: void EvaluateGradient(double x[3], double n[3]) override;
        
        Evaluate ImplicitVolume gradient.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Returns the mtime also considering the volume.  This also calls
        Update on the volume, and it therefore must be called before the
        function is evaluated.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutGradient(self):
        """
        V.GetOutGradient() -> (float, float, float)
        C++: virtual double *GetOutGradient()
        
        Set the function gradient to use for points outside of the
        dataset.
        """
        ...
    
    def GetOutValue(self):
        """
        V.GetOutValue() -> float
        C++: virtual double GetOutValue()
        
        Set the function value to use for points outside of the dataset.
        """
        ...
    
    def GetVolume(self):
        """
        V.GetVolume() -> vtkImageData
        C++: virtual vtkImageData *GetVolume()
        
        Specify the volume for the implicit function.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImplicitVolume
        C++: vtkImplicitVolume *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImplicitVolume
        C++: static vtkImplicitVolume *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutGradient(self, p_float, p_float_1, p_float_2):
        """
        V.SetOutGradient(float, float, float)
        C++: virtual void SetOutGradient(double _arg1, double _arg2,
            double _arg3)
        V.SetOutGradient((float, float, float))
        C++: virtual void SetOutGradient(const double _arg[3])
        
        Set the function gradient to use for points outside of the
        dataset.
        """
        ...
    
    def SetOutValue(self, p_float):
        """
        V.SetOutValue(float)
        C++: virtual void SetOutValue(double _arg)
        
        Set the function value to use for points outside of the dataset.
        """
        ...
    
    def SetVolume(self, vtkImageData):
        """
        V.SetVolume(vtkImageData)
        C++: virtual void SetVolume(vtkImageData *)
        
        Specify the volume for the implicit function.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


