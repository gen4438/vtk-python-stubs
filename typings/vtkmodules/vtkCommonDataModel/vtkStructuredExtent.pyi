"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkStructuredExtent(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkStructuredExtent - helper class to aid working with structured
     extents.
    
    Superclass: vtkObject
    
    vtkStructuredExtent is an helper class that helps in arithmetic with
     structured extents. It defines a bunch of static methods (most of
    which are
     inlined) to aid in dealing with extents.
    """
    def Clamp(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.Clamp([int, int, int, int, int, int], (int, ...))
        C++: static void Clamp(int ext[6], const int wholeExt[])
        
        Clamps ext to fit in wholeExt.
        """
        ...
    
    def GetDimensions(self, , p_int=..., p_int=..., p_int=...):
        """
        V.GetDimensions((int, int, int, int, int, int), [int, int, int])
        C++: static void GetDimensions(const int ext[6], int dims[3])
        
        Given the extents, computes the dimensions.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Grow(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.Grow([int, int, int, int, int, int], int)
        C++: static void Grow(int ext[6], int count)
        V.Grow([int, int, int, int, int, int], int, [int, int, int, int,
            int, int])
        C++: static void Grow(int ext[6], int count, int wholeExt[6])
        
        Grows the ext on each side by the given count.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredExtent
        C++: vtkStructuredExtent *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredExtent
        C++: static vtkStructuredExtent *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Smaller(self, , ):
        """
        V.Smaller((int, int, int, int, int, int), (int, int, int, int,
            int, int)) -> bool
        C++: static bool Smaller(const int ext[6], const int wholeExt[6])
        
        Returns if ext fits within wholeExt. Unlike StrictlySmaller, this
        method returns true even if ext == wholeExt.
        """
        ...
    
    def StrictlySmaller(self, , ):
        """
        V.StrictlySmaller((int, int, int, int, int, int), (int, int, int,
            int, int, int)) -> bool
        C++: static bool StrictlySmaller(const int ext[6],
            const int wholeExt[6])
        
        Returns true if ext is fits within wholeExt with at least 1
        dimension smaller than the wholeExt.
        """
        ...
    
    def Transform(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.Transform([int, int, int, int, int, int], [int, int, int, int,
            int, int])
        C++: static void Transform(int ext[6], int wholeExt[6])
        
        Makes ext relative to wholeExt.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


