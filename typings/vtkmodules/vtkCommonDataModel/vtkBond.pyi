"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkBond(object):
    """
    vtkBond - convenience proxy for vtkMolecule
    
    vtkBond(const &vtkBond)
    """
    def GetBeginAtom(self):
        """
        V.GetBeginAtom() -> vtkAtom
        C++: vtkAtom GetBeginAtom()
        
        Get a vtkAtom object that refers to the starting / ending atom
        for this bond.
        """
        ...
    
    def GetBeginAtomId(self):
        """
        V.GetBeginAtomId() -> int
        C++: vtkIdType GetBeginAtomId()
        
        Get the starting / ending atom ids for this bond.
        """
        ...
    
    def GetEndAtom(self):
        """
        V.GetEndAtom() -> vtkAtom
        C++: vtkAtom GetEndAtom()
        
        Get a vtkAtom object that refers to the starting / ending atom
        for this bond.
        """
        ...
    
    def GetEndAtomId(self):
        """
        V.GetEndAtomId() -> int
        C++: vtkIdType GetEndAtomId()
        
        Get the starting / ending atom ids for this bond.
        """
        ...
    
    def GetId(self):
        """
        V.GetId() -> int
        C++: vtkIdType GetId()
        
        Return the Id used to identify this bond in the parent molecule.
        """
        ...
    
    def GetLength(self):
        """
        V.GetLength() -> float
        C++: double GetLength()
        
        Get the distance between the bonded atoms.
        
        *
        
        ote This function is faster than vtkMolecule::GetBondLength and
        * should be used when possible.
        """
        ...
    
    def GetMolecule(self):
        """
        V.GetMolecule() -> vtkMolecule
        C++: vtkMolecule *GetMolecule()
        
        Return the parent molecule of this bond.
        """
        ...
    
    def GetOrder(self):
        """
        V.GetOrder() -> int
        C++: unsigned short GetOrder()
        
        Get the bond order for this bond.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, const, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


