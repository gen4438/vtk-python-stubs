"""
This type stub file was generated by pyright.
"""

from .vtkImplicitFunction import vtkImplicitFunction

class vtkPerlinNoise(vtkImplicitFunction):
    """
    vtkPerlinNoise - an implicit function that implements Perlin noise
    
    Superclass: vtkImplicitFunction
    
    vtkPerlinNoise computes a Perlin noise field as an implicit function.
    vtkPerlinNoise is a concrete implementation of vtkImplicitFunction.
    Perlin noise, originally described by Ken Perlin, is a non-periodic
    and continuous noise function useful for modeling real-world objects.
    
    The amplitude and frequency of the noise pattern are adjustable. 
    This implementation of Perlin noise is derived closely from Greg
    Ward's version in Graphics Gems II.
    
    @sa
    vtkImplicitFunction
    """
    def EvaluateFunction(self, p_float=..., p_float=..., p_float=...):
        """
        V.EvaluateFunction([float, float, float]) -> float
        C++: double EvaluateFunction(double x[3]) override;
        V.EvaluateFunction(vtkDataArray, vtkDataArray)
        C++: virtual void EvaluateFunction(vtkDataArray *input,
            vtkDataArray *output)
        V.EvaluateFunction(float, float, float) -> float
        C++: virtual double EvaluateFunction(double x, double y, double z)
        
        Evaluate PerlinNoise function.
        """
        ...
    
    def EvaluateGradient(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateGradient([float, float, float], [float, float, float])
        C++: void EvaluateGradient(double x[3], double n[3]) override;
        
        Evaluate PerlinNoise gradient.  Currently, the method returns a 0
        gradient.
        """
        ...
    
    def GetAmplitude(self):
        """
        V.GetAmplitude() -> float
        C++: virtual double GetAmplitude()
        
        Set/get the amplitude of the noise function. Amplitude can be
        negative. The noise function varies randomly between -|Amplitude|
        and |Amplitude|. Therefore the range of values is 2*|Amplitude|
        large. The initial amplitude is 1.
        """
        ...
    
    def GetFrequency(self):
        """
        V.GetFrequency() -> (float, float, float)
        C++: virtual double *GetFrequency()
        
        Set/get the frequency, or physical scale,  of the noise function
        (higher is finer scale).  The frequency can be adjusted per axis,
        or the same for all axes.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPhase(self):
        """
        V.GetPhase() -> (float, float, float)
        C++: virtual double *GetPhase()
        
        Set/get the phase of the noise function.  This parameter can be
        used to shift the noise function within space (perhaps to avoid a
        beat with a noise pattern at another scale).  Phase tends to
        repeat about every unit, so a phase of 0.5 is a half-cycle shift.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPerlinNoise
        C++: vtkPerlinNoise *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPerlinNoise
        C++: static vtkPerlinNoise *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAmplitude(self, p_float):
        """
        V.SetAmplitude(float)
        C++: virtual void SetAmplitude(double _arg)
        
        Set/get the amplitude of the noise function. Amplitude can be
        negative. The noise function varies randomly between -|Amplitude|
        and |Amplitude|. Therefore the range of values is 2*|Amplitude|
        large. The initial amplitude is 1.
        """
        ...
    
    def SetFrequency(self, p_float, p_float_1, p_float_2):
        """
        V.SetFrequency(float, float, float)
        C++: virtual void SetFrequency(double _arg1, double _arg2,
            double _arg3)
        V.SetFrequency((float, float, float))
        C++: virtual void SetFrequency(const double _arg[3])
        
        Set/get the frequency, or physical scale,  of the noise function
        (higher is finer scale).  The frequency can be adjusted per axis,
        or the same for all axes.
        """
        ...
    
    def SetPhase(self, p_float, p_float_1, p_float_2):
        """
        V.SetPhase(float, float, float)
        C++: virtual void SetPhase(double _arg1, double _arg2,
            double _arg3)
        V.SetPhase((float, float, float))
        C++: virtual void SetPhase(const double _arg[3])
        
        Set/get the phase of the noise function.  This parameter can be
        used to shift the noise function within space (perhaps to avoid a
        beat with a noise pattern at another scale).  Phase tends to
        repeat about every unit, so a phase of 0.5 is a half-cycle shift.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


