"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

VTK_PARSER_ABSOLUTE_VALUE = ...
VTK_PARSER_ADD = ...
VTK_PARSER_AND = ...
VTK_PARSER_ARCCOSINE = ...
VTK_PARSER_ARCSINE = ...
VTK_PARSER_ARCTANGENT = ...
VTK_PARSER_BEGIN_VARIABLES = ...
VTK_PARSER_CEILING = ...
VTK_PARSER_COSINE = ...
VTK_PARSER_CROSS = ...
VTK_PARSER_DIVIDE = ...
VTK_PARSER_DOT_PRODUCT = ...
VTK_PARSER_EQUAL_TO = ...
VTK_PARSER_ERROR_RESULT = ...
VTK_PARSER_EXPONENT = ...
VTK_PARSER_FLOOR = ...
VTK_PARSER_GREATER_THAN = ...
VTK_PARSER_HYPERBOLIC_COSINE = ...
VTK_PARSER_HYPERBOLIC_SINE = ...
VTK_PARSER_HYPERBOLIC_TANGENT = ...
VTK_PARSER_IF = ...
VTK_PARSER_IHAT = ...
VTK_PARSER_IMMEDIATE = ...
VTK_PARSER_JHAT = ...
VTK_PARSER_KHAT = ...
VTK_PARSER_LESS_THAN = ...
VTK_PARSER_LOGARITHM = ...
VTK_PARSER_LOGARITHM10 = ...
VTK_PARSER_LOGARITHME = ...
VTK_PARSER_MAGNITUDE = ...
VTK_PARSER_MAX = ...
VTK_PARSER_MIN = ...
VTK_PARSER_MULTIPLY = ...
VTK_PARSER_NORMALIZE = ...
VTK_PARSER_OR = ...
VTK_PARSER_POWER = ...
VTK_PARSER_SCALAR_TIMES_VECTOR = ...
VTK_PARSER_SIGN = ...
VTK_PARSER_SINE = ...
VTK_PARSER_SQUARE_ROOT = ...
VTK_PARSER_SUBTRACT = ...
VTK_PARSER_TANGENT = ...
VTK_PARSER_UNARY_MINUS = ...
VTK_PARSER_UNARY_PLUS = ...
VTK_PARSER_VECTOR_ADD = ...
VTK_PARSER_VECTOR_IF = ...
VTK_PARSER_VECTOR_OVER_SCALAR = ...
VTK_PARSER_VECTOR_SUBTRACT = ...
VTK_PARSER_VECTOR_TIMES_SCALAR = ...
VTK_PARSER_VECTOR_UNARY_MINUS = ...
VTK_PARSER_VECTOR_UNARY_PLUS = ...
class vtkContourValues(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkContourValues - helper object to manage setting and generating
    contour values
    
    Superclass: vtkObject
    
    vtkContourValues is a general class to manage the creation,
    generation, and retrieval of contour values. This class serves as a
    helper class for contouring classes, or those classes operating on
    lists of contour values.
    
    @sa
    vtkContourFilter
    """
    def DeepCopy(self, vtkContourValues):
        """
        V.DeepCopy(vtkContourValues)
        C++: void DeepCopy(vtkContourValues *other)
        
        Copy contours.
        """
        ...
    
    def GenerateValues(self, p_int, p_float=..., p_float=...):
        """
        V.GenerateValues(int, [float, float])
        C++: void GenerateValues(int numContours, double range[2])
        V.GenerateValues(int, float, float)
        C++: void GenerateValues(int numContours, double rangeStart,
            double rangeEnd)
        
        Generate numContours equally spaced contour values between
        specified range. Contour values will include min/max range
        values.
        """
        ...
    
    def GetNumberOfContours(self):
        """
        V.GetNumberOfContours() -> int
        C++: int GetNumberOfContours()
        
        Return the number of contours in the
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> float
        C++: double GetValue(int i)
        
        Get the ith contour value. The return value will be clamped if
        the index i is out of range.
        """
        ...
    
    def GetValues(self):
        """
        V.GetValues() -> (float, ...)
        C++: double *GetValues()
        V.GetValues([float, ...])
        C++: void GetValues(double *contourValues)
        
        Return a pointer to a list of contour values. The contents of the
        list will be garbage if the number of contours <= 0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContourValues
        C++: vtkContourValues *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContourValues
        C++: static vtkContourValues *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfContours(self, p_int):
        """
        V.SetNumberOfContours(int)
        C++: void SetNumberOfContours(const int number)
        
        Set the number of contours to place into the list. You only
        really need to use this method to reduce list size. The method
        SetValue() will automatically increase list size as needed.
        """
        ...
    
    def SetValue(self, p_int, p_float):
        """
        V.SetValue(int, float)
        C++: void SetValue(int i, double value)
        
        Set the ith contour value.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkErrorCode(object):
    """
    vtkErrorCode - superclass for error codes
    
    vtkErrorCode is an mechanism for (currently) reader object to return
    errors during reading file.
    
    vtkErrorCode()
    vtkErrorCode(const &vtkErrorCode)
    """
    def GetErrorCodeFromString(self, string):
        """
        V.GetErrorCodeFromString(string) -> int
        C++: static unsigned long GetErrorCodeFromString(
            const char *event)
        """
        ...
    
    def GetLastSystemError(self):
        """
        V.GetLastSystemError() -> int
        C++: static unsigned long GetLastSystemError()
        """
        ...
    
    def GetStringFromErrorCode(self, p_int):
        """
        V.GetStringFromErrorCode(int) -> string
        C++: static const char *GetStringFromErrorCode(
            unsigned long event)
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    CannotOpenFileError = ...
    ErrorIds = ...
    FileFormatError = ...
    FileNotFoundError = ...
    FirstVTKErrorCode = ...
    NoError = ...
    NoFileNameError = ...
    OutOfDiskSpaceError = ...
    PrematureEndOfFileError = ...
    UnknownError = ...
    UnrecognizedFileTypeError = ...
    UserError = ...


class vtkFunctionParser(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkFunctionParser - Parse and evaluate a mathematical expression
    
    Superclass: vtkObject
    
    vtkFunctionParser is a class that takes in a mathematical expression
    as a char string, parses it, and evaluates it at the specified values
    of the variables in the input string.
    
    You can use the "if" operator to create conditional expressions such
    as if ( test, trueresult, falseresult). These evaluate the boolean
    valued test expression and then evaluate either the trueresult or the
    falseresult expression to produce a final (scalar or vector valued)
    value. "test" may contain <,>,=,|,&, and () and all three
    subexpressions can evaluate arbitrary function operators (ln, cos, +,
    if, etc)
    
    @par Thanks: Juha Nieminen (juha.nieminen@gmail.com) for relicensing
    this branch of the function parser code that this class is based upon
    under the new BSD license so that it could be used in VTK. Note, the
    BSD license applies to this version of the function parser only (by
    permission of the author), and not the original library.
    
    @par Thanks: Thomas Dunne (thomas.dunne@iwr.uni-heidelberg.de) for
    adding code for two-parameter-parsing and a few functions (sign, min,
    max).
    
    @par Thanks: Sid Sydoriak (sxs@lanl.gov) for adding boolean
    operations and conditional expressions and for fixing a variety of
    bugs.
    """
    def GetFunction(self):
        """
        V.GetFunction() -> string
        C++: virtual char *GetFunction()
        
        Set/Get input string to evaluate.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return parser's MTime
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfScalarVariables(self):
        """
        V.GetNumberOfScalarVariables() -> int
        C++: int GetNumberOfScalarVariables()
        
        Get the number of scalar variables.
        """
        ...
    
    def GetNumberOfVectorVariables(self):
        """
        V.GetNumberOfVectorVariables() -> int
        C++: int GetNumberOfVectorVariables()
        
        Get the number of vector variables.
        """
        ...
    
    def GetReplaceInvalidValues(self):
        """
        V.GetReplaceInvalidValues() -> int
        C++: virtual vtkTypeBool GetReplaceInvalidValues()
        
        When ReplaceInvalidValues is on, all invalid values (such as
        sqrt(-2), note that function parser does not handle complex
        numbers) will be replaced by ReplacementValue. Otherwise an error
        will be reported
        """
        ...
    
    def GetReplacementValue(self):
        """
        V.GetReplacementValue() -> float
        C++: virtual double GetReplacementValue()
        
        When ReplaceInvalidValues is on, all invalid values (such as
        sqrt(-2), note that function parser does not handle complex
        numbers) will be replaced by ReplacementValue. Otherwise an error
        will be reported
        """
        ...
    
    def GetScalarResult(self):
        """
        V.GetScalarResult() -> float
        C++: double GetScalarResult()
        
        Get a scalar result from evaluating the input function.
        """
        ...
    
    def GetScalarVariableIndex(self, string):
        """
        V.GetScalarVariableIndex(string) -> int
        C++: int GetScalarVariableIndex(const char *name)
        
        Get scalar variable index or -1 if not found
        """
        ...
    
    def GetScalarVariableName(self, p_int):
        """
        V.GetScalarVariableName(int) -> string
        C++: const char *GetScalarVariableName(int i)
        
        Get the ith scalar variable name.
        """
        ...
    
    def GetScalarVariableNeeded(self, p_int):
        """
        V.GetScalarVariableNeeded(int) -> bool
        C++: bool GetScalarVariableNeeded(int i)
        V.GetScalarVariableNeeded(string) -> bool
        C++: bool GetScalarVariableNeeded(const char *variableName)
        
        Returns whether a scalar variable is needed for the function
        evaluation. This is only valid after a successful Parse(). Thus,
        call GetScalarResult() or IsScalarResult() or similar method
        before calling this.
        """
        ...
    
    def GetScalarVariableValue(self, string):
        """
        V.GetScalarVariableValue(string) -> float
        C++: double GetScalarVariableValue(const char *variableName)
        V.GetScalarVariableValue(int) -> float
        C++: double GetScalarVariableValue(int i)
        
        Get the value of a scalar variable.
        """
        ...
    
    def GetVectorResult(self):
        """
        V.GetVectorResult() -> (float, float, float)
        C++: double *GetVectorResult()
        V.GetVectorResult([float, float, float])
        C++: void GetVectorResult(double result[3])
        
        Get a vector result from evaluating the input function.
        """
        ...
    
    def GetVectorVariableIndex(self, string):
        """
        V.GetVectorVariableIndex(string) -> int
        C++: int GetVectorVariableIndex(const char *name)
        
        Get scalar variable index or -1 if not found
        """
        ...
    
    def GetVectorVariableName(self, p_int):
        """
        V.GetVectorVariableName(int) -> string
        C++: const char *GetVectorVariableName(int i)
        
        Get the ith vector variable name.
        """
        ...
    
    def GetVectorVariableNeeded(self, p_int):
        """
        V.GetVectorVariableNeeded(int) -> bool
        C++: bool GetVectorVariableNeeded(int i)
        V.GetVectorVariableNeeded(string) -> bool
        C++: bool GetVectorVariableNeeded(const char *variableName)
        
        Returns whether a vector variable is needed for the function
        evaluation. This is only valid after a successful Parse(). Thus,
        call GetVectorResult() or IsVectorResult() or similar method
        before calling this.
        """
        ...
    
    def GetVectorVariableValue(self, string):
        """
        V.GetVectorVariableValue(string) -> (float, float, float)
        C++: double *GetVectorVariableValue(const char *variableName)
        V.GetVectorVariableValue(string, [float, float, float])
        C++: void GetVectorVariableValue(const char *variableName,
            double value[3])
        V.GetVectorVariableValue(int) -> (float, float, float)
        C++: double *GetVectorVariableValue(int i)
        V.GetVectorVariableValue(int, [float, float, float])
        C++: void GetVectorVariableValue(int i, double value[3])
        
        Get the value of a vector variable.
        """
        ...
    
    def InvalidateFunction(self):
        """
        V.InvalidateFunction()
        C++: void InvalidateFunction()
        
        Allow the user to force the function to be re-parsed
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsScalarResult(self):
        """
        V.IsScalarResult() -> int
        C++: int IsScalarResult()
        
        Check whether the result is a scalar result.  If it isn't, then
        either the result is a vector or an error has occurred.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsVectorResult(self):
        """
        V.IsVectorResult() -> int
        C++: int IsVectorResult()
        
        Check whether the result is a vector result.  If it isn't, then
        either the result is scalar or an error has occurred.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFunctionParser
        C++: vtkFunctionParser *NewInstance()
        """
        ...
    
    def RemoveAllVariables(self):
        """
        V.RemoveAllVariables()
        C++: void RemoveAllVariables()
        
        Remove all the current variables.
        """
        ...
    
    def RemoveScalarVariables(self):
        """
        V.RemoveScalarVariables()
        C++: void RemoveScalarVariables()
        
        Remove all the scalar variables.
        """
        ...
    
    def RemoveVectorVariables(self):
        """
        V.RemoveVectorVariables()
        C++: void RemoveVectorVariables()
        
        Remove all the vector variables.
        """
        ...
    
    def ReplaceInvalidValuesOff(self):
        """
        V.ReplaceInvalidValuesOff()
        C++: virtual void ReplaceInvalidValuesOff()
        
        When ReplaceInvalidValues is on, all invalid values (such as
        sqrt(-2), note that function parser does not handle complex
        numbers) will be replaced by ReplacementValue. Otherwise an error
        will be reported
        """
        ...
    
    def ReplaceInvalidValuesOn(self):
        """
        V.ReplaceInvalidValuesOn()
        C++: virtual void ReplaceInvalidValuesOn()
        
        When ReplaceInvalidValues is on, all invalid values (such as
        sqrt(-2), note that function parser does not handle complex
        numbers) will be replaced by ReplacementValue. Otherwise an error
        will be reported
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFunctionParser
        C++: static vtkFunctionParser *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFunction(self, string):
        """
        V.SetFunction(string)
        C++: void SetFunction(const char *function)
        
        Set/Get input string to evaluate.
        """
        ...
    
    def SetReplaceInvalidValues(self, p_int):
        """
        V.SetReplaceInvalidValues(int)
        C++: virtual void SetReplaceInvalidValues(vtkTypeBool _arg)
        
        When ReplaceInvalidValues is on, all invalid values (such as
        sqrt(-2), note that function parser does not handle complex
        numbers) will be replaced by ReplacementValue. Otherwise an error
        will be reported
        """
        ...
    
    def SetReplacementValue(self, p_float):
        """
        V.SetReplacementValue(float)
        C++: virtual void SetReplacementValue(double _arg)
        
        When ReplaceInvalidValues is on, all invalid values (such as
        sqrt(-2), note that function parser does not handle complex
        numbers) will be replaced by ReplacementValue. Otherwise an error
        will be reported
        """
        ...
    
    def SetScalarVariableValue(self, string, p_float):
        """
        V.SetScalarVariableValue(string, float)
        C++: void SetScalarVariableValue(const char *variableName,
            double value)
        V.SetScalarVariableValue(int, float)
        C++: void SetScalarVariableValue(int i, double value)
        
        Set the value of a scalar variable.  If a variable with this name
        exists, then its value will be set to the new value.  If there is
        not already a variable with this name, variableName will be added
        to the list of variables, and its value will be set to the new
        value.
        """
        ...
    
    def SetVectorVariableValue(self, string, p_float, p_float_1, p_float_2):
        """
        V.SetVectorVariableValue(string, float, float, float)
        C++: void SetVectorVariableValue(const char *variableName,
            double xValue, double yValue, double zValue)
        V.SetVectorVariableValue(string, (float, float, float))
        C++: void SetVectorVariableValue(const char *variableName,
            const double values[3])
        V.SetVectorVariableValue(int, float, float, float)
        C++: void SetVectorVariableValue(int i, double xValue,
            double yValue, double zValue)
        V.SetVectorVariableValue(int, (float, float, float))
        C++: void SetVectorVariableValue(int i, const double values[3])
        
        Set the value of a vector variable.  If a variable with this name
        exists, then its value will be set to the new value.  If there is
        not already a variable with this name, variableName will be added
        to the list of variables, and its value will be set to the new
        value.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHeap(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkHeap - replacement for malloc/free and new/delete
    
    Superclass: vtkObject
    
    This class is a replacement for malloc/free and new/delete for
    software that has inherent memory leak or performance problems. For
    example, external software such as the PLY library (vtkPLY) and VRML
    importer (vtkVRMLImporter) are often written with lots of malloc()
    calls but without the corresponding free() invocations. The class
    vtkOrderedTriangulator may create and delete millions of new/delete
    calls. This class allows the overloading of the C++ new operator (or
    other memory allocation requests) by using the method
    AllocateMemory(). Memory is deleted with an invocation of CleanAll()
    (which deletes ALL memory; any given memory allocation cannot be
    deleted). Note: a block size can be used to control the size of each
    memory allocation. Requests for memory are fulfilled from the block
    until the block runs out, then a new block is created.
    
    @warning
    Do not use this class as a general replacement for system memory
    allocation.  This class should be used only as a last resort if
    memory leaks cannot be tracked down and eliminated by conventional
    means. Also, deleting memory from vtkHeap is not supported. Only the
    deletion of the entire heap is. (A Reset() method allows you to reuse
    previously allocated memory.)
    
    @sa
    vtkVRMLImporter vtkPLY vtkOrderedTriangulator
    """
    def AllocateMemory(self, p_int):
        """
        V.AllocateMemory(int) -> void
        C++: void *AllocateMemory(size_t n)
        
        Allocate the memory requested.
        """
        ...
    
    def GetBlockSize(self):
        """
        V.GetBlockSize() -> int
        C++: virtual size_t GetBlockSize()
        
        Set/Get the size at which blocks are allocated. If a memory
        request is bigger than the block size, then that size will be
        allocated.
        """
        ...
    
    def GetNumberOfAllocations(self):
        """
        V.GetNumberOfAllocations() -> int
        C++: virtual int GetNumberOfAllocations()
        
        Get the number of allocations thus far.
        """
        ...
    
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: virtual int GetNumberOfBlocks()
        
        Get the number of allocations thus far.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHeap
        C++: vtkHeap *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        This methods resets the current allocation location back to the
        beginning of the heap. This allows reuse of previously allocated
        memory which may be beneficial to performance in many cases.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHeap
        C++: static vtkHeap *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBlockSize(self, p_int):
        """
        V.SetBlockSize(int)
        C++: virtual void SetBlockSize(size_t)
        
        Set/Get the size at which blocks are allocated. If a memory
        request is bigger than the block size, then that size will be
        allocated.
        """
        ...
    
    def StringDup(self, string):
        """
        V.StringDup(string) -> string
        C++: char *StringDup(const char *str)
        
        Convenience method performs string duplication.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPolygonBuilder(object):
    """
    vtkPolygonBuilder -  The polygon output is the boundary of the union
    of the triangles.
    
    It is assumed that the input triangles form a simple polygon. It is
     currently used to compute polygons for slicing.
    
    vtkPolygonBuilder()
    vtkPolygonBuilder(const &vtkPolygonBuilder)
    """
    def GetPolygons(self, vtkIdListCollection):
        """
        V.GetPolygons(vtkIdListCollection)
        C++: void GetPolygons(vtkIdListCollection *polys)
        
        Populate polys with lists of polygons, defined as sequential
        external vertices. It is the responsibility of the user to delete
        these generated lists in order to avoid memory leaks.
        """
        ...
    
    def InsertTriangle(self, int_tuple):
        """
        V.InsertTriangle((int, ...))
        C++: void InsertTriangle(const vtkIdType *abc)
        
        Insert a triangle as a triplet of point IDs.
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Prepare the builder for a new set of inputs.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkResourceFileLocator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkResourceFileLocator - utility to locate resource files.
    
    Superclass: vtkObject
    
    VTK based application often need to locate resource files, such
    configuration files, Python modules, etc. vtkResourceFileLocator
    provides methods that can be used to locate such resource files at
    runtime.
    
    Using `Locate`, one can locate files relative to an anchor directory
    such as the executable directory, or the library directory.
    
    `GetLibraryPathForSymbolUnix` and `GetLibraryPathForSymbolWin32`
    methods can be used to locate the library that provides a particular
    symbol. For example, this is used by `vtkPythonInterpreter` to ensure
    that the `vtk` Python package is located relative the VTK libraries,
    irrespective of the application location.
    """
    def GetLibraryPathForSymbolUnix(self, string):
        """
        V.GetLibraryPathForSymbolUnix(string) -> string
        C++: static std::string GetLibraryPathForSymbolUnix(
            const char *symbolname)
        
        Returns the name of the library providing the symbol. For
        example, if you want to locate where the VTK libraries located
        call `GetLibraryPathForSymbolUnix("GetVTKVersion")` on Unixes and
        `GetLibraryPathForSymbolWin32(GetVTKVersion)` on Windows.
        Alternatively, you can simply use the
        `vtkGetLibraryPathForSymbol(GetVTKVersion)` macro that makes the
        appropriate call as per the current platform.
        """
        ...
    
    def GetLibraryPathForSymbolWin32(self, void):
        """
        V.GetLibraryPathForSymbolWin32(void) -> string
        C++: static std::string GetLibraryPathForSymbolWin32(
            const void *fptr)
        
        Returns the name of the library providing the symbol. For
        example, if you want to locate where the VTK libraries located
        call `GetLibraryPathForSymbolUnix("GetVTKVersion")` on Unixes and
        `GetLibraryPathForSymbolWin32(GetVTKVersion)` on Windows.
        Alternatively, you can simply use the
        `vtkGetLibraryPathForSymbol(GetVTKVersion)` macro that makes the
        appropriate call as per the current platform.
        """
        ...
    
    def GetLogVerbosity(self):
        """
        V.GetLogVerbosity() -> int
        C++: virtual int GetLogVerbosity()
        
        The log verbosity to use when logging information about the
        resource searching. Default is `vtkLogger::VERBOSITY_TRACE`.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPrintDebugInformation(self):
        """
        V.GetPrintDebugInformation() -> bool
        C++: bool GetPrintDebugInformation()
        
        Enable/disable printing of testing of various path during
        `Locate` to `stdout`.
        
        @deprecated Instead use `SetLogVerbosity` to specify the
        verbosity at which this instance should log trace information.
        Default is `vtkLogger::VERBOSITY_TRACE`.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Locate(self, string, string_1, string_2):
        """
        V.Locate(string, string, string) -> string
        C++: virtual std::string Locate(const std::string &anchor,
            const std::string &landmark,
            const std::string &defaultDir=std::string())
        V.Locate(string, Stvector_ISt6stringE, string, string) -> string
        C++: virtual std::string Locate(const std::string &anchor,
            const std::vector<std::string> &landmark_prefixes,
            const std::string &landmark,
            const std::string &defaultDir=std::string())
        
        Given a starting anchor directory, look for the landmark file
        relative to the anchor. If found return the anchor. If not found,
        go one directory up and then look the landmark file again.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkResourceFileLocator
        C++: vtkResourceFileLocator *NewInstance()
        """
        ...
    
    def PrintDebugInformationOff(self):
        """
        V.PrintDebugInformationOff()
        C++: void PrintDebugInformationOff()
        
        Enable/disable printing of testing of various path during
        `Locate` to `stdout`.
        
        @deprecated Instead use `SetLogVerbosity` to specify the
        verbosity at which this instance should log trace information.
        Default is `vtkLogger::VERBOSITY_TRACE`.
        """
        ...
    
    def PrintDebugInformationOn(self):
        """
        V.PrintDebugInformationOn()
        C++: void PrintDebugInformationOn()
        
        Enable/disable printing of testing of various path during
        `Locate` to `stdout`.
        
        @deprecated Instead use `SetLogVerbosity` to specify the
        verbosity at which this instance should log trace information.
        Default is `vtkLogger::VERBOSITY_TRACE`.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkResourceFileLocator
        C++: static vtkResourceFileLocator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLogVerbosity(self, p_int):
        """
        V.SetLogVerbosity(int)
        C++: virtual void SetLogVerbosity(int _arg)
        
        The log verbosity to use when logging information about the
        resource searching. Default is `vtkLogger::VERBOSITY_TRACE`.
        """
        ...
    
    def SetPrintDebugInformation(self, bool):
        """
        V.SetPrintDebugInformation(bool)
        C++: void SetPrintDebugInformation(bool)
        
        Enable/disable printing of testing of various path during
        `Locate` to `stdout`.
        
        @deprecated Instead use `SetLogVerbosity` to specify the
        verbosity at which this instance should log trace information.
        Default is `vtkLogger::VERBOSITY_TRACE`.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
