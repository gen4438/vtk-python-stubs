"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageMagnify(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageMagnify - magnify an image by an integer value
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageMagnify maps each pixel of the input onto a nxmx... region of
    the output.  Location (0,0,...) remains in the same place. The
    magnification occurs via pixel replication, or if Interpolate is on,
    by bilinear interpolation. Initially, interpolation is off and
    magnification factors are set to 1 in all directions.
    """
    def GetInterpolate(self):
        """
        V.GetInterpolate() -> int
        C++: virtual vtkTypeBool GetInterpolate()
        
        Turn interpolation on and off (pixel replication is used when
        off). Initially, interpolation is off.
        """
        ...
    
    def GetMagnificationFactors(self):
        """
        V.GetMagnificationFactors() -> (int, int, int)
        C++: virtual int *GetMagnificationFactors()
        
        Set/Get the integer magnification factors in the i-j-k
        directions. Initially, factors are set to 1 in all directions.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InterpolateOff(self):
        """
        V.InterpolateOff()
        C++: virtual void InterpolateOff()
        
        Turn interpolation on and off (pixel replication is used when
        off). Initially, interpolation is off.
        """
        ...
    
    def InterpolateOn(self):
        """
        V.InterpolateOn()
        C++: virtual void InterpolateOn()
        
        Turn interpolation on and off (pixel replication is used when
        off). Initially, interpolation is off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMagnify
        C++: vtkImageMagnify *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMagnify
        C++: static vtkImageMagnify *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInterpolate(self, p_int):
        """
        V.SetInterpolate(int)
        C++: virtual void SetInterpolate(vtkTypeBool _arg)
        
        Turn interpolation on and off (pixel replication is used when
        off). Initially, interpolation is off.
        """
        ...
    
    def SetMagnificationFactors(self, p_int, p_int_1, p_int_2):
        """
        V.SetMagnificationFactors(int, int, int)
        C++: virtual void SetMagnificationFactors(int _arg1, int _arg2,
            int _arg3)
        V.SetMagnificationFactors((int, int, int))
        C++: virtual void SetMagnificationFactors(const int _arg[3])
        
        Set/Get the integer magnification factors in the i-j-k
        directions. Initially, factors are set to 1 in all directions.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


