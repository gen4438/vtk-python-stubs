"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageCast(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageCast - Image Data type Casting Filter
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageCast filter casts the input type to match the output type in
    the image processing pipeline.  The filter does nothing if the input
    already has the correct type.  To specify the "CastTo" type, use
    "SetOutputScalarType" method.
    
    @warning
    As vtkImageCast only casts values without rescaling them, its use is
    not recommended. vtkImageShiftScale is the recommended way to change
    the type of an image data.
    
    @sa
    vtkImageThreshold vtkImageShiftScale
    """
    def ClampOverflowOff(self):
        """
        V.ClampOverflowOff()
        C++: virtual void ClampOverflowOff()
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default ClampOverflow is off.
        """
        ...
    
    def ClampOverflowOn(self):
        """
        V.ClampOverflowOn()
        C++: virtual void ClampOverflowOn()
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default ClampOverflow is off.
        """
        ...
    
    def GetClampOverflow(self):
        """
        V.GetClampOverflow() -> int
        C++: virtual vtkTypeBool GetClampOverflow()
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default ClampOverflow is off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageCast
        C++: vtkImageCast *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageCast
        C++: static vtkImageCast *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClampOverflow(self, p_int):
        """
        V.SetClampOverflow(int)
        C++: virtual void SetClampOverflow(vtkTypeBool _arg)
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default ClampOverflow is off.
        """
        ...
    
    def SetOutputScalarType(self, p_int):
        """
        V.SetOutputScalarType(int)
        C++: virtual void SetOutputScalarType(int _arg)
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToChar(self):
        """
        V.SetOutputScalarTypeToChar()
        C++: void SetOutputScalarTypeToChar()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToInt(self):
        """
        V.SetOutputScalarTypeToInt()
        C++: void SetOutputScalarTypeToInt()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToLong(self):
        """
        V.SetOutputScalarTypeToLong()
        C++: void SetOutputScalarTypeToLong()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToShort(self):
        """
        V.SetOutputScalarTypeToShort()
        C++: void SetOutputScalarTypeToShort()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedChar(self):
        """
        V.SetOutputScalarTypeToUnsignedChar()
        C++: void SetOutputScalarTypeToUnsignedChar()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedInt(self):
        """
        V.SetOutputScalarTypeToUnsignedInt()
        C++: void SetOutputScalarTypeToUnsignedInt()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedLong(self):
        """
        V.SetOutputScalarTypeToUnsignedLong()
        C++: void SetOutputScalarTypeToUnsignedLong()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedShort(self):
        """
        V.SetOutputScalarTypeToUnsignedShort()
        C++: void SetOutputScalarTypeToUnsignedShort()
        
        Set the desired output scalar type to cast to.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


