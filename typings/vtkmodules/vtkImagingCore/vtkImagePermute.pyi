"""
This type stub file was generated by pyright.
"""

from .vtkImageReslice import vtkImageReslice

class vtkImagePermute(vtkImageReslice):
    """
    vtkImagePermute - Permutes axes of input.
    
    Superclass: vtkImageReslice
    
    vtkImagePermute reorders the axes of the input. Filtered axes specify
    the input axes which become X, Y, Z.  The input has to have the same
    scalar type of the output. The filter does copy the data when it
    executes. This filter is actually a very thin wrapper around
    vtkImageReslice.
    """
    def GetFilteredAxes(self):
        """
        V.GetFilteredAxes() -> (int, int, int)
        C++: virtual int *GetFilteredAxes()
        
        The filtered axes are the input axes that get relabeled to X,Y,Z.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImagePermute
        C++: vtkImagePermute *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImagePermute
        C++: static vtkImagePermute *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFilteredAxes(self, p_int, p_int_1, p_int_2):
        """
        V.SetFilteredAxes(int, int, int)
        C++: void SetFilteredAxes(int x, int y, int z)
        V.SetFilteredAxes((int, int, int))
        C++: void SetFilteredAxes(const int xyz[3])
        
        The filtered axes are the input axes that get relabeled to X,Y,Z.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


