"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageMask(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageMask - Combines a mask and an image.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageMask combines a mask with an image.  Non zero mask implies
    the output pixel will be the same as the image. If a mask pixel is
    zero,  then the output pixel is set to "MaskedValue".  The filter
    also has the option to pass the mask through a boolean not operation
    before processing the image. This reverses the passed and replaced
    pixels. The two inputs should have the same "WholeExtent". The mask
    input should be unsigned char, and the image scalar type is the same
    as the output scalar type.
    """
    def GetMaskAlpha(self):
        """
        V.GetMaskAlpha() -> float
        C++: virtual double GetMaskAlpha()
        
        Set/Get the alpha blending value for the mask The input image is
        assumed to be at alpha = 1.0 and the mask image uses this alpha
        to blend using an over operator.
        """
        ...
    
    def GetMaskAlphaMaxValue(self):
        """
        V.GetMaskAlphaMaxValue() -> float
        C++: virtual double GetMaskAlphaMaxValue()
        
        Set/Get the alpha blending value for the mask The input image is
        assumed to be at alpha = 1.0 and the mask image uses this alpha
        to blend using an over operator.
        """
        ...
    
    def GetMaskAlphaMinValue(self):
        """
        V.GetMaskAlphaMinValue() -> float
        C++: virtual double GetMaskAlphaMinValue()
        
        Set/Get the alpha blending value for the mask The input image is
        assumed to be at alpha = 1.0 and the mask image uses this alpha
        to blend using an over operator.
        """
        ...
    
    def GetMaskedOutputValue(self):
        """
        V.GetMaskedOutputValue() -> (float, ...)
        C++: double *GetMaskedOutputValue()
        """
        ...
    
    def GetMaskedOutputValueLength(self):
        """
        V.GetMaskedOutputValueLength() -> int
        C++: int GetMaskedOutputValueLength()
        """
        ...
    
    def GetNotMask(self):
        """
        V.GetNotMask() -> int
        C++: virtual vtkTypeBool GetNotMask()
        
        When Not Mask is on, the mask is passed through a boolean not
        before it is used to mask the image.  The effect is to pass the
        pixels where the input mask is zero, and replace the pixels where
        the input value is non zero.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMask
        C++: vtkImageMask *NewInstance()
        """
        ...
    
    def NotMaskOff(self):
        """
        V.NotMaskOff()
        C++: virtual void NotMaskOff()
        
        When Not Mask is on, the mask is passed through a boolean not
        before it is used to mask the image.  The effect is to pass the
        pixels where the input mask is zero, and replace the pixels where
        the input value is non zero.
        """
        ...
    
    def NotMaskOn(self):
        """
        V.NotMaskOn()
        C++: virtual void NotMaskOn()
        
        When Not Mask is on, the mask is passed through a boolean not
        before it is used to mask the image.  The effect is to pass the
        pixels where the input mask is zero, and replace the pixels where
        the input value is non zero.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMask
        C++: static vtkImageMask *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetImageInputData(self, vtkImageData):
        """
        V.SetImageInputData(vtkImageData)
        C++: void SetImageInputData(vtkImageData *in)
        
        Set the input to be masked.
        """
        ...
    
    def SetInput1Data(self, vtkDataObject):
        """
        V.SetInput1Data(vtkDataObject)
        C++: virtual void SetInput1Data(vtkDataObject *in)
        
        Set the two inputs to this filter
        """
        ...
    
    def SetInput2Data(self, vtkDataObject):
        """
        V.SetInput2Data(vtkDataObject)
        C++: virtual void SetInput2Data(vtkDataObject *in)
        """
        ...
    
    def SetMaskAlpha(self, p_float):
        """
        V.SetMaskAlpha(float)
        C++: virtual void SetMaskAlpha(double _arg)
        
        Set/Get the alpha blending value for the mask The input image is
        assumed to be at alpha = 1.0 and the mask image uses this alpha
        to blend using an over operator.
        """
        ...
    
    def SetMaskedOutputValue(self, p_int, *float):
        """
        V.SetMaskedOutputValue(int, [float, ...])
        C++: void SetMaskedOutputValue(int num, double *v)
        V.SetMaskedOutputValue(float)
        C++: void SetMaskedOutputValue(double v)
        V.SetMaskedOutputValue(float, float)
        C++: void SetMaskedOutputValue(double v1, double v2)
        V.SetMaskedOutputValue(float, float, float)
        C++: void SetMaskedOutputValue(double v1, double v2, double v3)
        
        SetGet the value of the output pixel replaced by mask.
        """
        ...
    
    def SetMaskInputData(self, vtkImageData):
        """
        V.SetMaskInputData(vtkImageData)
        C++: void SetMaskInputData(vtkImageData *in)
        
        Set the mask to be used.
        """
        ...
    
    def SetNotMask(self, p_int):
        """
        V.SetNotMask(int)
        C++: virtual void SetNotMask(vtkTypeBool _arg)
        
        When Not Mask is on, the mask is passed through a boolean not
        before it is used to mask the image.  The effect is to pass the
        pixels where the input mask is zero, and replace the pixels where
        the input value is non zero.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


