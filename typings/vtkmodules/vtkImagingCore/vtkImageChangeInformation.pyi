"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageChangeInformation(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageChangeInformation - modify spacing, origin and extent.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageChangeInformation  modify the spacing, origin, or extent of
    the data without changing the data itself.  The data is not resampled
    by this filter, only the information accompanying the data is
    modified.
    """
    def CenterImageOff(self):
        """
        V.CenterImageOff()
        C++: virtual void CenterImageOff()
        
        Set the Origin of the output so that image coordinate (0,0,0)
        lies at the Center of the data set.  This will override
        SetOutputOrigin.  This is often a useful operation to apply
        before using vtkImageReslice to apply a transformation to an
        image.
        """
        ...
    
    def CenterImageOn(self):
        """
        V.CenterImageOn()
        C++: virtual void CenterImageOn()
        
        Set the Origin of the output so that image coordinate (0,0,0)
        lies at the Center of the data set.  This will override
        SetOutputOrigin.  This is often a useful operation to apply
        before using vtkImageReslice to apply a transformation to an
        image.
        """
        ...
    
    def GetCenterImage(self):
        """
        V.GetCenterImage() -> int
        C++: virtual vtkTypeBool GetCenterImage()
        
        Set the Origin of the output so that image coordinate (0,0,0)
        lies at the Center of the data set.  This will override
        SetOutputOrigin.  This is often a useful operation to apply
        before using vtkImageReslice to apply a transformation to an
        image.
        """
        ...
    
    def GetExtentTranslation(self):
        """
        V.GetExtentTranslation() -> (int, int, int)
        C++: virtual int *GetExtentTranslation()
        
        Apply a translation to the extent.
        """
        ...
    
    def GetInformationInput(self):
        """
        V.GetInformationInput() -> vtkImageData
        C++: virtual vtkImageData *GetInformationInput()
        
        Copy the information from another data set.  By default, the
        information is copied from the input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOriginScale(self):
        """
        V.GetOriginScale() -> (float, float, float)
        C++: virtual double *GetOriginScale()
        
        Apply a scale to the origin.  The scale is applied before the
        translation.
        """
        ...
    
    def GetOriginTranslation(self):
        """
        V.GetOriginTranslation() -> (float, float, float)
        C++: virtual double *GetOriginTranslation()
        
        Apply a translation to the origin.
        """
        ...
    
    def GetOutputExtentStart(self):
        """
        V.GetOutputExtentStart() -> (int, int, int)
        C++: virtual int *GetOutputExtentStart()
        
        Specify new starting values for the extent explicitly. These
        values are used as WholeExtent[0], WholeExtent[2] and
        WholeExtent[4] of the output.  The default is to the use the
        extent start of the Input, or of the InformationInput if
        InformationInput is set.
        """
        ...
    
    def GetOutputOrigin(self):
        """
        V.GetOutputOrigin() -> (float, float, float)
        C++: virtual double *GetOutputOrigin()
        
        Specify a new data origin explicitly.  The default is to use the
        origin of the Input, or of the InformationInput if
        InformationInput is set.
        """
        ...
    
    def GetOutputSpacing(self):
        """
        V.GetOutputSpacing() -> (float, float, float)
        C++: virtual double *GetOutputSpacing()
        
        Specify a new data spacing explicitly.  The default is to use the
        spacing of the Input, or of the InformationInput if
        InformationInput is set.
        """
        ...
    
    def GetSpacingScale(self):
        """
        V.GetSpacingScale() -> (float, float, float)
        C++: virtual double *GetSpacingScale()
        
        Apply a scale factor to the spacing.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageChangeInformation
        C++: vtkImageChangeInformation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageChangeInformation
        C++: static vtkImageChangeInformation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCenterImage(self, p_int):
        """
        V.SetCenterImage(int)
        C++: virtual void SetCenterImage(vtkTypeBool _arg)
        
        Set the Origin of the output so that image coordinate (0,0,0)
        lies at the Center of the data set.  This will override
        SetOutputOrigin.  This is often a useful operation to apply
        before using vtkImageReslice to apply a transformation to an
        image.
        """
        ...
    
    def SetExtentTranslation(self, p_int, p_int_1, p_int_2):
        """
        V.SetExtentTranslation(int, int, int)
        C++: virtual void SetExtentTranslation(int _arg1, int _arg2,
            int _arg3)
        V.SetExtentTranslation((int, int, int))
        C++: virtual void SetExtentTranslation(const int _arg[3])
        
        Apply a translation to the extent.
        """
        ...
    
    def SetInformationInputData(self, vtkImageData):
        """
        V.SetInformationInputData(vtkImageData)
        C++: virtual void SetInformationInputData(vtkImageData *)
        
        Copy the information from another data set.  By default, the
        information is copied from the input.
        """
        ...
    
    def SetOriginScale(self, p_float, p_float_1, p_float_2):
        """
        V.SetOriginScale(float, float, float)
        C++: virtual void SetOriginScale(double _arg1, double _arg2,
            double _arg3)
        V.SetOriginScale((float, float, float))
        C++: virtual void SetOriginScale(const double _arg[3])
        
        Apply a scale to the origin.  The scale is applied before the
        translation.
        """
        ...
    
    def SetOriginTranslation(self, p_float, p_float_1, p_float_2):
        """
        V.SetOriginTranslation(float, float, float)
        C++: virtual void SetOriginTranslation(double _arg1, double _arg2,
             double _arg3)
        V.SetOriginTranslation((float, float, float))
        C++: virtual void SetOriginTranslation(const double _arg[3])
        
        Apply a translation to the origin.
        """
        ...
    
    def SetOutputExtentStart(self, p_int, p_int_1, p_int_2):
        """
        V.SetOutputExtentStart(int, int, int)
        C++: virtual void SetOutputExtentStart(int _arg1, int _arg2,
            int _arg3)
        V.SetOutputExtentStart((int, int, int))
        C++: virtual void SetOutputExtentStart(const int _arg[3])
        
        Specify new starting values for the extent explicitly. These
        values are used as WholeExtent[0], WholeExtent[2] and
        WholeExtent[4] of the output.  The default is to the use the
        extent start of the Input, or of the InformationInput if
        InformationInput is set.
        """
        ...
    
    def SetOutputOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetOutputOrigin(float, float, float)
        C++: virtual void SetOutputOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetOutputOrigin((float, float, float))
        C++: virtual void SetOutputOrigin(const double _arg[3])
        
        Specify a new data origin explicitly.  The default is to use the
        origin of the Input, or of the InformationInput if
        InformationInput is set.
        """
        ...
    
    def SetOutputSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetOutputSpacing(float, float, float)
        C++: virtual void SetOutputSpacing(double _arg1, double _arg2,
            double _arg3)
        V.SetOutputSpacing((float, float, float))
        C++: virtual void SetOutputSpacing(const double _arg[3])
        
        Specify a new data spacing explicitly.  The default is to use the
        spacing of the Input, or of the InformationInput if
        InformationInput is set.
        """
        ...
    
    def SetSpacingScale(self, p_float, p_float_1, p_float_2):
        """
        V.SetSpacingScale(float, float, float)
        C++: virtual void SetSpacingScale(double _arg1, double _arg2,
            double _arg3)
        V.SetSpacingScale((float, float, float))
        C++: virtual void SetSpacingScale(const double _arg[3])
        
        Apply a scale factor to the spacing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


