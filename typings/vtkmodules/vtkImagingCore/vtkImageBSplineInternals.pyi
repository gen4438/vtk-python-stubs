"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkImageBSplineInternals(object):
    """
    vtkImageBSplineInternals - BSpline code from P.
    
    Thevenaz
    
    vtkImageBSplineInternals provides code for image interpolation with
    b-splines of various degrees.  This code computes the coefficients
    from the image, and computes the weights for the b-spline kernels.
    
    This class is based on code provided by Philippe Thevenaz of EPFL,
    Lausanne, Switzerland.  Please acknowledge his contribution by citing
    the following paper: [1] P. Thevenaz, T. Blu, M. Unser, "Interpolation
    Revisited,"
        IEEE Transactions on Medical Imaging 19(7):739-758, 2000.
    
    The clamped boundary condition (which is the default) is taken from
    code presented in the following paper: [2] D. Ruijters, P. Thevenaz,
        "GPU Prefilter for Accurate Cubic B-spline Interpolation,"
        The Computer Journal, doi: 10.1093/comjnl/bxq086, 2010.
    """
    def ConvertToInterpolationCoefficients(self, *float, **kwargs):
        """
        V.ConvertToInterpolationCoefficients([float, ...], int, int,
            [float, float, float, float], int, float)
        C++: static void ConvertToInterpolationCoefficients(double data[],
             long size, long border, double poles[4], long numPoles,
            double tol)
        
        Internal method.  Compute the coefficients for one row of data.
        """
        ...
    
    def GetInterpolationWeights(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.GetInterpolationWeights([float, float, float, float, float,
            float, float, float, float, float], float, int) -> int
        C++: static int GetInterpolationWeights(double weights[10],
            double w, long degree)
        
        Internal method.  Get interpolation weights for offset w, where w
        is between 0 and 1.  You must provide the degree of the spline.
        """
        ...
    
    def GetPoleValues(self, p_float=..., p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.GetPoleValues([float, float, float, float], int, int) -> int
        C++: static int GetPoleValues(double poles[4], long &numPoles,
            long degree)
        
        Internal method.  Get the poles for spline of given degree.
        Returns zero if an illegal degree is given (allowed range 2 to
        9). The parameter numPoles will be set to a value between 1 and
        4.
        """
        ...
    
    def InterpolatedValue(self, float_tuple, *float, **kwargs):
        """
        V.InterpolatedValue((float, ...), [float, ...], int, int, int,
            int, float, float, float, int, int) -> int
        C++: static int InterpolatedValue(const double *coeffs,
            double *value, long width, long height, long slices,
            long depth, double x, double y, double z, long degree,
            long border)
        
        Internal method.  Interpolate a value from the supplied 3D array
        of coefficients with dimensions width x height x slices.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


