"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageBlend(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageBlend - blend images together using alpha or opacity
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageBlend takes L, LA, RGB, or RGBA images as input and blends
    them according to the alpha values and/or the opacity setting for
    each input.
    
    The spacing, origin, extent, and number of components of the output
    are the same as those for the first input.  If the input has an alpha
    component, then this component is copied unchanged into the output.
    In addition, if the first input has either one component or two
    components i.e. if it is either L (greyscale) or LA (greyscale +
    alpha) then all other inputs must also be L or LA.
    
    Different blending modes are available:
    
    Normal (default) : This is the standard blending mode used by OpenGL
    and other graphics packages.  The output always has the same number
    of components and the same extent as the first input.  The alpha
    value of the first input is not used in the blending computation,
    instead it is copied directly to the output.
    
    output <- input[0]
    foreach input i {
      foreach pixel px {
        r <- input[i](px)(alpha) * opacity[i]
        f <- (255 - r)
        output(px) <- output(px) * f + input(px) * r
      }
    }
    
    Compound : Images are compounded together and each component is
    scaled by the sum of the alpha/opacity values. Use the
    CompoundThreshold method to set specify a threshold in compound mode.
    Pixels with opacity*alpha less or equal than this threshold are
    ignored. The alpha value of the first input, if present, is NOT
    copied to the alpha value of the output.  The output always has the
    same number of components and the same extent as the first input. If
    CompoundAlpha is set, the alpha value of the output is also computed
    using the alpha weighted blend calculation.
    
    output <- 0
    foreach pixel px {
      sum <- 0
      foreach input i {
        r <- input[i](px)(alpha) * opacity(i)
        sum <- sum + r
        if r > threshold {
          output(px) <- output(px) + input(px) * r
        }
      }
      output(px) <- output(px) / sum
    }
    """
    def CompoundAlphaOff(self):
        """
        V.CompoundAlphaOff()
        C++: virtual void CompoundAlphaOff()
        
        Set whether to use the alpha weighted blending calculation on the
        alpha component. If false, the alpha component is set to the sum
        of the product of opacity and alpha from all inputs.
        """
        ...
    
    def CompoundAlphaOn(self):
        """
        V.CompoundAlphaOn()
        C++: virtual void CompoundAlphaOn()
        
        Set whether to use the alpha weighted blending calculation on the
        alpha component. If false, the alpha component is set to the sum
        of the product of opacity and alpha from all inputs.
        """
        ...
    
    def GetBlendMode(self):
        """
        V.GetBlendMode() -> int
        C++: virtual int GetBlendMode()
        
        Set the blend mode
        """
        ...
    
    def GetBlendModeAsString(self):
        """
        V.GetBlendModeAsString() -> string
        C++: const char *GetBlendModeAsString(void)
        
        Set the blend mode
        """
        ...
    
    def GetBlendModeMaxValue(self):
        """
        V.GetBlendModeMaxValue() -> int
        C++: virtual int GetBlendModeMaxValue()
        
        Set the blend mode
        """
        ...
    
    def GetBlendModeMinValue(self):
        """
        V.GetBlendModeMinValue() -> int
        C++: virtual int GetBlendModeMinValue()
        
        Set the blend mode
        """
        ...
    
    def GetCompoundAlpha(self):
        """
        V.GetCompoundAlpha() -> int
        C++: virtual vtkTypeBool GetCompoundAlpha()
        
        Set whether to use the alpha weighted blending calculation on the
        alpha component. If false, the alpha component is set to the sum
        of the product of opacity and alpha from all inputs.
        """
        ...
    
    def GetCompoundThreshold(self):
        """
        V.GetCompoundThreshold() -> float
        C++: virtual double GetCompoundThreshold()
        
        Specify a threshold in compound mode. Pixels with opacity*alpha
        less or equal the threshold are ignored.
        """
        ...
    
    def GetInput(self, p_int):
        """
        V.GetInput(int) -> vtkDataObject
        C++: vtkDataObject *GetInput(int num)
        V.GetInput() -> vtkDataObject
        C++: vtkDataObject *GetInput()
        
        Get one input to this filter. This method is only for support of
        old-style pipeline connections.  When writing new code you should
        use vtkAlgorithm::GetInputConnection(0, num).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfInputs(self):
        """
        V.GetNumberOfInputs() -> int
        C++: int GetNumberOfInputs()
        
        Get the number of inputs to this filter. This method is only for
        support of old-style pipeline connections.  When writing new code
        you should use vtkAlgorithm::GetNumberOfInputConnections(0).
        """
        ...
    
    def GetOpacity(self, p_int):
        """
        V.GetOpacity(int) -> float
        C++: double GetOpacity(int idx)
        
        Set the opacity of an input image: the alpha values of the image
        are multiplied by the opacity.  The opacity of image idx=0 is
        ignored.
        """
        ...
    
    def GetStencil(self):
        """
        V.GetStencil() -> vtkImageStencilData
        C++: vtkImageStencilData *GetStencil()
        
        Set a stencil to apply when blending the data.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageBlend
        C++: vtkImageBlend *NewInstance()
        """
        ...
    
    def ReplaceNthInputConnection(self, p_int, vtkAlgorithmOutput):
        """
        V.ReplaceNthInputConnection(int, vtkAlgorithmOutput)
        C++: virtual void ReplaceNthInputConnection(int idx,
            vtkAlgorithmOutput *input)
        
        Replace one of the input connections with a new input.  You can
        only replace input connections that you previously created with
        AddInputConnection() or, in the case of the first input, with
        SetInputConnection().
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageBlend
        C++: static vtkImageBlend *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBlendMode(self, p_int):
        """
        V.SetBlendMode(int)
        C++: virtual void SetBlendMode(int _arg)
        
        Set the blend mode
        """
        ...
    
    def SetBlendModeToCompound(self):
        """
        V.SetBlendModeToCompound()
        C++: void SetBlendModeToCompound()
        
        Set the blend mode
        """
        ...
    
    def SetBlendModeToNormal(self):
        """
        V.SetBlendModeToNormal()
        C++: void SetBlendModeToNormal()
        
        Set the blend mode
        """
        ...
    
    def SetCompoundAlpha(self, p_int):
        """
        V.SetCompoundAlpha(int)
        C++: virtual void SetCompoundAlpha(vtkTypeBool _arg)
        
        Set whether to use the alpha weighted blending calculation on the
        alpha component. If false, the alpha component is set to the sum
        of the product of opacity and alpha from all inputs.
        """
        ...
    
    def SetCompoundThreshold(self, p_float):
        """
        V.SetCompoundThreshold(float)
        C++: virtual void SetCompoundThreshold(double _arg)
        
        Specify a threshold in compound mode. Pixels with opacity*alpha
        less or equal the threshold are ignored.
        """
        ...
    
    def SetInputData(self, p_int, vtkDataObject):
        """
        V.SetInputData(int, vtkDataObject)
        C++: void SetInputData(int num, vtkDataObject *input)
        V.SetInputData(vtkDataObject)
        C++: void SetInputData(vtkDataObject *input)
        
        Assign a data object as input. Note that this method does not
        establish a pipeline connection. Use SetInputConnection() to
        setup a pipeline connection.
        """
        ...
    
    def SetOpacity(self, p_int, p_float):
        """
        V.SetOpacity(int, float)
        C++: void SetOpacity(int idx, double opacity)
        
        Set the opacity of an input image: the alpha values of the image
        are multiplied by the opacity.  The opacity of image idx=0 is
        ignored.
        """
        ...
    
    def SetStencilConnection(self, vtkAlgorithmOutput):
        """
        V.SetStencilConnection(vtkAlgorithmOutput)
        C++: void SetStencilConnection(vtkAlgorithmOutput *algOutput)
        
        Set a stencil to apply when blending the data. Create a pipeline
        connection.
        """
        ...
    
    def SetStencilData(self, vtkImageStencilData):
        """
        V.SetStencilData(vtkImageStencilData)
        C++: void SetStencilData(vtkImageStencilData *stencil)
        
        Set a stencil to apply when blending the data.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


