"""
This type stub file was generated by pyright.
"""

from .vtkImageReslice import vtkImageReslice

class vtkImageResliceToColors(vtkImageReslice):
    """
    vtkImageResliceToColors - Reslice and produce color scalars.
    
    Superclass: vtkImageReslice
    
    vtkImageResliceToColors is an extension of vtkImageReslice that
    produces color scalars.  It should be provided with a lookup table
    that defines the output colors and the desired range of input values
    to map to those colors.  If the input has multiple components, then
    you should use the SetVectorMode() method of the lookup table to
    specify how the vectors will be colored.  If no lookup table is
    provided, then the input must already be color scalars, but they will
    be converted to the specified output format.
    @sa
    vtkImageMapToColors
    """
    def BypassOff(self):
        """
        V.BypassOff()
        C++: void BypassOff()
        """
        ...
    
    def BypassOn(self):
        """
        V.BypassOn()
        C++: void BypassOn()
        """
        ...
    
    def GetBypass(self):
        """
        V.GetBypass() -> int
        C++: int GetBypass()
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: virtual vtkScalarsToColors *GetLookupTable()
        
        Set a lookup table to apply to the data.  Use the Range,
        VectorMode, and VectorComponents of the table to control the
        mapping of the input data to colors.  If any output voxel is
        transformed to a point outside the input volume, then that voxel
        will be set to the BackgroundColor.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        When determining the modified time of the filter, this checks the
        modified time of the transform and matrix.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputFormat(self):
        """
        V.GetOutputFormat() -> int
        C++: virtual int GetOutputFormat()
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def GetOutputFormatMaxValue(self):
        """
        V.GetOutputFormatMaxValue() -> int
        C++: virtual int GetOutputFormatMaxValue()
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def GetOutputFormatMinValue(self):
        """
        V.GetOutputFormatMinValue() -> int
        C++: virtual int GetOutputFormatMinValue()
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageResliceToColors
        C++: vtkImageResliceToColors *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageResliceToColors
        C++: static vtkImageResliceToColors *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBypass(self, p_int):
        """
        V.SetBypass(int)
        C++: void SetBypass(int bypass)
        
        Bypass the color mapping operation and output the scalar values
        directly.  The output values will be float, rather than the input
        data type.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: virtual void SetLookupTable(vtkScalarsToColors *table)
        
        Set a lookup table to apply to the data.  Use the Range,
        VectorMode, and VectorComponents of the table to control the
        mapping of the input data to colors.  If any output voxel is
        transformed to a point outside the input volume, then that voxel
        will be set to the BackgroundColor.
        """
        ...
    
    def SetOutputFormat(self, p_int):
        """
        V.SetOutputFormat(int)
        C++: virtual void SetOutputFormat(int _arg)
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def SetOutputFormatToLuminance(self):
        """
        V.SetOutputFormatToLuminance()
        C++: void SetOutputFormatToLuminance()
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def SetOutputFormatToLuminanceAlpha(self):
        """
        V.SetOutputFormatToLuminanceAlpha()
        C++: void SetOutputFormatToLuminanceAlpha()
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def SetOutputFormatToRGB(self):
        """
        V.SetOutputFormatToRGB()
        C++: void SetOutputFormatToRGB()
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def SetOutputFormatToRGBA(self):
        """
        V.SetOutputFormatToRGBA()
        C++: void SetOutputFormatToRGBA()
        
        Set the output format, the default is RGBA.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


