"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageThreshold(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageThreshold - Flexible threshold
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageThreshold can do binary or continuous thresholding for lower,
    upper or a range of data.  The output data type may be different than
    the output, but defaults to the same type.
    """
    def GetInValue(self):
        """
        V.GetInValue() -> float
        C++: virtual double GetInValue()
        
        Replace the in range pixels with this value.
        """
        ...
    
    def GetLowerThreshold(self):
        """
        V.GetLowerThreshold() -> float
        C++: virtual double GetLowerThreshold()
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def GetOutValue(self):
        """
        V.GetOutValue() -> float
        C++: virtual double GetOutValue()
        
        Replace the in range pixels with this value.
        """
        ...
    
    def GetReplaceIn(self):
        """
        V.GetReplaceIn() -> int
        C++: virtual vtkTypeBool GetReplaceIn()
        
        Determines whether to replace the pixel in range with InValue
        """
        ...
    
    def GetReplaceOut(self):
        """
        V.GetReplaceOut() -> int
        C++: virtual vtkTypeBool GetReplaceOut()
        
        Determines whether to replace the pixel out of range with
        OutValue
        """
        ...
    
    def GetUpperThreshold(self):
        """
        V.GetUpperThreshold() -> float
        C++: virtual double GetUpperThreshold()
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageThreshold
        C++: vtkImageThreshold *NewInstance()
        """
        ...
    
    def ReplaceInOff(self):
        """
        V.ReplaceInOff()
        C++: virtual void ReplaceInOff()
        
        Determines whether to replace the pixel in range with InValue
        """
        ...
    
    def ReplaceInOn(self):
        """
        V.ReplaceInOn()
        C++: virtual void ReplaceInOn()
        
        Determines whether to replace the pixel in range with InValue
        """
        ...
    
    def ReplaceOutOff(self):
        """
        V.ReplaceOutOff()
        C++: virtual void ReplaceOutOff()
        
        Determines whether to replace the pixel out of range with
        OutValue
        """
        ...
    
    def ReplaceOutOn(self):
        """
        V.ReplaceOutOn()
        C++: virtual void ReplaceOutOn()
        
        Determines whether to replace the pixel out of range with
        OutValue
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageThreshold
        C++: static vtkImageThreshold *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInValue(self, p_float):
        """
        V.SetInValue(float)
        C++: void SetInValue(double val)
        
        Replace the in range pixels with this value.
        """
        ...
    
    def SetOutputScalarType(self, p_int):
        """
        V.SetOutputScalarType(int)
        C++: virtual void SetOutputScalarType(int _arg)
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToChar(self):
        """
        V.SetOutputScalarTypeToChar()
        C++: void SetOutputScalarTypeToChar()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToInt(self):
        """
        V.SetOutputScalarTypeToInt()
        C++: void SetOutputScalarTypeToInt()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToLong(self):
        """
        V.SetOutputScalarTypeToLong()
        C++: void SetOutputScalarTypeToLong()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToShort(self):
        """
        V.SetOutputScalarTypeToShort()
        C++: void SetOutputScalarTypeToShort()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToSignedChar(self):
        """
        V.SetOutputScalarTypeToSignedChar()
        C++: void SetOutputScalarTypeToSignedChar()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToUnsignedChar(self):
        """
        V.SetOutputScalarTypeToUnsignedChar()
        C++: void SetOutputScalarTypeToUnsignedChar()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToUnsignedInt(self):
        """
        V.SetOutputScalarTypeToUnsignedInt()
        C++: void SetOutputScalarTypeToUnsignedInt()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToUnsignedLong(self):
        """
        V.SetOutputScalarTypeToUnsignedLong()
        C++: void SetOutputScalarTypeToUnsignedLong()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutputScalarTypeToUnsignedShort(self):
        """
        V.SetOutputScalarTypeToUnsignedShort()
        C++: void SetOutputScalarTypeToUnsignedShort()
        
        Set the desired output scalar type to cast to
        """
        ...
    
    def SetOutValue(self, p_float):
        """
        V.SetOutValue(float)
        C++: void SetOutValue(double val)
        
        Replace the in range pixels with this value.
        """
        ...
    
    def SetReplaceIn(self, p_int):
        """
        V.SetReplaceIn(int)
        C++: virtual void SetReplaceIn(vtkTypeBool _arg)
        
        Determines whether to replace the pixel in range with InValue
        """
        ...
    
    def SetReplaceOut(self, p_int):
        """
        V.SetReplaceOut(int)
        C++: virtual void SetReplaceOut(vtkTypeBool _arg)
        
        Determines whether to replace the pixel out of range with
        OutValue
        """
        ...
    
    def ThresholdBetween(self, p_float, p_float_1):
        """
        V.ThresholdBetween(float, float)
        C++: void ThresholdBetween(double lower, double upper)
        
        The values in a range (inclusive) match
        """
        ...
    
    def ThresholdByLower(self, p_float):
        """
        V.ThresholdByLower(float)
        C++: void ThresholdByLower(double thresh)
        
        The values less than or equal to the value match.
        """
        ...
    
    def ThresholdByUpper(self, p_float):
        """
        V.ThresholdByUpper(float)
        C++: void ThresholdByUpper(double thresh)
        
        The values greater than or equal to the value match.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


