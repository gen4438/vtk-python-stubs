"""
This type stub file was generated by pyright.
"""

from .vtkImageReslice import vtkImageReslice

class vtkImageResample(vtkImageReslice):
    """
    vtkImageResample - Resamples an image to be larger or smaller.
    
    Superclass: vtkImageReslice
    
    This filter produces an output with different spacing (and extent)
    than the input.  Linear interpolation can be used to resample the
    data. The Output spacing can be set explicitly or relative to input
    spacing with the SetAxisMagnificationFactor method.
    """
    def GetAxisMagnificationFactor(self, p_int, vtkInformation):
        """
        V.GetAxisMagnificationFactor(int, vtkInformation) -> float
        C++: double GetAxisMagnificationFactor(int axis,
            vtkInformation *inInfo=nullptr)
        
        Get the computed magnification factor for a specific axis. The
        input information is required to compute the value.
        """
        ...
    
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Dimensionality is the number of axes which are considered during
        execution. To process images dimensionality would be set to 2.
        This has the same effect as setting the magnification of the
        third axis to 1.0
        """
        ...
    
    def GetMagnificationFactors(self):
        """
        V.GetMagnificationFactors() -> (float, float, float)
        C++: virtual double *GetMagnificationFactors()
        
        Set/Get Magnification factors. Zero is a reserved value
        indicating values have not been computed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageResample
        C++: vtkImageResample *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageResample
        C++: static vtkImageResample *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAxisMagnificationFactor(self, p_int, p_float):
        """
        V.SetAxisMagnificationFactor(int, float)
        C++: void SetAxisMagnificationFactor(int axis, double factor)
        
        Set/Get Magnification factors. Zero is a reserved value
        indicating values have not been computed.
        """
        ...
    
    def SetAxisOutputSpacing(self, p_int, p_float):
        """
        V.SetAxisOutputSpacing(int, float)
        C++: void SetAxisOutputSpacing(int axis, double spacing)
        
        Set desired spacing. Zero is a reserved value indicating spacing
        has not been set.
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Dimensionality is the number of axes which are considered during
        execution. To process images dimensionality would be set to 2.
        This has the same effect as setting the magnification of the
        third axis to 1.0
        """
        ...
    
    def SetMagnificationFactors(self, p_float, p_float_1, p_float_2):
        """
        V.SetMagnificationFactors(float, float, float)
        C++: void SetMagnificationFactors(double fx, double fy, double fz)
        V.SetMagnificationFactors((float, float, float))
        C++: void SetMagnificationFactors(const double f[3])
        
        Set/Get Magnification factors. Zero is a reserved value
        indicating values have not been computed.
        """
        ...
    
    def SetOutputSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetOutputSpacing(float, float, float)
        C++: void SetOutputSpacing(double sx, double sy, double sz)
            override;
        V.SetOutputSpacing((float, float, float))
        C++: void SetOutputSpacing(const double spacing[3]) override;
        
        Set desired spacing. Zero is a reserved value indicating spacing
        has not been set.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


