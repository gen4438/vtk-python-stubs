"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageResize(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageResize - High-quality image resizing filter
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageResize will magnify or shrink an image with interpolation and
    antialiasing.  The resizing is done with a 5-lobe Lanczos-windowed
    sinc filter that is bandlimited to the output sampling frequency in
    order to avoid aliasing when the image size is reduced.  This filter
    utilizes a O(n) algorithm to provide good efficiency even though the
    filtering kernel is large.  The sinc interpolator can be turned off
    if nearest-neighbor interpolation is required, or it can be replaced
    with a different vtkImageInterpolator object.@par Thanks: Thanks to
    David Gobbi for contributing this class to VTK.
    """
    def BorderOff(self):
        """
        V.BorderOff()
        C++: virtual void BorderOff()
        
        If Border is Off (the default), then the centers of each of the
        corner voxels will be considered to form the rectangular bounds
        of the image. This is the way that VTK normally computes image
        bounds.  If Border is On, then the image bounds will be defined
        by the outer corners of the voxels. This setting impacts how the
        resizing is done.  For example, if a MagnificationFactor of two
        is applied to a 256x256 image, the output image will be 512x512
        if Border is On, or 511x511 if Border is Off.
        """
        ...
    
    def BorderOn(self):
        """
        V.BorderOn()
        C++: virtual void BorderOn()
        
        If Border is Off (the default), then the centers of each of the
        corner voxels will be considered to form the rectangular bounds
        of the image. This is the way that VTK normally computes image
        bounds.  If Border is On, then the image bounds will be defined
        by the outer corners of the voxels. This setting impacts how the
        resizing is done.  For example, if a MagnificationFactor of two
        is applied to a 256x256 image, the output image will be 512x512
        if Border is On, or 511x511 if Border is Off.
        """
        ...
    
    def CroppingOff(self):
        """
        V.CroppingOff()
        C++: virtual void CroppingOff()
        
        Whether to crop the input image before resizing (Off by default).
         If this is On, then the CroppingRegion must be set.
        """
        ...
    
    def CroppingOn(self):
        """
        V.CroppingOn()
        C++: virtual void CroppingOn()
        
        Whether to crop the input image before resizing (Off by default).
         If this is On, then the CroppingRegion must be set.
        """
        ...
    
    def GetBorder(self):
        """
        V.GetBorder() -> int
        C++: virtual vtkTypeBool GetBorder()
        
        If Border is Off (the default), then the centers of each of the
        corner voxels will be considered to form the rectangular bounds
        of the image. This is the way that VTK normally computes image
        bounds.  If Border is On, then the image bounds will be defined
        by the outer corners of the voxels. This setting impacts how the
        resizing is done.  For example, if a MagnificationFactor of two
        is applied to a 256x256 image, the output image will be 512x512
        if Border is On, or 511x511 if Border is Off.
        """
        ...
    
    def GetCropping(self):
        """
        V.GetCropping() -> int
        C++: virtual vtkTypeBool GetCropping()
        
        Whether to crop the input image before resizing (Off by default).
         If this is On, then the CroppingRegion must be set.
        """
        ...
    
    def GetCroppingRegion(self):
        """
        V.GetCroppingRegion() -> (float, float, float, float, float,
            float)
        C++: virtual double *GetCroppingRegion()
        
        If Cropping is On, then the CroppingRegion will be used to crop
        the image before it is resized.  The region must be specified in
        data coordinates, rather than voxel indices.
        """
        ...
    
    def GetInterpolate(self):
        """
        V.GetInterpolate() -> int
        C++: virtual vtkTypeBool GetInterpolate()
        
        Turn interpolation on or off (by default, interpolation is on).
        """
        ...
    
    def GetInterpolator(self):
        """
        V.GetInterpolator() -> vtkAbstractImageInterpolator
        C++: virtual vtkAbstractImageInterpolator *GetInterpolator()
        
        Set the interpolator for resampling the data.
        """
        ...
    
    def GetMagnificationFactors(self):
        """
        V.GetMagnificationFactors() -> (float, float, float)
        C++: virtual double *GetMagnificationFactors()
        
        The desired magnification factor, meaning that the sample spacing
        will be reduced by this factor.  This setting is only used if the
        ResizeMethod is set to MagnificationFactors.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the modified time of the filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputDimensions(self):
        """
        V.GetOutputDimensions() -> (int, int, int)
        C++: virtual int *GetOutputDimensions()
        
        The desired output dimensions.  This is only used if the
        ResizeMethod is set to OutputDimensions.  If you want to keep one
        of the image dimensions the same as the input, then set that
        dimension to -1.
        """
        ...
    
    def GetOutputSpacing(self):
        """
        V.GetOutputSpacing() -> (float, float, float)
        C++: virtual double *GetOutputSpacing()
        
        The desired output spacing.  This is only used if the
        ResizeMethod is set to OutputSpacing.  If you want to keep one of
        the original spacing values, then set that spacing value to zero.
        """
        ...
    
    def GetResizeMethod(self):
        """
        V.GetResizeMethod() -> int
        C++: virtual int GetResizeMethod()
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def GetResizeMethodAsString(self):
        """
        V.GetResizeMethodAsString() -> string
        C++: virtual const char *GetResizeMethodAsString()
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def GetResizeMethodMaxValue(self):
        """
        V.GetResizeMethodMaxValue() -> int
        C++: virtual int GetResizeMethodMaxValue()
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def GetResizeMethodMinValue(self):
        """
        V.GetResizeMethodMinValue() -> int
        C++: virtual int GetResizeMethodMinValue()
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def InterpolateOff(self):
        """
        V.InterpolateOff()
        C++: virtual void InterpolateOff()
        
        Turn interpolation on or off (by default, interpolation is on).
        """
        ...
    
    def InterpolateOn(self):
        """
        V.InterpolateOn()
        C++: virtual void InterpolateOn()
        
        Turn interpolation on or off (by default, interpolation is on).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageResize
        C++: vtkImageResize *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageResize
        C++: static vtkImageResize *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBorder(self, p_int):
        """
        V.SetBorder(int)
        C++: virtual void SetBorder(vtkTypeBool _arg)
        
        If Border is Off (the default), then the centers of each of the
        corner voxels will be considered to form the rectangular bounds
        of the image. This is the way that VTK normally computes image
        bounds.  If Border is On, then the image bounds will be defined
        by the outer corners of the voxels. This setting impacts how the
        resizing is done.  For example, if a MagnificationFactor of two
        is applied to a 256x256 image, the output image will be 512x512
        if Border is On, or 511x511 if Border is Off.
        """
        ...
    
    def SetCropping(self, p_int):
        """
        V.SetCropping(int)
        C++: virtual void SetCropping(vtkTypeBool _arg)
        
        Whether to crop the input image before resizing (Off by default).
         If this is On, then the CroppingRegion must be set.
        """
        ...
    
    def SetCroppingRegion(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetCroppingRegion(float, float, float, float, float, float)
        C++: virtual void SetCroppingRegion(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetCroppingRegion((float, float, float, float, float, float))
        C++: virtual void SetCroppingRegion(const double _arg[6])
        
        If Cropping is On, then the CroppingRegion will be used to crop
        the image before it is resized.  The region must be specified in
        data coordinates, rather than voxel indices.
        """
        ...
    
    def SetInterpolate(self, p_int):
        """
        V.SetInterpolate(int)
        C++: virtual void SetInterpolate(vtkTypeBool _arg)
        
        Turn interpolation on or off (by default, interpolation is on).
        """
        ...
    
    def SetInterpolator(self, vtkAbstractImageInterpolator):
        """
        V.SetInterpolator(vtkAbstractImageInterpolator)
        C++: virtual void SetInterpolator(
            vtkAbstractImageInterpolator *sampler)
        
        Set the interpolator for resampling the data.
        """
        ...
    
    def SetMagnificationFactors(self, p_float, p_float_1, p_float_2):
        """
        V.SetMagnificationFactors(float, float, float)
        C++: virtual void SetMagnificationFactors(double _arg1,
            double _arg2, double _arg3)
        V.SetMagnificationFactors((float, float, float))
        C++: virtual void SetMagnificationFactors(const double _arg[3])
        
        The desired magnification factor, meaning that the sample spacing
        will be reduced by this factor.  This setting is only used if the
        ResizeMethod is set to MagnificationFactors.
        """
        ...
    
    def SetOutputDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetOutputDimensions(int, int, int)
        C++: virtual void SetOutputDimensions(int _arg1, int _arg2,
            int _arg3)
        V.SetOutputDimensions((int, int, int))
        C++: virtual void SetOutputDimensions(const int _arg[3])
        
        The desired output dimensions.  This is only used if the
        ResizeMethod is set to OutputDimensions.  If you want to keep one
        of the image dimensions the same as the input, then set that
        dimension to -1.
        """
        ...
    
    def SetOutputSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetOutputSpacing(float, float, float)
        C++: virtual void SetOutputSpacing(double _arg1, double _arg2,
            double _arg3)
        V.SetOutputSpacing((float, float, float))
        C++: virtual void SetOutputSpacing(const double _arg[3])
        
        The desired output spacing.  This is only used if the
        ResizeMethod is set to OutputSpacing.  If you want to keep one of
        the original spacing values, then set that spacing value to zero.
        """
        ...
    
    def SetResizeMethod(self, p_int):
        """
        V.SetResizeMethod(int)
        C++: virtual void SetResizeMethod(int _arg)
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def SetResizeMethodToMagnificationFactors(self):
        """
        V.SetResizeMethodToMagnificationFactors()
        C++: void SetResizeMethodToMagnificationFactors()
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def SetResizeMethodToOutputDimensions(self):
        """
        V.SetResizeMethodToOutputDimensions()
        C++: void SetResizeMethodToOutputDimensions()
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def SetResizeMethodToOutputSpacing(self):
        """
        V.SetResizeMethodToOutputSpacing()
        C++: void SetResizeMethodToOutputSpacing()
        
        The resizing method to use.  The default is to set the output
        image dimensions, and allow the filter to resize the image to
        these new dimensions.  It is also possible to resize the image by
        setting the output image spacing or by setting a magnification
        factor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    MAGNIFICATION_FACTORS = ...
    OUTPUT_DIMENSIONS = ...
    OUTPUT_SPACING = ...
    __dict__ = ...
    __vtkname__ = ...


