"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageShiftScale(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageShiftScale - shift and scale an input image
    
    Superclass: vtkThreadedImageAlgorithm
    
    With vtkImageShiftScale Pixels are shifted (a constant value added)
    and then scaled (multiplied by a scalar. As a convenience, this class
    allows you to set the output scalar type similar to vtkImageCast.
    This is because shift scale operations frequently convert data types.
    """
    def ClampOverflowOff(self):
        """
        V.ClampOverflowOff()
        C++: virtual void ClampOverflowOff()
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default, ClampOverflow is off.
        """
        ...
    
    def ClampOverflowOn(self):
        """
        V.ClampOverflowOn()
        C++: virtual void ClampOverflowOn()
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default, ClampOverflow is off.
        """
        ...
    
    def GetClampOverflow(self):
        """
        V.GetClampOverflow() -> int
        C++: virtual vtkTypeBool GetClampOverflow()
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default, ClampOverflow is off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def GetScale(self):
        """
        V.GetScale() -> float
        C++: virtual double GetScale()
        
        Set/Get the scale value. Each pixel is multiplied by this value.
        """
        ...
    
    def GetShift(self):
        """
        V.GetShift() -> float
        C++: virtual double GetShift()
        
        Set/Get the shift value. This value is added to each pixel
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageShiftScale
        C++: vtkImageShiftScale *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageShiftScale
        C++: static vtkImageShiftScale *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClampOverflow(self, p_int):
        """
        V.SetClampOverflow(int)
        C++: virtual void SetClampOverflow(vtkTypeBool _arg)
        
        When the ClampOverflow flag is on, the data is thresholded so
        that the output value does not exceed the max or min of the data
        type. Clamping is safer because otherwise you might invoke
        undefined behavior (and may crash) if the type conversion is out
        of range of the data type.  On the other hand, clamping is
        slower. By default, ClampOverflow is off.
        """
        ...
    
    def SetOutputScalarType(self, p_int):
        """
        V.SetOutputScalarType(int)
        C++: virtual void SetOutputScalarType(int _arg)
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToChar(self):
        """
        V.SetOutputScalarTypeToChar()
        C++: void SetOutputScalarTypeToChar()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToInt(self):
        """
        V.SetOutputScalarTypeToInt()
        C++: void SetOutputScalarTypeToInt()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToLong(self):
        """
        V.SetOutputScalarTypeToLong()
        C++: void SetOutputScalarTypeToLong()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToShort(self):
        """
        V.SetOutputScalarTypeToShort()
        C++: void SetOutputScalarTypeToShort()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedChar(self):
        """
        V.SetOutputScalarTypeToUnsignedChar()
        C++: void SetOutputScalarTypeToUnsignedChar()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedInt(self):
        """
        V.SetOutputScalarTypeToUnsignedInt()
        C++: void SetOutputScalarTypeToUnsignedInt()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedLong(self):
        """
        V.SetOutputScalarTypeToUnsignedLong()
        C++: void SetOutputScalarTypeToUnsignedLong()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedShort(self):
        """
        V.SetOutputScalarTypeToUnsignedShort()
        C++: void SetOutputScalarTypeToUnsignedShort()
        
        Set the desired output scalar type. The result of the shift and
        scale operations is cast to the type specified.
        """
        ...
    
    def SetScale(self, p_float):
        """
        V.SetScale(float)
        C++: virtual void SetScale(double _arg)
        
        Set/Get the scale value. Each pixel is multiplied by this value.
        """
        ...
    
    def SetShift(self, p_float):
        """
        V.SetShift(float)
        C++: virtual void SetShift(double _arg)
        
        Set/Get the shift value. This value is added to each pixel
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


