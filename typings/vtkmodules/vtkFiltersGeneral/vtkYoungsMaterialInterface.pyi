"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkYoungsMaterialInterface(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkYoungsMaterialInterface - reconstructs material interfaces
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    Reconstructs material interfaces from a mesh containing mixed cells
    (where several materials are mixed) this implementation is based on
    the youngs algorithm, generalized to arbitrary cell types and works
    on both 2D and 3D meshes. the main advantage of the youngs algorithm
    is it guarantees the material volume correctness. for 2D meshes, the
    AxisSymetric flag allows to switch between a pure 2D (planar)
    algorithm and an axis symmetric 2D algorithm handling volumes of
    revolution.
    
    @par Thanks: This file is part of the generalized Youngs material
    interface reconstruction algorithm contributed by
    
    CEA/DIF - Commissariat a l'Energie Atomique, Centre DAM Ile-De-France
    
    BP12, F-91297 Arpajon, France.
    
    Implementation by Thierry Carrard (thierry.carrard@cea.fr)
    Modification by Philippe Pebay (philippe.pebay@kitware.com)
    """
    def AddMaterialBlockMapping(self, p_int):
        """
        V.AddMaterialBlockMapping(int)
        C++: virtual void AddMaterialBlockMapping(int b)
        
        select blocks to be processed for each described material.
        """
        ...
    
    def AxisSymetricOff(self):
        """
        V.AxisSymetricOff()
        C++: virtual void AxisSymetricOff()
        
        Turns on/off AxisSymetric computation of 2D interfaces. in axis
        symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def AxisSymetricOn(self):
        """
        V.AxisSymetricOn()
        C++: virtual void AxisSymetricOn()
        
        Turns on/off AxisSymetric computation of 2D interfaces. in axis
        symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def FillMaterialOff(self):
        """
        V.FillMaterialOff()
        C++: virtual void FillMaterialOff()
        
        When FillMaterial is set to 1, the volume containing material is
        output and not only the interface surface.
        """
        ...
    
    def FillMaterialOn(self):
        """
        V.FillMaterialOn()
        C++: virtual void FillMaterialOn()
        
        When FillMaterial is set to 1, the volume containing material is
        output and not only the interface surface.
        """
        ...
    
    def GetAxisSymetric(self):
        """
        V.GetAxisSymetric() -> int
        C++: virtual vtkTypeBool GetAxisSymetric()
        
        Turns on/off AxisSymetric computation of 2D interfaces. in axis
        symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def GetFillMaterial(self):
        """
        V.GetFillMaterial() -> int
        C++: virtual vtkTypeBool GetFillMaterial()
        
        When FillMaterial is set to 1, the volume containing material is
        output and not only the interface surface.
        """
        ...
    
    def GetInverseNormal(self):
        """
        V.GetInverseNormal() -> int
        C++: virtual vtkTypeBool GetInverseNormal()
        
        Set/Get whether the normal vector has to be flipped.
        """
        ...
    
    def GetNumberOfDomains(self):
        """
        V.GetNumberOfDomains() -> int
        C++: virtual int GetNumberOfDomains()
        
        Only meaningful for LOVE software. returns the maximum number of
        blocks containing the same material
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfMaterials(self):
        """
        V.GetNumberOfMaterials() -> int
        C++: virtual int GetNumberOfMaterials()
        
        Sets/Gets the number of materials.
        """
        ...
    
    def GetOnionPeel(self):
        """
        V.GetOnionPeel() -> int
        C++: virtual vtkTypeBool GetOnionPeel()
        
        Set/Get OnionPeel flag. if this flag is on, the normal vector of
        the first material (which depends on material ordering) is used
        for all materials.
        """
        ...
    
    def GetReverseMaterialOrder(self):
        """
        V.GetReverseMaterialOrder() -> int
        C++: virtual vtkTypeBool GetReverseMaterialOrder()
        
        If this flag is on, material order in reversed. Otherwise,
        materials are sorted in ascending order depending on the given
        ordering array.
        """
        ...
    
    def GetUseAllBlocks(self):
        """
        V.GetUseAllBlocks() -> bool
        C++: virtual bool GetUseAllBlocks()
        
        Set/Get whether all material blocks should be used, irrespective
        of the material block mapping.
        """
        ...
    
    def GetUseFractionAsDistance(self):
        """
        V.GetUseFractionAsDistance() -> int
        C++: virtual vtkTypeBool GetUseFractionAsDistance()
        
        when UseFractionAsDistance is true, the volume fraction is
        interpreted as the distance of the cutting plane from the origin.
        in axis symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def GetVolumeFractionRange(self):
        """
        V.GetVolumeFractionRange() -> (float, float)
        C++: virtual double *GetVolumeFractionRange()
        
        Set/Get minimum and maximum volume fraction value. if a material
        fills a volume above the minimum value, the material is
        considered to be void. if a material fills a volume fraction
        beyond the maximum value it is considered as filling the whole
        volume.
        """
        ...
    
    def InverseNormalOff(self):
        """
        V.InverseNormalOff()
        C++: virtual void InverseNormalOff()
        
        Set/Get whether the normal vector has to be flipped.
        """
        ...
    
    def InverseNormalOn(self):
        """
        V.InverseNormalOn()
        C++: virtual void InverseNormalOn()
        
        Set/Get whether the normal vector has to be flipped.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkYoungsMaterialInterface
        C++: vtkYoungsMaterialInterface *NewInstance()
        """
        ...
    
    def OnionPeelOff(self):
        """
        V.OnionPeelOff()
        C++: virtual void OnionPeelOff()
        
        Set/Get OnionPeel flag. if this flag is on, the normal vector of
        the first material (which depends on material ordering) is used
        for all materials.
        """
        ...
    
    def OnionPeelOn(self):
        """
        V.OnionPeelOn()
        C++: virtual void OnionPeelOn()
        
        Set/Get OnionPeel flag. if this flag is on, the normal vector of
        the first material (which depends on material ordering) is used
        for all materials.
        """
        ...
    
    def RemoveAllMaterialBlockMappings(self):
        """
        V.RemoveAllMaterialBlockMappings()
        C++: virtual void RemoveAllMaterialBlockMappings()
        
        select blocks to be processed for each described material.
        """
        ...
    
    def RemoveAllMaterials(self):
        """
        V.RemoveAllMaterials()
        C++: virtual void RemoveAllMaterials()
        
        Removes all materials previously added.
        """
        ...
    
    def ReverseMaterialOrderOff(self):
        """
        V.ReverseMaterialOrderOff()
        C++: virtual void ReverseMaterialOrderOff()
        
        If this flag is on, material order in reversed. Otherwise,
        materials are sorted in ascending order depending on the given
        ordering array.
        """
        ...
    
    def ReverseMaterialOrderOn(self):
        """
        V.ReverseMaterialOrderOn()
        C++: virtual void ReverseMaterialOrderOn()
        
        If this flag is on, material order in reversed. Otherwise,
        materials are sorted in ascending order depending on the given
        ordering array.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkYoungsMaterialInterface
        C++: static vtkYoungsMaterialInterface *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAxisSymetric(self, p_int):
        """
        V.SetAxisSymetric(int)
        C++: virtual void SetAxisSymetric(vtkTypeBool _arg)
        
        Turns on/off AxisSymetric computation of 2D interfaces. in axis
        symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def SetFillMaterial(self, p_int):
        """
        V.SetFillMaterial(int)
        C++: virtual void SetFillMaterial(vtkTypeBool _arg)
        
        When FillMaterial is set to 1, the volume containing material is
        output and not only the interface surface.
        """
        ...
    
    def SetInverseNormal(self, p_int):
        """
        V.SetInverseNormal(int)
        C++: virtual void SetInverseNormal(vtkTypeBool _arg)
        
        Set/Get whether the normal vector has to be flipped.
        """
        ...
    
    def SetMaterialArrays(self, p_int, string, string_1, string_2, string_3, string_4):
        """
        V.SetMaterialArrays(int, string, string, string, string, string)
        C++: virtual void SetMaterialArrays(int i, const char *volume,
            const char *normalX, const char *normalY, const char *normalZ,
             const char *ordering)
        V.SetMaterialArrays(int, string, string, string)
        C++: virtual void SetMaterialArrays(int i, const char *volume,
            const char *normal, const char *ordering)
        
        Set ith Material arrays to be used as volume fraction, interface
        normal and material ordering. Each parameter name a cell array.
        """
        ...
    
    def SetMaterialNormalArray(self, p_int, string):
        """
        V.SetMaterialNormalArray(int, string)
        C++: virtual void SetMaterialNormalArray(int i,
            const char *normal)
        V.SetMaterialNormalArray(string, string)
        C++: virtual void SetMaterialNormalArray(const char *volume,
            const char *normal)
        
        Set ith Material arrays to be used as volume fraction, interface
        normal and material ordering. Each parameter name a cell array.
        """
        ...
    
    def SetMaterialOrderingArray(self, p_int, string):
        """
        V.SetMaterialOrderingArray(int, string)
        C++: virtual void SetMaterialOrderingArray(int i,
            const char *ordering)
        V.SetMaterialOrderingArray(string, string)
        C++: virtual void SetMaterialOrderingArray(const char *volume,
            const char *ordering)
        
        Set ith Material arrays to be used as volume fraction, interface
        normal and material ordering. Each parameter name a cell array.
        """
        ...
    
    def SetMaterialVolumeFractionArray(self, p_int, string):
        """
        V.SetMaterialVolumeFractionArray(int, string)
        C++: virtual void SetMaterialVolumeFractionArray(int i,
            const char *volume)
        
        Set ith Material arrays to be used as volume fraction, interface
        normal and material ordering. Each parameter name a cell array.
        """
        ...
    
    def SetNumberOfMaterials(self, p_int):
        """
        V.SetNumberOfMaterials(int)
        C++: virtual void SetNumberOfMaterials(int n)
        
        Sets/Gets the number of materials.
        """
        ...
    
    def SetOnionPeel(self, p_int):
        """
        V.SetOnionPeel(int)
        C++: virtual void SetOnionPeel(vtkTypeBool _arg)
        
        Set/Get OnionPeel flag. if this flag is on, the normal vector of
        the first material (which depends on material ordering) is used
        for all materials.
        """
        ...
    
    def SetReverseMaterialOrder(self, p_int):
        """
        V.SetReverseMaterialOrder(int)
        C++: virtual void SetReverseMaterialOrder(vtkTypeBool _arg)
        
        If this flag is on, material order in reversed. Otherwise,
        materials are sorted in ascending order depending on the given
        ordering array.
        """
        ...
    
    def SetUseAllBlocks(self, bool):
        """
        V.SetUseAllBlocks(bool)
        C++: virtual void SetUseAllBlocks(bool _arg)
        
        Set/Get whether all material blocks should be used, irrespective
        of the material block mapping.
        """
        ...
    
    def SetUseFractionAsDistance(self, p_int):
        """
        V.SetUseFractionAsDistance(int)
        C++: virtual void SetUseFractionAsDistance(vtkTypeBool _arg)
        
        when UseFractionAsDistance is true, the volume fraction is
        interpreted as the distance of the cutting plane from the origin.
        in axis symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def SetVolumeFractionRange(self, p_float, p_float_1):
        """
        V.SetVolumeFractionRange(float, float)
        C++: virtual void SetVolumeFractionRange(double _arg1,
            double _arg2)
        V.SetVolumeFractionRange((float, float))
        C++: void SetVolumeFractionRange(const double _arg[2])
        
        Set/Get minimum and maximum volume fraction value. if a material
        fills a volume above the minimum value, the material is
        considered to be void. if a material fills a volume fraction
        beyond the maximum value it is considered as filling the whole
        volume.
        """
        ...
    
    def UseAllBlocksOff(self):
        """
        V.UseAllBlocksOff()
        C++: virtual void UseAllBlocksOff()
        
        Set/Get whether all material blocks should be used, irrespective
        of the material block mapping.
        """
        ...
    
    def UseAllBlocksOn(self):
        """
        V.UseAllBlocksOn()
        C++: virtual void UseAllBlocksOn()
        
        Set/Get whether all material blocks should be used, irrespective
        of the material block mapping.
        """
        ...
    
    def UseFractionAsDistanceOff(self):
        """
        V.UseFractionAsDistanceOff()
        C++: virtual void UseFractionAsDistanceOff()
        
        when UseFractionAsDistance is true, the volume fraction is
        interpreted as the distance of the cutting plane from the origin.
        in axis symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def UseFractionAsDistanceOn(self):
        """
        V.UseFractionAsDistanceOn()
        C++: virtual void UseFractionAsDistanceOn()
        
        when UseFractionAsDistance is true, the volume fraction is
        interpreted as the distance of the cutting plane from the origin.
        in axis symmetric mode, 2D meshes are understood as volumes of
        revolution.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    MAX_CELL_POINTS = ...
    __dict__ = ...
    __vtkname__ = ...


