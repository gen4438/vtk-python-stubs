"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkWarpLens(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkWarpLens - deform geometry by applying lens distortion
    
    Superclass: vtkPointSetAlgorithm
    
    vtkWarpLens is a filter that modifies point coordinates by moving in
    accord with a lens distortion model.
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float)
        C++: double *GetCenter()
        
        Specify the center of radial distortion in pixels. This is
        obsoleted by newer instance variables.
        """
        ...
    
    def GetFormatHeight(self):
        """
        V.GetFormatHeight() -> float
        C++: virtual double GetFormatHeight()
        
        Specify the imager format width / height in mm
        """
        ...
    
    def GetFormatWidth(self):
        """
        V.GetFormatWidth() -> float
        C++: virtual double GetFormatWidth()
        
        Specify the imager format width / height in mm
        """
        ...
    
    def GetImageHeight(self):
        """
        V.GetImageHeight() -> int
        C++: virtual int GetImageHeight()
        
        Specify the image width / height in pixels
        """
        ...
    
    def GetImageWidth(self):
        """
        V.GetImageWidth() -> int
        C++: virtual int GetImageWidth()
        
        Specify the image width / height in pixels
        """
        ...
    
    def GetK1(self):
        """
        V.GetK1() -> float
        C++: virtual double GetK1()
        
        Specify the symmetric radial distortion parameters for the lens
        """
        ...
    
    def GetK2(self):
        """
        V.GetK2() -> float
        C++: virtual double GetK2()
        
        Specify the symmetric radial distortion parameters for the lens
        """
        ...
    
    def GetKappa(self):
        """
        V.GetKappa() -> float
        C++: double GetKappa()
        
        Specify second order symmetric radial lens distortion parameter.
        This is obsoleted by newer instance variables.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetP1(self):
        """
        V.GetP1() -> float
        C++: virtual double GetP1()
        
        Specify the decentering distortion parameters for the lens
        """
        ...
    
    def GetP2(self):
        """
        V.GetP2() -> float
        C++: virtual double GetP2()
        
        Specify the decentering distortion parameters for the lens
        """
        ...
    
    def GetPrincipalPoint(self):
        """
        V.GetPrincipalPoint() -> (float, float)
        C++: virtual double *GetPrincipalPoint()
        
        Specify the calibrated principal point of the camera/lens
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWarpLens
        C++: vtkWarpLens *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWarpLens
        C++: static vtkWarpLens *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1):
        """
        V.SetCenter(float, float)
        C++: void SetCenter(double centerX, double centerY)
        
        Specify the center of radial distortion in pixels. This is
        obsoleted by newer instance variables.
        """
        ...
    
    def SetFormatHeight(self, p_float):
        """
        V.SetFormatHeight(float)
        C++: virtual void SetFormatHeight(double _arg)
        
        Specify the imager format width / height in mm
        """
        ...
    
    def SetFormatWidth(self, p_float):
        """
        V.SetFormatWidth(float)
        C++: virtual void SetFormatWidth(double _arg)
        
        Specify the imager format width / height in mm
        """
        ...
    
    def SetImageHeight(self, p_int):
        """
        V.SetImageHeight(int)
        C++: virtual void SetImageHeight(int _arg)
        
        Specify the image width / height in pixels
        """
        ...
    
    def SetImageWidth(self, p_int):
        """
        V.SetImageWidth(int)
        C++: virtual void SetImageWidth(int _arg)
        
        Specify the image width / height in pixels
        """
        ...
    
    def SetK1(self, p_float):
        """
        V.SetK1(float)
        C++: virtual void SetK1(double _arg)
        
        Specify the symmetric radial distortion parameters for the lens
        """
        ...
    
    def SetK2(self, p_float):
        """
        V.SetK2(float)
        C++: virtual void SetK2(double _arg)
        
        Specify the symmetric radial distortion parameters for the lens
        """
        ...
    
    def SetKappa(self, p_float):
        """
        V.SetKappa(float)
        C++: void SetKappa(double kappa)
        
        Specify second order symmetric radial lens distortion parameter.
        This is obsoleted by newer instance variables.
        """
        ...
    
    def SetP1(self, p_float):
        """
        V.SetP1(float)
        C++: virtual void SetP1(double _arg)
        
        Specify the decentering distortion parameters for the lens
        """
        ...
    
    def SetP2(self, p_float):
        """
        V.SetP2(float)
        C++: virtual void SetP2(double _arg)
        
        Specify the decentering distortion parameters for the lens
        """
        ...
    
    def SetPrincipalPoint(self, p_float, p_float_1):
        """
        V.SetPrincipalPoint(float, float)
        C++: virtual void SetPrincipalPoint(double _arg1, double _arg2)
        V.SetPrincipalPoint((float, float))
        C++: void SetPrincipalPoint(const double _arg[2])
        
        Specify the calibrated principal point of the camera/lens
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


