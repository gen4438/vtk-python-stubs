"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkRandomAttributeGenerator(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkRandomAttributeGenerator - generate and create random data
    attributes
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkRandomAttributeGenerator is a filter that creates random
    attributes including scalars, vectors, normals, tensors, texture
    coordinates and/or general data arrays. These attributes can be
    generated as point data, cell data or general field data. The
    generation of each component is normalized between a user-specified
    minimum and maximum value.
    
    This filter provides that capability to specify the data type of the
    attributes, the range for each of the components, and the number of
    components. Note, however, that this flexibility only goes so far
    because some attributes (e.g., normals, vectors and tensors) are
    fixed in the number of components, and in the case of normals and
    tensors, are constrained in the values that some of the components
    can take (i.e., normals have magnitude one, and tensors are
    symmetric).
    
    @warning
    In general this class is used for debugging or testing purposes.
    
    @warning
    It is possible to generate multiple attributes simultaneously.
    
    @warning
    By default, no data is generated. Make sure to enable the generation
    of some attributes if you want this filter to affect the output. Also
    note that this filter passes through input geometry, topology and
    attributes. Newly created attributes may replace attribute data that
    would have otherwise been passed through.
    
    @sa
    vtkBrownianPoints
    """
    def AttributesConstantPerBlockOff(self):
        """
        V.AttributesConstantPerBlockOff()
        C++: virtual void AttributesConstantPerBlockOff()
        
        Indicate that the generated attributes are constant within a
        block. This can be used to highlight blocks in a composite
        dataset.
        """
        ...
    
    def AttributesConstantPerBlockOn(self):
        """
        V.AttributesConstantPerBlockOn()
        C++: virtual void AttributesConstantPerBlockOn()
        
        Indicate that the generated attributes are constant within a
        block. This can be used to highlight blocks in a composite
        dataset.
        """
        ...
    
    def GenerateAllCellDataOff(self):
        """
        V.GenerateAllCellDataOff()
        C++: void GenerateAllCellDataOff()
        
        Convenience methods for generating data: all data, all point
        data, or all cell data. For example, if all data is enabled, then
        all point, cell and field data is generated. If all point data is
        enabled, then point scalars, vectors, normals, tensors, tcoords,
        and a data array are produced.
        """
        ...
    
    def GenerateAllCellDataOn(self):
        """
        V.GenerateAllCellDataOn()
        C++: void GenerateAllCellDataOn()
        
        Convenience methods for generating data: all data, all point
        data, or all cell data. For example, if all data is enabled, then
        all point, cell and field data is generated. If all point data is
        enabled, then point scalars, vectors, normals, tensors, tcoords,
        and a data array are produced.
        """
        ...
    
    def GenerateAllDataOff(self):
        """
        V.GenerateAllDataOff()
        C++: void GenerateAllDataOff()
        
        Convenience methods for generating data: all data, all point
        data, or all cell data. For example, if all data is enabled, then
        all point, cell and field data is generated. If all point data is
        enabled, then point scalars, vectors, normals, tensors, tcoords,
        and a data array are produced.
        """
        ...
    
    def GenerateAllDataOn(self):
        """
        V.GenerateAllDataOn()
        C++: void GenerateAllDataOn()
        
        Convenience methods for generating data: all data, all point
        data, or all cell data. For example, if all data is enabled, then
        all point, cell and field data is generated. If all point data is
        enabled, then point scalars, vectors, normals, tensors, tcoords,
        and a data array are produced.
        """
        ...
    
    def GenerateAllPointDataOff(self):
        """
        V.GenerateAllPointDataOff()
        C++: void GenerateAllPointDataOff()
        
        Convenience methods for generating data: all data, all point
        data, or all cell data. For example, if all data is enabled, then
        all point, cell and field data is generated. If all point data is
        enabled, then point scalars, vectors, normals, tensors, tcoords,
        and a data array are produced.
        """
        ...
    
    def GenerateAllPointDataOn(self):
        """
        V.GenerateAllPointDataOn()
        C++: void GenerateAllPointDataOn()
        
        Convenience methods for generating data: all data, all point
        data, or all cell data. For example, if all data is enabled, then
        all point, cell and field data is generated. If all point data is
        enabled, then point scalars, vectors, normals, tensors, tcoords,
        and a data array are produced.
        """
        ...
    
    def GenerateCellArrayOff(self):
        """
        V.GenerateCellArrayOff()
        C++: virtual void GenerateCellArrayOff()
        
        Indicate that an arbitrary cell array is to be generated. The
        array is added to the cell data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates array
        (i.e., AddArray() is used). Note that the specified number of
        components is used to create the array.
        """
        ...
    
    def GenerateCellArrayOn(self):
        """
        V.GenerateCellArrayOn()
        C++: virtual void GenerateCellArrayOn()
        
        Indicate that an arbitrary cell array is to be generated. The
        array is added to the cell data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates array
        (i.e., AddArray() is used). Note that the specified number of
        components is used to create the array.
        """
        ...
    
    def GenerateCellNormalsOff(self):
        """
        V.GenerateCellNormalsOff()
        C++: virtual void GenerateCellNormalsOff()
        
        Indicate that cell normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GenerateCellNormalsOn(self):
        """
        V.GenerateCellNormalsOn()
        C++: virtual void GenerateCellNormalsOn()
        
        Indicate that cell normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GenerateCellScalarsOff(self):
        """
        V.GenerateCellScalarsOff()
        C++: virtual void GenerateCellScalarsOff()
        
        Indicate that cell scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def GenerateCellScalarsOn(self):
        """
        V.GenerateCellScalarsOn()
        C++: virtual void GenerateCellScalarsOn()
        
        Indicate that cell scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def GenerateCellTCoordsOff(self):
        """
        V.GenerateCellTCoordsOff()
        C++: virtual void GenerateCellTCoordsOff()
        
        Indicate that cell texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def GenerateCellTCoordsOn(self):
        """
        V.GenerateCellTCoordsOn()
        C++: virtual void GenerateCellTCoordsOn()
        
        Indicate that cell texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def GenerateCellTensorsOff(self):
        """
        V.GenerateCellTensorsOff()
        C++: virtual void GenerateCellTensorsOff()
        
        Indicate that cell tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def GenerateCellTensorsOn(self):
        """
        V.GenerateCellTensorsOn()
        C++: virtual void GenerateCellTensorsOn()
        
        Indicate that cell tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def GenerateCellVectorsOff(self):
        """
        V.GenerateCellVectorsOff()
        C++: virtual void GenerateCellVectorsOff()
        
        Indicate that cell vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GenerateCellVectorsOn(self):
        """
        V.GenerateCellVectorsOn()
        C++: virtual void GenerateCellVectorsOn()
        
        Indicate that cell vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GenerateFieldArrayOff(self):
        """
        V.GenerateFieldArrayOff()
        C++: virtual void GenerateFieldArrayOff()
        
        Indicate that an arbitrary field data array is to be generated.
        Note that the specified number of components is used to create
        the scalar.
        """
        ...
    
    def GenerateFieldArrayOn(self):
        """
        V.GenerateFieldArrayOn()
        C++: virtual void GenerateFieldArrayOn()
        
        Indicate that an arbitrary field data array is to be generated.
        Note that the specified number of components is used to create
        the scalar.
        """
        ...
    
    def GeneratePointArrayOff(self):
        """
        V.GeneratePointArrayOff()
        C++: virtual void GeneratePointArrayOff()
        
        Indicate that an arbitrary point array is to be generated. The
        array is added to the points data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates (i.e.,
        AddArray() is used). Note that the specified number of components
        is used to create the array.
        """
        ...
    
    def GeneratePointArrayOn(self):
        """
        V.GeneratePointArrayOn()
        C++: virtual void GeneratePointArrayOn()
        
        Indicate that an arbitrary point array is to be generated. The
        array is added to the points data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates (i.e.,
        AddArray() is used). Note that the specified number of components
        is used to create the array.
        """
        ...
    
    def GeneratePointNormalsOff(self):
        """
        V.GeneratePointNormalsOff()
        C++: virtual void GeneratePointNormalsOff()
        
        Indicate that point normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GeneratePointNormalsOn(self):
        """
        V.GeneratePointNormalsOn()
        C++: virtual void GeneratePointNormalsOn()
        
        Indicate that point normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GeneratePointScalarsOff(self):
        """
        V.GeneratePointScalarsOff()
        C++: virtual void GeneratePointScalarsOff()
        
        Indicate that point scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def GeneratePointScalarsOn(self):
        """
        V.GeneratePointScalarsOn()
        C++: virtual void GeneratePointScalarsOn()
        
        Indicate that point scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def GeneratePointTCoordsOff(self):
        """
        V.GeneratePointTCoordsOff()
        C++: virtual void GeneratePointTCoordsOff()
        
        Indicate that point texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def GeneratePointTCoordsOn(self):
        """
        V.GeneratePointTCoordsOn()
        C++: virtual void GeneratePointTCoordsOn()
        
        Indicate that point texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def GeneratePointTensorsOff(self):
        """
        V.GeneratePointTensorsOff()
        C++: virtual void GeneratePointTensorsOff()
        
        Indicate that point tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def GeneratePointTensorsOn(self):
        """
        V.GeneratePointTensorsOn()
        C++: virtual void GeneratePointTensorsOn()
        
        Indicate that point tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def GeneratePointVectorsOff(self):
        """
        V.GeneratePointVectorsOff()
        C++: virtual void GeneratePointVectorsOff()
        
        Indicate that point vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GeneratePointVectorsOn(self):
        """
        V.GeneratePointVectorsOn()
        C++: virtual void GeneratePointVectorsOn()
        
        Indicate that point vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GetAttributesConstantPerBlock(self):
        """
        V.GetAttributesConstantPerBlock() -> bool
        C++: virtual bool GetAttributesConstantPerBlock()
        
        Indicate that the generated attributes are constant within a
        block. This can be used to highlight blocks in a composite
        dataset.
        """
        ...
    
    def GetDataType(self):
        """
        V.GetDataType() -> int
        C++: virtual int GetDataType()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def GetGenerateCellArray(self):
        """
        V.GetGenerateCellArray() -> int
        C++: virtual vtkTypeBool GetGenerateCellArray()
        
        Indicate that an arbitrary cell array is to be generated. The
        array is added to the cell data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates array
        (i.e., AddArray() is used). Note that the specified number of
        components is used to create the array.
        """
        ...
    
    def GetGenerateCellNormals(self):
        """
        V.GetGenerateCellNormals() -> int
        C++: virtual vtkTypeBool GetGenerateCellNormals()
        
        Indicate that cell normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GetGenerateCellScalars(self):
        """
        V.GetGenerateCellScalars() -> int
        C++: virtual vtkTypeBool GetGenerateCellScalars()
        
        Indicate that cell scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def GetGenerateCellTCoords(self):
        """
        V.GetGenerateCellTCoords() -> int
        C++: virtual vtkTypeBool GetGenerateCellTCoords()
        
        Indicate that cell texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def GetGenerateCellTensors(self):
        """
        V.GetGenerateCellTensors() -> int
        C++: virtual vtkTypeBool GetGenerateCellTensors()
        
        Indicate that cell tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def GetGenerateCellVectors(self):
        """
        V.GetGenerateCellVectors() -> int
        C++: virtual vtkTypeBool GetGenerateCellVectors()
        
        Indicate that cell vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GetGenerateFieldArray(self):
        """
        V.GetGenerateFieldArray() -> int
        C++: virtual vtkTypeBool GetGenerateFieldArray()
        
        Indicate that an arbitrary field data array is to be generated.
        Note that the specified number of components is used to create
        the scalar.
        """
        ...
    
    def GetGeneratePointArray(self):
        """
        V.GetGeneratePointArray() -> int
        C++: virtual vtkTypeBool GetGeneratePointArray()
        
        Indicate that an arbitrary point array is to be generated. The
        array is added to the points data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates (i.e.,
        AddArray() is used). Note that the specified number of components
        is used to create the array.
        """
        ...
    
    def GetGeneratePointNormals(self):
        """
        V.GetGeneratePointNormals() -> int
        C++: virtual vtkTypeBool GetGeneratePointNormals()
        
        Indicate that point normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GetGeneratePointScalars(self):
        """
        V.GetGeneratePointScalars() -> int
        C++: virtual vtkTypeBool GetGeneratePointScalars()
        
        Indicate that point scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def GetGeneratePointTCoords(self):
        """
        V.GetGeneratePointTCoords() -> int
        C++: virtual vtkTypeBool GetGeneratePointTCoords()
        
        Indicate that point texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def GetGeneratePointTensors(self):
        """
        V.GetGeneratePointTensors() -> int
        C++: virtual vtkTypeBool GetGeneratePointTensors()
        
        Indicate that point tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def GetGeneratePointVectors(self):
        """
        V.GetGeneratePointVectors() -> int
        C++: virtual vtkTypeBool GetGeneratePointVectors()
        
        Indicate that point vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def GetMaximumComponentValue(self):
        """
        V.GetMaximumComponentValue() -> float
        C++: virtual double GetMaximumComponentValue()
        
        Set the maximum component value. This applies to all data that is
        generated, although normals and tensors have internal constraints
        that must be observed.
        """
        ...
    
    def GetMinimumComponentValue(self):
        """
        V.GetMinimumComponentValue() -> float
        C++: virtual double GetMinimumComponentValue()
        
        Set the minimum component value. This applies to all data that is
        generated, although normals and tensors have internal constraints
        that must be observed.
        """
        ...
    
    def GetNumberOfComponents(self):
        """
        V.GetNumberOfComponents() -> int
        C++: virtual int GetNumberOfComponents()
        
        Specify the number of components to generate. This value only
        applies to those attribute types that take a variable number of
        components. For example, a vector is only three components so the
        number of components is not applicable; whereas a scalar may
        support multiple, varying number of components.
        """
        ...
    
    def GetNumberOfComponentsMaxValue(self):
        """
        V.GetNumberOfComponentsMaxValue() -> int
        C++: virtual int GetNumberOfComponentsMaxValue()
        
        Specify the number of components to generate. This value only
        applies to those attribute types that take a variable number of
        components. For example, a vector is only three components so the
        number of components is not applicable; whereas a scalar may
        support multiple, varying number of components.
        """
        ...
    
    def GetNumberOfComponentsMinValue(self):
        """
        V.GetNumberOfComponentsMinValue() -> int
        C++: virtual int GetNumberOfComponentsMinValue()
        
        Specify the number of components to generate. This value only
        applies to those attribute types that take a variable number of
        components. For example, a vector is only three components so the
        number of components is not applicable; whereas a scalar may
        support multiple, varying number of components.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def GetNumberOfTuples(self):
        """
        V.GetNumberOfTuples() -> int
        C++: virtual vtkIdType GetNumberOfTuples()
        
        Specify the number of tuples to generate. This value only applies
        when creating general field data. In all other cases (i.e., point
        data or cell data), the number of tuples is controlled by the
        number of points and cells, respectively.
        """
        ...
    
    def GetNumberOfTuplesMaxValue(self):
        """
        V.GetNumberOfTuplesMaxValue() -> int
        C++: virtual vtkIdType GetNumberOfTuplesMaxValue()
        
        Specify the number of tuples to generate. This value only applies
        when creating general field data. In all other cases (i.e., point
        data or cell data), the number of tuples is controlled by the
        number of points and cells, respectively.
        """
        ...
    
    def GetNumberOfTuplesMinValue(self):
        """
        V.GetNumberOfTuplesMinValue() -> int
        C++: virtual vtkIdType GetNumberOfTuplesMinValue()
        
        Specify the number of tuples to generate. This value only applies
        when creating general field data. In all other cases (i.e., point
        data or cell data), the number of tuples is controlled by the
        number of points and cells, respectively.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRandomAttributeGenerator
        C++: vtkRandomAttributeGenerator *NewInstance()
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRandomAttributeGenerator
        C++: static vtkRandomAttributeGenerator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def SetAttributesConstantPerBlock(self, bool):
        """
        V.SetAttributesConstantPerBlock(bool)
        C++: virtual void SetAttributesConstantPerBlock(bool _arg)
        
        Indicate that the generated attributes are constant within a
        block. This can be used to highlight blocks in a composite
        dataset.
        """
        ...
    
    def SetComponentRange(self, p_float, p_float_1):
        """
        V.SetComponentRange(float, float)
        C++: void SetComponentRange(double minimumValue,
            double maximumValue)
        
        Set the minimum component value. This applies to all data that is
        generated, although normals and tensors have internal constraints
        that must be observed.
        """
        ...
    
    def SetDataType(self, p_int):
        """
        V.SetDataType(int)
        C++: virtual void SetDataType(int _arg)
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToBit(self):
        """
        V.SetDataTypeToBit()
        C++: void SetDataTypeToBit()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToChar(self):
        """
        V.SetDataTypeToChar()
        C++: void SetDataTypeToChar()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToDouble(self):
        """
        V.SetDataTypeToDouble()
        C++: void SetDataTypeToDouble()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToFloat(self):
        """
        V.SetDataTypeToFloat()
        C++: void SetDataTypeToFloat()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToIdType(self):
        """
        V.SetDataTypeToIdType()
        C++: void SetDataTypeToIdType()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToInt(self):
        """
        V.SetDataTypeToInt()
        C++: void SetDataTypeToInt()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToLong(self):
        """
        V.SetDataTypeToLong()
        C++: void SetDataTypeToLong()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToLongLong(self):
        """
        V.SetDataTypeToLongLong()
        C++: void SetDataTypeToLongLong()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToShort(self):
        """
        V.SetDataTypeToShort()
        C++: void SetDataTypeToShort()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToUnsignedChar(self):
        """
        V.SetDataTypeToUnsignedChar()
        C++: void SetDataTypeToUnsignedChar()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToUnsignedInt(self):
        """
        V.SetDataTypeToUnsignedInt()
        C++: void SetDataTypeToUnsignedInt()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToUnsignedLong(self):
        """
        V.SetDataTypeToUnsignedLong()
        C++: void SetDataTypeToUnsignedLong()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToUnsignedLongLong(self):
        """
        V.SetDataTypeToUnsignedLongLong()
        C++: void SetDataTypeToUnsignedLongLong()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetDataTypeToUnsignedShort(self):
        """
        V.SetDataTypeToUnsignedShort()
        C++: void SetDataTypeToUnsignedShort()
        
        Specify the type of array to create (all components of this array
        are of this type). This holds true for all arrays that are
        created.
        """
        ...
    
    def SetGenerateCellArray(self, p_int):
        """
        V.SetGenerateCellArray(int)
        C++: virtual void SetGenerateCellArray(vtkTypeBool _arg)
        
        Indicate that an arbitrary cell array is to be generated. The
        array is added to the cell data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates array
        (i.e., AddArray() is used). Note that the specified number of
        components is used to create the array.
        """
        ...
    
    def SetGenerateCellNormals(self, p_int):
        """
        V.SetGenerateCellNormals(int)
        C++: virtual void SetGenerateCellNormals(vtkTypeBool _arg)
        
        Indicate that cell normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def SetGenerateCellScalars(self, p_int):
        """
        V.SetGenerateCellScalars(int)
        C++: virtual void SetGenerateCellScalars(vtkTypeBool _arg)
        
        Indicate that cell scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def SetGenerateCellTCoords(self, p_int):
        """
        V.SetGenerateCellTCoords(int)
        C++: virtual void SetGenerateCellTCoords(vtkTypeBool _arg)
        
        Indicate that cell texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def SetGenerateCellTensors(self, p_int):
        """
        V.SetGenerateCellTensors(int)
        C++: virtual void SetGenerateCellTensors(vtkTypeBool _arg)
        
        Indicate that cell tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def SetGenerateCellVectors(self, p_int):
        """
        V.SetGenerateCellVectors(int)
        C++: virtual void SetGenerateCellVectors(vtkTypeBool _arg)
        
        Indicate that cell vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def SetGenerateFieldArray(self, p_int):
        """
        V.SetGenerateFieldArray(int)
        C++: virtual void SetGenerateFieldArray(vtkTypeBool _arg)
        
        Indicate that an arbitrary field data array is to be generated.
        Note that the specified number of components is used to create
        the scalar.
        """
        ...
    
    def SetGeneratePointArray(self, p_int):
        """
        V.SetGeneratePointArray(int)
        C++: virtual void SetGeneratePointArray(vtkTypeBool _arg)
        
        Indicate that an arbitrary point array is to be generated. The
        array is added to the points data but is not labeled as one of
        scalars, vectors, normals, tensors, or texture coordinates (i.e.,
        AddArray() is used). Note that the specified number of components
        is used to create the array.
        """
        ...
    
    def SetGeneratePointNormals(self, p_int):
        """
        V.SetGeneratePointNormals(int)
        C++: virtual void SetGeneratePointNormals(vtkTypeBool _arg)
        
        Indicate that point normals are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def SetGeneratePointScalars(self, p_int):
        """
        V.SetGeneratePointScalars(int)
        C++: virtual void SetGeneratePointScalars(vtkTypeBool _arg)
        
        Indicate that point scalars are to be generated. Note that the
        specified number of components is used to create the scalar.
        """
        ...
    
    def SetGeneratePointTCoords(self, p_int):
        """
        V.SetGeneratePointTCoords(int)
        C++: virtual void SetGeneratePointTCoords(vtkTypeBool _arg)
        
        Indicate that point texture coordinates are to be generated. Note
        that the specified number of components is used to create the
        texture coordinates (but must range between one and three).
        """
        ...
    
    def SetGeneratePointTensors(self, p_int):
        """
        V.SetGeneratePointTensors(int)
        C++: virtual void SetGeneratePointTensors(vtkTypeBool _arg)
        
        Indicate that point tensors are to be generated. Note that the
        number of components is always equal to nine.
        """
        ...
    
    def SetGeneratePointVectors(self, p_int):
        """
        V.SetGeneratePointVectors(int)
        C++: virtual void SetGeneratePointVectors(vtkTypeBool _arg)
        
        Indicate that point vectors are to be generated. Note that the
        number of components is always equal to three.
        """
        ...
    
    def SetMaximumComponentValue(self, p_float):
        """
        V.SetMaximumComponentValue(float)
        C++: virtual void SetMaximumComponentValue(double _arg)
        
        Set the maximum component value. This applies to all data that is
        generated, although normals and tensors have internal constraints
        that must be observed.
        """
        ...
    
    def SetMinimumComponentValue(self, p_float):
        """
        V.SetMinimumComponentValue(float)
        C++: virtual void SetMinimumComponentValue(double _arg)
        
        Set the minimum component value. This applies to all data that is
        generated, although normals and tensors have internal constraints
        that must be observed.
        """
        ...
    
    def SetNumberOfComponents(self, p_int):
        """
        V.SetNumberOfComponents(int)
        C++: virtual void SetNumberOfComponents(int _arg)
        
        Specify the number of components to generate. This value only
        applies to those attribute types that take a variable number of
        components. For example, a vector is only three components so the
        number of components is not applicable; whereas a scalar may
        support multiple, varying number of components.
        """
        ...
    
    def SetNumberOfTuples(self, p_int):
        """
        V.SetNumberOfTuples(int)
        C++: virtual void SetNumberOfTuples(vtkIdType _arg)
        
        Specify the number of tuples to generate. This value only applies
        when creating general field data. In all other cases (i.e., point
        data or cell data), the number of tuples is controlled by the
        number of points and cells, respectively.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


