"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTessellatorFilter(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkTessellatorFilter - approximate nonlinear FEM elements with
    simplices
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    This class approximates nonlinear FEM elements with linear simplices.
    
    Warning: This class is temporary and will go away at some point after
    ParaView 1.4.0.
    
    This filter rifles through all the cells in an input vtkDataSet. It
    tesselates each cell and uses the vtkStreamingTessellator and
    vtkDataSetEdgeSubdivisionCriterion classes to generate simplices that
    approximate the nonlinear mesh using some approximation metric
    (encoded in the particular
    vtkDataSetEdgeSubdivisionCriterion::EvaluateLocationAndFields
    implementation). The simplices are placed into the filter's output
    vtkDataSet object by the callback routines AddATetrahedron,
    AddATriangle, and AddALine, which are registered with the
    triangulator.
    
    The output mesh will have geometry and any fields specified as
    attributes in the input mesh's point data.  The attribute's copy
    flags are honored, except for normals.
    
    @par Internals: The filter's main member function is RequestData().
    This function first calls SetupOutput() which allocates arrays and
    some temporary variables for the primitive callbacks (OutputTriangle
    and OutputLine which are called by AddATriangle and AddALine,
    respectively).  Each cell is given an initial tessellation, which
    results in one or more calls to OutputTetrahedron, OutputTriangle or
    OutputLine to add elements to the OutputMesh. Finally, Teardown() is
    called to free the filter's working space.
    
    @sa
    vtkDataSetToUnstructuredGridFilter vtkDataSet vtkStreamingTessellator
    vtkDataSetEdgeSubdivisionCriterion
    """
    def GetChordError(self):
        """
        V.GetChordError() -> float
        C++: double GetChordError()
        
        These are convenience routines for setting properties maintained
        by the tessellator and subdivider. They are implemented here for
        ParaView's sake.
        """
        ...
    
    def GetMaximumNumberOfSubdivisions(self):
        """
        V.GetMaximumNumberOfSubdivisions() -> int
        C++: int GetMaximumNumberOfSubdivisions()
        
        These are convenience routines for setting properties maintained
        by the tessellator and subdivider. They are implemented here for
        ParaView's sake.
        """
        ...
    
    def GetMergePoints(self):
        """
        V.GetMergePoints() -> int
        C++: virtual vtkTypeBool GetMergePoints()
        
        The adaptive tessellation will output vertices that are not
        shared among cells, even where they should be. This can be
        corrected to some extents with a vtkMergeFilter. By default, the
        filter is off and vertices will not be shared.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return this object's modified time.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputDimension(self):
        """
        V.GetOutputDimension() -> int
        C++: virtual int GetOutputDimension()
        
        Set the dimension of the output tessellation. Cells in dimensions
        higher than the given value will have their boundaries of
        dimension OutputDimension tessellated. For example, if
        OutputDimension is 2, a hexahedron's quadrilateral faces would be
        tessellated rather than its interior.
        """
        ...
    
    def GetOutputDimensionMaxValue(self):
        """
        V.GetOutputDimensionMaxValue() -> int
        C++: virtual int GetOutputDimensionMaxValue()
        
        Set the dimension of the output tessellation. Cells in dimensions
        higher than the given value will have their boundaries of
        dimension OutputDimension tessellated. For example, if
        OutputDimension is 2, a hexahedron's quadrilateral faces would be
        tessellated rather than its interior.
        """
        ...
    
    def GetOutputDimensionMinValue(self):
        """
        V.GetOutputDimensionMinValue() -> int
        C++: virtual int GetOutputDimensionMinValue()
        
        Set the dimension of the output tessellation. Cells in dimensions
        higher than the given value will have their boundaries of
        dimension OutputDimension tessellated. For example, if
        OutputDimension is 2, a hexahedron's quadrilateral faces would be
        tessellated rather than its interior.
        """
        ...
    
    def GetSubdivider(self):
        """
        V.GetSubdivider() -> vtkDataSetEdgeSubdivisionCriterion
        C++: virtual vtkDataSetEdgeSubdivisionCriterion *GetSubdivider()
        """
        ...
    
    def GetTessellator(self):
        """
        V.GetTessellator() -> vtkStreamingTessellator
        C++: virtual vtkStreamingTessellator *GetTessellator()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergePointsOff(self):
        """
        V.MergePointsOff()
        C++: virtual void MergePointsOff()
        
        The adaptive tessellation will output vertices that are not
        shared among cells, even where they should be. This can be
        corrected to some extents with a vtkMergeFilter. By default, the
        filter is off and vertices will not be shared.
        """
        ...
    
    def MergePointsOn(self):
        """
        V.MergePointsOn()
        C++: virtual void MergePointsOn()
        
        The adaptive tessellation will output vertices that are not
        shared among cells, even where they should be. This can be
        corrected to some extents with a vtkMergeFilter. By default, the
        filter is off and vertices will not be shared.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTessellatorFilter
        C++: vtkTessellatorFilter *NewInstance()
        """
        ...
    
    def ResetFieldCriteria(self):
        """
        V.ResetFieldCriteria()
        C++: virtual void ResetFieldCriteria()
        
        These methods are for the ParaView client.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTessellatorFilter
        C++: static vtkTessellatorFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetChordError(self, p_float):
        """
        V.SetChordError(float)
        C++: virtual void SetChordError(double ce)
        
        These are convenience routines for setting properties maintained
        by the tessellator and subdivider. They are implemented here for
        ParaView's sake.
        """
        ...
    
    def SetFieldCriterion(self, p_int, p_float):
        """
        V.SetFieldCriterion(int, float)
        C++: virtual void SetFieldCriterion(int field, double chord)
        
        These methods are for the ParaView client.
        """
        ...
    
    def SetMaximumNumberOfSubdivisions(self, p_int):
        """
        V.SetMaximumNumberOfSubdivisions(int)
        C++: virtual void SetMaximumNumberOfSubdivisions(
            int num_subdiv_in)
        
        These are convenience routines for setting properties maintained
        by the tessellator and subdivider. They are implemented here for
        ParaView's sake.
        """
        ...
    
    def SetMergePoints(self, p_int):
        """
        V.SetMergePoints(int)
        C++: virtual void SetMergePoints(vtkTypeBool _arg)
        
        The adaptive tessellation will output vertices that are not
        shared among cells, even where they should be. This can be
        corrected to some extents with a vtkMergeFilter. By default, the
        filter is off and vertices will not be shared.
        """
        ...
    
    def SetOutputDimension(self, p_int):
        """
        V.SetOutputDimension(int)
        C++: virtual void SetOutputDimension(int _arg)
        
        Set the dimension of the output tessellation. Cells in dimensions
        higher than the given value will have their boundaries of
        dimension OutputDimension tessellated. For example, if
        OutputDimension is 2, a hexahedron's quadrilateral faces would be
        tessellated rather than its interior.
        """
        ...
    
    def SetSubdivider(self, vtkDataSetEdgeSubdivisionCriterion):
        """
        V.SetSubdivider(vtkDataSetEdgeSubdivisionCriterion)
        C++: virtual void SetSubdivider(
            vtkDataSetEdgeSubdivisionCriterion *)
        """
        ...
    
    def SetTessellator(self, vtkStreamingTessellator):
        """
        V.SetTessellator(vtkStreamingTessellator)
        C++: virtual void SetTessellator(vtkStreamingTessellator *)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


