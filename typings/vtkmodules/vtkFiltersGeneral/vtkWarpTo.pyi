"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkWarpTo(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkWarpTo - deform geometry by warping towards a point
    
    Superclass: vtkPointSetAlgorithm
    
    vtkWarpTo is a filter that modifies point coordinates by moving the
    points towards a user specified position.
    """
    def AbsoluteOff(self):
        """
        V.AbsoluteOff()
        C++: virtual void AbsoluteOff()
        
        Set/Get the Absolute ivar. Turning Absolute on causes scale
        factor of the new position to be one unit away from Position.
        """
        ...
    
    def AbsoluteOn(self):
        """
        V.AbsoluteOn()
        C++: virtual void AbsoluteOn()
        
        Set/Get the Absolute ivar. Turning Absolute on causes scale
        factor of the new position to be one unit away from Position.
        """
        ...
    
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetAbsolute(self):
        """
        V.GetAbsolute() -> int
        C++: virtual vtkTypeBool GetAbsolute()
        
        Set/Get the Absolute ivar. Turning Absolute on causes scale
        factor of the new position to be one unit away from Position.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float, float)
        C++: virtual double *GetPosition()
        
        Set/Get the position to warp towards.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Set/Get the value to scale displacement.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWarpTo
        C++: vtkWarpTo *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWarpTo
        C++: static vtkWarpTo *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAbsolute(self, p_int):
        """
        V.SetAbsolute(int)
        C++: virtual void SetAbsolute(vtkTypeBool _arg)
        
        Set/Get the Absolute ivar. Turning Absolute on causes scale
        factor of the new position to be one unit away from Position.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetPosition(float, float, float)
        C++: virtual void SetPosition(double _arg1, double _arg2,
            double _arg3)
        V.SetPosition((float, float, float))
        C++: virtual void SetPosition(const double _arg[3])
        
        Set/Get the position to warp towards.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Set/Get the value to scale displacement.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


