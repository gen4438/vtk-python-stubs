"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPassArrays(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkPassArrays - Passes a subset of arrays to the output
    
    Superclass: vtkDataObjectAlgorithm
    
    This filter preserves all the topology of the input, but only a
    subset of arrays are passed to the output. Add an array to be passed
    to the output data object with AddArray(). If RemoveArrays is on, the
    specified arrays will be the ones that are removed instead of the
    ones that are kept.
    
    Arrays with special attributes (scalars, pedigree ids, etc.) will
    retain those attributes in the output.
    
    By default, only those field types with at least one array specified
    through AddArray will be processed. If instead UseFieldTypes is
    turned on, you explicitly set which field types to process with
    AddFieldType.
    
    By default, ghost arrays will be passed unless RemoveArrays is
    selected and those arrays are specifically chosen to be removed.
    
    Example 1:
    
    passArray->AddArray(vtkDataObject::POINT, "velocity"); 
    
    The output will have only that one array "velocity" in the point
    data, but cell and field data will be untouched.
    
    Example 2:
    
    passArray->AddArray(vtkDataObject::POINT, "velocity");
    passArray->UseFieldTypesOn();
    passArray->AddFieldType(vtkDataObject::POINT);
    passArray->AddFieldType(vtkDataObject::CELL); 
    
    The point data would still contain the single array, but the cell
    data would be cleared since you did not specify any arrays to pass.
    Field data would still be untouched.
    
    @section Note
    
    vtkPassArrays has been replaced by `vtkPassSelectedArrays`. It is
    recommended that newer code uses `vtkPassSelectedArrays` instead of
    this filter. `vtkPassSelectedArrays` uses `vtkDataArraySelection` to
    select arrays and hence provides a more typical API. `vtkPassArrays`
    may be deprecated in future releases.
    """
    def AddArray(self, p_int, string):
        """
        V.AddArray(int, string)
        C++: virtual void AddArray(int fieldType, const char *name)
        
        Adds an array to pass through. fieldType where the array that
        should be passed (point data, cell data, etc.). It should be one
        of the constants defined in the vtkDataObject::AttributeTypes
        enumeration.
        """
        ...
    
    def AddCellDataArray(self, string):
        """
        V.AddCellDataArray(string)
        C++: virtual void AddCellDataArray(const char *name)
        """
        ...
    
    def AddFieldDataArray(self, string):
        """
        V.AddFieldDataArray(string)
        C++: virtual void AddFieldDataArray(const char *name)
        """
        ...
    
    def AddFieldType(self, p_int):
        """
        V.AddFieldType(int)
        C++: virtual void AddFieldType(int fieldType)
        
        Add a field type to process. fieldType where the array that
        should be passed (point data, cell data, etc.). It should be one
        of the constants defined in the vtkDataObject::AttributeTypes
        enumeration. NOTE: These are only used if UseFieldType is turned
        on.
        """
        ...
    
    def AddPointDataArray(self, string):
        """
        V.AddPointDataArray(string)
        C++: virtual void AddPointDataArray(const char *name)
        """
        ...
    
    def ClearArrays(self):
        """
        V.ClearArrays()
        C++: virtual void ClearArrays()
        
        Clear all arrays to pass through.
        """
        ...
    
    def ClearCellDataArrays(self):
        """
        V.ClearCellDataArrays()
        C++: virtual void ClearCellDataArrays()
        
        Clear all arrays to pass through.
        """
        ...
    
    def ClearFieldDataArrays(self):
        """
        V.ClearFieldDataArrays()
        C++: virtual void ClearFieldDataArrays()
        
        Clear all arrays to pass through.
        """
        ...
    
    def ClearFieldTypes(self):
        """
        V.ClearFieldTypes()
        C++: virtual void ClearFieldTypes()
        
        Clear all field types to process.
        """
        ...
    
    def ClearPointDataArrays(self):
        """
        V.ClearPointDataArrays()
        C++: virtual void ClearPointDataArrays()
        
        Clear all arrays to pass through.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRemoveArrays(self):
        """
        V.GetRemoveArrays() -> bool
        C++: virtual bool GetRemoveArrays()
        
        Instead of passing only the specified arrays, remove the
        specified arrays and keep all other arrays. Default is off.
        """
        ...
    
    def GetUseFieldTypes(self):
        """
        V.GetUseFieldTypes() -> bool
        C++: virtual bool GetUseFieldTypes()
        
        Process only those field types explicitly specified with
        AddFieldType. Otherwise, processes field types associated with at
        least one specified array. Default is off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPassArrays
        C++: vtkPassArrays *NewInstance()
        """
        ...
    
    def RemoveArray(self, p_int, string):
        """
        V.RemoveArray(int, string)
        C++: virtual void RemoveArray(int fieldType, const char *name)
        """
        ...
    
    def RemoveArraysOff(self):
        """
        V.RemoveArraysOff()
        C++: virtual void RemoveArraysOff()
        
        Instead of passing only the specified arrays, remove the
        specified arrays and keep all other arrays. Default is off.
        """
        ...
    
    def RemoveArraysOn(self):
        """
        V.RemoveArraysOn()
        C++: virtual void RemoveArraysOn()
        
        Instead of passing only the specified arrays, remove the
        specified arrays and keep all other arrays. Default is off.
        """
        ...
    
    def RemoveCellDataArray(self, string):
        """
        V.RemoveCellDataArray(string)
        C++: virtual void RemoveCellDataArray(const char *name)
        """
        ...
    
    def RemoveFieldDataArray(self, string):
        """
        V.RemoveFieldDataArray(string)
        C++: virtual void RemoveFieldDataArray(const char *name)
        """
        ...
    
    def RemovePointDataArray(self, string):
        """
        V.RemovePointDataArray(string)
        C++: virtual void RemovePointDataArray(const char *name)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPassArrays
        C++: static vtkPassArrays *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetRemoveArrays(self, bool):
        """
        V.SetRemoveArrays(bool)
        C++: virtual void SetRemoveArrays(bool _arg)
        
        Instead of passing only the specified arrays, remove the
        specified arrays and keep all other arrays. Default is off.
        """
        ...
    
    def SetUseFieldTypes(self, bool):
        """
        V.SetUseFieldTypes(bool)
        C++: virtual void SetUseFieldTypes(bool _arg)
        
        Process only those field types explicitly specified with
        AddFieldType. Otherwise, processes field types associated with at
        least one specified array. Default is off.
        """
        ...
    
    def UseFieldTypesOff(self):
        """
        V.UseFieldTypesOff()
        C++: virtual void UseFieldTypesOff()
        
        Process only those field types explicitly specified with
        AddFieldType. Otherwise, processes field types associated with at
        least one specified array. Default is off.
        """
        ...
    
    def UseFieldTypesOn(self):
        """
        V.UseFieldTypesOn()
        C++: virtual void UseFieldTypesOn()
        
        Process only those field types explicitly specified with
        AddFieldType. Otherwise, processes field types associated with at
        least one specified array. Default is off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


