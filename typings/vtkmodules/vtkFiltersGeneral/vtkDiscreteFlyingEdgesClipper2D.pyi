"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDiscreteFlyingEdgesClipper2D(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkDiscreteFlyingEdgesClipper2D - generate filled regions from
    segmented 2D image data
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkDiscreteFlyingEdgesClipper2D creates filled polygons from a label
    map (e.g., segmented image) using a variation of the flying edges
    algorithm adapted for 2D clipping. The input is a 2D image where each
    pixel is labeled (integer labels are preferred to real values), and
    the output data is polygonal data representing labeled regions. (Note
    that on output each region [corresponding to a different contour
    value] may share points on a shared boundary.)
    
    While this filter is similar to a contouring operation, label maps do
    not provide continuous function values meaning that usual
    interpolation along edges is not possible. Instead, when the edge
    endpoints are labeled in differing regions, the edge is split at its
    midpoint. In addition, besides producing intersection points at the
    mid-point of edges, the filter may also generate points interior to
    the pixel cells. For example, if the four vertices of a pixel cell
    are labeled with different regions, then an interior point is created
    and four rectangular "regions" are produced.
    
    Note that one nice feature of this filter is that algorithm execution
    occurs only one time no matter the number of contour values. In many
    contouring-like algorithms, each separate contour value requires an
    additional algorithm execution with a new contour value. So in this
    filter large numbers of contour values do not significantly affect
    overall speed.
    
    @warning This filter is specialized to 2D images.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkDiscreteFlyingEdges2D vtkDiscreteMarchingCubes
    vtkContourLoopExtraction vtkFlyingEdges2D vtkFlyingEdges3D
    """
    def ComputeScalarsOff(self):
        """
        V.ComputeScalarsOff()
        C++: virtual void ComputeScalarsOff()
        
        Option to set the cell scalars of the output. The scalars will be
        the contour values. By default this flag is on.
        """
        ...
    
    def ComputeScalarsOn(self):
        """
        V.ComputeScalarsOn()
        C++: virtual void ComputeScalarsOn()
        
        Option to set the cell scalars of the output. The scalars will be
        the contour values. By default this flag is on.
        """
        ...
    
    def GenerateValues(self, p_int, p_float=..., p_float=...):
        """
        V.GenerateValues(int, [float, float])
        C++: void GenerateValues(int numContours, double range[2])
        V.GenerateValues(int, float, float)
        C++: void GenerateValues(int numContours, double rangeStart,
            double rangeEnd)
        
        Generate numContours equally spaced contour values between the
        specified range. Contour values will include min/max range
        values.
        """
        ...
    
    def GetArrayComponent(self):
        """
        V.GetArrayComponent() -> int
        C++: virtual int GetArrayComponent()
        
        Set/get which component of a multi-component scalar array to
        contour on; defaults to 0.
        """
        ...
    
    def GetComputeScalars(self):
        """
        V.GetComputeScalars() -> int
        C++: virtual int GetComputeScalars()
        
        Option to set the cell scalars of the output. The scalars will be
        the contour values. By default this flag is on.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        The modified time is a function of the contour values because we
        delegate to vtkContourValues.
        """
        ...
    
    def GetNumberOfContours(self):
        """
        V.GetNumberOfContours() -> int
        C++: vtkIdType GetNumberOfContours()
        
        Get the number of contours in the list of contour values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, printing, and type
        information.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, printing, and type
        information.
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> float
        C++: double GetValue(int i)
        
        Get the ith contour value.
        """
        ...
    
    def GetValues(self):
        """
        V.GetValues() -> (float, ...)
        C++: double *GetValues()
        V.GetValues([float, ...])
        C++: void GetValues(double *contourValues)
        
        Get a pointer to an array of contour values. There will be
        GetNumberOfContours() values in the list.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, printing, and type
        information.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, printing, and type
        information.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDiscreteFlyingEdgesClipper2D
        C++: vtkDiscreteFlyingEdgesClipper2D *NewInstance()
        
        Standard methods for instantiation, printing, and type
        information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDiscreteFlyingEdgesClipper2D
        C++: static vtkDiscreteFlyingEdgesClipper2D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instantiation, printing, and type
        information.
        """
        ...
    
    def SetArrayComponent(self, p_int):
        """
        V.SetArrayComponent(int)
        C++: virtual void SetArrayComponent(int _arg)
        
        Set/get which component of a multi-component scalar array to
        contour on; defaults to 0.
        """
        ...
    
    def SetComputeScalars(self, p_int):
        """
        V.SetComputeScalars(int)
        C++: virtual void SetComputeScalars(int _arg)
        
        Option to set the cell scalars of the output. The scalars will be
        the contour values. By default this flag is on.
        """
        ...
    
    def SetNumberOfContours(self, p_int):
        """
        V.SetNumberOfContours(int)
        C++: void SetNumberOfContours(int number)
        
        Set the number of contours to place into the list. You only
        really need to use this method to reduce list size. The method
        SetValue() will automatically increase list size as needed.
        """
        ...
    
    def SetValue(self, p_int, p_float):
        """
        V.SetValue(int, float)
        C++: void SetValue(int i, double value)
        
        Set a particular contour value at contour number i. The index i
        ranges between 0 <= i <NumberOfContours. (Note: while contour
        values are expressed as doubles, the underlying scalar data may
        be a different type. During execution the contour values are
        static cast to the type of the scalar values.)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


