"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSubdivisionFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSubdivisionFilter - base class for subvision filters
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSubdivisionFilter is an abstract class that defines the protocol
    for subdivision surface filters.
    """
    def CheckForTrianglesOff(self):
        """
        V.CheckForTrianglesOff()
        C++: virtual void CheckForTrianglesOff()
        
        Set/get CheckForTriangles Should subdivision check that the
        dataset only contains triangles? Default is On (1).
        """
        ...
    
    def CheckForTrianglesOn(self):
        """
        V.CheckForTrianglesOn()
        C++: virtual void CheckForTrianglesOn()
        
        Set/get CheckForTriangles Should subdivision check that the
        dataset only contains triangles? Default is On (1).
        """
        ...
    
    def GetCheckForTriangles(self):
        """
        V.GetCheckForTriangles() -> int
        C++: virtual vtkTypeBool GetCheckForTriangles()
        
        Set/get CheckForTriangles Should subdivision check that the
        dataset only contains triangles? Default is On (1).
        """
        ...
    
    def GetCheckForTrianglesMaxValue(self):
        """
        V.GetCheckForTrianglesMaxValue() -> int
        C++: virtual vtkTypeBool GetCheckForTrianglesMaxValue()
        
        Set/get CheckForTriangles Should subdivision check that the
        dataset only contains triangles? Default is On (1).
        """
        ...
    
    def GetCheckForTrianglesMinValue(self):
        """
        V.GetCheckForTrianglesMinValue() -> int
        C++: virtual vtkTypeBool GetCheckForTrianglesMinValue()
        
        Set/get CheckForTriangles Should subdivision check that the
        dataset only contains triangles? Default is On (1).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfSubdivisions(self):
        """
        V.GetNumberOfSubdivisions() -> int
        C++: virtual int GetNumberOfSubdivisions()
        
        Set/get the number of subdivisions. Default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSubdivisionFilter
        C++: vtkSubdivisionFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSubdivisionFilter
        C++: static vtkSubdivisionFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCheckForTriangles(self, p_int):
        """
        V.SetCheckForTriangles(int)
        C++: virtual void SetCheckForTriangles(vtkTypeBool _arg)
        
        Set/get CheckForTriangles Should subdivision check that the
        dataset only contains triangles? Default is On (1).
        """
        ...
    
    def SetNumberOfSubdivisions(self, p_int):
        """
        V.SetNumberOfSubdivisions(int)
        C++: virtual void SetNumberOfSubdivisions(int _arg)
        
        Set/get the number of subdivisions. Default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


