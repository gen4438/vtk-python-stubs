"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSampleImplicitFunctionFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkSampleImplicitFunctionFilter - sample an implicit function over a
    dataset, generating scalar values and optional gradient vectors
    
    Superclass: vtkDataSetAlgorithm
    
    vtkSampleImplicitFunctionFilter is a filter that evaluates an
    implicit function and (optional) gradients at each point in an input
    vtkDataSet. The output of the filter are new scalar values (the
    function values) and the optional vector (function gradient) array.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkSampleFunction vtkImplicitModeller
    """
    def ComputeGradientsOff(self):
        """
        V.ComputeGradientsOff()
        C++: virtual void ComputeGradientsOff()
        
        Turn on/off the computation of gradients.
        """
        ...
    
    def ComputeGradientsOn(self):
        """
        V.ComputeGradientsOn()
        C++: virtual void ComputeGradientsOn()
        
        Turn on/off the computation of gradients.
        """
        ...
    
    def GetComputeGradients(self):
        """
        V.GetComputeGradients() -> int
        C++: virtual vtkTypeBool GetComputeGradients()
        
        Turn on/off the computation of gradients.
        """
        ...
    
    def GetGradientArrayName(self):
        """
        V.GetGradientArrayName() -> string
        C++: virtual char *GetGradientArrayName()
        
        Set/get the gradient array name for this data set. The initial
        value is "Implicit gradients".
        """
        ...
    
    def GetImplicitFunction(self):
        """
        V.GetImplicitFunction() -> vtkImplicitFunction
        C++: virtual vtkImplicitFunction *GetImplicitFunction()
        
        Specify the implicit function to use to generate data.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also taking into account the implicit function.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard instantiation, type information, and print methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard instantiation, type information, and print methods.
        """
        ...
    
    def GetScalarArrayName(self):
        """
        V.GetScalarArrayName() -> string
        C++: virtual char *GetScalarArrayName()
        
        Set/get the scalar array name for this data set. The initial
        value is "Implicit scalars".
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard instantiation, type information, and print methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard instantiation, type information, and print methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSampleImplicitFunctionFilter
        C++: vtkSampleImplicitFunctionFilter *NewInstance()
        
        Standard instantiation, type information, and print methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSampleImplicitFunctionFilter
        C++: static vtkSampleImplicitFunctionFilter *SafeDownCast(
            vtkObjectBase *o)
        
        Standard instantiation, type information, and print methods.
        """
        ...
    
    def SetComputeGradients(self, p_int):
        """
        V.SetComputeGradients(int)
        C++: virtual void SetComputeGradients(vtkTypeBool _arg)
        
        Turn on/off the computation of gradients.
        """
        ...
    
    def SetGradientArrayName(self, string):
        """
        V.SetGradientArrayName(string)
        C++: virtual void SetGradientArrayName(const char *_arg)
        
        Set/get the gradient array name for this data set. The initial
        value is "Implicit gradients".
        """
        ...
    
    def SetImplicitFunction(self, vtkImplicitFunction):
        """
        V.SetImplicitFunction(vtkImplicitFunction)
        C++: virtual void SetImplicitFunction(vtkImplicitFunction *)
        
        Specify the implicit function to use to generate data.
        """
        ...
    
    def SetScalarArrayName(self, string):
        """
        V.SetScalarArrayName(string)
        C++: virtual void SetScalarArrayName(const char *_arg)
        
        Set/get the scalar array name for this data set. The initial
        value is "Implicit scalars".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


