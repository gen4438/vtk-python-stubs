"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSynchronizeTimeFilter(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkSynchronizeTimeFilter - Set "close" time step values from the
    second input to the first
    
    Superclass: vtkPassInputTypeAlgorithm
    
    Synchronize time step values in the first input to time step values
    in the second input that are considered close enough. The outputted
    data set is from the first input and the number of output time steps
    is also equal to the number of time steps in the first input. Time
    step values in the first input that are "close" to time step values
    in the second input are replaced with the value from the second
    input. Close is determined to be if the difference is less than
    RelativeTolerance multiplied by the time range of the first input.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRelativeTolerance(self):
        """
        V.GetRelativeTolerance() -> float
        C++: virtual double GetRelativeTolerance()
        """
        ...
    
    def GetRelativeToleranceMaxValue(self):
        """
        V.GetRelativeToleranceMaxValue() -> float
        C++: virtual double GetRelativeToleranceMaxValue()
        """
        ...
    
    def GetRelativeToleranceMinValue(self):
        """
        V.GetRelativeToleranceMinValue() -> float
        C++: virtual double GetRelativeToleranceMinValue()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSynchronizeTimeFilter
        C++: vtkSynchronizeTimeFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSynchronizeTimeFilter
        C++: static vtkSynchronizeTimeFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetRelativeTolerance(self, p_float):
        """
        V.SetRelativeTolerance(float)
        C++: virtual void SetRelativeTolerance(double _arg)
        
        Set/get the relative tolerance for comparing time step values to
        see if they are close enough to be considered identical.
        """
        ...
    
    def SetSourceConnection(self, vtkAlgorithmOutput):
        """
        V.SetSourceConnection(vtkAlgorithmOutput)
        C++: void SetSourceConnection(vtkAlgorithmOutput *algOutput)
        
        Specify the input that we may potentially replace time steps
        with. SetInputConnection() should be used for providing the data
        set that will actually be output from this filter.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


