"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTableToStructuredGrid(__vtkmodules_vtkCommonExecutionModel.vtkStructuredGridAlgorithm):
    """
    vtkTableToStructuredGrid - converts vtkTable to a vtkStructuredGrid.
    
    Superclass: vtkStructuredGridAlgorithm
    
    vtkTableToStructuredGrid is a filter that converts an input vtkTable
    to a vtkStructuredGrid. It provides API to select columns to use as
    points in the output structured grid. The specified dimensions of the
    output (specified using SetWholeExtent()) must match the number of
    rows in the input table.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWholeExtent(self):
        """
        V.GetWholeExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetWholeExtent()
        
        Get/Set the whole extents for the image to produce. The size of
        the image must match the number of rows in the input table.
        """
        ...
    
    def GetXColumn(self):
        """
        V.GetXColumn() -> string
        C++: virtual char *GetXColumn()
        
        Set the name of the column to use as the X coordinate for the
        points.
        """
        ...
    
    def GetXComponent(self):
        """
        V.GetXComponent() -> int
        C++: virtual int GetXComponent()
        
        Specify the component for the column specified using SetXColumn()
        to use as the xcoordinate in case the column is a multi-component
        array. Default is 0.
        """
        ...
    
    def GetXComponentMaxValue(self):
        """
        V.GetXComponentMaxValue() -> int
        C++: virtual int GetXComponentMaxValue()
        
        Specify the component for the column specified using SetXColumn()
        to use as the xcoordinate in case the column is a multi-component
        array. Default is 0.
        """
        ...
    
    def GetXComponentMinValue(self):
        """
        V.GetXComponentMinValue() -> int
        C++: virtual int GetXComponentMinValue()
        
        Specify the component for the column specified using SetXColumn()
        to use as the xcoordinate in case the column is a multi-component
        array. Default is 0.
        """
        ...
    
    def GetYColumn(self):
        """
        V.GetYColumn() -> string
        C++: virtual char *GetYColumn()
        
        Set the name of the column to use as the Y coordinate for the
        points. Default is 0.
        """
        ...
    
    def GetYComponent(self):
        """
        V.GetYComponent() -> int
        C++: virtual int GetYComponent()
        
        Specify the component for the column specified using SetYColumn()
        to use as the Ycoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def GetYComponentMaxValue(self):
        """
        V.GetYComponentMaxValue() -> int
        C++: virtual int GetYComponentMaxValue()
        
        Specify the component for the column specified using SetYColumn()
        to use as the Ycoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def GetYComponentMinValue(self):
        """
        V.GetYComponentMinValue() -> int
        C++: virtual int GetYComponentMinValue()
        
        Specify the component for the column specified using SetYColumn()
        to use as the Ycoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def GetZColumn(self):
        """
        V.GetZColumn() -> string
        C++: virtual char *GetZColumn()
        
        Set the name of the column to use as the Z coordinate for the
        points. Default is 0.
        """
        ...
    
    def GetZComponent(self):
        """
        V.GetZComponent() -> int
        C++: virtual int GetZComponent()
        
        Specify the component for the column specified using SetZColumn()
        to use as the Zcoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def GetZComponentMaxValue(self):
        """
        V.GetZComponentMaxValue() -> int
        C++: virtual int GetZComponentMaxValue()
        
        Specify the component for the column specified using SetZColumn()
        to use as the Zcoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def GetZComponentMinValue(self):
        """
        V.GetZComponentMinValue() -> int
        C++: virtual int GetZComponentMinValue()
        
        Specify the component for the column specified using SetZColumn()
        to use as the Zcoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTableToStructuredGrid
        C++: vtkTableToStructuredGrid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTableToStructuredGrid
        C++: static vtkTableToStructuredGrid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetWholeExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: virtual void SetWholeExtent(int _arg1, int _arg2, int _arg3,
            int _arg4, int _arg5, int _arg6)
        V.SetWholeExtent((int, int, int, int, int, int))
        C++: virtual void SetWholeExtent(const int _arg[6])
        
        Get/Set the whole extents for the image to produce. The size of
        the image must match the number of rows in the input table.
        """
        ...
    
    def SetXColumn(self, string):
        """
        V.SetXColumn(string)
        C++: virtual void SetXColumn(const char *_arg)
        
        Set the name of the column to use as the X coordinate for the
        points.
        """
        ...
    
    def SetXComponent(self, p_int):
        """
        V.SetXComponent(int)
        C++: virtual void SetXComponent(int _arg)
        
        Specify the component for the column specified using SetXColumn()
        to use as the xcoordinate in case the column is a multi-component
        array. Default is 0.
        """
        ...
    
    def SetYColumn(self, string):
        """
        V.SetYColumn(string)
        C++: virtual void SetYColumn(const char *_arg)
        
        Set the name of the column to use as the Y coordinate for the
        points. Default is 0.
        """
        ...
    
    def SetYComponent(self, p_int):
        """
        V.SetYComponent(int)
        C++: virtual void SetYComponent(int _arg)
        
        Specify the component for the column specified using SetYColumn()
        to use as the Ycoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def SetZColumn(self, string):
        """
        V.SetZColumn(string)
        C++: virtual void SetZColumn(const char *_arg)
        
        Set the name of the column to use as the Z coordinate for the
        points. Default is 0.
        """
        ...
    
    def SetZComponent(self, p_int):
        """
        V.SetZComponent(int)
        C++: virtual void SetZComponent(int _arg)
        
        Specify the component for the column specified using SetZColumn()
        to use as the Zcoordinate in case the column is a multi-component
        array.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


