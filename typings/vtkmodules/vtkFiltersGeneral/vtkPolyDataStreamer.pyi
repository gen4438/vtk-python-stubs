"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkFiltersCore as __vtkmodules_vtkFiltersCore

class vtkPolyDataStreamer(__vtkmodules_vtkFiltersCore.vtkStreamerBase):
    """
    vtkPolyDataStreamer - Streamer appends input pieces to the output.
    
    Superclass: vtkStreamerBase
    
    vtkPolyDataStreamer initiates streaming by requesting pieces from its
    single input it appends these pieces to the requested output. Note
    that since vtkPolyDataStreamer uses an append filter, all the
    polygons generated have to be kept in memory before rendering. If
    these do not fit in the memory, it is possible to make the
    vtkPolyDataMapper stream. Since the mapper will render each piece
    separately, all the polygons do not have to stored in
    memory.@attention The output may be slightly different if the
    pipeline does not handle ghost cells properly (i.e. you might see
    seames between the pieces).
    @sa
    vtkAppendFilter
    """
    def ColorByPieceOff(self):
        """
        V.ColorByPieceOff()
        C++: virtual void ColorByPieceOff()
        
        By default, this option is off.  When it is on, cell scalars are
        generated based on which piece they are in.
        """
        ...
    
    def ColorByPieceOn(self):
        """
        V.ColorByPieceOn()
        C++: virtual void ColorByPieceOn()
        
        By default, this option is off.  When it is on, cell scalars are
        generated based on which piece they are in.
        """
        ...
    
    def GetColorByPiece(self):
        """
        V.GetColorByPiece() -> int
        C++: virtual vtkTypeBool GetColorByPiece()
        
        By default, this option is off.  When it is on, cell scalars are
        generated based on which piece they are in.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfStreamDivisions(self):
        """
        V.GetNumberOfStreamDivisions() -> int
        C++: int GetNumberOfStreamDivisions()
        
        Set the number of pieces to divide the problem into.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataStreamer
        C++: vtkPolyDataStreamer *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataStreamer
        C++: static vtkPolyDataStreamer *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColorByPiece(self, p_int):
        """
        V.SetColorByPiece(int)
        C++: virtual void SetColorByPiece(vtkTypeBool _arg)
        
        By default, this option is off.  When it is on, cell scalars are
        generated based on which piece they are in.
        """
        ...
    
    def SetNumberOfStreamDivisions(self, p_int):
        """
        V.SetNumberOfStreamDivisions(int)
        C++: void SetNumberOfStreamDivisions(int num)
        
        Set the number of pieces to divide the problem into.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


