"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkClipClosedSurface(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkClipClosedSurface - Clip a closed surface with a plane collection
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkClipClosedSurface will clip a closed polydata surface with a
    collection of clipping planes.  It will produce a new closed surface
    by creating new polygonal faces where the input data was clipped.
    
    Non-manifold surfaces should not be used as input for this filter.
    The input surface should have no open edges, and must not have any
    edges that are shared by more than two faces.  The vtkFeatureEdges
    filter can be used to verify that a data set satisfies these
    conditions. In addition, the input surface should not self-intersect,
    meaning that the faces of the surface should only touch at their
    edges.
    
    If GenerateOutline is on, this filter will generate an outline
    wherever the clipping planes intersect the data.  The ScalarMode
    option will add cell scalars to the output, so that the generated
    faces can be visualized in a different color from the original
    surface.
    
    @warning
    The triangulation of new faces is done in O(n) time for simple convex
    inputs, but for non-convex inputs the worst-case time is O(n^2*m^2)
    where n is the number of points and m is the number of 3D cavities.
    The best triangulation algorithms, in contrast, are O(n log n). There
    are also rare cases where the triangulation will fail to produce a
    watertight output.  Turn on TriangulationErrorDisplay to be notified
    of these failures.
    @sa
    vtkOutlineFilter vtkOutlineSource vtkVolumeOutlineSource@par Thanks:
    Thanks to David Gobbi for contributing this class to VTK.
    """
    def GenerateFacesOff(self):
        """
        V.GenerateFacesOff()
        C++: virtual void GenerateFacesOff()
        
        Set whether to generate polygonal faces for the output.  This is
        on by default.  If it is off, then the output will have no polys.
        """
        ...
    
    def GenerateFacesOn(self):
        """
        V.GenerateFacesOn()
        C++: virtual void GenerateFacesOn()
        
        Set whether to generate polygonal faces for the output.  This is
        on by default.  If it is off, then the output will have no polys.
        """
        ...
    
    def GenerateOutlineOff(self):
        """
        V.GenerateOutlineOff()
        C++: virtual void GenerateOutlineOff()
        
        Set whether to generate an outline wherever an input face was cut
        by a plane.  This is off by default.
        """
        ...
    
    def GenerateOutlineOn(self):
        """
        V.GenerateOutlineOn()
        C++: virtual void GenerateOutlineOn()
        
        Set whether to generate an outline wherever an input face was cut
        by a plane.  This is off by default.
        """
        ...
    
    def GetActivePlaneColor(self):
        """
        V.GetActivePlaneColor() -> (float, float, float)
        C++: virtual double *GetActivePlaneColor()
        
        Set the color for any new geometry produced by clipping with the
        ActivePlane, if ActivePlaneId is set.  Default is yellow.
        Requires SetScalarModeToColors.
        """
        ...
    
    def GetActivePlaneId(self):
        """
        V.GetActivePlaneId() -> int
        C++: virtual int GetActivePlaneId()
        
        Set the active plane, so that the clipping from that plane can be
        displayed in a different color.  Set this to -1 if there is no
        active plane.  The default value is -1.
        """
        ...
    
    def GetBaseColor(self):
        """
        V.GetBaseColor() -> (float, float, float)
        C++: virtual double *GetBaseColor()
        
        Set the color for all cells were part of the original geometry.
        If the input data already has color cell scalars, then those
        values will be used and parameter will be ignored.  The default
        color is red.  Requires SetScalarModeToColors.
        """
        ...
    
    def GetClipColor(self):
        """
        V.GetClipColor() -> (float, float, float)
        C++: virtual double *GetClipColor()
        
        Set the color for any new geometry, either faces or outlines,
        that are created as a result of the clipping. The default color
        is orange. Requires SetScalarModeToColors.
        """
        ...
    
    def GetClippingPlanes(self):
        """
        V.GetClippingPlanes() -> vtkPlaneCollection
        C++: virtual vtkPlaneCollection *GetClippingPlanes()
        
        Set the vtkPlaneCollection that holds the clipping planes.
        """
        ...
    
    def GetGenerateFaces(self):
        """
        V.GetGenerateFaces() -> int
        C++: virtual vtkTypeBool GetGenerateFaces()
        
        Set whether to generate polygonal faces for the output.  This is
        on by default.  If it is off, then the output will have no polys.
        """
        ...
    
    def GetGenerateOutline(self):
        """
        V.GetGenerateOutline() -> int
        C++: virtual vtkTypeBool GetGenerateOutline()
        
        Set whether to generate an outline wherever an input face was cut
        by a plane.  This is off by default.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPassPointData(self):
        """
        V.GetPassPointData() -> int
        C++: virtual vtkTypeBool GetPassPointData()
        
        Pass the point data to the output.  Point data will be
        interpolated when new points are generated.  This is off by
        default.
        """
        ...
    
    def GetScalarMode(self):
        """
        V.GetScalarMode() -> int
        C++: virtual int GetScalarMode()
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def GetScalarModeAsString(self):
        """
        V.GetScalarModeAsString() -> string
        C++: const char *GetScalarModeAsString()
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def GetScalarModeMaxValue(self):
        """
        V.GetScalarModeMaxValue() -> int
        C++: virtual int GetScalarModeMaxValue()
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def GetScalarModeMinValue(self):
        """
        V.GetScalarModeMinValue() -> int
        C++: virtual int GetScalarModeMinValue()
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        Set the tolerance for creating new points while clipping.  If the
        tolerance is too small, then degenerate triangles might be
        produced. The default tolerance is 1e-6.
        """
        ...
    
    def GetTriangulationErrorDisplay(self):
        """
        V.GetTriangulationErrorDisplay() -> int
        C++: virtual vtkTypeBool GetTriangulationErrorDisplay()
        
        Generate errors when the triangulation fails.  Usually the
        triangulation errors are too small to see, but they result in a
        surface that is not watertight.  This option has no impact on
        performance.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkClipClosedSurface
        C++: vtkClipClosedSurface *NewInstance()
        """
        ...
    
    def PassPointDataOff(self):
        """
        V.PassPointDataOff()
        C++: virtual void PassPointDataOff()
        
        Pass the point data to the output.  Point data will be
        interpolated when new points are generated.  This is off by
        default.
        """
        ...
    
    def PassPointDataOn(self):
        """
        V.PassPointDataOn()
        C++: virtual void PassPointDataOn()
        
        Pass the point data to the output.  Point data will be
        interpolated when new points are generated.  This is off by
        default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkClipClosedSurface
        C++: static vtkClipClosedSurface *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetActivePlaneColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetActivePlaneColor(float, float, float)
        C++: virtual void SetActivePlaneColor(double _arg1, double _arg2,
            double _arg3)
        V.SetActivePlaneColor((float, float, float))
        C++: virtual void SetActivePlaneColor(const double _arg[3])
        
        Set the color for any new geometry produced by clipping with the
        ActivePlane, if ActivePlaneId is set.  Default is yellow.
        Requires SetScalarModeToColors.
        """
        ...
    
    def SetActivePlaneId(self, p_int):
        """
        V.SetActivePlaneId(int)
        C++: virtual void SetActivePlaneId(int _arg)
        
        Set the active plane, so that the clipping from that plane can be
        displayed in a different color.  Set this to -1 if there is no
        active plane.  The default value is -1.
        """
        ...
    
    def SetBaseColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetBaseColor(float, float, float)
        C++: virtual void SetBaseColor(double _arg1, double _arg2,
            double _arg3)
        V.SetBaseColor((float, float, float))
        C++: virtual void SetBaseColor(const double _arg[3])
        
        Set the color for all cells were part of the original geometry.
        If the input data already has color cell scalars, then those
        values will be used and parameter will be ignored.  The default
        color is red.  Requires SetScalarModeToColors.
        """
        ...
    
    def SetClipColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetClipColor(float, float, float)
        C++: virtual void SetClipColor(double _arg1, double _arg2,
            double _arg3)
        V.SetClipColor((float, float, float))
        C++: virtual void SetClipColor(const double _arg[3])
        
        Set the color for any new geometry, either faces or outlines,
        that are created as a result of the clipping. The default color
        is orange. Requires SetScalarModeToColors.
        """
        ...
    
    def SetClippingPlanes(self, vtkPlaneCollection):
        """
        V.SetClippingPlanes(vtkPlaneCollection)
        C++: virtual void SetClippingPlanes(vtkPlaneCollection *planes)
        
        Set the vtkPlaneCollection that holds the clipping planes.
        """
        ...
    
    def SetGenerateFaces(self, p_int):
        """
        V.SetGenerateFaces(int)
        C++: virtual void SetGenerateFaces(vtkTypeBool _arg)
        
        Set whether to generate polygonal faces for the output.  This is
        on by default.  If it is off, then the output will have no polys.
        """
        ...
    
    def SetGenerateOutline(self, p_int):
        """
        V.SetGenerateOutline(int)
        C++: virtual void SetGenerateOutline(vtkTypeBool _arg)
        
        Set whether to generate an outline wherever an input face was cut
        by a plane.  This is off by default.
        """
        ...
    
    def SetPassPointData(self, p_int):
        """
        V.SetPassPointData(int)
        C++: virtual void SetPassPointData(vtkTypeBool _arg)
        
        Pass the point data to the output.  Point data will be
        interpolated when new points are generated.  This is off by
        default.
        """
        ...
    
    def SetScalarMode(self, p_int):
        """
        V.SetScalarMode(int)
        C++: virtual void SetScalarMode(int _arg)
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def SetScalarModeToColors(self):
        """
        V.SetScalarModeToColors()
        C++: void SetScalarModeToColors()
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def SetScalarModeToLabels(self):
        """
        V.SetScalarModeToLabels()
        C++: void SetScalarModeToLabels()
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def SetScalarModeToNone(self):
        """
        V.SetScalarModeToNone()
        C++: void SetScalarModeToNone()
        
        Set whether to add cell scalars, so that new faces and outlines
        can be distinguished from original faces and lines.  The options
        are "None", "Colors", and "Labels".  For the "Labels" option, a
        scalar value of "0" indicates an original cell, "1" indicates a
        new cell on a cut face, and "2" indicates a new cell on the
        ActivePlane as set by the SetActivePlane() method.  The default
        scalar mode is "None".
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        Set the tolerance for creating new points while clipping.  If the
        tolerance is too small, then degenerate triangles might be
        produced. The default tolerance is 1e-6.
        """
        ...
    
    def SetTriangulationErrorDisplay(self, p_int):
        """
        V.SetTriangulationErrorDisplay(int)
        C++: virtual void SetTriangulationErrorDisplay(vtkTypeBool _arg)
        
        Generate errors when the triangulation fails.  Usually the
        triangulation errors are too small to see, but they result in a
        surface that is not watertight.  This option has no impact on
        performance.
        """
        ...
    
    def TriangulationErrorDisplayOff(self):
        """
        V.TriangulationErrorDisplayOff()
        C++: virtual void TriangulationErrorDisplayOff()
        
        Generate errors when the triangulation fails.  Usually the
        triangulation errors are too small to see, but they result in a
        surface that is not watertight.  This option has no impact on
        performance.
        """
        ...
    
    def TriangulationErrorDisplayOn(self):
        """
        V.TriangulationErrorDisplayOn()
        C++: virtual void TriangulationErrorDisplayOn()
        
        Generate errors when the triangulation fails.  Usually the
        triangulation errors are too small to see, but they result in a
        surface that is not watertight.  This option has no impact on
        performance.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


