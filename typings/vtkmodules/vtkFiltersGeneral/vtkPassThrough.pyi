"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPassThrough(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkPassThrough - Shallow copies the input into the output
    
    Superclass: vtkPassInputTypeAlgorithm
    
    The output type is always the same as the input object type.
    """
    def AllowNullInputOff(self):
        """
        V.AllowNullInputOff()
        C++: virtual void AllowNullInputOff()
        """
        ...
    
    def AllowNullInputOn(self):
        """
        V.AllowNullInputOn()
        C++: virtual void AllowNullInputOn()
        """
        ...
    
    def DeepCopyInputOff(self):
        """
        V.DeepCopyInputOff()
        C++: virtual void DeepCopyInputOff()
        
        Whether or not to deep copy the input. This can be useful if you
        want to create a copy of a data object. You can then disconnect
        this filter's input connections and it will act like a source.
        Defaults to OFF.
        """
        ...
    
    def DeepCopyInputOn(self):
        """
        V.DeepCopyInputOn()
        C++: virtual void DeepCopyInputOn()
        
        Whether or not to deep copy the input. This can be useful if you
        want to create a copy of a data object. You can then disconnect
        this filter's input connections and it will act like a source.
        Defaults to OFF.
        """
        ...
    
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Specify the first input port as optional
        """
        ...
    
    def GetAllowNullInput(self):
        """
        V.GetAllowNullInput() -> bool
        C++: virtual bool GetAllowNullInput()
        """
        ...
    
    def GetDeepCopyInput(self):
        """
        V.GetDeepCopyInput() -> int
        C++: virtual vtkTypeBool GetDeepCopyInput()
        
        Whether or not to deep copy the input. This can be useful if you
        want to create a copy of a data object. You can then disconnect
        this filter's input connections and it will act like a source.
        Defaults to OFF.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPassThrough
        C++: vtkPassThrough *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPassThrough
        C++: static vtkPassThrough *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllowNullInput(self, bool):
        """
        V.SetAllowNullInput(bool)
        C++: virtual void SetAllowNullInput(bool _arg)
        """
        ...
    
    def SetDeepCopyInput(self, p_int):
        """
        V.SetDeepCopyInput(int)
        C++: virtual void SetDeepCopyInput(vtkTypeBool _arg)
        
        Whether or not to deep copy the input. This can be useful if you
        want to create a copy of a data object. You can then disconnect
        this filter's input connections and it will act like a source.
        Defaults to OFF.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


