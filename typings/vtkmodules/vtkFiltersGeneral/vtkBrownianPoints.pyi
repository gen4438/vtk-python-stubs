"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkBrownianPoints(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkBrownianPoints - assign random vector to points
    
    Superclass: vtkDataSetAlgorithm
    
    vtkBrownianPoints is a filter object that assigns a random vector
    (i.e., magnitude and direction) to each point. The minimum and
    maximum speed values can be controlled by the user.
    
    @sa
    vtkRandomAttributeGenerator
    """
    def GetMaximumSpeed(self):
        """
        V.GetMaximumSpeed() -> float
        C++: virtual double GetMaximumSpeed()
        
        Set the maximum speed value.
        """
        ...
    
    def GetMaximumSpeedMaxValue(self):
        """
        V.GetMaximumSpeedMaxValue() -> float
        C++: virtual double GetMaximumSpeedMaxValue()
        
        Set the maximum speed value.
        """
        ...
    
    def GetMaximumSpeedMinValue(self):
        """
        V.GetMaximumSpeedMinValue() -> float
        C++: virtual double GetMaximumSpeedMinValue()
        
        Set the maximum speed value.
        """
        ...
    
    def GetMinimumSpeed(self):
        """
        V.GetMinimumSpeed() -> float
        C++: virtual double GetMinimumSpeed()
        
        Set the minimum speed value.
        """
        ...
    
    def GetMinimumSpeedMaxValue(self):
        """
        V.GetMinimumSpeedMaxValue() -> float
        C++: virtual double GetMinimumSpeedMaxValue()
        
        Set the minimum speed value.
        """
        ...
    
    def GetMinimumSpeedMinValue(self):
        """
        V.GetMinimumSpeedMinValue() -> float
        C++: virtual double GetMinimumSpeedMinValue()
        
        Set the minimum speed value.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBrownianPoints
        C++: vtkBrownianPoints *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBrownianPoints
        C++: static vtkBrownianPoints *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximumSpeed(self, p_float):
        """
        V.SetMaximumSpeed(float)
        C++: virtual void SetMaximumSpeed(double _arg)
        
        Set the maximum speed value.
        """
        ...
    
    def SetMinimumSpeed(self, p_float):
        """
        V.SetMinimumSpeed(float)
        C++: virtual void SetMinimumSpeed(double _arg)
        
        Set the minimum speed value.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


