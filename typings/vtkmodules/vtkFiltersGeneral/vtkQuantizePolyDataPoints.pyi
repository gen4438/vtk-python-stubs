"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkFiltersCore as __vtkmodules_vtkFiltersCore

class vtkQuantizePolyDataPoints(__vtkmodules_vtkFiltersCore.vtkCleanPolyData):
    """
    vtkQuantizePolyDataPoints - quantizes x,y,z coordinates of points
    
    Superclass: vtkCleanPolyData
    
    vtkQuantizePolyDataPoints is a subclass of vtkCleanPolyData and
    inherits the functionality of vtkCleanPolyData with the addition that
    it quantizes the point coordinates before inserting into the point
    list. The user should set QFactor to a positive value (0.25 by
    default) and all {x,y,z} coordinates will be quantized to that grain
    size.
    
    A tolerance of zero is expected, though positive values may be used,
    the quantization will take place before the tolerance is applied.
    
    @warning
    Merging points can alter topology, including introducing non-manifold
    forms. Handling of degenerate cells is controlled by switches in
    vtkCleanPolyData.
    
    @warning
    If you wish to operate on a set of coordinates that has no cells, you
    must add a vtkPolyVertex cell with all of the points to the PolyData
    (or use a vtkVertexGlyphFilter) before using the vtkCleanPolyData
    filter.
    
    @sa
    vtkCleanPolyData
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQFactor(self):
        """
        V.GetQFactor() -> float
        C++: virtual double GetQFactor()
        
        Specify quantization grain size. Default is 0.25
        """
        ...
    
    def GetQFactorMaxValue(self):
        """
        V.GetQFactorMaxValue() -> float
        C++: virtual double GetQFactorMaxValue()
        
        Specify quantization grain size. Default is 0.25
        """
        ...
    
    def GetQFactorMinValue(self):
        """
        V.GetQFactorMinValue() -> float
        C++: virtual double GetQFactorMinValue()
        
        Specify quantization grain size. Default is 0.25
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkQuantizePolyDataPoints
        C++: vtkQuantizePolyDataPoints *NewInstance()
        """
        ...
    
    def OperateOnBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.OperateOnBounds([float, float, float, float, float, float],
            [float, float, float, float, float, float])
        C++: void OperateOnBounds(double in[6], double out[6]) override;
        
        Perform quantization on bounds
        """
        ...
    
    def OperateOnPoint(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.OperateOnPoint([float, float, float], [float, float, float])
        C++: void OperateOnPoint(double in[3], double out[3]) override;
        
        Perform quantization on a point
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkQuantizePolyDataPoints
        C++: static vtkQuantizePolyDataPoints *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetQFactor(self, p_float):
        """
        V.SetQFactor(float)
        C++: virtual void SetQFactor(double _arg)
        
        Specify quantization grain size. Default is 0.25
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


