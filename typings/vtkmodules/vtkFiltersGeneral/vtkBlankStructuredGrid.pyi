"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkBlankStructuredGrid(__vtkmodules_vtkCommonExecutionModel.vtkStructuredGridAlgorithm):
    """
    vtkBlankStructuredGrid - translate point attribute data into a
    blanking field
    
    Superclass: vtkStructuredGridAlgorithm
    
    vtkBlankStructuredGrid is a filter that sets the blanking field in a
    vtkStructuredGrid dataset. The blanking field is set by examining a
    specified point attribute data array (e.g., scalars) and converting
    values in the data array to either a "1" (visible) or "0" (blanked)
    value in the blanking array. The values to be blanked are specified
    by giving a min/max range. All data values in the data array
    indicated and laying within the range specified (inclusive on both
    ends) are translated to a "off" blanking value.
    
    @sa
    vtkStructuredGrid
    """
    def GetArrayId(self):
        """
        V.GetArrayId() -> int
        C++: virtual int GetArrayId()
        
        Specify the data array id to use to generate the blanking field.
        Alternatively, you can specify the array name. (If both are set,
        the array name takes precedence.)
        """
        ...
    
    def GetArrayName(self):
        """
        V.GetArrayName() -> string
        C++: virtual char *GetArrayName()
        
        Specify the data array name to use to generate the blanking
        field. Alternatively, you can specify the array id. (If both are
        set, the array name takes precedence.)
        """
        ...
    
    def GetComponent(self):
        """
        V.GetComponent() -> int
        C++: virtual int GetComponent()
        
        Specify the component in the data array to use to generate the
        blanking field.
        """
        ...
    
    def GetComponentMaxValue(self):
        """
        V.GetComponentMaxValue() -> int
        C++: virtual int GetComponentMaxValue()
        
        Specify the component in the data array to use to generate the
        blanking field.
        """
        ...
    
    def GetComponentMinValue(self):
        """
        V.GetComponentMinValue() -> int
        C++: virtual int GetComponentMinValue()
        
        Specify the component in the data array to use to generate the
        blanking field.
        """
        ...
    
    def GetMaxBlankingValue(self):
        """
        V.GetMaxBlankingValue() -> float
        C++: virtual double GetMaxBlankingValue()
        
        Specify the upper data value in the data array specified which
        will be converted into a "blank" (or off) value in the blanking
        array.
        """
        ...
    
    def GetMinBlankingValue(self):
        """
        V.GetMinBlankingValue() -> float
        C++: virtual double GetMinBlankingValue()
        
        Specify the lower data value in the data array specified which
        will be converted into a "blank" (or off) value in the blanking
        array.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBlankStructuredGrid
        C++: vtkBlankStructuredGrid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBlankStructuredGrid
        C++: static vtkBlankStructuredGrid *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetArrayId(self, p_int):
        """
        V.SetArrayId(int)
        C++: virtual void SetArrayId(int _arg)
        
        Specify the data array id to use to generate the blanking field.
        Alternatively, you can specify the array name. (If both are set,
        the array name takes precedence.)
        """
        ...
    
    def SetArrayName(self, string):
        """
        V.SetArrayName(string)
        C++: virtual void SetArrayName(const char *_arg)
        
        Specify the data array name to use to generate the blanking
        field. Alternatively, you can specify the array id. (If both are
        set, the array name takes precedence.)
        """
        ...
    
    def SetComponent(self, p_int):
        """
        V.SetComponent(int)
        C++: virtual void SetComponent(int _arg)
        
        Specify the component in the data array to use to generate the
        blanking field.
        """
        ...
    
    def SetMaxBlankingValue(self, p_float):
        """
        V.SetMaxBlankingValue(float)
        C++: virtual void SetMaxBlankingValue(double _arg)
        
        Specify the upper data value in the data array specified which
        will be converted into a "blank" (or off) value in the blanking
        array.
        """
        ...
    
    def SetMinBlankingValue(self, p_float):
        """
        V.SetMinBlankingValue(float)
        C++: virtual void SetMinBlankingValue(double _arg)
        
        Specify the lower data value in the data array specified which
        will be converted into a "blank" (or off) value in the blanking
        array.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


