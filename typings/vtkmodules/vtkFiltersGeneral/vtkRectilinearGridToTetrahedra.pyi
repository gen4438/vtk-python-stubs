"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkRectilinearGridToTetrahedra(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkRectilinearGridToTetrahedra - create a Tetrahedral mesh from a
    RectilinearGrid
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkRectilinearGridToTetrahedra forms a mesh of Tetrahedra from a
    vtkRectilinearGrid.  The tetrahedra can be 5 per cell, 6 per cell, or
    a mixture of 5 or 12 per cell. The resulting mesh is consistent,
    meaning that there are no edge crossings and that each tetrahedron
    face is shared by two tetrahedra, except those tetrahedra on the
    boundary. All tetrahedra are right handed.
    
    Note that 12 tetrahedra per cell means adding a point in the center
    of the cell.
    
    In order to subdivide some cells into 5 and some cells into 12
    tetrahedra: SetTetraPerCellTo5And12(); Set the Scalars of the Input
    RectilinearGrid to be 5 or 12 depending on what you want per cell of
    the RectilinearGrid.
    
    If you set RememberVoxelId, the scalars of the tetrahedron will be
    set to the Id of the Cell in the RectilinearGrid from which the
    tetrahedron came.
    
    @par Thanks:
       This class was developed by Samson J. Timoner of the
       MIT Artificial Intelligence Laboratory
    
    @sa
       vtkDelaunay3D
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRememberVoxelId(self):
        """
        V.GetRememberVoxelId() -> int
        C++: virtual vtkTypeBool GetRememberVoxelId()
        
        Should the tetrahedra have scalar data indicating which Voxel
        they came from in the vtkRectilinearGrid?
        """
        ...
    
    def GetTetraPerCell(self):
        """
        V.GetTetraPerCell() -> int
        C++: virtual int GetTetraPerCell()
        
        Set the method to divide each cell (voxel) in the RectilinearGrid
        into tetrahedra.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRectilinearGridToTetrahedra
        C++: vtkRectilinearGridToTetrahedra *NewInstance()
        """
        ...
    
    def RememberVoxelIdOff(self):
        """
        V.RememberVoxelIdOff()
        C++: virtual void RememberVoxelIdOff()
        
        Should the tetrahedra have scalar data indicating which Voxel
        they came from in the vtkRectilinearGrid?
        """
        ...
    
    def RememberVoxelIdOn(self):
        """
        V.RememberVoxelIdOn()
        C++: virtual void RememberVoxelIdOn()
        
        Should the tetrahedra have scalar data indicating which Voxel
        they came from in the vtkRectilinearGrid?
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRectilinearGridToTetrahedra
        C++: static vtkRectilinearGridToTetrahedra *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInput(self, , , p_float_6):
        """
        V.SetInput((float, float, float), (float, float, float), float)
        C++: void SetInput(const double Extent[3],
            const double Spacing[3], const double tol=0.001)
        V.SetInput(float, float, float, float, float, float, float)
        C++: void SetInput(const double ExtentX, const double ExtentY,
            const double ExtentZ, const double SpacingX,
            const double SpacingY, const double SpacingZ,
            const double tol=0.001)
        
        This function for convenience for creating a Rectilinear Grid If
        Spacing does not fit evenly into extent, the last cell will have
        a different width (or height or depth). If Extent[i]/Spacing[i]
        is within tol of an integer, then assume the programmer meant an
        integer for direction i.
        """
        ...
    
    def SetRememberVoxelId(self, p_int):
        """
        V.SetRememberVoxelId(int)
        C++: virtual void SetRememberVoxelId(vtkTypeBool _arg)
        
        Should the tetrahedra have scalar data indicating which Voxel
        they came from in the vtkRectilinearGrid?
        """
        ...
    
    def SetTetraPerCell(self, p_int):
        """
        V.SetTetraPerCell(int)
        C++: virtual void SetTetraPerCell(int _arg)
        
        Set the method to divide each cell (voxel) in the RectilinearGrid
        into tetrahedra.
        """
        ...
    
    def SetTetraPerCellTo12(self):
        """
        V.SetTetraPerCellTo12()
        C++: void SetTetraPerCellTo12()
        
        Set the method to divide each cell (voxel) in the RectilinearGrid
        into tetrahedra.
        """
        ...
    
    def SetTetraPerCellTo5(self):
        """
        V.SetTetraPerCellTo5()
        C++: void SetTetraPerCellTo5()
        
        Set the method to divide each cell (voxel) in the RectilinearGrid
        into tetrahedra.
        """
        ...
    
    def SetTetraPerCellTo5And12(self):
        """
        V.SetTetraPerCellTo5And12()
        C++: void SetTetraPerCellTo5And12()
        
        Set the method to divide each cell (voxel) in the RectilinearGrid
        into tetrahedra.
        """
        ...
    
    def SetTetraPerCellTo6(self):
        """
        V.SetTetraPerCellTo6()
        C++: void SetTetraPerCellTo6()
        
        Set the method to divide each cell (voxel) in the RectilinearGrid
        into tetrahedra.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


