"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkReflectionFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkReflectionFilter - reflects a data set across a plane
    
    Superclass: vtkDataObjectAlgorithm
    
    The vtkReflectionFilter reflects a data set across one of the planes
    formed by the data set's bounding box. Since it converts data sets
    into unstructured grids, it is not efficient for structured data
    sets.
    """
    def CopyInputOff(self):
        """
        V.CopyInputOff()
        C++: virtual void CopyInputOff()
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the reflection.
        """
        ...
    
    def CopyInputOn(self):
        """
        V.CopyInputOn()
        C++: virtual void CopyInputOn()
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the reflection.
        """
        ...
    
    def FlipAllInputArraysOff(self):
        """
        V.FlipAllInputArraysOff()
        C++: virtual void FlipAllInputArraysOff()
        
        If off (the default), only Vectors, Normals and Tensors will be
        flipped. If on, all 3-component data arrays ( considered as 3D
        vectors), 6-component data arrays (considered as symmetric
        tensors), 9-component data arrays (considered as tensors ) of
        signed type will be flipped. All other won't be flipped and will
        only be copied.
        """
        ...
    
    def FlipAllInputArraysOn(self):
        """
        V.FlipAllInputArraysOn()
        C++: virtual void FlipAllInputArraysOn()
        
        If off (the default), only Vectors, Normals and Tensors will be
        flipped. If on, all 3-component data arrays ( considered as 3D
        vectors), 6-component data arrays (considered as symmetric
        tensors), 9-component data arrays (considered as tensors ) of
        signed type will be flipped. All other won't be flipped and will
        only be copied.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> float
        C++: virtual double GetCenter()
        
        If the reflection plane is set to X, Y or Z, this variable is use
        to set the position of the plane.
        """
        ...
    
    def GetCopyInput(self):
        """
        V.GetCopyInput() -> int
        C++: virtual vtkTypeBool GetCopyInput()
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the reflection.
        """
        ...
    
    def GetFlipAllInputArrays(self):
        """
        V.GetFlipAllInputArrays() -> bool
        C++: virtual bool GetFlipAllInputArrays()
        
        If off (the default), only Vectors, Normals and Tensors will be
        flipped. If on, all 3-component data arrays ( considered as 3D
        vectors), 6-component data arrays (considered as symmetric
        tensors), 9-component data arrays (considered as tensors ) of
        signed type will be flipped. All other won't be flipped and will
        only be copied.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlane(self):
        """
        V.GetPlane() -> int
        C++: virtual int GetPlane()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def GetPlaneMaxValue(self):
        """
        V.GetPlaneMaxValue() -> int
        C++: virtual int GetPlaneMaxValue()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def GetPlaneMinValue(self):
        """
        V.GetPlaneMinValue() -> int
        C++: virtual int GetPlaneMinValue()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkReflectionFilter
        C++: vtkReflectionFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkReflectionFilter
        C++: static vtkReflectionFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float):
        """
        V.SetCenter(float)
        C++: virtual void SetCenter(double _arg)
        
        If the reflection plane is set to X, Y or Z, this variable is use
        to set the position of the plane.
        """
        ...
    
    def SetCopyInput(self, p_int):
        """
        V.SetCopyInput(int)
        C++: virtual void SetCopyInput(vtkTypeBool _arg)
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the reflection.
        """
        ...
    
    def SetFlipAllInputArrays(self, bool):
        """
        V.SetFlipAllInputArrays(bool)
        C++: virtual void SetFlipAllInputArrays(bool _arg)
        
        If off (the default), only Vectors, Normals and Tensors will be
        flipped. If on, all 3-component data arrays ( considered as 3D
        vectors), 6-component data arrays (considered as symmetric
        tensors), 9-component data arrays (considered as tensors ) of
        signed type will be flipped. All other won't be flipped and will
        only be copied.
        """
        ...
    
    def SetPlane(self, p_int):
        """
        V.SetPlane(int)
        C++: virtual void SetPlane(int _arg)
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToX(self):
        """
        V.SetPlaneToX()
        C++: void SetPlaneToX()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToXMax(self):
        """
        V.SetPlaneToXMax()
        C++: void SetPlaneToXMax()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToXMin(self):
        """
        V.SetPlaneToXMin()
        C++: void SetPlaneToXMin()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToY(self):
        """
        V.SetPlaneToY()
        C++: void SetPlaneToY()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToYMax(self):
        """
        V.SetPlaneToYMax()
        C++: void SetPlaneToYMax()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToYMin(self):
        """
        V.SetPlaneToYMin()
        C++: void SetPlaneToYMin()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToZ(self):
        """
        V.SetPlaneToZ()
        C++: void SetPlaneToZ()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToZMax(self):
        """
        V.SetPlaneToZMax()
        C++: void SetPlaneToZMax()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def SetPlaneToZMin(self):
        """
        V.SetPlaneToZMin()
        C++: void SetPlaneToZMin()
        
        Set the normal of the plane to use as mirror.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ReflectionPlane = ...
    USE_X = ...
    USE_X_MAX = ...
    USE_X_MIN = ...
    USE_Y = ...
    USE_Y_MAX = ...
    USE_Y_MIN = ...
    USE_Z = ...
    USE_Z_MAX = ...
    USE_Z_MIN = ...
    __dict__ = ...
    __vtkname__ = ...


