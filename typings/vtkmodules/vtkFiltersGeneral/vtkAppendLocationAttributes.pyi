"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAppendLocationAttributes(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkAppendLocationAttributes - add point locations to point data
    and/or cell centers cell data, respectively
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkAppendLocationAttributes is a filter that takes as input any
    dataset and optionally adds points as point data and optionally adds
    cell center locations as cell data in the output. The center of a
    cell is its parametric center, not necessarily the geometric or
    bounding box center. Point and cell attributes in the input can
    optionally be copied to the output.
    
    ote Empty cells will have their center set to (0, 0, 0).
    
    @sa
    vtkCellCenters
    """
    def AppendCellCentersOff(self):
        """
        V.AppendCellCentersOff()
        C++: virtual void AppendCellCentersOff()
        
        Enable/disable whether input cell center locations should be
        saved as a cell data array. Default is `true` i.e. the cell
        centers will be propagated as a cell data array named
        "CellCenters".
        """
        ...
    
    def AppendCellCentersOn(self):
        """
        V.AppendCellCentersOn()
        C++: virtual void AppendCellCentersOn()
        
        Enable/disable whether input cell center locations should be
        saved as a cell data array. Default is `true` i.e. the cell
        centers will be propagated as a cell data array named
        "CellCenters".
        """
        ...
    
    def AppendPointLocationsOff(self):
        """
        V.AppendPointLocationsOff()
        C++: virtual void AppendPointLocationsOff()
        """
        ...
    
    def AppendPointLocationsOn(self):
        """
        V.AppendPointLocationsOn()
        C++: virtual void AppendPointLocationsOn()
        """
        ...
    
    def GetAppendCellCenters(self):
        """
        V.GetAppendCellCenters() -> bool
        C++: virtual bool GetAppendCellCenters()
        
        Enable/disable whether input cell center locations should be
        saved as a cell data array. Default is `true` i.e. the cell
        centers will be propagated as a cell data array named
        "CellCenters".
        """
        ...
    
    def GetAppendPointLocations(self):
        """
        V.GetAppendPointLocations() -> bool
        C++: virtual bool GetAppendPointLocations()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAppendLocationAttributes
        C++: vtkAppendLocationAttributes *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAppendLocationAttributes
        C++: static vtkAppendLocationAttributes *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAppendCellCenters(self, bool):
        """
        V.SetAppendCellCenters(bool)
        C++: virtual void SetAppendCellCenters(bool _arg)
        
        Enable/disable whether input cell center locations should be
        saved as a cell data array. Default is `true` i.e. the cell
        centers will be propagated as a cell data array named
        "CellCenters".
        """
        ...
    
    def SetAppendPointLocations(self, bool):
        """
        V.SetAppendPointLocations(bool)
        C++: virtual void SetAppendPointLocations(bool _arg)
        
        Enable/disable whether input point locations should be saved as a
        point data array. Default is `true` i.e. the points will be
        propagated as a point data array named "PointLocations".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


