"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkBlankStructuredGridWithImage(__vtkmodules_vtkCommonExecutionModel.vtkStructuredGridAlgorithm):
    """
    vtkBlankStructuredGridWithImage - blank a structured grid with an
    image
    
    Superclass: vtkStructuredGridAlgorithm
    
    This filter can be used to set the blanking in a structured grid with
    an image. The filter takes two inputs: the structured grid to blank,
    and the image used to set the blanking. Make sure that the dimensions
    of both the image and the structured grid are identical.
    
    Note that the image is interpreted as follows: zero values indicate
    that the structured grid point is blanked; non-zero values indicate
    that the structured grid point is visible. The blanking data must be
    unsigned char.
    
    @sa
    vtkStructuredGrid
    """
    def GetBlankingInput(self):
        """
        V.GetBlankingInput() -> vtkImageData
        C++: vtkImageData *GetBlankingInput()
        
        Set / get the input image used to perform the blanking.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBlankStructuredGridWithImage
        C++: vtkBlankStructuredGridWithImage *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBlankStructuredGridWithImage
        C++: static vtkBlankStructuredGridWithImage *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBlankingInputData(self, vtkImageData):
        """
        V.SetBlankingInputData(vtkImageData)
        C++: void SetBlankingInputData(vtkImageData *input)
        
        Set / get the input image used to perform the blanking.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


