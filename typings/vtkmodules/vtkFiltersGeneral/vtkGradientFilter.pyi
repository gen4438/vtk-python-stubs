"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkGradientFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkGradientFilter - A general filter for gradient estimation.
    
    Superclass: vtkDataSetAlgorithm
    
    Estimates the gradient of a field in a data set.  The gradient
    calculation is dependent on the input dataset type.  The created
    gradient array is of the same type as the array it is calculated from
    (e.g. point data or cell data) but the data type will be either float
    or double.  At the boundary the gradient is not central differencing.
     The output gradient array has 3*number of components of the input
    data array.  The ordering for the output gradient tuple will be
    {du/dx, du/dy, du/dz, dv/dx, dv/dy, dv/dz, dw/dx, dw/dy, dw/dz} for
    an input array {u, v, w}. There are also the options to additionally
    compute the vorticity and Q criterion of a vector field. Unstructured
    grids and polydata can have cells of different dimensions. To handle
    different use cases in this situation, the user can specify which
    cells contribute to the computation. The options for this are All
    (default), Patch and DataSetMax. Patch uses only the highest
    dimension cells attached to a point. DataSetMax uses the highest cell
    dimension in the entire data set. For Patch or DataSetMax it is
    possible that some values will not be computed. The
    ReplacementValueOption specifies what to use for these values.
    """
    def ComputeDivergenceOff(self):
        """
        V.ComputeDivergenceOff()
        C++: virtual void ComputeDivergenceOff()
        
        Add divergence to the output field data.  The name of the array
        will be DivergenceArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def ComputeDivergenceOn(self):
        """
        V.ComputeDivergenceOn()
        C++: virtual void ComputeDivergenceOn()
        
        Add divergence to the output field data.  The name of the array
        will be DivergenceArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def ComputeGradientOff(self):
        """
        V.ComputeGradientOff()
        C++: virtual void ComputeGradientOff()
        
        Add the gradient to the output field data.  The name of the array
        will be ResultArrayName and will be the same type as the input
        array. The default is on.
        """
        ...
    
    def ComputeGradientOn(self):
        """
        V.ComputeGradientOn()
        C++: virtual void ComputeGradientOn()
        
        Add the gradient to the output field data.  The name of the array
        will be ResultArrayName and will be the same type as the input
        array. The default is on.
        """
        ...
    
    def ComputeQCriterionOff(self):
        """
        V.ComputeQCriterionOff()
        C++: virtual void ComputeQCriterionOff()
        
        Add Q-criterion to the output field data.  The name of the array
        will be QCriterionArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this.  Note that Q-citerion is a balance of the rate of
        vorticity and the rate of strain. The default is off.
        """
        ...
    
    def ComputeQCriterionOn(self):
        """
        V.ComputeQCriterionOn()
        C++: virtual void ComputeQCriterionOn()
        
        Add Q-criterion to the output field data.  The name of the array
        will be QCriterionArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this.  Note that Q-citerion is a balance of the rate of
        vorticity and the rate of strain. The default is off.
        """
        ...
    
    def ComputeVorticityOff(self):
        """
        V.ComputeVorticityOff()
        C++: virtual void ComputeVorticityOff()
        
        Add voriticity/curl to the output field data.  The name of the
        array will be VorticityArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def ComputeVorticityOn(self):
        """
        V.ComputeVorticityOn()
        C++: virtual void ComputeVorticityOn()
        
        Add voriticity/curl to the output field data.  The name of the
        array will be VorticityArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def FasterApproximationOff(self):
        """
        V.FasterApproximationOff()
        C++: virtual void FasterApproximationOff()
        
        When this flag is on (default is off), the gradient filter will
        provide a less accurate (but close) algorithm that performs fewer
        derivative calculations (and is therefore faster).  The error
        contains some smoothing of the output data and some possible
        errors on the boundary.  This parameter has no effect when
        performing the gradient of cell data. This only applies if the
        input grid is a vtkUnstructuredGrid or a vtkPolyData.
        """
        ...
    
    def FasterApproximationOn(self):
        """
        V.FasterApproximationOn()
        C++: virtual void FasterApproximationOn()
        
        When this flag is on (default is off), the gradient filter will
        provide a less accurate (but close) algorithm that performs fewer
        derivative calculations (and is therefore faster).  The error
        contains some smoothing of the output data and some possible
        errors on the boundary.  This parameter has no effect when
        performing the gradient of cell data. This only applies if the
        input grid is a vtkUnstructuredGrid or a vtkPolyData.
        """
        ...
    
    def GetComputeDivergence(self):
        """
        V.GetComputeDivergence() -> int
        C++: virtual vtkTypeBool GetComputeDivergence()
        
        Add divergence to the output field data.  The name of the array
        will be DivergenceArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def GetComputeGradient(self):
        """
        V.GetComputeGradient() -> int
        C++: virtual vtkTypeBool GetComputeGradient()
        
        Add the gradient to the output field data.  The name of the array
        will be ResultArrayName and will be the same type as the input
        array. The default is on.
        """
        ...
    
    def GetComputeQCriterion(self):
        """
        V.GetComputeQCriterion() -> int
        C++: virtual vtkTypeBool GetComputeQCriterion()
        
        Add Q-criterion to the output field data.  The name of the array
        will be QCriterionArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this.  Note that Q-citerion is a balance of the rate of
        vorticity and the rate of strain. The default is off.
        """
        ...
    
    def GetComputeVorticity(self):
        """
        V.GetComputeVorticity() -> int
        C++: virtual vtkTypeBool GetComputeVorticity()
        
        Add voriticity/curl to the output field data.  The name of the
        array will be VorticityArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def GetContributingCellOption(self):
        """
        V.GetContributingCellOption() -> int
        C++: virtual int GetContributingCellOption()
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def GetContributingCellOptionMaxValue(self):
        """
        V.GetContributingCellOptionMaxValue() -> int
        C++: virtual int GetContributingCellOptionMaxValue()
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def GetContributingCellOptionMinValue(self):
        """
        V.GetContributingCellOptionMinValue() -> int
        C++: virtual int GetContributingCellOptionMinValue()
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def GetDivergenceArrayName(self):
        """
        V.GetDivergenceArrayName() -> string
        C++: virtual char *GetDivergenceArrayName()
        
        Get/Set the name of the divergence array to create. This is only
        used if ComputeDivergence is non-zero. If nullptr (the default)
        then the output array will be named "Divergence".
        """
        ...
    
    def GetFasterApproximation(self):
        """
        V.GetFasterApproximation() -> int
        C++: virtual vtkTypeBool GetFasterApproximation()
        
        When this flag is on (default is off), the gradient filter will
        provide a less accurate (but close) algorithm that performs fewer
        derivative calculations (and is therefore faster).  The error
        contains some smoothing of the output data and some possible
        errors on the boundary.  This parameter has no effect when
        performing the gradient of cell data. This only applies if the
        input grid is a vtkUnstructuredGrid or a vtkPolyData.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQCriterionArrayName(self):
        """
        V.GetQCriterionArrayName() -> string
        C++: virtual char *GetQCriterionArrayName()
        
        Get/Set the name of the Q criterion array to create. This is only
        used if ComputeQCriterion is non-zero. If nullptr (the default)
        then the output array will be named "Q-criterion".
        """
        ...
    
    def GetReplacementValueOption(self):
        """
        V.GetReplacementValueOption() -> int
        C++: virtual int GetReplacementValueOption()
        
        Option to specify what replacement value or entities that don't
        have any gradient computed over them based on the
        ContributingCellOption. Options are (Zero, NaN, DataTypeMin,
        DataTypeMax). The default is Zero.
        """
        ...
    
    def GetReplacementValueOptionMaxValue(self):
        """
        V.GetReplacementValueOptionMaxValue() -> int
        C++: virtual int GetReplacementValueOptionMaxValue()
        
        Option to specify what replacement value or entities that don't
        have any gradient computed over them based on the
        ContributingCellOption. Options are (Zero, NaN, DataTypeMin,
        DataTypeMax). The default is Zero.
        """
        ...
    
    def GetReplacementValueOptionMinValue(self):
        """
        V.GetReplacementValueOptionMinValue() -> int
        C++: virtual int GetReplacementValueOptionMinValue()
        
        Option to specify what replacement value or entities that don't
        have any gradient computed over them based on the
        ContributingCellOption. Options are (Zero, NaN, DataTypeMin,
        DataTypeMax). The default is Zero.
        """
        ...
    
    def GetResultArrayName(self):
        """
        V.GetResultArrayName() -> string
        C++: virtual char *GetResultArrayName()
        
        Get/Set the name of the gradient array to create.  This is only
        used if ComputeGradient is non-zero. If nullptr (the default)
        then the output array will be named "Gradients".
        """
        ...
    
    def GetVorticityArrayName(self):
        """
        V.GetVorticityArrayName() -> string
        C++: virtual char *GetVorticityArrayName()
        
        Get/Set the name of the vorticity array to create. This is only
        used if ComputeVorticity is non-zero. If nullptr (the default)
        then the output array will be named "Vorticity".
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGradientFilter
        C++: vtkGradientFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGradientFilter
        C++: static vtkGradientFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComputeDivergence(self, p_int):
        """
        V.SetComputeDivergence(int)
        C++: virtual void SetComputeDivergence(vtkTypeBool _arg)
        
        Add divergence to the output field data.  The name of the array
        will be DivergenceArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def SetComputeGradient(self, p_int):
        """
        V.SetComputeGradient(int)
        C++: virtual void SetComputeGradient(vtkTypeBool _arg)
        
        Add the gradient to the output field data.  The name of the array
        will be ResultArrayName and will be the same type as the input
        array. The default is on.
        """
        ...
    
    def SetComputeQCriterion(self, p_int):
        """
        V.SetComputeQCriterion(int)
        C++: virtual void SetComputeQCriterion(vtkTypeBool _arg)
        
        Add Q-criterion to the output field data.  The name of the array
        will be QCriterionArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this.  Note that Q-citerion is a balance of the rate of
        vorticity and the rate of strain. The default is off.
        """
        ...
    
    def SetComputeVorticity(self, p_int):
        """
        V.SetComputeVorticity(int)
        C++: virtual void SetComputeVorticity(vtkTypeBool _arg)
        
        Add voriticity/curl to the output field data.  The name of the
        array will be VorticityArrayName and will be the same type as the
        input array.  The input array must have 3 components in order to
        compute this. The default is off.
        """
        ...
    
    def SetContributingCellOption(self, p_int):
        """
        V.SetContributingCellOption(int)
        C++: virtual void SetContributingCellOption(int _arg)
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def SetDivergenceArrayName(self, string):
        """
        V.SetDivergenceArrayName(string)
        C++: virtual void SetDivergenceArrayName(const char *_arg)
        
        Get/Set the name of the divergence array to create. This is only
        used if ComputeDivergence is non-zero. If nullptr (the default)
        then the output array will be named "Divergence".
        """
        ...
    
    def SetFasterApproximation(self, p_int):
        """
        V.SetFasterApproximation(int)
        C++: virtual void SetFasterApproximation(vtkTypeBool _arg)
        
        When this flag is on (default is off), the gradient filter will
        provide a less accurate (but close) algorithm that performs fewer
        derivative calculations (and is therefore faster).  The error
        contains some smoothing of the output data and some possible
        errors on the boundary.  This parameter has no effect when
        performing the gradient of cell data. This only applies if the
        input grid is a vtkUnstructuredGrid or a vtkPolyData.
        """
        ...
    
    def SetInputScalars(self, p_int, string):
        """
        V.SetInputScalars(int, string)
        C++: virtual void SetInputScalars(int fieldAssociation,
            const char *name)
        V.SetInputScalars(int, int)
        C++: virtual void SetInputScalars(int fieldAssociation,
            int fieldAttributeType)
        
        These are basically a convenience method that calls
        SetInputArrayToProcess to set the array used as the input
        scalars.  The fieldAssociation comes from the
        vtkDataObject::FieldAssociations enum.  The fieldAttributeType
        comes from the vtkDataSetAttributes::AttributeTypes enum.
        """
        ...
    
    def SetQCriterionArrayName(self, string):
        """
        V.SetQCriterionArrayName(string)
        C++: virtual void SetQCriterionArrayName(const char *_arg)
        
        Get/Set the name of the Q criterion array to create. This is only
        used if ComputeQCriterion is non-zero. If nullptr (the default)
        then the output array will be named "Q-criterion".
        """
        ...
    
    def SetReplacementValueOption(self, p_int):
        """
        V.SetReplacementValueOption(int)
        C++: virtual void SetReplacementValueOption(int _arg)
        
        Option to specify what replacement value or entities that don't
        have any gradient computed over them based on the
        ContributingCellOption. Options are (Zero, NaN, DataTypeMin,
        DataTypeMax). The default is Zero.
        """
        ...
    
    def SetResultArrayName(self, string):
        """
        V.SetResultArrayName(string)
        C++: virtual void SetResultArrayName(const char *_arg)
        
        Get/Set the name of the gradient array to create.  This is only
        used if ComputeGradient is non-zero. If nullptr (the default)
        then the output array will be named "Gradients".
        """
        ...
    
    def SetVorticityArrayName(self, string):
        """
        V.SetVorticityArrayName(string)
        C++: virtual void SetVorticityArrayName(const char *_arg)
        
        Get/Set the name of the vorticity array to create. This is only
        used if ComputeVorticity is non-zero. If nullptr (the default)
        then the output array will be named "Vorticity".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    All = ...
    ContributingCellEnum = ...
    DataSetMax = ...
    DataTypeMax = ...
    DataTypeMin = ...
    NaN = ...
    Patch = ...
    ReplacementValueEnum = ...
    Zero = ...
    __dict__ = ...
    __vtkname__ = ...


