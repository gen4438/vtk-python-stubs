"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSplineFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSplineFilter - generate uniformly subdivided polylines from a set
    of input polyline using a vtkSpline
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSplineFilter is a filter that generates an output polylines from
    an input set of polylines. The polylines are uniformly subdivided and
    produced with the help of a vtkSpline class that the user can specify
    (by default a vtkCardinalSpline is used). The number of subdivisions
    of the line can be controlled in several ways. The user can either
    specify the number of subdivisions or a length of each subdivision
    can be provided (and the class will figure out how many subdivisions
    is required over the whole polyline). The maximum number of
    subdivisions can also be set.
    
    The output of this filter is a polyline per input polyline (or line).
    New points and texture coordinates are created. Point data is
    interpolated and cell data passed on. Any polylines with less than
    two points, or who have coincident points, are ignored.
    
    @sa
    vtkRibbonFilter vtkTubeFilter
    """
    def GetGenerateTCoords(self):
        """
        V.GetGenerateTCoords() -> int
        C++: virtual int GetGenerateTCoords()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def GetGenerateTCoordsAsString(self):
        """
        V.GetGenerateTCoordsAsString() -> string
        C++: const char *GetGenerateTCoordsAsString()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def GetGenerateTCoordsMaxValue(self):
        """
        V.GetGenerateTCoordsMaxValue() -> int
        C++: virtual int GetGenerateTCoordsMaxValue()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def GetGenerateTCoordsMinValue(self):
        """
        V.GetGenerateTCoordsMinValue() -> int
        C++: virtual int GetGenerateTCoordsMinValue()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def GetLength(self):
        """
        V.GetLength() -> float
        C++: virtual double GetLength()
        
        Control the number of subdivisions that are created for the
        polyline based on an absolute length. The length of the spline is
        divided by this length to determine the number of subdivisions.
        """
        ...
    
    def GetLengthMaxValue(self):
        """
        V.GetLengthMaxValue() -> float
        C++: virtual double GetLengthMaxValue()
        
        Control the number of subdivisions that are created for the
        polyline based on an absolute length. The length of the spline is
        divided by this length to determine the number of subdivisions.
        """
        ...
    
    def GetLengthMinValue(self):
        """
        V.GetLengthMinValue() -> float
        C++: virtual double GetLengthMinValue()
        
        Control the number of subdivisions that are created for the
        polyline based on an absolute length. The length of the spline is
        divided by this length to determine the number of subdivisions.
        """
        ...
    
    def GetMaximumNumberOfSubdivisions(self):
        """
        V.GetMaximumNumberOfSubdivisions() -> int
        C++: virtual int GetMaximumNumberOfSubdivisions()
        
        Set the maximum number of subdivisions that are created for each
        polyline.
        """
        ...
    
    def GetMaximumNumberOfSubdivisionsMaxValue(self):
        """
        V.GetMaximumNumberOfSubdivisionsMaxValue() -> int
        C++: virtual int GetMaximumNumberOfSubdivisionsMaxValue()
        
        Set the maximum number of subdivisions that are created for each
        polyline.
        """
        ...
    
    def GetMaximumNumberOfSubdivisionsMinValue(self):
        """
        V.GetMaximumNumberOfSubdivisionsMinValue() -> int
        C++: virtual int GetMaximumNumberOfSubdivisionsMinValue()
        
        Set the maximum number of subdivisions that are created for each
        polyline.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfSubdivisions(self):
        """
        V.GetNumberOfSubdivisions() -> int
        C++: virtual int GetNumberOfSubdivisions()
        
        Set the number of subdivisions that are created for the polyline.
        This method only has effect if Subdivisions is set to
        SetSubdivisionsToSpecify().
        """
        ...
    
    def GetNumberOfSubdivisionsMaxValue(self):
        """
        V.GetNumberOfSubdivisionsMaxValue() -> int
        C++: virtual int GetNumberOfSubdivisionsMaxValue()
        
        Set the number of subdivisions that are created for the polyline.
        This method only has effect if Subdivisions is set to
        SetSubdivisionsToSpecify().
        """
        ...
    
    def GetNumberOfSubdivisionsMinValue(self):
        """
        V.GetNumberOfSubdivisionsMinValue() -> int
        C++: virtual int GetNumberOfSubdivisionsMinValue()
        
        Set the number of subdivisions that are created for the polyline.
        This method only has effect if Subdivisions is set to
        SetSubdivisionsToSpecify().
        """
        ...
    
    def GetSpline(self):
        """
        V.GetSpline() -> vtkSpline
        C++: virtual vtkSpline *GetSpline()
        
        Specify an instance of vtkSpline to use to perform the
        interpolation.
        """
        ...
    
    def GetSubdivide(self):
        """
        V.GetSubdivide() -> int
        C++: virtual int GetSubdivide()
        
        Specify how the number of subdivisions is determined.
        """
        ...
    
    def GetSubdivideAsString(self):
        """
        V.GetSubdivideAsString() -> string
        C++: const char *GetSubdivideAsString()
        
        Specify how the number of subdivisions is determined.
        """
        ...
    
    def GetSubdivideMaxValue(self):
        """
        V.GetSubdivideMaxValue() -> int
        C++: virtual int GetSubdivideMaxValue()
        
        Specify how the number of subdivisions is determined.
        """
        ...
    
    def GetSubdivideMinValue(self):
        """
        V.GetSubdivideMinValue() -> int
        C++: virtual int GetSubdivideMinValue()
        
        Specify how the number of subdivisions is determined.
        """
        ...
    
    def GetTextureLength(self):
        """
        V.GetTextureLength() -> float
        C++: virtual double GetTextureLength()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def GetTextureLengthMaxValue(self):
        """
        V.GetTextureLengthMaxValue() -> float
        C++: virtual double GetTextureLengthMaxValue()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def GetTextureLengthMinValue(self):
        """
        V.GetTextureLengthMinValue() -> float
        C++: virtual double GetTextureLengthMinValue()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSplineFilter
        C++: vtkSplineFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSplineFilter
        C++: static vtkSplineFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGenerateTCoords(self, p_int):
        """
        V.SetGenerateTCoords(int)
        C++: virtual void SetGenerateTCoords(int _arg)
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def SetGenerateTCoordsToNormalizedLength(self):
        """
        V.SetGenerateTCoordsToNormalizedLength()
        C++: void SetGenerateTCoordsToNormalizedLength()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def SetGenerateTCoordsToOff(self):
        """
        V.SetGenerateTCoordsToOff()
        C++: void SetGenerateTCoordsToOff()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def SetGenerateTCoordsToUseLength(self):
        """
        V.SetGenerateTCoordsToUseLength()
        C++: void SetGenerateTCoordsToUseLength()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def SetGenerateTCoordsToUseScalars(self):
        """
        V.SetGenerateTCoordsToUseScalars()
        C++: void SetGenerateTCoordsToUseScalars()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the output polyline. The texture coordinates
        can be generated in three ways: a normalized (0,1) generation;
        based on the length (divided by the texture length); and by using
        the input scalar values.
        """
        ...
    
    def SetLength(self, p_float):
        """
        V.SetLength(float)
        C++: virtual void SetLength(double _arg)
        
        Control the number of subdivisions that are created for the
        polyline based on an absolute length. The length of the spline is
        divided by this length to determine the number of subdivisions.
        """
        ...
    
    def SetMaximumNumberOfSubdivisions(self, p_int):
        """
        V.SetMaximumNumberOfSubdivisions(int)
        C++: virtual void SetMaximumNumberOfSubdivisions(int _arg)
        
        Set the maximum number of subdivisions that are created for each
        polyline.
        """
        ...
    
    def SetNumberOfSubdivisions(self, p_int):
        """
        V.SetNumberOfSubdivisions(int)
        C++: virtual void SetNumberOfSubdivisions(int _arg)
        
        Set the number of subdivisions that are created for the polyline.
        This method only has effect if Subdivisions is set to
        SetSubdivisionsToSpecify().
        """
        ...
    
    def SetSpline(self, vtkSpline):
        """
        V.SetSpline(vtkSpline)
        C++: virtual void SetSpline(vtkSpline *)
        
        Specify an instance of vtkSpline to use to perform the
        interpolation.
        """
        ...
    
    def SetSubdivide(self, p_int):
        """
        V.SetSubdivide(int)
        C++: virtual void SetSubdivide(int _arg)
        
        Specify how the number of subdivisions is determined.
        """
        ...
    
    def SetSubdivideToLength(self):
        """
        V.SetSubdivideToLength()
        C++: void SetSubdivideToLength()
        
        Specify how the number of subdivisions is determined.
        """
        ...
    
    def SetSubdivideToSpecified(self):
        """
        V.SetSubdivideToSpecified()
        C++: void SetSubdivideToSpecified()
        
        Specify how the number of subdivisions is determined.
        """
        ...
    
    def SetTextureLength(self, p_float):
        """
        V.SetTextureLength(float)
        C++: virtual void SetTextureLength(double _arg)
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


