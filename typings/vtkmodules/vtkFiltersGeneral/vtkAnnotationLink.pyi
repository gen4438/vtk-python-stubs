"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAnnotationLink(__vtkmodules_vtkCommonExecutionModel.vtkAnnotationLayersAlgorithm):
    """
    vtkAnnotationLink - An algorithm for linking annotations among objects
    
    Superclass: vtkAnnotationLayersAlgorithm
    
    vtkAnnotationLink is a simple source filter which outputs the
    vtkAnnotationLayers object stored internally.  Multiple objects may
    share the same annotation link filter and connect it to an internal
    pipeline so that if one object changes the annotation set, it will be
    pulled into all the other objects when their pipelines update.
    
    The shared vtkAnnotationLayers object (a collection of annotations)
    is shallow copied to output port 0.
    
    vtkAnnotationLink can also store a set of domain maps. A domain map
    is simply a table associating values between domains. The domain of
    each column is defined by the array name of the column. The domain
    maps are sent to a multi-block dataset in output port 1.
    
    Output ports 0 and 1 can be set as input ports 0 and 1 to
    vtkConvertSelectionDomain, which can use the domain maps to convert
    the domains of selections in the vtkAnnotationLayers to match a
    particular data object (set as port 2 on vtkConvertSelectionDomain).
    
    The shared vtkAnnotationLayers object also stores a "current
    selection" normally interpreted as the interactive selection of an
    application. As a convenience, this selection is sent to output port
    2 so that it can be connected to pipelines requiring a vtkSelection.
    """
    def AddDomainMap(self, vtkTable):
        """
        V.AddDomainMap(vtkTable)
        C++: void AddDomainMap(vtkTable *map)
        
        The domain mappings.
        """
        ...
    
    def GetAnnotationLayers(self):
        """
        V.GetAnnotationLayers() -> vtkAnnotationLayers
        C++: virtual vtkAnnotationLayers *GetAnnotationLayers()
        
        The annotations to be shared.
        """
        ...
    
    def GetCurrentSelection(self):
        """
        V.GetCurrentSelection() -> vtkSelection
        C++: virtual vtkSelection *GetCurrentSelection()
        
        Set or get the current selection in the annotation layers.
        """
        ...
    
    def GetDomainMap(self, p_int):
        """
        V.GetDomainMap(int) -> vtkTable
        C++: vtkTable *GetDomainMap(int i)
        
        The domain mappings.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the mtime of this object.
        """
        ...
    
    def GetNumberOfDomainMaps(self):
        """
        V.GetNumberOfDomainMaps() -> int
        C++: int GetNumberOfDomainMaps()
        
        The domain mappings.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAnnotationLink
        C++: vtkAnnotationLink *NewInstance()
        """
        ...
    
    def RemoveAllDomainMaps(self):
        """
        V.RemoveAllDomainMaps()
        C++: void RemoveAllDomainMaps()
        
        The domain mappings.
        """
        ...
    
    def RemoveDomainMap(self, vtkTable):
        """
        V.RemoveDomainMap(vtkTable)
        C++: void RemoveDomainMap(vtkTable *map)
        
        The domain mappings.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAnnotationLink
        C++: static vtkAnnotationLink *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAnnotationLayers(self, vtkAnnotationLayers):
        """
        V.SetAnnotationLayers(vtkAnnotationLayers)
        C++: virtual void SetAnnotationLayers(vtkAnnotationLayers *layers)
        
        The annotations to be shared.
        """
        ...
    
    def SetCurrentSelection(self, vtkSelection):
        """
        V.SetCurrentSelection(vtkSelection)
        C++: virtual void SetCurrentSelection(vtkSelection *sel)
        
        Set or get the current selection in the annotation layers.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


