"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkCoincidentPoints(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkCoincidentPoints - contains an octree of labels
    
    Superclass: vtkObject
    
    This class provides a collection of points that is organized such
    that each coordinate is stored with a set of point id's of points
    that are all coincident.
    """
    def AddPoint(self, p_int, ):
        """
        V.AddPoint(int, (float, float, float))
        C++: void AddPoint(vtkIdType Id, const double point[3])
        
        Accumulates a set of Ids in a map where the point coordinate is
        the key. All Ids in a given map entry are thus coincident.
        @param Id - a unique Id for the given point that will be stored
            in an vtkIdList.
        @param[in] point - the point coordinate that we will store in the
        map to test if any other
        points are coincident with it.
        """
        ...
    
    def Clear(self):
        """
        V.Clear()
        C++: void Clear()
        
        Clear the maps for reuse. This should be called if the caller
        might reuse this class (another executive pass for instance).
        """
        ...
    
    def GetCoincidentPointIds(self, ):
        """
        V.GetCoincidentPointIds((float, float, float)) -> vtkIdList
        C++: vtkIdList *GetCoincidentPointIds(const double point[3])
        
        Retrieve the list of point Ids that are coincident with the given
        point.
        @param[in] point - the coordinate of coincident points we want to
        retrieve.
        """
        ...
    
    def GetNextCoincidentPointIds(self):
        """
        V.GetNextCoincidentPointIds() -> vtkIdList
        C++: vtkIdList *GetNextCoincidentPointIds()
        
        Used to iterate the sets of coincident points within the map.
        InitTraversal must be called first or nullptr will always be
        returned.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InitTraversal(self):
        """
        V.InitTraversal()
        C++: void InitTraversal()
        
        Initialize iteration to the beginning of the coincident point
        map.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCoincidentPoints
        C++: vtkCoincidentPoints *NewInstance()
        """
        ...
    
    def RemoveNonCoincidentPoints(self):
        """
        V.RemoveNonCoincidentPoints()
        C++: void RemoveNonCoincidentPoints()
        
        Iterate through all added points and remove any entries that have
        no coincident points (only a single point Id).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCoincidentPoints
        C++: static vtkCoincidentPoints *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SpiralPoints(self, p_int, vtkPoints):
        """
        V.SpiralPoints(int, vtkPoints)
        C++: static void SpiralPoints(vtkIdType num, vtkPoints *offsets)
        
        Calculate num points, at a regular interval, along a parametric
        spiral. Note this spiral is only in two dimensions having a
        constant z value.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


