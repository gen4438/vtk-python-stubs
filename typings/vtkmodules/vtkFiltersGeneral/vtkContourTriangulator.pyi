"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkContourTriangulator(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkContourTriangulator - Fill all 2D contours to create polygons
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkContourTriangulator will generate triangles to fill all of the 2D
    contours in its input.  The contours may be concave, and may even
    contain holes i.e. a contour may contain an internal contour that is
    wound in the opposite direction to indicate that it is a hole.
    @warning
    The triangulation of is done in O(n) time for simple convex inputs,
    but for non-convex inputs the worst-case time is O(n^2*m^2) where n
    is the number of points and m is the number of holes. The best
    triangulation algorithms, in contrast, are O(n log n). The resulting
    triangles may be quite narrow, the algorithm does not attempt to
    produce high-quality triangles.@par Thanks: Thanks to David Gobbi for
    contributing this class to VTK.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTriangulationError(self):
        """
        V.GetTriangulationError() -> int
        C++: virtual int GetTriangulationError()
        
        Check if there was a triangulation failure in the last update.
        """
        ...
    
    def GetTriangulationErrorDisplay(self):
        """
        V.GetTriangulationErrorDisplay() -> int
        C++: virtual vtkTypeBool GetTriangulationErrorDisplay()
        
        Generate errors when the triangulation fails. Note that
        triangulation failures are often minor, because they involve tiny
        triangles that are too small to see.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContourTriangulator
        C++: vtkContourTriangulator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContourTriangulator
        C++: static vtkContourTriangulator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetTriangulationErrorDisplay(self, p_int):
        """
        V.SetTriangulationErrorDisplay(int)
        C++: virtual void SetTriangulationErrorDisplay(vtkTypeBool _arg)
        
        Generate errors when the triangulation fails. Note that
        triangulation failures are often minor, because they involve tiny
        triangles that are too small to see.
        """
        ...
    
    def TriangulateContours(self, vtkPolyData, p_int, p_int_1, vtkCellArray, ):
        """
        V.TriangulateContours(vtkPolyData, int, int, vtkCellArray, (float,
             float, float)) -> int
        C++: static int TriangulateContours(vtkPolyData *data,
            vtkIdType firstLine, vtkIdType numLines,
            vtkCellArray *outputPolys, const double normal[3])
        
        Given some closed contour lines, create a triangle mesh that
        fills those lines.  The input lines must be single-segment lines,
        not polylines.  The input lines do not have to be in order. Only
        numLines starting from firstLine will be used.
        """
        ...
    
    def TriangulatePolygon(self, vtkIdList, vtkPoints, vtkCellArray):
        """
        V.TriangulatePolygon(vtkIdList, vtkPoints, vtkCellArray) -> int
        C++: static int TriangulatePolygon(vtkIdList *polygon,
            vtkPoints *points, vtkCellArray *triangles)
        
        A robust method for triangulating a polygon. It cleans up the
        polygon and then applies the ear-cut triangulation. A zero return
        value indicates that triangulation failed.
        """
        ...
    
    def TriangulationErrorDisplayOff(self):
        """
        V.TriangulationErrorDisplayOff()
        C++: virtual void TriangulationErrorDisplayOff()
        
        Generate errors when the triangulation fails. Note that
        triangulation failures are often minor, because they involve tiny
        triangles that are too small to see.
        """
        ...
    
    def TriangulationErrorDisplayOn(self):
        """
        V.TriangulationErrorDisplayOn()
        C++: virtual void TriangulationErrorDisplayOn()
        
        Generate errors when the triangulation fails. Note that
        triangulation failures are often minor, because they involve tiny
        triangles that are too small to see.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


