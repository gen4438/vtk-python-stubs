"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCellDerivatives(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkCellDerivatives - compute derivatives of scalars and vectors
    
    Superclass: vtkDataSetAlgorithm
    
    vtkCellDerivatives is a filter that computes derivatives of scalars
    and vectors at the center of cells. You can choose to generate
    different output including the scalar gradient (a vector), computed
    tensor vorticity (a vector), gradient of input vectors (a tensor),
    and strain matrix (linearized or Green-Lagrange) of the input vectors
    (a tensor); or you may choose to pass data through to the output.
    
    Note that it is assumed that on input scalars and vector point data
    is available, which are then used to generate cell vectors and
    tensors. (The interpolation functions of the cells are used to
    compute the derivatives which is why point data is required.)
    
    Note that the tensor components used to be sent out in column, but
    they are now sent out not in row.
    
    @warning
    The computed derivatives are cell attribute data; you can convert
    them to point attribute data by using the vtkCellDataToPointData
    filter. Note that, due to the interpolation function used (obtained
    using 1/r**2 normalized sum), the derivatives calculated for polygons
    with more than 4 vertices are inaccurate in most cases.
    
    @warning
    The point data is passed through the filter to the output.
    
    @sa
    vtkVectorNorm
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTensorMode(self):
        """
        V.GetTensorMode() -> int
        C++: virtual int GetTensorMode()
        
        Control how the filter works to generate tensor cell data. You
        can choose to pass the input cell tensors, compute the gradient
        of the input vectors, or compute the strain tensor (linearized or
        Green-Lagrange strain)of the vector gradient tensor. By default
        (TensorModeToComputeGradient), the filter will take the gradient
        of the vector data to construct a tensor.
        """
        ...
    
    def GetTensorModeAsString(self):
        """
        V.GetTensorModeAsString() -> string
        C++: const char *GetTensorModeAsString()
        
        Control how the filter works to generate tensor cell data. You
        can choose to pass the input cell tensors, compute the gradient
        of the input vectors, or compute the strain tensor (linearized or
        Green-Lagrange strain)of the vector gradient tensor. By default
        (TensorModeToComputeGradient), the filter will take the gradient
        of the vector data to construct a tensor.
        """
        ...
    
    def GetVectorMode(self):
        """
        V.GetVectorMode() -> int
        C++: virtual int GetVectorMode()
        
        Control how the filter works to generate vector cell data. You
        can choose to pass the input cell vectors, compute the gradient
        of the input scalars, or extract the vorticity of the computed
        vector gradient tensor. By default (VectorModeToComputeGradient),
        the filter will take the gradient of the input scalar data.
        """
        ...
    
    def GetVectorModeAsString(self):
        """
        V.GetVectorModeAsString() -> string
        C++: const char *GetVectorModeAsString()
        
        Control how the filter works to generate vector cell data. You
        can choose to pass the input cell vectors, compute the gradient
        of the input scalars, or extract the vorticity of the computed
        vector gradient tensor. By default (VectorModeToComputeGradient),
        the filter will take the gradient of the input scalar data.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellDerivatives
        C++: vtkCellDerivatives *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellDerivatives
        C++: static vtkCellDerivatives *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetTensorMode(self, p_int):
        """
        V.SetTensorMode(int)
        C++: virtual void SetTensorMode(int _arg)
        
        Control how the filter works to generate tensor cell data. You
        can choose to pass the input cell tensors, compute the gradient
        of the input vectors, or compute the strain tensor (linearized or
        Green-Lagrange strain)of the vector gradient tensor. By default
        (TensorModeToComputeGradient), the filter will take the gradient
        of the vector data to construct a tensor.
        """
        ...
    
    def SetTensorModeToComputeGradient(self):
        """
        V.SetTensorModeToComputeGradient()
        C++: void SetTensorModeToComputeGradient()
        
        Control how the filter works to generate tensor cell data. You
        can choose to pass the input cell tensors, compute the gradient
        of the input vectors, or compute the strain tensor (linearized or
        Green-Lagrange strain)of the vector gradient tensor. By default
        (TensorModeToComputeGradient), the filter will take the gradient
        of the vector data to construct a tensor.
        """
        ...
    
    def SetTensorModeToComputeGreenLagrangeStrain(self):
        """
        V.SetTensorModeToComputeGreenLagrangeStrain()
        C++: void SetTensorModeToComputeGreenLagrangeStrain()
        
        Control how the filter works to generate tensor cell data. You
        can choose to pass the input cell tensors, compute the gradient
        of the input vectors, or compute the strain tensor (linearized or
        Green-Lagrange strain)of the vector gradient tensor. By default
        (TensorModeToComputeGradient), the filter will take the gradient
        of the vector data to construct a tensor.
        """
        ...
    
    def SetTensorModeToComputeStrain(self):
        """
        V.SetTensorModeToComputeStrain()
        C++: void SetTensorModeToComputeStrain()
        
        Control how the filter works to generate tensor cell data. You
        can choose to pass the input cell tensors, compute the gradient
        of the input vectors, or compute the strain tensor (linearized or
        Green-Lagrange strain)of the vector gradient tensor. By default
        (TensorModeToComputeGradient), the filter will take the gradient
        of the vector data to construct a tensor.
        """
        ...
    
    def SetTensorModeToPassTensors(self):
        """
        V.SetTensorModeToPassTensors()
        C++: void SetTensorModeToPassTensors()
        
        Control how the filter works to generate tensor cell data. You
        can choose to pass the input cell tensors, compute the gradient
        of the input vectors, or compute the strain tensor (linearized or
        Green-Lagrange strain)of the vector gradient tensor. By default
        (TensorModeToComputeGradient), the filter will take the gradient
        of the vector data to construct a tensor.
        """
        ...
    
    def SetVectorMode(self, p_int):
        """
        V.SetVectorMode(int)
        C++: virtual void SetVectorMode(int _arg)
        
        Control how the filter works to generate vector cell data. You
        can choose to pass the input cell vectors, compute the gradient
        of the input scalars, or extract the vorticity of the computed
        vector gradient tensor. By default (VectorModeToComputeGradient),
        the filter will take the gradient of the input scalar data.
        """
        ...
    
    def SetVectorModeToComputeGradient(self):
        """
        V.SetVectorModeToComputeGradient()
        C++: void SetVectorModeToComputeGradient()
        
        Control how the filter works to generate vector cell data. You
        can choose to pass the input cell vectors, compute the gradient
        of the input scalars, or extract the vorticity of the computed
        vector gradient tensor. By default (VectorModeToComputeGradient),
        the filter will take the gradient of the input scalar data.
        """
        ...
    
    def SetVectorModeToComputeVorticity(self):
        """
        V.SetVectorModeToComputeVorticity()
        C++: void SetVectorModeToComputeVorticity()
        
        Control how the filter works to generate vector cell data. You
        can choose to pass the input cell vectors, compute the gradient
        of the input scalars, or extract the vorticity of the computed
        vector gradient tensor. By default (VectorModeToComputeGradient),
        the filter will take the gradient of the input scalar data.
        """
        ...
    
    def SetVectorModeToPassVectors(self):
        """
        V.SetVectorModeToPassVectors()
        C++: void SetVectorModeToPassVectors()
        
        Control how the filter works to generate vector cell data. You
        can choose to pass the input cell vectors, compute the gradient
        of the input scalars, or extract the vorticity of the computed
        vector gradient tensor. By default (VectorModeToComputeGradient),
        the filter will take the gradient of the input scalar data.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


