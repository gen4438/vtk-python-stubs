"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkStructuredGridClip(__vtkmodules_vtkCommonExecutionModel.vtkStructuredGridAlgorithm):
    """
    vtkStructuredGridClip - Reduces the image extent of the input.
    
    Superclass: vtkStructuredGridAlgorithm
    
    vtkStructuredGridClip  will make an image smaller.  The output must
    have an image extent which is the subset of the input.  The filter
    has two modes of operation: 1: By default, the data is not copied in
    this filter. Only the whole extent is modified. 2: If ClipDataOn is
    set, then you will get no more that the clipped extent.
    """
    def ClipDataOff(self):
        """
        V.ClipDataOff()
        C++: virtual void ClipDataOff()
        
        By default, ClipData is off, and only the WholeExtent is
        modified. the data's extent may actually be larger.  When this
        flag is on, the data extent will be no more than the
        OutputWholeExtent.
        """
        ...
    
    def ClipDataOn(self):
        """
        V.ClipDataOn()
        C++: virtual void ClipDataOn()
        
        By default, ClipData is off, and only the WholeExtent is
        modified. the data's extent may actually be larger.  When this
        flag is on, the data extent will be no more than the
        OutputWholeExtent.
        """
        ...
    
    def GetClipData(self):
        """
        V.GetClipData() -> int
        C++: virtual vtkTypeBool GetClipData()
        
        By default, ClipData is off, and only the WholeExtent is
        modified. the data's extent may actually be larger.  When this
        flag is on, the data extent will be no more than the
        OutputWholeExtent.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputWholeExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetOutputWholeExtent([int, int, int, int, int, int])
        C++: void GetOutputWholeExtent(int extent[6])
        V.GetOutputWholeExtent() -> (int, ...)
        C++: int *GetOutputWholeExtent()
        
        The whole extent of the output has to be set explicitly.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredGridClip
        C++: vtkStructuredGridClip *NewInstance()
        """
        ...
    
    def ResetOutputWholeExtent(self):
        """
        V.ResetOutputWholeExtent()
        C++: void ResetOutputWholeExtent()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredGridClip
        C++: static vtkStructuredGridClip *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClipData(self, p_int):
        """
        V.SetClipData(int)
        C++: virtual void SetClipData(vtkTypeBool _arg)
        
        By default, ClipData is off, and only the WholeExtent is
        modified. the data's extent may actually be larger.  When this
        flag is on, the data extent will be no more than the
        OutputWholeExtent.
        """
        ...
    
    def SetOutputWholeExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.SetOutputWholeExtent([int, int, int, int, int, int],
            vtkInformation)
        C++: void SetOutputWholeExtent(int extent[6],
            vtkInformation *outInfo=nullptr)
        V.SetOutputWholeExtent(int, int, int, int, int, int)
        C++: void SetOutputWholeExtent(int minX, int maxX, int minY,
            int maxY, int minZ, int maxZ)
        
        The whole extent of the output has to be set explicitly.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


