"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkRotationFilter(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkRotationFilter - Duplicates a data set by rotation about an axis
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    The vtkRotationFilter duplicates a data set by rotation about one of
    the 3 axis of the dataset's reference. Since it converts data sets
    into unstructured grids, it is not efficient for structured data
    sets.
    
    @par Thanks: Theophane Foggia of The Swiss National Supercomputing
    Centre (CSCS) for creating and contributing this filter
    """
    def CopyInputOff(self):
        """
        V.CopyInputOff()
        C++: virtual void CopyInputOff()
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the rotation.
        """
        ...
    
    def CopyInputOn(self):
        """
        V.CopyInputOn()
        C++: virtual void CopyInputOn()
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the rotation.
        """
        ...
    
    def GetAngle(self):
        """
        V.GetAngle() -> float
        C++: virtual double GetAngle()
        
        Set the rotation angle to use.
        """
        ...
    
    def GetAxis(self):
        """
        V.GetAxis() -> int
        C++: virtual int GetAxis()
        
        Set the axis of rotation to use. It is set by default to Z.
        """
        ...
    
    def GetAxisMaxValue(self):
        """
        V.GetAxisMaxValue() -> int
        C++: virtual int GetAxisMaxValue()
        
        Set the axis of rotation to use. It is set by default to Z.
        """
        ...
    
    def GetAxisMinValue(self):
        """
        V.GetAxisMinValue() -> int
        C++: virtual int GetAxisMinValue()
        
        Set the axis of rotation to use. It is set by default to Z.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set the rotation center coordinates.
        """
        ...
    
    def GetCopyInput(self):
        """
        V.GetCopyInput() -> int
        C++: virtual vtkTypeBool GetCopyInput()
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the rotation.
        """
        ...
    
    def GetNumberOfCopies(self):
        """
        V.GetNumberOfCopies() -> int
        C++: virtual int GetNumberOfCopies()
        
        Set the number of copies to create. The source will be rotated N
        times and a new polydata copy of the original created at each
        angular position All copies will be appended to form a single
        output
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRotationFilter
        C++: vtkRotationFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRotationFilter
        C++: static vtkRotationFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAngle(self, p_float):
        """
        V.SetAngle(float)
        C++: virtual void SetAngle(double _arg)
        
        Set the rotation angle to use.
        """
        ...
    
    def SetAxis(self, p_int):
        """
        V.SetAxis(int)
        C++: virtual void SetAxis(int _arg)
        
        Set the axis of rotation to use. It is set by default to Z.
        """
        ...
    
    def SetAxisToX(self):
        """
        V.SetAxisToX()
        C++: void SetAxisToX()
        
        Set the axis of rotation to use. It is set by default to Z.
        """
        ...
    
    def SetAxisToY(self):
        """
        V.SetAxisToY()
        C++: void SetAxisToY()
        
        Set the axis of rotation to use. It is set by default to Z.
        """
        ...
    
    def SetAxisToZ(self):
        """
        V.SetAxisToZ()
        C++: void SetAxisToZ()
        
        Set the axis of rotation to use. It is set by default to Z.
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set the rotation center coordinates.
        """
        ...
    
    def SetCopyInput(self, p_int):
        """
        V.SetCopyInput(int)
        C++: virtual void SetCopyInput(vtkTypeBool _arg)
        
        If on (the default), copy the input geometry to the output. If
        off, the output will only contain the rotation.
        """
        ...
    
    def SetNumberOfCopies(self, p_int):
        """
        V.SetNumberOfCopies(int)
        C++: virtual void SetNumberOfCopies(int _arg)
        
        Set the number of copies to create. The source will be rotated N
        times and a new polydata copy of the original created at each
        angular position All copies will be appended to form a single
        output
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    RotationAxis = ...
    USE_X = ...
    USE_Y = ...
    USE_Z = ...
    __dict__ = ...
    __vtkname__ = ...


