"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPassSelectedArrays(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkPassSelectedArrays - pass through chosen arrays
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkPassSelectedArrays can be used to pass through chosen arrays. It
    is intended as a replacement for vtkPassArrays filter with a more
    standard API that uses `vtkDataArraySelection` to choose arrays to
    pass through.
    
    To enable/disable arrays to pass, get the appropriate
    `vtkDataArraySelection` instance using `GetArraySelection` or the
    association specific get methods such as
    `GetPointDataArraySelection`, `GetCellDataArraySelection` etc. and
    then enable/disable arrays using `vtkDataArraySelection` API. Using
    vtkDataArraySelection::SetUnknownArraySetting` one also dictate how
    arrays not explicitly listed are to be handled.
    """
    def EnabledOff(self):
        """
        V.EnabledOff()
        C++: virtual void EnabledOff()
        
        Enable/disable this filter. When disabled, this filter passes all
        input arrays irrespective of the array selections. Default is
        `true`.
        """
        ...
    
    def EnabledOn(self):
        """
        V.EnabledOn()
        C++: virtual void EnabledOn()
        
        Enable/disable this filter. When disabled, this filter passes all
        input arrays irrespective of the array selections. Default is
        `true`.
        """
        ...
    
    def GetArraySelection(self, p_int):
        """
        V.GetArraySelection(int) -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetArraySelection(int association)
        
        Returns the vtkDataArraySelection instance associated with a
        particular array association type
        (vtkDataObject::FieldAssociations). Returns nullptr if the
        association type is invalid others the corresponding
        vtkDataArraySelection instance is returned.
        """
        ...
    
    def GetCellDataArraySelection(self):
        """
        V.GetCellDataArraySelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetCellDataArraySelection()
        
        Convenience methods that call `GetArraySelection` with
        corresponding association type.
        """
        ...
    
    def GetEdgeDataArraySelection(self):
        """
        V.GetEdgeDataArraySelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetEdgeDataArraySelection()
        
        Convenience methods that call `GetArraySelection` with
        corresponding association type.
        """
        ...
    
    def GetEnabled(self):
        """
        V.GetEnabled() -> bool
        C++: virtual bool GetEnabled()
        
        Enable/disable this filter. When disabled, this filter passes all
        input arrays irrespective of the array selections. Default is
        `true`.
        """
        ...
    
    def GetFieldDataArraySelection(self):
        """
        V.GetFieldDataArraySelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetFieldDataArraySelection()
        
        Convenience methods that call `GetArraySelection` with
        corresponding association type.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPointDataArraySelection(self):
        """
        V.GetPointDataArraySelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetPointDataArraySelection()
        
        Convenience methods that call `GetArraySelection` with
        corresponding association type.
        """
        ...
    
    def GetRowDataArraySelection(self):
        """
        V.GetRowDataArraySelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetRowDataArraySelection()
        
        Convenience methods that call `GetArraySelection` with
        corresponding association type.
        """
        ...
    
    def GetVertexDataArraySelection(self):
        """
        V.GetVertexDataArraySelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetVertexDataArraySelection()
        
        Convenience methods that call `GetArraySelection` with
        corresponding association type.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPassSelectedArrays
        C++: vtkPassSelectedArrays *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPassSelectedArrays
        C++: static vtkPassSelectedArrays *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEnabled(self, bool):
        """
        V.SetEnabled(bool)
        C++: virtual void SetEnabled(bool _arg)
        
        Enable/disable this filter. When disabled, this filter passes all
        input arrays irrespective of the array selections. Default is
        `true`.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


