"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkWarpScalar(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkWarpScalar - deform geometry with scalar data
    
    Superclass: vtkPointSetAlgorithm
    
    vtkWarpScalar is a filter that modifies point coordinates by moving
    points along point normals by the scalar amount times the scale
    factor. Useful for creating carpet or x-y-z plots.
    
    If normals are not present in data, the Normal instance variable will
    be used as the direction along which to warp the geometry. If normals
    are present but you would like to use the Normal instance variable,
    set the UseNormal boolean to true.
    
    If XYPlane boolean is set true, then the z-value is considered to be
    a scalar value (still scaled by scale factor), and the displacement
    is along the z-axis. If scalars are also present, these are copied
    through and can be used to color the surface.
    
    Note that the filter passes both its point data and cell data to its
    output, except for normals, since these are distorted by the warping.
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetNormal(self):
        """
        V.GetNormal() -> (float, float, float)
        C++: virtual double *GetNormal()
        
        Normal (i.e., direction) along which to warp geometry. Only used
        if UseNormal boolean set to true or no normals available in data.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Specify value to scale displacement.
        """
        ...
    
    def GetUseNormal(self):
        """
        V.GetUseNormal() -> int
        C++: virtual vtkTypeBool GetUseNormal()
        
        Turn on/off use of user specified normal. If on, data normals
        will be ignored and instance variable Normal will be used
        instead.
        """
        ...
    
    def GetXYPlane(self):
        """
        V.GetXYPlane() -> int
        C++: virtual vtkTypeBool GetXYPlane()
        
        Turn on/off flag specifying that input data is x-y plane. If x-y
        plane, then the z value is used to warp the surface in the z-axis
        direction (times the scale factor) and scalars are used to color
        the surface.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWarpScalar
        C++: vtkWarpScalar *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWarpScalar
        C++: static vtkWarpScalar *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetNormal(float, float, float)
        C++: virtual void SetNormal(double _arg1, double _arg2,
            double _arg3)
        V.SetNormal((float, float, float))
        C++: virtual void SetNormal(const double _arg[3])
        
        Normal (i.e., direction) along which to warp geometry. Only used
        if UseNormal boolean set to true or no normals available in data.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Specify value to scale displacement.
        """
        ...
    
    def SetUseNormal(self, p_int):
        """
        V.SetUseNormal(int)
        C++: virtual void SetUseNormal(vtkTypeBool _arg)
        
        Turn on/off use of user specified normal. If on, data normals
        will be ignored and instance variable Normal will be used
        instead.
        """
        ...
    
    def SetXYPlane(self, p_int):
        """
        V.SetXYPlane(int)
        C++: virtual void SetXYPlane(vtkTypeBool _arg)
        
        Turn on/off flag specifying that input data is x-y plane. If x-y
        plane, then the z value is used to warp the surface in the z-axis
        direction (times the scale factor) and scalars are used to color
        the surface.
        """
        ...
    
    def UseNormalOff(self):
        """
        V.UseNormalOff()
        C++: virtual void UseNormalOff()
        
        Turn on/off use of user specified normal. If on, data normals
        will be ignored and instance variable Normal will be used
        instead.
        """
        ...
    
    def UseNormalOn(self):
        """
        V.UseNormalOn()
        C++: virtual void UseNormalOn()
        
        Turn on/off use of user specified normal. If on, data normals
        will be ignored and instance variable Normal will be used
        instead.
        """
        ...
    
    def XYPlaneOff(self):
        """
        V.XYPlaneOff()
        C++: virtual void XYPlaneOff()
        
        Turn on/off flag specifying that input data is x-y plane. If x-y
        plane, then the z value is used to warp the surface in the z-axis
        direction (times the scale factor) and scalars are used to color
        the surface.
        """
        ...
    
    def XYPlaneOn(self):
        """
        V.XYPlaneOn()
        C++: virtual void XYPlaneOn()
        
        Turn on/off flag specifying that input data is x-y plane. If x-y
        plane, then the z value is used to warp the surface in the z-axis
        direction (times the scale factor) and scalars are used to color
        the surface.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


