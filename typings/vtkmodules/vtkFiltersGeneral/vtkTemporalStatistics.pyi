"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTemporalStatistics(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkTemporalStatistics - Compute statistics of point or cell data as
    it changes over time
    
    Superclass: vtkPassInputTypeAlgorithm
    
    Given an input that changes over time, vtkTemporalStatistics looks at
    the data for each time step and computes some statistical information
    of how a point or cell variable changes over time.  For example,
    vtkTemporalStatistics can compute the average value of "pressure"
    over time of each point.
    
    Note that this filter will require the upstream filter to be run on
    every time step that it reports that it can compute.  This may be a
    time consuming operation.
    
    vtkTemporalStatistics ignores the temporal spacing.  Each timestep
    will be weighted the same regardless of how long of an interval it is
    to the next timestep.  Thus, the average statistic may be quite
    different from an integration of the variable if the time spacing
    varies.
    
    @par Thanks: This class was originally written by Kenneth Moreland
    (kmorel@sandia.gov) from Sandia National Laboratories.
    """
    def ComputeAverageOff(self):
        """
        V.ComputeAverageOff()
        C++: virtual void ComputeAverageOff()
        
        Turn on/off the computation of the average values over time.  On
        by default.  The resulting array names have "_average" appended
        to them.
        """
        ...
    
    def ComputeAverageOn(self):
        """
        V.ComputeAverageOn()
        C++: virtual void ComputeAverageOn()
        
        Turn on/off the computation of the average values over time.  On
        by default.  The resulting array names have "_average" appended
        to them.
        """
        ...
    
    def ComputeMaximumOff(self):
        """
        V.ComputeMaximumOff()
        C++: virtual void ComputeMaximumOff()
        
        Turn on/off the computation of the maximum values over time.  On
        by default.  The resulting array names have "_maximum" appended
        to them.
        """
        ...
    
    def ComputeMaximumOn(self):
        """
        V.ComputeMaximumOn()
        C++: virtual void ComputeMaximumOn()
        
        Turn on/off the computation of the maximum values over time.  On
        by default.  The resulting array names have "_maximum" appended
        to them.
        """
        ...
    
    def ComputeMinimumOff(self):
        """
        V.ComputeMinimumOff()
        C++: virtual void ComputeMinimumOff()
        
        Turn on/off the computation of the minimum values over time.  On
        by default.  The resulting array names have "_minimum" appended
        to them.
        """
        ...
    
    def ComputeMinimumOn(self):
        """
        V.ComputeMinimumOn()
        C++: virtual void ComputeMinimumOn()
        
        Turn on/off the computation of the minimum values over time.  On
        by default.  The resulting array names have "_minimum" appended
        to them.
        """
        ...
    
    def ComputeStandardDeviationOff(self):
        """
        V.ComputeStandardDeviationOff()
        C++: virtual void ComputeStandardDeviationOff()
        """
        ...
    
    def ComputeStandardDeviationOn(self):
        """
        V.ComputeStandardDeviationOn()
        C++: virtual void ComputeStandardDeviationOn()
        """
        ...
    
    def GetComputeAverage(self):
        """
        V.GetComputeAverage() -> int
        C++: virtual vtkTypeBool GetComputeAverage()
        
        Turn on/off the computation of the average values over time.  On
        by default.  The resulting array names have "_average" appended
        to them.
        """
        ...
    
    def GetComputeMaximum(self):
        """
        V.GetComputeMaximum() -> int
        C++: virtual vtkTypeBool GetComputeMaximum()
        
        Turn on/off the computation of the maximum values over time.  On
        by default.  The resulting array names have "_maximum" appended
        to them.
        """
        ...
    
    def GetComputeMinimum(self):
        """
        V.GetComputeMinimum() -> int
        C++: virtual vtkTypeBool GetComputeMinimum()
        
        Turn on/off the computation of the minimum values over time.  On
        by default.  The resulting array names have "_minimum" appended
        to them.
        """
        ...
    
    def GetComputeStandardDeviation(self):
        """
        V.GetComputeStandardDeviation() -> int
        C++: virtual vtkTypeBool GetComputeStandardDeviation()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTemporalStatistics
        C++: vtkTemporalStatistics *NewInstance()
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTemporalStatistics
        C++: static vtkTemporalStatistics *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def SetComputeAverage(self, p_int):
        """
        V.SetComputeAverage(int)
        C++: virtual void SetComputeAverage(vtkTypeBool _arg)
        
        Turn on/off the computation of the average values over time.  On
        by default.  The resulting array names have "_average" appended
        to them.
        """
        ...
    
    def SetComputeMaximum(self, p_int):
        """
        V.SetComputeMaximum(int)
        C++: virtual void SetComputeMaximum(vtkTypeBool _arg)
        
        Turn on/off the computation of the maximum values over time.  On
        by default.  The resulting array names have "_maximum" appended
        to them.
        """
        ...
    
    def SetComputeMinimum(self, p_int):
        """
        V.SetComputeMinimum(int)
        C++: virtual void SetComputeMinimum(vtkTypeBool _arg)
        
        Turn on/off the computation of the minimum values over time.  On
        by default.  The resulting array names have "_minimum" appended
        to them.
        """
        ...
    
    def SetComputeStandardDeviation(self, p_int):
        """
        V.SetComputeStandardDeviation(int)
        C++: virtual void SetComputeStandardDeviation(vtkTypeBool _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


