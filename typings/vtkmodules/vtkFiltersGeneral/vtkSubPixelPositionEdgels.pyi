"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSubPixelPositionEdgels(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSubPixelPositionEdgels - adjust edgel locations based on gradients.
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSubPixelPositionEdgels is a filter that takes a series of linked
    edgels (digital curves) and gradient maps as input. It then adjusts
    the edgel locations based on the gradient data. Specifically, the
    algorithm first determines the neighboring gradient magnitudes of an
    edgel using simple interpolation of its neighbors. It then fits the
    following three data points: negative gradient direction gradient
    magnitude, edgel gradient magnitude and positive gradient direction
    gradient magnitude to a quadratic function. It then solves this
    quadratic to find the maximum gradient location along the gradient
    orientation.  It then modifies the edgels location along the gradient
    orientation to the calculated maximum location. This algorithm does
    not adjust an edgel in the direction orthogonal to its gradient
    vector.
    
    @sa
    vtkImageData vtkImageGradient vtkLinkEdgels
    """
    def GetGradMaps(self):
        """
        V.GetGradMaps() -> vtkStructuredPoints
        C++: vtkStructuredPoints *GetGradMaps()
        
        Set/Get the gradient data for doing the position adjustments.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTargetFlag(self):
        """
        V.GetTargetFlag() -> int
        C++: virtual vtkTypeBool GetTargetFlag()
        
        These methods can make the positioning look for a target scalar
        value instead of looking for a maximum.
        """
        ...
    
    def GetTargetValue(self):
        """
        V.GetTargetValue() -> float
        C++: virtual double GetTargetValue()
        
        These methods can make the positioning look for a target scalar
        value instead of looking for a maximum.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSubPixelPositionEdgels
        C++: vtkSubPixelPositionEdgels *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSubPixelPositionEdgels
        C++: static vtkSubPixelPositionEdgels *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetGradMapsData(self, vtkStructuredPoints):
        """
        V.SetGradMapsData(vtkStructuredPoints)
        C++: void SetGradMapsData(vtkStructuredPoints *gm)
        
        Set/Get the gradient data for doing the position adjustments.
        """
        ...
    
    def SetTargetFlag(self, p_int):
        """
        V.SetTargetFlag(int)
        C++: virtual void SetTargetFlag(vtkTypeBool _arg)
        
        These methods can make the positioning look for a target scalar
        value instead of looking for a maximum.
        """
        ...
    
    def SetTargetValue(self, p_float):
        """
        V.SetTargetValue(float)
        C++: virtual void SetTargetValue(double _arg)
        
        These methods can make the positioning look for a target scalar
        value instead of looking for a maximum.
        """
        ...
    
    def TargetFlagOff(self):
        """
        V.TargetFlagOff()
        C++: virtual void TargetFlagOff()
        
        These methods can make the positioning look for a target scalar
        value instead of looking for a maximum.
        """
        ...
    
    def TargetFlagOn(self):
        """
        V.TargetFlagOn()
        C++: virtual void TargetFlagOn()
        
        These methods can make the positioning look for a target scalar
        value instead of looking for a maximum.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


