"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

VTK_QUALITY_AREA = ...
VTK_QUALITY_ASPECT_BETA = ...
VTK_QUALITY_ASPECT_FROBENIUS = ...
VTK_QUALITY_ASPECT_GAMMA = ...
VTK_QUALITY_ASPECT_RATIO = ...
VTK_QUALITY_COLLAPSE_RATIO = ...
VTK_QUALITY_CONDITION = ...
VTK_QUALITY_DIAGONAL = ...
VTK_QUALITY_DIMENSION = ...
VTK_QUALITY_DISTORTION = ...
VTK_QUALITY_EDGE_RATIO = ...
VTK_QUALITY_JACOBIAN = ...
VTK_QUALITY_MAX_ANGLE = ...
VTK_QUALITY_MAX_ASPECT_FROBENIUS = ...
VTK_QUALITY_MAX_EDGE_RATIO = ...
VTK_QUALITY_MED_ASPECT_FROBENIUS = ...
VTK_QUALITY_MIN_ANGLE = ...
VTK_QUALITY_ODDY = ...
VTK_QUALITY_RADIUS_RATIO = ...
VTK_QUALITY_RELATIVE_SIZE_SQUARED = ...
VTK_QUALITY_SCALED_JACOBIAN = ...
VTK_QUALITY_SHAPE = ...
VTK_QUALITY_SHAPE_AND_SIZE = ...
VTK_QUALITY_SHEAR = ...
VTK_QUALITY_SHEAR_AND_SIZE = ...
VTK_QUALITY_SKEW = ...
VTK_QUALITY_STRETCH = ...
VTK_QUALITY_TAPER = ...
VTK_QUALITY_VOLUME = ...
VTK_QUALITY_WARPAGE = ...
class vtkCellQuality(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkCellQuality - Calculate functions of quality of the elements
     of a mesh
    
    Superclass: vtkDataSetAlgorithm
    
    vtkCellQuality computes one or more functions of (geometric) quality
    for each cell of a mesh.  The per-cell quality is added to the mesh's
    cell data, in an array named "CellQuality." Cell types not supported
    by this filter or undefined quality of supported cell types will have
    an entry of -1.
    
    @warning
    Most quadrilateral quality functions are intended for planar
    quadrilaterals only.  The minimal angle is not, strictly speaking, a
    quality function, but it is provided because of its usage by many
    authors.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQualityMeasure(self):
        """
        V.GetQualityMeasure() -> int
        C++: virtual int GetQualityMeasure()
        
        Set/Get the particular estimator used to function the quality of
        all supported geometries. For qualities that are not defined for
        certain geometries, later program logic ensures that
        CellQualityNone static function will be used so that a predefined
        value is returned for the request. There is no default value for
        this call and valid values include all possible qualities
        supported by this class.
        """
        ...
    
    def GetUndefinedQuality(self):
        """
        V.GetUndefinedQuality() -> float
        C++: virtual double GetUndefinedQuality()
        
        Set/Get the return value for undefined quality. Undefined quality
        are qualities that could be addressed by this filter but is not
        well defined for the particular geometry of cell in question,
        e.g. a volume query for a triangle. Undefined quality will always
        be undefined. The default value for UndefinedQuality is -1.
        """
        ...
    
    def GetUnsupportedGeometry(self):
        """
        V.GetUnsupportedGeometry() -> float
        C++: virtual double GetUnsupportedGeometry()
        
        Set/Get the return value for unsupported geometry. Unsupported
        geometry are geometries that are not supported by this filter
        currently, future implementation might include support for them.
        The default value for UnsupportedGeometry is -1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellQuality
        C++: vtkCellQuality *NewInstance()
        """
        ...
    
    def PixelArea(self, vtkCell):
        """
        V.PixelArea(vtkCell) -> float
        C++: double PixelArea(vtkCell *)
        """
        ...
    
    def PolygonArea(self, vtkCell):
        """
        V.PolygonArea(vtkCell) -> float
        C++: double PolygonArea(vtkCell *)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellQuality
        C++: static vtkCellQuality *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetQualityMeasure(self, p_int):
        """
        V.SetQualityMeasure(int)
        C++: virtual void SetQualityMeasure(int _arg)
        
        Set/Get the particular estimator used to function the quality of
        all supported geometries. For qualities that are not defined for
        certain geometries, later program logic ensures that
        CellQualityNone static function will be used so that a predefined
        value is returned for the request. There is no default value for
        this call and valid values include all possible qualities
        supported by this class.
        """
        ...
    
    def SetQualityMeasureToArea(self):
        """
        V.SetQualityMeasureToArea()
        C++: void SetQualityMeasureToArea()
        """
        ...
    
    def SetQualityMeasureToAspectBeta(self):
        """
        V.SetQualityMeasureToAspectBeta()
        C++: void SetQualityMeasureToAspectBeta()
        """
        ...
    
    def SetQualityMeasureToAspectFrobenius(self):
        """
        V.SetQualityMeasureToAspectFrobenius()
        C++: void SetQualityMeasureToAspectFrobenius()
        """
        ...
    
    def SetQualityMeasureToAspectGamma(self):
        """
        V.SetQualityMeasureToAspectGamma()
        C++: void SetQualityMeasureToAspectGamma()
        """
        ...
    
    def SetQualityMeasureToAspectRatio(self):
        """
        V.SetQualityMeasureToAspectRatio()
        C++: void SetQualityMeasureToAspectRatio()
        """
        ...
    
    def SetQualityMeasureToCollapseRatio(self):
        """
        V.SetQualityMeasureToCollapseRatio()
        C++: void SetQualityMeasureToCollapseRatio()
        """
        ...
    
    def SetQualityMeasureToCondition(self):
        """
        V.SetQualityMeasureToCondition()
        C++: void SetQualityMeasureToCondition()
        """
        ...
    
    def SetQualityMeasureToDiagonal(self):
        """
        V.SetQualityMeasureToDiagonal()
        C++: void SetQualityMeasureToDiagonal()
        """
        ...
    
    def SetQualityMeasureToDimension(self):
        """
        V.SetQualityMeasureToDimension()
        C++: void SetQualityMeasureToDimension()
        """
        ...
    
    def SetQualityMeasureToDistortion(self):
        """
        V.SetQualityMeasureToDistortion()
        C++: void SetQualityMeasureToDistortion()
        """
        ...
    
    def SetQualityMeasureToJacobian(self):
        """
        V.SetQualityMeasureToJacobian()
        C++: void SetQualityMeasureToJacobian()
        """
        ...
    
    def SetQualityMeasureToMaxAngle(self):
        """
        V.SetQualityMeasureToMaxAngle()
        C++: void SetQualityMeasureToMaxAngle()
        """
        ...
    
    def SetQualityMeasureToMaxAspectFrobenius(self):
        """
        V.SetQualityMeasureToMaxAspectFrobenius()
        C++: void SetQualityMeasureToMaxAspectFrobenius()
        """
        ...
    
    def SetQualityMeasureToMaxEdgeRatio(self):
        """
        V.SetQualityMeasureToMaxEdgeRatio()
        C++: void SetQualityMeasureToMaxEdgeRatio()
        """
        ...
    
    def SetQualityMeasureToMedAspectFrobenius(self):
        """
        V.SetQualityMeasureToMedAspectFrobenius()
        C++: void SetQualityMeasureToMedAspectFrobenius()
        """
        ...
    
    def SetQualityMeasureToMinAngle(self):
        """
        V.SetQualityMeasureToMinAngle()
        C++: void SetQualityMeasureToMinAngle()
        """
        ...
    
    def SetQualityMeasureToOddy(self):
        """
        V.SetQualityMeasureToOddy()
        C++: void SetQualityMeasureToOddy()
        """
        ...
    
    def SetQualityMeasureToRadiusRatio(self):
        """
        V.SetQualityMeasureToRadiusRatio()
        C++: void SetQualityMeasureToRadiusRatio()
        """
        ...
    
    def SetQualityMeasureToRelativeSizeSquared(self):
        """
        V.SetQualityMeasureToRelativeSizeSquared()
        C++: void SetQualityMeasureToRelativeSizeSquared()
        """
        ...
    
    def SetQualityMeasureToScaledJacobian(self):
        """
        V.SetQualityMeasureToScaledJacobian()
        C++: void SetQualityMeasureToScaledJacobian()
        """
        ...
    
    def SetQualityMeasureToShape(self):
        """
        V.SetQualityMeasureToShape()
        C++: void SetQualityMeasureToShape()
        """
        ...
    
    def SetQualityMeasureToShapeAndSize(self):
        """
        V.SetQualityMeasureToShapeAndSize()
        C++: void SetQualityMeasureToShapeAndSize()
        """
        ...
    
    def SetQualityMeasureToShear(self):
        """
        V.SetQualityMeasureToShear()
        C++: void SetQualityMeasureToShear()
        """
        ...
    
    def SetQualityMeasureToShearAndSize(self):
        """
        V.SetQualityMeasureToShearAndSize()
        C++: void SetQualityMeasureToShearAndSize()
        """
        ...
    
    def SetQualityMeasureToSkew(self):
        """
        V.SetQualityMeasureToSkew()
        C++: void SetQualityMeasureToSkew()
        """
        ...
    
    def SetQualityMeasureToStretch(self):
        """
        V.SetQualityMeasureToStretch()
        C++: void SetQualityMeasureToStretch()
        """
        ...
    
    def SetQualityMeasureToTaper(self):
        """
        V.SetQualityMeasureToTaper()
        C++: void SetQualityMeasureToTaper()
        """
        ...
    
    def SetQualityMeasureToVolume(self):
        """
        V.SetQualityMeasureToVolume()
        C++: void SetQualityMeasureToVolume()
        """
        ...
    
    def SetQualityMeasureToWarpage(self):
        """
        V.SetQualityMeasureToWarpage()
        C++: void SetQualityMeasureToWarpage()
        """
        ...
    
    def SetUndefinedQuality(self, p_float):
        """
        V.SetUndefinedQuality(float)
        C++: virtual void SetUndefinedQuality(double _arg)
        
        Set/Get the return value for undefined quality. Undefined quality
        are qualities that could be addressed by this filter but is not
        well defined for the particular geometry of cell in question,
        e.g. a volume query for a triangle. Undefined quality will always
        be undefined. The default value for UndefinedQuality is -1.
        """
        ...
    
    def SetUnsupportedGeometry(self, p_float):
        """
        V.SetUnsupportedGeometry(float)
        C++: virtual void SetUnsupportedGeometry(double _arg)
        
        Set/Get the return value for unsupported geometry. Unsupported
        geometry are geometries that are not supported by this filter
        currently, future implementation might include support for them.
        The default value for UnsupportedGeometry is -1.
        """
        ...
    
    def TriangleStripArea(self, vtkCell):
        """
        V.TriangleStripArea(vtkCell) -> float
        C++: double TriangleStripArea(vtkCell *)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCellSizeFilter(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkCellSizeFilter - Computes cell sizes.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    Computes the cell sizes for all types of cells in VTK. For triangles,
    quads, tets and hexes the static methods in vtkMeshQuality are used.
    This is done through Verdict for higher accuracy. Other cell types
    are individually done analytically where possible and breaking into
    triangles or tets when not possible. When cells are broken into
    triangles or tets the accuracy may be diminished. By default all
    sizes are computed but vertex count, length, area and volumetric
    cells can each be optionally ignored. Individual arrays are used for
    each requested size (e.g. if length and volume are requested there
    will be two arrays outputted from this filter). The 4 arrays can be
    individually named with defaults of VertexCount, Length, Area and
    Volme. For dimensions of cells that do not have their size computed,
    a value of 0 will be given. For cells that should have their size
    computed but can't, the filter will return -1. The ComputeSum option
    will sum the cell sizes (excluding ghost cells) and put the value
    into vtkFieldData arrays named with the corresponding cell data array
    name. For composite datasets the total sum over all blocks will also
    be added to the top-level block's field data for the summation.
    """
    def ComputeAreaOff(self):
        """
        V.ComputeAreaOff()
        C++: virtual void ComputeAreaOff()
        
        Specify whether or not to compute sizes for 2D cells cells. The
        computed value is the area of the cell. This option is enabled by
        default.
        """
        ...
    
    def ComputeAreaOn(self):
        """
        V.ComputeAreaOn()
        C++: virtual void ComputeAreaOn()
        
        Specify whether or not to compute sizes for 2D cells cells. The
        computed value is the area of the cell. This option is enabled by
        default.
        """
        ...
    
    def ComputeLengthOff(self):
        """
        V.ComputeLengthOff()
        C++: virtual void ComputeLengthOff()
        
        Specify whether or not to compute sizes for 1D cells cells. The
        computed value is the length of the cell. This option is enabled
        by default.
        """
        ...
    
    def ComputeLengthOn(self):
        """
        V.ComputeLengthOn()
        C++: virtual void ComputeLengthOn()
        
        Specify whether or not to compute sizes for 1D cells cells. The
        computed value is the length of the cell. This option is enabled
        by default.
        """
        ...
    
    def ComputeSumOff(self):
        """
        V.ComputeSumOff()
        C++: virtual void ComputeSumOff()
        
        Specify whether to sum the computed sizes and put the result in a
        field data array. This option is disabled by default.
        """
        ...
    
    def ComputeSumOn(self):
        """
        V.ComputeSumOn()
        C++: virtual void ComputeSumOn()
        
        Specify whether to sum the computed sizes and put the result in a
        field data array. This option is disabled by default.
        """
        ...
    
    def ComputeVertexCountOff(self):
        """
        V.ComputeVertexCountOff()
        C++: virtual void ComputeVertexCountOff()
        
        Specify whether or not to compute sizes for vertex and polyvertex
        cells. The computed value is the number of points in the cell.
        This option is enabled by default.
        """
        ...
    
    def ComputeVertexCountOn(self):
        """
        V.ComputeVertexCountOn()
        C++: virtual void ComputeVertexCountOn()
        
        Specify whether or not to compute sizes for vertex and polyvertex
        cells. The computed value is the number of points in the cell.
        This option is enabled by default.
        """
        ...
    
    def ComputeVolumeOff(self):
        """
        V.ComputeVolumeOff()
        C++: virtual void ComputeVolumeOff()
        
        Specify whether or not to compute sizes for 3D cells cells. The
        computed value is the volume of the cell. This option is enabled
        by default.
        """
        ...
    
    def ComputeVolumeOn(self):
        """
        V.ComputeVolumeOn()
        C++: virtual void ComputeVolumeOn()
        
        Specify whether or not to compute sizes for 3D cells cells. The
        computed value is the volume of the cell. This option is enabled
        by default.
        """
        ...
    
    def GetAreaArrayName(self):
        """
        V.GetAreaArrayName() -> string
        C++: virtual char *GetAreaArrayName()
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def GetComputeArea(self):
        """
        V.GetComputeArea() -> bool
        C++: virtual bool GetComputeArea()
        
        Specify whether or not to compute sizes for 2D cells cells. The
        computed value is the area of the cell. This option is enabled by
        default.
        """
        ...
    
    def GetComputeLength(self):
        """
        V.GetComputeLength() -> bool
        C++: virtual bool GetComputeLength()
        
        Specify whether or not to compute sizes for 1D cells cells. The
        computed value is the length of the cell. This option is enabled
        by default.
        """
        ...
    
    def GetComputeSum(self):
        """
        V.GetComputeSum() -> bool
        C++: virtual bool GetComputeSum()
        
        Specify whether to sum the computed sizes and put the result in a
        field data array. This option is disabled by default.
        """
        ...
    
    def GetComputeVertexCount(self):
        """
        V.GetComputeVertexCount() -> bool
        C++: virtual bool GetComputeVertexCount()
        
        Specify whether or not to compute sizes for vertex and polyvertex
        cells. The computed value is the number of points in the cell.
        This option is enabled by default.
        """
        ...
    
    def GetComputeVolume(self):
        """
        V.GetComputeVolume() -> bool
        C++: virtual bool GetComputeVolume()
        
        Specify whether or not to compute sizes for 3D cells cells. The
        computed value is the volume of the cell. This option is enabled
        by default.
        """
        ...
    
    def GetLengthArrayName(self):
        """
        V.GetLengthArrayName() -> string
        C++: virtual char *GetLengthArrayName()
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetVertexCountArrayName(self):
        """
        V.GetVertexCountArrayName() -> string
        C++: virtual char *GetVertexCountArrayName()
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def GetVolumeArrayName(self):
        """
        V.GetVolumeArrayName() -> string
        C++: virtual char *GetVolumeArrayName()
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellSizeFilter
        C++: vtkCellSizeFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellSizeFilter
        C++: static vtkCellSizeFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAreaArrayName(self, string):
        """
        V.SetAreaArrayName(string)
        C++: virtual void SetAreaArrayName(const char *_arg)
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def SetComputeArea(self, bool):
        """
        V.SetComputeArea(bool)
        C++: virtual void SetComputeArea(bool _arg)
        
        Specify whether or not to compute sizes for 2D cells cells. The
        computed value is the area of the cell. This option is enabled by
        default.
        """
        ...
    
    def SetComputeLength(self, bool):
        """
        V.SetComputeLength(bool)
        C++: virtual void SetComputeLength(bool _arg)
        
        Specify whether or not to compute sizes for 1D cells cells. The
        computed value is the length of the cell. This option is enabled
        by default.
        """
        ...
    
    def SetComputeSum(self, bool):
        """
        V.SetComputeSum(bool)
        C++: virtual void SetComputeSum(bool _arg)
        
        Specify whether to sum the computed sizes and put the result in a
        field data array. This option is disabled by default.
        """
        ...
    
    def SetComputeVertexCount(self, bool):
        """
        V.SetComputeVertexCount(bool)
        C++: virtual void SetComputeVertexCount(bool _arg)
        
        Specify whether or not to compute sizes for vertex and polyvertex
        cells. The computed value is the number of points in the cell.
        This option is enabled by default.
        """
        ...
    
    def SetComputeVolume(self, bool):
        """
        V.SetComputeVolume(bool)
        C++: virtual void SetComputeVolume(bool _arg)
        
        Specify whether or not to compute sizes for 3D cells cells. The
        computed value is the volume of the cell. This option is enabled
        by default.
        """
        ...
    
    def SetLengthArrayName(self, string):
        """
        V.SetLengthArrayName(string)
        C++: virtual void SetLengthArrayName(const char *_arg)
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def SetVertexCountArrayName(self, string):
        """
        V.SetVertexCountArrayName(string)
        C++: virtual void SetVertexCountArrayName(const char *_arg)
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def SetVolumeArrayName(self, string):
        """
        V.SetVolumeArrayName(string)
        C++: virtual void SetVolumeArrayName(const char *_arg)
        
        Set/Get the name of the computed arrays. Default names are
        VertexCount, Length, Area and Volume.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMatrixMathFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkMatrixMathFilter - Calculate functions of quality of the elements
     of a mesh
    
    Superclass: vtkDataSetAlgorithm
    
    vtkMatrixMathFilter computes one or more functions of mathematical
    quality for the cells or points in a mesh. The per-cell or per-point
    quality is added to the mesh's cell data or point data, in an array
    with names varied with different quality being queried. Note this
    filter always assume the data associate with the cells or points are
    3 by 3 matrix.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOperation(self):
        """
        V.GetOperation() -> int
        C++: virtual int GetOperation()
        
        Set/Get the particular estimator used to function the quality of
        query.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMatrixMathFilter
        C++: vtkMatrixMathFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMatrixMathFilter
        C++: static vtkMatrixMathFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOperation(self, p_int):
        """
        V.SetOperation(int)
        C++: virtual void SetOperation(int _arg)
        
        Set/Get the particular estimator used to function the quality of
        query.
        """
        ...
    
    def SetOperationToDeterminant(self):
        """
        V.SetOperationToDeterminant()
        C++: void SetOperationToDeterminant()
        
        Set/Get the particular estimator used to function the quality of
        query.
        """
        ...
    
    def SetOperationToEigenvalue(self):
        """
        V.SetOperationToEigenvalue()
        C++: void SetOperationToEigenvalue()
        
        Set/Get the particular estimator used to function the quality of
        query.
        """
        ...
    
    def SetOperationToEigenvector(self):
        """
        V.SetOperationToEigenvector()
        C++: void SetOperationToEigenvector()
        
        Set/Get the particular estimator used to function the quality of
        query.
        """
        ...
    
    def SetOperationToInverse(self):
        """
        V.SetOperationToInverse()
        C++: void SetOperationToInverse()
        
        Set/Get the particular estimator used to function the quality of
        query.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMeshQuality(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkMeshQuality - Calculate functions of quality of the elements
     of a mesh
    
    Superclass: vtkDataSetAlgorithm
    
    vtkMeshQuality computes one or more functions of (geometric) quality
    for each 2-D and 3-D cell (triangle, quadrilateral, tetrahedron, or
    hexahedron) of a mesh. These functions of quality are then averaged
    over the entire mesh. The minimum, average, maximum, and unbiased
    variance of quality for each type of cell is stored in the output
    mesh's FieldData. The FieldData arrays are named "Mesh Triangle
    Quality," "Mesh Quadrilateral Quality," "Mesh Tetrahedron Quality,"
    and "Mesh Hexahedron Quality." Each array has a single tuple with 5
    components. The first 4 components are the quality statistics
    mentioned above; the final value is the number of cells of the given
    type. This final component makes aggregation of statistics for
    distributed mesh data possible.
    
    By default, the per-cell quality is added to the mesh's cell data, in
    an array named "Quality." Cell types not supported by this filter
    will have an entry of 0. Use SaveCellQualityOff() to store only the
    final statistics.
    
    This version of the filter written by Philippe Pebay and David
    Thompson overtakes an older version written by Leila Baghdadi, Hanif
    Ladak, and David Steinman at the Imaging Research Labs, Robarts
    Research Institute. That version only supported tetrahedral radius
    ratio. See the CompatibilityModeOn() member for information on how to
    make this filter behave like the previous implementation. For more
    information on the triangle quality functions of this class, cf.
    Pebay & Baker 2003, Analysis of triangle quality measures, Math Comp
    72:244. For more information on the quadrangle quality functions of
    this class, cf. Pebay 2004, Planar Quadrangle Quality Measures, Eng
    Comp 20:2.
    
    @warning
    While more general than before, this class does not address many cell
    types, including wedges and pyramids in 3D and triangle strips and
    fans in 2D (among others). Most quadrilateral quality functions are
    intended for planar quadrilaterals only. The minimal angle is not,
    strictly speaking, a quality function, but it is provided because of
    its usage by many authors.
    """
    def CompatibilityModeOff(self):
        """
        V.CompatibilityModeOff()
        C++: virtual void CompatibilityModeOff()
        
        CompatibilityMode governs whether, when both a quality function
        and cell volume are to be stored as cell data, the two values are
        stored in a single array. When compatibility mode is off (the
        default), two separate arrays are used -- one labeled "Quality"
        and the other labeled "Volume". When compatibility mode is on,
        both values are stored in a single array, with volume as the
        first component and quality as the second component.
        
        * Enabling CompatibilityMode changes the default tetrahedral
        * quality function to VTK_QUALITY_RADIUS_RATIO and turns volume
        * computation on. (This matches the default behavior of the
        * initial implementation of vtkMeshQuality.) You may change
        * quality function and volume computation without leaving
        * compatibility mode.
        
        * Disabling compatibility mode does not affect the current
        * volume computation or tetrahedral quality function settings.
        
        * The final caveat to CompatibilityMode is that regardless of
        * its setting, the resulting array will be of type vtkDoubleArray
        * rather than the original vtkFloatArray.
        * This is a safety function to keep the authors from
        * diving off of the Combinatorial Coding Cliff into
        * Certain Insanity.
        """
        ...
    
    def CompatibilityModeOn(self):
        """
        V.CompatibilityModeOn()
        C++: virtual void CompatibilityModeOn()
        
        CompatibilityMode governs whether, when both a quality function
        and cell volume are to be stored as cell data, the two values are
        stored in a single array. When compatibility mode is off (the
        default), two separate arrays are used -- one labeled "Quality"
        and the other labeled "Volume". When compatibility mode is on,
        both values are stored in a single array, with volume as the
        first component and quality as the second component.
        
        * Enabling CompatibilityMode changes the default tetrahedral
        * quality function to VTK_QUALITY_RADIUS_RATIO and turns volume
        * computation on. (This matches the default behavior of the
        * initial implementation of vtkMeshQuality.) You may change
        * quality function and volume computation without leaving
        * compatibility mode.
        
        * Disabling compatibility mode does not affect the current
        * volume computation or tetrahedral quality function settings.
        
        * The final caveat to CompatibilityMode is that regardless of
        * its setting, the resulting array will be of type vtkDoubleArray
        * rather than the original vtkFloatArray.
        * This is a safety function to keep the authors from
        * diving off of the Combinatorial Coding Cliff into
        * Certain Insanity.
        """
        ...
    
    def GetCompatibilityMode(self):
        """
        V.GetCompatibilityMode() -> int
        C++: virtual vtkTypeBool GetCompatibilityMode()
        
        CompatibilityMode governs whether, when both a quality function
        and cell volume are to be stored as cell data, the two values are
        stored in a single array. When compatibility mode is off (the
        default), two separate arrays are used -- one labeled "Quality"
        and the other labeled "Volume". When compatibility mode is on,
        both values are stored in a single array, with volume as the
        first component and quality as the second component.
        
        * Enabling CompatibilityMode changes the default tetrahedral
        * quality function to VTK_QUALITY_RADIUS_RATIO and turns volume
        * computation on. (This matches the default behavior of the
        * initial implementation of vtkMeshQuality.) You may change
        * quality function and volume computation without leaving
        * compatibility mode.
        
        * Disabling compatibility mode does not affect the current
        * volume computation or tetrahedral quality function settings.
        
        * The final caveat to CompatibilityMode is that regardless of
        * its setting, the resulting array will be of type vtkDoubleArray
        * rather than the original vtkFloatArray.
        * This is a safety function to keep the authors from
        * diving off of the Combinatorial Coding Cliff into
        * Certain Insanity.
        """
        ...
    
    def GetHexQualityMeasure(self):
        """
        V.GetHexQualityMeasure() -> int
        C++: virtual int GetHexQualityMeasure()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetQuadQualityMeasure(self):
        """
        V.GetQuadQualityMeasure() -> int
        C++: virtual int GetQuadQualityMeasure()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def GetRatio(self):
        """
        V.GetRatio() -> int
        C++: vtkTypeBool GetRatio()
        """
        ...
    
    def GetSaveCellQuality(self):
        """
        V.GetSaveCellQuality() -> int
        C++: virtual vtkTypeBool GetSaveCellQuality()
        
        This variable controls whether or not cell quality is stored as
        cell data in the resulting mesh or discarded (leaving only the
        aggregate quality average of the entire mesh, recorded in the
        FieldData).
        """
        ...
    
    def GetTetQualityMeasure(self):
        """
        V.GetTetQualityMeasure() -> int
        C++: virtual int GetTetQualityMeasure()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def GetTriangleQualityMeasure(self):
        """
        V.GetTriangleQualityMeasure() -> int
        C++: virtual int GetTriangleQualityMeasure()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def GetVolume(self):
        """
        V.GetVolume() -> int
        C++: vtkTypeBool GetVolume()
        
        These methods are deprecated. The functionality of computing cell
        volume is being removed until it can be computed for any 3D cell.
        (The previous implementation only worked for tetrahedra.)
        
        * For now, turning on the volume computation will put this
        * filter into "compatibility mode," where tetrahedral cell
        * volume is stored in first component of each output tuple and
        * the radius ratio is stored in the second component. You may
        * also use CompatibilityModeOn()/Off() to enter this mode.
        * In this mode, cells other than tetrahedra will have report
        * a volume of 0.0 (if volume computation is enabled).
        
        * By default, volume computation is disabled and compatibility
        * mode is off, since it does not make a lot of sense for
        * meshes with non-tetrahedral cells.
        """
        ...
    
    def HexCondition(self, vtkCell):
        """
        V.HexCondition(vtkCell) -> float
        C++: static double HexCondition(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexDiagonal(self, vtkCell):
        """
        V.HexDiagonal(vtkCell) -> float
        C++: static double HexDiagonal(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexDimension(self, vtkCell):
        """
        V.HexDimension(vtkCell) -> float
        C++: static double HexDimension(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexDistortion(self, vtkCell):
        """
        V.HexDistortion(vtkCell) -> float
        C++: static double HexDistortion(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexEdgeRatio(self, vtkCell):
        """
        V.HexEdgeRatio(vtkCell) -> float
        C++: static double HexEdgeRatio(vtkCell *cell)
        
        This is a static function used to calculate the edge ratio of a
        hexahedron. It assumes that you pass the correct type of cell --
        no type checking is performed because this method is called from
        the inner loop of the Execute() member function. The edge ratio
        of a hexahedron $H $ is:$\frac{|H|_\infty}{|H|_0} $, where
        $|H|_\infty $ and $|H|_0 $ respectively denote the greatest and
        the smallest edge lengths of $H $.
        """
        ...
    
    def HexJacobian(self, vtkCell):
        """
        V.HexJacobian(vtkCell) -> float
        C++: static double HexJacobian(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexMaxAspectFrobenius(self, vtkCell):
        """
        V.HexMaxAspectFrobenius(vtkCell) -> float
        C++: static double HexMaxAspectFrobenius(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexMaxEdgeRatio(self, vtkCell):
        """
        V.HexMaxEdgeRatio(vtkCell) -> float
        C++: static double HexMaxEdgeRatio(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexMedAspectFrobenius(self, vtkCell):
        """
        V.HexMedAspectFrobenius(vtkCell) -> float
        C++: static double HexMedAspectFrobenius(vtkCell *cell)
        
        This is a static function used to calculate the average Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexOddy(self, vtkCell):
        """
        V.HexOddy(vtkCell) -> float
        C++: static double HexOddy(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexRelativeSizeSquared(self, vtkCell):
        """
        V.HexRelativeSizeSquared(vtkCell) -> float
        C++: static double HexRelativeSizeSquared(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexScaledJacobian(self, vtkCell):
        """
        V.HexScaledJacobian(vtkCell) -> float
        C++: static double HexScaledJacobian(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexShape(self, vtkCell):
        """
        V.HexShape(vtkCell) -> float
        C++: static double HexShape(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexShapeAndSize(self, vtkCell):
        """
        V.HexShapeAndSize(vtkCell) -> float
        C++: static double HexShapeAndSize(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexShear(self, vtkCell):
        """
        V.HexShear(vtkCell) -> float
        C++: static double HexShear(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexShearAndSize(self, vtkCell):
        """
        V.HexShearAndSize(vtkCell) -> float
        C++: static double HexShearAndSize(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexSkew(self, vtkCell):
        """
        V.HexSkew(vtkCell) -> float
        C++: static double HexSkew(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexStretch(self, vtkCell):
        """
        V.HexStretch(vtkCell) -> float
        C++: static double HexStretch(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexTaper(self, vtkCell):
        """
        V.HexTaper(vtkCell) -> float
        C++: static double HexTaper(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def HexVolume(self, vtkCell):
        """
        V.HexVolume(vtkCell) -> float
        C++: static double HexVolume(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 8 corner tetrahedra of a hexahedron, when the
        reference tetrahedral elements are right isosceles at the
        hexahedron vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMeshQuality
        C++: vtkMeshQuality *NewInstance()
        """
        ...
    
    def QuadArea(self, vtkCell):
        """
        V.QuadArea(vtkCell) -> float
        C++: static double QuadArea(vtkCell *cell)
        """
        ...
    
    def QuadAspectRatio(self, vtkCell):
        """
        V.QuadAspectRatio(vtkCell) -> float
        C++: static double QuadAspectRatio(vtkCell *cell)
        
        This is a static function used to calculate the aspect ratio of a
        planar quadrilateral. It assumes that you pass the correct type
        of cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function. Use
        at your own risk with nonplanar quadrilaterals. The aspect ratio
        of a planar quadrilateral $q $ is:$\frac{|q|_1|q|_\infty}{4{\cal
        A}} $, where $|q|_1 $, $|q|_\infty $ and ${\cal A} $ respectively
        denote the perimeter, the greatest edge length and the area of $q
        $.
        """
        ...
    
    def QuadCondition(self, vtkCell):
        """
        V.QuadCondition(vtkCell) -> float
        C++: static double QuadCondition(vtkCell *cell)
        """
        ...
    
    def QuadDistortion(self, vtkCell):
        """
        V.QuadDistortion(vtkCell) -> float
        C++: static double QuadDistortion(vtkCell *cell)
        """
        ...
    
    def QuadEdgeRatio(self, vtkCell):
        """
        V.QuadEdgeRatio(vtkCell) -> float
        C++: static double QuadEdgeRatio(vtkCell *cell)
        
        This is a static function used to calculate the edge ratio of a
        quadrilateral. It assumes that you pass the correct type of cell
        -- no type checking is performed because this method is called
        from the inner loop of the Execute() member function. The edge
        ratio of a quadrilateral $q $ is:$\frac{|q|_\infty}{|q|_0} $,
        where $|q|_\infty $ and $|q|_0 $ respectively denote the greatest
        and the smallest edge lengths of $q $.
        """
        ...
    
    def QuadJacobian(self, vtkCell):
        """
        V.QuadJacobian(vtkCell) -> float
        C++: static double QuadJacobian(vtkCell *cell)
        """
        ...
    
    def QuadMaxAngle(self, vtkCell):
        """
        V.QuadMaxAngle(vtkCell) -> float
        C++: static double QuadMaxAngle(vtkCell *cell)
        """
        ...
    
    def QuadMaxAspectFrobenius(self, vtkCell):
        """
        V.QuadMaxAspectFrobenius(vtkCell) -> float
        C++: static double QuadMaxAspectFrobenius(vtkCell *cell)
        
        This is a static function used to calculate the maximal Frobenius
        aspect of the 4 corner triangles of a planar quadrilateral, when
        the reference triangle elements are right isosceles at the
        quadrangle vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function. Use
        at your own risk with nonplanar quadrilaterals. The Frobenius
        aspect of a triangle $t $, when the reference element is right
        isosceles at vertex $V $, is:$\frac{f^2+g^2}{4{\cal A}} $, where
        $f^2+g^2 $ and $\cal A $ respectively denote the sum of the
        squared lengths of the edges attached to $V $ and the area of $t
        $.
        """
        ...
    
    def QuadMaxEdgeRatios(self, vtkCell):
        """
        V.QuadMaxEdgeRatios(vtkCell) -> float
        C++: static double QuadMaxEdgeRatios(vtkCell *cell)
        """
        ...
    
    def QuadMedAspectFrobenius(self, vtkCell):
        """
        V.QuadMedAspectFrobenius(vtkCell) -> float
        C++: static double QuadMedAspectFrobenius(vtkCell *cell)
        
        This is a static function used to calculate the average Frobenius
        aspect of the 4 corner triangles of a planar quadrilateral, when
        the reference triangle elements are right isosceles at the
        quadrangle vertices. It assumes that you pass the correct type of
        cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function. Use
        at your own risk with nonplanar quadrilaterals. The Frobenius
        aspect of a triangle $t $, when the reference element is right
        isosceles at vertex $V $, is:$\frac{f^2+g^2}{4{\cal A}} $, where
        $f^2+g^2 $ and $\cal A $ respectively denote the sum of the
        squared lengths of the edges attached to $V $ and the area of $t
        $.
        """
        ...
    
    def QuadMinAngle(self, vtkCell):
        """
        V.QuadMinAngle(vtkCell) -> float
        C++: static double QuadMinAngle(vtkCell *cell)
        
        This is a static function used to calculate the minimal
        (nonoriented) angle of a quadrilateral, expressed in degrees. It
        assumes that you pass the correct type of cell -- no type
        checking is performed because this method is called from the
        inner loop of the Execute() member function.
        """
        ...
    
    def QuadOddy(self, vtkCell):
        """
        V.QuadOddy(vtkCell) -> float
        C++: static double QuadOddy(vtkCell *cell)
        """
        ...
    
    def QuadRadiusRatio(self, vtkCell):
        """
        V.QuadRadiusRatio(vtkCell) -> float
        C++: static double QuadRadiusRatio(vtkCell *cell)
        
        This is a static function used to calculate the radius ratio of a
        planar quadrilateral. The name is only used by analogy with the
        triangle radius ratio, because in general a quadrilateral does
        not have a circumcircle nor an incircle. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function. Use at your own risk with nonplanar quadrilaterals. The
        radius ratio of a planar quadrilateral $q $
        is:$\frac{|q|_2h_{\max}}{\min_i{\cal A}_i} $, where $|q|_2 $,
        $h_{\max} $ and $\min{\cal A}_i $ respectively denote the sum of
        the squared edge lengths, the greatest amongst diagonal and edge
        lengths and the smallest area of the 4 triangles extractable from
        $q $.
        """
        ...
    
    def QuadRelativeSizeSquared(self, vtkCell):
        """
        V.QuadRelativeSizeSquared(vtkCell) -> float
        C++: static double QuadRelativeSizeSquared(vtkCell *cell)
        """
        ...
    
    def QuadScaledJacobian(self, vtkCell):
        """
        V.QuadScaledJacobian(vtkCell) -> float
        C++: static double QuadScaledJacobian(vtkCell *cell)
        """
        ...
    
    def QuadShape(self, vtkCell):
        """
        V.QuadShape(vtkCell) -> float
        C++: static double QuadShape(vtkCell *cell)
        """
        ...
    
    def QuadShapeAndSize(self, vtkCell):
        """
        V.QuadShapeAndSize(vtkCell) -> float
        C++: static double QuadShapeAndSize(vtkCell *cell)
        """
        ...
    
    def QuadShear(self, vtkCell):
        """
        V.QuadShear(vtkCell) -> float
        C++: static double QuadShear(vtkCell *cell)
        """
        ...
    
    def QuadShearAndSize(self, vtkCell):
        """
        V.QuadShearAndSize(vtkCell) -> float
        C++: static double QuadShearAndSize(vtkCell *cell)
        """
        ...
    
    def QuadSkew(self, vtkCell):
        """
        V.QuadSkew(vtkCell) -> float
        C++: static double QuadSkew(vtkCell *cell)
        """
        ...
    
    def QuadStretch(self, vtkCell):
        """
        V.QuadStretch(vtkCell) -> float
        C++: static double QuadStretch(vtkCell *cell)
        """
        ...
    
    def QuadTaper(self, vtkCell):
        """
        V.QuadTaper(vtkCell) -> float
        C++: static double QuadTaper(vtkCell *cell)
        """
        ...
    
    def QuadWarpage(self, vtkCell):
        """
        V.QuadWarpage(vtkCell) -> float
        C++: static double QuadWarpage(vtkCell *cell)
        """
        ...
    
    def RatioOff(self):
        """
        V.RatioOff()
        C++: virtual void RatioOff()
        """
        ...
    
    def RatioOn(self):
        """
        V.RatioOn()
        C++: virtual void RatioOn()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMeshQuality
        C++: static vtkMeshQuality *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SaveCellQualityOff(self):
        """
        V.SaveCellQualityOff()
        C++: virtual void SaveCellQualityOff()
        
        This variable controls whether or not cell quality is stored as
        cell data in the resulting mesh or discarded (leaving only the
        aggregate quality average of the entire mesh, recorded in the
        FieldData).
        """
        ...
    
    def SaveCellQualityOn(self):
        """
        V.SaveCellQualityOn()
        C++: virtual void SaveCellQualityOn()
        
        This variable controls whether or not cell quality is stored as
        cell data in the resulting mesh or discarded (leaving only the
        aggregate quality average of the entire mesh, recorded in the
        FieldData).
        """
        ...
    
    def SetCompatibilityMode(self, p_int):
        """
        V.SetCompatibilityMode(int)
        C++: virtual void SetCompatibilityMode(vtkTypeBool cm)
        
        CompatibilityMode governs whether, when both a quality function
        and cell volume are to be stored as cell data, the two values are
        stored in a single array. When compatibility mode is off (the
        default), two separate arrays are used -- one labeled "Quality"
        and the other labeled "Volume". When compatibility mode is on,
        both values are stored in a single array, with volume as the
        first component and quality as the second component.
        
        * Enabling CompatibilityMode changes the default tetrahedral
        * quality function to VTK_QUALITY_RADIUS_RATIO and turns volume
        * computation on. (This matches the default behavior of the
        * initial implementation of vtkMeshQuality.) You may change
        * quality function and volume computation without leaving
        * compatibility mode.
        
        * Disabling compatibility mode does not affect the current
        * volume computation or tetrahedral quality function settings.
        
        * The final caveat to CompatibilityMode is that regardless of
        * its setting, the resulting array will be of type vtkDoubleArray
        * rather than the original vtkFloatArray.
        * This is a safety function to keep the authors from
        * diving off of the Combinatorial Coding Cliff into
        * Certain Insanity.
        """
        ...
    
    def SetHexQualityMeasure(self, p_int):
        """
        V.SetHexQualityMeasure(int)
        C++: virtual void SetHexQualityMeasure(int _arg)
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToCondition(self):
        """
        V.SetHexQualityMeasureToCondition()
        C++: void SetHexQualityMeasureToCondition()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToDiagonal(self):
        """
        V.SetHexQualityMeasureToDiagonal()
        C++: void SetHexQualityMeasureToDiagonal()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToDimension(self):
        """
        V.SetHexQualityMeasureToDimension()
        C++: void SetHexQualityMeasureToDimension()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToDistortion(self):
        """
        V.SetHexQualityMeasureToDistortion()
        C++: void SetHexQualityMeasureToDistortion()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToEdgeRatio(self):
        """
        V.SetHexQualityMeasureToEdgeRatio()
        C++: void SetHexQualityMeasureToEdgeRatio()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToJacobian(self):
        """
        V.SetHexQualityMeasureToJacobian()
        C++: void SetHexQualityMeasureToJacobian()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToMaxAspectFrobenius(self):
        """
        V.SetHexQualityMeasureToMaxAspectFrobenius()
        C++: void SetHexQualityMeasureToMaxAspectFrobenius()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToMaxEdgeRatios(self):
        """
        V.SetHexQualityMeasureToMaxEdgeRatios()
        C++: void SetHexQualityMeasureToMaxEdgeRatios()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToMedAspectFrobenius(self):
        """
        V.SetHexQualityMeasureToMedAspectFrobenius()
        C++: void SetHexQualityMeasureToMedAspectFrobenius()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToOddy(self):
        """
        V.SetHexQualityMeasureToOddy()
        C++: void SetHexQualityMeasureToOddy()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToRelativeSizeSquared(self):
        """
        V.SetHexQualityMeasureToRelativeSizeSquared()
        C++: void SetHexQualityMeasureToRelativeSizeSquared()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToScaledJacobian(self):
        """
        V.SetHexQualityMeasureToScaledJacobian()
        C++: void SetHexQualityMeasureToScaledJacobian()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToShape(self):
        """
        V.SetHexQualityMeasureToShape()
        C++: void SetHexQualityMeasureToShape()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToShapeAndSize(self):
        """
        V.SetHexQualityMeasureToShapeAndSize()
        C++: void SetHexQualityMeasureToShapeAndSize()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToShear(self):
        """
        V.SetHexQualityMeasureToShear()
        C++: void SetHexQualityMeasureToShear()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToShearAndSize(self):
        """
        V.SetHexQualityMeasureToShearAndSize()
        C++: void SetHexQualityMeasureToShearAndSize()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToSkew(self):
        """
        V.SetHexQualityMeasureToSkew()
        C++: void SetHexQualityMeasureToSkew()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToStretch(self):
        """
        V.SetHexQualityMeasureToStretch()
        C++: void SetHexQualityMeasureToStretch()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToTaper(self):
        """
        V.SetHexQualityMeasureToTaper()
        C++: void SetHexQualityMeasureToTaper()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetHexQualityMeasureToVolume(self):
        """
        V.SetHexQualityMeasureToVolume()
        C++: void SetHexQualityMeasureToVolume()
        
        Set/Get the particular estimator used to measure the quality of
        hexahedra. The default is VTK_QUALITY_MAX_ASPECT_FROBENIUS and
        valid values also include VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MAX_ASPECT_FROBENIUS, VTK_QUALITY_MAX_EDGE_RATIO,
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_VOLUME,
        VTK_QUALITY_STRETCH, VTK_QUALITY_DIAGONAL, VTK_QUALITY_DIMENSION,
        VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHEAR,
        VTK_QUALITY_SHAPE, VTK_QUALITY_RELATIVE_SIZE_SQUARED,
        VTK_QUALITY_SHAPE_AND_SIZE, VTK_QUALITY_SHEAR_AND_SIZE, and
        VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetQuadQualityMeasure(self, p_int):
        """
        V.SetQuadQualityMeasure(int)
        C++: virtual void SetQuadQualityMeasure(int _arg)
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToArea(self):
        """
        V.SetQuadQualityMeasureToArea()
        C++: void SetQuadQualityMeasureToArea()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToAspectRatio(self):
        """
        V.SetQuadQualityMeasureToAspectRatio()
        C++: void SetQuadQualityMeasureToAspectRatio()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToCondition(self):
        """
        V.SetQuadQualityMeasureToCondition()
        C++: void SetQuadQualityMeasureToCondition()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToDistortion(self):
        """
        V.SetQuadQualityMeasureToDistortion()
        C++: void SetQuadQualityMeasureToDistortion()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToEdgeRatio(self):
        """
        V.SetQuadQualityMeasureToEdgeRatio()
        C++: void SetQuadQualityMeasureToEdgeRatio()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToJacobian(self):
        """
        V.SetQuadQualityMeasureToJacobian()
        C++: void SetQuadQualityMeasureToJacobian()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToMaxAngle(self):
        """
        V.SetQuadQualityMeasureToMaxAngle()
        C++: void SetQuadQualityMeasureToMaxAngle()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToMaxAspectFrobenius(self):
        """
        V.SetQuadQualityMeasureToMaxAspectFrobenius()
        C++: void SetQuadQualityMeasureToMaxAspectFrobenius()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToMaxEdgeRatios(self):
        """
        V.SetQuadQualityMeasureToMaxEdgeRatios()
        C++: void SetQuadQualityMeasureToMaxEdgeRatios()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToMedAspectFrobenius(self):
        """
        V.SetQuadQualityMeasureToMedAspectFrobenius()
        C++: void SetQuadQualityMeasureToMedAspectFrobenius()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToMinAngle(self):
        """
        V.SetQuadQualityMeasureToMinAngle()
        C++: void SetQuadQualityMeasureToMinAngle()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToOddy(self):
        """
        V.SetQuadQualityMeasureToOddy()
        C++: void SetQuadQualityMeasureToOddy()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToRadiusRatio(self):
        """
        V.SetQuadQualityMeasureToRadiusRatio()
        C++: void SetQuadQualityMeasureToRadiusRatio()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToRelativeSizeSquared(self):
        """
        V.SetQuadQualityMeasureToRelativeSizeSquared()
        C++: void SetQuadQualityMeasureToRelativeSizeSquared()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToScaledJacobian(self):
        """
        V.SetQuadQualityMeasureToScaledJacobian()
        C++: void SetQuadQualityMeasureToScaledJacobian()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToShape(self):
        """
        V.SetQuadQualityMeasureToShape()
        C++: void SetQuadQualityMeasureToShape()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToShapeAndSize(self):
        """
        V.SetQuadQualityMeasureToShapeAndSize()
        C++: void SetQuadQualityMeasureToShapeAndSize()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToShear(self):
        """
        V.SetQuadQualityMeasureToShear()
        C++: void SetQuadQualityMeasureToShear()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToShearAndSize(self):
        """
        V.SetQuadQualityMeasureToShearAndSize()
        C++: void SetQuadQualityMeasureToShearAndSize()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToSkew(self):
        """
        V.SetQuadQualityMeasureToSkew()
        C++: void SetQuadQualityMeasureToSkew()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToStretch(self):
        """
        V.SetQuadQualityMeasureToStretch()
        C++: void SetQuadQualityMeasureToStretch()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToTaper(self):
        """
        V.SetQuadQualityMeasureToTaper()
        C++: void SetQuadQualityMeasureToTaper()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetQuadQualityMeasureToWarpage(self):
        """
        V.SetQuadQualityMeasureToWarpage()
        C++: void SetQuadQualityMeasureToWarpage()
        
        Set/Get the particular estimator used to measure the quality of
        quadrilaterals. The default is VTK_QUALITY_EDGE_RATIO and valid
        values also include VTK_QUALITY_RADIUS_RATIO,
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_MAX_EDGE_RATIO
        VTK_QUALITY_SKEW, VTK_QUALITY_TAPER, VTK_QUALITY_WARPAGE,
        VTK_QUALITY_AREA, VTK_QUALITY_STRETCH, VTK_QUALITY_MIN_ANGLE,
        VTK_QUALITY_MAX_ANGLE, VTK_QUALITY_ODDY, VTK_QUALITY_CONDITION,
        VTK_QUALITY_JACOBIAN, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_SHEAR, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        VTK_QUALITY_SHEAR_AND_SIZE, and VTK_QUALITY_DISTORTION.
        
        * Scope: Except for VTK_QUALITY_EDGE_RATIO, these estimators are
          intended for planar
        * quadrilaterals only; use at your own risk if you really want to
        assess non-planar
        * quadrilateral quality with those.
        """
        ...
    
    def SetRatio(self, p_int):
        """
        V.SetRatio(int)
        C++: virtual void SetRatio(vtkTypeBool r)
        
        These methods are deprecated. Use Get/SetSaveCellQuality()
        instead.
        
        * Formerly, SetRatio could be used to disable computation
        * of the tetrahedral radius ratio so that volume alone could be
          computed.
        * Now, cell quality is always computed, but you may decide not
        * to store the result for each cell.
        * This allows average cell quality of a mesh to be
        * calculated without requiring per-cell storage.
        """
        ...
    
    def SetSaveCellQuality(self, p_int):
        """
        V.SetSaveCellQuality(int)
        C++: virtual void SetSaveCellQuality(vtkTypeBool _arg)
        
        This variable controls whether or not cell quality is stored as
        cell data in the resulting mesh or discarded (leaving only the
        aggregate quality average of the entire mesh, recorded in the
        FieldData).
        """
        ...
    
    def SetTetQualityMeasure(self, p_int):
        """
        V.SetTetQualityMeasure(int)
        C++: virtual void SetTetQualityMeasure(int _arg)
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToAspectBeta(self):
        """
        V.SetTetQualityMeasureToAspectBeta()
        C++: void SetTetQualityMeasureToAspectBeta()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToAspectFrobenius(self):
        """
        V.SetTetQualityMeasureToAspectFrobenius()
        C++: void SetTetQualityMeasureToAspectFrobenius()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToAspectGamma(self):
        """
        V.SetTetQualityMeasureToAspectGamma()
        C++: void SetTetQualityMeasureToAspectGamma()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToAspectRatio(self):
        """
        V.SetTetQualityMeasureToAspectRatio()
        C++: void SetTetQualityMeasureToAspectRatio()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToCollapseRatio(self):
        """
        V.SetTetQualityMeasureToCollapseRatio()
        C++: void SetTetQualityMeasureToCollapseRatio()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToCondition(self):
        """
        V.SetTetQualityMeasureToCondition()
        C++: void SetTetQualityMeasureToCondition()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToDistortion(self):
        """
        V.SetTetQualityMeasureToDistortion()
        C++: void SetTetQualityMeasureToDistortion()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToEdgeRatio(self):
        """
        V.SetTetQualityMeasureToEdgeRatio()
        C++: void SetTetQualityMeasureToEdgeRatio()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToJacobian(self):
        """
        V.SetTetQualityMeasureToJacobian()
        C++: void SetTetQualityMeasureToJacobian()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToMinAngle(self):
        """
        V.SetTetQualityMeasureToMinAngle()
        C++: void SetTetQualityMeasureToMinAngle()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToRadiusRatio(self):
        """
        V.SetTetQualityMeasureToRadiusRatio()
        C++: void SetTetQualityMeasureToRadiusRatio()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToRelativeSizeSquared(self):
        """
        V.SetTetQualityMeasureToRelativeSizeSquared()
        C++: void SetTetQualityMeasureToRelativeSizeSquared()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToScaledJacobian(self):
        """
        V.SetTetQualityMeasureToScaledJacobian()
        C++: void SetTetQualityMeasureToScaledJacobian()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToShape(self):
        """
        V.SetTetQualityMeasureToShape()
        C++: void SetTetQualityMeasureToShape()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToShapeAndSize(self):
        """
        V.SetTetQualityMeasureToShapeAndSize()
        C++: void SetTetQualityMeasureToShapeAndSize()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTetQualityMeasureToVolume(self):
        """
        V.SetTetQualityMeasureToVolume()
        C++: void SetTetQualityMeasureToVolume()
        
        Set/Get the particular estimator used to measure the quality of
        tetrahedra. The default is VTK_QUALITY_RADIUS_RATIO (identical to
        Verdict's aspect ratio beta) and valid values also include
        VTK_QUALITY_ASPECT_RATIO, VTK_QUALITY_ASPECT_FROBENIUS,
        VTK_QUALITY_EDGE_RATIO, VTK_QUALITY_COLLAPSE_RATIO,
        VTK_QUALITY_ASPECT_BETA, VTK_QUALITY_ASPECT_GAMMA,
        VTK_QUALITY_VOLUME, VTK_QUALITY_CONDITION, VTK_QUALITY_JACOBIAN,
        VTK_QUALITY_SCALED_JACOBIAN, VTK_QUALITY_SHAPE,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE_AND_SIZE,
        and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasure(self, p_int):
        """
        V.SetTriangleQualityMeasure(int)
        C++: virtual void SetTriangleQualityMeasure(int _arg)
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToArea(self):
        """
        V.SetTriangleQualityMeasureToArea()
        C++: void SetTriangleQualityMeasureToArea()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToAspectFrobenius(self):
        """
        V.SetTriangleQualityMeasureToAspectFrobenius()
        C++: void SetTriangleQualityMeasureToAspectFrobenius()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToAspectRatio(self):
        """
        V.SetTriangleQualityMeasureToAspectRatio()
        C++: void SetTriangleQualityMeasureToAspectRatio()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToCondition(self):
        """
        V.SetTriangleQualityMeasureToCondition()
        C++: void SetTriangleQualityMeasureToCondition()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToDistortion(self):
        """
        V.SetTriangleQualityMeasureToDistortion()
        C++: void SetTriangleQualityMeasureToDistortion()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToEdgeRatio(self):
        """
        V.SetTriangleQualityMeasureToEdgeRatio()
        C++: void SetTriangleQualityMeasureToEdgeRatio()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToMaxAngle(self):
        """
        V.SetTriangleQualityMeasureToMaxAngle()
        C++: void SetTriangleQualityMeasureToMaxAngle()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToMinAngle(self):
        """
        V.SetTriangleQualityMeasureToMinAngle()
        C++: void SetTriangleQualityMeasureToMinAngle()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToRadiusRatio(self):
        """
        V.SetTriangleQualityMeasureToRadiusRatio()
        C++: void SetTriangleQualityMeasureToRadiusRatio()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToRelativeSizeSquared(self):
        """
        V.SetTriangleQualityMeasureToRelativeSizeSquared()
        C++: void SetTriangleQualityMeasureToRelativeSizeSquared()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToScaledJacobian(self):
        """
        V.SetTriangleQualityMeasureToScaledJacobian()
        C++: void SetTriangleQualityMeasureToScaledJacobian()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToShape(self):
        """
        V.SetTriangleQualityMeasureToShape()
        C++: void SetTriangleQualityMeasureToShape()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetTriangleQualityMeasureToShapeAndSize(self):
        """
        V.SetTriangleQualityMeasureToShapeAndSize()
        C++: void SetTriangleQualityMeasureToShapeAndSize()
        
        Set/Get the particular estimator used to function the quality of
        triangles. The default is VTK_QUALITY_RADIUS_RATIO and valid
        values also include VTK_QUALITY_ASPECT_RATIO,
        VTK_QUALITY_ASPECT_FROBENIUS, and VTK_QUALITY_EDGE_RATIO,
        VTK_QUALITY_MIN_ANGLE, VTK_QUALITY_MAX_ANGLE,
        VTK_QUALITY_CONDITION, VTK_QUALITY_SCALED_JACOBIAN,
        VTK_QUALITY_RELATIVE_SIZE_SQUARED, VTK_QUALITY_SHAPE,
        VTK_QUALITY_SHAPE_AND_SIZE, and VTK_QUALITY_DISTORTION.
        """
        ...
    
    def SetVolume(self, p_int):
        """
        V.SetVolume(int)
        C++: virtual void SetVolume(vtkTypeBool cv)
        
        These methods are deprecated. The functionality of computing cell
        volume is being removed until it can be computed for any 3D cell.
        (The previous implementation only worked for tetrahedra.)
        
        * For now, turning on the volume computation will put this
        * filter into "compatibility mode," where tetrahedral cell
        * volume is stored in first component of each output tuple and
        * the radius ratio is stored in the second component. You may
        * also use CompatibilityModeOn()/Off() to enter this mode.
        * In this mode, cells other than tetrahedra will have report
        * a volume of 0.0 (if volume computation is enabled).
        
        * By default, volume computation is disabled and compatibility
        * mode is off, since it does not make a lot of sense for
        * meshes with non-tetrahedral cells.
        """
        ...
    
    def TetAspectBeta(self, vtkCell):
        """
        V.TetAspectBeta(vtkCell) -> float
        C++: static double TetAspectBeta(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetAspectFrobenius(self, vtkCell):
        """
        V.TetAspectFrobenius(vtkCell) -> float
        C++: static double TetAspectFrobenius(vtkCell *cell)
        
        This is a static function used to calculate the Frobenius
        condition number of the transformation matrix from a regular
        tetrahedron to a tetrahedron. It assumes that you pass the
        correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function. The Frobenius aspect of a tetrahedron $K $, when the
        reference element is regular,
        is:$\frac{\frac{3}{2}(l_{11}+l_{22}+l_{33}) -
        (l_{12}+l_{13}+l_{23})} {3(\sqrt{2}\det{T})^\frac{2}{3}} $, where
        $T $ and $l_{ij} $ respectively denote the edge matrix of $K $
        and the entries of $L=T^t\,T $.
        """
        ...
    
    def TetAspectGamma(self, vtkCell):
        """
        V.TetAspectGamma(vtkCell) -> float
        C++: static double TetAspectGamma(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetAspectRatio(self, vtkCell):
        """
        V.TetAspectRatio(vtkCell) -> float
        C++: static double TetAspectRatio(vtkCell *cell)
        
        This is a static function used to calculate the aspect ratio of a
        tetrahedron. It assumes that you pass the correct type of cell --
        no type checking is performed because this method is called from
        the inner loop of the Execute() member function. The aspect ratio
        of a tetrahedron $K $ is:$\frac{|K|_\infty}{2\sqrt{6}r} $, where
        $|K|_\infty $ and $r $ respectively denote the greatest edge
        length and the inradius of $K $.
        """
        ...
    
    def TetCollapseRatio(self, vtkCell):
        """
        V.TetCollapseRatio(vtkCell) -> float
        C++: static double TetCollapseRatio(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetCondition(self, vtkCell):
        """
        V.TetCondition(vtkCell) -> float
        C++: static double TetCondition(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetDistortion(self, vtkCell):
        """
        V.TetDistortion(vtkCell) -> float
        C++: static double TetDistortion(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetEdgeRatio(self, vtkCell):
        """
        V.TetEdgeRatio(vtkCell) -> float
        C++: static double TetEdgeRatio(vtkCell *cell)
        
        This is a static function used to calculate the edge ratio of a
        tetrahedron. It assumes that you pass the correct type of cell --
        no type checking is performed because this method is called from
        the inner loop of the Execute() member function. The edge ratio
        of a tetrahedron $K $ is:$\frac{|K|_\infty}{|K|_0} $, where
        $|K|_\infty $ and $|K|_0 $ respectively denote the greatest and
        the smallest edge lengths of $K $.
        """
        ...
    
    def TetJacobian(self, vtkCell):
        """
        V.TetJacobian(vtkCell) -> float
        C++: static double TetJacobian(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetMinAngle(self, vtkCell):
        """
        V.TetMinAngle(vtkCell) -> float
        C++: static double TetMinAngle(vtkCell *cell)
        
        This is a static function used to calculate the minimal
        (nonoriented) dihedral angle of a tetrahedron, expressed in
        degrees. It assumes that you pass the correct type of cell -- no
        type checking is performed because this method is called from the
        inner loop of the Execute() member function.
        """
        ...
    
    def TetRadiusRatio(self, vtkCell):
        """
        V.TetRadiusRatio(vtkCell) -> float
        C++: static double TetRadiusRatio(vtkCell *cell)
        
        This is a static function used to calculate the radius ratio of a
        tetrahedron. It assumes that you pass the correct type of cell --
        no type checking is performed because this method is called from
        the inner loop of the Execute() member function. The radius ratio
        of a tetrahedron $K $ is:$\frac{R}{3r} $, where $R $ and $r $
        respectively denote the circumradius and the inradius of $K $.
        """
        ...
    
    def TetRelativeSizeSquared(self, vtkCell):
        """
        V.TetRelativeSizeSquared(vtkCell) -> float
        C++: static double TetRelativeSizeSquared(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetScaledJacobian(self, vtkCell):
        """
        V.TetScaledJacobian(vtkCell) -> float
        C++: static double TetScaledJacobian(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetShape(self, vtkCell):
        """
        V.TetShape(vtkCell) -> float
        C++: static double TetShape(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetShapeandSize(self, vtkCell):
        """
        V.TetShapeandSize(vtkCell) -> float
        C++: static double TetShapeandSize(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TetVolume(self, vtkCell):
        """
        V.TetVolume(vtkCell) -> float
        C++: static double TetVolume(vtkCell *cell)
        
        This is a static function used to calculate the collapse ratio of
        a tetrahedron. The collapse ratio is a dimensionless number
        defined as the smallest ratio of the height of a vertex above its
        opposing triangle to the longest edge of that opposing triangle
        across all vertices of the tetrahedron. It assumes that you pass
        the correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def TriangleArea(self, vtkCell):
        """
        V.TriangleArea(vtkCell) -> float
        C++: static double TriangleArea(vtkCell *cell)
        
        This is a static function used to calculate the area of a
        triangle. It assumes that you pass the correct type of cell -- no
        type checking is performed because this method is called from the
        inner loop of the Execute() member function.
        """
        ...
    
    def TriangleAspectFrobenius(self, vtkCell):
        """
        V.TriangleAspectFrobenius(vtkCell) -> float
        C++: static double TriangleAspectFrobenius(vtkCell *cell)
        
        This is a static function used to calculate the Frobenius
        condition number of the transformation matrix from an equilateral
        triangle to a triangle. It assumes that you pass the correct type
        of cell -- no type checking is performed because this method is
        called from the inner loop of the Execute() member function. The
        Frobenius aspect of a triangle $t $, when the reference element
        is equilateral, is:$\frac{|t|^2_2}{2\sqrt{3}{\cal A}} $, where
        $|t|^2_2 $ and $\cal A $ respectively denote the sum of the
        squared edge lengths and the area of $t $.
        """
        ...
    
    def TriangleAspectRatio(self, vtkCell):
        """
        V.TriangleAspectRatio(vtkCell) -> float
        C++: static double TriangleAspectRatio(vtkCell *cell)
        
        This is a static function used to calculate the aspect ratio of a
        triangle. It assumes that you pass the correct type of cell -- no
        type checking is performed because this method is called from the
        inner loop of the Execute() member function. The aspect ratio of
        a triangle $t $ is:$\frac{|t|_\infty}{2\sqrt{3}r} $, where
        $|t|_\infty $ and $r $ respectively denote the greatest edge
        length and the inradius of $t $.
        """
        ...
    
    def TriangleCondition(self, vtkCell):
        """
        V.TriangleCondition(vtkCell) -> float
        C++: static double TriangleCondition(vtkCell *cell)
        
        This is a static function used to calculate the condition number
        of a triangle. It assumes that you pass the correct type of cell
        -- no type checking is performed because this method is called
        from the inner loop of the Execute() member function.
        """
        ...
    
    def TriangleDistortion(self, vtkCell):
        """
        V.TriangleDistortion(vtkCell) -> float
        C++: static double TriangleDistortion(vtkCell *cell)
        
        This is a static function used to calculate the distortion of a
        triangle. It assumes that you pass the correct type of cell -- no
        type checking is performed because this method is called from the
        inner loop of the Execute() member function.
        """
        ...
    
    def TriangleEdgeRatio(self, vtkCell):
        """
        V.TriangleEdgeRatio(vtkCell) -> float
        C++: static double TriangleEdgeRatio(vtkCell *cell)
        
        This is a static function used to calculate the edge ratio of a
        triangle. It assumes that you pass the correct type of cell -- no
        type checking is performed because this method is called from the
        inner loop of the Execute() member function. The edge ratio of a
        triangle $t $ is:$\frac{|t|_\infty}{|t|_0} $, where $|t|_\infty $
        and $|t|_0 $ respectively denote the greatest and the smallest
        edge lengths of $t $.
        """
        ...
    
    def TriangleMaxAngle(self, vtkCell):
        """
        V.TriangleMaxAngle(vtkCell) -> float
        C++: static double TriangleMaxAngle(vtkCell *cell)
        
        This is a static function used to calculate the maximal
        (nonoriented) angle of a triangle, expressed in degrees. It
        assumes that you pass the correct type of cell -- no type
        checking is performed because this method is called from the
        inner loop of the Execute() member function.
        """
        ...
    
    def TriangleMinAngle(self, vtkCell):
        """
        V.TriangleMinAngle(vtkCell) -> float
        C++: static double TriangleMinAngle(vtkCell *cell)
        
        This is a static function used to calculate the minimal
        (nonoriented) angle of a triangle, expressed in degrees. It
        assumes that you pass the correct type of cell -- no type
        checking is performed because this method is called from the
        inner loop of the Execute() member function.
        """
        ...
    
    def TriangleRadiusRatio(self, vtkCell):
        """
        V.TriangleRadiusRatio(vtkCell) -> float
        C++: static double TriangleRadiusRatio(vtkCell *cell)
        
        This is a static function used to calculate the radius ratio of a
        triangle. It assumes that you pass the correct type of cell -- no
        type checking is performed because this method is called from the
        inner loop of the Execute() member function. The radius ratio of
        a triangle $t $ is:$\frac{R}{2r} $, where $R $ and $r $
        respectively denote the circumradius and the inradius of $t $.
        """
        ...
    
    def TriangleRelativeSizeSquared(self, vtkCell):
        """
        V.TriangleRelativeSizeSquared(vtkCell) -> float
        C++: static double TriangleRelativeSizeSquared(vtkCell *cell)
        
        This is a static function used to calculate the square of the
        relative size of a triangle. It assumes that you pass the correct
        type of cell -- no type checking is performed because this method
        is called from the inner loop of the Execute() member function.
        """
        ...
    
    def TriangleScaledJacobian(self, vtkCell):
        """
        V.TriangleScaledJacobian(vtkCell) -> float
        C++: static double TriangleScaledJacobian(vtkCell *cell)
        
        This is a static function used to calculate the scaled Jacobian
        of a triangle. It assumes that you pass the correct type of cell
        -- no type checking is performed because this method is called
        from the inner loop of the Execute() member function.
        """
        ...
    
    def TriangleShape(self, vtkCell):
        """
        V.TriangleShape(vtkCell) -> float
        C++: static double TriangleShape(vtkCell *cell)
        
        This is a static function used to calculate the shape of a
        triangle. It assumes that you pass the correct type of cell -- no
        type checking is performed because this method is called from the
        inner loop of the Execute() member function.
        """
        ...
    
    def TriangleShapeAndSize(self, vtkCell):
        """
        V.TriangleShapeAndSize(vtkCell) -> float
        C++: static double TriangleShapeAndSize(vtkCell *cell)
        
        This is a static function used to calculate the product of shape
        and relative size of a triangle. It assumes that you pass the
        correct type of cell -- no type checking is performed because
        this method is called from the inner loop of the Execute() member
        function.
        """
        ...
    
    def VolumeOff(self):
        """
        V.VolumeOff()
        C++: virtual void VolumeOff()
        
        These methods are deprecated. The functionality of computing cell
        volume is being removed until it can be computed for any 3D cell.
        (The previous implementation only worked for tetrahedra.)
        
        * For now, turning on the volume computation will put this
        * filter into "compatibility mode," where tetrahedral cell
        * volume is stored in first component of each output tuple and
        * the radius ratio is stored in the second component. You may
        * also use CompatibilityModeOn()/Off() to enter this mode.
        * In this mode, cells other than tetrahedra will have report
        * a volume of 0.0 (if volume computation is enabled).
        
        * By default, volume computation is disabled and compatibility
        * mode is off, since it does not make a lot of sense for
        * meshes with non-tetrahedral cells.
        """
        ...
    
    def VolumeOn(self):
        """
        V.VolumeOn()
        C++: virtual void VolumeOn()
        
        These methods are deprecated. The functionality of computing cell
        volume is being removed until it can be computed for any 3D cell.
        (The previous implementation only worked for tetrahedra.)
        
        * For now, turning on the volume computation will put this
        * filter into "compatibility mode," where tetrahedral cell
        * volume is stored in first component of each output tuple and
        * the radius ratio is stored in the second component. You may
        * also use CompatibilityModeOn()/Off() to enter this mode.
        * In this mode, cells other than tetrahedra will have report
        * a volume of 0.0 (if volume computation is enabled).
        
        * By default, volume computation is disabled and compatibility
        * mode is off, since it does not make a lot of sense for
        * meshes with non-tetrahedral cells.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
