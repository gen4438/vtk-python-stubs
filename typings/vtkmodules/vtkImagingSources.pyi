"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageCanvasSource2D(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageCanvasSource2D - Paints on a canvas
    
    Superclass: vtkImageAlgorithm
    
    vtkImageCanvasSource2D is a source that starts as a blank image. you
    may add to the image with two-dimensional drawing routines. It can
    paint multi-spectral images.
    """
    def DrawCircle(self, p_int, p_int_1, p_float):
        """
        V.DrawCircle(int, int, float)
        C++: void DrawCircle(int c0, int c1, double radius)
        
        Set the pixels inside the box (min0, max0, min1, max1) to the
        current DrawColor
        """
        ...
    
    def DrawImage(self, p_int, p_int_1, vtkImageData):
        """
        V.DrawImage(int, int, vtkImageData)
        C++: void DrawImage(int x0, int y0, vtkImageData *i)
        V.DrawImage(int, int, vtkImageData, int, int, int, int)
        C++: void DrawImage(int x0, int y0, vtkImageData *, int sx,
            int sy, int width, int height)
        
        Draw subimage of the input image in the canvas at position x0 and
        y0. The subimage is defined with sx, sy, width, and height.
        """
        ...
    
    def DrawPoint(self, p_int, p_int_1):
        """
        V.DrawPoint(int, int)
        C++: void DrawPoint(int p0, int p1)
        
        Set the pixels inside the box (min0, max0, min1, max1) to the
        current DrawColor
        """
        ...
    
    def DrawSegment(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.DrawSegment(int, int, int, int)
        C++: void DrawSegment(int x0, int y0, int x1, int y1)
        
        Set the pixels inside the box (min0, max0, min1, max1) to the
        current DrawColor
        """
        ...
    
    def DrawSegment3D(self, *float, **kwargs):
        """
        V.DrawSegment3D([float, ...], [float, ...])
        C++: void DrawSegment3D(double *p0, double *p1)
        V.DrawSegment3D(float, float, float, float, float, float)
        C++: void DrawSegment3D(double x1, double y1, double z1,
            double x2, double y2, double z2)
        
        Set the pixels inside the box (min0, max0, min1, max1) to the
        current DrawColor
        """
        ...
    
    def FillBox(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.FillBox(int, int, int, int)
        C++: void FillBox(int min0, int max0, int min1, int max1)
        
        Set the pixels inside the box (min0, max0, min1, max1) to the
        current DrawColor
        """
        ...
    
    def FillPixel(self, p_int, p_int_1):
        """
        V.FillPixel(int, int)
        C++: void FillPixel(int x, int y)
        
        Fill a colored area with another color. (like connectivity) All
        pixels connected (and with the same value) to pixel (x, y) get
        replaced by the current "DrawColor".
        """
        ...
    
    def FillTriangle(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.FillTriangle(int, int, int, int, int, int)
        C++: void FillTriangle(int x0, int y0, int x1, int y1, int x2,
            int y2)
        
        Set the pixels inside the box (min0, max0, min1, max1) to the
        current DrawColor
        """
        ...
    
    def FillTube(self, p_int, p_int_1, p_int_2, p_int_3, p_float):
        """
        V.FillTube(int, int, int, int, float)
        C++: void FillTube(int x0, int y0, int x1, int y1, double radius)
        
        Set the pixels inside the box (min0, max0, min1, max1) to the
        current DrawColor
        """
        ...
    
    def GetDefaultZ(self):
        """
        V.GetDefaultZ() -> int
        C++: virtual int GetDefaultZ()
        
        The drawing operations can only draw into one 2D XY plane at a
        time. If the canvas is a 3D volume, then this z value is used as
        the default for 2D operations. The default is 0.
        """
        ...
    
    def GetDrawColor(self):
        """
        V.GetDrawColor() -> (float, float, float, float)
        C++: virtual double *GetDrawColor()
        
        Set/Get DrawColor.  This is the value that is used when filling
        data or drawing lines. Default is (0,0,0,0)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfScalarComponents(self):
        """
        V.GetNumberOfScalarComponents() -> int
        C++: virtual int GetNumberOfScalarComponents()
        
        Set the number of scalar components
        """
        ...
    
    def GetRatio(self):
        """
        V.GetRatio() -> (float, float, float)
        C++: virtual double *GetRatio()
        
        Set/Get Ratio. This is the value that is used to pre-multiply
        each (x, y, z) drawing coordinates (including DefaultZ). The
        default is (1, 1, 1)
        """
        ...
    
    def GetScalarType(self):
        """
        V.GetScalarType() -> int
        C++: int GetScalarType()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def InitializeCanvasVolume(self, vtkImageData):
        """
        V.InitializeCanvasVolume(vtkImageData)
        C++: void InitializeCanvasVolume(vtkImageData *volume)
        
        Initialize the canvas with a given volume
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageCanvasSource2D
        C++: vtkImageCanvasSource2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageCanvasSource2D
        C++: static vtkImageCanvasSource2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDefaultZ(self, p_int):
        """
        V.SetDefaultZ(int)
        C++: virtual void SetDefaultZ(int _arg)
        
        The drawing operations can only draw into one 2D XY plane at a
        time. If the canvas is a 3D volume, then this z value is used as
        the default for 2D operations. The default is 0.
        """
        ...
    
    def SetDrawColor(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetDrawColor(float, float, float, float)
        C++: virtual void SetDrawColor(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetDrawColor((float, float, float, float))
        C++: virtual void SetDrawColor(const double _arg[4])
        V.SetDrawColor(float)
        C++: void SetDrawColor(double a)
        V.SetDrawColor(float, float)
        C++: void SetDrawColor(double a, double b)
        V.SetDrawColor(float, float, float)
        C++: void SetDrawColor(double a, double b, double c)
        
        Set/Get DrawColor.  This is the value that is used when filling
        data or drawing lines. Default is (0,0,0,0)
        """
        ...
    
    def SetExtent(self, *int):
        """
        V.SetExtent([int, ...])
        C++: void SetExtent(int *extent)
        V.SetExtent(int, int, int, int, int, int)
        C++: void SetExtent(int x1, int x2, int y1, int y2, int z1,
            int z2)
        
        These methods set the WholeExtent of the output It sets the size
        of the canvas. Extent is a min max 3D box.  Minimums and maximums
        are inclusive.
        """
        ...
    
    def SetNumberOfScalarComponents(self, p_int):
        """
        V.SetNumberOfScalarComponents(int)
        C++: virtual void SetNumberOfScalarComponents(int i)
        
        Set the number of scalar components
        """
        ...
    
    def SetRatio(self, p_float, p_float_1, p_float_2):
        """
        V.SetRatio(float, float, float)
        C++: virtual void SetRatio(double _arg1, double _arg2,
            double _arg3)
        V.SetRatio((float, float, float))
        C++: virtual void SetRatio(const double _arg[3])
        
        Set/Get Ratio. This is the value that is used to pre-multiply
        each (x, y, z) drawing coordinates (including DefaultZ). The
        default is (1, 1, 1)
        """
        ...
    
    def SetScalarType(self, p_int):
        """
        V.SetScalarType(int)
        C++: void SetScalarType(int)
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToChar(self):
        """
        V.SetScalarTypeToChar()
        C++: void SetScalarTypeToChar()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToDouble(self):
        """
        V.SetScalarTypeToDouble()
        C++: void SetScalarTypeToDouble()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToFloat(self):
        """
        V.SetScalarTypeToFloat()
        C++: void SetScalarTypeToFloat()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToInt(self):
        """
        V.SetScalarTypeToInt()
        C++: void SetScalarTypeToInt()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToLong(self):
        """
        V.SetScalarTypeToLong()
        C++: void SetScalarTypeToLong()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToShort(self):
        """
        V.SetScalarTypeToShort()
        C++: void SetScalarTypeToShort()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToUnsignedChar(self):
        """
        V.SetScalarTypeToUnsignedChar()
        C++: void SetScalarTypeToUnsignedChar()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToUnsignedInt(self):
        """
        V.SetScalarTypeToUnsignedInt()
        C++: void SetScalarTypeToUnsignedInt()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToUnsignedLong(self):
        """
        V.SetScalarTypeToUnsignedLong()
        C++: void SetScalarTypeToUnsignedLong()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def SetScalarTypeToUnsignedShort(self):
        """
        V.SetScalarTypeToUnsignedShort()
        C++: void SetScalarTypeToUnsignedShort()
        
        Set/Get the data scalar type (i.e VTK_DOUBLE). Note that these
        methods are setting and getting the pipeline scalar type. i.e.
        they are setting the type that the image data will be once it has
        executed. Until the REQUEST_DATA pass the actual scalars may be
        of some other type. This is for backwards compatibility
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageEllipsoidSource(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageEllipsoidSource - Create a binary image of an ellipsoid.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageEllipsoidSource creates a binary image of a ellipsoid.  It
    was created as an example of a simple source, and to test the mask
    filter. It is also used internally in vtkImageDilateErode3D.
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set/Get the center of the ellipsoid.
        """
        ...
    
    def GetInValue(self):
        """
        V.GetInValue() -> float
        C++: virtual double GetInValue()
        
        Set/Get the inside pixel values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def GetOutValue(self):
        """
        V.GetOutValue() -> float
        C++: virtual double GetOutValue()
        
        Set/Get the outside pixel values.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> (float, float, float)
        C++: virtual double *GetRadius()
        
        Set/Get the radius of the ellipsoid.
        """
        ...
    
    def GetWholeExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetWholeExtent([int, int, int, int, int, int])
        C++: void GetWholeExtent(int extent[6])
        V.GetWholeExtent() -> (int, int, int, int, int, int)
        C++: int *GetWholeExtent()
        
        Set/Get the extent of the whole output image.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageEllipsoidSource
        C++: vtkImageEllipsoidSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageEllipsoidSource
        C++: static vtkImageEllipsoidSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set/Get the center of the ellipsoid.
        """
        ...
    
    def SetInValue(self, p_float):
        """
        V.SetInValue(float)
        C++: virtual void SetInValue(double _arg)
        
        Set/Get the inside pixel values.
        """
        ...
    
    def SetOutputScalarType(self, p_int):
        """
        V.SetOutputScalarType(int)
        C++: virtual void SetOutputScalarType(int _arg)
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToChar(self):
        """
        V.SetOutputScalarTypeToChar()
        C++: void SetOutputScalarTypeToChar()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToInt(self):
        """
        V.SetOutputScalarTypeToInt()
        C++: void SetOutputScalarTypeToInt()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToLong(self):
        """
        V.SetOutputScalarTypeToLong()
        C++: void SetOutputScalarTypeToLong()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToShort(self):
        """
        V.SetOutputScalarTypeToShort()
        C++: void SetOutputScalarTypeToShort()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedChar(self):
        """
        V.SetOutputScalarTypeToUnsignedChar()
        C++: void SetOutputScalarTypeToUnsignedChar()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedInt(self):
        """
        V.SetOutputScalarTypeToUnsignedInt()
        C++: void SetOutputScalarTypeToUnsignedInt()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedLong(self):
        """
        V.SetOutputScalarTypeToUnsignedLong()
        C++: void SetOutputScalarTypeToUnsignedLong()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutputScalarTypeToUnsignedShort(self):
        """
        V.SetOutputScalarTypeToUnsignedShort()
        C++: void SetOutputScalarTypeToUnsignedShort()
        
        Set what type of scalar data this source should generate.
        """
        ...
    
    def SetOutValue(self, p_float):
        """
        V.SetOutValue(float)
        C++: virtual void SetOutValue(double _arg)
        
        Set/Get the outside pixel values.
        """
        ...
    
    def SetRadius(self, p_float, p_float_1, p_float_2):
        """
        V.SetRadius(float, float, float)
        C++: virtual void SetRadius(double _arg1, double _arg2,
            double _arg3)
        V.SetRadius((float, float, float))
        C++: virtual void SetRadius(const double _arg[3])
        
        Set/Get the radius of the ellipsoid.
        """
        ...
    
    def SetWholeExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetWholeExtent([int, int, int, int, int, int])
        C++: void SetWholeExtent(int extent[6])
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: void SetWholeExtent(int minX, int maxX, int minY, int maxY,
            int minZ, int maxZ)
        
        Set/Get the extent of the whole output image.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageGaussianSource(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageGaussianSource - Create an image with Gaussian pixel values.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageGaussianSource just produces images with pixel values
    determined by a Gaussian.
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set/Get the center of the Gaussian.
        """
        ...
    
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        
        Set/Get the Maximum value of the gaussian
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStandardDeviation(self):
        """
        V.GetStandardDeviation() -> float
        C++: virtual double GetStandardDeviation()
        
        Set/Get the standard deviation of the gaussian
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageGaussianSource
        C++: vtkImageGaussianSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageGaussianSource
        C++: static vtkImageGaussianSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set/Get the center of the Gaussian.
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        
        Set/Get the Maximum value of the gaussian
        """
        ...
    
    def SetStandardDeviation(self, p_float):
        """
        V.SetStandardDeviation(float)
        C++: virtual void SetStandardDeviation(double _arg)
        
        Set/Get the standard deviation of the gaussian
        """
        ...
    
    def SetWholeExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: void SetWholeExtent(int xMinx, int xMax, int yMin, int yMax,
            int zMin, int zMax)
        
        Set/Get the extent of the whole output image.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageGridSource(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageGridSource - Create an image of a grid.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageGridSource produces an image of a grid.  The default output
    type is double.
    """
    def GetDataExtent(self):
        """
        V.GetDataExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetDataExtent()
        
        Set/Get the extent of the whole output image, Default:
        (0,255,0,255,0,0)
        """
        ...
    
    def GetDataOrigin(self):
        """
        V.GetDataOrigin() -> (float, float, float)
        C++: virtual double *GetDataOrigin()
        
        Set/Get the origin of the data.
        """
        ...
    
    def GetDataScalarType(self):
        """
        V.GetDataScalarType() -> int
        C++: virtual int GetDataScalarType()
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def GetDataScalarTypeAsString(self):
        """
        V.GetDataScalarTypeAsString() -> string
        C++: const char *GetDataScalarTypeAsString()
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def GetDataSpacing(self):
        """
        V.GetDataSpacing() -> (float, float, float)
        C++: virtual double *GetDataSpacing()
        
        Set/Get the pixel spacing.
        """
        ...
    
    def GetFillValue(self):
        """
        V.GetFillValue() -> float
        C++: virtual double GetFillValue()
        
        Set the grey level of the fill. Default 0.0.
        """
        ...
    
    def GetGridOrigin(self):
        """
        V.GetGridOrigin() -> (int, int, int)
        C++: virtual int *GetGridOrigin()
        
        Set/Get the grid origin, in ijk integer values.  Default (0,0,0).
        """
        ...
    
    def GetGridSpacing(self):
        """
        V.GetGridSpacing() -> (int, int, int)
        C++: virtual int *GetGridSpacing()
        
        Set/Get the grid spacing in pixel units.  Default (10,10,0). A
        value of zero means no grid.
        """
        ...
    
    def GetLineValue(self):
        """
        V.GetLineValue() -> float
        C++: virtual double GetLineValue()
        
        Set the grey level of the lines. Default 1.0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageGridSource
        C++: vtkImageGridSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageGridSource
        C++: static vtkImageGridSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDataExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetDataExtent(int, int, int, int, int, int)
        C++: virtual void SetDataExtent(int _arg1, int _arg2, int _arg3,
            int _arg4, int _arg5, int _arg6)
        V.SetDataExtent((int, int, int, int, int, int))
        C++: virtual void SetDataExtent(const int _arg[6])
        
        Set/Get the extent of the whole output image, Default:
        (0,255,0,255,0,0)
        """
        ...
    
    def SetDataOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetDataOrigin(float, float, float)
        C++: virtual void SetDataOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetDataOrigin((float, float, float))
        C++: virtual void SetDataOrigin(const double _arg[3])
        
        Set/Get the origin of the data.
        """
        ...
    
    def SetDataScalarType(self, p_int):
        """
        V.SetDataScalarType(int)
        C++: virtual void SetDataScalarType(int _arg)
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def SetDataScalarTypeToDouble(self):
        """
        V.SetDataScalarTypeToDouble()
        C++: void SetDataScalarTypeToDouble()
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def SetDataScalarTypeToInt(self):
        """
        V.SetDataScalarTypeToInt()
        C++: void SetDataScalarTypeToInt()
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def SetDataScalarTypeToShort(self):
        """
        V.SetDataScalarTypeToShort()
        C++: void SetDataScalarTypeToShort()
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def SetDataScalarTypeToUnsignedChar(self):
        """
        V.SetDataScalarTypeToUnsignedChar()
        C++: void SetDataScalarTypeToUnsignedChar()
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def SetDataScalarTypeToUnsignedShort(self):
        """
        V.SetDataScalarTypeToUnsignedShort()
        C++: void SetDataScalarTypeToUnsignedShort()
        
        Set/Get the data type of pixels in the imported data. As a
        convenience, the OutputScalarType is set to the same value.
        """
        ...
    
    def SetDataSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetDataSpacing(float, float, float)
        C++: virtual void SetDataSpacing(double _arg1, double _arg2,
            double _arg3)
        V.SetDataSpacing((float, float, float))
        C++: virtual void SetDataSpacing(const double _arg[3])
        
        Set/Get the pixel spacing.
        """
        ...
    
    def SetFillValue(self, p_float):
        """
        V.SetFillValue(float)
        C++: virtual void SetFillValue(double _arg)
        
        Set the grey level of the fill. Default 0.0.
        """
        ...
    
    def SetGridOrigin(self, p_int, p_int_1, p_int_2):
        """
        V.SetGridOrigin(int, int, int)
        C++: virtual void SetGridOrigin(int _arg1, int _arg2, int _arg3)
        V.SetGridOrigin((int, int, int))
        C++: virtual void SetGridOrigin(const int _arg[3])
        
        Set/Get the grid origin, in ijk integer values.  Default (0,0,0).
        """
        ...
    
    def SetGridSpacing(self, p_int, p_int_1, p_int_2):
        """
        V.SetGridSpacing(int, int, int)
        C++: virtual void SetGridSpacing(int _arg1, int _arg2, int _arg3)
        V.SetGridSpacing((int, int, int))
        C++: virtual void SetGridSpacing(const int _arg[3])
        
        Set/Get the grid spacing in pixel units.  Default (10,10,0). A
        value of zero means no grid.
        """
        ...
    
    def SetLineValue(self, p_float):
        """
        V.SetLineValue(float)
        C++: virtual void SetLineValue(double _arg)
        
        Set the grey level of the lines. Default 1.0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageMandelbrotSource(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageMandelbrotSource - Mandelbrot image.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageMandelbrotSource creates an unsigned char image of the
    Mandelbrot set.  The values in the image are the number of iterations
    it takes for the magnitude of the value to get over 2.  The equation
    repeated is z = z^2 + C (z and C are complex).  Initial value of z is
    zero, and the real value of C is mapped onto the x axis, and the
    imaginary value of C is mapped onto the Y Axis.  I was thinking of
    extending this source to generate Julia Sets (initial value of Z
    varies).  This would be 4 possible parameters to vary, but there are
    no more 4d images :( The third dimension (z axis) is the imaginary
    value of the initial value.
    """
    def ConstantSizeOff(self):
        """
        V.ConstantSizeOff()
        C++: virtual void ConstantSizeOff()
        
        This flag determines whether the Size or spacing of a data set
        remain constant (when extent is changed). By default, size
        remains constant.
        """
        ...
    
    def ConstantSizeOn(self):
        """
        V.ConstantSizeOn()
        C++: virtual void ConstantSizeOn()
        
        This flag determines whether the Size or spacing of a data set
        remain constant (when extent is changed). By default, size
        remains constant.
        """
        ...
    
    def CopyOriginAndSample(self, vtkImageMandelbrotSource):
        """
        V.CopyOriginAndSample(vtkImageMandelbrotSource)
        C++: void CopyOriginAndSample(vtkImageMandelbrotSource *source)
        
        Convenience for Viewer.  Copy the OriginCX and the SpacingCX.
        What about other parameters ???
        """
        ...
    
    def GetConstantSize(self):
        """
        V.GetConstantSize() -> int
        C++: virtual vtkTypeBool GetConstantSize()
        
        This flag determines whether the Size or spacing of a data set
        remain constant (when extent is changed). By default, size
        remains constant.
        """
        ...
    
    def GetMaximumNumberOfIterations(self):
        """
        V.GetMaximumNumberOfIterations() -> int
        C++: virtual unsigned short GetMaximumNumberOfIterations()
        
        The maximum number of cycles run to see if the value goes over 2
        """
        ...
    
    def GetMaximumNumberOfIterationsMaxValue(self):
        """
        V.GetMaximumNumberOfIterationsMaxValue() -> int
        C++: virtual unsigned short GetMaximumNumberOfIterationsMaxValue()
        
        The maximum number of cycles run to see if the value goes over 2
        """
        ...
    
    def GetMaximumNumberOfIterationsMinValue(self):
        """
        V.GetMaximumNumberOfIterationsMinValue() -> int
        C++: virtual unsigned short GetMaximumNumberOfIterationsMinValue()
        
        The maximum number of cycles run to see if the value goes over 2
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOriginCX(self):
        """
        V.GetOriginCX() -> (float, float, float, float)
        C++: virtual double *GetOriginCX()
        """
        ...
    
    def GetProjectionAxes(self):
        """
        V.GetProjectionAxes() -> (int, int, int)
        C++: virtual int *GetProjectionAxes()
        
        Set the projection from the 4D space (4 parameters / 2 imaginary
        numbers) to the axes of the 3D Volume. 0=C_Real, 1=C_Imaginary,
        2=X_Real, 4=X_Imaginary
        """
        ...
    
    def GetSampleCX(self):
        """
        V.GetSampleCX() -> (float, float, float, float)
        C++: virtual double *GetSampleCX()
        """
        ...
    
    def GetSizeCX(self):
        """
        V.GetSizeCX() -> (float, float, float, float)
        C++: double *GetSizeCX()
        V.GetSizeCX([float, float, float, float])
        C++: void GetSizeCX(double s[4])
        
        Just a different way of setting the sample. This sets the size of
        the 4D volume. SampleCX is computed from size and extent. Size is
        ignored when a dimension i 0 (collapsed).
        """
        ...
    
    def GetSubsampleRate(self):
        """
        V.GetSubsampleRate() -> int
        C++: virtual int GetSubsampleRate()
        
        Set/Get a subsample rate.
        """
        ...
    
    def GetSubsampleRateMaxValue(self):
        """
        V.GetSubsampleRateMaxValue() -> int
        C++: virtual int GetSubsampleRateMaxValue()
        
        Set/Get a subsample rate.
        """
        ...
    
    def GetSubsampleRateMinValue(self):
        """
        V.GetSubsampleRateMinValue() -> int
        C++: virtual int GetSubsampleRateMinValue()
        
        Set/Get a subsample rate.
        """
        ...
    
    def GetWholeExtent(self):
        """
        V.GetWholeExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetWholeExtent()
        
        Set/Get the extent of the whole output Volume.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMandelbrotSource
        C++: vtkImageMandelbrotSource *NewInstance()
        """
        ...
    
    def Pan(self, p_float, p_float_1, p_float_2):
        """
        V.Pan(float, float, float)
        C++: void Pan(double x, double y, double z)
        
        Convenience for Viewer.  Pan 3D volume relative to spacing. Zoom
        constant factor.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMandelbrotSource
        C++: static vtkImageMandelbrotSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetConstantSize(self, p_int):
        """
        V.SetConstantSize(int)
        C++: virtual void SetConstantSize(vtkTypeBool _arg)
        
        This flag determines whether the Size or spacing of a data set
        remain constant (when extent is changed). By default, size
        remains constant.
        """
        ...
    
    def SetMaximumNumberOfIterations(self, p_int):
        """
        V.SetMaximumNumberOfIterations(int)
        C++: virtual void SetMaximumNumberOfIterations(
            unsigned short _arg)
        
        The maximum number of cycles run to see if the value goes over 2
        """
        ...
    
    def SetOriginCX(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetOriginCX(float, float, float, float)
        C++: virtual void SetOriginCX(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetOriginCX((float, float, float, float))
        C++: virtual void SetOriginCX(const double _arg[4])
        
        Imaginary and real value for C (constant in equation) and X
        (initial value).
        """
        ...
    
    def SetProjectionAxes(self, p_int, p_int_1, p_int_2):
        """
        V.SetProjectionAxes(int, int, int)
        C++: void SetProjectionAxes(int x, int y, int z)
        V.SetProjectionAxes([int, int, int])
        C++: void SetProjectionAxes(int a[3])
        
        Set the projection from the 4D space (4 parameters / 2 imaginary
        numbers) to the axes of the 3D Volume. 0=C_Real, 1=C_Imaginary,
        2=X_Real, 4=X_Imaginary
        """
        ...
    
    def SetSampleCX(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetSampleCX(float, float, float, float)
        C++: virtual void SetSampleCX(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetSampleCX((float, float, float, float))
        C++: virtual void SetSampleCX(const double _arg[4])
        
        Imaginary and real value for C (constant in equation) and X
        (initial value).
        """
        ...
    
    def SetSizeCX(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetSizeCX(float, float, float, float)
        C++: void SetSizeCX(double cReal, double cImag, double xReal,
            double xImag)
        
        Just a different way of setting the sample. This sets the size of
        the 4D volume. SampleCX is computed from size and extent. Size is
        ignored when a dimension i 0 (collapsed).
        """
        ...
    
    def SetSubsampleRate(self, p_int):
        """
        V.SetSubsampleRate(int)
        C++: virtual void SetSubsampleRate(int _arg)
        
        Set/Get a subsample rate.
        """
        ...
    
    def SetWholeExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetWholeExtent([int, int, int, int, int, int])
        C++: void SetWholeExtent(int extent[6])
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: void SetWholeExtent(int minX, int maxX, int minY, int maxY,
            int minZ, int maxZ)
        
        Set/Get the extent of the whole output Volume.
        """
        ...
    
    def Zoom(self, p_float):
        """
        V.Zoom(float)
        C++: void Zoom(double factor)
        
        Convenience for Viewer.  Pan 3D volume relative to spacing. Zoom
        constant factor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageNoiseSource(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageNoiseSource - Create an image filled with noise.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageNoiseSource just produces images filled with noise.  The only
    option now is uniform noise specified by a min and a max.  There is
    one major problem with this source. Every time it executes, it will
    output different pixel values.  This has important implications when
    a stream requests overlapping regions.  The same pixels will have
    different values on different updates.
    """
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        
        Set/Get the minimum and maximum values for the generated noise.
        """
        ...
    
    def GetMinimum(self):
        """
        V.GetMinimum() -> float
        C++: virtual double GetMinimum()
        
        Set/Get the minimum and maximum values for the generated noise.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageNoiseSource
        C++: vtkImageNoiseSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageNoiseSource
        C++: static vtkImageNoiseSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        
        Set/Get the minimum and maximum values for the generated noise.
        """
        ...
    
    def SetMinimum(self, p_float):
        """
        V.SetMinimum(float)
        C++: virtual void SetMinimum(double _arg)
        
        Set/Get the minimum and maximum values for the generated noise.
        """
        ...
    
    def SetWholeExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: void SetWholeExtent(int xMinx, int xMax, int yMin, int yMax,
            int zMin, int zMax)
        V.SetWholeExtent((int, int, int, int, int, int))
        C++: void SetWholeExtent(const int ext[6])
        
        Set how large of an image to generate.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSinusoidSource(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageSinusoidSource - Create an image with sinusoidal pixel values.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageSinusoidSource just produces images with pixel values
    determined by a sinusoid.
    """
    def GetAmplitude(self):
        """
        V.GetAmplitude() -> float
        C++: virtual double GetAmplitude()
        
        Set/Get the magnitude of the sinusoid.
        """
        ...
    
    def GetDirection(self):
        """
        V.GetDirection() -> (float, float, float)
        C++: virtual double *GetDirection()
        
        Set/Get the direction vector which determines the sinusoidal
        orientation. The magnitude is ignored.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPeriod(self):
        """
        V.GetPeriod() -> float
        C++: virtual double GetPeriod()
        
        Set/Get the period of the sinusoid in pixels.
        """
        ...
    
    def GetPhase(self):
        """
        V.GetPhase() -> float
        C++: virtual double GetPhase()
        
        Set/Get the phase: 0->2Pi.  0 => Cosine, pi/2 => Sine.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSinusoidSource
        C++: vtkImageSinusoidSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSinusoidSource
        C++: static vtkImageSinusoidSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAmplitude(self, p_float):
        """
        V.SetAmplitude(float)
        C++: virtual void SetAmplitude(double _arg)
        
        Set/Get the magnitude of the sinusoid.
        """
        ...
    
    def SetDirection(self, p_float, p_float_1, p_float_2):
        """
        V.SetDirection(float, float, float)
        C++: void SetDirection(double, double, double)
        V.SetDirection([float, float, float])
        C++: void SetDirection(double dir[3])
        
        Set/Get the direction vector which determines the sinusoidal
        orientation. The magnitude is ignored.
        """
        ...
    
    def SetPeriod(self, p_float):
        """
        V.SetPeriod(float)
        C++: virtual void SetPeriod(double _arg)
        
        Set/Get the period of the sinusoid in pixels.
        """
        ...
    
    def SetPhase(self, p_float):
        """
        V.SetPhase(float)
        C++: virtual void SetPhase(double _arg)
        
        Set/Get the phase: 0->2Pi.  0 => Cosine, pi/2 => Sine.
        """
        ...
    
    def SetWholeExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: void SetWholeExtent(int xMinx, int xMax, int yMin, int yMax,
            int zMin, int zMax)
        
        Set/Get the extent of the whole output image.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
