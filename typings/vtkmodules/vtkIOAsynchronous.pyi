"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkThreadedImageWriter(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkThreadedImageWriter - class used to compress/write images using
    threads to prevent
              locking while encoding data.
    
    Superclass: vtkObject
    
    @details  This writer allow to encode an image data based on its file
              extension: tif, tiff, bpm, png, jpg, jpeg, vti, Z, ppm, raw
    
    @author   Patricia Kroll Fasel @ LANL
    """
    def EncodeAndWrite(self, vtkImageData, string):
        """
        V.EncodeAndWrite(vtkImageData, string)
        C++: void EncodeAndWrite(vtkImageData *image,
            const char *fileName)
        
        Push an image into the threaded writer. It is not safe to modify
        the image after this point. You may run into thread safety
        issues. Typically, the caller code will simply release reference
        to the data and stop using it.
        """
        ...
    
    def Finalize(self):
        """
        V.Finalize()
        C++: void Finalize()
        
        This method will wait for any running thread to terminate.
        """
        ...
    
    def GetMaxThreads(self):
        """
        V.GetMaxThreads() -> int
        C++: virtual vtkTypeUInt32 GetMaxThreads()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Need to be called at least once before using the class. Then it
        should be called again after any change on the thread count or if
        Finalize() was called.
        
        This method will wait for any running thread to terminate and
        start a new pool with the given number of threads.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkThreadedImageWriter
        C++: vtkThreadedImageWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkThreadedImageWriter
        C++: static vtkThreadedImageWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaxThreads(self, p_int):
        """
        V.SetMaxThreads(int)
        C++: void SetMaxThreads(vtkTypeUInt32)
        
        Define the number of worker thread to use. Initialize() need to
        be called after any thread count change.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
