"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOCore as __vtkmodules_vtkIOCore

VTK_FILE_BYTE_ORDER_BIG_ENDIAN = ...
VTK_FILE_BYTE_ORDER_LITTLE_ENDIAN = ...
class vtkAVSucdReader(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkAVSucdReader - reads a dataset in AVS "UCD" format
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkAVSucdReader creates an unstructured grid dataset. It reads binary
    or ASCII files stored in UCD format, with optional data stored at the
    nodes or at the cells of the model. A cell-based fielddata stores the
    material id. The class can automatically detect the endian-ness of
    the binary files.
    
    @par Thanks: Thanks to Guenole Harel and Emmanuel Colin (Supelec
    engineering school, France) and Jean M. Favre (CSCS, Switzerland) who
    co-developed this class. Thanks to Isabelle Surin (isabelle.surin at
    cea.fr, CEA-DAM, France) who supervised the internship of the first
    two authors. Thanks to Daniel Aguilera (daniel.aguilera at cea.fr,
    CEA-DAM, France) who contributed code and advice. Please address all
    comments to Jean Favre (jfavre at cscs.ch)
    
    @sa
    vtkGAMBITReader
    """
    def BinaryFileOff(self):
        """
        V.BinaryFileOff()
        C++: virtual void BinaryFileOff()
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def BinaryFileOn(self):
        """
        V.BinaryFileOn()
        C++: virtual void BinaryFileOn()
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def DisableAllCellArrays(self):
        """
        V.DisableAllCellArrays()
        C++: void DisableAllCellArrays()
        """
        ...
    
    def DisableAllPointArrays(self):
        """
        V.DisableAllPointArrays()
        C++: void DisableAllPointArrays()
        """
        ...
    
    def EnableAllCellArrays(self):
        """
        V.EnableAllCellArrays()
        C++: void EnableAllCellArrays()
        """
        ...
    
    def EnableAllPointArrays(self):
        """
        V.EnableAllPointArrays()
        C++: void EnableAllPointArrays()
        """
        ...
    
    def GetBinaryFile(self):
        """
        V.GetBinaryFile() -> int
        C++: virtual vtkTypeBool GetBinaryFile()
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def GetByteOrder(self):
        """
        V.GetByteOrder() -> int
        C++: virtual int GetByteOrder()
        """
        ...
    
    def GetByteOrderAsString(self):
        """
        V.GetByteOrderAsString() -> string
        C++: const char *GetByteOrderAsString()
        
        Set/Get the endian-ness of the binary file.
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def GetCellDataRange(self, p_int, p_int_1, *float, **kwargs):
        """
        V.GetCellDataRange(int, int, [float, ...], [float, ...])
        C++: void GetCellDataRange(int cellComp, int index, float *min,
            float *max)
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of AVS UCD datafile to read
        """
        ...
    
    def GetNodeDataRange(self, p_int, p_int_1, *float, **kwargs):
        """
        V.GetNodeDataRange(int, int, [float, ...], [float, ...])
        C++: void GetNodeDataRange(int nodeComp, int index, float *min,
            float *max)
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays()
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def GetNumberOfCellComponents(self):
        """
        V.GetNumberOfCellComponents() -> int
        C++: virtual int GetNumberOfCellComponents()
        
        Get the number of data components at the nodes and cells.
        """
        ...
    
    def GetNumberOfCellFields(self):
        """
        V.GetNumberOfCellFields() -> int
        C++: virtual int GetNumberOfCellFields()
        
        Get the number of data fields at the cell centers.
        """
        ...
    
    def GetNumberOfCells(self):
        """
        V.GetNumberOfCells() -> int
        C++: virtual int GetNumberOfCells()
        
        Get the total number of cells.
        """
        ...
    
    def GetNumberOfFields(self):
        """
        V.GetNumberOfFields() -> int
        C++: virtual int GetNumberOfFields()
        
        Get the number of data fields for the model. Unused because VTK
        has no methods for it.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfNodeComponents(self):
        """
        V.GetNumberOfNodeComponents() -> int
        C++: virtual int GetNumberOfNodeComponents()
        
        Get the number of data components at the nodes and cells.
        """
        ...
    
    def GetNumberOfNodeFields(self):
        """
        V.GetNumberOfNodeFields() -> int
        C++: virtual int GetNumberOfNodeFields()
        
        Get the number of data fields at the nodes.
        """
        ...
    
    def GetNumberOfNodes(self):
        """
        V.GetNumberOfNodes() -> int
        C++: virtual int GetNumberOfNodes()
        
        Get the total number of nodes.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays()
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAVSucdReader
        C++: vtkAVSucdReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAVSucdReader
        C++: static vtkAVSucdReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBinaryFile(self, p_int):
        """
        V.SetBinaryFile(int)
        C++: virtual void SetBinaryFile(vtkTypeBool _arg)
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def SetByteOrder(self, p_int):
        """
        V.SetByteOrder(int)
        C++: virtual void SetByteOrder(int _arg)
        """
        ...
    
    def SetByteOrderToBigEndian(self):
        """
        V.SetByteOrderToBigEndian()
        C++: void SetByteOrderToBigEndian()
        
        Set/Get the endian-ness of the binary file.
        """
        ...
    
    def SetByteOrderToLittleEndian(self):
        """
        V.SetByteOrderToLittleEndian()
        C++: void SetByteOrderToLittleEndian()
        
        Set/Get the endian-ness of the binary file.
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of AVS UCD datafile to read
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        
        The following methods allow selective reading of solutions
        fields.  by default, ALL data fields are the nodes and cells are
        read, but this can be modified.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBYUReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkBYUReader - read MOVIE.BYU polygon files
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkBYUReader is a source object that reads MOVIE.BYU polygon files.
    These files consist of a geometry file (.g), a scalar file (.s), a
    displacement or vector file (.d), and a 2D texture coordinate file
    (.t).
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: static int CanReadFile(const char *filename)
        
        Returns 1 if this file can be read and 0 if the file cannot be
        read. Because BYU files do not have anything in the header
        specifying the file type, the result is not definitive.  Invalid
        files may still return 1 although a valid file will never return
        0.
        """
        ...
    
    def GetDisplacementFileName(self):
        """
        V.GetDisplacementFileName() -> string
        C++: virtual char *GetDisplacementFileName()
        
        Specify name of displacement FileName.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetGeometryFileName(self):
        """
        V.GetGeometryFileName() -> string
        C++: virtual char *GetGeometryFileName()
        
        Specify name of geometry FileName.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPartNumber(self):
        """
        V.GetPartNumber() -> int
        C++: virtual int GetPartNumber()
        
        Set/Get the part number to be read.
        """
        ...
    
    def GetPartNumberMaxValue(self):
        """
        V.GetPartNumberMaxValue() -> int
        C++: virtual int GetPartNumberMaxValue()
        
        Set/Get the part number to be read.
        """
        ...
    
    def GetPartNumberMinValue(self):
        """
        V.GetPartNumberMinValue() -> int
        C++: virtual int GetPartNumberMinValue()
        
        Set/Get the part number to be read.
        """
        ...
    
    def GetReadDisplacement(self):
        """
        V.GetReadDisplacement() -> int
        C++: virtual vtkTypeBool GetReadDisplacement()
        
        Turn on/off the reading of the displacement file.
        """
        ...
    
    def GetReadScalar(self):
        """
        V.GetReadScalar() -> int
        C++: virtual vtkTypeBool GetReadScalar()
        
        Turn on/off the reading of the scalar file.
        """
        ...
    
    def GetReadTexture(self):
        """
        V.GetReadTexture() -> int
        C++: virtual vtkTypeBool GetReadTexture()
        
        Turn on/off the reading of the texture coordinate file. Specify
        name of geometry FileName.
        """
        ...
    
    def GetScalarFileName(self):
        """
        V.GetScalarFileName() -> string
        C++: virtual char *GetScalarFileName()
        
        Specify name of scalar FileName.
        """
        ...
    
    def GetTextureFileName(self):
        """
        V.GetTextureFileName() -> string
        C++: virtual char *GetTextureFileName()
        
        Specify name of texture coordinates FileName.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBYUReader
        C++: vtkBYUReader *NewInstance()
        """
        ...
    
    def ReadDisplacementOff(self):
        """
        V.ReadDisplacementOff()
        C++: virtual void ReadDisplacementOff()
        
        Turn on/off the reading of the displacement file.
        """
        ...
    
    def ReadDisplacementOn(self):
        """
        V.ReadDisplacementOn()
        C++: virtual void ReadDisplacementOn()
        
        Turn on/off the reading of the displacement file.
        """
        ...
    
    def ReadScalarOff(self):
        """
        V.ReadScalarOff()
        C++: virtual void ReadScalarOff()
        
        Turn on/off the reading of the scalar file.
        """
        ...
    
    def ReadScalarOn(self):
        """
        V.ReadScalarOn()
        C++: virtual void ReadScalarOn()
        
        Turn on/off the reading of the scalar file.
        """
        ...
    
    def ReadTextureOff(self):
        """
        V.ReadTextureOff()
        C++: virtual void ReadTextureOff()
        
        Turn on/off the reading of the texture coordinate file. Specify
        name of geometry FileName.
        """
        ...
    
    def ReadTextureOn(self):
        """
        V.ReadTextureOn()
        C++: virtual void ReadTextureOn()
        
        Turn on/off the reading of the texture coordinate file. Specify
        name of geometry FileName.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBYUReader
        C++: static vtkBYUReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDisplacementFileName(self, string):
        """
        V.SetDisplacementFileName(string)
        C++: virtual void SetDisplacementFileName(const char *_arg)
        
        Specify name of displacement FileName.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *f)
        
        Specify name of geometry FileName (alias).
        """
        ...
    
    def SetGeometryFileName(self, string):
        """
        V.SetGeometryFileName(string)
        C++: virtual void SetGeometryFileName(const char *_arg)
        
        Specify name of geometry FileName.
        """
        ...
    
    def SetPartNumber(self, p_int):
        """
        V.SetPartNumber(int)
        C++: virtual void SetPartNumber(int _arg)
        
        Set/Get the part number to be read.
        """
        ...
    
    def SetReadDisplacement(self, p_int):
        """
        V.SetReadDisplacement(int)
        C++: virtual void SetReadDisplacement(vtkTypeBool _arg)
        
        Turn on/off the reading of the displacement file.
        """
        ...
    
    def SetReadScalar(self, p_int):
        """
        V.SetReadScalar(int)
        C++: virtual void SetReadScalar(vtkTypeBool _arg)
        
        Turn on/off the reading of the scalar file.
        """
        ...
    
    def SetReadTexture(self, p_int):
        """
        V.SetReadTexture(int)
        C++: virtual void SetReadTexture(vtkTypeBool _arg)
        
        Turn on/off the reading of the texture coordinate file. Specify
        name of geometry FileName.
        """
        ...
    
    def SetScalarFileName(self, string):
        """
        V.SetScalarFileName(string)
        C++: virtual void SetScalarFileName(const char *_arg)
        
        Specify name of scalar FileName.
        """
        ...
    
    def SetTextureFileName(self, string):
        """
        V.SetTextureFileName(string)
        C++: virtual void SetTextureFileName(const char *_arg)
        
        Specify name of texture coordinates FileName.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBYUWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkBYUWriter - write MOVIE.BYU files
    
    Superclass: vtkWriter
    
    vtkBYUWriter writes MOVIE.BYU polygonal files. These files consist of
    a geometry file (.g), a scalar file (.s), a displacement or vector
    file (.d), and a 2D texture coordinate file (.t). These files must be
    specified to the object, the appropriate boolean variables must be
    true, and data must be available from the input for the files to be
    written. WARNING: this writer does not currently write triangle
    strips. Use vtkTriangleFilter to convert strips to triangles.
    """
    def GetDisplacementFileName(self):
        """
        V.GetDisplacementFileName() -> string
        C++: virtual char *GetDisplacementFileName()
        
        Specify the name of the displacement file to write.
        """
        ...
    
    def GetGeometryFileName(self):
        """
        V.GetGeometryFileName() -> string
        C++: virtual char *GetGeometryFileName()
        
        Specify the name of the geometry file to write.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        V.GetInput(int) -> vtkPolyData
        C++: vtkPolyData *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarFileName(self):
        """
        V.GetScalarFileName() -> string
        C++: virtual char *GetScalarFileName()
        
        Specify the name of the scalar file to write.
        """
        ...
    
    def GetTextureFileName(self):
        """
        V.GetTextureFileName() -> string
        C++: virtual char *GetTextureFileName()
        
        Specify the name of the texture file to write.
        """
        ...
    
    def GetWriteDisplacement(self):
        """
        V.GetWriteDisplacement() -> int
        C++: virtual vtkTypeBool GetWriteDisplacement()
        
        Turn on/off writing the displacement file.
        """
        ...
    
    def GetWriteScalar(self):
        """
        V.GetWriteScalar() -> int
        C++: virtual vtkTypeBool GetWriteScalar()
        
        Turn on/off writing the scalar file.
        """
        ...
    
    def GetWriteTexture(self):
        """
        V.GetWriteTexture() -> int
        C++: virtual vtkTypeBool GetWriteTexture()
        
        Turn on/off writing the texture file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBYUWriter
        C++: vtkBYUWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBYUWriter
        C++: static vtkBYUWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDisplacementFileName(self, string):
        """
        V.SetDisplacementFileName(string)
        C++: virtual void SetDisplacementFileName(const char *_arg)
        
        Specify the name of the displacement file to write.
        """
        ...
    
    def SetGeometryFileName(self, string):
        """
        V.SetGeometryFileName(string)
        C++: virtual void SetGeometryFileName(const char *_arg)
        
        Specify the name of the geometry file to write.
        """
        ...
    
    def SetScalarFileName(self, string):
        """
        V.SetScalarFileName(string)
        C++: virtual void SetScalarFileName(const char *_arg)
        
        Specify the name of the scalar file to write.
        """
        ...
    
    def SetTextureFileName(self, string):
        """
        V.SetTextureFileName(string)
        C++: virtual void SetTextureFileName(const char *_arg)
        
        Specify the name of the texture file to write.
        """
        ...
    
    def SetWriteDisplacement(self, p_int):
        """
        V.SetWriteDisplacement(int)
        C++: virtual void SetWriteDisplacement(vtkTypeBool _arg)
        
        Turn on/off writing the displacement file.
        """
        ...
    
    def SetWriteScalar(self, p_int):
        """
        V.SetWriteScalar(int)
        C++: virtual void SetWriteScalar(vtkTypeBool _arg)
        
        Turn on/off writing the scalar file.
        """
        ...
    
    def SetWriteTexture(self, p_int):
        """
        V.SetWriteTexture(int)
        C++: virtual void SetWriteTexture(vtkTypeBool _arg)
        
        Turn on/off writing the texture file.
        """
        ...
    
    def WriteDisplacementOff(self):
        """
        V.WriteDisplacementOff()
        C++: virtual void WriteDisplacementOff()
        
        Turn on/off writing the displacement file.
        """
        ...
    
    def WriteDisplacementOn(self):
        """
        V.WriteDisplacementOn()
        C++: virtual void WriteDisplacementOn()
        
        Turn on/off writing the displacement file.
        """
        ...
    
    def WriteScalarOff(self):
        """
        V.WriteScalarOff()
        C++: virtual void WriteScalarOff()
        
        Turn on/off writing the scalar file.
        """
        ...
    
    def WriteScalarOn(self):
        """
        V.WriteScalarOn()
        C++: virtual void WriteScalarOn()
        
        Turn on/off writing the scalar file.
        """
        ...
    
    def WriteTextureOff(self):
        """
        V.WriteTextureOff()
        C++: virtual void WriteTextureOff()
        
        Turn on/off writing the texture file.
        """
        ...
    
    def WriteTextureOn(self):
        """
        V.WriteTextureOn()
        C++: virtual void WriteTextureOn()
        
        Turn on/off writing the texture file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkChacoReader(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkChacoReader - Read a Chaco file and create a vtkUnstructuredGrid.
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkChacoReader is an unstructured grid source object that reads Chaco
    files.  The reader DOES NOT respond to piece requests. Chaco is a
    graph partitioning package developed at Sandia National Laboratories
    in the early 1990s.  (http://www.cs.sandia.gov/~bahendr/chaco.html)
    
    Note that the Chaco "edges" become VTK "cells", and the Chaco
    "vertices" become VTK "points".
    """
    def GenerateEdgeWeightArraysOff(self):
        """
        V.GenerateEdgeWeightArraysOff()
        C++: virtual void GenerateEdgeWeightArraysOff()
        """
        ...
    
    def GenerateEdgeWeightArraysOn(self):
        """
        V.GenerateEdgeWeightArraysOn()
        C++: virtual void GenerateEdgeWeightArraysOn()
        """
        ...
    
    def GenerateGlobalElementIdArrayOff(self):
        """
        V.GenerateGlobalElementIdArrayOff()
        C++: virtual void GenerateGlobalElementIdArrayOff()
        """
        ...
    
    def GenerateGlobalElementIdArrayOn(self):
        """
        V.GenerateGlobalElementIdArrayOn()
        C++: virtual void GenerateGlobalElementIdArrayOn()
        """
        ...
    
    def GenerateGlobalNodeIdArrayOff(self):
        """
        V.GenerateGlobalNodeIdArrayOff()
        C++: virtual void GenerateGlobalNodeIdArrayOff()
        """
        ...
    
    def GenerateGlobalNodeIdArrayOn(self):
        """
        V.GenerateGlobalNodeIdArrayOn()
        C++: virtual void GenerateGlobalNodeIdArrayOn()
        """
        ...
    
    def GenerateVertexWeightArraysOff(self):
        """
        V.GenerateVertexWeightArraysOff()
        C++: virtual void GenerateVertexWeightArraysOff()
        """
        ...
    
    def GenerateVertexWeightArraysOn(self):
        """
        V.GenerateVertexWeightArraysOn()
        C++: virtual void GenerateVertexWeightArraysOn()
        """
        ...
    
    def GetBaseName(self):
        """
        V.GetBaseName() -> string
        C++: virtual char *GetBaseName()
        """
        ...
    
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Access to meta data generated by RequestInformation.
        """
        ...
    
    def GetEdgeWeightArrayName(self, p_int):
        """
        V.GetEdgeWeightArrayName(int) -> string
        C++: const char *GetEdgeWeightArrayName(int weight)
        
        This method returns the name of the selected Edge weight cell
        array.  If you did not turn on GenerateEdgeWeightArrays, or if
        the weight you requested is invalid, it returns nullptr. Weights
        begin at one and go up to NumberOfEdgeWeights. This is a pointer
        to our copy of the name, so don't "delete" it.
        """
        ...
    
    def GetGenerateEdgeWeightArrays(self):
        """
        V.GetGenerateEdgeWeightArrays() -> int
        C++: virtual vtkTypeBool GetGenerateEdgeWeightArrays()
        """
        ...
    
    def GetGenerateGlobalElementIdArray(self):
        """
        V.GetGenerateGlobalElementIdArray() -> int
        C++: virtual vtkTypeBool GetGenerateGlobalElementIdArray()
        """
        ...
    
    def GetGenerateGlobalNodeIdArray(self):
        """
        V.GetGenerateGlobalNodeIdArray() -> int
        C++: virtual vtkTypeBool GetGenerateGlobalNodeIdArray()
        """
        ...
    
    def GetGenerateVertexWeightArrays(self):
        """
        V.GetGenerateVertexWeightArrays() -> int
        C++: virtual vtkTypeBool GetGenerateVertexWeightArrays()
        """
        ...
    
    def GetGlobalElementIdArrayName(self):
        """
        V.GetGlobalElementIdArrayName() -> string
        C++: static const char *GetGlobalElementIdArrayName()
        """
        ...
    
    def GetGlobalNodeIdArrayName(self):
        """
        V.GetGlobalNodeIdArrayName() -> string
        C++: static const char *GetGlobalNodeIdArrayName()
        """
        ...
    
    def GetNumberOfCellWeightArrays(self):
        """
        V.GetNumberOfCellWeightArrays() -> int
        C++: virtual int GetNumberOfCellWeightArrays()
        
        After this filter executes, this method returns the number of
        cell arrays that were created to hold the edge weights.  It is
        equal to NumberOfEdgeWeights if GenerateEdgeWeightArrays was ON.
        """
        ...
    
    def GetNumberOfEdges(self):
        """
        V.GetNumberOfEdges() -> int
        C++: virtual vtkIdType GetNumberOfEdges()
        
        Access to meta data generated by RequestInformation.
        """
        ...
    
    def GetNumberOfEdgeWeights(self):
        """
        V.GetNumberOfEdgeWeights() -> int
        C++: virtual int GetNumberOfEdgeWeights()
        
        Returns the number of weights per edge in the Chaco file, whether
        or not GenerateEdgeWeightArrays is ON.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointWeightArrays(self):
        """
        V.GetNumberOfPointWeightArrays() -> int
        C++: virtual int GetNumberOfPointWeightArrays()
        
        After this filter executes, this method returns the number of
        point arrays that were created to hold the vertex weights.  It is
        equal to NumberOfVertexWeights if GenerateVertexWeightArrays was
        ON.
        """
        ...
    
    def GetNumberOfVertexWeights(self):
        """
        V.GetNumberOfVertexWeights() -> int
        C++: virtual int GetNumberOfVertexWeights()
        
        Returns the number of weights per vertex in the Chaco file,
        whether or not GenerateVertexWeightArrays is ON.
        """
        ...
    
    def GetNumberOfVertices(self):
        """
        V.GetNumberOfVertices() -> int
        C++: virtual vtkIdType GetNumberOfVertices()
        
        Access to meta data generated by RequestInformation.
        """
        ...
    
    def GetVertexWeightArrayName(self, p_int):
        """
        V.GetVertexWeightArrayName(int) -> string
        C++: const char *GetVertexWeightArrayName(int weight)
        
        This method returns the name of the selected Vertex weight point
        array.  If you did not turn on GenerateVertexWeightArrays, or if
        the weight you requested is invalid, it returns nullptr. Weights
        begin at one and go up to NumberOfVertexWeights. This is a
        pointer to our copy of the name, so don't "delete" it.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkChacoReader
        C++: vtkChacoReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkChacoReader
        C++: static vtkChacoReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBaseName(self, string):
        """
        V.SetBaseName(string)
        C++: virtual void SetBaseName(const char *_arg)
        
        Specify the base name of the Chaco files.  The reader will try to
        open BaseName.coords and BaseName.graph.
        """
        ...
    
    def SetGenerateEdgeWeightArrays(self, p_int):
        """
        V.SetGenerateEdgeWeightArrays(int)
        C++: virtual void SetGenerateEdgeWeightArrays(vtkTypeBool _arg)
        
        Each edge in the Chaco file connects two vertices.  The file may
        specify one or more weights for each edge.  (The weight for an
        edge from vertex A to vertex B equals the weight from B to A.)
        Indicate with the following parameter whether this reader should
        create a cell array for each weight for every edge. Default is
        OFF.
        """
        ...
    
    def SetGenerateGlobalElementIdArray(self, p_int):
        """
        V.SetGenerateGlobalElementIdArray(int)
        C++: virtual void SetGenerateGlobalElementIdArray(
            vtkTypeBool _arg)
        
        Indicate whether this reader should create a cell array
        containing global IDs for the cells in the output
        vtkUnstructuredGrid.  These cells represent the edges that were
        in the Chaco file.  Each edge is a vtkLine. Default is ON.
        """
        ...
    
    def SetGenerateGlobalNodeIdArray(self, p_int):
        """
        V.SetGenerateGlobalNodeIdArray(int)
        C++: virtual void SetGenerateGlobalNodeIdArray(vtkTypeBool _arg)
        
        Indicate whether this reader should create a point array of
        global IDs for the points in the output vtkUnstructuredGrid. 
        These points are the vertices that were in the Chaco file. 
        Global point IDs start at "1" for the first vertex in
        BaseName.coords and go up from there. Default is ON.
        """
        ...
    
    def SetGenerateVertexWeightArrays(self, p_int):
        """
        V.SetGenerateVertexWeightArrays(int)
        C++: virtual void SetGenerateVertexWeightArrays(vtkTypeBool _arg)
        
        Indicate whether this reader should create a point array for each
        vertex weight in the Chaco file. Default is OFF.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFacetWriter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkFacetWriter - reads a dataset in Facet format
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkFacetWriter creates an unstructured grid dataset. It reads ASCII
    files stored in Facet format
    
    The facet format looks like this: FACET FILE ... nparts Part 1 name 0
    npoints 0 0 p1x p1y p1z p2x p2y p2z ... 1 Part 1 name ncells
    npointspercell p1c1 p2c1 p3c1 ... pnc1 materialnum partnum p1c2 p2c2
    p3c2 ... pnc2 materialnum partnum ...
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of Facet datafile to read
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFacetWriter
        C++: vtkFacetWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFacetWriter
        C++: static vtkFacetWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of Facet datafile to read
        """
        ...
    
    def Write(self):
        """
        V.Write()
        C++: void Write()
        
        Write data
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFLUENTReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkFLUENTReader - reads a dataset in Fluent file format
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkFLUENTReader creates an unstructured grid dataset. It reads .cas
    and .dat files stored in FLUENT native format.
    
    @par Thanks: Thanks to Brian W. Dotson & Terry E. Jordan (Department
    of Energy, National Energy Technology Laboratory) & Douglas McCorkle
    (Iowa State University) who developed this class. Please address all
    comments to Brian Dotson (brian.dotson
    
    etl.doe.gov) & Terry Jordan (terry.jordan@sa.netl.doe.gov) & Doug
    McCorkle (mccdo@iastate.edu)
    
    @sa
    vtkGAMBITReader
    """
    def DisableAllCellArrays(self):
        """
        V.DisableAllCellArrays()
        C++: void DisableAllCellArrays()
        
        Turn on/off all cell arrays.
        """
        ...
    
    def EnableAllCellArrays(self):
        """
        V.EnableAllCellArrays()
        C++: void EnableAllCellArrays()
        
        Turn on/off all cell arrays.
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        
        Get the name of the cell array with the given index in the input.
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        
        Get/Set whether the cell array with the given name is to be read.
        """
        ...
    
    def GetDataByteOrder(self):
        """
        V.GetDataByteOrder() -> int
        C++: int GetDataByteOrder()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def GetDataByteOrderAsString(self):
        """
        V.GetDataByteOrderAsString() -> string
        C++: const char *GetDataByteOrderAsString()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the file name of the Fluent case file to read.
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays(void)
        
        Get the number of cell arrays available in the input.
        """
        ...
    
    def GetNumberOfCells(self):
        """
        V.GetNumberOfCells() -> int
        C++: virtual vtkIdType GetNumberOfCells()
        
        Get the total number of cells. The number of cells is only valid
        after a successful read of the data file is performed. Initial
        value is 0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFLUENTReader
        C++: vtkFLUENTReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFLUENTReader
        C++: static vtkFLUENTReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        
        Get/Set whether the cell array with the given name is to be read.
        """
        ...
    
    def SetDataByteOrder(self, p_int):
        """
        V.SetDataByteOrder(int)
        C++: void SetDataByteOrder(int)
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def SetDataByteOrderToBigEndian(self):
        """
        V.SetDataByteOrderToBigEndian()
        C++: void SetDataByteOrderToBigEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def SetDataByteOrderToLittleEndian(self):
        """
        V.SetDataByteOrderToLittleEndian()
        C++: void SetDataByteOrderToLittleEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the file name of the Fluent case file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGAMBITReader(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkGAMBITReader - reads a dataset in Fluent GAMBIT neutral file format
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkGAMBITReader creates an unstructured grid dataset. It reads ASCII
    files stored in GAMBIT neutral format, with optional data stored at
    the nodes or at the cells of the model. A cell-based fielddata stores
    the material id.
    
    @par Thanks: Thanks to Jean M. Favre (CSCS, Swiss Center for
    Scientific Computing) who developed this class. Please address all
    comments to Jean Favre (jfavre at cscs.ch)
    
    @sa
    vtkAVSucdReader
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the file name of the GAMBIT data file to read.
        """
        ...
    
    def GetNumberOfCellFields(self):
        """
        V.GetNumberOfCellFields() -> int
        C++: virtual int GetNumberOfCellFields()
        
        Get the number of data components at the nodes and cells.
        """
        ...
    
    def GetNumberOfCells(self):
        """
        V.GetNumberOfCells() -> int
        C++: virtual int GetNumberOfCells()
        
        Get the total number of cells. The number of cells is only valid
        after a successful read of the data file is performed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfNodeFields(self):
        """
        V.GetNumberOfNodeFields() -> int
        C++: virtual int GetNumberOfNodeFields()
        
        Get the number of data components at the nodes and cells.
        """
        ...
    
    def GetNumberOfNodes(self):
        """
        V.GetNumberOfNodes() -> int
        C++: virtual int GetNumberOfNodes()
        
        Get the total number of nodes. The number of nodes is only valid
        after a successful read of the data file is performed.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGAMBITReader
        C++: vtkGAMBITReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGAMBITReader
        C++: static vtkGAMBITReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the file name of the GAMBIT data file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMoleculeReaderBase(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkMoleculeReaderBase - read Molecular Data files
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkMoleculeReaderBase is a source object that reads Molecule files
    The FileName must be specified
    
    @par Thanks: Dr. Jean M. Favre who developed and contributed this
    class
    """
    def GetBScale(self):
        """
        V.GetBScale() -> float
        C++: virtual double GetBScale()
        
        A scaling factor to compute bonds between non-hydrogen atoms
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetHBScale(self):
        """
        V.GetHBScale() -> float
        C++: virtual double GetHBScale()
        
        A scaling factor to compute bonds with hydrogen atoms.
        """
        ...
    
    def GetNumberOfAtoms(self):
        """
        V.GetNumberOfAtoms() -> int
        C++: virtual int GetNumberOfAtoms()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMoleculeReaderBase
        C++: vtkMoleculeReaderBase *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMoleculeReaderBase
        C++: static vtkMoleculeReaderBase *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBScale(self, p_float):
        """
        V.SetBScale(float)
        C++: virtual void SetBScale(double _arg)
        
        A scaling factor to compute bonds between non-hydrogen atoms
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        """
        ...
    
    def SetHBScale(self, p_float):
        """
        V.SetHBScale(float)
        C++: virtual void SetHBScale(double _arg)
        
        A scaling factor to compute bonds with hydrogen atoms.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGaussianCubeReader(vtkMoleculeReaderBase):
    """
    vtkGaussianCubeReader - read ASCII Gaussian Cube Data files
    
    Superclass: vtkMoleculeReaderBase
    
    vtkGaussianCubeReader is a source object that reads ASCII files
    following the description in http://www.gaussian.com/00000430.htm The
    FileName must be specified.
    
    @par Thanks: Dr. Jean M. Favre who developed and contributed this
    class.
    """
    def GetGridOutput(self):
        """
        V.GetGridOutput() -> vtkImageData
        C++: vtkImageData *GetGridOutput()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform
        C++: virtual vtkTransform *GetTransform()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGaussianCubeReader
        C++: vtkGaussianCubeReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGaussianCubeReader
        C++: static vtkGaussianCubeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGLTFDocumentLoader(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGLTFDocumentLoader - Deserialize a GLTF model file.
    
    Superclass: vtkObject
    
    vtkGLTFDocument loader is an internal utility class which defines
    data structures and functions with the purpose of deserializing a
    glTF model from a glTF file, loading its data from binary buffers and
    creating vtk objects with the extracted geometry. It contains an
    internal Model structure into which all loading is performed.
    
    The GL Transmission Format (glTF) is an API-neutral runtime asset
    delivery format. A glTF asset is represented by:
    - A JSON-formatted file (.gltf) containing a full scene description:
      node hierarchy, materials, cameras, as well as descriptor
      information for meshes, animations, and other constructs
    - Binary files (.bin) containing geometry and animation data, and
      other buffer-based data
    - Image files (.jpg, .png) for textures
    
    For the full specification, see:
    https://github.com/KhronosGroup/glTF/tree/master/specification/2.0
    """
    def ApplyAnimation(self, p_float, p_int, bool):
        """
        V.ApplyAnimation(float, int, bool) -> bool
        C++: bool ApplyAnimation(float t, int animationId,
            bool forceStep=false)
        
        Apply the specified animation, at the specified time, to the
        internal Model. Changes node transforms and morphing weights.
        """
        ...
    
    def BuildModelVTKGeometry(self):
        """
        V.BuildModelVTKGeometry() -> bool
        C++: bool BuildModelVTKGeometry()
        
        Converts the internal Model's loaded data into more convenient
        vtk objects.
        """
        ...
    
    def GetNumberOfComponentsForType(self, vtkGLTFDocumentLoader_AccessorType):
        """
        V.GetNumberOfComponentsForType(vtkGLTFDocumentLoader.AccessorType)
             -> int
        C++: static unsigned int GetNumberOfComponentsForType(
            vtkGLTFDocumentLoader::AccessorType type)
        
        Returns the number of components for a given accessor type.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSupportedExtensions(self):
        """
        V.GetSupportedExtensions() -> Stvector_ISt6stringE
        C++: const std::vector<std::string> &GetSupportedExtensions()
        
        Get the list of extensions that are supported by this loader
        """
        ...
    
    def GetUsedExtensions(self):
        """
        V.GetUsedExtensions() -> Stvector_ISt6stringE
        C++: const std::vector<std::string> &GetUsedExtensions()
        
        Get the list of extensions that are used by the current model
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LoadModelMetaDataFromFile(self, string):
        """
        V.LoadModelMetaDataFromFile(string) -> bool
        C++: bool LoadModelMetaDataFromFile(std::string FileName)
        
        Reset internal Model struct, and serialize glTF metadata (all
        json information) into it. To load buffers, use LoadModelData
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGLTFDocumentLoader
        C++: vtkGLTFDocumentLoader *NewInstance()
        """
        ...
    
    def ResetAnimation(self, p_int):
        """
        V.ResetAnimation(int)
        C++: void ResetAnimation(int animationId)
        
        Restore the transforms that were modified by an animation to
        their initial state
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGLTFDocumentLoader
        C++: static vtkGLTFDocumentLoader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AccessorType = ...
    ComponentType = ...
    Target = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGLTFReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkGLTFReader - Read a GLTF file.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkGLTFReader is a concrete subclass of vtkMultiBlockDataSetAlgorithm
    that reads glTF 2.0 files.
    
    The GL Transmission Format (glTF) is an API-neutral runtime asset
    delivery format. A glTF asset is represented by:
    - A JSON-formatted file (.gltf) containing a full scene description:
      node hierarchy, materials, cameras, as well as descriptor
      information for meshes, animations, and other constructs
    - Binary files (.bin) containing geometry and animation data, and
      other buffer-based data
    - Image files (.jpg, .png) for textures
    
    This reader currently outputs a vtkMultiBlockDataSet containing
    geometry information for the current selected scene, with animations,
    skins and morph targets applied, unless configured not to (see
    ApplyDeformationsToGeometry).
    
    It is possible to get information about available scenes and
    animations by using the corresponding accessors. To use animations,
    first call SetFramerate with a non-zero value, then use
    EnableAnimation or DisableAnimation to configure which animations you
    would like to apply to the geometry. Finally, use UPDATE_TIME_STEPS
    to choose which frame to apply. If ApplyDeformationsToGeometry is set
    to true, the reader will apply the deformations, otherwise, animation
    transformation information will be saved to the dataset's FieldData.
    
    Materials are currently not supported in this reader. If you would
    like to display materials, please try using vtkGLTFImporter. You
    could also use vtkGLTFReader::GetGLTFTexture, to access the image
    data that was loaded from the glTF 2.0 document.
    
    This reader only supports assets that use the 2.x version of the glTF
    specification.
    
    For the full glTF specification, see:
    https://github.com/KhronosGroup/glTF/tree/master/specification/2.0
    
    Note: array sizes should not exceed INT_MAX
    
    @sa
    vtkMultiBlockDataSetAlgorithm vtkGLTFImporter
    """
    def ApplyDeformationsToGeometryOff(self):
        """
        V.ApplyDeformationsToGeometryOff()
        C++: virtual void ApplyDeformationsToGeometryOff()
        
        The model's skinning transforms are computed and added to the different vtkPolyData
        objects' field data. If this flag is set to true, the reader will
        apply those skinning transforms to the model's geometry.
        """
        ...
    
    def ApplyDeformationsToGeometryOn(self):
        """
        V.ApplyDeformationsToGeometryOn()
        C++: virtual void ApplyDeformationsToGeometryOn()
        
        The model's skinning transforms are computed and added to the different vtkPolyData
        objects' field data. If this flag is set to true, the reader will
        apply those skinning transforms to the model's geometry.
        """
        ...
    
    def DisableAnimation(self, p_int):
        """
        V.DisableAnimation(int)
        C++: void DisableAnimation(vtkIdType animationIndex)
        
        Enable/Disable an animation. The reader will apply all enabled
        animations to the model's transformations, at the specified time
        step. Use UPDATE_TIME_STEP to select which frame should be
        applied.
        """
        ...
    
    def EnableAnimation(self, p_int):
        """
        V.EnableAnimation(int)
        C++: void EnableAnimation(vtkIdType animationIndex)
        
        Enable/Disable an animation. The reader will apply all enabled
        animations to the model's transformations, at the specified time
        step. Use UPDATE_TIME_STEP to select which frame should be
        applied.
        """
        ...
    
    def GetAllSceneNames(self):
        """
        V.GetAllSceneNames() -> vtkStringArray
        C++: vtkStringArray *GetAllSceneNames()
        
        Get a list all scenes names as a vtkStringArray, with duplicate
        names numbered and empty names replaced by a generic name. All
        names are guaranteed to be unique, and their index in the array
        matches the glTF document's scene indices.
        """
        ...
    
    def GetAnimationDuration(self, p_int):
        """
        V.GetAnimationDuration(int) -> float
        C++: float GetAnimationDuration(vtkIdType animationIndex)
        
        glTF models can contain multiple animations, with various names
        and duration. glTF does not specify however any runtime behavior
        (order of playing, auto-start, loops, mapping of timelines, etc),
        which is why no animation is enabled by default. These accessors
        expose metadata information about a model's available animations.
        """
        ...
    
    def GetAnimationName(self, p_int):
        """
        V.GetAnimationName(int) -> string
        C++: std::string GetAnimationName(vtkIdType animationIndex)
        
        glTF models can contain multiple animations, with various names
        and duration. glTF does not specify however any runtime behavior
        (order of playing, auto-start, loops, mapping of timelines, etc),
        which is why no animation is enabled by default. These accessors
        expose metadata information about a model's available animations.
        """
        ...
    
    def GetAnimationSelection(self):
        """
        V.GetAnimationSelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetAnimationSelection()
        
        Get the vtkDataArraySelection object to enable/disable
        animations.
        """
        ...
    
    def GetApplyDeformationsToGeometry(self):
        """
        V.GetApplyDeformationsToGeometry() -> bool
        C++: virtual bool GetApplyDeformationsToGeometry()
        
        The model's skinning transforms are computed and added to the different vtkPolyData
        objects' field data. If this flag is set to true, the reader will
        apply those skinning transforms to the model's geometry.
        """
        ...
    
    def GetCurrentScene(self):
        """
        V.GetCurrentScene() -> int
        C++: virtual vtkIdType GetCurrentScene()
        
        Get/Set the scene to be used by the reader
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/Get the name of the file from which to read points.
        """
        ...
    
    def GetFrameRate(self):
        """
        V.GetFrameRate() -> int
        C++: virtual unsigned int GetFrameRate()
        
        Get/Set the rate at which animations will be sampled: the glTF
        format does not have the concept of static timesteps. TimeSteps
        are generated, during the REQUEST_INFORMATION pass, as linearly
        interpolated time values between 0s and the animations' maximum
        durations, sampled at the specified frame rate. Use the
        TIME_STEPS information key to obtain integer indices to each of
        these steps.
        """
        ...
    
    def GetNumberOfAnimations(self):
        """
        V.GetNumberOfAnimations() -> int
        C++: virtual vtkIdType GetNumberOfAnimations()
        
        glTF models can contain multiple animations, with various names
        and duration. glTF does not specify however any runtime behavior
        (order of playing, auto-start, loops, mapping of timelines, etc),
        which is why no animation is enabled by default. These accessors
        expose metadata information about a model's available animations.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfScenes(self):
        """
        V.GetNumberOfScenes() -> int
        C++: virtual vtkIdType GetNumberOfScenes()
        
        glTF models can contain multiple scene descriptions. These
        accessors expose metadata information about a model's available
        scenes.
        """
        ...
    
    def GetNumberOfTextures(self):
        """
        V.GetNumberOfTextures() -> int
        C++: vtkIdType GetNumberOfTextures()
        """
        ...
    
    def GetSceneName(self, p_int):
        """
        V.GetSceneName(int) -> string
        C++: std::string GetSceneName(vtkIdType sceneIndex)
        
        glTF models can contain multiple scene descriptions. These
        accessors expose metadata information about a model's available
        scenes.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsAnimationEnabled(self, p_int):
        """
        V.IsAnimationEnabled(int) -> bool
        C++: bool IsAnimationEnabled(vtkIdType animationIndex)
        
        Enable/Disable an animation. The reader will apply all enabled
        animations to the model's transformations, at the specified time
        step. Use UPDATE_TIME_STEP to select which frame should be
        applied.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGLTFReader
        C++: vtkGLTFReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGLTFReader
        C++: static vtkGLTFReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetApplyDeformationsToGeometry(self, bool):
        """
        V.SetApplyDeformationsToGeometry(bool)
        C++: void SetApplyDeformationsToGeometry(bool flag)
        
        The model's skinning transforms are computed and added to the different vtkPolyData
        objects' field data. If this flag is set to true, the reader will
        apply those skinning transforms to the model's geometry.
        """
        ...
    
    def SetCurrentScene(self, p_int):
        """
        V.SetCurrentScene(int)
        C++: virtual void SetCurrentScene(vtkIdType _arg)
        
        Get/Set the scene to be used by the reader
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/Get the name of the file from which to read points.
        """
        ...
    
    def SetFrameRate(self, p_int):
        """
        V.SetFrameRate(int)
        C++: virtual void SetFrameRate(unsigned int _arg)
        
        Get/Set the rate at which animations will be sampled: the glTF
        format does not have the concept of static timesteps. TimeSteps
        are generated, during the REQUEST_INFORMATION pass, as linearly
        interpolated time values between 0s and the animations' maximum
        durations, sampled at the specified frame rate. Use the
        TIME_STEPS information key to obtain integer indices to each of
        these steps.
        """
        ...
    
    def SetScene(self, string):
        """
        V.SetScene(string)
        C++: void SetScene(const std::string &scene)
        
        Get/Set the scene to be used by the reader
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHoudiniPolyDataWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkHoudiniPolyDataWriter - write vtk polygonal data to Houdini file.
    
    Superclass: vtkWriter
    
    vtkHoudiniPolyDataWriter is a source object that writes VTK polygonal
    data files in ASCII Houdini format (see
    http://www.sidefx.com/docs/houdini15.0/io/formats/geo).
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specifies the delimited text file to be loaded.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHoudiniPolyDataWriter
        C++: vtkHoudiniPolyDataWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHoudiniPolyDataWriter
        C++: static vtkHoudiniPolyDataWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specifies the delimited text file to be loaded.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkIVWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkIVWriter - export polydata into OpenInventor 2.0 format.
    
    Superclass: vtkWriter
    
    vtkIVWriter is a concrete subclass of vtkWriter that writes
    OpenInventor 2.0 files.
    
    @sa
    vtkPolyDataWriter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        V.GetInput(int) -> vtkPolyData
        C++: vtkPolyData *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkIVWriter
        C++: vtkIVWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkIVWriter
        C++: static vtkIVWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMCubesReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkMCubesReader - read binary marching cubes file
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkMCubesReader is a source object that reads binary marching cubes
    files. (Marching cubes is an isosurfacing technique that generates
    many triangles.) The binary format is supported by W. Lorensen's
    marching cubes program (and the vtkSliceCubes object). The format
    repeats point coordinates, so this object will merge the points with
    a vtkLocator object. You can choose to supply the vtkLocator or use
    the default.
    
    @warning
    Binary files assumed written in sun/hp/sgi (i.e., Big Endian) form.
    
    @warning
    Because points are merged when read, degenerate triangles may be
    removed. Thus the number of triangles read may be fewer than the
    number of triangles actually created.
    
    @warning
    The point merging does not take into account that the same point may
    have different normals. For example, running vtkPolyDataNormals after
    vtkContourFilter may split triangles because of the FeatureAngle
    ivar. Subsequent reading with vtkMCubesReader will merge the points
    and use the first point's normal. For the most part, this is
    undesirable.
    
    @warning
    Normals are generated from the gradient of the data scalar values.
    Hence the normals may on occasion point in a direction inconsistent
    with the ordering of the triangle vertices. If this happens, the
    resulting surface may be "black".  Reverse the sense of the
    FlipNormals boolean flag to correct this.
    
    @sa
    vtkContourFilter vtkMarchingCubes vtkSliceCubes vtkLocator
    """
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified.
        """
        ...
    
    def FlipNormalsOff(self):
        """
        V.FlipNormalsOff()
        C++: virtual void FlipNormalsOff()
        
        Specify whether to flip normals in opposite direction. Flipping
        ONLY changes the direction of the normal vector. Contrast this
        with flipping in vtkPolyDataNormals which flips both the normal
        and the cell point order.
        """
        ...
    
    def FlipNormalsOn(self):
        """
        V.FlipNormalsOn()
        C++: virtual void FlipNormalsOn()
        
        Specify whether to flip normals in opposite direction. Flipping
        ONLY changes the direction of the normal vector. Contrast this
        with flipping in vtkPolyDataNormals which flips both the normal
        and the cell point order.
        """
        ...
    
    def GetDataByteOrder(self):
        """
        V.GetDataByteOrder() -> int
        C++: int GetDataByteOrder()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def GetDataByteOrderAsString(self):
        """
        V.GetDataByteOrderAsString() -> string
        C++: const char *GetDataByteOrderAsString()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of marching cubes file.
        """
        ...
    
    def GetFlipNormals(self):
        """
        V.GetFlipNormals() -> int
        C++: virtual vtkTypeBool GetFlipNormals()
        
        Specify whether to flip normals in opposite direction. Flipping
        ONLY changes the direction of the normal vector. Contrast this
        with flipping in vtkPolyDataNormals which flips both the normal
        and the cell point order.
        """
        ...
    
    def GetHeaderSize(self):
        """
        V.GetHeaderSize() -> int
        C++: virtual int GetHeaderSize()
        
        Specify a header size if one exists. The header is skipped and
        not used at this time.
        """
        ...
    
    def GetHeaderSizeMaxValue(self):
        """
        V.GetHeaderSizeMaxValue() -> int
        C++: virtual int GetHeaderSizeMaxValue()
        
        Specify a header size if one exists. The header is skipped and
        not used at this time.
        """
        ...
    
    def GetHeaderSizeMinValue(self):
        """
        V.GetHeaderSizeMinValue() -> int
        C++: virtual int GetHeaderSizeMinValue()
        
        Specify a header size if one exists. The header is skipped and
        not used at this time.
        """
        ...
    
    def GetLimitsFileName(self):
        """
        V.GetLimitsFileName() -> string
        C++: virtual char *GetLimitsFileName()
        
        Set / get the file name of the marching cubes limits file.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Set / get a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the mtime also considering the locator.
        """
        ...
    
    def GetNormals(self):
        """
        V.GetNormals() -> int
        C++: virtual vtkTypeBool GetNormals()
        
        Specify whether to read normals.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSwapBytes(self):
        """
        V.GetSwapBytes() -> int
        C++: virtual vtkTypeBool GetSwapBytes()
        
        Turn on/off byte swapping.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMCubesReader
        C++: vtkMCubesReader *NewInstance()
        """
        ...
    
    def NormalsOff(self):
        """
        V.NormalsOff()
        C++: virtual void NormalsOff()
        
        Specify whether to read normals.
        """
        ...
    
    def NormalsOn(self):
        """
        V.NormalsOn()
        C++: virtual void NormalsOn()
        
        Specify whether to read normals.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMCubesReader
        C++: static vtkMCubesReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDataByteOrder(self, p_int):
        """
        V.SetDataByteOrder(int)
        C++: void SetDataByteOrder(int)
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def SetDataByteOrderToBigEndian(self):
        """
        V.SetDataByteOrderToBigEndian()
        C++: void SetDataByteOrderToBigEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def SetDataByteOrderToLittleEndian(self):
        """
        V.SetDataByteOrderToLittleEndian()
        C++: void SetDataByteOrderToLittleEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of marching cubes file.
        """
        ...
    
    def SetFlipNormals(self, p_int):
        """
        V.SetFlipNormals(int)
        C++: virtual void SetFlipNormals(vtkTypeBool _arg)
        
        Specify whether to flip normals in opposite direction. Flipping
        ONLY changes the direction of the normal vector. Contrast this
        with flipping in vtkPolyDataNormals which flips both the normal
        and the cell point order.
        """
        ...
    
    def SetHeaderSize(self, p_int):
        """
        V.SetHeaderSize(int)
        C++: virtual void SetHeaderSize(int _arg)
        
        Specify a header size if one exists. The header is skipped and
        not used at this time.
        """
        ...
    
    def SetLimitsFileName(self, string):
        """
        V.SetLimitsFileName(string)
        C++: virtual void SetLimitsFileName(const char *_arg)
        
        Set / get the file name of the marching cubes limits file.
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *locator)
        
        Set / get a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetNormals(self, p_int):
        """
        V.SetNormals(int)
        C++: virtual void SetNormals(vtkTypeBool _arg)
        
        Specify whether to read normals.
        """
        ...
    
    def SetSwapBytes(self, p_int):
        """
        V.SetSwapBytes(int)
        C++: virtual void SetSwapBytes(vtkTypeBool _arg)
        
        Turn on/off byte swapping.
        """
        ...
    
    def SwapBytesOff(self):
        """
        V.SwapBytesOff()
        C++: virtual void SwapBytesOff()
        
        Turn on/off byte swapping.
        """
        ...
    
    def SwapBytesOn(self):
        """
        V.SwapBytesOn()
        C++: virtual void SwapBytesOn()
        
        Turn on/off byte swapping.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMCubesWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkMCubesWriter - write binary marching cubes file
    
    Superclass: vtkWriter
    
    vtkMCubesWriter is a polydata writer that writes binary marching
    cubes files. (Marching cubes is an isosurfacing technique that
    generates many triangles.) The binary format is supported by W.
    Lorensen's marching cubes program (and the vtkSliceCubes object).
    Each triangle is represented by three records, with each record
    consisting of six single precision floating point numbers
    representing the a triangle vertex coordinate and vertex normal.
    
    @warning
    Binary files are written in sun/hp/sgi (i.e., Big Endian) form.
    
    @sa
    vtkMarchingCubes vtkSliceCubes vtkMCubesReader
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        V.GetInput(int) -> vtkPolyData
        C++: vtkPolyData *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetLimitsFileName(self):
        """
        V.GetLimitsFileName() -> string
        C++: virtual char *GetLimitsFileName()
        
        Set/get file name of marching cubes limits file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMCubesWriter
        C++: vtkMCubesWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMCubesWriter
        C++: static vtkMCubesWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def SetLimitsFileName(self, string):
        """
        V.SetLimitsFileName(string)
        C++: virtual void SetLimitsFileName(const char *_arg)
        
        Set/get file name of marching cubes limits file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMFIXReader(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkMFIXReader - reads a dataset in MFIX file format
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkMFIXReader creates an unstructured grid dataset. It reads a
    restart file and a set of sp files.  The restart file contains the
    mesh information.  MFIX meshes are either cylindrical or rectilinear,
    but this reader will convert them to an unstructured grid.  The sp
    files contain transient data for the cells.  Each sp file has one or
    more variables stored inside it.
    
    @par Thanks: Thanks to Phil Nicoletti and Brian Dotson at the
    National Energy Technology Laboratory who developed this class.
    Please address all comments to Brian Dotson (brian.dotson
    
    etl.doe.gov)
    
    @sa
    vtkGAMBITReader
    """
    def DisableAllCellArrays(self):
        """
        V.DisableAllCellArrays()
        C++: void DisableAllCellArrays()
        
        Turn on/off all cell arrays.
        """
        ...
    
    def EnableAllCellArrays(self):
        """
        V.EnableAllCellArrays()
        C++: void EnableAllCellArrays()
        
        Turn on/off all cell arrays.
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        
        Get the name of the cell array with the given index in the input.
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        
        Get/Set whether the cell array with the given name is to be read.
        """
        ...
    
    def GetCellDataRange(self, p_int, *float, **kwargs):
        """
        V.GetCellDataRange(int, [float, ...], [float, ...])
        C++: void GetCellDataRange(int cellComp, float *min, float *max)
        
        Get the range of cell data.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the file name of the MFIX Restart data file to read.
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays(void)
        
        Get the number of cell arrays available in the input.
        """
        ...
    
    def GetNumberOfCellFields(self):
        """
        V.GetNumberOfCellFields() -> int
        C++: virtual int GetNumberOfCellFields()
        
        Get the number of data components at the nodes and cells.
        """
        ...
    
    def GetNumberOfCells(self):
        """
        V.GetNumberOfCells() -> int
        C++: virtual int GetNumberOfCells()
        
        Get the total number of cells. The number of cells is only valid
        after a successful read of the data file is performed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: virtual int GetNumberOfPoints()
        
        Get the total number of nodes. The number of nodes is only valid
        after a successful read of the data file is performed.
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: virtual int GetNumberOfTimeSteps()
        
        Returns the number of timesteps.
        """
        ...
    
    def GetTimeStep(self):
        """
        V.GetTimeStep() -> int
        C++: virtual int GetTimeStep()
        
        Which TimeStep to read.
        """
        ...
    
    def GetTimeStepRange(self):
        """
        V.GetTimeStepRange() -> (int, int)
        C++: virtual int *GetTimeStepRange()
        
        Which TimeStepRange to read
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMFIXReader
        C++: vtkMFIXReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMFIXReader
        C++: static vtkMFIXReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        
        Get/Set whether the cell array with the given name is to be read.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the file name of the MFIX Restart data file to read.
        """
        ...
    
    def SetTimeStep(self, p_int):
        """
        V.SetTimeStep(int)
        C++: virtual void SetTimeStep(int _arg)
        
        Which TimeStep to read.
        """
        ...
    
    def SetTimeStepRange(self, p_int, p_int_1):
        """
        V.SetTimeStepRange(int, int)
        C++: virtual void SetTimeStepRange(int _arg1, int _arg2)
        V.SetTimeStepRange((int, int))
        C++: void SetTimeStepRange(const int _arg[2])
        
        Which TimeStepRange to read
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOBJReader(__vtkmodules_vtkIOCore.vtkAbstractPolyDataReader):
    """
    vtkOBJReader - read Wavefront .obj files
    
    Superclass: vtkAbstractPolyDataReader
    
    vtkOBJReader is a source object that reads Wavefront .obj files. The
    output of this source object is polygonal data.
    @sa
    vtkOBJImporter
    """
    def GetComment(self):
        """
        V.GetComment() -> string
        C++: virtual char *GetComment()
        
        Get first comment in the file. Comment may be multiple lines. #
        and leading spaces are removed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOBJReader
        C++: vtkOBJReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOBJReader
        C++: static vtkOBJReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOBJWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkOBJWriter - write wavefront obj file
    
    Superclass: vtkWriter
    
    vtkOBJWriter writes wavefront obj (.obj) files in ASCII form. OBJ
    files contain the geometry including lines, triangles and polygons.
    Normals and texture coordinates on points are also written if they
    exist. One can specify a texture passing a vtkImageData on port 1. If
    a texture is set, additionals .mtl and .png files are generated.
    Those files have the same name without obj extension.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the file name of the OBJ file.
        """
        ...
    
    def GetInput(self, p_int):
        """
        V.GetInput(int) -> vtkDataSet
        C++: vtkDataSet *GetInput(int port)
        
        Get the inputs to this writer.
        """
        ...
    
    def GetInputGeometry(self):
        """
        V.GetInputGeometry() -> vtkPolyData
        C++: vtkPolyData *GetInputGeometry()
        
        Get the inputs to this writer.
        """
        ...
    
    def GetInputTexture(self):
        """
        V.GetInputTexture() -> vtkImageData
        C++: vtkImageData *GetInputTexture()
        
        Get the inputs to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOBJWriter
        C++: vtkOBJWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOBJWriter
        C++: static vtkOBJWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the file name of the OBJ file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOpenFOAMReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkOpenFOAMReader - reads a dataset in OpenFOAM format
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkOpenFOAMReader creates a multiblock dataset. It reads mesh
    information and time dependent data.  The polyMesh folders contain
    mesh information. The time folders contain transient data for the
    cells. Each folder can contain any number of data files.
    
    @par Thanks: Thanks to Terry Jordan of SAIC at the National Energy
    Technology Laboratory who developed this class. Please address all
    comments to Terry Jordan (terry.jordan@sa.netl.doe.gov). GUI Based
    selection of mesh regions and fields available in the case, minor bug
    fixes, strict memory allocation checks, minor performance
    enhancements by Philippose Rajan (sarith@rocketmail.com).
    
    Token-based FoamFile format lexer/parser,
    performance/stability/compatibility enhancements, gzipped file
    support, lagrangian field support, variable timestep support, builtin
    cell-to-point filter, pointField support, polyhedron decomposition
    support, OF 1.5 extended format support, multiregion support, old
    mesh format support, parallelization support for decomposed cases in
    conjunction with vtkPOpenFOAMReader, et. al. by Takuya Oshima of
    Niigata University, Japan (oshima@eng.niigata-u.ac.jp).
    
    Misc cleanup, bugfixes, improvements Mark Olesen (OpenCFD Ltd.)
    """
    def AddDimensionsToArrayNamesOff(self):
        """
        V.AddDimensionsToArrayNamesOff()
        C++: virtual void AddDimensionsToArrayNamesOff()
        
        Add dimensions to array names
        """
        ...
    
    def AddDimensionsToArrayNamesOn(self):
        """
        V.AddDimensionsToArrayNamesOn()
        C++: virtual void AddDimensionsToArrayNamesOn()
        
        Add dimensions to array names
        """
        ...
    
    def CacheMeshOff(self):
        """
        V.CacheMeshOff()
        C++: virtual void CacheMeshOff()
        
        Set/Get whether mesh is to be cached.
        """
        ...
    
    def CacheMeshOn(self):
        """
        V.CacheMeshOn()
        C++: virtual void CacheMeshOn()
        
        Set/Get whether mesh is to be cached.
        """
        ...
    
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *)
        
        Determine if the file can be read with this reader.
        """
        ...
    
    def CopyDataToCellZonesOff(self):
        """
        V.CopyDataToCellZonesOff()
        C++: virtual void CopyDataToCellZonesOff()
        
        If true, data of the internal mesh are copied to the cell zones.
        Default is false.
        """
        ...
    
    def CopyDataToCellZonesOn(self):
        """
        V.CopyDataToCellZonesOn()
        C++: virtual void CopyDataToCellZonesOn()
        
        If true, data of the internal mesh are copied to the cell zones.
        Default is false.
        """
        ...
    
    def CreateCellToPointOff(self):
        """
        V.CreateCellToPointOff()
        C++: virtual void CreateCellToPointOff()
        
        Set/Get whether to create cell-to-point translated data for
        cell-type data
        """
        ...
    
    def CreateCellToPointOn(self):
        """
        V.CreateCellToPointOn()
        C++: virtual void CreateCellToPointOn()
        
        Set/Get whether to create cell-to-point translated data for
        cell-type data
        """
        ...
    
    def DecomposePolyhedraOff(self):
        """
        V.DecomposePolyhedraOff()
        C++: virtual void DecomposePolyhedraOff()
        
        Set/Get whether polyhedra are to be decomposed.
        """
        ...
    
    def DecomposePolyhedraOn(self):
        """
        V.DecomposePolyhedraOn()
        C++: virtual void DecomposePolyhedraOn()
        
        Set/Get whether polyhedra are to be decomposed.
        """
        ...
    
    def DisableAllCellArrays(self):
        """
        V.DisableAllCellArrays()
        C++: void DisableAllCellArrays()
        
        Turn on/off all cell arrays.
        """
        ...
    
    def DisableAllLagrangianArrays(self):
        """
        V.DisableAllLagrangianArrays()
        C++: void DisableAllLagrangianArrays()
        
        Turn on/off all Lagrangian arrays.
        """
        ...
    
    def DisableAllPatchArrays(self):
        """
        V.DisableAllPatchArrays()
        C++: void DisableAllPatchArrays()
        
        Turn on/off all Patches including the Internal Mesh.
        """
        ...
    
    def DisableAllPointArrays(self):
        """
        V.DisableAllPointArrays()
        C++: void DisableAllPointArrays()
        
        Turn on/off all point arrays.
        """
        ...
    
    def EnableAllCellArrays(self):
        """
        V.EnableAllCellArrays()
        C++: void EnableAllCellArrays()
        """
        ...
    
    def EnableAllLagrangianArrays(self):
        """
        V.EnableAllLagrangianArrays()
        C++: void EnableAllLagrangianArrays()
        """
        ...
    
    def EnableAllPatchArrays(self):
        """
        V.EnableAllPatchArrays()
        C++: void EnableAllPatchArrays()
        """
        ...
    
    def EnableAllPointArrays(self):
        """
        V.EnableAllPointArrays()
        C++: void EnableAllPointArrays()
        """
        ...
    
    def GetAddDimensionsToArrayNames(self):
        """
        V.GetAddDimensionsToArrayNames() -> int
        C++: virtual vtkTypeBool GetAddDimensionsToArrayNames()
        
        Add dimensions to array names
        """
        ...
    
    def GetCacheMesh(self):
        """
        V.GetCacheMesh() -> int
        C++: virtual vtkTypeBool GetCacheMesh()
        
        Set/Get whether mesh is to be cached.
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        
        Get the name of the cell array with the given index in the input.
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        
        Get/Set whether the cell array with the given name is to be read.
        """
        ...
    
    def GetCopyDataToCellZones(self):
        """
        V.GetCopyDataToCellZones() -> bool
        C++: virtual bool GetCopyDataToCellZones()
        
        If true, data of the internal mesh are copied to the cell zones.
        Default is false.
        """
        ...
    
    def GetCreateCellToPoint(self):
        """
        V.GetCreateCellToPoint() -> int
        C++: virtual vtkTypeBool GetCreateCellToPoint()
        
        Set/Get whether to create cell-to-point translated data for
        cell-type data
        """
        ...
    
    def GetDecomposePolyhedra(self):
        """
        V.GetDecomposePolyhedra() -> int
        C++: virtual vtkTypeBool GetDecomposePolyhedra()
        
        Set/Get whether polyhedra are to be decomposed.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/Get the filename.
        """
        ...
    
    def GetLagrangianArrayName(self, p_int):
        """
        V.GetLagrangianArrayName(int) -> string
        C++: const char *GetLagrangianArrayName(int index)
        
        Get the name of the Lagrangian array with the given index in the
        input.
        """
        ...
    
    def GetLagrangianArrayStatus(self, string):
        """
        V.GetLagrangianArrayStatus(string) -> int
        C++: int GetLagrangianArrayStatus(const char *name)
        
        Get/Set whether the Lagrangian array with the given name is to be
        read.
        """
        ...
    
    def GetListTimeStepsByControlDict(self):
        """
        V.GetListTimeStepsByControlDict() -> int
        C++: virtual vtkTypeBool GetListTimeStepsByControlDict()
        
        Determine if time directories are to be listed according to
        controlDict
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays(void)
        
        Get the number of cell arrays available in the input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLagrangianArrays(self):
        """
        V.GetNumberOfLagrangianArrays() -> int
        C++: int GetNumberOfLagrangianArrays(void)
        
        Get the number of Lagrangian arrays available in the input.
        """
        ...
    
    def GetNumberOfPatchArrays(self):
        """
        V.GetNumberOfPatchArrays() -> int
        C++: int GetNumberOfPatchArrays(void)
        
        Get the number of Patches (including Internal Mesh) available in
        the input.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays(void)
        
        Get the number of point arrays available in the input.
        """
        ...
    
    def GetPatchArrayName(self, p_int):
        """
        V.GetPatchArrayName(int) -> string
        C++: const char *GetPatchArrayName(int index)
        
        Get the name of the Patch with the given index in the input.
        """
        ...
    
    def GetPatchArrayStatus(self, string):
        """
        V.GetPatchArrayStatus(string) -> int
        C++: int GetPatchArrayStatus(const char *name)
        
        Get/Set whether the Patch with the given name is to be read.
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        Get the name of the point array with the given index in the
        input.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        
        Get/Set whether the point array with the given name is to be
        read.
        """
        ...
    
    def GetPositionsIsIn13Format(self):
        """
        V.GetPositionsIsIn13Format() -> int
        C++: virtual vtkTypeBool GetPositionsIsIn13Format()
        
        Set/Get whether the lagrangian/positions have additional data or
        not. For historical reasons, PositionsIsIn13Format is used to
        denote that the positions only have x,y,z value and the cell of
        the enclosing cell. In OpenFOAM 1.4-2.4, positions included facei
        and stepFraction information.
        """
        ...
    
    def GetReadZones(self):
        """
        V.GetReadZones() -> int
        C++: virtual vtkTypeBool GetReadZones()
        
        Set/Get whether zones will be read.
        """
        ...
    
    def GetSkipZeroTime(self):
        """
        V.GetSkipZeroTime() -> bool
        C++: virtual bool GetSkipZeroTime()
        
        Ignore 0/ time directory, which is normally missing Lagrangian
        fields and may have many dictionary functionality that we cannot
        easily handle.
        """
        ...
    
    def GetTimeValues(self):
        """
        V.GetTimeValues() -> vtkDoubleArray
        C++: vtkDoubleArray *GetTimeValues()
        """
        ...
    
    def GetUse64BitFloats(self):
        """
        V.GetUse64BitFloats() -> bool
        C++: virtual bool GetUse64BitFloats()
        
        If true, floats are expected to be 64-bit, rather than 32. Note
        that vtkFloatArrays may still be used in the output if this is
        true. This flag is only used to ensure that binary data is
        correctly parsed.
        """
        ...
    
    def GetUse64BitLabels(self):
        """
        V.GetUse64BitLabels() -> bool
        C++: virtual bool GetUse64BitLabels()
        
        If true, labels are expected to be 64-bit, rather than 32.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def ListTimeStepsByControlDictOff(self):
        """
        V.ListTimeStepsByControlDictOff()
        C++: virtual void ListTimeStepsByControlDictOff()
        
        Determine if time directories are to be listed according to
        controlDict
        """
        ...
    
    def ListTimeStepsByControlDictOn(self):
        """
        V.ListTimeStepsByControlDictOn()
        C++: virtual void ListTimeStepsByControlDictOn()
        
        Determine if time directories are to be listed according to
        controlDict
        """
        ...
    
    def MakeInformationVector(self, vtkInformationVector, string):
        """
        V.MakeInformationVector(vtkInformationVector, string) -> int
        C++: int MakeInformationVector(vtkInformationVector *,
            const vtkStdString &)
        """
        ...
    
    def MakeMetaDataAtTimeStep(self, bool):
        """
        V.MakeMetaDataAtTimeStep(bool) -> int
        C++: int MakeMetaDataAtTimeStep(const bool)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenFOAMReader
        C++: vtkOpenFOAMReader *NewInstance()
        """
        ...
    
    def PositionsIsIn13FormatOff(self):
        """
        V.PositionsIsIn13FormatOff()
        C++: virtual void PositionsIsIn13FormatOff()
        
        Set/Get whether the lagrangian/positions have additional data or
        not. For historical reasons, PositionsIsIn13Format is used to
        denote that the positions only have x,y,z value and the cell of
        the enclosing cell. In OpenFOAM 1.4-2.4, positions included facei
        and stepFraction information.
        """
        ...
    
    def PositionsIsIn13FormatOn(self):
        """
        V.PositionsIsIn13FormatOn()
        C++: virtual void PositionsIsIn13FormatOn()
        
        Set/Get whether the lagrangian/positions have additional data or
        not. For historical reasons, PositionsIsIn13Format is used to
        denote that the positions only have x,y,z value and the cell of
        the enclosing cell. In OpenFOAM 1.4-2.4, positions included facei
        and stepFraction information.
        """
        ...
    
    def ReadZonesOff(self):
        """
        V.ReadZonesOff()
        C++: virtual void ReadZonesOff()
        
        Set/Get whether zones will be read.
        """
        ...
    
    def ReadZonesOn(self):
        """
        V.ReadZonesOn()
        C++: virtual void ReadZonesOn()
        
        Set/Get whether zones will be read.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenFOAMReader
        C++: static vtkOpenFOAMReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAddDimensionsToArrayNames(self, p_int):
        """
        V.SetAddDimensionsToArrayNames(int)
        C++: virtual void SetAddDimensionsToArrayNames(vtkTypeBool _arg)
        
        Add dimensions to array names
        """
        ...
    
    def SetCacheMesh(self, p_int):
        """
        V.SetCacheMesh(int)
        C++: virtual void SetCacheMesh(vtkTypeBool _arg)
        
        Set/Get whether mesh is to be cached.
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        """
        ...
    
    def SetCopyDataToCellZones(self, bool):
        """
        V.SetCopyDataToCellZones(bool)
        C++: virtual void SetCopyDataToCellZones(bool _arg)
        
        If true, data of the internal mesh are copied to the cell zones.
        Default is false.
        """
        ...
    
    def SetCreateCellToPoint(self, p_int):
        """
        V.SetCreateCellToPoint(int)
        C++: virtual void SetCreateCellToPoint(vtkTypeBool _arg)
        
        Set/Get whether to create cell-to-point translated data for
        cell-type data
        """
        ...
    
    def SetDecomposePolyhedra(self, p_int):
        """
        V.SetDecomposePolyhedra(int)
        C++: virtual void SetDecomposePolyhedra(vtkTypeBool _arg)
        
        Set/Get whether polyhedra are to be decomposed.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/Get the filename.
        """
        ...
    
    def SetLagrangianArrayStatus(self, string, p_int):
        """
        V.SetLagrangianArrayStatus(string, int)
        C++: void SetLagrangianArrayStatus(const char *name, int status)
        """
        ...
    
    def SetListTimeStepsByControlDict(self, p_int):
        """
        V.SetListTimeStepsByControlDict(int)
        C++: virtual void SetListTimeStepsByControlDict(vtkTypeBool _arg)
        
        Determine if time directories are to be listed according to
        controlDict
        """
        ...
    
    def SetParent(self, vtkOpenFOAMReader):
        """
        V.SetParent(vtkOpenFOAMReader)
        C++: void SetParent(vtkOpenFOAMReader *parent)
        """
        ...
    
    def SetPatchArrayStatus(self, string, p_int):
        """
        V.SetPatchArrayStatus(string, int)
        C++: void SetPatchArrayStatus(const char *name, int status)
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        """
        ...
    
    def SetPositionsIsIn13Format(self, p_int):
        """
        V.SetPositionsIsIn13Format(int)
        C++: virtual void SetPositionsIsIn13Format(vtkTypeBool _arg)
        
        Set/Get whether the lagrangian/positions have additional data or
        not. For historical reasons, PositionsIsIn13Format is used to
        denote that the positions only have x,y,z value and the cell of
        the enclosing cell. In OpenFOAM 1.4-2.4, positions included facei
        and stepFraction information.
        """
        ...
    
    def SetReadZones(self, p_int):
        """
        V.SetReadZones(int)
        C++: virtual void SetReadZones(vtkTypeBool _arg)
        
        Set/Get whether zones will be read.
        """
        ...
    
    def SetRefresh(self):
        """
        V.SetRefresh()
        C++: void SetRefresh()
        """
        ...
    
    def SetSkipZeroTime(self, bool):
        """
        V.SetSkipZeroTime(bool)
        C++: virtual void SetSkipZeroTime(bool _arg)
        
        Ignore 0/ time directory, which is normally missing Lagrangian
        fields and may have many dictionary functionality that we cannot
        easily handle.
        """
        ...
    
    def SetTimeValue(self, p_float):
        """
        V.SetTimeValue(float) -> bool
        C++: bool SetTimeValue(const double)
        """
        ...
    
    def SetUse64BitFloats(self, bool):
        """
        V.SetUse64BitFloats(bool)
        C++: virtual void SetUse64BitFloats(bool val)
        
        If true, floats are expected to be 64-bit, rather than 32. Note
        that vtkFloatArrays may still be used in the output if this is
        true. This flag is only used to ensure that binary data is
        correctly parsed.
        """
        ...
    
    def SetUse64BitLabels(self, bool):
        """
        V.SetUse64BitLabels(bool)
        C++: virtual void SetUse64BitLabels(bool val)
        
        If true, labels are expected to be 64-bit, rather than 32.
        """
        ...
    
    def SkipZeroTimeOff(self):
        """
        V.SkipZeroTimeOff()
        C++: virtual void SkipZeroTimeOff()
        
        Ignore 0/ time directory, which is normally missing Lagrangian
        fields and may have many dictionary functionality that we cannot
        easily handle.
        """
        ...
    
    def SkipZeroTimeOn(self):
        """
        V.SkipZeroTimeOn()
        C++: virtual void SkipZeroTimeOn()
        
        Ignore 0/ time directory, which is normally missing Lagrangian
        fields and may have many dictionary functionality that we cannot
        easily handle.
        """
        ...
    
    def Use64BitFloatsOff(self):
        """
        V.Use64BitFloatsOff()
        C++: virtual void Use64BitFloatsOff()
        
        If true, floats are expected to be 64-bit, rather than 32. Note
        that vtkFloatArrays may still be used in the output if this is
        true. This flag is only used to ensure that binary data is
        correctly parsed.
        """
        ...
    
    def Use64BitFloatsOn(self):
        """
        V.Use64BitFloatsOn()
        C++: virtual void Use64BitFloatsOn()
        
        If true, floats are expected to be 64-bit, rather than 32. Note
        that vtkFloatArrays may still be used in the output if this is
        true. This flag is only used to ensure that binary data is
        correctly parsed.
        """
        ...
    
    def Use64BitLabelsOff(self):
        """
        V.Use64BitLabelsOff()
        C++: virtual void Use64BitLabelsOff()
        
        If true, labels are expected to be 64-bit, rather than 32.
        """
        ...
    
    def Use64BitLabelsOn(self):
        """
        V.Use64BitLabelsOn()
        C++: virtual void Use64BitLabelsOn()
        
        If true, labels are expected to be 64-bit, rather than 32.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParticleReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkParticleReader - Read ASCII or binary particle
                               data and (optionally) one scalar
                               value associated with each particle.
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkParticleReader reads either a binary or a text file of
     particles. Each particle can have associated with it an optional
     scalar value. So the format is: x, y, z, scalar
     (all floats or doubles). The text file can consist of a comma
     delimited set of values. In most cases vtkParticleReader can
     automatically determine whether the file is text or binary.
     The data can be either float or double.
     Progress updates are provided.
     With respect to binary files, random access into the file to read
     pieces is supported.
    """
    def GetDataByteOrder(self):
        """
        V.GetDataByteOrder() -> int
        C++: int GetDataByteOrder()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def GetDataByteOrderAsString(self):
        """
        V.GetDataByteOrderAsString() -> string
        C++: const char *GetDataByteOrderAsString()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def GetDataType(self):
        """
        V.GetDataType() -> int
        C++: virtual int GetDataType()
        
        Get/Set the data type.  The options are:
        - VTK_FLOAT (default) single precision floating point.
        - VTK_DOUBLE double precision floating point.
        """
        ...
    
    def GetDataTypeMaxValue(self):
        """
        V.GetDataTypeMaxValue() -> int
        C++: virtual int GetDataTypeMaxValue()
        
        Get/Set the data type.  The options are:
        - VTK_FLOAT (default) single precision floating point.
        - VTK_DOUBLE double precision floating point.
        """
        ...
    
    def GetDataTypeMinValue(self):
        """
        V.GetDataTypeMinValue() -> int
        C++: virtual int GetDataTypeMinValue()
        
        Get/Set the data type.  The options are:
        - VTK_FLOAT (default) single precision floating point.
        - VTK_DOUBLE double precision floating point.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name.
        """
        ...
    
    def GetFileType(self):
        """
        V.GetFileType() -> int
        C++: virtual int GetFileType()
        
        Get/Set the file type.  The options are:
        - FILE_TYPE_IS_UNKNOWN (default) the class will attempt to
          determine the file type. If this fails then you should set the
          file type yourself.
        - FILE_TYPE_IS_TEXT the file type is text.
        - FILE_TYPE_IS_BINARY the file type is binary.
        """
        ...
    
    def GetFileTypeMaxValue(self):
        """
        V.GetFileTypeMaxValue() -> int
        C++: virtual int GetFileTypeMaxValue()
        
        Get/Set the file type.  The options are:
        - FILE_TYPE_IS_UNKNOWN (default) the class will attempt to
          determine the file type. If this fails then you should set the
          file type yourself.
        - FILE_TYPE_IS_TEXT the file type is text.
        - FILE_TYPE_IS_BINARY the file type is binary.
        """
        ...
    
    def GetFileTypeMinValue(self):
        """
        V.GetFileTypeMinValue() -> int
        C++: virtual int GetFileTypeMinValue()
        
        Get/Set the file type.  The options are:
        - FILE_TYPE_IS_UNKNOWN (default) the class will attempt to
          determine the file type. If this fails then you should set the
          file type yourself.
        - FILE_TYPE_IS_TEXT the file type is text.
        - FILE_TYPE_IS_BINARY the file type is binary.
        """
        ...
    
    def GetHasScalar(self):
        """
        V.GetHasScalar() -> int
        C++: virtual vtkTypeBool GetHasScalar()
        
        Default: 1. If 1 then each particle has a value associated with
        it.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSwapBytes(self):
        """
        V.GetSwapBytes() -> int
        C++: vtkTypeBool GetSwapBytes()
        
        Set/Get the byte swapping to explicitly swap the bytes of a file.
        Not used when reading text files.
        """
        ...
    
    def HasScalarOff(self):
        """
        V.HasScalarOff()
        C++: virtual void HasScalarOff()
        
        Default: 1. If 1 then each particle has a value associated with
        it.
        """
        ...
    
    def HasScalarOn(self):
        """
        V.HasScalarOn()
        C++: virtual void HasScalarOn()
        
        Default: 1. If 1 then each particle has a value associated with
        it.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParticleReader
        C++: vtkParticleReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParticleReader
        C++: static vtkParticleReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDataByteOrder(self, p_int):
        """
        V.SetDataByteOrder(int)
        C++: void SetDataByteOrder(int)
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def SetDataByteOrderToBigEndian(self):
        """
        V.SetDataByteOrderToBigEndian()
        C++: void SetDataByteOrderToBigEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def SetDataByteOrderToLittleEndian(self):
        """
        V.SetDataByteOrderToLittleEndian()
        C++: void SetDataByteOrderToLittleEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian. Not used when reading text files.
        """
        ...
    
    def SetDataType(self, p_int):
        """
        V.SetDataType(int)
        C++: virtual void SetDataType(int _arg)
        
        Get/Set the data type.  The options are:
        - VTK_FLOAT (default) single precision floating point.
        - VTK_DOUBLE double precision floating point.
        """
        ...
    
    def SetDataTypeToDouble(self):
        """
        V.SetDataTypeToDouble()
        C++: void SetDataTypeToDouble()
        
        Get/Set the data type.  The options are:
        - VTK_FLOAT (default) single precision floating point.
        - VTK_DOUBLE double precision floating point.
        """
        ...
    
    def SetDataTypeToFloat(self):
        """
        V.SetDataTypeToFloat()
        C++: void SetDataTypeToFloat()
        
        Get/Set the data type.  The options are:
        - VTK_FLOAT (default) single precision floating point.
        - VTK_DOUBLE double precision floating point.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name.
        """
        ...
    
    def SetFileType(self, p_int):
        """
        V.SetFileType(int)
        C++: virtual void SetFileType(int _arg)
        
        Get/Set the file type.  The options are:
        - FILE_TYPE_IS_UNKNOWN (default) the class will attempt to
          determine the file type. If this fails then you should set the
          file type yourself.
        - FILE_TYPE_IS_TEXT the file type is text.
        - FILE_TYPE_IS_BINARY the file type is binary.
        """
        ...
    
    def SetFileTypeToBinary(self):
        """
        V.SetFileTypeToBinary()
        C++: void SetFileTypeToBinary()
        
        Get/Set the file type.  The options are:
        - FILE_TYPE_IS_UNKNOWN (default) the class will attempt to
          determine the file type. If this fails then you should set the
          file type yourself.
        - FILE_TYPE_IS_TEXT the file type is text.
        - FILE_TYPE_IS_BINARY the file type is binary.
        """
        ...
    
    def SetFileTypeToText(self):
        """
        V.SetFileTypeToText()
        C++: void SetFileTypeToText()
        
        Get/Set the file type.  The options are:
        - FILE_TYPE_IS_UNKNOWN (default) the class will attempt to
          determine the file type. If this fails then you should set the
          file type yourself.
        - FILE_TYPE_IS_TEXT the file type is text.
        - FILE_TYPE_IS_BINARY the file type is binary.
        """
        ...
    
    def SetFileTypeToUnknown(self):
        """
        V.SetFileTypeToUnknown()
        C++: void SetFileTypeToUnknown()
        
        Get/Set the file type.  The options are:
        - FILE_TYPE_IS_UNKNOWN (default) the class will attempt to
          determine the file type. If this fails then you should set the
          file type yourself.
        - FILE_TYPE_IS_TEXT the file type is text.
        - FILE_TYPE_IS_BINARY the file type is binary.
        """
        ...
    
    def SetHasScalar(self, p_int):
        """
        V.SetHasScalar(int)
        C++: virtual void SetHasScalar(vtkTypeBool _arg)
        
        Default: 1. If 1 then each particle has a value associated with
        it.
        """
        ...
    
    def SetSwapBytes(self, p_int):
        """
        V.SetSwapBytes(int)
        C++: virtual void SetSwapBytes(vtkTypeBool _arg)
        
        Set/Get the byte swapping to explicitly swap the bytes of a file.
        Not used when reading text files.
        """
        ...
    
    def SwapBytesOff(self):
        """
        V.SwapBytesOff()
        C++: virtual void SwapBytesOff()
        
        Set/Get the byte swapping to explicitly swap the bytes of a file.
        Not used when reading text files.
        """
        ...
    
    def SwapBytesOn(self):
        """
        V.SwapBytesOn()
        C++: virtual void SwapBytesOn()
        
        Set/Get the byte swapping to explicitly swap the bytes of a file.
        Not used when reading text files.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPDBReader(vtkMoleculeReaderBase):
    """
    vtkPDBReader - read Molecular Data files
    
    Superclass: vtkMoleculeReaderBase
    
    vtkPDBReader is a source object that reads Molecule files The
    FileName must be specified
    
    @par Thanks: Dr. Jean M. Favre who developed and contributed this
    class
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPDBReader
        C++: vtkPDBReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPDBReader
        C++: static vtkPDBReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkProStarReader(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkProStarReader - Reads geometry in proSTAR (STARCD) file format.
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkProStarReader creates an unstructured grid dataset. It reads
    .cel/.vrt files stored in proSTAR (STARCD) ASCII format.
    
    @par Thanks: Reader written by Mark Olesen
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the file name prefix of the cel/vrt files to read. The
        reader will try to open FileName.cel and FileName.vrt files.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        The proSTAR files are often in millimeters. Specify an
        alternative scaling factor.
        """
        ...
    
    def GetScaleFactorMaxValue(self):
        """
        V.GetScaleFactorMaxValue() -> float
        C++: virtual double GetScaleFactorMaxValue()
        
        The proSTAR files are often in millimeters. Specify an
        alternative scaling factor.
        """
        ...
    
    def GetScaleFactorMinValue(self):
        """
        V.GetScaleFactorMinValue() -> float
        C++: virtual double GetScaleFactorMinValue()
        
        The proSTAR files are often in millimeters. Specify an
        alternative scaling factor.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProStarReader
        C++: vtkProStarReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProStarReader
        C++: static vtkProStarReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the file name prefix of the cel/vrt files to read. The
        reader will try to open FileName.cel and FileName.vrt files.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        The proSTAR files are often in millimeters. Specify an
        alternative scaling factor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    cellType = ...
    shapeType = ...
    starcdBaffleType = ...
    starcdFluidType = ...
    starcdHex = ...
    starcdLine = ...
    starcdLineType = ...
    starcdPoint = ...
    starcdPointType = ...
    starcdPoly = ...
    starcdPrism = ...
    starcdPyr = ...
    starcdShell = ...
    starcdShellType = ...
    starcdSolidType = ...
    starcdTet = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPTSReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkPTSReader - Read ASCII PTS Files.
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkPTSReader reads either a text file of
     points. The first line is the number of points. Point information is
     either x y z intensity or x y z intensity r g b
    """
    def CreateCellsOff(self):
        """
        V.CreateCellsOff()
        C++: virtual void CreateCellsOff()
        
        Boolean value indicates whether or not to create cells for this
        dataset. Otherwise only points and scalars are created. Defaults
        to true.
        """
        ...
    
    def CreateCellsOn(self):
        """
        V.CreateCellsOn()
        C++: virtual void CreateCellsOn()
        
        Boolean value indicates whether or not to create cells for this
        dataset. Otherwise only points and scalars are created. Defaults
        to true.
        """
        ...
    
    def GetCreateCells(self):
        """
        V.GetCreateCells() -> bool
        C++: virtual bool GetCreateCells()
        
        Boolean value indicates whether or not to create cells for this
        dataset. Otherwise only points and scalars are created. Defaults
        to true.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name.
        """
        ...
    
    def GetIncludeColorAndLuminance(self):
        """
        V.GetIncludeColorAndLuminance() -> bool
        C++: virtual bool GetIncludeColorAndLuminance()
        
        Boolean value indicates when color values are present if
        luminance should be read in as well Defaults to true.
        """
        ...
    
    def GetLimitReadToBounds(self):
        """
        V.GetLimitReadToBounds() -> bool
        C++: virtual bool GetLimitReadToBounds()
        
        Boolean value indicates whether or not to limit points read to a
        specified (ReadBounds) region.
        """
        ...
    
    def GetLimitToMaxNumberOfPoints(self):
        """
        V.GetLimitToMaxNumberOfPoints() -> bool
        C++: virtual bool GetLimitToMaxNumberOfPoints()
        
        Boolean value indicates whether or not to limit number of points
        read based on MaxNumbeOfPoints.
        """
        ...
    
    def GetMaxNumberOfPoints(self):
        """
        V.GetMaxNumberOfPoints() -> int
        C++: virtual vtkIdType GetMaxNumberOfPoints()
        
        The maximum number of points to load if LimitToMaxNumberOfPoints
        is on/true. Sets a temporary onRatio.
        """
        ...
    
    def GetMaxNumberOfPointsMaxValue(self):
        """
        V.GetMaxNumberOfPointsMaxValue() -> int
        C++: virtual vtkIdType GetMaxNumberOfPointsMaxValue()
        
        The maximum number of points to load if LimitToMaxNumberOfPoints
        is on/true. Sets a temporary onRatio.
        """
        ...
    
    def GetMaxNumberOfPointsMinValue(self):
        """
        V.GetMaxNumberOfPointsMinValue() -> int
        C++: virtual vtkIdType GetMaxNumberOfPointsMinValue()
        
        The maximum number of points to load if LimitToMaxNumberOfPoints
        is on/true. Sets a temporary onRatio.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputDataTypeIsDouble(self):
        """
        V.GetOutputDataTypeIsDouble() -> bool
        C++: virtual bool GetOutputDataTypeIsDouble()
        
        The output type defaults to float, but can instead be double.
        """
        ...
    
    def GetReadBounds(self):
        """
        V.GetReadBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetReadBounds()
        
        Bounds to use if LimitReadToBounds is On
        """
        ...
    
    def IncludeColorAndLuminanceOff(self):
        """
        V.IncludeColorAndLuminanceOff()
        C++: virtual void IncludeColorAndLuminanceOff()
        
        Boolean value indicates when color values are present if
        luminance should be read in as well Defaults to true.
        """
        ...
    
    def IncludeColorAndLuminanceOn(self):
        """
        V.IncludeColorAndLuminanceOn()
        C++: virtual void IncludeColorAndLuminanceOn()
        
        Boolean value indicates when color values are present if
        luminance should be read in as well Defaults to true.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LimitReadToBoundsOff(self):
        """
        V.LimitReadToBoundsOff()
        C++: virtual void LimitReadToBoundsOff()
        
        Boolean value indicates whether or not to limit points read to a
        specified (ReadBounds) region.
        """
        ...
    
    def LimitReadToBoundsOn(self):
        """
        V.LimitReadToBoundsOn()
        C++: virtual void LimitReadToBoundsOn()
        
        Boolean value indicates whether or not to limit points read to a
        specified (ReadBounds) region.
        """
        ...
    
    def LimitToMaxNumberOfPointsOff(self):
        """
        V.LimitToMaxNumberOfPointsOff()
        C++: virtual void LimitToMaxNumberOfPointsOff()
        
        Boolean value indicates whether or not to limit number of points
        read based on MaxNumbeOfPoints.
        """
        ...
    
    def LimitToMaxNumberOfPointsOn(self):
        """
        V.LimitToMaxNumberOfPointsOn()
        C++: virtual void LimitToMaxNumberOfPointsOn()
        
        Boolean value indicates whether or not to limit number of points
        read based on MaxNumbeOfPoints.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPTSReader
        C++: vtkPTSReader *NewInstance()
        """
        ...
    
    def OutputDataTypeIsDoubleOff(self):
        """
        V.OutputDataTypeIsDoubleOff()
        C++: virtual void OutputDataTypeIsDoubleOff()
        
        The output type defaults to float, but can instead be double.
        """
        ...
    
    def OutputDataTypeIsDoubleOn(self):
        """
        V.OutputDataTypeIsDoubleOn()
        C++: virtual void OutputDataTypeIsDoubleOn()
        
        The output type defaults to float, but can instead be double.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPTSReader
        C++: static vtkPTSReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCreateCells(self, bool):
        """
        V.SetCreateCells(bool)
        C++: virtual void SetCreateCells(bool _arg)
        
        Boolean value indicates whether or not to create cells for this
        dataset. Otherwise only points and scalars are created. Defaults
        to true.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *filename)
        
        Specify file name.
        """
        ...
    
    def SetIncludeColorAndLuminance(self, bool):
        """
        V.SetIncludeColorAndLuminance(bool)
        C++: virtual void SetIncludeColorAndLuminance(bool _arg)
        
        Boolean value indicates when color values are present if
        luminance should be read in as well Defaults to true.
        """
        ...
    
    def SetLimitReadToBounds(self, bool):
        """
        V.SetLimitReadToBounds(bool)
        C++: virtual void SetLimitReadToBounds(bool _arg)
        
        Boolean value indicates whether or not to limit points read to a
        specified (ReadBounds) region.
        """
        ...
    
    def SetLimitToMaxNumberOfPoints(self, bool):
        """
        V.SetLimitToMaxNumberOfPoints(bool)
        C++: virtual void SetLimitToMaxNumberOfPoints(bool _arg)
        
        Boolean value indicates whether or not to limit number of points
        read based on MaxNumbeOfPoints.
        """
        ...
    
    def SetMaxNumberOfPoints(self, p_int):
        """
        V.SetMaxNumberOfPoints(int)
        C++: virtual void SetMaxNumberOfPoints(vtkIdType _arg)
        
        The maximum number of points to load if LimitToMaxNumberOfPoints
        is on/true. Sets a temporary onRatio.
        """
        ...
    
    def SetOutputDataTypeIsDouble(self, bool):
        """
        V.SetOutputDataTypeIsDouble(bool)
        C++: virtual void SetOutputDataTypeIsDouble(bool _arg)
        
        The output type defaults to float, but can instead be double.
        """
        ...
    
    def SetReadBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetReadBounds(float, float, float, float, float, float)
        C++: virtual void SetReadBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetReadBounds((float, float, float, float, float, float))
        C++: virtual void SetReadBounds(const double _arg[6])
        
        Bounds to use if LimitReadToBounds is On
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSTLReader(__vtkmodules_vtkIOCore.vtkAbstractPolyDataReader):
    """
    vtkSTLReader - read ASCII or binary stereo lithography files
    
    Superclass: vtkAbstractPolyDataReader
    
    vtkSTLReader is a source object that reads ASCII or binary stereo
    lithography files (.stl files). The FileName must be specified to
    vtkSTLReader. The object automatically detects whether the file is
    ASCII or binary.
    
    .stl files are quite inefficient since they duplicate vertex
    definitions. By setting the Merging boolean you can control whether
    the point data is merged after reading. Merging is performed by
    default, however, merging requires a large amount of temporary
    storage since a 3D hash table must be constructed.
    
    @warning
    Binary files written on one system may not be readable on other
    systems. vtkSTLWriter uses VAX or PC byte ordering and swaps bytes on
    other systems.
    """
    def GetBinaryHeader(self):
        """
        V.GetBinaryHeader() -> vtkUnsignedCharArray
        C++: virtual vtkUnsignedCharArray *GetBinaryHeader()
        
        Get binary file header string. If ASCII STL file is read then
        BinaryHeader is not set, and the header can be retrieved
        using.GetHeader() instead.
        \sa GetHeader()
        """
        ...
    
    def GetHeader(self):
        """
        V.GetHeader() -> string
        C++: virtual char *GetHeader()
        
        Get header string. If an ASCII STL file contains multiple solids
        then headers are separated by newline character. If a binary STL
        file is read, the first zero-terminated string is stored in this
        header, the full header is available by using GetBinaryHeader().
        \sa GetBinaryHeader()
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Specify a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMerging(self):
        """
        V.GetMerging() -> int
        C++: virtual vtkTypeBool GetMerging()
        
        Turn on/off merging of points/triangles.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overload standard modified time function. If locator is modified,
        then this object is modified as well.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarTags(self):
        """
        V.GetScalarTags() -> int
        C++: virtual vtkTypeBool GetScalarTags()
        
        Turn on/off tagging of solids with scalars.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergingOff(self):
        """
        V.MergingOff()
        C++: virtual void MergingOff()
        
        Turn on/off merging of points/triangles.
        """
        ...
    
    def MergingOn(self):
        """
        V.MergingOn()
        C++: virtual void MergingOn()
        
        Turn on/off merging of points/triangles.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSTLReader
        C++: vtkSTLReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSTLReader
        C++: static vtkSTLReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalarTagsOff(self):
        """
        V.ScalarTagsOff()
        C++: virtual void ScalarTagsOff()
        
        Turn on/off tagging of solids with scalars.
        """
        ...
    
    def ScalarTagsOn(self):
        """
        V.ScalarTagsOn()
        C++: virtual void ScalarTagsOn()
        
        Turn on/off tagging of solids with scalars.
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *locator)
        
        Specify a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetMerging(self, p_int):
        """
        V.SetMerging(int)
        C++: virtual void SetMerging(vtkTypeBool _arg)
        
        Turn on/off merging of points/triangles.
        """
        ...
    
    def SetScalarTags(self, p_int):
        """
        V.SetScalarTags(int)
        C++: virtual void SetScalarTags(vtkTypeBool _arg)
        
        Turn on/off tagging of solids with scalars.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSTLWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkSTLWriter - write stereo lithography files
    
    Superclass: vtkWriter
    
    vtkSTLWriter writes stereo lithography (.stl) files in either ASCII
    or binary form. Stereo lithography files contain only triangles.
    Since VTK 8.1, this writer converts non-triangle polygons into
    triangles, so there is no longer a need to use vtkTriangleFilter
    prior to using this writer if the input contains polygons with more
    than three vertices.
    
    @warning
    Binary files written on one system may not be readable on other
    systems. vtkSTLWriter uses VAX or PC byte ordering and swaps bytes on
    other systems.
    """
    def GetBinaryHeader(self):
        """
        V.GetBinaryHeader() -> vtkUnsignedCharArray
        C++: virtual vtkUnsignedCharArray *GetBinaryHeader()
        
        Set binary header for the file. Binary header is only used when
        writing binary type files. If both Header and BinaryHeader are
        specified then BinaryHeader is used. Maximum length of binary
        header is 80 bytes, any content over this limit is ignored.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def GetFileType(self):
        """
        V.GetFileType() -> int
        C++: virtual int GetFileType()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetFileTypeMaxValue(self):
        """
        V.GetFileTypeMaxValue() -> int
        C++: virtual int GetFileTypeMaxValue()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetFileTypeMinValue(self):
        """
        V.GetFileTypeMinValue() -> int
        C++: virtual int GetFileTypeMinValue()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetHeader(self):
        """
        V.GetHeader() -> string
        C++: virtual char *GetHeader()
        
        Set the header for the file as text. The header cannot contain
        0x00 characters.
        \sa SetBinaryHeader()
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        V.GetInput(int) -> vtkPolyData
        C++: vtkPolyData *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSTLWriter
        C++: vtkSTLWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSTLWriter
        C++: static vtkSTLWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBinaryHeader(self, vtkUnsignedCharArray):
        """
        V.SetBinaryHeader(vtkUnsignedCharArray)
        C++: virtual void SetBinaryHeader(
            vtkUnsignedCharArray *binaryHeader)
        
        Set binary header for the file. Binary header is only used when
        writing binary type files. If both Header and BinaryHeader are
        specified then BinaryHeader is used. Maximum length of binary
        header is 80 bytes, any content over this limit is ignored.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def SetFileType(self, p_int):
        """
        V.SetFileType(int)
        C++: virtual void SetFileType(int _arg)
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetFileTypeToASCII(self):
        """
        V.SetFileTypeToASCII()
        C++: void SetFileTypeToASCII()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetFileTypeToBinary(self):
        """
        V.SetFileTypeToBinary()
        C++: void SetFileTypeToBinary()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetHeader(self, string):
        """
        V.SetHeader(string)
        C++: virtual void SetHeader(const char *_arg)
        
        Set the header for the file as text. The header cannot contain
        0x00 characters.
        \sa SetBinaryHeader()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTecplotReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkTecplotReader -
    **********************************************************************
    *****
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    Copyright (c) 2000 - 2009, Lawrence Livermore National Security, LLC
    Produced at the Lawrence Livermore National Laboratory
    LLNL-CODE-400124 All rights reserved.
    
    This file was adapted from the ASCII Tecplot reader of VisIt. For
    details, see https://visit.llnl.gov/.  The full copyright notice is
    contained in the file COPYRIGHT located at the root of the VisIt
    distribution or at http://www.llnl.gov/visit/copyright.html.
    
    **********************************************************************
        *****
    
    A concrete class to read an ASCII Tecplot file.
    
    
     vtkTecplotReader parses an ASCII Tecplot file to get a
    vtkMultiBlockDataSet
     object made up of several vtkDataSet objects, of which each is of
    type
     either vtkStructuredGrid or vtkUnstructuredGrid. Each vtkDataSet
    object
     maintains the geometry, topology, and some associated attributes
    describing
     physical properties.
    
    
     Tecplot treats 3D coordinates (only one or two coordinates might be
     explicitly specified in a file) as variables too, whose names (e.g.,
     'X' / 'x' / 'I', 'Y' / 'y' / 'J', 'Z' / 'z' / 'K') are provided in
    the
     variables list (the 'VARIABLES' section). These names are then
    followed
     in the list by those of other traditional variables or attributes
    (node-
     based and / or cell-based data with the mode specified via token
    'VAR
     LOCATION', to be extracted to create vtkPointData and / or
    vtkCellData).
     Each zone described afterwards (in the 'ZONE's section) provides the
     specific values of the aforementioned variables (including 3D
    coordinates),
     in the same order as indicated by the variable-names list, through
    either
     POINT-packing (i.e., tuple-based storage) or BLOCK-packing
    (component-based
     storage). In particular, the first / description line of each zone
    tells
     the type of all the constituent cells as the connectivity / topology
     information. In other words, the entire dataset is made up of
    multiple zones
     (blocks), of which each maintains a set of cells of the same type
    ('BRICK',
     'TRIANGLE', 'QUADRILATERAL', 'TETRAHEDRON', and 'POINT' in Tecplot
    terms).
     In addition, the description line of each zone specifies the zone
    name,
     dimensionality information (size of each dimension for a structured
    zone),
     number of nodes, and number of cells. Information about the file
    format is
     available at http://download.tecplot.com/360/dataformat.pdf.
    
    @warning
     vtkTecplotReader is currently a simplified ASCII Tecplot reader and
    some
     functionalities (e.g., extraction of sections 'GEOMETRY', 'TEXT',
    and 'DATA
     SETAUXDATA', access to multiple time steps, in addition to the
    construction
     of vtkRectilinearGrid and vtkImageData objects) are not supported.
    
    @par Thanks:
     This class is a VTK implementation of VisIt's ASCII Tecplot reader.
    
    @sa
     vtkPoints vtkStructuredGrid vtkUnstructuredGrid vtkPointData
    vtkCellData
     vtkDataSet vtkMultiBlockDataSet
    """
    def GetBlockName(self, p_int):
        """
        V.GetBlockName(int) -> string
        C++: const char *GetBlockName(int blockIdx)
        
        Get the name of a block specified by a zero-based index. nullptr
        is returned for an invalid block index.
        """
        ...
    
    def GetDataArrayName(self, p_int):
        """
        V.GetDataArrayName(int) -> string
        C++: const char *GetDataArrayName(int arrayIdx)
        
        Get the name of a data array specified by the zero-based index
        (arrayIdx).
        """
        ...
    
    def GetDataArrayStatus(self, string):
        """
        V.GetDataArrayStatus(string) -> int
        C++: int GetDataArrayStatus(const char *arayName)
        
        Get the status of a specific data array (0: un-selected; 1:
        selected).
        """
        ...
    
    def GetDataAttributeName(self, p_int):
        """
        V.GetDataAttributeName(int) -> string
        C++: const char *GetDataAttributeName(int attrIndx)
        
        Get the name of a zero-based data attribute (not 3D coordinates).
        nullptr is returned for an invalid attribute index.
        """
        ...
    
    def GetDataTitle(self):
        """
        V.GetDataTitle() -> string
        C++: const char *GetDataTitle()
        
        Get the Tecplot data title.
        """
        ...
    
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: int GetNumberOfBlocks()
        
        Get the number of blocks (i.e., zones in Tecplot terms).
        """
        ...
    
    def GetNumberOfDataArrays(self):
        """
        V.GetNumberOfDataArrays() -> int
        C++: int GetNumberOfDataArrays()
        
        Get the number of all data attributes (point data and cell data).
        """
        ...
    
    def GetNumberOfDataAttributes(self):
        """
        V.GetNumberOfDataAttributes() -> int
        C++: int GetNumberOfDataAttributes()
        
        Get the number of standard data attributes (node-based and
        cell-based), excluding 3D coordinates.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfVariables(self):
        """
        V.GetNumberOfVariables() -> int
        C++: virtual int GetNumberOfVariables()
        
        Get the number of all variables (including 3D coordinates).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsDataAttributeCellBased(self, string):
        """
        V.IsDataAttributeCellBased(string) -> int
        C++: int IsDataAttributeCellBased(const char *attrName)
        V.IsDataAttributeCellBased(int) -> int
        C++: int IsDataAttributeCellBased(int attrIndx)
        
        Get the type (0 for node-based and 1 for cell-based) of a
        specified data attribute (not 3D coordinates). -1 is returned for
        an invalid attribute name.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTecplotReader
        C++: vtkTecplotReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTecplotReader
        C++: static vtkTecplotReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDataArrayStatus(self, string, p_int):
        """
        V.SetDataArrayStatus(string, int)
        C++: void SetDataArrayStatus(const char *arayName, int bChecked)
        
        Set the status of a specific data array (0: de-select; 1: select)
        specified by the name.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fileName)
        
        Specify a Tecplot ASCII file for data loading.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkWindBladeReader(__vtkmodules_vtkCommonExecutionModel.vtkStructuredGridAlgorithm):
    """
    vtkWindBladeReader - class for reading WindBlade data files
    
    Superclass: vtkStructuredGridAlgorithm
    
    vtkWindBladeReader is a source object that reads WindBlade files
    which are block binary files with tags before and after each block
    giving the number of bytes within the block.  The number of data
    variables dumped varies.  There are 3 output ports with the first
    being a structured grid with irregular spacing in the Z dimension.
    The second is an unstructured grid only read on on process 0 and used
    to represent the blade.  The third is also a structured grid with
    irregular spacing on the Z dimension.  Only the first and second
    output ports have time dependent data.
    """
    def DisableAllPointArrays(self):
        """
        V.DisableAllPointArrays()
        C++: void DisableAllPointArrays()
        """
        ...
    
    def EnableAllPointArrays(self):
        """
        V.EnableAllPointArrays()
        C++: void EnableAllPointArrays()
        """
        ...
    
    def GetBladeOutput(self):
        """
        V.GetBladeOutput() -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetBladeOutput()
        """
        ...
    
    def GetFieldOutput(self):
        """
        V.GetFieldOutput() -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetFieldOutput()
        
        Get the reader's output
        """
        ...
    
    def GetFilename(self):
        """
        V.GetFilename() -> string
        C++: virtual char *GetFilename()
        """
        ...
    
    def GetGroundOutput(self):
        """
        V.GetGroundOutput() -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetGroundOutput()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays()
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        The following methods allow selective reading of solutions
        fields. By default, ALL data fields on the nodes are read, but
        this can be modified.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        """
        ...
    
    def GetSubExtent(self):
        """
        V.GetSubExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetSubExtent()
        """
        ...
    
    def GetWholeExtent(self):
        """
        V.GetWholeExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetWholeExtent()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWindBladeReader
        C++: vtkWindBladeReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWindBladeReader
        C++: static vtkWindBladeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFilename(self, string):
        """
        V.SetFilename(string)
        C++: virtual void SetFilename(const char *_arg)
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        """
        ...
    
    def SetSubExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetSubExtent(int, int, int, int, int, int)
        C++: virtual void SetSubExtent(int _arg1, int _arg2, int _arg3,
            int _arg4, int _arg5, int _arg6)
        V.SetSubExtent((int, int, int, int, int, int))
        C++: virtual void SetSubExtent(const int _arg[6])
        """
        ...
    
    def SetWholeExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: virtual void SetWholeExtent(int _arg1, int _arg2, int _arg3,
            int _arg4, int _arg5, int _arg6)
        V.SetWholeExtent((int, int, int, int, int, int))
        C++: virtual void SetWholeExtent(const int _arg[6])
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXYZMolReader(vtkMoleculeReaderBase):
    """
    vtkXYZMolReader - read Molecular Data files
    
    Superclass: vtkMoleculeReaderBase
    
    vtkXYZMolReader is a source object that reads Molecule files The
    FileName must be specified
    
    @par Thanks: Dr. Jean M. Favre who developed and contributed this
    class
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: virtual int CanReadFile(const char *name)
        
        Test whether the file with the given name can be read by this
        reader.
        """
        ...
    
    def GetMaxTimeStep(self):
        """
        V.GetMaxTimeStep() -> int
        C++: virtual int GetMaxTimeStep()
        
        Get the maximum time step.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTimeStep(self):
        """
        V.GetTimeStep() -> int
        C++: virtual int GetTimeStep()
        
        Set the current time step. It should be greater than 0 and
        smaller than MaxTimeStep.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXYZMolReader
        C++: vtkXYZMolReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXYZMolReader
        C++: static vtkXYZMolReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetTimeStep(self, p_int):
        """
        V.SetTimeStep(int)
        C++: virtual void SetTimeStep(int _arg)
        
        Set the current time step. It should be greater than 0 and
        smaller than MaxTimeStep.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
