"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore
import vtkmodules.vtkViewsCore as __vtkmodules_vtkViewsCore

class vtkContextInteractorStyle(__vtkmodules_vtkRenderingCore.vtkInteractorStyle):
    """
    vtkContextInteractorStyle - An interactor for chart views.
    
    Superclass: vtkInteractorStyle
    
    It observes the user events (mouse events) and propagates them to the
    scene. If the scene doesn't eat the event, it is propagated to the
    interactor style superclass.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScene(self):
        """
        V.GetScene() -> vtkContextScene
        C++: vtkContextScene *GetScene()
        
        Return the observed scene.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextInteractorStyle
        C++: vtkContextInteractorStyle *NewInstance()
        """
        ...
    
    def OnChar(self):
        """
        V.OnChar()
        C++: void OnChar() override;
        
        Handle key presses.
        """
        ...
    
    def OnKeyPress(self):
        """
        V.OnKeyPress()
        C++: void OnKeyPress() override;
        
        Called when the user presses a key.
        """
        ...
    
    def OnKeyRelease(self):
        """
        V.OnKeyRelease()
        C++: void OnKeyRelease() override;
        
        Called when the user releases a key.
        """
        ...
    
    def OnLeftButtonDown(self):
        """
        V.OnLeftButtonDown()
        C++: void OnLeftButtonDown() override;
        
        Called when the user clicks the mouse left button. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnLeftButtonUp(self):
        """
        V.OnLeftButtonUp()
        C++: void OnLeftButtonUp() override;
        
        Called when the user releases the mouse left button. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnMiddleButtonDown(self):
        """
        V.OnMiddleButtonDown()
        C++: void OnMiddleButtonDown() override;
        
        Called when the user clicks the mouse middle button. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnMiddleButtonUp(self):
        """
        V.OnMiddleButtonUp()
        C++: void OnMiddleButtonUp() override;
        
        Called when the user releases the mouse middle button. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnMouseMove(self):
        """
        V.OnMouseMove()
        C++: void OnMouseMove() override;
        
        Called when the user moves the mouse Default behavior forwards
        the event to the observed scene.
        """
        ...
    
    def OnMouseWheelBackward(self):
        """
        V.OnMouseWheelBackward()
        C++: void OnMouseWheelBackward() override;
        
        Called when the user moves the mouse wheel backward. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnMouseWheelForward(self):
        """
        V.OnMouseWheelForward()
        C++: void OnMouseWheelForward() override;
        
        Called when the user moves the mouse wheel forward. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnRightButtonDown(self):
        """
        V.OnRightButtonDown()
        C++: void OnRightButtonDown() override;
        
        Called when the user clicks the mouse right button. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnRightButtonUp(self):
        """
        V.OnRightButtonUp()
        C++: void OnRightButtonUp() override;
        
        Called when the user releases the mouse right button. Default
        behavior forwards the event to the observed scene.
        """
        ...
    
    def OnSceneModified(self):
        """
        V.OnSceneModified()
        C++: virtual void OnSceneModified()
        
        Called when the scene is modified. Refresh the scene if needed.
        """
        ...
    
    def OnSelection(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.OnSelection([int, int, int, int, int])
        C++: virtual void OnSelection(unsigned int rect[5])
        
        Place holder for future implementation. Default behavior forwards
        the event to the observed scene.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextInteractorStyle
        C++: static vtkContextInteractorStyle *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetScene(self, vtkContextScene):
        """
        V.SetScene(vtkContextScene)
        C++: void SetScene(vtkContextScene *scene)
        
        Set the scene to forward user events to. Refresh the view when
        the scene is dirty and no event is being processed. The scene is
        observed (vtkCommand::ModifiedEvent) and a refresh on the view is
        called appropriately: scene is dirty and no event is being
        processed.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextView(__vtkmodules_vtkViewsCore.vtkRenderViewBase):
    """
    vtkContextView - provides a view of the vtkContextScene.
    
    Superclass: vtkRenderViewBase
    
    This class is derived from vtkRenderViewBase and provides a view of a
    vtkContextScene, with a default interactor style, renderer etc. It is
    the simplest way to create a vtkRenderWindow and display a 2D scene
    inside of it.
    
    By default the scene has a white background.
    """
    def GetContext(self):
        """
        V.GetContext() -> vtkContext2D
        C++: virtual vtkContext2D *GetContext()
        
        Get the vtkContext2D for the view.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScene(self):
        """
        V.GetScene() -> vtkContextScene
        C++: virtual vtkContextScene *GetScene()
        
        Get the scene of the view.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextView
        C++: vtkContextView *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextView
        C++: static vtkContextView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetContext(self, vtkContext2D):
        """
        V.SetContext(vtkContext2D)
        C++: virtual void SetContext(vtkContext2D *context)
        
        Set the vtkContext2D for the view.
        """
        ...
    
    def SetScene(self, vtkContextScene):
        """
        V.SetScene(vtkContextScene)
        C++: virtual void SetScene(vtkContextScene *scene)
        
        Set the scene object for the view.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
