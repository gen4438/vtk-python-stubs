"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

VTK_ABS = ...
VTK_ADD = ...
VTK_ADDC = ...
VTK_AND = ...
VTK_ATAN = ...
VTK_ATAN2 = ...
VTK_COMPLEX_MULTIPLY = ...
VTK_CONJUGATE = ...
VTK_COS = ...
VTK_DIVIDE = ...
VTK_EXP = ...
VTK_INVERT = ...
VTK_LOG = ...
VTK_MAX = ...
VTK_MIN = ...
VTK_MULTIPLY = ...
VTK_MULTIPLYBYK = ...
VTK_NAND = ...
VTK_NOP = ...
VTK_NOR = ...
VTK_NOT = ...
VTK_OR = ...
VTK_REPLACECBYK = ...
VTK_SIN = ...
VTK_SQR = ...
VTK_SQRT = ...
VTK_SUBTRACT = ...
VTK_XOR = ...
class vtkImageDivergence(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageDivergence - Divergence of a vector field.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageDivergence takes a 3D vector field and creates a scalar field
    which which represents the rate of change of the vector field. The
    definition of Divergence: Given V = P(x,y,z), Q(x,y,z), R(x,y,z),
    Divergence = dP/dx + dQ/dy + dR/dz.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageDivergence
        C++: vtkImageDivergence *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageDivergence
        C++: static vtkImageDivergence *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageDotProduct(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageDotProduct - Dot product of two vector images.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageDotProduct interprets the scalar components of two images as
    vectors and takes the dot product vector by vector (pixel by pixel).
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageDotProduct
        C++: vtkImageDotProduct *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageDotProduct
        C++: static vtkImageDotProduct *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInput1Data(self, vtkDataObject):
        """
        V.SetInput1Data(vtkDataObject)
        C++: virtual void SetInput1Data(vtkDataObject *in)
        
        Set the two inputs to this filter
        """
        ...
    
    def SetInput2Data(self, vtkDataObject):
        """
        V.SetInput2Data(vtkDataObject)
        C++: virtual void SetInput2Data(vtkDataObject *in)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageLogarithmicScale(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageLogarithmicScale - Passes each pixel through log function.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageLogarithmicScale passes each pixel through the function
    c*log(1+x).  It also handles negative values with the function
    -c*log(1-x).
    """
    def GetConstant(self):
        """
        V.GetConstant() -> float
        C++: virtual double GetConstant()
        
        Set/Get the scale factor for the logarithmic function.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageLogarithmicScale
        C++: vtkImageLogarithmicScale *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageLogarithmicScale
        C++: static vtkImageLogarithmicScale *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetConstant(self, p_float):
        """
        V.SetConstant(float)
        C++: virtual void SetConstant(double _arg)
        
        Set/Get the scale factor for the logarithmic function.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageLogic(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageLogic - And, or, xor, nand, nor, not.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageLogic implements basic logic operations. SetOperation is used
    to select the filter's behavior. The filter can take two or one
    input. Inputs must have the same type.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOperation(self):
        """
        V.GetOperation() -> int
        C++: virtual int GetOperation()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def GetOutputTrueValue(self):
        """
        V.GetOutputTrueValue() -> float
        C++: virtual double GetOutputTrueValue()
        
        Set the value to use for true in the output.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageLogic
        C++: vtkImageLogic *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageLogic
        C++: static vtkImageLogic *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInput1Data(self, vtkDataObject):
        """
        V.SetInput1Data(vtkDataObject)
        C++: virtual void SetInput1Data(vtkDataObject *input)
        
        Set the Input1 of this filter.
        """
        ...
    
    def SetInput2Data(self, vtkDataObject):
        """
        V.SetInput2Data(vtkDataObject)
        C++: virtual void SetInput2Data(vtkDataObject *input)
        
        Set the Input2 of this filter.
        """
        ...
    
    def SetOperation(self, p_int):
        """
        V.SetOperation(int)
        C++: virtual void SetOperation(int _arg)
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOperationToAnd(self):
        """
        V.SetOperationToAnd()
        C++: void SetOperationToAnd()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOperationToNand(self):
        """
        V.SetOperationToNand()
        C++: void SetOperationToNand()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOperationToNor(self):
        """
        V.SetOperationToNor()
        C++: void SetOperationToNor()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOperationToNot(self):
        """
        V.SetOperationToNot()
        C++: void SetOperationToNot()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOperationToOr(self):
        """
        V.SetOperationToOr()
        C++: void SetOperationToOr()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOperationToXor(self):
        """
        V.SetOperationToXor()
        C++: void SetOperationToXor()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOutputTrueValue(self, p_float):
        """
        V.SetOutputTrueValue(float)
        C++: virtual void SetOutputTrueValue(double _arg)
        
        Set the value to use for true in the output.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageMagnitude(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageMagnitude - Colapses components with magnitude function..
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageMagnitude takes the magnitude of the components.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMagnitude
        C++: vtkImageMagnitude *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMagnitude
        C++: static vtkImageMagnitude *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageMaskBits(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageMaskBits - applies a bit-mask pattern to each component.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageMaskBits applies a bit-mask pattern to each component.  The
    bit-mask can be applied using a variety of boolean bitwise operators.
    """
    def GetMasks(self):
        """
        V.GetMasks() -> (int, int, int, int)
        C++: virtual unsigned int *GetMasks()
        
        Set/Get the bit-masks. Default is 0xffffffff.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOperation(self):
        """
        V.GetOperation() -> int
        C++: virtual int GetOperation()
        
        Set/Get the boolean operator. Default is AND.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMaskBits
        C++: vtkImageMaskBits *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMaskBits
        C++: static vtkImageMaskBits *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMask(self, p_int):
        """
        V.SetMask(int)
        C++: void SetMask(unsigned int mask)
        
        Set/Get the bit-masks. Default is 0xffffffff.
        """
        ...
    
    def SetMasks(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.SetMasks(int, int, int, int)
        C++: virtual void SetMasks(unsigned int _arg1, unsigned int _arg2,
             unsigned int _arg3, unsigned int _arg4)
        V.SetMasks((int, int, int, int))
        C++: virtual void SetMasks(const unsigned int _arg[4])
        V.SetMasks(int, int)
        C++: void SetMasks(unsigned int mask1, unsigned int mask2)
        V.SetMasks(int, int, int)
        C++: void SetMasks(unsigned int mask1, unsigned int mask2,
            unsigned int mask3)
        
        Set/Get the bit-masks. Default is 0xffffffff.
        """
        ...
    
    def SetOperation(self, p_int):
        """
        V.SetOperation(int)
        C++: virtual void SetOperation(int _arg)
        
        Set/Get the boolean operator. Default is AND.
        """
        ...
    
    def SetOperationToAnd(self):
        """
        V.SetOperationToAnd()
        C++: void SetOperationToAnd()
        
        Set/Get the boolean operator. Default is AND.
        """
        ...
    
    def SetOperationToNand(self):
        """
        V.SetOperationToNand()
        C++: void SetOperationToNand()
        
        Set/Get the boolean operator. Default is AND.
        """
        ...
    
    def SetOperationToNor(self):
        """
        V.SetOperationToNor()
        C++: void SetOperationToNor()
        
        Set/Get the boolean operator. Default is AND.
        """
        ...
    
    def SetOperationToOr(self):
        """
        V.SetOperationToOr()
        C++: void SetOperationToOr()
        
        Set/Get the boolean operator. Default is AND.
        """
        ...
    
    def SetOperationToXor(self):
        """
        V.SetOperationToXor()
        C++: void SetOperationToXor()
        
        Set/Get the boolean operator. Default is AND.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageMathematics(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageMathematics - Add, subtract, multiply, divide, invert, sin,
    cos, exp, log.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageMathematics implements basic mathematic operations
    SetOperation is used to select the filters behavior.  The filter can
    take two or one input.
    """
    def DivideByZeroToCOff(self):
        """
        V.DivideByZeroToCOff()
        C++: virtual void DivideByZeroToCOff()
        
        How to handle divide by zero. Default is 0.
        """
        ...
    
    def DivideByZeroToCOn(self):
        """
        V.DivideByZeroToCOn()
        C++: virtual void DivideByZeroToCOn()
        
        How to handle divide by zero. Default is 0.
        """
        ...
    
    def GetConstantC(self):
        """
        V.GetConstantC() -> float
        C++: virtual double GetConstantC()
        
        A constant used by some operations (typically additive). Default
        is 0.
        """
        ...
    
    def GetConstantK(self):
        """
        V.GetConstantK() -> float
        C++: virtual double GetConstantK()
        
        A constant used by some operations (typically multiplicative).
        Default is 1.
        """
        ...
    
    def GetDivideByZeroToC(self):
        """
        V.GetDivideByZeroToC() -> int
        C++: virtual vtkTypeBool GetDivideByZeroToC()
        
        How to handle divide by zero. Default is 0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOperation(self):
        """
        V.GetOperation() -> int
        C++: virtual int GetOperation()
        
        Set/Get the Operation to perform.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMathematics
        C++: vtkImageMathematics *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMathematics
        C++: static vtkImageMathematics *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetConstantC(self, p_float):
        """
        V.SetConstantC(float)
        C++: virtual void SetConstantC(double _arg)
        
        A constant used by some operations (typically additive). Default
        is 0.
        """
        ...
    
    def SetConstantK(self, p_float):
        """
        V.SetConstantK(float)
        C++: virtual void SetConstantK(double _arg)
        
        A constant used by some operations (typically multiplicative).
        Default is 1.
        """
        ...
    
    def SetDivideByZeroToC(self, p_int):
        """
        V.SetDivideByZeroToC(int)
        C++: virtual void SetDivideByZeroToC(vtkTypeBool _arg)
        
        How to handle divide by zero. Default is 0.
        """
        ...
    
    def SetInput1Data(self, vtkDataObject):
        """
        V.SetInput1Data(vtkDataObject)
        C++: virtual void SetInput1Data(vtkDataObject *in)
        
        Set the two inputs to this filter. For some operations, the
        second input is not used.
        """
        ...
    
    def SetInput2Data(self, vtkDataObject):
        """
        V.SetInput2Data(vtkDataObject)
        C++: virtual void SetInput2Data(vtkDataObject *in)
        """
        ...
    
    def SetOperation(self, p_int):
        """
        V.SetOperation(int)
        C++: virtual void SetOperation(int _arg)
        
        Set/Get the Operation to perform.
        """
        ...
    
    def SetOperationToAbsoluteValue(self):
        """
        V.SetOperationToAbsoluteValue()
        C++: void SetOperationToAbsoluteValue()
        
        Set each pixel in the output image to the absolute value of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToAdd(self):
        """
        V.SetOperationToAdd()
        C++: void SetOperationToAdd()
        
        Set each pixel in the output image to the sum of the
        corresponding pixels in Input1 and Input2.
        """
        ...
    
    def SetOperationToAddConstant(self):
        """
        V.SetOperationToAddConstant()
        C++: void SetOperationToAddConstant()
        
        Set each pixel in the output image to the product of ConstantC
        with the corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToATAN(self):
        """
        V.SetOperationToATAN()
        C++: void SetOperationToATAN()
        
        Set each pixel in the output image to the arctangent of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToATAN2(self):
        """
        V.SetOperationToATAN2()
        C++: void SetOperationToATAN2()
        """
        ...
    
    def SetOperationToComplexMultiply(self):
        """
        V.SetOperationToComplexMultiply()
        C++: void SetOperationToComplexMultiply()
        """
        ...
    
    def SetOperationToConjugate(self):
        """
        V.SetOperationToConjugate()
        C++: void SetOperationToConjugate()
        """
        ...
    
    def SetOperationToCos(self):
        """
        V.SetOperationToCos()
        C++: void SetOperationToCos()
        
        Set each pixel in the output image to the cosine of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToDivide(self):
        """
        V.SetOperationToDivide()
        C++: void SetOperationToDivide()
        
        Set each pixel in the output image to the quotient of the
        corresponding pixels in Input1 and Input2 (Output = Input1 /
        Input2).
        """
        ...
    
    def SetOperationToExp(self):
        """
        V.SetOperationToExp()
        C++: void SetOperationToExp()
        
        Set each pixel in the output image to the exponential of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToInvert(self):
        """
        V.SetOperationToInvert()
        C++: void SetOperationToInvert()
        
        Set each pixel in the output image to 1 over the corresponding
        pixel in Input1 and Input2 (output = 1 / Input1). Input2 is not
        used.
        """
        ...
    
    def SetOperationToLog(self):
        """
        V.SetOperationToLog()
        C++: void SetOperationToLog()
        
        Set each pixel in the output image to the log of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToMax(self):
        """
        V.SetOperationToMax()
        C++: void SetOperationToMax()
        
        Set each pixel in the output image to the maximum of the
        corresponding pixels in Input1 and Input2. (Output = max(Input1,
        Input2))
        """
        ...
    
    def SetOperationToMin(self):
        """
        V.SetOperationToMin()
        C++: void SetOperationToMin()
        
        Set each pixel in the output image to the minimum of the
        corresponding pixels in Input1 and Input2. (Output = min(Input1,
        Input2))
        """
        ...
    
    def SetOperationToMultiply(self):
        """
        V.SetOperationToMultiply()
        C++: void SetOperationToMultiply()
        
        Set each pixel in the output image to the product of the
        corresponding pixels in Input1 and Input2.
        """
        ...
    
    def SetOperationToMultiplyByK(self):
        """
        V.SetOperationToMultiplyByK()
        C++: void SetOperationToMultiplyByK()
        
        Set each pixel in the output image to the product of ConstantK
        with the corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToReplaceCByK(self):
        """
        V.SetOperationToReplaceCByK()
        C++: void SetOperationToReplaceCByK()
        
        Find every pixel in Input1 that equals ConstantC and set the
        corresponding pixels in the Output to ConstantK. Input2 is not
        used.
        """
        ...
    
    def SetOperationToSin(self):
        """
        V.SetOperationToSin()
        C++: void SetOperationToSin()
        
        Set each pixel in the output image to the sine of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToSquare(self):
        """
        V.SetOperationToSquare()
        C++: void SetOperationToSquare()
        
        Set each pixel in the output image to the square of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToSquareRoot(self):
        """
        V.SetOperationToSquareRoot()
        C++: void SetOperationToSquareRoot()
        
        Set each pixel in the output image to the square root of the
        corresponding pixel in Input1. Input2 is not used.
        """
        ...
    
    def SetOperationToSubtract(self):
        """
        V.SetOperationToSubtract()
        C++: void SetOperationToSubtract()
        
        Set each pixel in the output image to the difference of the
        corresponding pixels in Input1 and Input2 (output = Input1 -
        Input2).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageWeightedSum(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageWeightedSum - adds any number of images, weighting each
    according to the weight set using this->SetWeights(i,w).
    
    Superclass: vtkThreadedImageAlgorithm
    
    All weights are normalized so they will sum to 1. Images must have
    the same extents. Output is
    
    @par Thanks: The original author of this class is Lauren O'Donnell
    (MIT) for Slicer
    """
    def CalculateTotalWeight(self):
        """
        V.CalculateTotalWeight() -> float
        C++: double CalculateTotalWeight()
        
        Compute the total value of all the weight
        """
        ...
    
    def GetNormalizeByWeight(self):
        """
        V.GetNormalizeByWeight() -> int
        C++: virtual vtkTypeBool GetNormalizeByWeight()
        
        Setting NormalizeByWeight on will divide the final result by the
        total weight of the component functions. This process does not
        otherwise normalize the weighted sum By default,
        NormalizeByWeight is on.
        """
        ...
    
    def GetNormalizeByWeightMaxValue(self):
        """
        V.GetNormalizeByWeightMaxValue() -> int
        C++: virtual vtkTypeBool GetNormalizeByWeightMaxValue()
        
        Setting NormalizeByWeight on will divide the final result by the
        total weight of the component functions. This process does not
        otherwise normalize the weighted sum By default,
        NormalizeByWeight is on.
        """
        ...
    
    def GetNormalizeByWeightMinValue(self):
        """
        V.GetNormalizeByWeightMinValue() -> int
        C++: virtual vtkTypeBool GetNormalizeByWeightMinValue()
        
        Setting NormalizeByWeight on will divide the final result by the
        total weight of the component functions. This process does not
        otherwise normalize the weighted sum By default,
        NormalizeByWeight is on.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWeights(self):
        """
        V.GetWeights() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetWeights()
        
        The weights control the contribution of each input to the sum.
        They will be normalized to sum to 1 before filter execution.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageWeightedSum
        C++: vtkImageWeightedSum *NewInstance()
        """
        ...
    
    def NormalizeByWeightOff(self):
        """
        V.NormalizeByWeightOff()
        C++: virtual void NormalizeByWeightOff()
        
        Setting NormalizeByWeight on will divide the final result by the
        total weight of the component functions. This process does not
        otherwise normalize the weighted sum By default,
        NormalizeByWeight is on.
        """
        ...
    
    def NormalizeByWeightOn(self):
        """
        V.NormalizeByWeightOn()
        C++: virtual void NormalizeByWeightOn()
        
        Setting NormalizeByWeight on will divide the final result by the
        total weight of the component functions. This process does not
        otherwise normalize the weighted sum By default,
        NormalizeByWeight is on.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageWeightedSum
        C++: static vtkImageWeightedSum *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNormalizeByWeight(self, p_int):
        """
        V.SetNormalizeByWeight(int)
        C++: virtual void SetNormalizeByWeight(vtkTypeBool _arg)
        
        Setting NormalizeByWeight on will divide the final result by the
        total weight of the component functions. This process does not
        otherwise normalize the weighted sum By default,
        NormalizeByWeight is on.
        """
        ...
    
    def SetWeight(self, p_int, p_float):
        """
        V.SetWeight(int, float)
        C++: virtual void SetWeight(vtkIdType id, double weight)
        
        Change a specific weight. Reallocation is done
        """
        ...
    
    def SetWeights(self, vtkDoubleArray):
        """
        V.SetWeights(vtkDoubleArray)
        C++: virtual void SetWeights(vtkDoubleArray *)
        
        The weights control the contribution of each input to the sum.
        They will be normalized to sum to 1 before filter execution.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
