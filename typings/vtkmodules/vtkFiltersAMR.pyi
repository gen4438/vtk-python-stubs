"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAMRCutPlane(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkAMRCutPlane -  A concrete instance of vtkMultiBlockDataSet that
    provides functionality for cutting an AMR dataset (an instance of
    vtkOverlappingAMR) with user supplied implicit plane function defined
    by a normal and center.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def FillOutputPortInformation(self, p_int, vtkInformation):
        """
        V.FillOutputPortInformation(int, vtkInformation) -> int
        C++: int FillOutputPortInformation(int port, vtkInformation *info)
             override;
        
        Fill the output port information objects for this algorithm. This
        is invoked by the first call to GetOutputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set/Get a multiprocess controller for parallel processing. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def GetLevelOfResolution(self):
        """
        V.GetLevelOfResolution() -> int
        C++: virtual int GetLevelOfResolution()
        
        Sets the level of resolution
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseNativeCutter(self):
        """
        V.GetUseNativeCutter() -> bool
        C++: virtual bool GetUseNativeCutter()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRCutPlane
        C++: vtkAMRCutPlane *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRCutPlane
        C++: static vtkAMRCutPlane *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Sets the center
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *_arg)
        
        Set/Get a multiprocess controller for parallel processing. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def SetLevelOfResolution(self, p_int):
        """
        V.SetLevelOfResolution(int)
        C++: virtual void SetLevelOfResolution(int _arg)
        
        Sets the level of resolution
        """
        ...
    
    def SetNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetNormal(float, float, float)
        C++: virtual void SetNormal(double _arg1, double _arg2,
            double _arg3)
        V.SetNormal((float, float, float))
        C++: virtual void SetNormal(const double _arg[3])
        
        Sets the normal
        """
        ...
    
    def SetUseNativeCutter(self, bool):
        """
        V.SetUseNativeCutter(bool)
        C++: virtual void SetUseNativeCutter(bool _arg)
        """
        ...
    
    def UseNativeCutterOff(self):
        """
        V.UseNativeCutterOff()
        C++: virtual void UseNativeCutterOff()
        """
        ...
    
    def UseNativeCutterOn(self):
        """
        V.UseNativeCutterOn()
        C++: virtual void UseNativeCutterOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRGaussianPulseSource(__vtkmodules_vtkCommonExecutionModel.vtkOverlappingAMRAlgorithm):
    """
    vtkAMRGaussianPulseSource -  A source that generates sample AMR data
    with gaussian pulse field.
    
    Superclass: vtkOverlappingAMRAlgorithm
    
    The user
     can control the refinement ratio as well as the pulse attributes
    such as
     the pulse origin, length and amplitude.
    
    @sa
     vtkOverlappingAMR
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPulseAmplitude(self):
        """
        V.GetPulseAmplitude() -> float
        C++: virtual double GetPulseAmplitude()
        
        Set & Get macro for the pulse amplitude
        """
        ...
    
    def GetPulseOrigin(self):
        """
        V.GetPulseOrigin() -> (float, float, float)
        C++: virtual double *GetPulseOrigin()
        
        Set & Get macro for the pulse origin
        """
        ...
    
    def GetPulseWidth(self):
        """
        V.GetPulseWidth() -> (float, float, float)
        C++: virtual double *GetPulseWidth()
        
        Set & Get macro for the pulse width
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRGaussianPulseSource
        C++: vtkAMRGaussianPulseSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRGaussianPulseSource
        C++: static vtkAMRGaussianPulseSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDimension(self, p_int):
        """
        V.SetDimension(int)
        C++: virtual void SetDimension(int _arg)
        
        Sets the dimension of the AMR dataset to generate
        """
        ...
    
    def SetNumberOfLevels(self, p_int):
        """
        V.SetNumberOfLevels(int)
        C++: virtual void SetNumberOfLevels(int _arg)
        
        Sets the number of levels to generate
        """
        ...
    
    def SetPulseAmplitude(self, p_float):
        """
        V.SetPulseAmplitude(float)
        C++: virtual void SetPulseAmplitude(double _arg)
        
        Set & Get macro for the pulse amplitude
        """
        ...
    
    def SetPulseOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetPulseOrigin(float, float, float)
        C++: virtual void SetPulseOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetPulseOrigin((float, float, float))
        C++: virtual void SetPulseOrigin(const double _arg[3])
        
        Set & Get macro for the pulse origin
        """
        ...
    
    def SetPulseWidth(self, p_float, p_float_1, p_float_2):
        """
        V.SetPulseWidth(float, float, float)
        C++: virtual void SetPulseWidth(double _arg1, double _arg2,
            double _arg3)
        V.SetPulseWidth((float, float, float))
        C++: virtual void SetPulseWidth(const double _arg[3])
        
        Set & Get macro for the pulse width
        """
        ...
    
    def SetRefinementRatio(self, p_int):
        """
        V.SetRefinementRatio(int)
        C++: void SetRefinementRatio(int r)
        
        Set the refinement ratio
        """
        ...
    
    def SetRootSpacing(self, p_float):
        """
        V.SetRootSpacing(float)
        C++: void SetRootSpacing(double h0)
        
        Set the root spacing
        """
        ...
    
    def SetXPulseOrigin(self, p_float):
        """
        V.SetXPulseOrigin(float)
        C++: void SetXPulseOrigin(double f)
        
        Set & Get macro for the pulse origin
        """
        ...
    
    def SetXPulseWidth(self, p_float):
        """
        V.SetXPulseWidth(float)
        C++: void SetXPulseWidth(double f)
        
        Set & Get macro for the pulse width
        """
        ...
    
    def SetYPulseOrigin(self, p_float):
        """
        V.SetYPulseOrigin(float)
        C++: void SetYPulseOrigin(double f)
        
        Set & Get macro for the pulse origin
        """
        ...
    
    def SetYPulseWidth(self, p_float):
        """
        V.SetYPulseWidth(float)
        C++: void SetYPulseWidth(double f)
        
        Set & Get macro for the pulse width
        """
        ...
    
    def SetZPulseOrigin(self, p_float):
        """
        V.SetZPulseOrigin(float)
        C++: void SetZPulseOrigin(double f)
        
        Set & Get macro for the pulse origin
        """
        ...
    
    def SetZPulseWidth(self, p_float):
        """
        V.SetZPulseWidth(float)
        C++: void SetZPulseWidth(double f)
        
        Set & Get macro for the pulse width
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRResampleFilter(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkAMRResampleFilter -  This filter is a concrete instance of
    vtkMultiBlockDataSetAlgorithm and
     provides functionality for extracting portion of the AMR dataset,
    specified
     by a bounding box, in a uniform grid of the desired level of
    resolution.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    The resulting uniform grid is stored in a vtkMultiBlockDataSet where
    the
     number of blocks correspond to the number of processors utilized for
    the
     operation.
    
    @warning
     Data of the input AMR dataset is assumed to be cell-centered.
    
    @sa
     vtkOverlappingAMR, vtkUniformGrid
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def FillOutputPortInformation(self, p_int, vtkInformation):
        """
        V.FillOutputPortInformation(int, vtkInformation) -> int
        C++: int FillOutputPortInformation(int port, vtkInformation *info)
             override;
        
        Fill the output port information objects for this algorithm. This
        is invoked by the first call to GetOutputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetBiasVector(self):
        """
        V.GetBiasVector() -> (float, float, float)
        C++: virtual double *GetBiasVector()
        
        Set and Get the bias vector.  If UseBiasVector is true then the
        largest component of this vector can not have the max number of
        samples
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set & Get macro for the multi-process controller
        """
        ...
    
    def GetDemandDrivenMode(self):
        """
        V.GetDemandDrivenMode() -> int
        C++: virtual int GetDemandDrivenMode()
        
        Set & Get macro to allow the filter to operate in both
        demand-driven and standard modes
        """
        ...
    
    def GetMax(self):
        """
        V.GetMax() -> (float, float, float)
        C++: virtual double *GetMax()
        
        Set and Get the max corner
        """
        ...
    
    def GetMin(self):
        """
        V.GetMin() -> (float, float, float)
        C++: virtual double *GetMin()
        
        Set and Get the min corner
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPartitions(self):
        """
        V.GetNumberOfPartitions() -> int
        C++: virtual int GetNumberOfPartitions()
        
        Set & Get macro for the number of subdivisions
        """
        ...
    
    def GetNumberOfSamples(self):
        """
        V.GetNumberOfSamples() -> (int, int, int)
        C++: virtual int *GetNumberOfSamples()
        
        Set & Get macro for the number of samples (cells) in each
        dimension. Nominal value for the number of samples is 10x10x10.
        """
        ...
    
    def GetTransferToNodes(self):
        """
        V.GetTransferToNodes() -> int
        C++: virtual int GetTransferToNodes()
        
        Set & Get macro for the TransferToNodes flag
        """
        ...
    
    def GetUseBiasVector(self):
        """
        V.GetUseBiasVector() -> bool
        C++: virtual bool GetUseBiasVector()
        
        Set & Get macro for the number of subdivisions
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRResampleFilter
        C++: vtkAMRResampleFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRResampleFilter
        C++: static vtkAMRResampleFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBiasVector(self, p_float, p_float_1, p_float_2):
        """
        V.SetBiasVector(float, float, float)
        C++: virtual void SetBiasVector(double _arg1, double _arg2,
            double _arg3)
        V.SetBiasVector((float, float, float))
        C++: virtual void SetBiasVector(const double _arg[3])
        
        Set and Get the bias vector.  If UseBiasVector is true then the
        largest component of this vector can not have the max number of
        samples
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *_arg)
        
        Set & Get macro for the multi-process controller
        """
        ...
    
    def SetDemandDrivenMode(self, p_int):
        """
        V.SetDemandDrivenMode(int)
        C++: virtual void SetDemandDrivenMode(int _arg)
        
        Set & Get macro to allow the filter to operate in both
        demand-driven and standard modes
        """
        ...
    
    def SetMax(self, p_float, p_float_1, p_float_2):
        """
        V.SetMax(float, float, float)
        C++: virtual void SetMax(double _arg1, double _arg2, double _arg3)
        V.SetMax((float, float, float))
        C++: virtual void SetMax(const double _arg[3])
        
        Set and Get the max corner
        """
        ...
    
    def SetMin(self, p_float, p_float_1, p_float_2):
        """
        V.SetMin(float, float, float)
        C++: virtual void SetMin(double _arg1, double _arg2, double _arg3)
        V.SetMin((float, float, float))
        C++: virtual void SetMin(const double _arg[3])
        
        Set and Get the min corner
        """
        ...
    
    def SetNumberOfPartitions(self, p_int):
        """
        V.SetNumberOfPartitions(int)
        C++: virtual void SetNumberOfPartitions(int _arg)
        
        Set & Get macro for the number of subdivisions
        """
        ...
    
    def SetNumberOfSamples(self, p_int, p_int_1, p_int_2):
        """
        V.SetNumberOfSamples(int, int, int)
        C++: virtual void SetNumberOfSamples(int _arg1, int _arg2,
            int _arg3)
        V.SetNumberOfSamples((int, int, int))
        C++: virtual void SetNumberOfSamples(const int _arg[3])
        
        Set & Get macro for the number of samples (cells) in each
        dimension. Nominal value for the number of samples is 10x10x10.
        """
        ...
    
    def SetTransferToNodes(self, p_int):
        """
        V.SetTransferToNodes(int)
        C++: virtual void SetTransferToNodes(int _arg)
        
        Set & Get macro for the TransferToNodes flag
        """
        ...
    
    def SetUseBiasVector(self, bool):
        """
        V.SetUseBiasVector(bool)
        C++: virtual void SetUseBiasVector(bool _arg)
        
        Set & Get macro for the number of subdivisions
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRSliceFilter(__vtkmodules_vtkCommonExecutionModel.vtkOverlappingAMRAlgorithm):
    """
    vtkAMRSliceFilter -  A concrete instance of
    vtkOverlappingAMRAlgorithm which implements
     functionality for extracting slices from AMR data.
    
    Superclass: vtkOverlappingAMRAlgorithm
    
    Unlike the conventional
     slice filter, the output of this filter is a 2-D AMR dataset itself.
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        See algorithm for more info.
        """
        ...
    
    def FillOutputPortInformation(self, p_int, vtkInformation):
        """
        V.FillOutputPortInformation(int, vtkInformation) -> int
        C++: int FillOutputPortInformation(int port, vtkInformation *info)
             override;
        
        See algorithm for more info.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set/Get a multiprocess controller for paralle processing. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def GetMaxResolution(self):
        """
        V.GetMaxResolution() -> int
        C++: virtual unsigned int GetMaxResolution()
        
        Set/Get the maximum resolution used in this instance.
        """
        ...
    
    def GetNormal(self):
        """
        V.GetNormal() -> int
        C++: virtual int GetNormal()
        
        Set/Get the Axis normal. The accpetable values are defined in the
        NormalTag enum.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOffsetFromOrigin(self):
        """
        V.GetOffsetFromOrigin() -> float
        C++: virtual double GetOffsetFromOrigin()
        
        Set/Get the offset-from-origin of the slicing plane.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRSliceFilter
        C++: vtkAMRSliceFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRSliceFilter
        C++: static vtkAMRSliceFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *_arg)
        
        Set/Get a multiprocess controller for paralle processing. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def SetMaxResolution(self, p_int):
        """
        V.SetMaxResolution(int)
        C++: virtual void SetMaxResolution(unsigned int _arg)
        
        Set/Get the maximum resolution used in this instance.
        """
        ...
    
    def SetNormal(self, p_int):
        """
        V.SetNormal(int)
        C++: virtual void SetNormal(int _arg)
        
        Set/Get the Axis normal. The accpetable values are defined in the
        NormalTag enum.
        """
        ...
    
    def SetOffsetFromOrigin(self, p_float):
        """
        V.SetOffsetFromOrigin(float)
        C++: virtual void SetOffsetFromOrigin(double _arg)
        
        Set/Get the offset-from-origin of the slicing plane.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    NormalTag = ...
    X_NORMAL = ...
    Y_NORMAL = ...
    Z_NORMAL = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRToMultiBlockFilter(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkAMRToMultiBlockFilter - A filter that accepts as input an AMR
    dataset and produces a corresponding vtkMultiBlockDataset as output.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    @sa
    vtkOverlappingAMR vtkMultiBlockDataSet
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def FillOutputPortInformation(self, p_int, vtkInformation):
        """
        V.FillOutputPortInformation(int, vtkInformation) -> int
        C++: int FillOutputPortInformation(int port, vtkInformation *info)
             override;
        
        Fill the output port information objects for this algorithm. This
        is invoked by the first call to GetOutputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set/Get a multiprocess controller for paralle processing. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRToMultiBlockFilter
        C++: vtkAMRToMultiBlockFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRToMultiBlockFilter
        C++: static vtkAMRToMultiBlockFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *_arg)
        
        Set/Get a multiprocess controller for paralle processing. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageToAMR(__vtkmodules_vtkCommonExecutionModel.vtkOverlappingAMRAlgorithm):
    """
    vtkImageToAMR - filter to convert any vtkImageData to a
    vtkOverlappingAMR.
    
    Superclass: vtkOverlappingAMRAlgorithm
    
    vtkImageToAMR is a simple filter that converts any vtkImageData to a
    vtkOverlappingAMR dataset. The input vtkImageData is treated as the
    highest refinement available for the highest level. The lower
    refinements and the number of blocks is controlled properties
    specified on the filter.
    """
    def GetMaximumNumberOfBlocks(self):
        """
        V.GetMaximumNumberOfBlocks() -> int
        C++: virtual int GetMaximumNumberOfBlocks()
        
        Set the maximum number of blocks in the output
        """
        ...
    
    def GetMaximumNumberOfBlocksMaxValue(self):
        """
        V.GetMaximumNumberOfBlocksMaxValue() -> int
        C++: virtual int GetMaximumNumberOfBlocksMaxValue()
        
        Set the maximum number of blocks in the output
        """
        ...
    
    def GetMaximumNumberOfBlocksMinValue(self):
        """
        V.GetMaximumNumberOfBlocksMinValue() -> int
        C++: virtual int GetMaximumNumberOfBlocksMinValue()
        
        Set the maximum number of blocks in the output
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLevels(self):
        """
        V.GetNumberOfLevels() -> int
        C++: virtual int GetNumberOfLevels()
        
        Set the maximum number of levels in the generated
        Overlapping-AMR.
        """
        ...
    
    def GetNumberOfLevelsMaxValue(self):
        """
        V.GetNumberOfLevelsMaxValue() -> int
        C++: virtual int GetNumberOfLevelsMaxValue()
        
        Set the maximum number of levels in the generated
        Overlapping-AMR.
        """
        ...
    
    def GetNumberOfLevelsMinValue(self):
        """
        V.GetNumberOfLevelsMinValue() -> int
        C++: virtual int GetNumberOfLevelsMinValue()
        
        Set the maximum number of levels in the generated
        Overlapping-AMR.
        """
        ...
    
    def GetRefinementRatio(self):
        """
        V.GetRefinementRatio() -> int
        C++: virtual int GetRefinementRatio()
        
        Set the refinement ratio for levels. This refinement ratio is
        used for all levels.
        """
        ...
    
    def GetRefinementRatioMaxValue(self):
        """
        V.GetRefinementRatioMaxValue() -> int
        C++: virtual int GetRefinementRatioMaxValue()
        
        Set the refinement ratio for levels. This refinement ratio is
        used for all levels.
        """
        ...
    
    def GetRefinementRatioMinValue(self):
        """
        V.GetRefinementRatioMinValue() -> int
        C++: virtual int GetRefinementRatioMinValue()
        
        Set the refinement ratio for levels. This refinement ratio is
        used for all levels.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageToAMR
        C++: vtkImageToAMR *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageToAMR
        C++: static vtkImageToAMR *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximumNumberOfBlocks(self, p_int):
        """
        V.SetMaximumNumberOfBlocks(int)
        C++: virtual void SetMaximumNumberOfBlocks(int _arg)
        
        Set the maximum number of blocks in the output
        """
        ...
    
    def SetNumberOfLevels(self, p_int):
        """
        V.SetNumberOfLevels(int)
        C++: virtual void SetNumberOfLevels(int _arg)
        
        Set the maximum number of levels in the generated
        Overlapping-AMR.
        """
        ...
    
    def SetRefinementRatio(self, p_int):
        """
        V.SetRefinementRatio(int)
        C++: virtual void SetRefinementRatio(int _arg)
        
        Set the refinement ratio for levels. This refinement ratio is
        used for all levels.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParallelAMRUtilities(__vtkmodules_vtkCommonDataModel.vtkAMRUtilities):
    """
    vtkParallelAMRUtilities -  A concrete instance of vtkObject that
    employs a singleton design
     pattern and implements functionality for AMR specific operations.
    
    Superclass: vtkAMRUtilities
    
    @sa
     vtkOverlappingAMR, vtkAMRBox
    """
    def BlankCells(self, vtkOverlappingAMR, vtkMultiProcessController):
        """
        V.BlankCells(vtkOverlappingAMR, vtkMultiProcessController)
        C++: static void BlankCells(vtkOverlappingAMR *amr,
            vtkMultiProcessController *myController)
        
        Blank cells in overlapping AMR
        """
        ...
    
    def DistributeProcessInformation(self, vtkOverlappingAMR, vtkMultiProcessController, Stvector_IiE):
        """
        V.DistributeProcessInformation(vtkOverlappingAMR,
            vtkMultiProcessController, Stvector_IiE)
        C++: static void DistributeProcessInformation(
            vtkOverlappingAMR *amr,
            vtkMultiProcessController *myController,
            std::vector<int> &ProcessMap)
        
        Compute map from block indices to process ids
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParallelAMRUtilities
        C++: vtkParallelAMRUtilities *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParallelAMRUtilities
        C++: static vtkParallelAMRUtilities *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def StripGhostLayers(self, vtkOverlappingAMR, vtkOverlappingAMR_1, vtkMultiProcessController):
        """
        V.StripGhostLayers(vtkOverlappingAMR, vtkOverlappingAMR,
            vtkMultiProcessController)
        C++: static void StripGhostLayers(
            vtkOverlappingAMR *ghostedAMRData,
            vtkOverlappingAMR *strippedAMRData,
            vtkMultiProcessController *myController)
        
        This method detects and strips partially overlapping cells from a
        given AMR dataset. If ghost layers are detected, they are removed
        and new grid instances are created to represent the stripped
        data-set otherwise, each block is shallow-copied.
        
        * .SECTION Assumptions
        * 1) The ghosted AMR data must have complete metadata
          information.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
