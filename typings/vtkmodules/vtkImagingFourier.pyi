"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkImagingCore as __vtkmodules_vtkImagingCore

class vtkImageButterworthHighPass(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageButterworthHighPass - Frequency domain high pass.
    
    Superclass: vtkThreadedImageAlgorithm
    
    This filter only works on an image after it has been converted to
    frequency domain by a vtkImageFFT filter.  A vtkImageRFFT filter can
    be used to convert the output back into the spatial domain.
    vtkImageButterworthHighPass the frequency components around 0 are
    attenuated.  Input and output are in doubles, with two components
    (complex numbers). out(i, j) = 1 / (1 + pow(CutOff/Freq(i,j),
    2*Order));
    
    @sa
    vtkImageButterworthLowPass
    """
    def GetCutOff(self):
        """
        V.GetCutOff() -> (float, float, float)
        C++: virtual double *GetCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrder(self):
        """
        V.GetOrder() -> int
        C++: virtual int GetOrder()
        
        The order determines sharpness of the cutoff curve.
        """
        ...
    
    def GetXCutOff(self):
        """
        V.GetXCutOff() -> float
        C++: double GetXCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetYCutOff(self):
        """
        V.GetYCutOff() -> float
        C++: double GetYCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetZCutOff(self):
        """
        V.GetZCutOff() -> float
        C++: double GetZCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageButterworthHighPass
        C++: vtkImageButterworthHighPass *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageButterworthHighPass
        C++: static vtkImageButterworthHighPass *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCutOff(self, p_float, p_float_1, p_float_2):
        """
        V.SetCutOff(float, float, float)
        C++: virtual void SetCutOff(double _arg1, double _arg2,
            double _arg3)
        V.SetCutOff((float, float, float))
        C++: virtual void SetCutOff(const double _arg[3])
        V.SetCutOff(float)
        C++: void SetCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetOrder(self, p_int):
        """
        V.SetOrder(int)
        C++: virtual void SetOrder(int _arg)
        
        The order determines sharpness of the cutoff curve.
        """
        ...
    
    def SetXCutOff(self, p_float):
        """
        V.SetXCutOff(float)
        C++: void SetXCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetYCutOff(self, p_float):
        """
        V.SetYCutOff(float)
        C++: void SetYCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetZCutOff(self, p_float):
        """
        V.SetZCutOff(float)
        C++: void SetZCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageButterworthLowPass(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageButterworthLowPass - Frequency domain Low pass.
    
    Superclass: vtkThreadedImageAlgorithm
    
    This filter only works on an image after it has been converted to
    frequency domain by a vtkImageFFT filter.  A vtkImageRFFT filter can
    be used to convert the output back into the spatial domain.
    vtkImageButterworthLowPass the high frequency components are
    attenuated.  Input and output are in doubles, with two components
    (complex numbers). out(i, j) = (1 + pow(CutOff/Freq(i,j), 2*Order));
    
    @sa
    vtkImageButterworthHighPass vtkImageFFT vtkImageRFFT
    """
    def GetCutOff(self):
        """
        V.GetCutOff() -> (float, float, float)
        C++: virtual double *GetCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrder(self):
        """
        V.GetOrder() -> int
        C++: virtual int GetOrder()
        
        The order determines sharpness of the cutoff curve.
        """
        ...
    
    def GetXCutOff(self):
        """
        V.GetXCutOff() -> float
        C++: double GetXCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetYCutOff(self):
        """
        V.GetYCutOff() -> float
        C++: double GetYCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetZCutOff(self):
        """
        V.GetZCutOff() -> float
        C++: double GetZCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageButterworthLowPass
        C++: vtkImageButterworthLowPass *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageButterworthLowPass
        C++: static vtkImageButterworthLowPass *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCutOff(self, p_float, p_float_1, p_float_2):
        """
        V.SetCutOff(float, float, float)
        C++: virtual void SetCutOff(double _arg1, double _arg2,
            double _arg3)
        V.SetCutOff((float, float, float))
        C++: virtual void SetCutOff(const double _arg[3])
        V.SetCutOff(float)
        C++: void SetCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetOrder(self, p_int):
        """
        V.SetOrder(int)
        C++: virtual void SetOrder(int _arg)
        
        The order determines sharpness of the cutoff curve.
        """
        ...
    
    def SetXCutOff(self, p_float):
        """
        V.SetXCutOff(float)
        C++: void SetXCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetYCutOff(self, p_float):
        """
        V.SetYCutOff(float)
        C++: void SetYCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetZCutOff(self, p_float):
        """
        V.SetZCutOff(float)
        C++: void SetZCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageFourierFilter(__vtkmodules_vtkImagingCore.vtkImageDecomposeFilter):
    """
    vtkImageFourierFilter - Superclass that implements complex numbers.
    
    Superclass: vtkImageDecomposeFilter
    
    vtkImageFourierFilter is a class of filters that use complex numbers
    this superclass is a container for methods that manipulate these
    structure including fast Fourier transforms.  Complex numbers may
    become a class. This should really be a helper class.
    """
    def ExecuteFft(self, vtkImageComplex, vtkImageComplex_1, p_int):
        """
        V.ExecuteFft(vtkImageComplex, vtkImageComplex, int)
        C++: void ExecuteFft(vtkImageComplex *in, vtkImageComplex *out,
            int N)
        
        This function calculates the whole fft of an array. The contents
        of the input array are changed. (It is engineered for no
        decimation)
        """
        ...
    
    def ExecuteRfft(self, vtkImageComplex, vtkImageComplex_1, p_int):
        """
        V.ExecuteRfft(vtkImageComplex, vtkImageComplex, int)
        C++: void ExecuteRfft(vtkImageComplex *in, vtkImageComplex *out,
            int N)
        
        This function calculates the whole fft of an array. The contents
        of the input array are changed. (It is engineered for no
        decimation)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageFourierFilter
        C++: vtkImageFourierFilter *NewInstance()
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageFourierFilter
        C++: static vtkImageFourierFilter *SafeDownCast(vtkObjectBase *o)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageFFT(vtkImageFourierFilter):
    """
    vtkImageFFT - Fast Fourier Transform.
    
    Superclass: vtkImageFourierFilter
    
    vtkImageFFT implements a fast Fourier transform.  The input can have
    real or complex data in any components and data types, but the output
    is always complex doubles with real values in component0, and
    imaginary values in component1.  The filter is fastest for images
    that have power of two sizes.  The filter uses a butterfly diagram
    for each prime factor of the dimension.  This makes images with prime
    number dimensions (i.e. 17x17) much slower to compute.  Multi
    dimensional (i.e volumes) FFT's are decomposed so that each axis
    executes serially.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageFFT
        C++: vtkImageFFT *NewInstance()
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageFFT
        C++: static vtkImageFFT *SafeDownCast(vtkObjectBase *o)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageFourierCenter(__vtkmodules_vtkImagingCore.vtkImageDecomposeFilter):
    """
    vtkImageFourierCenter - Shifts constant frequency to center for
    display.
    
    Superclass: vtkImageDecomposeFilter
    
    Is used for dispaying images in frequency space.  FFT converts
    spatial images into frequency space, but puts the zero frequency at
    the origin. This filter shifts the zero frequency to the center of
    the image. Input and output are assumed to be doubles.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageFourierCenter
        C++: vtkImageFourierCenter *NewInstance()
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageFourierCenter
        C++: static vtkImageFourierCenter *SafeDownCast(vtkObjectBase *o)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageIdealHighPass(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageIdealHighPass - Simple frequency domain band pass.
    
    Superclass: vtkThreadedImageAlgorithm
    
    This filter only works on an image after it has been converted to
    frequency domain by a vtkImageFFT filter.  A vtkImageRFFT filter can
    be used to convert the output back into the spatial domain.
    vtkImageIdealHighPass just sets a portion of the image to zero.  The
    sharp cutoff in the frequence domain produces ringing in the spatial
    domain. Input and Output must be doubles.  Dimensionality is set when
    the axes are set.  Defaults to 2D on X and Y axes.
    
    @sa
    vtkImageButterworthHighPass vtkImageIdealLowPass vtkImageFFT
    vtkImageRFFT
    """
    def GetCutOff(self):
        """
        V.GetCutOff() -> (float, float, float)
        C++: virtual double *GetCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetXCutOff(self):
        """
        V.GetXCutOff() -> float
        C++: double GetXCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetYCutOff(self):
        """
        V.GetYCutOff() -> float
        C++: double GetYCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetZCutOff(self):
        """
        V.GetZCutOff() -> float
        C++: double GetZCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageIdealHighPass
        C++: vtkImageIdealHighPass *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageIdealHighPass
        C++: static vtkImageIdealHighPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCutOff(self, p_float, p_float_1, p_float_2):
        """
        V.SetCutOff(float, float, float)
        C++: virtual void SetCutOff(double _arg1, double _arg2,
            double _arg3)
        V.SetCutOff((float, float, float))
        C++: virtual void SetCutOff(const double _arg[3])
        V.SetCutOff(float)
        C++: void SetCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetXCutOff(self, p_float):
        """
        V.SetXCutOff(float)
        C++: void SetXCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetYCutOff(self, p_float):
        """
        V.SetYCutOff(float)
        C++: void SetYCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetZCutOff(self, p_float):
        """
        V.SetZCutOff(float)
        C++: void SetZCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageIdealLowPass(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageIdealLowPass - Simple frequency domain band pass.
    
    Superclass: vtkThreadedImageAlgorithm
    
    This filter only works on an image after it has been converted to
    frequency domain by a vtkImageFFT filter.  A vtkImageRFFT filter can
    be used to convert the output back into the spatial domain.
    vtkImageIdealLowPass just sets a portion of the image to zero.  The
    result is an image with a lot of ringing.  Input and Output must be
    doubles. Dimensionality is set when the axes are set.  Defaults to 2D
    on X and Y axes.
    
    @sa
    vtkImageButterworthLowPass vtkImageIdealHighPass vtkImageFFT
    vtkImageRFFT
    """
    def GetCutOff(self):
        """
        V.GetCutOff() -> (float, float, float)
        C++: virtual double *GetCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetXCutOff(self):
        """
        V.GetXCutOff() -> float
        C++: double GetXCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetYCutOff(self):
        """
        V.GetYCutOff() -> float
        C++: double GetYCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def GetZCutOff(self):
        """
        V.GetZCutOff() -> float
        C++: double GetZCutOff()
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageIdealLowPass
        C++: vtkImageIdealLowPass *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageIdealLowPass
        C++: static vtkImageIdealLowPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCutOff(self, p_float, p_float_1, p_float_2):
        """
        V.SetCutOff(float, float, float)
        C++: virtual void SetCutOff(double _arg1, double _arg2,
            double _arg3)
        V.SetCutOff((float, float, float))
        C++: virtual void SetCutOff(const double _arg[3])
        V.SetCutOff(float)
        C++: void SetCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetXCutOff(self, p_float):
        """
        V.SetXCutOff(float)
        C++: void SetXCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetYCutOff(self, p_float):
        """
        V.SetYCutOff(float)
        C++: void SetYCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def SetZCutOff(self, p_float):
        """
        V.SetZCutOff(float)
        C++: void SetZCutOff(double v)
        
        Set/Get the cutoff frequency for each axis. The values are
        specified in the order X, Y, Z, Time. Units: Cycles per world
        unit (as defined by the data spacing).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageRFFT(vtkImageFourierFilter):
    """
    vtkImageRFFT - Reverse Fast Fourier Transform.
    
    Superclass: vtkImageFourierFilter
    
    vtkImageRFFT implements the reverse fast Fourier transform.  The
    input can have real or complex data in any components and data types,
    but the output is always complex doubles with real values in
    component0, and imaginary values in component1.  The filter is
    fastest for images that have power of two sizes.  The filter uses
    butterfly filters for each prime factor of the dimension.  This makes
    images with prime number dimensions (i.e. 17x17) much slower to
    compute.  Multi dimensional (i.e volumes) FFT's are decomposed so
    that each axis executes in series. In most cases the RFFT will
    produce an image whose imaginary values are all zero's. In this case
    vtkImageExtractComponents can be used to remove this imaginary
    components leaving only the real image.
    
    @sa
    vtkImageExtractComponenents
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageRFFT
        C++: vtkImageRFFT *NewInstance()
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageRFFT
        C++: static vtkImageRFFT *SafeDownCast(vtkObjectBase *o)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTableFFT(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkTableFFT - FFT for table columns
    
    Superclass: vtkTableAlgorithm
    
    vtkTableFFT performs the Fast Fourier Transform on the columns of a
    table. Internally, it shoves each column into an image data and then
    uses vtkImageFFT to perform the actual FFT.
    
    @sa
    vtkImageFFT
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTableFFT
        C++: vtkTableFFT *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTableFFT
        C++: static vtkTableFFT *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
