"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkIOCore as __vtkmodules_vtkIOCore
import vtkmodules.vtkRenderingContext2D as __vtkmodules_vtkRenderingContext2D
import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkExporter(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkExporter - abstract class to write a scene to a file
    
    Superclass: vtkObject
    
    vtkExporter is an abstract class that exports a scene to a file. It
    is very similar to vtkWriter except that a writer only writes out the
    geometric and topological data for an object, where an exporter can
    write out material properties, lighting, camera parameters etc. The
    concrete subclasses of this class may not write out all of this
    information. For example vtkOBJExporter writes out Wavefront obj
    files which do not include support for camera parameters.
    
    vtkExporter provides the convenience methods StartWrite() and
    EndWrite(). These methods are executed before and after execution of
    the Write() method. You can also specify arguments to these methods.
    This class defines SetInput and GetInput methods which take or return
    a vtkRenderWindow.
    @warning
    Every subclass of vtkExporter must implement a WriteData() method.
    
    @sa
    vtkOBJExporter vtkRenderWindow vtkWriter
    """
    def GetActiveRenderer(self):
        """
        V.GetActiveRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetActiveRenderer()
        
        Set/Get the renderer that contains actors to be written. If it is
        set to nullptr (by default), then in most subclasses the behavior
        is to only export actors of the first renderer. In some
        subclasses, if ActiveRenderer is nullptr then actors of all
        renderers will be exported. The renderer must be in the renderer
        collection of the specified RenderWindow.
        \sa SetRenderWindow()
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkRenderWindow
        C++: vtkRenderWindow *GetInput()
        
        These methods are provided for backward compatibility. Will
        disappear soon.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Returns the MTime also considering the RenderWindow.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderWindow(self):
        """
        V.GetRenderWindow() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetRenderWindow()
        
        Set/Get the rendering window that contains the scene to be
        written.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExporter
        C++: vtkExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExporter
        C++: static vtkExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetActiveRenderer(self, vtkRenderer):
        """
        V.SetActiveRenderer(vtkRenderer)
        C++: virtual void SetActiveRenderer(vtkRenderer *)
        
        Set/Get the renderer that contains actors to be written. If it is
        set to nullptr (by default), then in most subclasses the behavior
        is to only export actors of the first renderer. In some
        subclasses, if ActiveRenderer is nullptr then actors of all
        renderers will be exported. The renderer must be in the renderer
        collection of the specified RenderWindow.
        \sa SetRenderWindow()
        """
        ...
    
    def SetEndWrite(self, function):
        """
        V.SetEndWrite(function)
        C++: void SetEndWrite(void (*f)(void *), void *arg)
        
        Specify a function to be called after data is written. Function
        will be called with argument provided.
        """
        ...
    
    def SetInput(self, vtkRenderWindow):
        """
        V.SetInput(vtkRenderWindow)
        C++: void SetInput(vtkRenderWindow *renWin)
        
        These methods are provided for backward compatibility. Will
        disappear soon.
        """
        ...
    
    def SetRenderWindow(self, vtkRenderWindow):
        """
        V.SetRenderWindow(vtkRenderWindow)
        C++: virtual void SetRenderWindow(vtkRenderWindow *)
        
        Set/Get the rendering window that contains the scene to be
        written.
        """
        ...
    
    def SetStartWrite(self, function):
        """
        V.SetStartWrite(function)
        C++: void SetStartWrite(void (*f)(void *), void *arg)
        
        Specify a function to be called before data is written.  Function
        will be called with argument provided.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update()
        
        Convenient alias for Write() method.
        """
        ...
    
    def Write(self):
        """
        V.Write()
        C++: virtual void Write()
        
        Write data to output. Method executes subclasses WriteData()
        method, as well as StartWrite() and EndWrite() methods.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGLTFExporter(vtkExporter):
    """
    vtkGLTFExporter - export a scene into GLTF 2.0 format.
    
    Superclass: vtkExporter
    
    vtkGLTFExporter is a concrete subclass of vtkExporter that writes
    GLTF 2.0 files. It currently only supports a very small subset of
    what VTK can do including polygonal meshes with optional vertex
    colors. Over time the class can be expanded to support more and more
    of what VTK renders.
    
    It should be noted that gltf is a format for rendering data. As such
    it stores what the VTK scene renders as, not the underlying data. For
    example it currently does not support quads or higher sided polygons
    although VTK does. As such taking an exported gltf file and then
    selecting wireframe in a viewer will give all triangles where VTK's
    rendering would correctly draw the original polygons. etc.
    
    @sa
    vtkExporter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the name of the GLTF file to write.
        """
        ...
    
    def GetInlineData(self):
        """
        V.GetInlineData() -> bool
        C++: virtual bool GetInlineData()
        
        Should the binary data be included in the json file as a base64
        string.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSaveBatchId(self):
        """
        V.GetSaveBatchId() -> bool
        C++: virtual bool GetSaveBatchId()
        
        It looks for point arrays called _BATCHID in the data and it
        saves it in the GLTF file if found. _BATCHID is an index used in
        3D Tiles b3dm format. This format stores a binary gltf with a
        mesh that has several objects (buildings). Objects are indexed
        from 0 to number of objects - 1, all points of an objects have
        the same index. These index values are stored in _BATCHID
        """
        ...
    
    def GetSaveNormal(self):
        """
        V.GetSaveNormal() -> bool
        C++: virtual bool GetSaveNormal()
        
        It looks for a point array called NORMAL in the data and it saves
        it in the GLTF file if found. NORMAL is the vertex normal. Cesium
        needs this to render buildings correctly if there is no texture.
        """
        ...
    
    def InlineDataOff(self):
        """
        V.InlineDataOff()
        C++: virtual void InlineDataOff()
        
        Should the binary data be included in the json file as a base64
        string.
        """
        ...
    
    def InlineDataOn(self):
        """
        V.InlineDataOn()
        C++: virtual void InlineDataOn()
        
        Should the binary data be included in the json file as a base64
        string.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGLTFExporter
        C++: vtkGLTFExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGLTFExporter
        C++: static vtkGLTFExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SaveBatchIdOff(self):
        """
        V.SaveBatchIdOff()
        C++: virtual void SaveBatchIdOff()
        
        It looks for point arrays called _BATCHID in the data and it
        saves it in the GLTF file if found. _BATCHID is an index used in
        3D Tiles b3dm format. This format stores a binary gltf with a
        mesh that has several objects (buildings). Objects are indexed
        from 0 to number of objects - 1, all points of an objects have
        the same index. These index values are stored in _BATCHID
        """
        ...
    
    def SaveBatchIdOn(self):
        """
        V.SaveBatchIdOn()
        C++: virtual void SaveBatchIdOn()
        
        It looks for point arrays called _BATCHID in the data and it
        saves it in the GLTF file if found. _BATCHID is an index used in
        3D Tiles b3dm format. This format stores a binary gltf with a
        mesh that has several objects (buildings). Objects are indexed
        from 0 to number of objects - 1, all points of an objects have
        the same index. These index values are stored in _BATCHID
        """
        ...
    
    def SaveNormalOff(self):
        """
        V.SaveNormalOff()
        C++: virtual void SaveNormalOff()
        
        It looks for a point array called NORMAL in the data and it saves
        it in the GLTF file if found. NORMAL is the vertex normal. Cesium
        needs this to render buildings correctly if there is no texture.
        """
        ...
    
    def SaveNormalOn(self):
        """
        V.SaveNormalOn()
        C++: virtual void SaveNormalOn()
        
        It looks for a point array called NORMAL in the data and it saves
        it in the GLTF file if found. NORMAL is the vertex normal. Cesium
        needs this to render buildings correctly if there is no texture.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the name of the GLTF file to write.
        """
        ...
    
    def SetInlineData(self, bool):
        """
        V.SetInlineData(bool)
        C++: virtual void SetInlineData(bool _arg)
        
        Should the binary data be included in the json file as a base64
        string.
        """
        ...
    
    def SetSaveBatchId(self, bool):
        """
        V.SetSaveBatchId(bool)
        C++: virtual void SetSaveBatchId(bool _arg)
        
        It looks for point arrays called _BATCHID in the data and it
        saves it in the GLTF file if found. _BATCHID is an index used in
        3D Tiles b3dm format. This format stores a binary gltf with a
        mesh that has several objects (buildings). Objects are indexed
        from 0 to number of objects - 1, all points of an objects have
        the same index. These index values are stored in _BATCHID
        """
        ...
    
    def SetSaveNormal(self, bool):
        """
        V.SetSaveNormal(bool)
        C++: virtual void SetSaveNormal(bool _arg)
        
        It looks for a point array called NORMAL in the data and it saves
        it in the GLTF file if found. NORMAL is the vertex normal. Cesium
        needs this to render buildings correctly if there is no texture.
        """
        ...
    
    def WriteToString(self):
        """
        V.WriteToString() -> string
        C++: std::string WriteToString()
        
        Write the result to a string instead of a file
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkIVExporter(vtkExporter):
    """
    vtkIVExporter - export a scene into OpenInventor 2.0 format.
    
    Superclass: vtkExporter
    
    vtkIVExporter is a concrete subclass of vtkExporter that writes
    OpenInventor 2.0 files.
    
    @sa
    vtkExporter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the name of the OpenInventor file to write.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkIVExporter
        C++: vtkIVExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkIVExporter
        C++: static vtkIVExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the name of the OpenInventor file to write.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkJSONDataSetWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkJSONDataSetWriter - write vtkDataSet using a vtkArchiver with a
    JSON meta file along
             with all the binary arrays written as standalone binary
    files.
    
    Superclass: vtkWriter
    
    The generated format can be used by vtk.js using the reader below
            
    https://kitware.github.io/vtk-js/examples/HttpDataSetReader.html
    
    vtkJSONDataSetWriter writes vtkImageData / vtkPolyData into a set of
    files representing each arrays that compose the dataset along with a
    JSON meta file that describe what they are and how they should be
    assembled into an actual vtkDataSet.
    
    @warning
    This writer assume LittleEndian by default. Additional work should be
    done to properly handle endianness.
    
    @sa
    vtkArchiver
    """
    def ComputeMD5(self, int_tuple, p_int, string):
        """
        V.ComputeMD5((int, ...), int, string)
        C++: static void ComputeMD5(const unsigned char *content,
            int size, std::string &hash)
        
        Compute a MD5 digest of a void/(const unsigned char) pointer to
        compute a
         string hash
        """
        ...
    
    def GetArchiver(self):
        """
        V.GetArchiver() -> vtkArchiver
        C++: virtual vtkArchiver *GetArchiver()
        
        Specify the Scene Archiver object
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk data file to write. This correspond to
        the root directory of the data to write. DEPRECATED: use the
        Archive's API instead.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataSet
        C++: vtkDataSet *GetInput()
        V.GetInput(int) -> vtkDataSet
        C++: vtkDataSet *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShortType(self, vtkDataArray, bool):
        """
        V.GetShortType(vtkDataArray, bool) -> string
        C++: static std::string GetShortType(vtkDataArray *input,
            bool &needConversion)
        
        Compute the target JavaScript typed array name for the given
        vtkDataArray (Uin8, Uint16, Uin32, Int8, Int16, Int32, Float32,
        Float64) or "xxx" if no match found
        
        Since Uint64 and Int64 does not exist in JavaScript, the
        needConversion argument will be set to true and Uint32/Int32 will
        be returned instead.
        """
        ...
    
    def GetUID(self, vtkDataArray, bool):
        """
        V.GetUID(vtkDataArray, bool) -> string
        C++: static std::string GetUID(vtkDataArray *,
            bool &needConversion)
        
        Return a Unique identifier for that array (i.e.:
        Float32_356_13f880891af7b77262c49cae09a41e28 )
        """
        ...
    
    def GetValidString(self, string):
        """
        V.GetValidString(string) -> string
        C++: std::string GetValidString(const char *)
        
        Return a Unique identifier for any invalid string
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsDataSetValid(self):
        """
        V.IsDataSetValid() -> bool
        C++: bool IsDataSetValid()
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkJSONDataSetWriter
        C++: vtkJSONDataSetWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkJSONDataSetWriter
        C++: static vtkJSONDataSetWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetArchiver(self, vtkArchiver):
        """
        V.SetArchiver(vtkArchiver)
        C++: virtual void SetArchiver(vtkArchiver *)
        
        Specify the Scene Archiver object
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *)
        
        Specify file name of vtk data file to write. This correspond to
        the root directory of the data to write. DEPRECATED: use the
        Archive's API instead.
        """
        ...
    
    def Write(self, vtkDataSet):
        """
        V.Write(vtkDataSet)
        C++: void Write(vtkDataSet *)
        V.Write() -> int
        C++: virtual int Write()
        """
        ...
    
    def WriteArrayAsRAW(self, vtkDataArray, string):
        """
        V.WriteArrayAsRAW(vtkDataArray, string) -> bool
        C++: static bool WriteArrayAsRAW(vtkDataArray *,
            const char *filePath)
        
        For backwards compatiblity, this static method writes a data
        array's contents directly to a file.
        """
        ...
    
    def WriteArrayContents(self, vtkDataArray, string):
        """
        V.WriteArrayContents(vtkDataArray, string) -> bool
        C++: bool WriteArrayContents(vtkDataArray *,
            const char *relativeFilePath)
        
        Write the contents of the vtkDataArray to disk based on the
        filePath provided without any extra information. Just the raw
        data will be written.
        
        If vtkDataArray is a Uint64 or Int64, the data will be converted
        to Uint32 or Int32 before being written.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkJSONRenderWindowExporter(vtkExporter):
    """
    vtkJSONRenderWindowExporter - Exports a render window for vtk-js
    
    Superclass: vtkExporter
    
    vtkJSONRenderWindowExporter constructs a scene graph from an input
    render window and generates an archive for vtk-js. The traversal of
    the scene graph topology is handled by graph elements constructed by
    vtkVtkJSViewNodeFactory, the translation from VTK to vtk-js scene
    elements (renderers, actors, mappers, etc.) is handled by
    vtkVtkJSSceneGraphSerializer, and the transcription of data is
    handled by vtkArchiver. The latter two classes are designed to be
    extensible via inheritance, and derived instances can be used to
    modify the vtk-js file format and output mode.
    
    @sa
    vtkVtkJSSceneGraphSerializer vtkVtkJSViewNodeFactory
    """
    def CompactOutputOff(self):
        """
        V.CompactOutputOff()
        C++: virtual void CompactOutputOff()
        
        Write scene in compact form (default is true).
        """
        ...
    
    def CompactOutputOn(self):
        """
        V.CompactOutputOn()
        C++: virtual void CompactOutputOn()
        
        Write scene in compact form (default is true).
        """
        ...
    
    def GetArchiver(self):
        """
        V.GetArchiver() -> vtkArchiver
        C++: virtual vtkArchiver *GetArchiver()
        
        Specify the Archiver object
        """
        ...
    
    def GetCompactOutput(self):
        """
        V.GetCompactOutput() -> bool
        C++: virtual bool GetCompactOutput()
        
        Write scene in compact form (default is true).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSerializer(self):
        """
        V.GetSerializer() -> vtkVtkJSSceneGraphSerializer
        C++: virtual vtkVtkJSSceneGraphSerializer *GetSerializer()
        
        Specify the Serializer object
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkJSONRenderWindowExporter
        C++: vtkJSONRenderWindowExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkJSONRenderWindowExporter
        C++: static vtkJSONRenderWindowExporter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetArchiver(self, vtkArchiver):
        """
        V.SetArchiver(vtkArchiver)
        C++: virtual void SetArchiver(vtkArchiver *)
        
        Specify the Archiver object
        """
        ...
    
    def SetCompactOutput(self, bool):
        """
        V.SetCompactOutput(bool)
        C++: virtual void SetCompactOutput(bool _arg)
        
        Write scene in compact form (default is true).
        """
        ...
    
    def SetSerializer(self, vtkVtkJSSceneGraphSerializer):
        """
        V.SetSerializer(vtkVtkJSSceneGraphSerializer)
        C++: virtual void SetSerializer(vtkVtkJSSceneGraphSerializer *)
        
        Specify the Serializer object
        """
        ...
    
    def WriteData(self):
        """
        V.WriteData()
        C++: virtual void WriteData() override;
        
        Write scene data.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkJSONSceneExporter(vtkExporter):
    """
    vtkJSONSceneExporter - Export the content of a vtkRenderWindow into a
    directory with
             a JSON meta file describing the scene along with the http
    datasets
    
    Superclass: vtkExporter
    
    @warning
    This writer assume LittleEndian by default. Additional work should be
    done to properly handle endianness.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk data file to write. This correspond to
        the root directory of the data to write.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPolyLODsBaseSize(self):
        """
        V.GetPolyLODsBaseSize() -> int
        C++: virtual size_t GetPolyLODsBaseSize()
        
        The base size to be used for poly LODs. The poly LODs will stop
        being written out when one is smaller than this size, or if the
        difference in the sizes of the two most recent LODs is less than
        5%. Default is 100 KB. Units are in bytes.
        """
        ...
    
    def GetPolyLODsBaseUrl(self):
        """
        V.GetPolyLODsBaseUrl() -> string
        C++: virtual char *GetPolyLODsBaseUrl()
        
        The base URL to be used for poly LODs. Default is nullptr.
        """
        ...
    
    def GetTextureLODsBaseSize(self):
        """
        V.GetTextureLODsBaseSize() -> int
        C++: virtual size_t GetTextureLODsBaseSize()
        
        The base size to be used for texture LODs. The texture LODs will
        stop being written out when one is smaller than this size.
        Default is 100 KB. Units are in bytes.
        """
        ...
    
    def GetTextureLODsBaseUrl(self):
        """
        V.GetTextureLODsBaseUrl() -> string
        C++: virtual char *GetTextureLODsBaseUrl()
        
        The base URL to be used for texture LODs. Default is nullptr.
        """
        ...
    
    def GetWritePolyLODs(self):
        """
        V.GetWritePolyLODs() -> bool
        C++: virtual bool GetWritePolyLODs()
        
        Whether or not to write poly LODs. This will write out the poly
        LOD sources in a series of decreasing resolution data sets, which
        are intended to be uploaded to the web. vtkQuadricCluster is used
        to decrease the resolution of the poly data. Each will be
        approximately 1/4 the size of the previous one (unless certain
        errors occur, and then the defaults for quadric clustering will
        be used, which will produce an unknown size). The files will stop
        being written out when one is smaller than the PolyLODsBaseSize,
        or if the difference in the sizes of the two most recent LODs is
        less than 5%. The smallest LOD will be written into the vtkjs
        file, rather than with the rest of the LODs. Default is false.
        """
        ...
    
    def GetWriteTextureLODs(self):
        """
        V.GetWriteTextureLODs() -> bool
        C++: virtual bool GetWriteTextureLODs()
        
        Whether or not to write texture LODs. This will write out the
        textures in a series of decreasing resolution JPEG files, which
        are intended to be uploaded to the web. Each file will be 1/4 the
        size of the previous one. The files will stop being written out
        when one is smaller than the TextureLODsBaseSize. Default is
        false.
        """
        ...
    
    def GetWriteTextures(self):
        """
        V.GetWriteTextures() -> bool
        C++: virtual bool GetWriteTextures()
        
        Whether or not to write textures. Textures will be written in
        JPEG format. Default is false.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkJSONSceneExporter
        C++: vtkJSONSceneExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkJSONSceneExporter
        C++: static vtkJSONSceneExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of vtk data file to write. This correspond to
        the root directory of the data to write.
        """
        ...
    
    def SetPolyLODsBaseSize(self, p_int):
        """
        V.SetPolyLODsBaseSize(int)
        C++: virtual void SetPolyLODsBaseSize(size_t _arg)
        
        The base size to be used for poly LODs. The poly LODs will stop
        being written out when one is smaller than this size, or if the
        difference in the sizes of the two most recent LODs is less than
        5%. Default is 100 KB. Units are in bytes.
        """
        ...
    
    def SetPolyLODsBaseUrl(self, string):
        """
        V.SetPolyLODsBaseUrl(string)
        C++: virtual void SetPolyLODsBaseUrl(const char *_arg)
        
        The base URL to be used for poly LODs. Default is nullptr.
        """
        ...
    
    def SetTextureLODsBaseSize(self, p_int):
        """
        V.SetTextureLODsBaseSize(int)
        C++: virtual void SetTextureLODsBaseSize(size_t _arg)
        
        The base size to be used for texture LODs. The texture LODs will
        stop being written out when one is smaller than this size.
        Default is 100 KB. Units are in bytes.
        """
        ...
    
    def SetTextureLODsBaseUrl(self, string):
        """
        V.SetTextureLODsBaseUrl(string)
        C++: virtual void SetTextureLODsBaseUrl(const char *_arg)
        
        The base URL to be used for texture LODs. Default is nullptr.
        """
        ...
    
    def SetWritePolyLODs(self, bool):
        """
        V.SetWritePolyLODs(bool)
        C++: virtual void SetWritePolyLODs(bool _arg)
        
        Whether or not to write poly LODs. This will write out the poly
        LOD sources in a series of decreasing resolution data sets, which
        are intended to be uploaded to the web. vtkQuadricCluster is used
        to decrease the resolution of the poly data. Each will be
        approximately 1/4 the size of the previous one (unless certain
        errors occur, and then the defaults for quadric clustering will
        be used, which will produce an unknown size). The files will stop
        being written out when one is smaller than the PolyLODsBaseSize,
        or if the difference in the sizes of the two most recent LODs is
        less than 5%. The smallest LOD will be written into the vtkjs
        file, rather than with the rest of the LODs. Default is false.
        """
        ...
    
    def SetWriteTextureLODs(self, bool):
        """
        V.SetWriteTextureLODs(bool)
        C++: virtual void SetWriteTextureLODs(bool _arg)
        
        Whether or not to write texture LODs. This will write out the
        textures in a series of decreasing resolution JPEG files, which
        are intended to be uploaded to the web. Each file will be 1/4 the
        size of the previous one. The files will stop being written out
        when one is smaller than the TextureLODsBaseSize. Default is
        false.
        """
        ...
    
    def SetWriteTextures(self, bool):
        """
        V.SetWriteTextures(bool)
        C++: virtual void SetWriteTextures(bool _arg)
        
        Whether or not to write textures. Textures will be written in
        JPEG format. Default is false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOBJExporter(vtkExporter):
    """
    vtkOBJExporter - export a scene into Wavefront format.
    
    Superclass: vtkExporter
    
    vtkOBJExporter is a concrete subclass of vtkExporter that writes
    wavefront .OBJ files in ASCII form. It also writes out a mtl file
    that contains the material properties. The filenames are derived by
    appending the .obj and .mtl suffix onto the user specified
    FilePrefix.
    
    @sa
    vtkExporter
    """
    def GetFilePrefix(self):
        """
        V.GetFilePrefix() -> string
        C++: virtual char *GetFilePrefix()
        
        Specify the prefix of the files to write out. The resulting
        filenames will have .obj and .mtl appended to them.
        """
        ...
    
    def GetMTLFileComment(self):
        """
        V.GetMTLFileComment() -> string
        C++: virtual char *GetMTLFileComment()
        
        Specify comment string that will be written to the mtl file
        header.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOBJFileComment(self):
        """
        V.GetOBJFileComment() -> string
        C++: virtual char *GetOBJFileComment()
        
        Specify comment string that will be written to the obj file
        header.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOBJExporter
        C++: vtkOBJExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOBJExporter
        C++: static vtkOBJExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFilePrefix(self, string):
        """
        V.SetFilePrefix(string)
        C++: virtual void SetFilePrefix(const char *_arg)
        
        Specify the prefix of the files to write out. The resulting
        filenames will have .obj and .mtl appended to them.
        """
        ...
    
    def SetMTLFileComment(self, string):
        """
        V.SetMTLFileComment(string)
        C++: virtual void SetMTLFileComment(const char *_arg)
        
        Specify comment string that will be written to the mtl file
        header.
        """
        ...
    
    def SetOBJFileComment(self, string):
        """
        V.SetOBJFileComment(string)
        C++: virtual void SetOBJFileComment(const char *_arg)
        
        Specify comment string that will be written to the obj file
        header.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOOGLExporter(vtkExporter):
    """
    vtkOOGLExporter - export a scene into Geomview OOGL format.
    
    Superclass: vtkExporter
    
    vtkOOGLExporter is a concrete subclass of vtkExporter that writes
    Geomview OOGL files.
    
    @sa
    vtkExporter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the name of the Geomview file to write.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOOGLExporter
        C++: vtkOOGLExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOOGLExporter
        C++: static vtkOOGLExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the name of the Geomview file to write.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPOVExporter(vtkExporter):
    """
    vtkPOVExporter - Export scene into povray format.
    
    Superclass: vtkExporter
    
    This Exporter can be attached to a render window in order to generate
    scene description files for the Persistence of Vision Raytracer
    www.povray.org.
    
    @par Thanks: Li-Ta Lo (ollie@lanl.gov) and Jim Ahrens
    (ahrens@lanl.gov) Los Alamos National Laboratory
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The filename to save into.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPOVExporter
        C++: vtkPOVExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPOVExporter
        C++: static vtkPOVExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The filename to save into.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRIBExporter(vtkExporter):
    """
    vtkRIBExporter - export a scene into RenderMan RIB format.
    
    Superclass: vtkExporter
    
    vtkRIBExporter is a concrete subclass of vtkExporter that writes a
    Renderman .RIB files. The input specifies a vtkRenderWindow. All
    visible actors and lights will be included in the rib file. The
    following file naming conventions apply:
      rib file - FilePrefix.rib
      image file created by RenderMan - FilePrefix.tif
      texture files - TexturePrefix_0xADDR_MTIME.tif This object does NOT
    generate an image file. The user must run either RenderMan or a
    RenderMan emulator like Blue Moon Ray Tracer (BMRT). vtk properties
    are convert to Renderman shaders as follows:
      Normal property, no texture map - plastic.sl
      Normal property with texture map - txtplastic.sl These two shaders
    must be compiled by the rendering package being used.  vtkRIBExporter
    also supports custom shaders. The shaders are written using the
    Renderman Shading Language. See "The Renderman Companion", ISBN
    0-201-50868, 1989 for details on writing shaders. vtkRIBProperty
    specifies the declarations and parameter settings for custom shaders.
    
    @sa
    vtkExporter vtkRIBProperty vtkRIBLight
    """
    def BackgroundOff(self):
        """
        V.BackgroundOff()
        C++: virtual void BackgroundOff()
        
        Set/Get the background flag. Default is 0 (off). If set, the rib
        file will contain an image shader that will use the renderer
        window's background color. Normally, RenderMan does generate
        backgrounds. Backgrounds are composited into the scene with the
        tiffcomp program that comes with Pixar's RenderMan Toolkit.  In fact,
        Pixar's Renderman will accept an image shader but only sets the
        alpha of the background. Images created this way will still have
        a black background but contain an alpha of 1 at all pixels and
        CANNOT be subsequently composited with other images using
        tiffcomp.  However, other RenderMan compliant renderers like Blue
        Moon Ray Tracing (BMRT) do allow image shaders and properly set
        the background color. If this sounds too confusing, use the
        following rules: If you are using Pixar's Renderman, leave the
        Background off. Otherwise, try setting BackGroundOn and see if
        you get the desired results.
        """
        ...
    
    def BackgroundOn(self):
        """
        V.BackgroundOn()
        C++: virtual void BackgroundOn()
        
        Set/Get the background flag. Default is 0 (off). If set, the rib
        file will contain an image shader that will use the renderer
        window's background color. Normally, RenderMan does generate
        backgrounds. Backgrounds are composited into the scene with the
        tiffcomp program that comes with Pixar's RenderMan Toolkit.  In fact,
        Pixar's Renderman will accept an image shader but only sets the
        alpha of the background. Images created this way will still have
        a black background but contain an alpha of 1 at all pixels and
        CANNOT be subsequently composited with other images using
        tiffcomp.  However, other RenderMan compliant renderers like Blue
        Moon Ray Tracing (BMRT) do allow image shaders and properly set
        the background color. If this sounds too confusing, use the
        following rules: If you are using Pixar's Renderman, leave the
        Background off. Otherwise, try setting BackGroundOn and see if
        you get the desired results.
        """
        ...
    
    def ExportArraysOff(self):
        """
        V.ExportArraysOff()
        C++: virtual void ExportArraysOff()
        
        Set or get the ExportArrays. If ExportArrays is set, then all
        point data, field data, and cell data arrays will get exported
        together with polygons. Default is Off (0).
        """
        ...
    
    def ExportArraysOn(self):
        """
        V.ExportArraysOn()
        C++: virtual void ExportArraysOn()
        
        Set or get the ExportArrays. If ExportArrays is set, then all
        point data, field data, and cell data arrays will get exported
        together with polygons. Default is Off (0).
        """
        ...
    
    def GetBackground(self):
        """
        V.GetBackground() -> int
        C++: virtual vtkTypeBool GetBackground()
        
        Set/Get the background flag. Default is 0 (off). If set, the rib
        file will contain an image shader that will use the renderer
        window's background color. Normally, RenderMan does generate
        backgrounds. Backgrounds are composited into the scene with the
        tiffcomp program that comes with Pixar's RenderMan Toolkit.  In fact,
        Pixar's Renderman will accept an image shader but only sets the
        alpha of the background. Images created this way will still have
        a black background but contain an alpha of 1 at all pixels and
        CANNOT be subsequently composited with other images using
        tiffcomp.  However, other RenderMan compliant renderers like Blue
        Moon Ray Tracing (BMRT) do allow image shaders and properly set
        the background color. If this sounds too confusing, use the
        following rules: If you are using Pixar's Renderman, leave the
        Background off. Otherwise, try setting BackGroundOn and see if
        you get the desired results.
        """
        ...
    
    def GetExportArrays(self):
        """
        V.GetExportArrays() -> int
        C++: virtual vtkTypeBool GetExportArrays()
        
        Set or get the ExportArrays. If ExportArrays is set, then all
        point data, field data, and cell data arrays will get exported
        together with polygons. Default is Off (0).
        """
        ...
    
    def GetExportArraysMaxValue(self):
        """
        V.GetExportArraysMaxValue() -> int
        C++: virtual vtkTypeBool GetExportArraysMaxValue()
        
        Set or get the ExportArrays. If ExportArrays is set, then all
        point data, field data, and cell data arrays will get exported
        together with polygons. Default is Off (0).
        """
        ...
    
    def GetExportArraysMinValue(self):
        """
        V.GetExportArraysMinValue() -> int
        C++: virtual vtkTypeBool GetExportArraysMinValue()
        
        Set or get the ExportArrays. If ExportArrays is set, then all
        point data, field data, and cell data arrays will get exported
        together with polygons. Default is Off (0).
        """
        ...
    
    def GetFilePrefix(self):
        """
        V.GetFilePrefix() -> string
        C++: virtual char *GetFilePrefix()
        
        Specify the prefix of the files to write out. The resulting file
        names will have .rib appended to them.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPixelSamples(self):
        """
        V.GetPixelSamples() -> (int, int)
        C++: virtual int *GetPixelSamples()
        
        Specify the sampling rate for the rendering. Default is 2 2.
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> (int, int)
        C++: virtual int *GetSize()
        
        Specify the size of the image for RenderMan. If none is
        specified, the size of the render window will be used.
        """
        ...
    
    def GetTexturePrefix(self):
        """
        V.GetTexturePrefix() -> string
        C++: virtual char *GetTexturePrefix()
        
        Specify the prefix of any generated texture files.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRIBExporter
        C++: vtkRIBExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRIBExporter
        C++: static vtkRIBExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBackground(self, p_int):
        """
        V.SetBackground(int)
        C++: virtual void SetBackground(vtkTypeBool _arg)
        
        Set/Get the background flag. Default is 0 (off). If set, the rib
        file will contain an image shader that will use the renderer
        window's background color. Normally, RenderMan does generate
        backgrounds. Backgrounds are composited into the scene with the
        tiffcomp program that comes with Pixar's RenderMan Toolkit.  In fact,
        Pixar's Renderman will accept an image shader but only sets the
        alpha of the background. Images created this way will still have
        a black background but contain an alpha of 1 at all pixels and
        CANNOT be subsequently composited with other images using
        tiffcomp.  However, other RenderMan compliant renderers like Blue
        Moon Ray Tracing (BMRT) do allow image shaders and properly set
        the background color. If this sounds too confusing, use the
        following rules: If you are using Pixar's Renderman, leave the
        Background off. Otherwise, try setting BackGroundOn and see if
        you get the desired results.
        """
        ...
    
    def SetExportArrays(self, p_int):
        """
        V.SetExportArrays(int)
        C++: virtual void SetExportArrays(vtkTypeBool _arg)
        
        Set or get the ExportArrays. If ExportArrays is set, then all
        point data, field data, and cell data arrays will get exported
        together with polygons. Default is Off (0).
        """
        ...
    
    def SetFilePrefix(self, string):
        """
        V.SetFilePrefix(string)
        C++: virtual void SetFilePrefix(const char *_arg)
        
        Specify the prefix of the files to write out. The resulting file
        names will have .rib appended to them.
        """
        ...
    
    def SetPixelSamples(self, p_int, p_int_1):
        """
        V.SetPixelSamples(int, int)
        C++: virtual void SetPixelSamples(int _arg1, int _arg2)
        V.SetPixelSamples((int, int))
        C++: void SetPixelSamples(const int _arg[2])
        
        Specify the sampling rate for the rendering. Default is 2 2.
        """
        ...
    
    def SetSize(self, p_int, p_int_1):
        """
        V.SetSize(int, int)
        C++: virtual void SetSize(int _arg1, int _arg2)
        V.SetSize((int, int))
        C++: void SetSize(const int _arg[2])
        
        Specify the size of the image for RenderMan. If none is
        specified, the size of the render window will be used.
        """
        ...
    
    def SetTexturePrefix(self, string):
        """
        V.SetTexturePrefix(string)
        C++: virtual void SetTexturePrefix(const char *_arg)
        
        Specify the prefix of any generated texture files.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRIBLight(__vtkmodules_vtkRenderingCore.vtkLight):
    """
    vtkRIBLight - RIP Light
    
    Superclass: vtkLight
    
    vtkRIBLight is a subclass of vtkLight that allows the user to specify
    light source shaders and shadow casting lights for use with
    RenderMan.
    
    @sa
    vtkRIBExporter vtkRIBProperty
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShadows(self):
        """
        V.GetShadows() -> int
        C++: virtual vtkTypeBool GetShadows()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRIBLight
        C++: vtkRIBLight *NewInstance()
        """
        ...
    
    def Render(self, vtkRenderer, p_int):
        """
        V.Render(vtkRenderer, int)
        C++: void Render(vtkRenderer *ren, int index) override;
        
        Abstract interface to renderer. Each concrete subclass of
        vtkLight will load its data into the graphics system in response
        to this method invocation. The actual loading is performed by a
        vtkLightDevice subclass, which will get created automatically.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRIBLight
        C++: static vtkRIBLight *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetShadows(self, p_int):
        """
        V.SetShadows(int)
        C++: virtual void SetShadows(vtkTypeBool _arg)
        """
        ...
    
    def ShadowsOff(self):
        """
        V.ShadowsOff()
        C++: virtual void ShadowsOff()
        """
        ...
    
    def ShadowsOn(self):
        """
        V.ShadowsOn()
        C++: virtual void ShadowsOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRIBProperty(__vtkmodules_vtkRenderingCore.vtkProperty):
    """
    vtkRIBProperty - RIP Property
    
    Superclass: vtkProperty
    
    vtkRIBProperty is a subclass of vtkProperty that allows the user to
    specify named shaders for use with RenderMan. Both surface and
    displacement shaders can be specified. Parameters for the shaders can
    be declared and set.
    
    @sa
    vtkRIBExporter vtkRIBLight
    """
    def AddDisplacementShaderParameter(self, string, string_1):
        """
        V.AddDisplacementShaderParameter(string, string)
        C++: void AddDisplacementShaderParameter(const char *parameter,
            const char *value)
        
        Specify parameter values for displacement shader parameters
        """
        ...
    
    def AddParameter(self, string, string_1):
        """
        V.AddParameter(string, string)
        C++: void AddParameter(const char *parameter, const char *value)
        
        Specify parameter values for variables. DEPRECATED: use
        (Set/Add)SurfaceShaderParameter instead.
        """
        ...
    
    def AddSurfaceShaderParameter(self, string, string_1):
        """
        V.AddSurfaceShaderParameter(string, string)
        C++: void AddSurfaceShaderParameter(const char *parameter,
            const char *value)
        
        Specify parameter values for surface shader parameters
        """
        ...
    
    def AddVariable(self, string, string_1):
        """
        V.AddVariable(string, string)
        C++: void AddVariable(const char *variable,
            const char *declaration)
        
        Specify declarations for variables..
        """
        ...
    
    def GetDeclarations(self):
        """
        V.GetDeclarations() -> string
        C++: char *GetDeclarations()
        
        Get variable declarations
        """
        ...
    
    def GetDisplacementShader(self):
        """
        V.GetDisplacementShader() -> string
        C++: virtual char *GetDisplacementShader()
        
        Specify the name of a displacement shader.
        """
        ...
    
    def GetDisplacementShaderParameters(self):
        """
        V.GetDisplacementShaderParameters() -> string
        C++: char *GetDisplacementShaderParameters()
        
        Get parameters.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetParameters(self):
        """
        V.GetParameters() -> string
        C++: char *GetParameters()
        
        Get parameters.
        """
        ...
    
    def GetSurfaceShader(self):
        """
        V.GetSurfaceShader() -> string
        C++: virtual char *GetSurfaceShader()
        
        Specify the name of a surface shader.
        """
        ...
    
    def GetSurfaceShaderParameters(self):
        """
        V.GetSurfaceShaderParameters() -> string
        C++: char *GetSurfaceShaderParameters()
        
        Get parameters.
        """
        ...
    
    def GetSurfaceShaderUsesDefaultParameters(self):
        """
        V.GetSurfaceShaderUsesDefaultParameters() -> bool
        C++: virtual bool GetSurfaceShaderUsesDefaultParameters()
        
        If true (default) the surface shader uses the usual shader
        parameters: Ka - Ambient amount Kd - Diffuse amount Ks - Specular
        amount Roughness SpecularColor Additional surface shader
        parameters can be added with the Set/AddSurfaceShaderParameter
        methods. If false, all surface shader parameters must be
        specified
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRIBProperty
        C++: vtkRIBProperty *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRIBProperty
        C++: static vtkRIBProperty *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDisplacementShader(self, string):
        """
        V.SetDisplacementShader(string)
        C++: virtual void SetDisplacementShader(const char *_arg)
        
        Specify the name of a displacement shader.
        """
        ...
    
    def SetDisplacementShaderParameter(self, string, string_1):
        """
        V.SetDisplacementShaderParameter(string, string)
        C++: void SetDisplacementShaderParameter(const char *parameter,
            const char *value)
        
        Specify parameter values for displacement shader parameters
        """
        ...
    
    def SetParameter(self, string, string_1):
        """
        V.SetParameter(string, string)
        C++: void SetParameter(const char *parameter, const char *value)
        
        Specify parameter values for variables. DEPRECATED: use
        (Set/Add)SurfaceShaderParameter instead.
        """
        ...
    
    def SetSurfaceShader(self, string):
        """
        V.SetSurfaceShader(string)
        C++: virtual void SetSurfaceShader(const char *_arg)
        
        Specify the name of a surface shader.
        """
        ...
    
    def SetSurfaceShaderParameter(self, string, string_1):
        """
        V.SetSurfaceShaderParameter(string, string)
        C++: void SetSurfaceShaderParameter(const char *parameter,
            const char *value)
        
        Specify parameter values for surface shader parameters
        """
        ...
    
    def SetSurfaceShaderUsesDefaultParameters(self, bool):
        """
        V.SetSurfaceShaderUsesDefaultParameters(bool)
        C++: virtual void SetSurfaceShaderUsesDefaultParameters(bool _arg)
        
        If true (default) the surface shader uses the usual shader
        parameters: Ka - Ambient amount Kd - Diffuse amount Ks - Specular
        amount Roughness SpecularColor Additional surface shader
        parameters can be added with the Set/AddSurfaceShaderParameter
        methods. If false, all surface shader parameters must be
        specified
        """
        ...
    
    def SetVariable(self, string, string_1):
        """
        V.SetVariable(string, string)
        C++: void SetVariable(const char *variable,
            const char *declaration)
        
        Specify declarations for variables..
        """
        ...
    
    def SurfaceShaderUsesDefaultParametersOff(self):
        """
        V.SurfaceShaderUsesDefaultParametersOff()
        C++: virtual void SurfaceShaderUsesDefaultParametersOff()
        
        If true (default) the surface shader uses the usual shader
        parameters: Ka - Ambient amount Kd - Diffuse amount Ks - Specular
        amount Roughness SpecularColor Additional surface shader
        parameters can be added with the Set/AddSurfaceShaderParameter
        methods. If false, all surface shader parameters must be
        specified
        """
        ...
    
    def SurfaceShaderUsesDefaultParametersOn(self):
        """
        V.SurfaceShaderUsesDefaultParametersOn()
        C++: virtual void SurfaceShaderUsesDefaultParametersOn()
        
        If true (default) the surface shader uses the usual shader
        parameters: Ka - Ambient amount Kd - Diffuse amount Ks - Specular
        amount Roughness SpecularColor Additional surface shader
        parameters can be added with the Set/AddSurfaceShaderParameter
        methods. If false, all surface shader parameters must be
        specified
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSingleVTPExporter(vtkExporter):
    """
    vtkSingleVTPExporter - export a scene into a single vtp file and png
    texture
    
    Superclass: vtkExporter
    
    vtkSingleVTPExporter is a concrete subclass of vtkExporter that
    writes a .vtp file and a .png file containing the polydata and
    texture elements of the scene.
    
    If ActiveRenderer is specified then it exports contents of
    ActiveRenderer. Otherwise it exports contents of all renderers.
    
    @sa
    vtkExporter
    """
    def GetFilePrefix(self):
        """
        V.GetFilePrefix() -> string
        C++: virtual char *GetFilePrefix()
        
        Specify the prefix of the files to write out. The resulting
        filenames will have .vtp and .png appended to them.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSingleVTPExporter
        C++: vtkSingleVTPExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSingleVTPExporter
        C++: static vtkSingleVTPExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *)
        """
        ...
    
    def SetFilePrefix(self, string):
        """
        V.SetFilePrefix(string)
        C++: virtual void SetFilePrefix(const char *_arg)
        
        Specify the prefix of the files to write out. The resulting
        filenames will have .vtp and .png appended to them.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSVGContextDevice2D(__vtkmodules_vtkRenderingContext2D.vtkContextDevice2D):
    """
    vtkSVGContextDevice2D - vtkContextDevice2D implementation for use
    with vtkSVGExporter.
    
    Superclass: vtkContextDevice2D
    
    Limitations:
    - The Nearest/Linear texture properties are ignored, since SVG
      doesn't provide any reliable control over interpolation.
    - Embedded fonts are experimental and poorly tested. Viewer support
      is lacking at the time of writing, hence the feature is largely
      useless. By default, fonts are not embedded since they're basically
    useless bloat.
    - TextAsPath is enabled by default, since viewers differ wildly in
      how they handle text objects (eg. Inkscape renders at expected
      size, but webkit is way too big).
    - Pattern fills and markers are not shown on some viewers, e.g. KDE's
    okular (Webkit seems to work, though).
    - Clipping seems to be broken in most viewers. Webkit is buggy and
      forces the clip coordinates to objectBoundingBox, even when
      explicitly set to userSpaceOnUse.
    - Many viewers anti-alias the output, leaving thin outlines around
      the triangles that make up larger polygons. This is a viewer issue
      and there not much we can do about it from the VTK side of things
      (and most viewers don't seem to have an antialiasing toggle,
      either...).
    """
    def Begin(self, vtkViewport):
        """
        V.Begin(vtkViewport)
        C++: void Begin(vtkViewport *) override;
        
        Begin drawing, pass in the viewport to set up the view.
        """
        ...
    
    def ComputeJustifiedStringBounds(self, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeJustifiedStringBounds(string, [float, float, float,
            float])
        C++: void ComputeJustifiedStringBounds(const char *string,
            float bounds[4]) override;
        
        Compute the bounds of the supplied string while taking into
        account the justification of the currently applied text property.
        Simple rotations (0, 90, 180, 270) are also correctly taken into
        account.
        """
        ...
    
    def ComputeStringBounds(self, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeStringBounds(string, [float, float, float, float])
        C++: void ComputeStringBounds(const vtkStdString &string,
            float bounds[4]) override;
        V.ComputeStringBounds(unicode, [float, float, float, float])
        C++: void ComputeStringBounds(const vtkUnicodeString &string,
            float bounds[4]) override;
        
        Compute the bounds of the supplied string. The bounds will be
        copied to the supplied bounds variable, the first two elements
        are the bottom corner of the string, and the second two elements
        are the width and height of the bounding box. NOTE: This function
        does not take account of the text rotation or justification.
        """
        ...
    
    def DrawColoredPolygon(self, *float, **kwargs):
        """
        V.DrawColoredPolygon([float, ...], int, [int, ...], int)
        C++: void DrawColoredPolygon(float *points, int numPoints,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        """
        ...
    
    def DrawEllipseWedge(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5, p_float_6, p_float_7):
        """
        V.DrawEllipseWedge(float, float, float, float, float, float,
            float, float)
        C++: void DrawEllipseWedge(float x, float y, float outRx,
            float outRy, float inRx, float inRy, float startAngle,
            float stopAngle) override;
        
        Draw an elliptic wedge with center at x, y, outer radii outRx,
        outRy, inner radii inRx, inRy between angles startAngle and
        stopAngle (expressed in degrees).
        \pre positive_outRx: outRx>=0
        \pre positive_outRy: outRy>=0
        \pre positive_inRx: inRx>=0
        \pre positive_inRy: inRy>=0
        \pre ordered_rx: inRx<=outRx
        \pre ordered_ry: inRy<=outRy
        """
        ...
    
    def DrawEllipticArc(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.DrawEllipticArc(float, float, float, float, float, float)
        C++: void DrawEllipticArc(float x, float y, float rX, float rY,
            float startAngle, float stopAngle) override;
        
        Draw an elliptic arc with center at x,y with radii rX and rY
        between angles startAngle and stopAngle (expressed in degrees).
        \pre positive_rX: rX>=0
        \pre positive_rY: rY>=0
        """
        ...
    
    def DrawImage(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.DrawImage([float, float], float, vtkImageData)
        C++: void DrawImage(float p[2], float scale, vtkImageData *image)
            override;
        V.DrawImage(vtkRectf, vtkImageData)
        C++: void DrawImage(const vtkRectf &pos, vtkImageData *image)
            override;
        
        Draw the supplied image at the given x, y (p[0], p[1]) (bottom
        corner), scaled by scale (1.0 would match the image).
        """
        ...
    
    def DrawLines(self, *float, **kwargs):
        """
        V.DrawLines([float, ...], int, [int, ...], int)
        C++: void DrawLines(float *f, int n,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        
        Draw lines using the points - memory layout is as follows:
        l1p1,l1p2,l2p1,l2p2... The lines will be colored by colors array
        which has nc_comps components (defining a single color).
        \sa DrawPoly()
        """
        ...
    
    def DrawMarkers(self, p_int, bool, *float, **kwargs):
        """
        V.DrawMarkers(int, bool, [float, ...], int, [int, ...], int)
        C++: void DrawMarkers(int shape, bool highlight, float *points,
            int n, unsigned char *colors=nullptr, int nc_comps=0)
            override;
        
        Draw a series of markers centered at the points supplied. The
        shape argument controls the marker shape, and can be one of
        - VTK_MARKER_CROSS
        - VTK_MARKER_PLUS
        - VTK_MARKER_SQUARE
        - VTK_MARKER_CIRCLE
        - VTK_MARKER_DIAMOND
        \param colors is an optional array of colors.
        \param nc_comps is the number of components for the color.
        """
        ...
    
    def DrawMathTextString(self, *float, **kwargs):
        """
        V.DrawMathTextString([float, ...], string)
        C++: void DrawMathTextString(float *point,
            const vtkStdString &str) override;
        
        Draw text using MathText markup for mathematical equations. See
        http://matplotlib.sourceforge.net/users/mathtext.html for more
        information.
        """
        ...
    
    def DrawPoints(self, *float, **kwargs):
        """
        V.DrawPoints([float, ...], int, [int, ...], int)
        C++: void DrawPoints(float *points, int n,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        
        Draw a series of points - fastest code path due to memory layout
        of the coordinates. The colors and nc_comps are optional - color
        array.
        """
        ...
    
    def DrawPointSprites(self, vtkImageData, *float, **kwargs):
        """
        V.DrawPointSprites(vtkImageData, [float, ...], int, [int, ...],
            int)
        C++: void DrawPointSprites(vtkImageData *sprite, float *points,
            int n, unsigned char *colors=nullptr, int nc_comps=0)
            override;
        
        Draw a series of point sprites, images centred at the points
        supplied. The supplied vtkImageData is the sprite to be drawn,
        only squares will be drawn and the size is set using
        SetPointSize.
        \param colors is an optional array of colors.
        \param nc_comps is the number of components for the color.
        """
        ...
    
    def DrawPoly(self, *float, **kwargs):
        """
        V.DrawPoly([float, ...], int, [int, ...], int)
        C++: void DrawPoly(float *points, int n,
            unsigned char *colors=nullptr, int nc_comps=0) override;
        
        Draw a poly line using the points - fastest code path due to
        memory layout of the coordinates. The line will be colored by the
        colors array, which must be have nc_comps components (defining a
        single color).
        \sa DrawLines()
        """
        ...
    
    def DrawPolygon(self, *float, **kwargs):
        """
        V.DrawPolygon([float, ...], int)
        C++: void DrawPolygon(float *, int) override;
        """
        ...
    
    def DrawQuad(self, *float, **kwargs):
        """
        V.DrawQuad([float, ...], int)
        C++: void DrawQuad(float *, int) override;
        
        Draw a quad using the specified number of points.
        """
        ...
    
    def DrawQuadStrip(self, *float, **kwargs):
        """
        V.DrawQuadStrip([float, ...], int)
        C++: void DrawQuadStrip(float *, int) override;
        
        Draw a quad using the specified number of points.
        """
        ...
    
    def DrawString(self, *float, **kwargs):
        """
        V.DrawString([float, ...], string)
        C++: void DrawString(float *point, const vtkStdString &string)
            override;
        V.DrawString([float, ...], unicode)
        C++: void DrawString(float *point, const vtkUnicodeString &string)
             override;
        
        Draw some text to the screen.
        """
        ...
    
    def EmbedFontsOff(self):
        """
        V.EmbedFontsOff()
        C++: virtual void EmbedFontsOff()
        """
        ...
    
    def EmbedFontsOn(self):
        """
        V.EmbedFontsOn()
        C++: virtual void EmbedFontsOn()
        """
        ...
    
    def EnableClipping(self, bool):
        """
        V.EnableClipping(bool)
        C++: void EnableClipping(bool enable) override;
        
        Enable or disable the clipping of the scene.
        """
        ...
    
    def End(self):
        """
        V.End()
        C++: void End() override;
        
        End drawing, clean up the view.
        """
        ...
    
    def GenerateDefinitions(self):
        """
        V.GenerateDefinitions()
        C++: void GenerateDefinitions()
        
        Write any definition information (fonts, images, etc) that are
        accumulated between actors.
        """
        ...
    
    def GetEmbedFonts(self):
        """
        V.GetEmbedFonts() -> bool
        C++: virtual bool GetEmbedFonts()
        """
        ...
    
    def GetMatrix(self, vtkMatrix3x3):
        """
        V.GetMatrix(vtkMatrix3x3)
        C++: void GetMatrix(vtkMatrix3x3 *m) override;
        
        Set the model view matrix for the display
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSubdivisionThreshold(self):
        """
        V.GetSubdivisionThreshold() -> float
        C++: virtual float GetSubdivisionThreshold()
        """
        ...
    
    def GetTextAsPath(self):
        """
        V.GetTextAsPath() -> bool
        C++: virtual bool GetTextAsPath()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MultiplyMatrix(self, vtkMatrix3x3):
        """
        V.MultiplyMatrix(vtkMatrix3x3)
        C++: void MultiplyMatrix(vtkMatrix3x3 *m) override;
        
        Multiply the current model view matrix by the supplied one
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSVGContextDevice2D
        C++: vtkSVGContextDevice2D *NewInstance()
        """
        ...
    
    def PopMatrix(self):
        """
        V.PopMatrix()
        C++: void PopMatrix() override;
        
        Pop the current matrix off of the stack.
        """
        ...
    
    def PushMatrix(self):
        """
        V.PushMatrix()
        C++: void PushMatrix() override;
        
        Push the current matrix onto the stack.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSVGContextDevice2D
        C++: static vtkSVGContextDevice2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClipping(self, *int):
        """
        V.SetClipping([int, ...])
        C++: void SetClipping(int *x) override;
        
        Supply an int array of length 4 with x1, y1, width, height
        specifying clipping region for the device in pixels.
        """
        ...
    
    def SetColor4(self, p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetColor4([int, int, int, int])
        C++: void SetColor4(unsigned char color[4]) override;
        
        Set the color for the device using unsigned char of length 4,
        RGBA.
        """
        ...
    
    def SetEmbedFonts(self, bool):
        """
        V.SetEmbedFonts(bool)
        C++: virtual void SetEmbedFonts(bool _arg)
        """
        ...
    
    def SetLineType(self, p_int):
        """
        V.SetLineType(int)
        C++: void SetLineType(int type) override;
        
        Set the line type type (using anonymous enum in vtkPen).
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: void SetLineWidth(float width) override;
        
        Set the line width.
        """
        ...
    
    def SetMatrix(self, vtkMatrix3x3):
        """
        V.SetMatrix(vtkMatrix3x3)
        C++: void SetMatrix(vtkMatrix3x3 *m) override;
        
        Set the model view matrix for the display
        """
        ...
    
    def SetPointSize(self, p_float):
        """
        V.SetPointSize(float)
        C++: void SetPointSize(float size) override;
        
        Set the point size for glyphs/sprites.
        """
        ...
    
    def SetSubdivisionThreshold(self, p_float):
        """
        V.SetSubdivisionThreshold(float)
        C++: virtual void SetSubdivisionThreshold(float _arg)
        """
        ...
    
    def SetSVGContext(self, vtkXMLDataElement, vtkXMLDataElement_1):
        """
        V.SetSVGContext(vtkXMLDataElement, vtkXMLDataElement)
        C++: void SetSVGContext(vtkXMLDataElement *context,
            vtkXMLDataElement *defs)
        
        The svg container element to draw into, and the global
        definitions element.
        """
        ...
    
    def SetTextAsPath(self, bool):
        """
        V.SetTextAsPath(bool)
        C++: virtual void SetTextAsPath(bool _arg)
        """
        ...
    
    def SetTexture(self, vtkImageData, p_int):
        """
        V.SetTexture(vtkImageData, int)
        C++: void SetTexture(vtkImageData *image, int properties)
            override;
        
        Set the texture for the device, it is used to fill the polygons
        """
        ...
    
    def TextAsPathOff(self):
        """
        V.TextAsPathOff()
        C++: virtual void TextAsPathOff()
        """
        ...
    
    def TextAsPathOn(self):
        """
        V.TextAsPathOn()
        C++: virtual void TextAsPathOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSVGExporter(vtkExporter):
    """
    vtkSVGExporter - Exports vtkContext2D scenes to SVG.
    
    Superclass: vtkExporter
    
    This exporter draws context2D scenes into a SVG file.
    
    Limitations:
    - The Nearest/Linear texture properties are ignored, since SVG
      doesn't provide any reliable control over interpolation.
    - Embedded fonts are experimental and poorly tested. Viewer support
      is lacking at the time of writing, hence the feature is largely
      useless. By default, fonts are not embedded since they're basically
    useless bloat. (this option is not exposed in vtkSVGExporter).
    - TextAsPath is enabled by default, since viewers differ wildly in
      how they handle text objects (eg. Inkscape renders at expected
      size, but webkit is way too big).
    - Pattern fills and markers are not shown on some viewers, e.g. KDE's
    okular (Webkit seems to work, though).
    - Clipping seems to be broken in most viewers. Webkit is buggy and
      forces the clip coordinates to objectBoundingBox, even when
      explicitly set to userSpaceOnUse.
    - Many viewers anti-alias the output, leaving thin outlines around
      the triangles that make up larger polygons. This is a viewer issue
      and there not much we can do about it from the VTK side of things
      (and most viewers don't seem to have an antialiasing toggle,
      either...).
    
    If ActiveRenderer is specified then it exports contents of
    ActiveRenderer. Otherwise it exports contents of all renderers.
    """
    def DrawBackgroundOff(self):
        """
        V.DrawBackgroundOff()
        C++: virtual void DrawBackgroundOff()
        """
        ...
    
    def DrawBackgroundOn(self):
        """
        V.DrawBackgroundOn()
        C++: virtual void DrawBackgroundOn()
        """
        ...
    
    def GetDescription(self):
        """
        V.GetDescription() -> string
        C++: virtual char *GetDescription()
        """
        ...
    
    def GetDrawBackground(self):
        """
        V.GetDrawBackground() -> bool
        C++: virtual bool GetDrawBackground()
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSubdivisionThreshold(self):
        """
        V.GetSubdivisionThreshold() -> float
        C++: virtual float GetSubdivisionThreshold()
        """
        ...
    
    def GetTextAsPath(self):
        """
        V.GetTextAsPath() -> bool
        C++: virtual bool GetTextAsPath()
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSVGExporter
        C++: vtkSVGExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSVGExporter
        C++: static vtkSVGExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDescription(self, string):
        """
        V.SetDescription(string)
        C++: virtual void SetDescription(const char *_arg)
        """
        ...
    
    def SetDrawBackground(self, bool):
        """
        V.SetDrawBackground(bool)
        C++: virtual void SetDrawBackground(bool _arg)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        """
        ...
    
    def SetSubdivisionThreshold(self, p_float):
        """
        V.SetSubdivisionThreshold(float)
        C++: virtual void SetSubdivisionThreshold(float _arg)
        """
        ...
    
    def SetTextAsPath(self, bool):
        """
        V.SetTextAsPath(bool)
        C++: virtual void SetTextAsPath(bool _arg)
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        """
        ...
    
    def TextAsPathOff(self):
        """
        V.TextAsPathOff()
        C++: virtual void TextAsPathOff()
        """
        ...
    
    def TextAsPathOn(self):
        """
        V.TextAsPathOn()
        C++: virtual void TextAsPathOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkVRMLExporter(vtkExporter):
    """
    vtkVRMLExporter - export a scene into VRML 2.0 format.
    
    Superclass: vtkExporter
    
    vtkVRMLExporter is a concrete subclass of vtkExporter that writes
    VRML 2.0 files. This is based on the VRML 2.0 draft #3 but it should
    be pretty stable since we aren't using any of the newer features.
    
    @sa
    vtkExporter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the name of the VRML file to write.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSpeed(self):
        """
        V.GetSpeed() -> float
        C++: virtual double GetSpeed()
        
        Specify the Speed of navigation. Default is 4.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVRMLExporter
        C++: vtkVRMLExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVRMLExporter
        C++: static vtkVRMLExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the name of the VRML file to write.
        """
        ...
    
    def SetSpeed(self, p_float):
        """
        V.SetSpeed(float)
        C++: virtual void SetSpeed(double _arg)
        
        Specify the Speed of navigation. Default is 4.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkX3DExporter(vtkExporter):
    """
    vtkX3DExporter - create an x3d file
    
    Superclass: vtkExporter
    
    vtkX3DExporter is a render window exporter which writes out the
    renderered scene into an X3D file. X3D is an XML-based format for
    representation 3D scenes (similar to VRML). Check out
    http://www.web3d.org/x3d/ for more details.@par Thanks: X3DExporter
    is contributed by Christophe Mouton at EDF.
    """
    def BinaryOff(self):
        """
        V.BinaryOff()
        C++: virtual void BinaryOff()
        
        Turn on binary mode
        """
        ...
    
    def BinaryOn(self):
        """
        V.BinaryOn()
        C++: virtual void BinaryOn()
        
        Turn on binary mode
        """
        ...
    
    def FastestOff(self):
        """
        V.FastestOff()
        C++: virtual void FastestOff()
        
        In binary mode use fastest instead of best compression
        """
        ...
    
    def FastestOn(self):
        """
        V.FastestOn()
        C++: virtual void FastestOn()
        
        In binary mode use fastest instead of best compression
        """
        ...
    
    def GetBinary(self):
        """
        V.GetBinary() -> int
        C++: virtual vtkTypeBool GetBinary()
        
        Turn on binary mode
        """
        ...
    
    def GetBinaryMaxValue(self):
        """
        V.GetBinaryMaxValue() -> int
        C++: virtual vtkTypeBool GetBinaryMaxValue()
        
        Turn on binary mode
        """
        ...
    
    def GetBinaryMinValue(self):
        """
        V.GetBinaryMinValue() -> int
        C++: virtual vtkTypeBool GetBinaryMinValue()
        
        Turn on binary mode
        """
        ...
    
    def GetBinaryOutputString(self):
        """
        V.GetBinaryOutputString() -> (int, ...)
        C++: unsigned char *GetBinaryOutputString()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetFastest(self):
        """
        V.GetFastest() -> int
        C++: virtual vtkTypeBool GetFastest()
        
        In binary mode use fastest instead of best compression
        """
        ...
    
    def GetFastestMaxValue(self):
        """
        V.GetFastestMaxValue() -> int
        C++: virtual vtkTypeBool GetFastestMaxValue()
        
        In binary mode use fastest instead of best compression
        """
        ...
    
    def GetFastestMinValue(self):
        """
        V.GetFastestMinValue() -> int
        C++: virtual vtkTypeBool GetFastestMinValue()
        
        In binary mode use fastest instead of best compression
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/Get the output file name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputString(self):
        """
        V.GetOutputString() -> string
        C++: virtual char *GetOutputString()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetOutputStringLength(self):
        """
        V.GetOutputStringLength() -> int
        C++: virtual vtkIdType GetOutputStringLength()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetSpeed(self):
        """
        V.GetSpeed() -> float
        C++: virtual double GetSpeed()
        
        Specify the Speed of navigation. Default is 4.
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> int
        C++: virtual vtkTypeBool GetWriteToOutputString()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkX3DExporter
        C++: vtkX3DExporter *NewInstance()
        """
        ...
    
    def RegisterAndGetOutputString(self):
        """
        V.RegisterAndGetOutputString() -> string
        C++: char *RegisterAndGetOutputString()
        
        This convenience method returns the string, sets the IVAR to
        nullptr, so that the user is responsible for deleting the string.
        I am not sure what the name should be, so it may change in the
        future.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkX3DExporter
        C++: static vtkX3DExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBinary(self, p_int):
        """
        V.SetBinary(int)
        C++: virtual void SetBinary(vtkTypeBool _arg)
        
        Turn on binary mode
        """
        ...
    
    def SetFastest(self, p_int):
        """
        V.SetFastest(int)
        C++: virtual void SetFastest(vtkTypeBool _arg)
        
        In binary mode use fastest instead of best compression
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/Get the output file name.
        """
        ...
    
    def SetSpeed(self, p_float):
        """
        V.SetSpeed(float)
        C++: virtual void SetSpeed(double _arg)
        
        Specify the Speed of navigation. Default is 4.
        """
        ...
    
    def SetWriteToOutputString(self, p_int):
        """
        V.SetWriteToOutputString(int)
        C++: virtual void SetWriteToOutputString(vtkTypeBool _arg)
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: virtual void WriteToOutputStringOff()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: virtual void WriteToOutputStringOn()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkX3DExporterWriter(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkX3DExporterWriter - X3D Exporter Writer
    
    Superclass: vtkObject
    
    vtkX3DExporterWriter is the definition for classes that implement a
    encoding for the X3D exporter
    """
    def CloseFile(self):
        """
        V.CloseFile()
        C++: virtual void CloseFile()
        """
        ...
    
    def EndDocument(self):
        """
        V.EndDocument()
        C++: virtual void EndDocument()
        
        Ends a document and sets all necessary information or necessary
        bytes to finish the encoding correctly
        """
        ...
    
    def EndNode(self):
        """
        V.EndNode()
        C++: virtual void EndNode()
        
        Starts/ends a new X3D node specified via nodeID. The list of
        nodeIds can be found in vtkX3DExportWriterSymbols.h. The EndNode
        function closes the last open node. So there must be
        corresponding Start/EndNode() calls for every node
        """
        ...
    
    def Flush(self):
        """
        V.Flush()
        C++: virtual void Flush()
        """
        ...
    
    def GetBinaryOutputString(self):
        """
        V.GetBinaryOutputString() -> (int, ...)
        C++: unsigned char *GetBinaryOutputString()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputString(self):
        """
        V.GetOutputString() -> string
        C++: virtual char *GetOutputString()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetOutputStringLength(self):
        """
        V.GetOutputStringLength() -> int
        C++: virtual vtkIdType GetOutputStringLength()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> int
        C++: virtual vtkTypeBool GetWriteToOutputString()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkX3DExporterWriter
        C++: vtkX3DExporterWriter *NewInstance()
        """
        ...
    
    def OpenFile(self, string):
        """
        V.OpenFile(string) -> int
        C++: virtual int OpenFile(const char *file)
        
        Opens the file specified with file returns 1 if successful
        otherwise 0
        """
        ...
    
    def OpenStream(self):
        """
        V.OpenStream() -> int
        C++: virtual int OpenStream()
        
        Init data support to be a stream instead of a file
        """
        ...
    
    def RegisterAndGetOutputString(self):
        """
        V.RegisterAndGetOutputString() -> string
        C++: char *RegisterAndGetOutputString()
        
        This convenience method returns the string, sets the IVAR to
        nullptr, so that the user is responsible for deleting the string.
        I am not sure what the name should be, so it may change in the
        future.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkX3DExporterWriter
        C++: static vtkX3DExporterWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetField(self, p_int, string, bool):
        """
        V.SetField(int, string, bool)
        C++: virtual void SetField(int attributeID, const char *value,
            bool mfstring=false)
        V.SetField(int, int)
        C++: virtual void SetField(int attributeID, int)
        V.SetField(int, float)
        C++: virtual void SetField(int attributeID, double)
        V.SetField(int, bool)
        C++: virtual void SetField(int attributeID, bool)
        V.SetField(int, int, (float, ...))
        C++: virtual void SetField(int attributeID, int type,
            const double *a)
        V.SetField(int, int, vtkDataArray)
        C++: virtual void SetField(int attributeID, int type,
            vtkDataArray *a)
        V.SetField(int, (float, ...), int)
        C++: virtual void SetField(int attributeID, const double *values,
            size_t size)
        V.SetField(int, (int, ...), int, bool)
        C++: virtual void SetField(int attributeID, const int *values,
            size_t size, bool image=false)
        
        Sets the field specified with attributeID of the active node to
        the given value. The type of the field is SFString and MFString
        virtual void SetField(int attributeID, const std::string &value)
        = 0;
        """
        ...
    
    def SetWriteToOutputString(self, p_int):
        """
        V.SetWriteToOutputString(int)
        C++: virtual void SetWriteToOutputString(vtkTypeBool _arg)
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def StartDocument(self):
        """
        V.StartDocument()
        C++: virtual void StartDocument()
        
        Starts a document and sets all necessary information, i.e. the
        header of the implemented encoding
        """
        ...
    
    def StartNode(self, p_int):
        """
        V.StartNode(int)
        C++: virtual void StartNode(int nodeID)
        
        Starts/ends a new X3D node specified via nodeID. The list of
        nodeIds can be found in vtkX3DExportWriterSymbols.h. The EndNode
        function closes the last open node. So there must be
        corresponding Start/EndNode() calls for every node
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: virtual void WriteToOutputStringOff()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: virtual void WriteToOutputStringOn()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkX3DExporterFIWriter(vtkX3DExporterWriter):
    """
    vtkX3DExporterFIWriter - 
    
    Superclass: vtkX3DExporterWriter
    """
    def CloseFile(self):
        """
        V.CloseFile()
        C++: void CloseFile() override;
        """
        ...
    
    def EndDocument(self):
        """
        V.EndDocument()
        C++: void EndDocument() override;
        
        Ends a document and sets all necessary information or necessary
        bytes to finish the encoding correctly
        """
        ...
    
    def EndNode(self):
        """
        V.EndNode()
        C++: void EndNode() override;
        
        Starts/ends a new X3D node specified via nodeID. The list of
        nodeIds can be found in vtkX3DExportWriterSymbols.h. The EndNode
        function closes the last open node. So there must be
        corresponding Start/EndNode() calls for every node
        """
        ...
    
    def FastestOff(self):
        """
        V.FastestOff()
        C++: virtual void FastestOff()
        
        Use fastest instead of best compression
        """
        ...
    
    def FastestOn(self):
        """
        V.FastestOn()
        C++: virtual void FastestOn()
        
        Use fastest instead of best compression
        """
        ...
    
    def Flush(self):
        """
        V.Flush()
        C++: void Flush() override;
        """
        ...
    
    def GetFastest(self):
        """
        V.GetFastest() -> int
        C++: virtual vtkTypeBool GetFastest()
        
        Use fastest instead of best compression
        """
        ...
    
    def GetFastestMaxValue(self):
        """
        V.GetFastestMaxValue() -> int
        C++: virtual vtkTypeBool GetFastestMaxValue()
        
        Use fastest instead of best compression
        """
        ...
    
    def GetFastestMinValue(self):
        """
        V.GetFastestMinValue() -> int
        C++: virtual vtkTypeBool GetFastestMinValue()
        
        Use fastest instead of best compression
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkX3DExporterFIWriter
        C++: vtkX3DExporterFIWriter *NewInstance()
        """
        ...
    
    def OpenFile(self, string):
        """
        V.OpenFile(string) -> int
        C++: int OpenFile(const char *file) override;
        
        Opens the file specified with file returns 1 if successful
        otherwise 0
        """
        ...
    
    def OpenStream(self):
        """
        V.OpenStream() -> int
        C++: int OpenStream() override;
        
        Init data support to be a stream instead of a file
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkX3DExporterFIWriter
        C++: static vtkX3DExporterFIWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFastest(self, p_int):
        """
        V.SetFastest(int)
        C++: virtual void SetFastest(vtkTypeBool _arg)
        
        Use fastest instead of best compression
        """
        ...
    
    def SetField(self, p_int, string, bool):
        """
        V.SetField(int, string, bool)
        C++: void SetField(int attributeID, const char *,
            bool mfstring=false) override;
        V.SetField(int, int)
        C++: void SetField(int attributeID, int) override;
        V.SetField(int, float)
        C++: void SetField(int attributeID, double) override;
        V.SetField(int, bool)
        C++: void SetField(int attributeID, bool) override;
        V.SetField(int, int, (float, ...))
        C++: void SetField(int attributeID, int type, const double *a)
            override;
        V.SetField(int, int, vtkDataArray)
        C++: void SetField(int attributeID, int type, vtkDataArray *a)
            override;
        V.SetField(int, (float, ...), int)
        C++: void SetField(int attributeID, const double *values,
            size_t size) override;
        V.SetField(int, int, vtkCellArray)
        C++: void SetField(int attributeID, int type, vtkCellArray *a)
        V.SetField(int, (int, ...), int, bool)
        C++: void SetField(int attributeID, const int *values,
            size_t size, bool image=false) override;
        
        Sets the field specified with attributeID of the active node to
        the given value. The type of the field is SFString and MFString
        virtual void SetField(int attributeID, const std::string &value)
        = 0;
        """
        ...
    
    def StartDocument(self):
        """
        V.StartDocument()
        C++: void StartDocument() override;
        
        Starts a document and sets all necessary information, i.e. the
        header of the implemented encoding
        """
        ...
    
    def StartNode(self, p_int):
        """
        V.StartNode(int)
        C++: void StartNode(int elementID) override;
        
        Starts/ends a new X3D node specified via nodeID. The list of
        nodeIds can be found in vtkX3DExportWriterSymbols.h. The EndNode
        function closes the last open node. So there must be
        corresponding Start/EndNode() calls for every node
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkX3DExporterXMLWriter(vtkX3DExporterWriter):
    """
    vtkX3DExporterXMLWriter - X3D Exporter XML Writer
    
    Superclass: vtkX3DExporterWriter
    
    vtkX3DExporterXMLWriter
    """
    def CloseFile(self):
        """
        V.CloseFile()
        C++: void CloseFile() override;
        """
        ...
    
    def EndDocument(self):
        """
        V.EndDocument()
        C++: void EndDocument() override;
        
        Ends a document and sets all necessary information or necessary
        bytes to finish the encoding correctly
        """
        ...
    
    def EndNode(self):
        """
        V.EndNode()
        C++: void EndNode() override;
        
        Starts/ends a new X3D node specified via nodeID. The list of
        nodeIds can be found in vtkX3DExportWriterSymbols.h. The EndNode
        function closes the last open node. So there must be
        corresponding Start/EndNode() calls for every node
        """
        ...
    
    def Flush(self):
        """
        V.Flush()
        C++: void Flush() override;
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkX3DExporterXMLWriter
        C++: vtkX3DExporterXMLWriter *NewInstance()
        """
        ...
    
    def OpenFile(self, string):
        """
        V.OpenFile(string) -> int
        C++: int OpenFile(const char *file) override;
        
        Opens the file specified with file returns 1 if successful
        otherwise 0
        """
        ...
    
    def OpenStream(self):
        """
        V.OpenStream() -> int
        C++: int OpenStream() override;
        
        Init data support to be a stream instead of a file
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkX3DExporterXMLWriter
        C++: static vtkX3DExporterXMLWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetField(self, p_int, string, bool):
        """
        V.SetField(int, string, bool)
        C++: void SetField(int attributeID, const char *,
            bool mfstring=true) override;
        V.SetField(int, int)
        C++: void SetField(int attributeID, int) override;
        V.SetField(int, float)
        C++: void SetField(int attributeID, double) override;
        V.SetField(int, bool)
        C++: void SetField(int attributeID, bool) override;
        V.SetField(int, int, (float, ...))
        C++: void SetField(int attributeID, int type, const double *a)
            override;
        V.SetField(int, int, vtkDataArray)
        C++: void SetField(int attributeID, int type, vtkDataArray *a)
            override;
        V.SetField(int, (float, ...), int)
        C++: void SetField(int attributeID, const double *values,
            size_t size) override;
        V.SetField(int, (int, ...), int, bool)
        C++: void SetField(int attributeID, const int *values,
            size_t size, bool image=false) override;
        
        Sets the field specified with attributeID of the active node to
        the given value. The type of the field is SFString and MFString
        virtual void SetField(int attributeID, const std::string &value)
        = 0;
        """
        ...
    
    def StartDocument(self):
        """
        V.StartDocument()
        C++: void StartDocument() override;
        
        Starts a document and sets all necessary information, i.e. the
        header of the implemented encoding
        """
        ...
    
    def StartNode(self, p_int):
        """
        V.StartNode(int)
        C++: void StartNode(int elementID) override;
        
        Starts/ends a new X3D node specified via nodeID. The list of
        nodeIds can be found in vtkX3DExportWriterSymbols.h. The EndNode
        function closes the last open node. So there must be
        corresponding Start/EndNode() calls for every node
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
