"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkMutableGraphHelper(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkMutableGraphHelper - Helper class for building a directed or
      directed graph
    
    Superclass: vtkObject
    
    vtkMutableGraphHelper has helper methods AddVertex and AddEdge which
    add vertices/edges to the underlying mutable graph. This is helpful
    in filters which need to (re)construct graphs which may be either
    directed or undirected.
    
    @sa
    vtkGraph vtkMutableDirectedGraph vtkMutableUndirectedGraph
    """
    def AddEdge(self, p_int, p_int_1):
        """
        V.AddEdge(int, int) -> vtkEdgeType
        C++: vtkEdgeType AddEdge(vtkIdType u, vtkIdType v)
        
        Add an edge to the underlying mutable graph.
        """
        ...
    
    def AddGraphEdge(self, p_int, p_int_1):
        """
        V.AddGraphEdge(int, int) -> vtkGraphEdge
        C++: vtkGraphEdge *AddGraphEdge(vtkIdType u, vtkIdType v)
        """
        ...
    
    def AddVertex(self):
        """
        V.AddVertex() -> int
        C++: vtkIdType AddVertex()
        
        Add a vertex to the underlying mutable graph.
        """
        ...
    
    def GetGraph(self):
        """
        V.GetGraph() -> vtkGraph
        C++: vtkGraph *GetGraph()
        
        Set the underlying graph that you want to modify with this
        helper. The graph must be an instance of vtkMutableDirectedGraph
        or vtkMutableUndirectedGraph.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMutableGraphHelper
        C++: vtkMutableGraphHelper *NewInstance()
        """
        ...
    
    def RemoveEdge(self, p_int):
        """
        V.RemoveEdge(int)
        C++: void RemoveEdge(vtkIdType e)
        
        Remove an edge from the underlying mutable graph.
        """
        ...
    
    def RemoveEdges(self, vtkIdTypeArray):
        """
        V.RemoveEdges(vtkIdTypeArray)
        C++: void RemoveEdges(vtkIdTypeArray *edges)
        
        Remove a collection of edges from the underlying mutable graph.
        """
        ...
    
    def RemoveVertex(self, p_int):
        """
        V.RemoveVertex(int)
        C++: void RemoveVertex(vtkIdType v)
        
        Remove a vertex from the underlying mutable graph.
        """
        ...
    
    def RemoveVertices(self, vtkIdTypeArray):
        """
        V.RemoveVertices(vtkIdTypeArray)
        C++: void RemoveVertices(vtkIdTypeArray *verts)
        
        Remove a collection of vertices from the underlying mutable
        graph.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMutableGraphHelper
        C++: static vtkMutableGraphHelper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGraph(self, vtkGraph):
        """
        V.SetGraph(vtkGraph)
        C++: void SetGraph(vtkGraph *g)
        
        Set the underlying graph that you want to modify with this
        helper. The graph must be an instance of vtkMutableDirectedGraph
        or vtkMutableUndirectedGraph.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


