"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTransferAttributes(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkTransferAttributes - transfer data from a graph representation to
    a tree representation using direct mapping or pedigree ids.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    The filter requires both a vtkGraph and vtkTree as input.  The tree
    vertices must be a superset of the graph vertices.  A common example
    is when the graph vertices correspond to the leaves of the tree, but
    the internal vertices of the tree represent groupings of graph
    vertices.  The algorithm matches the vertices using the array
    "PedigreeId".  The user may alternately set the DirectMapping flag to
    indicate that the two structures must have directly corresponding
    offsets (i.e. node i in the graph must correspond to node i in the
    tree).
    """
    def DirectMappingOff(self):
        """
        V.DirectMappingOff()
        C++: virtual void DirectMappingOff()
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def DirectMappingOn(self):
        """
        V.DirectMappingOn()
        C++: virtual void DirectMappingOn()
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Set the input type of the algorithm to vtkGraph.
        """
        ...
    
    def GetDefaultValue(self):
        """
        V.GetDefaultValue() -> vtkVariant
        C++: vtkVariant GetDefaultValue()
        
        Method to get/set the default value.
        """
        ...
    
    def GetDirectMapping(self):
        """
        V.GetDirectMapping() -> bool
        C++: virtual bool GetDirectMapping()
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSourceArrayName(self):
        """
        V.GetSourceArrayName() -> string
        C++: virtual char *GetSourceArrayName()
        
        The field name to use for storing the source array.
        """
        ...
    
    def GetSourceFieldType(self):
        """
        V.GetSourceFieldType() -> int
        C++: virtual int GetSourceFieldType()
        
        The source field type for accessing the source array. Valid
        values are those from enum vtkDataObject::FieldAssociations.
        """
        ...
    
    def GetTargetArrayName(self):
        """
        V.GetTargetArrayName() -> string
        C++: virtual char *GetTargetArrayName()
        
        The field name to use for storing the source array.
        """
        ...
    
    def GetTargetFieldType(self):
        """
        V.GetTargetFieldType() -> int
        C++: virtual int GetTargetFieldType()
        
        The target field type for accessing the target array. Valid
        values are those from enum vtkDataObject::FieldAssociations.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTransferAttributes
        C++: vtkTransferAttributes *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTransferAttributes
        C++: static vtkTransferAttributes *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDefaultValue(self, vtkVariant):
        """
        V.SetDefaultValue(vtkVariant)
        C++: void SetDefaultValue(vtkVariant value)
        
        Method to get/set the default value.
        """
        ...
    
    def SetDirectMapping(self, bool):
        """
        V.SetDirectMapping(bool)
        C++: virtual void SetDirectMapping(bool _arg)
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def SetSourceArrayName(self, string):
        """
        V.SetSourceArrayName(string)
        C++: virtual void SetSourceArrayName(const char *_arg)
        
        The field name to use for storing the source array.
        """
        ...
    
    def SetSourceFieldType(self, p_int):
        """
        V.SetSourceFieldType(int)
        C++: virtual void SetSourceFieldType(int _arg)
        
        The source field type for accessing the source array. Valid
        values are those from enum vtkDataObject::FieldAssociations.
        """
        ...
    
    def SetTargetArrayName(self, string):
        """
        V.SetTargetArrayName(string)
        C++: virtual void SetTargetArrayName(const char *_arg)
        
        The field name to use for storing the source array.
        """
        ...
    
    def SetTargetFieldType(self, p_int):
        """
        V.SetTargetFieldType(int)
        C++: virtual void SetTargetFieldType(int _arg)
        
        The target field type for accessing the target array. Valid
        values are those from enum vtkDataObject::FieldAssociations.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


