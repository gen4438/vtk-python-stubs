"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTableToSparseArray(__vtkmodules_vtkCommonExecutionModel.vtkArrayDataAlgorithm):
    """
    vtkTableToSparseArray - converts a vtkTable into a sparse array.
    
    Superclass: vtkArrayDataAlgorithm
    
    Converts a vtkTable into a sparse array.  Use AddCoordinateColumn()
    to designate one-to-many table columns that contain coordinates for
    each array value, and SetValueColumn() to designate the table column
    that contains array values.
    
    Thus, the number of dimensions in the output array will equal the
    number of calls to AddCoordinateColumn().
    
    The coordinate columns will also be used to populate dimension labels
    in the output array.
    
    By default, the extent of the output array will be set to the range
    [0, largest coordinate + 1) along each dimension.  In some situations
    you may prefer to set the extents explicitly, using the
    SetOutputExtents() method.  This is useful when the output array
    should be larger than its largest coordinates, or when working with
    partitioned data.
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    """
    def AddCoordinateColumn(self, string):
        """
        V.AddCoordinateColumn(string)
        C++: void AddCoordinateColumn(const char *name)
        
        Specify the set of input table columns that will be mapped to
        coordinates in the output sparse array.
        """
        ...
    
    def ClearCoordinateColumns(self):
        """
        V.ClearCoordinateColumns()
        C++: void ClearCoordinateColumns()
        
        Specify the set of input table columns that will be mapped to
        coordinates in the output sparse array.
        """
        ...
    
    def ClearOutputExtents(self):
        """
        V.ClearOutputExtents()
        C++: void ClearOutputExtents()
        
        Explicitly specify the extents of the output array.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetValueColumn(self):
        """
        V.GetValueColumn() -> string
        C++: const char *GetValueColumn()
        
        Specify the input table column that will be mapped to values in
        the output array.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTableToSparseArray
        C++: vtkTableToSparseArray *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTableToSparseArray
        C++: static vtkTableToSparseArray *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutputExtents(self, vtkArrayExtents):
        """
        V.SetOutputExtents(vtkArrayExtents)
        C++: void SetOutputExtents(const vtkArrayExtents &extents)
        
        Explicitly specify the extents of the output array.
        """
        ...
    
    def SetValueColumn(self, string):
        """
        V.SetValueColumn(string)
        C++: void SetValueColumn(const char *name)
        
        Specify the input table column that will be mapped to values in
        the output array.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


