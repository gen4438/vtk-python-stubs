"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMergeTables(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkMergeTables - combine two tables
    
    Superclass: vtkTableAlgorithm
    
    Combines the columns of two tables into one larger table. The number
    of rows in the resulting table is the sum of the number of rows in
    each of the input tables. The number of columns in the output is
    generally the sum of the number of columns in each input table,
    except in the case where column names are duplicated in both tables.
    In this case, if MergeColumnsByName is on (the default), the two
    columns will be merged into a single column of the same name. If
    MergeColumnsByName is off, both columns will exist in the output. You
    may set the FirstTablePrefix and SecondTablePrefix to define how the
    columns named are modified.  One of these prefixes may be the empty
    string, but they must be different.
    """
    def GetFirstTablePrefix(self):
        """
        V.GetFirstTablePrefix() -> string
        C++: virtual char *GetFirstTablePrefix()
        
        The prefix to give to same-named fields from the first table.
        Default is "Table1.".
        """
        ...
    
    def GetMergeColumnsByName(self):
        """
        V.GetMergeColumnsByName() -> bool
        C++: virtual bool GetMergeColumnsByName()
        
        If on, merges columns with the same name. If off, keeps both
        columns, but calls one FirstTablePrefix + name, and the other
        SecondTablePrefix + name. Default is on.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPrefixAllButMerged(self):
        """
        V.GetPrefixAllButMerged() -> bool
        C++: virtual bool GetPrefixAllButMerged()
        
        If on, all columns will have prefixes except merged columns. If
        off, only unmerged columns with the same name will have prefixes.
        Default is off.
        """
        ...
    
    def GetSecondTablePrefix(self):
        """
        V.GetSecondTablePrefix() -> string
        C++: virtual char *GetSecondTablePrefix()
        
        The prefix to give to same-named fields from the second table.
        Default is "Table2.".
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergeColumnsByNameOff(self):
        """
        V.MergeColumnsByNameOff()
        C++: virtual void MergeColumnsByNameOff()
        
        If on, merges columns with the same name. If off, keeps both
        columns, but calls one FirstTablePrefix + name, and the other
        SecondTablePrefix + name. Default is on.
        """
        ...
    
    def MergeColumnsByNameOn(self):
        """
        V.MergeColumnsByNameOn()
        C++: virtual void MergeColumnsByNameOn()
        
        If on, merges columns with the same name. If off, keeps both
        columns, but calls one FirstTablePrefix + name, and the other
        SecondTablePrefix + name. Default is on.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMergeTables
        C++: vtkMergeTables *NewInstance()
        """
        ...
    
    def PrefixAllButMergedOff(self):
        """
        V.PrefixAllButMergedOff()
        C++: virtual void PrefixAllButMergedOff()
        
        If on, all columns will have prefixes except merged columns. If
        off, only unmerged columns with the same name will have prefixes.
        Default is off.
        """
        ...
    
    def PrefixAllButMergedOn(self):
        """
        V.PrefixAllButMergedOn()
        C++: virtual void PrefixAllButMergedOn()
        
        If on, all columns will have prefixes except merged columns. If
        off, only unmerged columns with the same name will have prefixes.
        Default is off.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMergeTables
        C++: static vtkMergeTables *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFirstTablePrefix(self, string):
        """
        V.SetFirstTablePrefix(string)
        C++: virtual void SetFirstTablePrefix(const char *_arg)
        
        The prefix to give to same-named fields from the first table.
        Default is "Table1.".
        """
        ...
    
    def SetMergeColumnsByName(self, bool):
        """
        V.SetMergeColumnsByName(bool)
        C++: virtual void SetMergeColumnsByName(bool _arg)
        
        If on, merges columns with the same name. If off, keeps both
        columns, but calls one FirstTablePrefix + name, and the other
        SecondTablePrefix + name. Default is on.
        """
        ...
    
    def SetPrefixAllButMerged(self, bool):
        """
        V.SetPrefixAllButMerged(bool)
        C++: virtual void SetPrefixAllButMerged(bool _arg)
        
        If on, all columns will have prefixes except merged columns. If
        off, only unmerged columns with the same name will have prefixes.
        Default is off.
        """
        ...
    
    def SetSecondTablePrefix(self, string):
        """
        V.SetSecondTablePrefix(string)
        C++: virtual void SetSecondTablePrefix(const char *_arg)
        
        The prefix to give to same-named fields from the second table.
        Default is "Table2.".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


