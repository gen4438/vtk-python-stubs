"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkStringToNumeric(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkStringToNumeric - Converts string arrays to numeric arrays
    
    Superclass: vtkDataObjectAlgorithm
    
    vtkStringToNumeric is a filter for converting a string array into a
    numeric arrays.
    """
    def ConvertCellDataOff(self):
        """
        V.ConvertCellDataOff()
        C++: virtual void ConvertCellDataOff()
        
        Whether to detect and convert point data arrays.  Default is on.
        """
        ...
    
    def ConvertCellDataOn(self):
        """
        V.ConvertCellDataOn()
        C++: virtual void ConvertCellDataOn()
        
        Whether to detect and convert point data arrays.  Default is on.
        """
        ...
    
    def ConvertEdgeDataOff(self):
        """
        V.ConvertEdgeDataOff()
        C++: virtual void ConvertEdgeDataOff()
        """
        ...
    
    def ConvertEdgeDataOn(self):
        """
        V.ConvertEdgeDataOn()
        C++: virtual void ConvertEdgeDataOn()
        """
        ...
    
    def ConvertFieldDataOff(self):
        """
        V.ConvertFieldDataOff()
        C++: virtual void ConvertFieldDataOff()
        
        Whether to detect and convert field data arrays.  Default is on.
        """
        ...
    
    def ConvertFieldDataOn(self):
        """
        V.ConvertFieldDataOn()
        C++: virtual void ConvertFieldDataOn()
        
        Whether to detect and convert field data arrays.  Default is on.
        """
        ...
    
    def ConvertPointDataOff(self):
        """
        V.ConvertPointDataOff()
        C++: virtual void ConvertPointDataOff()
        
        Whether to detect and convert cell data arrays.  Default is on.
        """
        ...
    
    def ConvertPointDataOn(self):
        """
        V.ConvertPointDataOn()
        C++: virtual void ConvertPointDataOn()
        
        Whether to detect and convert cell data arrays.  Default is on.
        """
        ...
    
    def ConvertRowDataOff(self):
        """
        V.ConvertRowDataOff()
        C++: virtual void ConvertRowDataOff()
        """
        ...
    
    def ConvertRowDataOn(self):
        """
        V.ConvertRowDataOn()
        C++: virtual void ConvertRowDataOn()
        """
        ...
    
    def ConvertVertexDataOff(self):
        """
        V.ConvertVertexDataOff()
        C++: virtual void ConvertVertexDataOff()
        """
        ...
    
    def ConvertVertexDataOn(self):
        """
        V.ConvertVertexDataOn()
        C++: virtual void ConvertVertexDataOn()
        """
        ...
    
    def ForceDoubleOff(self):
        """
        V.ForceDoubleOff()
        C++: virtual void ForceDoubleOff()
        
        Convert all numeric columns to vtkDoubleArray, even if they
        contain only integer values. Default is off.
        """
        ...
    
    def ForceDoubleOn(self):
        """
        V.ForceDoubleOn()
        C++: virtual void ForceDoubleOn()
        
        Convert all numeric columns to vtkDoubleArray, even if they
        contain only integer values. Default is off.
        """
        ...
    
    def GetConvertCellData(self):
        """
        V.GetConvertCellData() -> bool
        C++: virtual bool GetConvertCellData()
        
        Whether to detect and convert point data arrays.  Default is on.
        """
        ...
    
    def GetConvertEdgeData(self):
        """
        V.GetConvertEdgeData() -> bool
        C++: virtual bool GetConvertEdgeData()
        """
        ...
    
    def GetConvertFieldData(self):
        """
        V.GetConvertFieldData() -> bool
        C++: virtual bool GetConvertFieldData()
        
        Whether to detect and convert field data arrays.  Default is on.
        """
        ...
    
    def GetConvertPointData(self):
        """
        V.GetConvertPointData() -> bool
        C++: virtual bool GetConvertPointData()
        
        Whether to detect and convert cell data arrays.  Default is on.
        """
        ...
    
    def GetConvertRowData(self):
        """
        V.GetConvertRowData() -> bool
        C++: virtual bool GetConvertRowData()
        """
        ...
    
    def GetConvertVertexData(self):
        """
        V.GetConvertVertexData() -> bool
        C++: virtual bool GetConvertVertexData()
        """
        ...
    
    def GetDefaultDoubleValue(self):
        """
        V.GetDefaultDoubleValue() -> float
        C++: virtual double GetDefaultDoubleValue()
        
        Set the default double value assigned to arrays.  Default is 0.0
        """
        ...
    
    def GetDefaultIntegerValue(self):
        """
        V.GetDefaultIntegerValue() -> int
        C++: virtual int GetDefaultIntegerValue()
        
        Set the default integer value assigned to arrays.  Default is 0.
        """
        ...
    
    def GetForceDouble(self):
        """
        V.GetForceDouble() -> bool
        C++: virtual bool GetForceDouble()
        
        Convert all numeric columns to vtkDoubleArray, even if they
        contain only integer values. Default is off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTrimWhitespacePriorToNumericConversion(self):
        """
        V.GetTrimWhitespacePriorToNumericConversion() -> bool
        C++: virtual bool GetTrimWhitespacePriorToNumericConversion()
        
        Whether to trim whitespace from strings prior to conversion to a
        numeric. Default is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStringToNumeric
        C++: vtkStringToNumeric *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStringToNumeric
        C++: static vtkStringToNumeric *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetConvertCellData(self, bool):
        """
        V.SetConvertCellData(bool)
        C++: virtual void SetConvertCellData(bool _arg)
        
        Whether to detect and convert point data arrays.  Default is on.
        """
        ...
    
    def SetConvertEdgeData(self, bool):
        """
        V.SetConvertEdgeData(bool)
        C++: virtual void SetConvertEdgeData(bool b)
        
        Whether to detect and convert edge data arrays.  Default is on.
        """
        ...
    
    def SetConvertFieldData(self, bool):
        """
        V.SetConvertFieldData(bool)
        C++: virtual void SetConvertFieldData(bool _arg)
        
        Whether to detect and convert field data arrays.  Default is on.
        """
        ...
    
    def SetConvertPointData(self, bool):
        """
        V.SetConvertPointData(bool)
        C++: virtual void SetConvertPointData(bool _arg)
        
        Whether to detect and convert cell data arrays.  Default is on.
        """
        ...
    
    def SetConvertRowData(self, bool):
        """
        V.SetConvertRowData(bool)
        C++: virtual void SetConvertRowData(bool b)
        
        Whether to detect and convert row data arrays.  Default is on.
        """
        ...
    
    def SetConvertVertexData(self, bool):
        """
        V.SetConvertVertexData(bool)
        C++: virtual void SetConvertVertexData(bool b)
        
        Whether to detect and convert vertex data arrays.  Default is on.
        """
        ...
    
    def SetDefaultDoubleValue(self, p_float):
        """
        V.SetDefaultDoubleValue(float)
        C++: virtual void SetDefaultDoubleValue(double _arg)
        
        Set the default double value assigned to arrays.  Default is 0.0
        """
        ...
    
    def SetDefaultIntegerValue(self, p_int):
        """
        V.SetDefaultIntegerValue(int)
        C++: virtual void SetDefaultIntegerValue(int _arg)
        
        Set the default integer value assigned to arrays.  Default is 0.
        """
        ...
    
    def SetForceDouble(self, bool):
        """
        V.SetForceDouble(bool)
        C++: virtual void SetForceDouble(bool _arg)
        
        Convert all numeric columns to vtkDoubleArray, even if they
        contain only integer values. Default is off.
        """
        ...
    
    def SetTrimWhitespacePriorToNumericConversion(self, bool):
        """
        V.SetTrimWhitespacePriorToNumericConversion(bool)
        C++: virtual void SetTrimWhitespacePriorToNumericConversion(
            bool _arg)
        
        Whether to trim whitespace from strings prior to conversion to a
        numeric. Default is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def TrimWhitespacePriorToNumericConversionOff(self):
        """
        V.TrimWhitespacePriorToNumericConversionOff()
        C++: virtual void TrimWhitespacePriorToNumericConversionOff()
        
        Whether to trim whitespace from strings prior to conversion to a
        numeric. Default is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def TrimWhitespacePriorToNumericConversionOn(self):
        """
        V.TrimWhitespacePriorToNumericConversionOn()
        C++: virtual void TrimWhitespacePriorToNumericConversionOn()
        
        Whether to trim whitespace from strings prior to conversion to a
        numeric. Default is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


