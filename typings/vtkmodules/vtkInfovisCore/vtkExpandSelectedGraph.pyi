"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExpandSelectedGraph(__vtkmodules_vtkCommonExecutionModel.vtkSelectionAlgorithm):
    """
    vtkExpandSelectedGraph - expands a selection set of a vtkGraph
    
    Superclass: vtkSelectionAlgorithm
    
    The first input is a vtkSelection containing the selected vertices.
    The second input is a vtkGraph. This filter 'grows' the selection set
    in one of the following ways
    1) SetBFSDistance controls how many 'hops' the selection is grown
       from each seed point in the selection set (defaults to 1)
    2) IncludeShortestPaths controls whether this filter tries to
       'connect' the vertices in the selection set by computing the
       shortest path between the vertices (if such a path exists) Note:
       IncludeShortestPaths is currently non-functional
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Specify the first vtkSelection input and the second vtkGraph
        input.
        """
        ...
    
    def GetBFSDistance(self):
        """
        V.GetBFSDistance() -> int
        C++: virtual int GetBFSDistance()
        
        Set/Get BFSDistance which controls how many 'hops' the selection
        is grown from each seed point in the selection set (defaults to
        1)
        """
        ...
    
    def GetDomain(self):
        """
        V.GetDomain() -> string
        C++: virtual char *GetDomain()
        
        Set/Get the vertex domain to use in the expansion.
        """
        ...
    
    def GetIncludeShortestPaths(self):
        """
        V.GetIncludeShortestPaths() -> bool
        C++: virtual bool GetIncludeShortestPaths()
        
        Set/Get IncludeShortestPaths controls whether this filter tries
        to 'connect' the vertices in the selection set by computing the
        shortest path between the vertices (if such a path exists) Note:
        IncludeShortestPaths is currently non-functional
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseDomain(self):
        """
        V.GetUseDomain() -> bool
        C++: virtual bool GetUseDomain()
        
        Whether or not to use the domain when deciding to add a vertex to
        the expansion. Defaults to false.
        """
        ...
    
    def IncludeShortestPathsOff(self):
        """
        V.IncludeShortestPathsOff()
        C++: virtual void IncludeShortestPathsOff()
        
        Set/Get IncludeShortestPaths controls whether this filter tries
        to 'connect' the vertices in the selection set by computing the
        shortest path between the vertices (if such a path exists) Note:
        IncludeShortestPaths is currently non-functional
        """
        ...
    
    def IncludeShortestPathsOn(self):
        """
        V.IncludeShortestPathsOn()
        C++: virtual void IncludeShortestPathsOn()
        
        Set/Get IncludeShortestPaths controls whether this filter tries
        to 'connect' the vertices in the selection set by computing the
        shortest path between the vertices (if such a path exists) Note:
        IncludeShortestPaths is currently non-functional
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExpandSelectedGraph
        C++: vtkExpandSelectedGraph *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExpandSelectedGraph
        C++: static vtkExpandSelectedGraph *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBFSDistance(self, p_int):
        """
        V.SetBFSDistance(int)
        C++: virtual void SetBFSDistance(int _arg)
        
        Set/Get BFSDistance which controls how many 'hops' the selection
        is grown from each seed point in the selection set (defaults to
        1)
        """
        ...
    
    def SetDomain(self, string):
        """
        V.SetDomain(string)
        C++: virtual void SetDomain(const char *_arg)
        
        Set/Get the vertex domain to use in the expansion.
        """
        ...
    
    def SetGraphConnection(self, vtkAlgorithmOutput):
        """
        V.SetGraphConnection(vtkAlgorithmOutput)
        C++: void SetGraphConnection(vtkAlgorithmOutput *in)
        
        A convenience method for setting the second input (i.e. the
        graph).
        """
        ...
    
    def SetIncludeShortestPaths(self, bool):
        """
        V.SetIncludeShortestPaths(bool)
        C++: virtual void SetIncludeShortestPaths(bool _arg)
        
        Set/Get IncludeShortestPaths controls whether this filter tries
        to 'connect' the vertices in the selection set by computing the
        shortest path between the vertices (if such a path exists) Note:
        IncludeShortestPaths is currently non-functional
        """
        ...
    
    def SetUseDomain(self, bool):
        """
        V.SetUseDomain(bool)
        C++: virtual void SetUseDomain(bool _arg)
        
        Whether or not to use the domain when deciding to add a vertex to
        the expansion. Defaults to false.
        """
        ...
    
    def UseDomainOff(self):
        """
        V.UseDomainOff()
        C++: virtual void UseDomainOff()
        
        Whether or not to use the domain when deciding to add a vertex to
        the expansion. Defaults to false.
        """
        ...
    
    def UseDomainOn(self):
        """
        V.UseDomainOn()
        C++: virtual void UseDomainOn()
        
        Whether or not to use the domain when deciding to add a vertex to
        the expansion. Defaults to false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


