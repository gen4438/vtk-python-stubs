"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDotProductSimilarity(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkDotProductSimilarity - compute dot-product similarity metrics.
    
    Superclass: vtkTableAlgorithm
    
    Treats matrices as collections of vectors and computes dot-product
    similarity metrics between vectors.
    
    The results are returned as an edge-table that lists the index of
    each vector and their computed similarity.  The output edge-table is
    typically used with vtkTableToGraph to create a similarity graph.
    
    This filter can be used with one or two input matrices.  If you
    provide a single matrix as input, every vector in the matrix is
    compared with every other vector. If you provide two matrices, every
    vector in the first matrix is compared with every vector in the
    second matrix.
    
    Note that this filter *only* computes the dot-product between each
    pair of vectors; if you want to compute the cosine of the angles
    between vectors, you will need to normalize the inputs yourself.
    
    Inputs:
      Input port 0: (required) A vtkDenseArraywith two dimensions (a
    matrix).
      Input port 1: (optional) A vtkDenseArraywith two dimensions (a
    matrix).
    
    Outputs:
      Output port 0: A vtkTable containing "source", "target", and
    "similarity" columns.
    
    @warning
    Note that the complexity of this filter is quadratic!  It also
    requires dense arrays as input, in the future it should be
    generalized to accept sparse arrays.
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    """
    def GetDiagonal(self):
        """
        V.GetDiagonal() -> int
        C++: virtual int GetDiagonal()
        
        When computing similarities for a single input matrix, controls
        whether the results will include the diagonal of the similarity
        matrix.  Default: false.
        """
        ...
    
    def GetFirstSecond(self):
        """
        V.GetFirstSecond() -> int
        C++: virtual int GetFirstSecond()
        
        When computing similarities for two input matrices, controls
        whether the results will include comparisons from the first
        matrix to the second matrix.
        """
        ...
    
    def GetLowerDiagonal(self):
        """
        V.GetLowerDiagonal() -> int
        C++: virtual int GetLowerDiagonal()
        
        When computing similarities for a single input matrix, controls
        whether the results will include the lower diagonal of the
        similarity matrix.  Default: false.
        """
        ...
    
    def GetMaximumCount(self):
        """
        V.GetMaximumCount() -> int
        C++: virtual vtkIdType GetMaximumCount()
        
        Specifies a maximum number of edges to include for each vector.
        """
        ...
    
    def GetMinimumCount(self):
        """
        V.GetMinimumCount() -> int
        C++: virtual vtkIdType GetMinimumCount()
        
        Specifies a minimum number of edges to include for each vector.
        """
        ...
    
    def GetMinimumThreshold(self):
        """
        V.GetMinimumThreshold() -> float
        C++: virtual double GetMinimumThreshold()
        
        Specifies a minimum threshold that a similarity must exceed to be
        included in the output.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSecondFirst(self):
        """
        V.GetSecondFirst() -> int
        C++: virtual int GetSecondFirst()
        
        When computing similarities for two input matrices, controls
        whether the results will include comparisons from the second
        matrix to the first matrix.
        """
        ...
    
    def GetUpperDiagonal(self):
        """
        V.GetUpperDiagonal() -> int
        C++: virtual int GetUpperDiagonal()
        
        When computing similarities for a single input matrix, controls
        whether the results will include the upper diagonal of the
        similarity matrix.  Default: true.
        """
        ...
    
    def GetVectorDimension(self):
        """
        V.GetVectorDimension() -> int
        C++: virtual vtkIdType GetVectorDimension()
        
        Controls whether to compute similarities for row-vectors or
        column-vectors. 0 = rows, 1 = columns.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDotProductSimilarity
        C++: vtkDotProductSimilarity *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDotProductSimilarity
        C++: static vtkDotProductSimilarity *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDiagonal(self, p_int):
        """
        V.SetDiagonal(int)
        C++: virtual void SetDiagonal(int _arg)
        
        When computing similarities for a single input matrix, controls
        whether the results will include the diagonal of the similarity
        matrix.  Default: false.
        """
        ...
    
    def SetFirstSecond(self, p_int):
        """
        V.SetFirstSecond(int)
        C++: virtual void SetFirstSecond(int _arg)
        
        When computing similarities for two input matrices, controls
        whether the results will include comparisons from the first
        matrix to the second matrix.
        """
        ...
    
    def SetLowerDiagonal(self, p_int):
        """
        V.SetLowerDiagonal(int)
        C++: virtual void SetLowerDiagonal(int _arg)
        
        When computing similarities for a single input matrix, controls
        whether the results will include the lower diagonal of the
        similarity matrix.  Default: false.
        """
        ...
    
    def SetMaximumCount(self, p_int):
        """
        V.SetMaximumCount(int)
        C++: virtual void SetMaximumCount(vtkIdType _arg)
        
        Specifies a maximum number of edges to include for each vector.
        """
        ...
    
    def SetMinimumCount(self, p_int):
        """
        V.SetMinimumCount(int)
        C++: virtual void SetMinimumCount(vtkIdType _arg)
        
        Specifies a minimum number of edges to include for each vector.
        """
        ...
    
    def SetMinimumThreshold(self, p_float):
        """
        V.SetMinimumThreshold(float)
        C++: virtual void SetMinimumThreshold(double _arg)
        
        Specifies a minimum threshold that a similarity must exceed to be
        included in the output.
        """
        ...
    
    def SetSecondFirst(self, p_int):
        """
        V.SetSecondFirst(int)
        C++: virtual void SetSecondFirst(int _arg)
        
        When computing similarities for two input matrices, controls
        whether the results will include comparisons from the second
        matrix to the first matrix.
        """
        ...
    
    def SetUpperDiagonal(self, p_int):
        """
        V.SetUpperDiagonal(int)
        C++: virtual void SetUpperDiagonal(int _arg)
        
        When computing similarities for a single input matrix, controls
        whether the results will include the upper diagonal of the
        similarity matrix.  Default: true.
        """
        ...
    
    def SetVectorDimension(self, p_int):
        """
        V.SetVectorDimension(int)
        C++: virtual void SetVectorDimension(vtkIdType _arg)
        
        Controls whether to compute similarities for row-vectors or
        column-vectors. 0 = rows, 1 = columns.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


