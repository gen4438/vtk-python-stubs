"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTreeFieldAggregator(__vtkmodules_vtkCommonExecutionModel.vtkTreeAlgorithm):
    """
    vtkTreeFieldAggregator - aggregate field values from the leaves up
    the tree
    
    Superclass: vtkTreeAlgorithm
    
    vtkTreeFieldAggregator may be used to assign sizes to all the
    vertices in the tree, based on the sizes of the leaves.  The size of
    a vertex will equal the sum of the sizes of the child vertices.  If
    you have a data array with values for all leaves, you may specify
    that array, and the values will be filled in for interior tree
    vertices.  If you do not yet have an array, you may tell the filter
    to create a new array, assuming that the size of each leaf vertex is
    1.  You may optionally set a flag to first take the log of all leaf
    values before aggregating.
    """
    def GetField(self):
        """
        V.GetField() -> string
        C++: virtual char *GetField()
        
        The field to aggregate.  If this is a string array, the entries
        are converted to double. TODO: Remove this field and use the
        ArrayToProcess in vtkAlgorithm.
        """
        ...
    
    def GetLeafVertexUnitSize(self):
        """
        V.GetLeafVertexUnitSize() -> bool
        C++: virtual bool GetLeafVertexUnitSize()
        
        If set, the algorithm will assume a size of 1 for each leaf
        vertex.
        """
        ...
    
    def GetLogScale(self):
        """
        V.GetLogScale() -> bool
        C++: virtual bool GetLogScale()
        
        If set, the leaf values in the tree will be logarithmically
        scaled (base 10).
        """
        ...
    
    def GetMinValue(self):
        """
        V.GetMinValue() -> float
        C++: virtual double GetMinValue()
        
        If the value of the vertex is less than MinValue then consider
        it's value to be minVal.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LeafVertexUnitSizeOff(self):
        """
        V.LeafVertexUnitSizeOff()
        C++: virtual void LeafVertexUnitSizeOff()
        
        If set, the algorithm will assume a size of 1 for each leaf
        vertex.
        """
        ...
    
    def LeafVertexUnitSizeOn(self):
        """
        V.LeafVertexUnitSizeOn()
        C++: virtual void LeafVertexUnitSizeOn()
        
        If set, the algorithm will assume a size of 1 for each leaf
        vertex.
        """
        ...
    
    def LogScaleOff(self):
        """
        V.LogScaleOff()
        C++: virtual void LogScaleOff()
        
        If set, the leaf values in the tree will be logarithmically
        scaled (base 10).
        """
        ...
    
    def LogScaleOn(self):
        """
        V.LogScaleOn()
        C++: virtual void LogScaleOn()
        
        If set, the leaf values in the tree will be logarithmically
        scaled (base 10).
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeFieldAggregator
        C++: vtkTreeFieldAggregator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeFieldAggregator
        C++: static vtkTreeFieldAggregator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetField(self, string):
        """
        V.SetField(string)
        C++: virtual void SetField(const char *_arg)
        
        The field to aggregate.  If this is a string array, the entries
        are converted to double. TODO: Remove this field and use the
        ArrayToProcess in vtkAlgorithm.
        """
        ...
    
    def SetLeafVertexUnitSize(self, bool):
        """
        V.SetLeafVertexUnitSize(bool)
        C++: virtual void SetLeafVertexUnitSize(bool _arg)
        
        If set, the algorithm will assume a size of 1 for each leaf
        vertex.
        """
        ...
    
    def SetLogScale(self, bool):
        """
        V.SetLogScale(bool)
        C++: virtual void SetLogScale(bool _arg)
        
        If set, the leaf values in the tree will be logarithmically
        scaled (base 10).
        """
        ...
    
    def SetMinValue(self, p_float):
        """
        V.SetMinValue(float)
        C++: virtual void SetMinValue(double _arg)
        
        If the value of the vertex is less than MinValue then consider
        it's value to be minVal.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


