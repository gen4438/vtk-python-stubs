"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkKCoreDecomposition(__vtkmodules_vtkCommonExecutionModel.vtkGraphAlgorithm):
    """
    vtkKCoreDecomposition - Compute the k-core decomposition of the input
    graph.
    
    Superclass: vtkGraphAlgorithm
    
    The k-core decomposition is a graph partitioning strategy that is
    useful for analyzing the structure of large networks. A k-core of a
    graph G is a maximal connected subgraph of G in which all vertices
    have degree at least k.  The k-core membership for each vertex of the
    input graph is found on the vertex data of the output graph as an
    array named 'KCoreDecompositionNumbers' by default.  The algorithm
    used to find the k-cores has O(number of graph edges) running time,
    and is described in the following reference paper.
    
    An O(m) Algorithm for Cores Decomposition of Networks
      V. Batagelj, M. Zaversnik, 2001
    
    @par Thanks: Thanks to Thomas Otahal from Sandia National
    Laboratories for providing this implementation.
    """
    def CheckInputGraphOff(self):
        """
        V.CheckInputGraphOff()
        C++: virtual void CheckInputGraphOff()
        
        Check the input graph for self loops and parallel edges.  The
        k-core is not defined for graphs that contain either of these. 
        Default is on.
        """
        ...
    
    def CheckInputGraphOn(self):
        """
        V.CheckInputGraphOn()
        C++: virtual void CheckInputGraphOn()
        
        Check the input graph for self loops and parallel edges.  The
        k-core is not defined for graphs that contain either of these. 
        Default is on.
        """
        ...
    
    def GetCheckInputGraph(self):
        """
        V.GetCheckInputGraph() -> bool
        C++: virtual bool GetCheckInputGraph()
        
        Check the input graph for self loops and parallel edges.  The
        k-core is not defined for graphs that contain either of these. 
        Default is on.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseInDegreeNeighbors(self):
        """
        V.GetUseInDegreeNeighbors() -> bool
        C++: virtual bool GetUseInDegreeNeighbors()
        
        Directed graphs only.  Use only the in edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def GetUseOutDegreeNeighbors(self):
        """
        V.GetUseOutDegreeNeighbors() -> bool
        C++: virtual bool GetUseOutDegreeNeighbors()
        
        Directed graphs only.  Use only the out edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkKCoreDecomposition
        C++: vtkKCoreDecomposition *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkKCoreDecomposition
        C++: static vtkKCoreDecomposition *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCheckInputGraph(self, bool):
        """
        V.SetCheckInputGraph(bool)
        C++: virtual void SetCheckInputGraph(bool _arg)
        
        Check the input graph for self loops and parallel edges.  The
        k-core is not defined for graphs that contain either of these. 
        Default is on.
        """
        ...
    
    def SetOutputArrayName(self, string):
        """
        V.SetOutputArrayName(string)
        C++: virtual void SetOutputArrayName(const char *_arg)
        
        Set the output array name. If no output array name is set then
        the name 'KCoreDecompositionNumbers' is used.
        """
        ...
    
    def SetUseInDegreeNeighbors(self, bool):
        """
        V.SetUseInDegreeNeighbors(bool)
        C++: virtual void SetUseInDegreeNeighbors(bool _arg)
        
        Directed graphs only.  Use only the in edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def SetUseOutDegreeNeighbors(self, bool):
        """
        V.SetUseOutDegreeNeighbors(bool)
        C++: virtual void SetUseOutDegreeNeighbors(bool _arg)
        
        Directed graphs only.  Use only the out edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def UseInDegreeNeighborsOff(self):
        """
        V.UseInDegreeNeighborsOff()
        C++: virtual void UseInDegreeNeighborsOff()
        
        Directed graphs only.  Use only the in edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def UseInDegreeNeighborsOn(self):
        """
        V.UseInDegreeNeighborsOn()
        C++: virtual void UseInDegreeNeighborsOn()
        
        Directed graphs only.  Use only the in edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def UseOutDegreeNeighborsOff(self):
        """
        V.UseOutDegreeNeighborsOff()
        C++: virtual void UseOutDegreeNeighborsOff()
        
        Directed graphs only.  Use only the out edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def UseOutDegreeNeighborsOn(self):
        """
        V.UseOutDegreeNeighborsOn()
        C++: virtual void UseOutDegreeNeighborsOn()
        
        Directed graphs only.  Use only the out edges to compute the
        vertex degree of a vertex.  The default is to use both in and out
        edges to compute vertex degree.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


