"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkGraphHierarchicalBundleEdges(__vtkmodules_vtkCommonExecutionModel.vtkGraphAlgorithm):
    """
    vtkGraphHierarchicalBundleEdges - layout graph arcs in bundles
    
    Superclass: vtkGraphAlgorithm
    
    This algorithm creates a vtkPolyData from a vtkGraph.  As opposed to
    vtkGraphToPolyData, which converts each arc into a straight line,
    each arc is converted to a polyline, following a tree structure.  The
    filter requires both a vtkGraph and vtkTree as input.  The tree
    vertices must be a superset of the graph vertices.  A common example
    is when the graph vertices correspond to the leaves of the tree, but
    the internal vertices of the tree represent groupings of graph
    vertices.  The algorithm matches the vertices using the array
    "PedigreeId".  The user may alternately set the DirectMapping flag to
    indicate that the two structures must have directly corresponding
    offsets (i.e. node i in the graph must correspond to node i in the
    tree).
    
    The vtkGraph defines the topology of the output vtkPolyData (i.e. the
    connections between nodes) while the vtkTree defines the geometry
    (i.e. the location of nodes and arc routes).  Thus, the tree must
    have been assigned vertex locations, but the graph does not need
    locations, in fact they will be ignored.  The edges approximately
    follow the path from the source to target nodes in the tree.  A
    bundling parameter controls how closely the edges are bundled
    together along the tree structure.
    
    You may follow this algorithm with vtkSplineFilter in order to make
    nicely curved edges.
    
    @par Thanks: This algorithm was developed in the paper Danny Holten.
    Hierarchical Edge Bundles: Visualization of Adjacency Relations
    Relations in Hierarchical Data. IEEE Transactions on Visualization
    and Computer Graphics, Vol. 12, No. 5, 2006. pp. 741-748.
    """
    def DirectMappingOff(self):
        """
        V.DirectMappingOff()
        C++: virtual void DirectMappingOff()
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def DirectMappingOn(self):
        """
        V.DirectMappingOn()
        C++: virtual void DirectMappingOn()
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Set the input type of the algorithm to vtkGraph.
        """
        ...
    
    def GetBundlingStrength(self):
        """
        V.GetBundlingStrength() -> float
        C++: virtual double GetBundlingStrength()
        
        The level of arc bundling in the graph. A strength of 0 creates
        straight lines, while a strength of 1 forces arcs to pass
        directly through hierarchy node points. The default value is 0.8.
        """
        ...
    
    def GetBundlingStrengthMaxValue(self):
        """
        V.GetBundlingStrengthMaxValue() -> float
        C++: virtual double GetBundlingStrengthMaxValue()
        
        The level of arc bundling in the graph. A strength of 0 creates
        straight lines, while a strength of 1 forces arcs to pass
        directly through hierarchy node points. The default value is 0.8.
        """
        ...
    
    def GetBundlingStrengthMinValue(self):
        """
        V.GetBundlingStrengthMinValue() -> float
        C++: virtual double GetBundlingStrengthMinValue()
        
        The level of arc bundling in the graph. A strength of 0 creates
        straight lines, while a strength of 1 forces arcs to pass
        directly through hierarchy node points. The default value is 0.8.
        """
        ...
    
    def GetDirectMapping(self):
        """
        V.GetDirectMapping() -> bool
        C++: virtual bool GetDirectMapping()
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphHierarchicalBundleEdges
        C++: vtkGraphHierarchicalBundleEdges *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphHierarchicalBundleEdges
        C++: static vtkGraphHierarchicalBundleEdges *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBundlingStrength(self, p_float):
        """
        V.SetBundlingStrength(float)
        C++: virtual void SetBundlingStrength(double _arg)
        
        The level of arc bundling in the graph. A strength of 0 creates
        straight lines, while a strength of 1 forces arcs to pass
        directly through hierarchy node points. The default value is 0.8.
        """
        ...
    
    def SetDirectMapping(self, bool):
        """
        V.SetDirectMapping(bool)
        C++: virtual void SetDirectMapping(bool _arg)
        
        If on, uses direct mapping from tree to graph vertices. If off,
        both the graph and tree must contain PedigreeId arrays which are
        used to match graph and tree vertices. Default is off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


