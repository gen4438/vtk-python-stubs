"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTreeDifferenceFilter(__vtkmodules_vtkCommonExecutionModel.vtkGraphAlgorithm):
    """
    vtkTreeDifferenceFilter - compare two trees
    
    Superclass: vtkGraphAlgorithm
    
    vtkTreeDifferenceFilter compares two trees by analyzing a
    vtkDoubleArray. Each tree must have a copy of this array.  A user of
    this filter should call SetComparisonArrayName to specify the array
    that should be used as the basis of coparison.  This array can either
    be part of the trees' EdgeData or VertexData.
    """
    def GetComparisonArrayIsVertexData(self):
        """
        V.GetComparisonArrayIsVertexData() -> bool
        C++: virtual bool GetComparisonArrayIsVertexData()
        
        Specify whether the comparison array is within the trees' vertex
        data or not.  By default, we assume that the array to compare is
        within the trees' EdgeData().
        """
        ...
    
    def GetComparisonArrayName(self):
        """
        V.GetComparisonArrayName() -> string
        C++: virtual char *GetComparisonArrayName()
        
        Set/Get the name of the array that we're comparing between the
        two trees. The named array must be a vtkDoubleArray.
        """
        ...
    
    def GetIdArrayName(self):
        """
        V.GetIdArrayName() -> string
        C++: virtual char *GetIdArrayName()
        
        Set/Get the name of the identifier array in the trees'
        VertexData. This array is used to find corresponding vertices in
        the two trees. If this array name is not set, then we assume that
        the vertices in the two trees to compare have corresponding
        vtkIdTypes. Otherwise, the named array must be a vtkStringArray.
        The identifier array does not necessarily have to specify a name
        for each vertex in the tree.  If some vertices are unnamed, then
        this filter will assign correspondence between ancestors of named
        vertices.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputArrayName(self):
        """
        V.GetOutputArrayName() -> string
        C++: virtual char *GetOutputArrayName()
        
        Set/Get the name of a new vtkDoubleArray that will contain the
        results of the comparison between the two trees.  This new array
        will be added to the input tree's VertexData or EdgeData, based
        on the value of ComparisonArrayIsVertexData.  If this method is
        not called, the new vtkDoubleArray will be named "difference" by
        default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeDifferenceFilter
        C++: vtkTreeDifferenceFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeDifferenceFilter
        C++: static vtkTreeDifferenceFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetComparisonArrayIsVertexData(self, bool):
        """
        V.SetComparisonArrayIsVertexData(bool)
        C++: virtual void SetComparisonArrayIsVertexData(bool _arg)
        
        Specify whether the comparison array is within the trees' vertex
        data or not.  By default, we assume that the array to compare is
        within the trees' EdgeData().
        """
        ...
    
    def SetComparisonArrayName(self, string):
        """
        V.SetComparisonArrayName(string)
        C++: virtual void SetComparisonArrayName(const char *_arg)
        
        Set/Get the name of the array that we're comparing between the
        two trees. The named array must be a vtkDoubleArray.
        """
        ...
    
    def SetIdArrayName(self, string):
        """
        V.SetIdArrayName(string)
        C++: virtual void SetIdArrayName(const char *_arg)
        
        Set/Get the name of the identifier array in the trees'
        VertexData. This array is used to find corresponding vertices in
        the two trees. If this array name is not set, then we assume that
        the vertices in the two trees to compare have corresponding
        vtkIdTypes. Otherwise, the named array must be a vtkStringArray.
        The identifier array does not necessarily have to specify a name
        for each vertex in the tree.  If some vertices are unnamed, then
        this filter will assign correspondence between ancestors of named
        vertices.
        """
        ...
    
    def SetOutputArrayName(self, string):
        """
        V.SetOutputArrayName(string)
        C++: virtual void SetOutputArrayName(const char *_arg)
        
        Set/Get the name of a new vtkDoubleArray that will contain the
        results of the comparison between the two trees.  This new array
        will be added to the input tree's VertexData or EdgeData, based
        on the value of ComparisonArrayIsVertexData.  If this method is
        not called, the new vtkDoubleArray will be named "difference" by
        default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


