"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAdjacencyMatrixToEdgeTable(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkAdjacencyMatrixToEdgeTable - Treats a dense 2-way array of doubles
    as an adacency matrix and converts it into a vtkTable suitable for
    use as an edge table with vtkTableToGraph.
    
    Superclass: vtkTableAlgorithm
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    """
    def GetMinimumCount(self):
        """
        V.GetMinimumCount() -> int
        C++: virtual vtkIdType GetMinimumCount()
        
        Specifies the minimum number of adjacent edges to include for
        each source vertex. Default: 0
        """
        ...
    
    def GetMinimumThreshold(self):
        """
        V.GetMinimumThreshold() -> float
        C++: virtual double GetMinimumThreshold()
        
        Specifies a minimum threshold that an edge weight must exceed to
        be included in the output. Default: 0.5
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSourceDimension(self):
        """
        V.GetSourceDimension() -> int
        C++: virtual vtkIdType GetSourceDimension()
        
        Specifies whether rows or columns become the "source" in the
        output edge table. 0 = rows, 1 = columns.  Default: 0
        """
        ...
    
    def GetValueArrayName(self):
        """
        V.GetValueArrayName() -> string
        C++: virtual char *GetValueArrayName()
        
        Controls the name of the output table column that contains edge
        weights. Default: "value"
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAdjacencyMatrixToEdgeTable
        C++: vtkAdjacencyMatrixToEdgeTable *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAdjacencyMatrixToEdgeTable
        C++: static vtkAdjacencyMatrixToEdgeTable *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetMinimumCount(self, p_int):
        """
        V.SetMinimumCount(int)
        C++: virtual void SetMinimumCount(vtkIdType _arg)
        
        Specifies the minimum number of adjacent edges to include for
        each source vertex. Default: 0
        """
        ...
    
    def SetMinimumThreshold(self, p_float):
        """
        V.SetMinimumThreshold(float)
        C++: virtual void SetMinimumThreshold(double _arg)
        
        Specifies a minimum threshold that an edge weight must exceed to
        be included in the output. Default: 0.5
        """
        ...
    
    def SetSourceDimension(self, p_int):
        """
        V.SetSourceDimension(int)
        C++: virtual void SetSourceDimension(vtkIdType _arg)
        
        Specifies whether rows or columns become the "source" in the
        output edge table. 0 = rows, 1 = columns.  Default: 0
        """
        ...
    
    def SetValueArrayName(self, string):
        """
        V.SetValueArrayName(string)
        C++: virtual void SetValueArrayName(const char *_arg)
        
        Controls the name of the output table column that contains edge
        weights. Default: "value"
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


