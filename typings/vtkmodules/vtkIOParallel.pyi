"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOCore as __vtkmodules_vtkIOCore
import vtkmodules.vtkIOGeometry as __vtkmodules_vtkIOGeometry
import vtkmodules.vtkIOImage as __vtkmodules_vtkIOImage
import vtkmodules.vtkIOLegacy as __vtkmodules_vtkIOLegacy

class vtkEnSightWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkEnSightWriter - write vtk unstructured grid data as an EnSight file
    
    Superclass: vtkWriter
    
    vtkEnSightWriter is a source object that writes binary unstructured
    grid data files in EnSight format. See EnSight Manual for format
    details
    
    @warning
    Binary files written on one system may not be readable on other
    systems. Be sure to specify the endian-ness of the file when reading
    it into EnSight
    """
    def GetBaseName(self):
        """
        V.GetBaseName() -> string
        C++: virtual char *GetBaseName()
        
        Specify base name of EnSight data files to write.
        """
        ...
    
    def GetBlockIDs(self):
        """
        V.GetBlockIDs() -> (int, ...)
        C++: virtual int *GetBlockIDs()
        
        set the array of Block ID's this class keeps a reference to the
        array and will not delete it
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the path and base name of the output files.
        """
        ...
    
    def GetGhostLevel(self):
        """
        V.GetGhostLevel() -> int
        C++: virtual int GetGhostLevel()
        
        Specify the number of ghost levels to include in output files
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkUnstructuredGrid
        C++: virtual vtkUnstructuredGrid *GetInput()
        
        Specify the input data or filter.
        """
        ...
    
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: virtual int GetNumberOfBlocks()
        
        set the number of block ID's
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPath(self):
        """
        V.GetPath() -> string
        C++: virtual char *GetPath()
        
        Specify path of EnSight data files to write.
        """
        ...
    
    def GetProcessNumber(self):
        """
        V.GetProcessNumber() -> int
        C++: virtual int GetProcessNumber()
        
        Specify which process this writer is
        """
        ...
    
    def GetTimeStep(self):
        """
        V.GetTimeStep() -> int
        C++: virtual int GetTimeStep()
        
        Specify the Timestep that this data is for
        """
        ...
    
    def GetTransientGeometry(self):
        """
        V.GetTransientGeometry() -> bool
        C++: virtual bool GetTransientGeometry()
        
        Specify whether the geometry changes each timestep if false,
        geometry is only written at timestep 0
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnSightWriter
        C++: vtkEnSightWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnSightWriter
        C++: static vtkEnSightWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBaseName(self, string):
        """
        V.SetBaseName(string)
        C++: virtual void SetBaseName(const char *_arg)
        
        Specify base name of EnSight data files to write.
        """
        ...
    
    def SetBlockIDs(self, *int):
        """
        V.SetBlockIDs([int, ...])
        C++: virtual void SetBlockIDs(int *val)
        
        set the array of Block ID's this class keeps a reference to the
        array and will not delete it
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the path and base name of the output files.
        """
        ...
    
    def SetGhostLevel(self, p_int):
        """
        V.SetGhostLevel(int)
        C++: virtual void SetGhostLevel(int _arg)
        
        Specify the number of ghost levels to include in output files
        """
        ...
    
    def SetInputData(self, vtkUnstructuredGrid):
        """
        V.SetInputData(vtkUnstructuredGrid)
        C++: virtual void SetInputData(vtkUnstructuredGrid *input)
        
        Specify the input data or filter.
        """
        ...
    
    def SetNumberOfBlocks(self, p_int):
        """
        V.SetNumberOfBlocks(int)
        C++: virtual void SetNumberOfBlocks(int _arg)
        
        set the number of block ID's
        """
        ...
    
    def SetPath(self, string):
        """
        V.SetPath(string)
        C++: virtual void SetPath(const char *_arg)
        
        Specify path of EnSight data files to write.
        """
        ...
    
    def SetProcessNumber(self, p_int):
        """
        V.SetProcessNumber(int)
        C++: virtual void SetProcessNumber(int _arg)
        
        Specify which process this writer is
        """
        ...
    
    def SetTimeStep(self, p_int):
        """
        V.SetTimeStep(int)
        C++: virtual void SetTimeStep(int _arg)
        
        Specify the Timestep that this data is for
        """
        ...
    
    def SetTransientGeometry(self, bool):
        """
        V.SetTransientGeometry(bool)
        C++: virtual void SetTransientGeometry(bool _arg)
        
        Specify whether the geometry changes each timestep if false,
        geometry is only written at timestep 0
        """
        ...
    
    def WriteCaseFile(self, p_int):
        """
        V.WriteCaseFile(int)
        C++: virtual void WriteCaseFile(int TotalTimeSteps)
        
        Writes the case file that EnSight is capable of reading The other
        data files must be written before the case file and the input
        must be one of the time steps variables must be the same for all
        time steps or the case file will be missing variables
        """
        ...
    
    def WriteSOSCaseFile(self, p_int):
        """
        V.WriteSOSCaseFile(int)
        C++: virtual void WriteSOSCaseFile(int NumProcs)
        
        Writes the case file that EnSight is capable of reading The other
        data files must be written before the case file and the input
        must be one of the time steps variables must be the same for all
        time steps or the case file will be missing variables
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMultiBlockPLOT3DReader(__vtkmodules_vtkCommonExecutionModel.vtkParallelReader):
    """
    vtkMultiBlockPLOT3DReader - read PLOT3D data files
    
    Superclass: vtkParallelReader
    
    vtkMultiBlockPLOT3DReader is a reader object that reads PLOT3D
    formatted files and generates structured grid(s) on output. PLOT3D is
    a computer graphics program designed to visualize the grids and
    solutions of computational fluid dynamics. This reader also supports
    the variant of the PLOT3D format used by NASA's OVERFLOW CFD
    software, including full support for all Q variables. Please see the "PLOT3D User's
    Manual" available from NASA Ames Research Center, Moffett Field CA.
    
    PLOT3D files consist of a grid file (also known as XYZ file), an
    optional solution file (also known as a Q file), and an optional
    function file that contains user created data (currently
    unsupported). The Q file contains solution information as follows:
    the four parameters free stream mach number (Fsmach), angle of attack
    (Alpha), Reynolds number (Re), and total integration time (Time).
    This information is stored in an array called Properties in the
    FieldData of each output (tuple 0: fsmach, tuple 1: alpha, tuple 2:
    re, tuple 3: time). In addition, the solution file contains the flow
    density (scalar), flow momentum (vector), and flow energy (scalar).
    
    This reader supports a limited form of time series data which are
    stored as a series of Q files. Using the AddFileName() method
    provided by the superclass, one can define a file series. For other
    cases, for example where the XYZ or function files vary over time,
    use vtkPlot3DMetaReader.
    
    The reader can generate additional scalars and vectors (or
    "functions") from this information. To use vtkMultiBlockPLOT3DReader,
    you must specify the particular function number for the scalar and
    vector you want to visualize. This implementation of the reader
    provides the following functions. The scalar functions are:
    -1  - don't read or compute any scalars 100 - density 110 - pressure
       111 - pressure coefficient (requires Overflow file with Gamma) 112
    - mach number (requires Overflow file with Gamma) 113 - sounds speed
       (requires Overflow file with Gamma) 120 - temperature 130 -
       enthalpy 140 - internal energy 144 - kinetic energy 153 - velocity
    magnitude 163 - stagnation energy 170 - entropy 184 - swirl 211 -
       vorticity magnitude
    
    The vector functions are:
    -1  - don't read or compute any vectors 200 - velocity 201 -
       vorticity 202 - momentum 210 - pressure gradient. 212 - strain
       rate
    
    (Other functions are described in the PLOT3D spec, but only those
    listed are implemented here.) Note that by default, this reader
    creates the density scalar (100), stagnation energy (163) and
    momentum vector (202) as output. (These are just read in from the
    solution file.) Please note that the validity of computation is a
    function of this class's gas constants (R, Gamma) and the equations
    used. They may not be suitable for your computational domain.
    
    Additionally, you can read other data and associate it as a
    vtkDataArray into the output's point attribute data. Use the method
    AddFunction() to list all the functions that you'd like to read.
    AddFunction() accepts an integer parameter that defines the function
    number.
    
    @sa
    vtkMultiBlockDataSet vtkStructuredGrid vtkPlot3DMetaReader
    """
    def AddFunction(self, p_int):
        """
        V.AddFunction(int)
        C++: void AddFunction(int functionNumber)
        
        Specify additional functions to read. These are placed into the
        point data as data arrays. Later on they can be used by labeling
        them as scalars, etc.
        """
        ...
    
    def AddFunctionName(self, string):
        """
        V.AddFunctionName(string)
        C++: void AddFunctionName(const std::string &name)
        """
        ...
    
    def AutoDetectFormatOff(self):
        """
        V.AutoDetectFormatOff()
        C++: virtual void AutoDetectFormatOff()
        
        When this option is turned on, the reader will try to figure out
        the values of various options such as byte order, byte count etc.
        automatically. This options works only for binary files. When it
        is turned on, the reader should be able to read most Plot3D files
        automatically. The default is OFF for backwards compatibility
        reasons. For binary files, it is strongly recommended that you
        turn on AutoDetectFormat and leave the other file format related
        options untouched.
        """
        ...
    
    def AutoDetectFormatOn(self):
        """
        V.AutoDetectFormatOn()
        C++: virtual void AutoDetectFormatOn()
        
        When this option is turned on, the reader will try to figure out
        the values of various options such as byte order, byte count etc.
        automatically. This options works only for binary files. When it
        is turned on, the reader should be able to read most Plot3D files
        automatically. The default is OFF for backwards compatibility
        reasons. For binary files, it is strongly recommended that you
        turn on AutoDetectFormat and leave the other file format related
        options untouched.
        """
        ...
    
    def BinaryFileOff(self):
        """
        V.BinaryFileOff()
        C++: virtual void BinaryFileOff()
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def BinaryFileOn(self):
        """
        V.BinaryFileOn()
        C++: virtual void BinaryFileOn()
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def CanReadBinaryFile(self, string):
        """
        V.CanReadBinaryFile(string) -> int
        C++: virtual int CanReadBinaryFile(const char *fname)
        
        Return 1 if the reader can read the given file name. Only
        meaningful for binary files.
        """
        ...
    
    def DoublePrecisionOff(self):
        """
        V.DoublePrecisionOff()
        C++: virtual void DoublePrecisionOff()
        
        Is this file in double precision or single precision. This only
        matters for binary files. Default is single.
        """
        ...
    
    def DoublePrecisionOn(self):
        """
        V.DoublePrecisionOn()
        C++: virtual void DoublePrecisionOn()
        
        Is this file in double precision or single precision. This only
        matters for binary files. Default is single.
        """
        ...
    
    def ForceReadOff(self):
        """
        V.ForceReadOff()
        C++: virtual void ForceReadOff()
        
        Try to read a binary file even if the file length seems to be
        inconsistent with the header information. Use this with caution,
        if the file length is not the same as calculated from the header.
        either the file is corrupt or the settings are wrong.
        """
        ...
    
    def ForceReadOn(self):
        """
        V.ForceReadOn()
        C++: virtual void ForceReadOn()
        
        Try to read a binary file even if the file length seems to be
        inconsistent with the header information. Use this with caution,
        if the file length is not the same as calculated from the header.
        either the file is corrupt or the settings are wrong.
        """
        ...
    
    def GetAutoDetectFormat(self):
        """
        V.GetAutoDetectFormat() -> int
        C++: virtual vtkTypeBool GetAutoDetectFormat()
        
        When this option is turned on, the reader will try to figure out
        the values of various options such as byte order, byte count etc.
        automatically. This options works only for binary files. When it
        is turned on, the reader should be able to read most Plot3D files
        automatically. The default is OFF for backwards compatibility
        reasons. For binary files, it is strongly recommended that you
        turn on AutoDetectFormat and leave the other file format related
        options untouched.
        """
        ...
    
    def GetBinaryFile(self):
        """
        V.GetBinaryFile() -> int
        C++: virtual vtkTypeBool GetBinaryFile()
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def GetByteOrder(self):
        """
        V.GetByteOrder() -> int
        C++: virtual int GetByteOrder()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def GetByteOrderAsString(self):
        """
        V.GetByteOrderAsString() -> string
        C++: const char *GetByteOrderAsString()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set/Get the communicator object (we'll use global World
        controller if you don't set a different one).
        """
        ...
    
    def GetDoublePrecision(self):
        """
        V.GetDoublePrecision() -> int
        C++: virtual vtkTypeBool GetDoublePrecision()
        
        Is this file in double precision or single precision. This only
        matters for binary files. Default is single.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: const char *GetFileName()
        V.GetFileName(int) -> string
        C++: const char *GetFileName(int i)
        
        Set/Get the PLOT3D geometry filename.
        """
        ...
    
    def GetForceRead(self):
        """
        V.GetForceRead() -> int
        C++: virtual vtkTypeBool GetForceRead()
        
        Try to read a binary file even if the file length seems to be
        inconsistent with the header information. Use this with caution,
        if the file length is not the same as calculated from the header.
        either the file is corrupt or the settings are wrong.
        """
        ...
    
    def GetFunctionFileName(self):
        """
        V.GetFunctionFileName() -> string
        C++: virtual char *GetFunctionFileName()
        
        Set/Get the PLOT3D function filename.
        """
        ...
    
    def GetGamma(self):
        """
        V.GetGamma() -> float
        C++: virtual double GetGamma()
        
        Set/Get the ratio of specific heats. Default is 1.4.
        """
        ...
    
    def GetHasByteCount(self):
        """
        V.GetHasByteCount() -> int
        C++: virtual vtkTypeBool GetHasByteCount()
        
        Were the arrays written with leading and trailing byte counts ?
        Usually, files written by a fortran program will contain these
        byte counts whereas the ones written by C/C++ won't.
        """
        ...
    
    def GetIBlanking(self):
        """
        V.GetIBlanking() -> int
        C++: virtual vtkTypeBool GetIBlanking()
        
        Is there iblanking (point visibility) information in the file. If
        there is iblanking arrays, these will be read and assigned to the
        PointVisibility array of the output.
        """
        ...
    
    def GetMultiGrid(self):
        """
        V.GetMultiGrid() -> int
        C++: virtual vtkTypeBool GetMultiGrid()
        
        Does the file to be read contain information about number of
        grids. In some PLOT3D files, the first value contains the number
        of grids (even if there is only 1). If reading such a file, set
        this to true.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkMultiBlockDataSet
        C++: vtkMultiBlockDataSet *GetOutput()
        V.GetOutput(int) -> vtkMultiBlockDataSet
        C++: vtkMultiBlockDataSet *GetOutput(int)
        
        Get the output data object for a port on this algorithm.
        """
        ...
    
    def GetPreserveIntermediateFunctions(self):
        """
        V.GetPreserveIntermediateFunctions() -> bool
        C++: virtual bool GetPreserveIntermediateFunctions()
        
        When set to true (default), the reader will preserve intermediate
        computed quantities that were not explicitly requested e.g. if
        `VelocityMagnitude` is enabled, but not `Velocity`, the reader
        still needs to compute `Velocity`. If
        `PreserveIntermediateFunctions` if false, then the output will
        not have `Velocity` array, only the requested
        `VelocityMagnitude`. This is useful to avoid using up memory for
        arrays that are not relevant for the analysis.
        """
        ...
    
    def GetQFileName(self):
        """
        V.GetQFileName() -> string
        C++: const char *GetQFileName()
        
        Set/Get the PLOT3D solution filename. This adds a filename using
        the superclass' AddFileName() method. To read a series of q
        files, use the AddFileName() interface directly to add multiple q
        filenames in the appropriate order. If the files are of Overflow
        format, the reader will read the time values from the files.
        Otherwise, it will use an integer sequence. Use a meta reader to
        support time values for non-Overflow file sequences.
        """
        ...
    
    def GetR(self):
        """
        V.GetR() -> float
        C++: virtual double GetR()
        
        Set/Get the gas constant. Default is 1.0.
        """
        ...
    
    def GetScalarFunctionNumber(self):
        """
        V.GetScalarFunctionNumber() -> int
        C++: virtual int GetScalarFunctionNumber()
        
        Specify the scalar function to extract. If ==(-1), then no scalar
        function is extracted.
        """
        ...
    
    def GetTwoDimensionalGeometry(self):
        """
        V.GetTwoDimensionalGeometry() -> int
        C++: virtual vtkTypeBool GetTwoDimensionalGeometry()
        
        If only two-dimensional data was written to the file, turn this
        on.
        """
        ...
    
    def GetVectorFunctionNumber(self):
        """
        V.GetVectorFunctionNumber() -> int
        C++: virtual int GetVectorFunctionNumber()
        
        Specify the vector function to extract. If ==(-1), then no vector
        function is extracted.
        """
        ...
    
    def GetXYZFileName(self):
        """
        V.GetXYZFileName() -> string
        C++: virtual char *GetXYZFileName()
        
        Set/Get the PLOT3D geometry filename.
        """
        ...
    
    def HasByteCountOff(self):
        """
        V.HasByteCountOff()
        C++: virtual void HasByteCountOff()
        
        Were the arrays written with leading and trailing byte counts ?
        Usually, files written by a fortran program will contain these
        byte counts whereas the ones written by C/C++ won't.
        """
        ...
    
    def HasByteCountOn(self):
        """
        V.HasByteCountOn()
        C++: virtual void HasByteCountOn()
        
        Were the arrays written with leading and trailing byte counts ?
        Usually, files written by a fortran program will contain these
        byte counts whereas the ones written by C/C++ won't.
        """
        ...
    
    def IBlankingOff(self):
        """
        V.IBlankingOff()
        C++: virtual void IBlankingOff()
        
        Is there iblanking (point visibility) information in the file. If
        there is iblanking arrays, these will be read and assigned to the
        PointVisibility array of the output.
        """
        ...
    
    def IBlankingOn(self):
        """
        V.IBlankingOn()
        C++: virtual void IBlankingOn()
        
        Is there iblanking (point visibility) information in the file. If
        there is iblanking arrays, these will be read and assigned to the
        PointVisibility array of the output.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MultiGridOff(self):
        """
        V.MultiGridOff()
        C++: virtual void MultiGridOff()
        
        Does the file to be read contain information about number of
        grids. In some PLOT3D files, the first value contains the number
        of grids (even if there is only 1). If reading such a file, set
        this to true.
        """
        ...
    
    def MultiGridOn(self):
        """
        V.MultiGridOn()
        C++: virtual void MultiGridOn()
        
        Does the file to be read contain information about number of
        grids. In some PLOT3D files, the first value contains the number
        of grids (even if there is only 1). If reading such a file, set
        this to true.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMultiBlockPLOT3DReader
        C++: vtkMultiBlockPLOT3DReader *NewInstance()
        """
        ...
    
    def PreserveIntermediateFunctionsOff(self):
        """
        V.PreserveIntermediateFunctionsOff()
        C++: virtual void PreserveIntermediateFunctionsOff()
        
        When set to true (default), the reader will preserve intermediate
        computed quantities that were not explicitly requested e.g. if
        `VelocityMagnitude` is enabled, but not `Velocity`, the reader
        still needs to compute `Velocity`. If
        `PreserveIntermediateFunctions` if false, then the output will
        not have `Velocity` array, only the requested
        `VelocityMagnitude`. This is useful to avoid using up memory for
        arrays that are not relevant for the analysis.
        """
        ...
    
    def PreserveIntermediateFunctionsOn(self):
        """
        V.PreserveIntermediateFunctionsOn()
        C++: virtual void PreserveIntermediateFunctionsOn()
        
        When set to true (default), the reader will preserve intermediate
        computed quantities that were not explicitly requested e.g. if
        `VelocityMagnitude` is enabled, but not `Velocity`, the reader
        still needs to compute `Velocity`. If
        `PreserveIntermediateFunctions` if false, then the output will
        not have `Velocity` array, only the requested
        `VelocityMagnitude`. This is useful to avoid using up memory for
        arrays that are not relevant for the analysis.
        """
        ...
    
    def ReadArrays(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadArrays(int, int, int, int, vtkDataObject) -> int
        C++: int ReadArrays(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        These methods have to be overwritten from superclass because
        Plot3D actually uses the XYZ file to read these. This is not
        recognized by the superclass which returns an error when a
        filename (Q filename) is not set.
        """
        ...
    
    def ReadMesh(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadMesh(int, int, int, int, vtkDataObject) -> int
        C++: int ReadMesh(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        These methods have to be overwritten from superclass because
        Plot3D actually uses the XYZ file to read these. This is not
        recognized by the superclass which returns an error when a
        filename (Q filename) is not set.
        """
        ...
    
    def ReadMetaData(self, vtkInformation):
        """
        V.ReadMetaData(vtkInformation) -> int
        C++: int ReadMetaData(vtkInformation *metadata) override;
        
        These methods have to be overwritten from superclass because
        Plot3D actually uses the XYZ file to read these. This is not
        recognized by the superclass which returns an error when a
        filename (Q filename) is not set.
        """
        ...
    
    def ReadPoints(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadPoints(int, int, int, int, vtkDataObject) -> int
        C++: int ReadPoints(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        These methods have to be overwritten from superclass because
        Plot3D actually uses the XYZ file to read these. This is not
        recognized by the superclass which returns an error when a
        filename (Q filename) is not set.
        """
        ...
    
    def RemoveAllFunctions(self):
        """
        V.RemoveAllFunctions()
        C++: void RemoveAllFunctions()
        
        Specify additional functions to read. These are placed into the
        point data as data arrays. Later on they can be used by labeling
        them as scalars, etc.
        """
        ...
    
    def RemoveFunction(self, p_int):
        """
        V.RemoveFunction(int)
        C++: void RemoveFunction(int)
        
        Specify additional functions to read. These are placed into the
        point data as data arrays. Later on they can be used by labeling
        them as scalars, etc.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMultiBlockPLOT3DReader
        C++: static vtkMultiBlockPLOT3DReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAutoDetectFormat(self, p_int):
        """
        V.SetAutoDetectFormat(int)
        C++: virtual void SetAutoDetectFormat(vtkTypeBool _arg)
        
        When this option is turned on, the reader will try to figure out
        the values of various options such as byte order, byte count etc.
        automatically. This options works only for binary files. When it
        is turned on, the reader should be able to read most Plot3D files
        automatically. The default is OFF for backwards compatibility
        reasons. For binary files, it is strongly recommended that you
        turn on AutoDetectFormat and leave the other file format related
        options untouched.
        """
        ...
    
    def SetBinaryFile(self, p_int):
        """
        V.SetBinaryFile(int)
        C++: virtual void SetBinaryFile(vtkTypeBool _arg)
        
        Is the file to be read written in binary format (as opposed to
        ascii).
        """
        ...
    
    def SetByteOrder(self, p_int):
        """
        V.SetByteOrder(int)
        C++: virtual void SetByteOrder(int _arg)
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def SetByteOrderToBigEndian(self):
        """
        V.SetByteOrderToBigEndian()
        C++: void SetByteOrderToBigEndian()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def SetByteOrderToLittleEndian(self):
        """
        V.SetByteOrderToLittleEndian()
        C++: void SetByteOrderToLittleEndian()
        
        Set the byte order of the file (remember, more Unix workstations
        write big endian whereas PCs write little endian). Default is big
        endian (since most older PLOT3D files were written by
        workstations).
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: void SetController(vtkMultiProcessController *c)
        
        Set/Get the communicator object (we'll use global World
        controller if you don't set a different one).
        """
        ...
    
    def SetDoublePrecision(self, p_int):
        """
        V.SetDoublePrecision(int)
        C++: virtual void SetDoublePrecision(vtkTypeBool _arg)
        
        Is this file in double precision or single precision. This only
        matters for binary files. Default is single.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *name)
        
        Set/Get the PLOT3D geometry filename.
        """
        ...
    
    def SetForceRead(self, p_int):
        """
        V.SetForceRead(int)
        C++: virtual void SetForceRead(vtkTypeBool _arg)
        
        Try to read a binary file even if the file length seems to be
        inconsistent with the header information. Use this with caution,
        if the file length is not the same as calculated from the header.
        either the file is corrupt or the settings are wrong.
        """
        ...
    
    def SetFunctionFileName(self, string):
        """
        V.SetFunctionFileName(string)
        C++: virtual void SetFunctionFileName(const char *_arg)
        
        Set/Get the PLOT3D function filename.
        """
        ...
    
    def SetGamma(self, p_float):
        """
        V.SetGamma(float)
        C++: virtual void SetGamma(double _arg)
        
        Set/Get the ratio of specific heats. Default is 1.4.
        """
        ...
    
    def SetHasByteCount(self, p_int):
        """
        V.SetHasByteCount(int)
        C++: virtual void SetHasByteCount(vtkTypeBool _arg)
        
        Were the arrays written with leading and trailing byte counts ?
        Usually, files written by a fortran program will contain these
        byte counts whereas the ones written by C/C++ won't.
        """
        ...
    
    def SetIBlanking(self, p_int):
        """
        V.SetIBlanking(int)
        C++: virtual void SetIBlanking(vtkTypeBool _arg)
        
        Is there iblanking (point visibility) information in the file. If
        there is iblanking arrays, these will be read and assigned to the
        PointVisibility array of the output.
        """
        ...
    
    def SetMultiGrid(self, p_int):
        """
        V.SetMultiGrid(int)
        C++: virtual void SetMultiGrid(vtkTypeBool _arg)
        
        Does the file to be read contain information about number of
        grids. In some PLOT3D files, the first value contains the number
        of grids (even if there is only 1). If reading such a file, set
        this to true.
        """
        ...
    
    def SetPreserveIntermediateFunctions(self, bool):
        """
        V.SetPreserveIntermediateFunctions(bool)
        C++: virtual void SetPreserveIntermediateFunctions(bool _arg)
        
        When set to true (default), the reader will preserve intermediate
        computed quantities that were not explicitly requested e.g. if
        `VelocityMagnitude` is enabled, but not `Velocity`, the reader
        still needs to compute `Velocity`. If
        `PreserveIntermediateFunctions` if false, then the output will
        not have `Velocity` array, only the requested
        `VelocityMagnitude`. This is useful to avoid using up memory for
        arrays that are not relevant for the analysis.
        """
        ...
    
    def SetQFileName(self, string):
        """
        V.SetQFileName(string)
        C++: void SetQFileName(const char *name)
        
        Set/Get the PLOT3D solution filename. This adds a filename using
        the superclass' AddFileName() method. To read a series of q
        files, use the AddFileName() interface directly to add multiple q
        filenames in the appropriate order. If the files are of Overflow
        format, the reader will read the time values from the files.
        Otherwise, it will use an integer sequence. Use a meta reader to
        support time values for non-Overflow file sequences.
        """
        ...
    
    def SetR(self, p_float):
        """
        V.SetR(float)
        C++: virtual void SetR(double _arg)
        
        Set/Get the gas constant. Default is 1.0.
        """
        ...
    
    def SetScalarFunctionNumber(self, p_int):
        """
        V.SetScalarFunctionNumber(int)
        C++: void SetScalarFunctionNumber(int num)
        
        Specify the scalar function to extract. If ==(-1), then no scalar
        function is extracted.
        """
        ...
    
    def SetTwoDimensionalGeometry(self, p_int):
        """
        V.SetTwoDimensionalGeometry(int)
        C++: virtual void SetTwoDimensionalGeometry(vtkTypeBool _arg)
        
        If only two-dimensional data was written to the file, turn this
        on.
        """
        ...
    
    def SetVectorFunctionNumber(self, p_int):
        """
        V.SetVectorFunctionNumber(int)
        C++: void SetVectorFunctionNumber(int num)
        
        Specify the vector function to extract. If ==(-1), then no vector
        function is extracted.
        """
        ...
    
    def SetXYZFileName(self, string):
        """
        V.SetXYZFileName(string)
        C++: virtual void SetXYZFileName(const char *)
        
        Set/Get the PLOT3D geometry filename.
        """
        ...
    
    def TwoDimensionalGeometryOff(self):
        """
        V.TwoDimensionalGeometryOff()
        C++: virtual void TwoDimensionalGeometryOff()
        
        If only two-dimensional data was written to the file, turn this
        on.
        """
        ...
    
    def TwoDimensionalGeometryOn(self):
        """
        V.TwoDimensionalGeometryOn()
        C++: virtual void TwoDimensionalGeometryOn()
        
        If only two-dimensional data was written to the file, turn this
        on.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    FILE_BIG_ENDIAN = ...
    FILE_LITTLE_ENDIAN = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPChacoReader(__vtkmodules_vtkIOGeometry.vtkChacoReader):
    """
    vtkPChacoReader - Read Chaco files
    
    Superclass: vtkChacoReader
    
    vtkPChacoReader is a unstructured grid source object that reads Chaco
    files.  The file is read by process 0 and converted into a
    vtkUnstructuredGrid.  The vtkDistributedDataFilter is invoked to
    divide the grid among the processes.
    """
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPChacoReader
        C++: vtkPChacoReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPChacoReader
        C++: static vtkPChacoReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: void SetController(vtkMultiProcessController *c)
        
        Set/Get the communicator object (we'll use global World
        controller if you don't set a different one).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPDataSetReader(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkPDataSetReader - Manages reading pieces of a data set.
    
    Superclass: vtkDataSetAlgorithm
    
    vtkPDataSetReader will read a piece of a file, it takes as input a
    metadata file that lists all of the files in a data set.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *filename)
        
        Called to determine if the file can be read by the reader.
        """
        ...
    
    def GetDataType(self):
        """
        V.GetDataType() -> int
        C++: virtual int GetDataType()
        
        This is set when UpdateInformation is called. It shows the type
        of the output.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        This file to open and read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPDataSetReader
        C++: vtkPDataSetReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPDataSetReader
        C++: static vtkPDataSetReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        This file to open and read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPDataSetWriter(__vtkmodules_vtkIOLegacy.vtkDataSetWriter):
    """
    vtkPDataSetWriter - Manages writing pieces of a data set.
    
    Superclass: vtkDataSetWriter
    
    vtkPDataSetWriter will write a piece of a file, and will also create
    a metadata file that lists all of the files in a data set.
    """
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Controller used to communicate data type of blocks. By default,
        the global controller is used. If you want another controller to
        be used, set it with this.
        """
        ...
    
    def GetEndPiece(self):
        """
        V.GetEndPiece() -> int
        C++: virtual int GetEndPiece()
        
        This is the range of pieces that that this writer is responsible
        for writing.  All pieces must be written by some process.  The
        process that writes piece 0 also writes the pvtk file that lists
        all the piece file names.
        """
        ...
    
    def GetFilePattern(self):
        """
        V.GetFilePattern() -> string
        C++: virtual char *GetFilePattern()
        
        This file pattern uses the file name and piece number to
        construct a file name for the piece file.
        """
        ...
    
    def GetGhostLevel(self):
        """
        V.GetGhostLevel() -> int
        C++: virtual int GetGhostLevel()
        
        Extra ghost cells will be written out to each piece file if this
        value is larger than 0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPieces(self):
        """
        V.GetNumberOfPieces() -> int
        C++: virtual int GetNumberOfPieces()
        
        This is how many pieces the whole data set will be divided into.
        """
        ...
    
    def GetStartPiece(self):
        """
        V.GetStartPiece() -> int
        C++: virtual int GetStartPiece()
        
        This is the range of pieces that that this writer is responsible
        for writing.  All pieces must be written by some process.  The
        process that writes piece 0 also writes the pvtk file that lists
        all the piece file names.
        """
        ...
    
    def GetUseRelativeFileNames(self):
        """
        V.GetUseRelativeFileNames() -> int
        C++: virtual vtkTypeBool GetUseRelativeFileNames()
        
        This flag determines whether to use absolute paths for the piece
        files. By default the pieces are put in the main directory, and
        the piece file names in the meta data pvtk file are relative to
        this directory. This should make moving the whole lot to another
        directory, an easier task.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPDataSetWriter
        C++: vtkPDataSetWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPDataSetWriter
        C++: static vtkPDataSetWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *)
        
        Controller used to communicate data type of blocks. By default,
        the global controller is used. If you want another controller to
        be used, set it with this.
        """
        ...
    
    def SetEndPiece(self, p_int):
        """
        V.SetEndPiece(int)
        C++: virtual void SetEndPiece(int _arg)
        
        This is the range of pieces that that this writer is responsible
        for writing.  All pieces must be written by some process.  The
        process that writes piece 0 also writes the pvtk file that lists
        all the piece file names.
        """
        ...
    
    def SetFilePattern(self, string):
        """
        V.SetFilePattern(string)
        C++: virtual void SetFilePattern(const char *_arg)
        
        This file pattern uses the file name and piece number to
        construct a file name for the piece file.
        """
        ...
    
    def SetGhostLevel(self, p_int):
        """
        V.SetGhostLevel(int)
        C++: virtual void SetGhostLevel(int _arg)
        
        Extra ghost cells will be written out to each piece file if this
        value is larger than 0.
        """
        ...
    
    def SetNumberOfPieces(self, p_int):
        """
        V.SetNumberOfPieces(int)
        C++: void SetNumberOfPieces(int num)
        
        This is how many pieces the whole data set will be divided into.
        """
        ...
    
    def SetStartPiece(self, p_int):
        """
        V.SetStartPiece(int)
        C++: virtual void SetStartPiece(int _arg)
        
        This is the range of pieces that that this writer is responsible
        for writing.  All pieces must be written by some process.  The
        process that writes piece 0 also writes the pvtk file that lists
        all the piece file names.
        """
        ...
    
    def SetUseRelativeFileNames(self, p_int):
        """
        V.SetUseRelativeFileNames(int)
        C++: virtual void SetUseRelativeFileNames(vtkTypeBool _arg)
        
        This flag determines whether to use absolute paths for the piece
        files. By default the pieces are put in the main directory, and
        the piece file names in the meta data pvtk file are relative to
        this directory. This should make moving the whole lot to another
        directory, an easier task.
        """
        ...
    
    def UseRelativeFileNamesOff(self):
        """
        V.UseRelativeFileNamesOff()
        C++: virtual void UseRelativeFileNamesOff()
        
        This flag determines whether to use absolute paths for the piece
        files. By default the pieces are put in the main directory, and
        the piece file names in the meta data pvtk file are relative to
        this directory. This should make moving the whole lot to another
        directory, an easier task.
        """
        ...
    
    def UseRelativeFileNamesOn(self):
        """
        V.UseRelativeFileNamesOn()
        C++: virtual void UseRelativeFileNamesOn()
        
        This flag determines whether to use absolute paths for the piece
        files. By default the pieces are put in the main directory, and
        the piece file names in the meta data pvtk file are relative to
        this directory. This should make moving the whole lot to another
        directory, an easier task.
        """
        ...
    
    def Write(self):
        """
        V.Write() -> int
        C++: int Write() override;
        
        Write the pvtk file and cooresponding vtk files.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPImageWriter(__vtkmodules_vtkIOImage.vtkImageWriter):
    """
    vtkPImageWriter - Writes images to files.
    
    Superclass: vtkImageWriter
    
    vtkPImageWriter writes images to files with any data type. The data
    type of the file is the same scalar type as the input.  The
    dimensionality determines whether the data will be written in one or
    multiple files. This class is used as the superclass of most image
    writing classes such as vtkBMPWriter etc. It supports streaming.
    """
    def GetMemoryLimit(self):
        """
        V.GetMemoryLimit() -> int
        C++: virtual unsigned long GetMemoryLimit()
        
        Set / Get the memory limit in kibibytes (1024 bytes). The writer
        will stream to attempt to keep the pipeline size within this
        limit
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPImageWriter
        C++: vtkPImageWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPImageWriter
        C++: static vtkPImageWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMemoryLimit(self, p_int):
        """
        V.SetMemoryLimit(int)
        C++: virtual void SetMemoryLimit(unsigned long _arg)
        
        Set / Get the memory limit in kibibytes (1024 bytes). The writer
        will stream to attempt to keep the pipeline size within this
        limit
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPlot3DMetaReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkPlot3DMetaReader - reads meta-files points to PLOT3D files
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    The main goal of this reader is to make it easy to read PLOT3D files,
    specifically time series of PLOT3D files. PLOT3D files can take many
    different forms based on their content. Unfortunately, it is not a
    self-describing format therefore the user needs to pass information
    about the contents of the file to the reader. Normally, this is done
    by setting a number of member variables. The goal of this reader is
    to provide a simple format that enable the writer of the PLOT3D file
    to describe its settings as well as group a number of files as a time
    series. Note that for binary files, the auto-detect-format option,
    which is on by default negates the need to specify most other option.
    However, this reader is still very useful when trying to read file
    series even for binary files. The format for this meta-file is very
    simple and is based on JSON (there is no need to know anything about
    JSON to understand this format). Below is an example with comments
    (followed by //) that describe the format. Note that the PLOT3D file
    names are relative to the location of the meta-file unless they start
    with a leading /.
    
    
     {
     "auto-detect-format" : true // Tells the reader to try to figure out the format automatically.
     Only works
                                 // with binary file. This is on by default, negating the need for
     most other
                                 // options for binary files (format, byte-order, precision,
     multi-grid,
                                 // blanking, 2D).
     "format" : "binary",  // Is this a binary or ascii file, values : binary, ascii
     "byte-order" : "big", // Byte order for binary files, values : little, big (denoting little or
     big endian) "precision" : 32,     // Precision of floating point values, can be 32 or 64 (bits)
     "multi-grid" : false, // Is this a multi-grid file, values: true, false
     "language" : "C",     // Which language was this file written in, values : C, fortran. This is
                           // used to determine if an binary PLOT3D file contains byte counts, used by
                           // Fortran IO routines.
     "blanking" : false,   // Does this file have blanking information (iblanks), values : true, false
     "2D" : false,         // Is this a 2D dataset, values : true, false
     "R" : 8.314,          // The value of the gas constant, default is 1.0. Set this according to the
     dimensions you use "gamma" : 1.4,        // Ratio of specific heats. Default is 1.4. "functions":
     [ 110, 200, 201 ],  // Additional derived values to calculate. This is an array of integers
     formatted
                                      // as [ value, value, value, ...]
     "filenames" : [     // List of xyz (geometry) and q (value) file names along with the time
     values.
                         // This is an array which contains items in the format:
                         // {"time" : values, "xyz" : "xyz file name", "q" : "q file name", "function"
     : "function file name"}
                         // Note that q and function are optional. Also, you can repeat the same file
     name for xyz or q
                         // if they don't change over time. The reader will not read files
     unnecessarily. { "time" : 3.5, "xyz" : "combxyz.bin", "q" : "combq.1.bin", "function" :
     "combf.1.bin" }, { "time" : 4.5, "xyz" : "combxyz.bin", "q" : "combq.2.bin", "function" :
     "combf.2.bin" }
     ],
     "function-names" : ["density", "velocity_x", "temperature"]
                       // list of names of functions in function files
     }
     
    
    This reader leverages vtkMultiBlockPLOT3DReader to do the actual
    reading so you may want to refer to the documentation of
    vtkMultiBlockPLOT3DReader about the details of some of these
    parameters including the function numbers for derived value
    calculation.
    
    @sa
    vtkMultiBlockPLOT3DReader
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/Get the meta PLOT3D filename. See the class documentation for
        format details.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlot3DMetaReader
        C++: vtkPlot3DMetaReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlot3DMetaReader
        C++: static vtkPlot3DMetaReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/Get the meta PLOT3D filename. See the class documentation for
        format details.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPOpenFOAMReader(__vtkmodules_vtkIOGeometry.vtkOpenFOAMReader):
    """
    vtkPOpenFOAMReader - reads a decomposed dataset in OpenFOAM format
    
    Superclass: vtkOpenFOAMReader
    
    vtkPOpenFOAMReader creates a multiblock dataset. It reads
    parallel-decomposed mesh information and time dependent data.  The
    polyMesh folders contain mesh information. The time folders contain
    transient data for the cells. Each folder can contain any number of
    data files.
    
    @par Thanks: This class was developed by Takuya Oshima at Niigata
    University, Japan (oshima@eng.niigata-u.ac.jp).
    """
    def GetCaseType(self):
        """
        V.GetCaseType() -> caseType
        C++: virtual caseType GetCaseType()
        
        Set and get case type. 0 = decomposed case, 1 = reconstructed
        case.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set and get the controller.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPOpenFOAMReader
        C++: vtkPOpenFOAMReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPOpenFOAMReader
        C++: static vtkPOpenFOAMReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCaseType(self, p_int):
        """
        V.SetCaseType(int)
        C++: void SetCaseType(const int t)
        
        Set and get case type. 0 = decomposed case, 1 = reconstructed
        case.
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *)
        
        Set and get the controller.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    caseType = ...
    DECOMPOSED_CASE = ...
    RECONSTRUCTED_CASE = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
