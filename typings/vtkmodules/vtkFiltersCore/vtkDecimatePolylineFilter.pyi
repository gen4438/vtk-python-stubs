"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDecimatePolylineFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkDecimatePolylineFilter - reduce the number of lines in a polyline
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkDecimatePolylineFilter is a filter to reduce the number of lines
    in a polyline. The algorithm functions by evaluating an error metric
    for each vertex (i.e., the distance of the vertex to a line defined
    from the two vertices on either side of the vertex). Then, these
    vertices are placed into a priority queue, and those with smaller
    errors are deleted first. The decimation continues until the target
    reduction is reached. While the filter will not delete end points, it
    will decimate closed loops down to a single line, thereby changing
    topology.
    
    Note that a maximum error value (expressed in world coordinates) can
    also be specified. This may limit the amount of decimation so the
    target reduction may not be met. By setting the maximum error value
    to a very small number, colinear points can be eliminated.
    
    @warning
    This algorithm is a very simple implementation that overlooks some
    potential complexities. For example, if a vertex is multiply
    connected, meaning that it is used by multiple distinct polylines,
    then the extra topological constraints are ignored. This can produce
    less than optimal results.
    
    @sa
    vtkDecimate vtkDecimateProp vtkQuadricClustering vtkQuadricDecimation
    """
    def GetMaximumError(self):
        """
        V.GetMaximumError() -> float
        C++: virtual double GetMaximumError()
        
        Set the largest decimation error that is allowed during the
        decimation process. This may limit the maximum reduction that may
        be achieved. The maximum error is specified as a fraction of the
        maximum length of the input data bounding box.
        """
        ...
    
    def GetMaximumErrorMaxValue(self):
        """
        V.GetMaximumErrorMaxValue() -> float
        C++: virtual double GetMaximumErrorMaxValue()
        
        Set the largest decimation error that is allowed during the
        decimation process. This may limit the maximum reduction that may
        be achieved. The maximum error is specified as a fraction of the
        maximum length of the input data bounding box.
        """
        ...
    
    def GetMaximumErrorMinValue(self):
        """
        V.GetMaximumErrorMinValue() -> float
        C++: virtual double GetMaximumErrorMinValue()
        
        Set the largest decimation error that is allowed during the
        decimation process. This may limit the maximum reduction that may
        be achieved. The maximum error is specified as a fraction of the
        maximum length of the input data bounding box.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def GetTargetReduction(self):
        """
        V.GetTargetReduction() -> float
        C++: virtual double GetTargetReduction()
        
        Specify the desired reduction in the total number of polygons
        (e.g., if TargetReduction is set to 0.9, this filter will try to
        reduce the data set to 10% of its original size).
        """
        ...
    
    def GetTargetReductionMaxValue(self):
        """
        V.GetTargetReductionMaxValue() -> float
        C++: virtual double GetTargetReductionMaxValue()
        
        Specify the desired reduction in the total number of polygons
        (e.g., if TargetReduction is set to 0.9, this filter will try to
        reduce the data set to 10% of its original size).
        """
        ...
    
    def GetTargetReductionMinValue(self):
        """
        V.GetTargetReductionMinValue() -> float
        C++: virtual double GetTargetReductionMinValue()
        
        Specify the desired reduction in the total number of polygons
        (e.g., if TargetReduction is set to 0.9, this filter will try to
        reduce the data set to 10% of its original size).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDecimatePolylineFilter
        C++: vtkDecimatePolylineFilter *NewInstance()
        
        Standard methods for type information and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDecimatePolylineFilter
        C++: static vtkDecimatePolylineFilter *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for type information and printing.
        """
        ...
    
    def SetMaximumError(self, p_float):
        """
        V.SetMaximumError(float)
        C++: virtual void SetMaximumError(double _arg)
        
        Set the largest decimation error that is allowed during the
        decimation process. This may limit the maximum reduction that may
        be achieved. The maximum error is specified as a fraction of the
        maximum length of the input data bounding box.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def SetTargetReduction(self, p_float):
        """
        V.SetTargetReduction(float)
        C++: virtual void SetTargetReduction(double _arg)
        
        Specify the desired reduction in the total number of polygons
        (e.g., if TargetReduction is set to 0.9, this filter will try to
        reduce the data set to 10% of its original size).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


