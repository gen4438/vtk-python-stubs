"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel

class vtkImplicitPolyDataDistance(__vtkmodules_vtkCommonDataModel.vtkImplicitFunction):
    """
    vtkImplicitPolyDataDistance - Implicit function that computes the
    distance from a point x to the nearest point p on an input
    vtkPolyData.
    
    Superclass: vtkImplicitFunction
    
    The sign of the function is set to the sign of the dot product
    between the angle-weighted pseudonormal at the nearest surface point
    and the vector x - p. Points interior to the geometry have a negative
    distance, points on the exterior have a positive distance, and points
    on the input vtkPolyData have a distance of zero. The gradient of the
    function is the angle-weighted pseudonormal at the nearest point.
    
    Baerentzen, J. A. and Aanaes, H. (2005). Signed distance computation
    using the angle weighted pseudonormal. IEEE Transactions on
    Visualization and Computer Graphics, 11:243-253.
    
    This code was contributed in the VTK Journal paper: "Boolean Operations on Surfaces in VTK Without External
    Libraries" by Cory Quammen, Chris Weigle C., Russ Taylor
    http://hdl.handle.net/10380/3262
    http://www.midasjournal.org/browse/publication/797
    """
    def EvaluateFunction(self, p_float=..., p_float=..., p_float=...):
        """
        V.EvaluateFunction([float, float, float]) -> float
        C++: double EvaluateFunction(double x[3]) override;
        V.EvaluateFunction(vtkDataArray, vtkDataArray)
        C++: virtual void EvaluateFunction(vtkDataArray *input,
            vtkDataArray *output)
        V.EvaluateFunction(float, float, float) -> float
        C++: virtual double EvaluateFunction(double x, double y, double z)
        
        Evaluate function at position x-y-z and return value.  You should
        generally not call this method directly, you should use
        FunctionValue() instead.  This method must be implemented by any
        derived class.
        """
        ...
    
    def EvaluateFunctionAndGetClosestPoint(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateFunctionAndGetClosestPoint([float, float, float],
            [float, float, float]) -> float
        C++: double EvaluateFunctionAndGetClosestPoint(double x[3],
            double closestPoint[3])
        
        Evaluate plane equation of nearest triangle to point x[3] and
        provides closest point on an input vtkPolyData.
        """
        ...
    
    def EvaluateGradient(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateGradient([float, float, float], [float, float, float])
        C++: void EvaluateGradient(double x[3], double g[3]) override;
        
        Evaluate function gradient of nearest triangle to point x[3].
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the Input dependency.
        """
        ...
    
    def GetNoClosestPoint(self):
        """
        V.GetNoClosestPoint() -> (float, float, float)
        C++: virtual double *GetNoClosestPoint()
        
        Set/get the closest point to use if no input vtkPolyData
        specified.
        """
        ...
    
    def GetNoGradient(self):
        """
        V.GetNoGradient() -> (float, float, float)
        C++: virtual double *GetNoGradient()
        
        Set/get the function gradient to use if no input vtkPolyData
        specified.
        """
        ...
    
    def GetNoValue(self):
        """
        V.GetNoValue() -> float
        C++: virtual double GetNoValue()
        
        Set/get the function value to use if no input vtkPolyData
        specified.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        Set/get the tolerance usued for the locator.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImplicitPolyDataDistance
        C++: vtkImplicitPolyDataDistance *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImplicitPolyDataDistance
        C++: static vtkImplicitPolyDataDistance *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInput(self, vtkPolyData):
        """
        V.SetInput(vtkPolyData)
        C++: void SetInput(vtkPolyData *input)
        
        Set the input vtkPolyData used for the implicit function
        evaluation.  Passes input through an internal instance of
        vtkTriangleFilter to remove vertices and lines, leaving only
        triangular polygons for evaluation as implicit planes.
        """
        ...
    
    def SetNoClosestPoint(self, p_float, p_float_1, p_float_2):
        """
        V.SetNoClosestPoint(float, float, float)
        C++: virtual void SetNoClosestPoint(double _arg1, double _arg2,
            double _arg3)
        V.SetNoClosestPoint((float, float, float))
        C++: virtual void SetNoClosestPoint(const double _arg[3])
        
        Set/get the closest point to use if no input vtkPolyData
        specified.
        """
        ...
    
    def SetNoGradient(self, p_float, p_float_1, p_float_2):
        """
        V.SetNoGradient(float, float, float)
        C++: virtual void SetNoGradient(double _arg1, double _arg2,
            double _arg3)
        V.SetNoGradient((float, float, float))
        C++: virtual void SetNoGradient(const double _arg[3])
        
        Set/get the function gradient to use if no input vtkPolyData
        specified.
        """
        ...
    
    def SetNoValue(self, p_float):
        """
        V.SetNoValue(float)
        C++: virtual void SetNoValue(double _arg)
        
        Set/get the function value to use if no input vtkPolyData
        specified.
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        Set/get the tolerance usued for the locator.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


