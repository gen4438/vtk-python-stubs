"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTubeFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkTubeFilter - filter that generates tubes around lines
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkTubeFilter is a filter that generates a tube around each input
    line. The tubes are made up of triangle strips and rotate around the
    tube with the rotation of the line normals. (If no normals are
    present, they are computed automatically.) The radius of the tube can
    be set to vary with scalar or vector value. If the radius varies with
    scalar value the radius is linearly adjusted. If the radius varies
    with vector value, a mass flux preserving variation is used. The
    number of sides for the tube also can be specified. You can also
    specify which of the sides are visible. This is useful for generating
    interesting striping effects. Other options include the ability to
    cap the tube and generate texture coordinates. Texture coordinates
    can be used with an associated texture map to create interesting
    effects such as marking the tube with stripes corresponding to length
    or time.
    
    This filter is typically used to create thick or dramatic lines.
    Another common use is to combine this filter with vtkStreamTracer to
    generate streamtubes.
    
    @warning
    The number of tube sides must be greater than 3. If you wish to use
    fewer sides (i.e., a ribbon), use vtkRibbonFilter.
    
    @warning
    The input line must not have duplicate points, or normals at points
    that are parallel to the incoming/outgoing line segments. (Duplicate
    points can be removed with vtkCleanPolyData.) If a line does not meet
    this criteria, then that line is not tubed.
    
    @sa
    vtkRibbonFilter vtkStreamTracer
    
    @par Thanks: Michael Finch for absolute scalar radius
    """
    def CappingOff(self):
        """
        V.CappingOff()
        C++: virtual void CappingOff()
        
        Turn on/off whether to cap the ends with polygons. Initial value
        is off.
        """
        ...
    
    def CappingOn(self):
        """
        V.CappingOn()
        C++: virtual void CappingOn()
        
        Turn on/off whether to cap the ends with polygons. Initial value
        is off.
        """
        ...
    
    def GetCapping(self):
        """
        V.GetCapping() -> int
        C++: virtual vtkTypeBool GetCapping()
        
        Turn on/off whether to cap the ends with polygons. Initial value
        is off.
        """
        ...
    
    def GetDefaultNormal(self):
        """
        V.GetDefaultNormal() -> (float, float, float)
        C++: virtual double *GetDefaultNormal()
        
        Set the default normal to use if no normals are supplied, and the
        DefaultNormalOn is set.
        """
        ...
    
    def GetGenerateTCoords(self):
        """
        V.GetGenerateTCoords() -> int
        C++: virtual int GetGenerateTCoords()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def GetGenerateTCoordsAsString(self):
        """
        V.GetGenerateTCoordsAsString() -> string
        C++: const char *GetGenerateTCoordsAsString()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def GetGenerateTCoordsMaxValue(self):
        """
        V.GetGenerateTCoordsMaxValue() -> int
        C++: virtual int GetGenerateTCoordsMaxValue()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def GetGenerateTCoordsMinValue(self):
        """
        V.GetGenerateTCoordsMinValue() -> int
        C++: virtual int GetGenerateTCoordsMinValue()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfSides(self):
        """
        V.GetNumberOfSides() -> int
        C++: virtual int GetNumberOfSides()
        
        Set the number of sides for the tube. At a minimum, number of
        sides is 3.
        """
        ...
    
    def GetNumberOfSidesMaxValue(self):
        """
        V.GetNumberOfSidesMaxValue() -> int
        C++: virtual int GetNumberOfSidesMaxValue()
        
        Set the number of sides for the tube. At a minimum, number of
        sides is 3.
        """
        ...
    
    def GetNumberOfSidesMinValue(self):
        """
        V.GetNumberOfSidesMinValue() -> int
        C++: virtual int GetNumberOfSidesMinValue()
        
        Set the number of sides for the tube. At a minimum, number of
        sides is 3.
        """
        ...
    
    def GetOffset(self):
        """
        V.GetOffset() -> int
        C++: virtual int GetOffset()
        
        Control the striping of the tubes. The offset sets the first tube
        side that is visible. Offset is generally used with OnRatio to
        create nifty striping effects.
        """
        ...
    
    def GetOffsetMaxValue(self):
        """
        V.GetOffsetMaxValue() -> int
        C++: virtual int GetOffsetMaxValue()
        
        Control the striping of the tubes. The offset sets the first tube
        side that is visible. Offset is generally used with OnRatio to
        create nifty striping effects.
        """
        ...
    
    def GetOffsetMinValue(self):
        """
        V.GetOffsetMinValue() -> int
        C++: virtual int GetOffsetMinValue()
        
        Control the striping of the tubes. The offset sets the first tube
        side that is visible. Offset is generally used with OnRatio to
        create nifty striping effects.
        """
        ...
    
    def GetOnRatio(self):
        """
        V.GetOnRatio() -> int
        C++: virtual int GetOnRatio()
        
        Control the striping of the tubes. If OnRatio is greater than 1,
        then every nth tube side is turned on, beginning with the Offset
        side.
        """
        ...
    
    def GetOnRatioMaxValue(self):
        """
        V.GetOnRatioMaxValue() -> int
        C++: virtual int GetOnRatioMaxValue()
        
        Control the striping of the tubes. If OnRatio is greater than 1,
        then every nth tube side is turned on, beginning with the Offset
        side.
        """
        ...
    
    def GetOnRatioMinValue(self):
        """
        V.GetOnRatioMinValue() -> int
        C++: virtual int GetOnRatioMinValue()
        
        Control the striping of the tubes. If OnRatio is greater than 1,
        then every nth tube side is turned on, beginning with the Offset
        side.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set the minimum tube radius (minimum because the tube radius may
        vary).
        """
        ...
    
    def GetRadiusFactor(self):
        """
        V.GetRadiusFactor() -> float
        C++: virtual double GetRadiusFactor()
        
        Set the maximum tube radius in terms of a multiple of the minimum
        radius.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set the minimum tube radius (minimum because the tube radius may
        vary).
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set the minimum tube radius (minimum because the tube radius may
        vary).
        """
        ...
    
    def GetSidesShareVertices(self):
        """
        V.GetSidesShareVertices() -> int
        C++: virtual vtkTypeBool GetSidesShareVertices()
        
        Set a boolean to control whether tube sides should share
        vertices. This creates independent strips, with constant normals
        so the tube is always faceted in appearance.
        """
        ...
    
    def GetTextureLength(self):
        """
        V.GetTextureLength() -> float
        C++: virtual double GetTextureLength()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def GetTextureLengthMaxValue(self):
        """
        V.GetTextureLengthMaxValue() -> float
        C++: virtual double GetTextureLengthMaxValue()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def GetTextureLengthMinValue(self):
        """
        V.GetTextureLengthMinValue() -> float
        C++: virtual double GetTextureLengthMinValue()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def GetUseDefaultNormal(self):
        """
        V.GetUseDefaultNormal() -> int
        C++: virtual vtkTypeBool GetUseDefaultNormal()
        
        Set a boolean to control whether to use default normals.
        DefaultNormalOn is set.
        """
        ...
    
    def GetVaryRadius(self):
        """
        V.GetVaryRadius() -> int
        C++: virtual int GetVaryRadius()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def GetVaryRadiusAsString(self):
        """
        V.GetVaryRadiusAsString() -> string
        C++: const char *GetVaryRadiusAsString()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def GetVaryRadiusMaxValue(self):
        """
        V.GetVaryRadiusMaxValue() -> int
        C++: virtual int GetVaryRadiusMaxValue()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def GetVaryRadiusMinValue(self):
        """
        V.GetVaryRadiusMinValue() -> int
        C++: virtual int GetVaryRadiusMinValue()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTubeFilter
        C++: vtkTubeFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTubeFilter
        C++: static vtkTubeFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCapping(self, p_int):
        """
        V.SetCapping(int)
        C++: virtual void SetCapping(vtkTypeBool _arg)
        
        Turn on/off whether to cap the ends with polygons. Initial value
        is off.
        """
        ...
    
    def SetDefaultNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetDefaultNormal(float, float, float)
        C++: virtual void SetDefaultNormal(double _arg1, double _arg2,
            double _arg3)
        V.SetDefaultNormal((float, float, float))
        C++: virtual void SetDefaultNormal(const double _arg[3])
        
        Set the default normal to use if no normals are supplied, and the
        DefaultNormalOn is set.
        """
        ...
    
    def SetGenerateTCoords(self, p_int):
        """
        V.SetGenerateTCoords(int)
        C++: virtual void SetGenerateTCoords(int _arg)
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def SetGenerateTCoordsToNormalizedLength(self):
        """
        V.SetGenerateTCoordsToNormalizedLength()
        C++: void SetGenerateTCoordsToNormalizedLength()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def SetGenerateTCoordsToOff(self):
        """
        V.SetGenerateTCoordsToOff()
        C++: void SetGenerateTCoordsToOff()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def SetGenerateTCoordsToUseLength(self):
        """
        V.SetGenerateTCoordsToUseLength()
        C++: void SetGenerateTCoordsToUseLength()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def SetGenerateTCoordsToUseScalars(self):
        """
        V.SetGenerateTCoordsToUseScalars()
        C++: void SetGenerateTCoordsToUseScalars()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the tube with length textures, etc. If you
        use scalars to create the texture, the scalars are assumed to be
        monotonically increasing (or decreasing).
        """
        ...
    
    def SetNumberOfSides(self, p_int):
        """
        V.SetNumberOfSides(int)
        C++: virtual void SetNumberOfSides(int _arg)
        
        Set the number of sides for the tube. At a minimum, number of
        sides is 3.
        """
        ...
    
    def SetOffset(self, p_int):
        """
        V.SetOffset(int)
        C++: virtual void SetOffset(int _arg)
        
        Control the striping of the tubes. The offset sets the first tube
        side that is visible. Offset is generally used with OnRatio to
        create nifty striping effects.
        """
        ...
    
    def SetOnRatio(self, p_int):
        """
        V.SetOnRatio(int)
        C++: virtual void SetOnRatio(int _arg)
        
        Control the striping of the tubes. If OnRatio is greater than 1,
        then every nth tube side is turned on, beginning with the Offset
        side.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set the minimum tube radius (minimum because the tube radius may
        vary).
        """
        ...
    
    def SetRadiusFactor(self, p_float):
        """
        V.SetRadiusFactor(float)
        C++: virtual void SetRadiusFactor(double _arg)
        
        Set the maximum tube radius in terms of a multiple of the minimum
        radius.
        """
        ...
    
    def SetSidesShareVertices(self, p_int):
        """
        V.SetSidesShareVertices(int)
        C++: virtual void SetSidesShareVertices(vtkTypeBool _arg)
        
        Set a boolean to control whether tube sides should share
        vertices. This creates independent strips, with constant normals
        so the tube is always faceted in appearance.
        """
        ...
    
    def SetTextureLength(self, p_float):
        """
        V.SetTextureLength(float)
        C++: virtual void SetTextureLength(double _arg)
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space.
        """
        ...
    
    def SetUseDefaultNormal(self, p_int):
        """
        V.SetUseDefaultNormal(int)
        C++: virtual void SetUseDefaultNormal(vtkTypeBool _arg)
        
        Set a boolean to control whether to use default normals.
        DefaultNormalOn is set.
        """
        ...
    
    def SetVaryRadius(self, p_int):
        """
        V.SetVaryRadius(int)
        C++: virtual void SetVaryRadius(int _arg)
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def SetVaryRadiusToVaryRadiusByAbsoluteScalar(self):
        """
        V.SetVaryRadiusToVaryRadiusByAbsoluteScalar()
        C++: void SetVaryRadiusToVaryRadiusByAbsoluteScalar()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def SetVaryRadiusToVaryRadiusByScalar(self):
        """
        V.SetVaryRadiusToVaryRadiusByScalar()
        C++: void SetVaryRadiusToVaryRadiusByScalar()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def SetVaryRadiusToVaryRadiusByVector(self):
        """
        V.SetVaryRadiusToVaryRadiusByVector()
        C++: void SetVaryRadiusToVaryRadiusByVector()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def SetVaryRadiusToVaryRadiusOff(self):
        """
        V.SetVaryRadiusToVaryRadiusOff()
        C++: void SetVaryRadiusToVaryRadiusOff()
        
        Turn on/off the variation of tube radius with scalar value.
        """
        ...
    
    def SidesShareVerticesOff(self):
        """
        V.SidesShareVerticesOff()
        C++: virtual void SidesShareVerticesOff()
        
        Set a boolean to control whether tube sides should share
        vertices. This creates independent strips, with constant normals
        so the tube is always faceted in appearance.
        """
        ...
    
    def SidesShareVerticesOn(self):
        """
        V.SidesShareVerticesOn()
        C++: virtual void SidesShareVerticesOn()
        
        Set a boolean to control whether tube sides should share
        vertices. This creates independent strips, with constant normals
        so the tube is always faceted in appearance.
        """
        ...
    
    def UseDefaultNormalOff(self):
        """
        V.UseDefaultNormalOff()
        C++: virtual void UseDefaultNormalOff()
        
        Set a boolean to control whether to use default normals.
        DefaultNormalOn is set.
        """
        ...
    
    def UseDefaultNormalOn(self):
        """
        V.UseDefaultNormalOn()
        C++: virtual void UseDefaultNormalOn()
        
        Set a boolean to control whether to use default normals.
        DefaultNormalOn is set.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


