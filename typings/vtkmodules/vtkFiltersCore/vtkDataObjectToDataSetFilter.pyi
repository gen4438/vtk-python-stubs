"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDataObjectToDataSetFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkDataObjectToDataSetFilter - map field data to concrete dataset
    
    Superclass: vtkDataSetAlgorithm
    
    vtkDataObjectToDataSetFilter is an class that maps a data object
    (i.e., a field) into a concrete dataset, i.e., gives structure to the
    field by defining a geometry and topology.
    
    To use this filter you associate components in the input field data
    with portions of the output dataset. (A component is an array of
    values from the field.) For example, you would specify x-y-z points
    by assigning components from the field for the x, then y, then z
    values of the points. You may also have to specify component ranges
    (for each z-y-z) to make sure that the number of x, y, and z values
    is the same. Also, you may want to normalize the components which
    helps distribute the data uniformly. Once you've setup the filter to
    combine all the pieces of data into a specified dataset (the
    geometry, topology, point and cell data attributes), the various
    output methods (e.g., GetPolyData()) are used to retrieve the final
    product.
    
    This filter is often used in conjunction with
    vtkFieldDataToAttributeDataFilter.  vtkFieldDataToAttributeDataFilter
    takes field data and transforms it into attribute data (e.g., point
    and cell data attributes such as scalars and vectors).  To do this,
    use this filter which constructs a concrete dataset and passes the
    input data object field data to its output. and then use
    vtkFieldDataToAttributeDataFilter to generate the attribute data
    associated with the dataset.
    
    @warning
    Make sure that the data you extract is consistent. That is, if you
    have N points, extract N x, y, and z components. Also, all the
    information necessary to define a dataset must be given. For example,
    vtkPolyData requires points at a minimum; vtkStructuredPoints
    requires setting the dimensions; vtkStructuredGrid requires defining
    points and dimensions; vtkUnstructuredGrid requires setting points;
    and vtkRectilinearGrid requires that you define the x, y, and
    z-coordinate arrays (by specifying points) as well as the dimensions.
    
    @warning
    If you wish to create a dataset of just points (i.e., unstructured
    points dataset), create vtkPolyData consisting of points. There will
    be no cells in such a dataset.
    
    @sa
    vtkDataObject vtkFieldData vtkDataSet vtkPolyData vtkStructuredPoints
    vtkStructuredGrid vtkUnstructuredGrid vtkRectilinearGrid
    vtkDataSetAttributes vtkDataArray
    """
    def DefaultNormalizeOff(self):
        """
        V.DefaultNormalizeOff()
        C++: virtual void DefaultNormalizeOff()
        
        Set the default Normalize() flag for those methods setting a
        default Normalize value (e.g., SetPointComponent).
        """
        ...
    
    def DefaultNormalizeOn(self):
        """
        V.DefaultNormalizeOn()
        C++: virtual void DefaultNormalizeOn()
        
        Set the default Normalize() flag for those methods setting a
        default Normalize value (e.g., SetPointComponent).
        """
        ...
    
    def GetCellConnectivityComponentArrayComponent(self):
        """
        V.GetCellConnectivityComponentArrayComponent() -> int
        C++: int GetCellConnectivityComponentArrayComponent()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetCellConnectivityComponentArrayName(self):
        """
        V.GetCellConnectivityComponentArrayName() -> string
        C++: const char *GetCellConnectivityComponentArrayName()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetCellConnectivityComponentMaxRange(self):
        """
        V.GetCellConnectivityComponentMaxRange() -> int
        C++: int GetCellConnectivityComponentMaxRange()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetCellConnectivityComponentMinRange(self):
        """
        V.GetCellConnectivityComponentMinRange() -> int
        C++: int GetCellConnectivityComponentMinRange()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetCellTypeComponentArrayComponent(self):
        """
        V.GetCellTypeComponentArrayComponent() -> int
        C++: int GetCellTypeComponentArrayComponent()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetCellTypeComponentArrayName(self):
        """
        V.GetCellTypeComponentArrayName() -> string
        C++: const char *GetCellTypeComponentArrayName()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetCellTypeComponentMaxRange(self):
        """
        V.GetCellTypeComponentMaxRange() -> int
        C++: int GetCellTypeComponentMaxRange()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetCellTypeComponentMinRange(self):
        """
        V.GetCellTypeComponentMinRange() -> int
        C++: int GetCellTypeComponentMinRange()
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetDataSetType(self):
        """
        V.GetDataSetType() -> int
        C++: virtual int GetDataSetType()
        
        Control what type of data is generated for output.
        """
        ...
    
    def GetDefaultNormalize(self):
        """
        V.GetDefaultNormalize() -> int
        C++: virtual vtkTypeBool GetDefaultNormalize()
        
        Set the default Normalize() flag for those methods setting a
        default Normalize value (e.g., SetPointComponent).
        """
        ...
    
    def GetDimensions(self):
        """
        V.GetDimensions() -> (int, int, int)
        C++: virtual int *GetDimensions()
        
        Specify the dimensions to use if generating a dataset that
        requires dimensions specification (vtkStructuredPoints,
        vtkStructuredGrid, vtkRectilinearGrid).
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataObject
        C++: vtkDataObject *GetInput()
        
        Get the input to the filter.
        """
        ...
    
    def GetLinesComponentArrayComponent(self):
        """
        V.GetLinesComponentArrayComponent() -> int
        C++: int GetLinesComponentArrayComponent()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetLinesComponentArrayName(self):
        """
        V.GetLinesComponentArrayName() -> string
        C++: const char *GetLinesComponentArrayName()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetLinesComponentMaxRange(self):
        """
        V.GetLinesComponentMaxRange() -> int
        C++: int GetLinesComponentMaxRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetLinesComponentMinRange(self):
        """
        V.GetLinesComponentMinRange() -> int
        C++: int GetLinesComponentMinRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrigin(self):
        """
        V.GetOrigin() -> (float, float, float)
        C++: virtual double *GetOrigin()
        
        Specify the origin to use if generating a dataset whose origin
        can be set (i.e., a vtkStructuredPoints dataset).
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkDataSet
        C++: vtkDataSet *GetOutput()
        V.GetOutput(int) -> vtkDataSet
        C++: vtkDataSet *GetOutput(int idx)
        
        Get the output in different forms. The particular method invoked
        should be consistent with the SetDataSetType() method. (Note:
        GetOutput() will always return a type consistent with
        SetDataSetType(). Also, GetOutput() will return nullptr if the
        filter aborted due to inconsistent data.)
        """
        ...
    
    def GetPointComponentArrayComponent(self, p_int):
        """
        V.GetPointComponentArrayComponent(int) -> int
        C++: int GetPointComponentArrayComponent(int comp)
        
        Define the component of the field to be used for the x, y, and z
        values of the points. Note that the parameter comp must lie
        between (0,2) and refers to the x-y-z (i.e., 0,1,2) components of
        the points. To define the field component to use you can specify
        an array name and the component in that array. The (min,max)
        values are the range of data in the component you wish to
        extract. (This method should be used for vtkPolyData,
        vtkUnstructuredGrid, vtkStructuredGrid, and vtkRectilinearGrid.)
        A convenience method, SetPointComponent(),is also provided which
        does not require setting the (min,max) component range or the
        normalize flag (normalize is set to DefaulatNormalize value).
        """
        ...
    
    def GetPointComponentArrayName(self, p_int):
        """
        V.GetPointComponentArrayName(int) -> string
        C++: const char *GetPointComponentArrayName(int comp)
        
        Define the component of the field to be used for the x, y, and z
        values of the points. Note that the parameter comp must lie
        between (0,2) and refers to the x-y-z (i.e., 0,1,2) components of
        the points. To define the field component to use you can specify
        an array name and the component in that array. The (min,max)
        values are the range of data in the component you wish to
        extract. (This method should be used for vtkPolyData,
        vtkUnstructuredGrid, vtkStructuredGrid, and vtkRectilinearGrid.)
        A convenience method, SetPointComponent(),is also provided which
        does not require setting the (min,max) component range or the
        normalize flag (normalize is set to DefaulatNormalize value).
        """
        ...
    
    def GetPointComponentMaxRange(self, p_int):
        """
        V.GetPointComponentMaxRange(int) -> int
        C++: int GetPointComponentMaxRange(int comp)
        
        Define the component of the field to be used for the x, y, and z
        values of the points. Note that the parameter comp must lie
        between (0,2) and refers to the x-y-z (i.e., 0,1,2) components of
        the points. To define the field component to use you can specify
        an array name and the component in that array. The (min,max)
        values are the range of data in the component you wish to
        extract. (This method should be used for vtkPolyData,
        vtkUnstructuredGrid, vtkStructuredGrid, and vtkRectilinearGrid.)
        A convenience method, SetPointComponent(),is also provided which
        does not require setting the (min,max) component range or the
        normalize flag (normalize is set to DefaulatNormalize value).
        """
        ...
    
    def GetPointComponentMinRange(self, p_int):
        """
        V.GetPointComponentMinRange(int) -> int
        C++: int GetPointComponentMinRange(int comp)
        
        Define the component of the field to be used for the x, y, and z
        values of the points. Note that the parameter comp must lie
        between (0,2) and refers to the x-y-z (i.e., 0,1,2) components of
        the points. To define the field component to use you can specify
        an array name and the component in that array. The (min,max)
        values are the range of data in the component you wish to
        extract. (This method should be used for vtkPolyData,
        vtkUnstructuredGrid, vtkStructuredGrid, and vtkRectilinearGrid.)
        A convenience method, SetPointComponent(),is also provided which
        does not require setting the (min,max) component range or the
        normalize flag (normalize is set to DefaulatNormalize value).
        """
        ...
    
    def GetPointComponentNormailzeFlag(self, p_int):
        """
        V.GetPointComponentNormailzeFlag(int) -> int
        C++: int GetPointComponentNormailzeFlag(int comp)
        
        Define the component of the field to be used for the x, y, and z
        values of the points. Note that the parameter comp must lie
        between (0,2) and refers to the x-y-z (i.e., 0,1,2) components of
        the points. To define the field component to use you can specify
        an array name and the component in that array. The (min,max)
        values are the range of data in the component you wish to
        extract. (This method should be used for vtkPolyData,
        vtkUnstructuredGrid, vtkStructuredGrid, and vtkRectilinearGrid.)
        A convenience method, SetPointComponent(),is also provided which
        does not require setting the (min,max) component range or the
        normalize flag (normalize is set to DefaulatNormalize value).
        """
        ...
    
    def GetPolyDataOutput(self):
        """
        V.GetPolyDataOutput() -> vtkPolyData
        C++: vtkPolyData *GetPolyDataOutput()
        
        Get the output in different forms. The particular method invoked
        should be consistent with the SetDataSetType() method. (Note:
        GetOutput() will always return a type consistent with
        SetDataSetType(). Also, GetOutput() will return nullptr if the
        filter aborted due to inconsistent data.)
        """
        ...
    
    def GetPolysComponentArrayComponent(self):
        """
        V.GetPolysComponentArrayComponent() -> int
        C++: int GetPolysComponentArrayComponent()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetPolysComponentArrayName(self):
        """
        V.GetPolysComponentArrayName() -> string
        C++: const char *GetPolysComponentArrayName()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetPolysComponentMaxRange(self):
        """
        V.GetPolysComponentMaxRange() -> int
        C++: int GetPolysComponentMaxRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetPolysComponentMinRange(self):
        """
        V.GetPolysComponentMinRange() -> int
        C++: int GetPolysComponentMinRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetRectilinearGridOutput(self):
        """
        V.GetRectilinearGridOutput() -> vtkRectilinearGrid
        C++: vtkRectilinearGrid *GetRectilinearGridOutput()
        
        Get the output in different forms. The particular method invoked
        should be consistent with the SetDataSetType() method. (Note:
        GetOutput() will always return a type consistent with
        SetDataSetType(). Also, GetOutput() will return nullptr if the
        filter aborted due to inconsistent data.)
        """
        ...
    
    def GetSpacing(self):
        """
        V.GetSpacing() -> (float, float, float)
        C++: virtual double *GetSpacing()
        
        Specify the spacing to use if generating a dataset whose spacing
        can be set (i.e., a vtkStructuredPoints dataset).
        """
        ...
    
    def GetStripsComponentArrayComponent(self):
        """
        V.GetStripsComponentArrayComponent() -> int
        C++: int GetStripsComponentArrayComponent()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetStripsComponentArrayName(self):
        """
        V.GetStripsComponentArrayName() -> string
        C++: const char *GetStripsComponentArrayName()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetStripsComponentMaxRange(self):
        """
        V.GetStripsComponentMaxRange() -> int
        C++: int GetStripsComponentMaxRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetStripsComponentMinRange(self):
        """
        V.GetStripsComponentMinRange() -> int
        C++: int GetStripsComponentMinRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetStructuredGridOutput(self):
        """
        V.GetStructuredGridOutput() -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetStructuredGridOutput()
        
        Get the output in different forms. The particular method invoked
        should be consistent with the SetDataSetType() method. (Note:
        GetOutput() will always return a type consistent with
        SetDataSetType(). Also, GetOutput() will return nullptr if the
        filter aborted due to inconsistent data.)
        """
        ...
    
    def GetStructuredPointsOutput(self):
        """
        V.GetStructuredPointsOutput() -> vtkStructuredPoints
        C++: vtkStructuredPoints *GetStructuredPointsOutput()
        
        Get the output in different forms. The particular method invoked
        should be consistent with the SetDataSetType() method. (Note:
        GetOutput() will always return a type consistent with
        SetDataSetType(). Also, GetOutput() will return nullptr if the
        filter aborted due to inconsistent data.)
        """
        ...
    
    def GetUnstructuredGridOutput(self):
        """
        V.GetUnstructuredGridOutput() -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetUnstructuredGridOutput()
        
        Get the output in different forms. The particular method invoked
        should be consistent with the SetDataSetType() method. (Note:
        GetOutput() will always return a type consistent with
        SetDataSetType(). Also, GetOutput() will return nullptr if the
        filter aborted due to inconsistent data.)
        """
        ...
    
    def GetVertsComponentArrayComponent(self):
        """
        V.GetVertsComponentArrayComponent() -> int
        C++: int GetVertsComponentArrayComponent()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetVertsComponentArrayName(self):
        """
        V.GetVertsComponentArrayName() -> string
        C++: const char *GetVertsComponentArrayName()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetVertsComponentMaxRange(self):
        """
        V.GetVertsComponentMaxRange() -> int
        C++: int GetVertsComponentMaxRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def GetVertsComponentMinRange(self):
        """
        V.GetVertsComponentMinRange() -> int
        C++: int GetVertsComponentMinRange()
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataObjectToDataSetFilter
        C++: vtkDataObjectToDataSetFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataObjectToDataSetFilter
        C++: static vtkDataObjectToDataSetFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCellConnectivityComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetCellConnectivityComponent(string, int, int, int)
        C++: void SetCellConnectivityComponent(const char *arrayName,
            int arrayComp, int min, int max)
        V.SetCellConnectivityComponent(string, int)
        C++: void SetCellConnectivityComponent(const char *arrayName,
            int arrayComp)
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def SetCellTypeComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetCellTypeComponent(string, int, int, int)
        C++: void SetCellTypeComponent(const char *arrayName,
            int arrayComp, int min, int max)
        V.SetCellTypeComponent(string, int)
        C++: void SetCellTypeComponent(const char *arrayName,
            int arrayComp)
        
        Define cell types and cell connectivity when creating
        unstructured grid data.  These methods are similar to those for
        defining points, except that no normalization of the data is
        possible. Basically, you need to define an array of cell types
        (an integer value per cell), and another array consisting (for
        each cell) of a number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def SetDataSetType(self, p_int):
        """
        V.SetDataSetType(int)
        C++: void SetDataSetType(int)
        
        Control what type of data is generated for output.
        """
        ...
    
    def SetDataSetTypeToPolyData(self):
        """
        V.SetDataSetTypeToPolyData()
        C++: void SetDataSetTypeToPolyData()
        
        Control what type of data is generated for output.
        """
        ...
    
    def SetDataSetTypeToRectilinearGrid(self):
        """
        V.SetDataSetTypeToRectilinearGrid()
        C++: void SetDataSetTypeToRectilinearGrid()
        
        Control what type of data is generated for output.
        """
        ...
    
    def SetDataSetTypeToStructuredGrid(self):
        """
        V.SetDataSetTypeToStructuredGrid()
        C++: void SetDataSetTypeToStructuredGrid()
        
        Control what type of data is generated for output.
        """
        ...
    
    def SetDataSetTypeToStructuredPoints(self):
        """
        V.SetDataSetTypeToStructuredPoints()
        C++: void SetDataSetTypeToStructuredPoints()
        
        Control what type of data is generated for output.
        """
        ...
    
    def SetDataSetTypeToUnstructuredGrid(self):
        """
        V.SetDataSetTypeToUnstructuredGrid()
        C++: void SetDataSetTypeToUnstructuredGrid()
        
        Control what type of data is generated for output.
        """
        ...
    
    def SetDefaultNormalize(self, p_int):
        """
        V.SetDefaultNormalize(int)
        C++: virtual void SetDefaultNormalize(vtkTypeBool _arg)
        
        Set the default Normalize() flag for those methods setting a
        default Normalize value (e.g., SetPointComponent).
        """
        ...
    
    def SetDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetDimensions(int, int, int)
        C++: virtual void SetDimensions(int _arg1, int _arg2, int _arg3)
        V.SetDimensions((int, int, int))
        C++: virtual void SetDimensions(const int _arg[3])
        
        Specify the dimensions to use if generating a dataset that
        requires dimensions specification (vtkStructuredPoints,
        vtkStructuredGrid, vtkRectilinearGrid).
        """
        ...
    
    def SetDimensionsComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetDimensionsComponent(string, int, int, int)
        C++: void SetDimensionsComponent(const char *arrayName,
            int arrayComp, int min, int max)
        V.SetDimensionsComponent(string, int)
        C++: void SetDimensionsComponent(const char *arrayName,
            int arrayComp)
        
        Alternative methods to specify the dimensions, spacing, and
        origin for those datasets requiring this information. You need to
        specify the name of an array; the component of the array, and the
        range of the array (min,max). These methods will override the
        information given by the previous methods.
        """
        ...
    
    def SetLinesComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetLinesComponent(string, int, int, int)
        C++: void SetLinesComponent(const char *arrayName, int arrayComp,
            int min, int max)
        V.SetLinesComponent(string, int)
        C++: void SetLinesComponent(const char *arrayName, int arrayComp)
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def SetOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetOrigin(float, float, float)
        C++: virtual void SetOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetOrigin((float, float, float))
        C++: virtual void SetOrigin(const double _arg[3])
        
        Specify the origin to use if generating a dataset whose origin
        can be set (i.e., a vtkStructuredPoints dataset).
        """
        ...
    
    def SetOriginComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetOriginComponent(string, int, int, int)
        C++: void SetOriginComponent(const char *arrayName, int arrayComp,
             int min, int max)
        V.SetOriginComponent(string, int)
        C++: void SetOriginComponent(const char *arrayName, int arrayComp)
        
        Alternative methods to specify the dimensions, spacing, and
        origin for those datasets requiring this information. You need to
        specify the name of an array; the component of the array, and the
        range of the array (min,max). These methods will override the
        information given by the previous methods.
        """
        ...
    
    def SetPointComponent(self, p_int, string, p_int_1, p_int_2, p_int_3, p_int_4):
        """
        V.SetPointComponent(int, string, int, int, int, int)
        C++: void SetPointComponent(int comp, const char *arrayName,
            int arrayComp, int min, int max, int normalize)
        V.SetPointComponent(int, string, int)
        C++: void SetPointComponent(int comp, const char *arrayName,
            int arrayComp)
        
        Define the component of the field to be used for the x, y, and z
        values of the points. Note that the parameter comp must lie
        between (0,2) and refers to the x-y-z (i.e., 0,1,2) components of
        the points. To define the field component to use you can specify
        an array name and the component in that array. The (min,max)
        values are the range of data in the component you wish to
        extract. (This method should be used for vtkPolyData,
        vtkUnstructuredGrid, vtkStructuredGrid, and vtkRectilinearGrid.)
        A convenience method, SetPointComponent(),is also provided which
        does not require setting the (min,max) component range or the
        normalize flag (normalize is set to DefaulatNormalize value).
        """
        ...
    
    def SetPolysComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetPolysComponent(string, int, int, int)
        C++: void SetPolysComponent(const char *arrayName, int arrayComp,
            int min, int max)
        V.SetPolysComponent(string, int)
        C++: void SetPolysComponent(const char *arrayName, int arrayComp)
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def SetSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetSpacing(float, float, float)
        C++: virtual void SetSpacing(double _arg1, double _arg2,
            double _arg3)
        V.SetSpacing((float, float, float))
        C++: virtual void SetSpacing(const double _arg[3])
        
        Specify the spacing to use if generating a dataset whose spacing
        can be set (i.e., a vtkStructuredPoints dataset).
        """
        ...
    
    def SetSpacingComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetSpacingComponent(string, int, int, int)
        C++: void SetSpacingComponent(const char *arrayName,
            int arrayComp, int min, int max)
        V.SetSpacingComponent(string, int)
        C++: void SetSpacingComponent(const char *arrayName,
            int arrayComp)
        
        Alternative methods to specify the dimensions, spacing, and
        origin for those datasets requiring this information. You need to
        specify the name of an array; the component of the array, and the
        range of the array (min,max). These methods will override the
        information given by the previous methods.
        """
        ...
    
    def SetStripsComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetStripsComponent(string, int, int, int)
        C++: void SetStripsComponent(const char *arrayName, int arrayComp,
             int min, int max)
        V.SetStripsComponent(string, int)
        C++: void SetStripsComponent(const char *arrayName, int arrayComp)
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def SetVertsComponent(self, string, p_int, p_int_1, p_int_2):
        """
        V.SetVertsComponent(string, int, int, int)
        C++: void SetVertsComponent(const char *arrayName, int arrayComp,
            int min, int max)
        V.SetVertsComponent(string, int)
        C++: void SetVertsComponent(const char *arrayName, int arrayComp)
        
        Define cell connectivity when creating vtkPolyData. You can
        define vertices, lines, polygons, and/or triangle strips via
        these methods. These methods are similar to those for defining
        points, except that no normalization of the data is possible.
        Basically, you need to define an array of values that (for each
        cell) includes the number of points per cell, and then the cell
        connectivity. (This is the vtk file format described in in the
        textbook or User's Guide.)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


