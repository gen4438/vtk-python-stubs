"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkRearrangeFields(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkRearrangeFields - Move/copy fields between field data, point data
    and cell data
    
    Superclass: vtkDataSetAlgorithm
    
    vtkRearrangeFields is used to copy/move fields (vtkDataArrays)
    between data object's field data, point data and cell data. To
    specify which fields are copied/moved, the user adds operations.
    There are two types of operations: 1. the type which copies/moves an
    attribute's data (i.e. the field will be copied but will not be an
    attribute in the target), 2. the type which copies/moves fields by
    name. For example:
     rf->AddOperation(vtkRearrangeFields::COPY, "foo",
                      vtkRearrangeFields::DATA_OBJECT,
                      vtkRearrangeFields::POINT_DATA);
      adds an operation which copies a field (data array) called foo from
    the data object's field data to point data. The same can be done
    using Python and Java bindings by passing strings as arguments.
     Operation types: COPY, MOVE
     AttributeTypes: SCALARS, VECTORS, NORMALS, TCOORDS, TENSORS
     Field data locations: DATA_OBJECT, POINT_DATA, CELL_DATA
     
    
    @warning
    When using Java, Python or Visual Basic bindings, the array name can
    not be one of the  AttributeTypes when calling AddOperation() which
    takes strings as arguments. The wrapped command will always assume
    the string corresponds to an attribute type when the argument is one
    of the AttributeTypes. In this situation, use the AddOperation()
    which takes enums.
    
    @sa
    vtkFieldData vtkDataSet vtkDataObjectToDataSetFilter
    vtkDataSetAttributes vtkDataArray vtkAssignAttribute vtkSplitField
    vtkMergeFields
    """
    def AddOperation(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.AddOperation(int, int, int, int) -> int
        C++: int AddOperation(int operationType, int attributeType,
            int fromFieldLoc, int toFieldLoc)
        V.AddOperation(int, string, int, int) -> int
        C++: int AddOperation(int operationType, const char *name,
            int fromFieldLoc, int toFieldLoc)
        V.AddOperation(string, string, string, string) -> int
        C++: int AddOperation(const char *operationType,
            const char *attributeType, const char *fromFieldLoc,
            const char *toFieldLoc)
        
        Add an operation which copies an attribute's field (data array)
        from one field data to another. Returns an operation id which can
        later be used to remove the operation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRearrangeFields
        C++: vtkRearrangeFields *NewInstance()
        """
        ...
    
    def RemoveAllOperations(self):
        """
        V.RemoveAllOperations()
        C++: void RemoveAllOperations()
        
        Remove all operations.
        """
        ...
    
    def RemoveOperation(self, p_int):
        """
        V.RemoveOperation(int) -> int
        C++: int RemoveOperation(int operationId)
        V.RemoveOperation(int, int, int, int) -> int
        C++: int RemoveOperation(int operationType, int attributeType,
            int fromFieldLoc, int toFieldLoc)
        V.RemoveOperation(int, string, int, int) -> int
        C++: int RemoveOperation(int operationType, const char *name,
            int fromFieldLoc, int toFieldLoc)
        V.RemoveOperation(string, string, string, string) -> int
        C++: int RemoveOperation(const char *operationType,
            const char *attributeType, const char *fromFieldLoc,
            const char *toFieldLoc)
        
        Remove an operation with the given id.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRearrangeFields
        C++: static vtkRearrangeFields *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ATTRIBUTE = ...
    CELL_DATA = ...
    COPY = ...
    DATA_OBJECT = ...
    FieldLocation = ...
    FieldType = ...
    MOVE = ...
    NAME = ...
    OperationType = ...
    POINT_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


