"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTransposeTable(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkTransposeTable - Transpose an input table.
    
    Superclass: vtkTableAlgorithm
    
    This algorithm allows to transpose a vtkTable as a matrix. Columns
    become rows and vice versa. A new column can be added to the result
    table at index 0 to collect the name of the initial columns (when
    AddIdColumn is true). Such a column can be used to name the columns
    of the result. Note that columns of the output table will have a
    variant type is the columns of the initial table are not consistent.
    """
    def AddIdColumnOff(self):
        """
        V.AddIdColumnOff()
        C++: virtual void AddIdColumnOff()
        
        This flag indicates if a column must be inserted at index 0 with
        the names (ids) of the input columns. Default: true
        """
        ...
    
    def AddIdColumnOn(self):
        """
        V.AddIdColumnOn()
        C++: virtual void AddIdColumnOn()
        
        This flag indicates if a column must be inserted at index 0 with
        the names (ids) of the input columns. Default: true
        """
        ...
    
    def GetAddIdColumn(self):
        """
        V.GetAddIdColumn() -> bool
        C++: virtual bool GetAddIdColumn()
        
        This flag indicates if a column must be inserted at index 0 with
        the names (ids) of the input columns. Default: true
        """
        ...
    
    def GetIdColumnName(self):
        """
        V.GetIdColumnName() -> string
        C++: virtual char *GetIdColumnName()
        
        Get/Set the name of the id column added by option AddIdColumn.
        Default: ColName
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseIdColumn(self):
        """
        V.GetUseIdColumn() -> bool
        C++: virtual bool GetUseIdColumn()
        
        This flag indicates if the output column must be named using the
        names listed in the index 0 column. Default: false
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTransposeTable
        C++: vtkTransposeTable *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTransposeTable
        C++: static vtkTransposeTable *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAddIdColumn(self, bool):
        """
        V.SetAddIdColumn(bool)
        C++: virtual void SetAddIdColumn(bool _arg)
        
        This flag indicates if a column must be inserted at index 0 with
        the names (ids) of the input columns. Default: true
        """
        ...
    
    def SetIdColumnName(self, string):
        """
        V.SetIdColumnName(string)
        C++: virtual void SetIdColumnName(const char *_arg)
        
        Get/Set the name of the id column added by option AddIdColumn.
        Default: ColName
        """
        ...
    
    def SetUseIdColumn(self, bool):
        """
        V.SetUseIdColumn(bool)
        C++: virtual void SetUseIdColumn(bool _arg)
        
        This flag indicates if the output column must be named using the
        names listed in the index 0 column. Default: false
        """
        ...
    
    def UseIdColumnOff(self):
        """
        V.UseIdColumnOff()
        C++: virtual void UseIdColumnOff()
        
        This flag indicates if the output column must be named using the
        names listed in the index 0 column. Default: false
        """
        ...
    
    def UseIdColumnOn(self):
        """
        V.UseIdColumnOn()
        C++: virtual void UseIdColumnOn()
        
        This flag indicates if the output column must be named using the
        names listed in the index 0 column. Default: false
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


