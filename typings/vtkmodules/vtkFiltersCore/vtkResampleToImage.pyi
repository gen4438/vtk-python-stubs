"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkResampleToImage(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkResampleToImage - sample dataset on a uniform grid
    
    Superclass: vtkAlgorithm
    
    vtkPResampleToImage is a filter that resamples the input dataset on a
    uniform grid. It internally uses vtkProbeFilter to do the probing.
    @sa
    vtkProbeFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkImageData
        C++: vtkImageData *GetOutput()
        
        Get the output data for this algorithm.
        """
        ...
    
    def GetSamplingBounds(self):
        """
        V.GetSamplingBounds() -> (float, float, float, float, float,
            float)
        C++: virtual double *GetSamplingBounds()
        
        Set/Get sampling bounds. If (UseInputBounds == 1) then the
        sampling bounds won't be used.
        """
        ...
    
    def GetSamplingDimensions(self):
        """
        V.GetSamplingDimensions() -> (int, int, int)
        C++: virtual int *GetSamplingDimensions()
        
        Set/Get sampling dimension along each axis. Default will be
        [10,10,10]
        """
        ...
    
    def GetUseInputBounds(self):
        """
        V.GetUseInputBounds() -> bool
        C++: virtual bool GetUseInputBounds()
        
        Set/Get if the filter should use Input bounds to sub-sample the
        data. By default it is set to 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkResampleToImage
        C++: vtkResampleToImage *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkResampleToImage
        C++: static vtkResampleToImage *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetSamplingBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetSamplingBounds(float, float, float, float, float, float)
        C++: virtual void SetSamplingBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetSamplingBounds((float, float, float, float, float, float))
        C++: virtual void SetSamplingBounds(const double _arg[6])
        
        Set/Get sampling bounds. If (UseInputBounds == 1) then the
        sampling bounds won't be used.
        """
        ...
    
    def SetSamplingDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetSamplingDimensions(int, int, int)
        C++: virtual void SetSamplingDimensions(int _arg1, int _arg2,
            int _arg3)
        V.SetSamplingDimensions((int, int, int))
        C++: virtual void SetSamplingDimensions(const int _arg[3])
        
        Set/Get sampling dimension along each axis. Default will be
        [10,10,10]
        """
        ...
    
    def SetUseInputBounds(self, bool):
        """
        V.SetUseInputBounds(bool)
        C++: virtual void SetUseInputBounds(bool _arg)
        
        Set/Get if the filter should use Input bounds to sub-sample the
        data. By default it is set to 1.
        """
        ...
    
    def UseInputBoundsOff(self):
        """
        V.UseInputBoundsOff()
        C++: virtual void UseInputBoundsOff()
        
        Set/Get if the filter should use Input bounds to sub-sample the
        data. By default it is set to 1.
        """
        ...
    
    def UseInputBoundsOn(self):
        """
        V.UseInputBoundsOn()
        C++: virtual void UseInputBoundsOn()
        
        Set/Get if the filter should use Input bounds to sub-sample the
        data. By default it is set to 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


