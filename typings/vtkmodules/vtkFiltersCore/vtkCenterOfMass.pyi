"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCenterOfMass(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkCenterOfMass - Find the center of mass of a set of points.
    
    Superclass: vtkPointSetAlgorithm
    
    vtkCenterOfMass finds the "center of mass" of a vtkPointSet
    (vtkPolyData or vtkUnstructuredGrid). Optionally, the user can
    specify to use the scalars as weights in the computation. If this
    option, UseScalarsAsWeights, is off, each point contributes equally
    in the calculation.
    
    You must ensure Update() has been called before GetCenter will
    produce a valid value.
    """
    def ComputeCenterOfMass(self, vtkPoints, vtkDataArray, p_float=..., p_float=..., p_float=...):
        """
        V.ComputeCenterOfMass(vtkPoints, vtkDataArray, [float, float,
            float])
        C++: static void ComputeCenterOfMass(vtkPoints *input,
            vtkDataArray *scalars, double center[3])
        
        This function is called by RequestData. It exists so that other
        classes may use this computation without constructing a
        vtkCenterOfMass object.  The scalars can be set to nullptr if all
        points are to be weighted equally.  If scalars are used, it is
        the caller's responsibility to ensure that the number of scalars
        matches the number of points, and that the sum of the scalars is
        a positive value.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Get the output of the center of mass computation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseScalarsAsWeights(self):
        """
        V.GetUseScalarsAsWeights() -> bool
        C++: virtual bool GetUseScalarsAsWeights()
        
        Set a flag to determine if the points are weighted.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCenterOfMass
        C++: vtkCenterOfMass *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCenterOfMass
        C++: static vtkCenterOfMass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Get the output of the center of mass computation.
        """
        ...
    
    def SetUseScalarsAsWeights(self, bool):
        """
        V.SetUseScalarsAsWeights(bool)
        C++: virtual void SetUseScalarsAsWeights(bool _arg)
        
        Set a flag to determine if the points are weighted.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


