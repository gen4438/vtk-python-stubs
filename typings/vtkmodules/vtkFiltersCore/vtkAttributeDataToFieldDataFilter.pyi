"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAttributeDataToFieldDataFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkAttributeDataToFieldDataFilter - map attribute data to field data
    
    Superclass: vtkDataSetAlgorithm
    
    vtkAttributeDataToFieldDataFilter is a class that maps attribute data
    into field data. Since this filter is a subclass of
    vtkDataSetAlgorithm, the output dataset (whose structure is the same
    as the input dataset), will contain the field data that is generated.
    The filter will convert point and cell attribute data to field data
    and assign it as point and cell field data, replacing any point or
    field data that was there previously. By default, the original
    non-field point and cell attribute data will be passed to the output
    of the filter, although you can shut this behavior down.
    
    @warning
    Reference counting the underlying data arrays is used to create the
    field data.  Therefore, no extra memory is utilized.
    
    @warning
    The original field data (if any) associated with the point and cell
    attribute data is placed into the generated fields along with the
    scalars, vectors, etc.
    
    @sa
    vtkFieldData vtkDataObject vtkDataSet
    vtkFieldDataToAttributeDataFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPassAttributeData(self):
        """
        V.GetPassAttributeData() -> int
        C++: virtual vtkTypeBool GetPassAttributeData()
        
        Turn on/off the passing of point and cell non-field attribute
        data to the output of the filter.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAttributeDataToFieldDataFilter
        C++: vtkAttributeDataToFieldDataFilter *NewInstance()
        """
        ...
    
    def PassAttributeDataOff(self):
        """
        V.PassAttributeDataOff()
        C++: virtual void PassAttributeDataOff()
        
        Turn on/off the passing of point and cell non-field attribute
        data to the output of the filter.
        """
        ...
    
    def PassAttributeDataOn(self):
        """
        V.PassAttributeDataOn()
        C++: virtual void PassAttributeDataOn()
        
        Turn on/off the passing of point and cell non-field attribute
        data to the output of the filter.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAttributeDataToFieldDataFilter
        C++: static vtkAttributeDataToFieldDataFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetPassAttributeData(self, p_int):
        """
        V.SetPassAttributeData(int)
        C++: virtual void SetPassAttributeData(vtkTypeBool _arg)
        
        Turn on/off the passing of point and cell non-field attribute
        data to the output of the filter.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


