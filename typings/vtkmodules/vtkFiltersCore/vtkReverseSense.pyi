"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkReverseSense(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkReverseSense - reverse the ordering of polygonal cells and/or
    vertex normals
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkReverseSense is a filter that reverses the order of polygonal
    cells and/or reverses the direction of point and cell normals. Two
    flags are used to control these operations. Cell reversal means
    reversing the order of indices in the cell connectivity list. Normal
    reversal means multiplying the normal vector by -1 (both point and
    cell normals, if present).
    
    @warning
    Normals can be operated on only if they are present in the data.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReverseCells(self):
        """
        V.GetReverseCells() -> int
        C++: virtual vtkTypeBool GetReverseCells()
        
        Flag controls whether to reverse cell ordering.
        """
        ...
    
    def GetReverseNormals(self):
        """
        V.GetReverseNormals() -> int
        C++: virtual vtkTypeBool GetReverseNormals()
        
        Flag controls whether to reverse normal orientation.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkReverseSense
        C++: vtkReverseSense *NewInstance()
        """
        ...
    
    def ReverseCellsOff(self):
        """
        V.ReverseCellsOff()
        C++: virtual void ReverseCellsOff()
        
        Flag controls whether to reverse cell ordering.
        """
        ...
    
    def ReverseCellsOn(self):
        """
        V.ReverseCellsOn()
        C++: virtual void ReverseCellsOn()
        
        Flag controls whether to reverse cell ordering.
        """
        ...
    
    def ReverseNormalsOff(self):
        """
        V.ReverseNormalsOff()
        C++: virtual void ReverseNormalsOff()
        
        Flag controls whether to reverse normal orientation.
        """
        ...
    
    def ReverseNormalsOn(self):
        """
        V.ReverseNormalsOn()
        C++: virtual void ReverseNormalsOn()
        
        Flag controls whether to reverse normal orientation.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkReverseSense
        C++: static vtkReverseSense *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetReverseCells(self, p_int):
        """
        V.SetReverseCells(int)
        C++: virtual void SetReverseCells(vtkTypeBool _arg)
        
        Flag controls whether to reverse cell ordering.
        """
        ...
    
    def SetReverseNormals(self, p_int):
        """
        V.SetReverseNormals(int)
        C++: virtual void SetReverseNormals(vtkTypeBool _arg)
        
        Flag controls whether to reverse normal orientation.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


