"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkBinCellDataFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkBinCellDataFilter - bin source cell data into input cells.
    
    Superclass: vtkDataSetAlgorithm
    
    vtkBinCellDataFilter takes a source mesh containing scalar cell data,
    an input mesh and a set of bin values and bins the source mesh's
    scalar cell data into the cells of the input mesh. The resulting
    output mesh is identical to the input mesh, with an additional cell
    data field, with tuple size equal to the number of bins + 1, that
    represents a histogram of the cell data values for all of the source
    cells whose centroid lie within the input cell.
    
    This filter is useful for analyzing the efficacy of an input mesh's
    ability to represent the cell data of the source mesh.
    """
    def ComputeToleranceOff(self):
        """
        V.ComputeToleranceOff()
        C++: virtual void ComputeToleranceOff()
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. Off by default.
        """
        ...
    
    def ComputeToleranceOn(self):
        """
        V.ComputeToleranceOn()
        C++: virtual void ComputeToleranceOn()
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. Off by default.
        """
        ...
    
    def GenerateValues(self, p_int, p_float=..., p_float=...):
        """
        V.GenerateValues(int, [float, float])
        C++: void GenerateValues(int numBins, double range[2])
        V.GenerateValues(int, float, float)
        C++: void GenerateValues(int numBins, double rangeStart,
            double rangeEnd)
        
        Methods to set / get bin values.
        """
        ...
    
    def GetArrayComponent(self):
        """
        V.GetArrayComponent() -> int
        C++: virtual int GetArrayComponent()
        
        Set/get which component of the scalar array to bin; defaults to
        0.
        """
        ...
    
    def GetCellLocator(self):
        """
        V.GetCellLocator() -> vtkAbstractCellLocator
        C++: virtual vtkAbstractCellLocator *GetCellLocator()
        
        Set/Get a spatial locator for speeding the search process. By
        default an instance of vtkStaticCellLocator is used.
        """
        ...
    
    def GetCellOverlapMethod(self):
        """
        V.GetCellOverlapMethod() -> int
        C++: virtual int GetCellOverlapMethod()
        
        Set whether cell overlap is determined by source cell centroid or
        by source cell points. Centroid by default.
        """
        ...
    
    def GetCellOverlapMethodMaxValue(self):
        """
        V.GetCellOverlapMethodMaxValue() -> int
        C++: virtual int GetCellOverlapMethodMaxValue()
        
        Set whether cell overlap is determined by source cell centroid or
        by source cell points. Centroid by default.
        """
        ...
    
    def GetCellOverlapMethodMinValue(self):
        """
        V.GetCellOverlapMethodMinValue() -> int
        C++: virtual int GetCellOverlapMethodMinValue()
        
        Set whether cell overlap is determined by source cell centroid or
        by source cell points. Centroid by default.
        """
        ...
    
    def GetComputeTolerance(self):
        """
        V.GetComputeTolerance() -> bool
        C++: virtual bool GetComputeTolerance()
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. Off by default.
        """
        ...
    
    def GetNumberOfBins(self):
        """
        V.GetNumberOfBins() -> int
        C++: vtkIdType GetNumberOfBins()
        
        Methods to set / get bin values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type and printing.
        """
        ...
    
    def GetNumberOfNonzeroBinsArrayName(self):
        """
        V.GetNumberOfNonzeroBinsArrayName() -> string
        C++: virtual char *GetNumberOfNonzeroBinsArrayName()
        
        Returns the name of the id array added to the output that holds
        the number of nonzero bins per cell. Set to "NumberOfNonzeroBins"
        by default.
        """
        ...
    
    def GetSource(self):
        """
        V.GetSource() -> vtkDataObject
        C++: vtkDataObject *GetSource()
        
        Specify the data set whose cells will be counted. The Input gives
        the geometry (the points and cells) for the output, while the
        Source is used to determine how many source cells lie within each
        input cell.
        """
        ...
    
    def GetSpatialMatch(self):
        """
        V.GetSpatialMatch() -> int
        C++: virtual vtkTypeBool GetSpatialMatch()
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def GetStoreNumberOfNonzeroBins(self):
        """
        V.GetStoreNumberOfNonzeroBins() -> bool
        C++: virtual bool GetStoreNumberOfNonzeroBins()
        
        Set whether to store the number of nonzero bins for each cell. On
        by default.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        Set the tolerance used to compute whether a cell centroid in the
        source is in a cell of the input.  This value is only used if
        ComputeTolerance is off.
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> float
        C++: double GetValue(int i)
        
        Methods to set / get bin values.
        """
        ...
    
    def GetValues(self):
        """
        V.GetValues() -> (float, ...)
        C++: double *GetValues()
        V.GetValues([float, ...])
        C++: void GetValues(double *binValues)
        
        Methods to set / get bin values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBinCellDataFilter
        C++: vtkBinCellDataFilter *NewInstance()
        
        Standard methods for type and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBinCellDataFilter
        C++: static vtkBinCellDataFilter *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for type and printing.
        """
        ...
    
    def SetArrayComponent(self, p_int):
        """
        V.SetArrayComponent(int)
        C++: virtual void SetArrayComponent(int _arg)
        
        Set/get which component of the scalar array to bin; defaults to
        0.
        """
        ...
    
    def SetCellLocator(self, vtkAbstractCellLocator):
        """
        V.SetCellLocator(vtkAbstractCellLocator)
        C++: virtual void SetCellLocator(
            vtkAbstractCellLocator *cellLocator)
        
        Set/Get a spatial locator for speeding the search process. By
        default an instance of vtkStaticCellLocator is used.
        """
        ...
    
    def SetCellOverlapMethod(self, p_int):
        """
        V.SetCellOverlapMethod(int)
        C++: virtual void SetCellOverlapMethod(int _arg)
        
        Set whether cell overlap is determined by source cell centroid or
        by source cell points. Centroid by default.
        """
        ...
    
    def SetComputeTolerance(self, bool):
        """
        V.SetComputeTolerance(bool)
        C++: virtual void SetComputeTolerance(bool _arg)
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. Off by default.
        """
        ...
    
    def SetNumberOfBins(self, p_int):
        """
        V.SetNumberOfBins(int)
        C++: void SetNumberOfBins(int numBins)
        
        Methods to set / get bin values.
        """
        ...
    
    def SetNumberOfNonzeroBinsArrayName(self, string):
        """
        V.SetNumberOfNonzeroBinsArrayName(string)
        C++: virtual void SetNumberOfNonzeroBinsArrayName(
            const char *_arg)
        
        Returns the name of the id array added to the output that holds
        the number of nonzero bins per cell. Set to "NumberOfNonzeroBins"
        by default.
        """
        ...
    
    def SetSourceConnection(self, vtkAlgorithmOutput):
        """
        V.SetSourceConnection(vtkAlgorithmOutput)
        C++: void SetSourceConnection(vtkAlgorithmOutput *algOutput)
        
        Specify the data set whose cells will be counted. The Input gives
        the geometry (the points and cells) for the output, while the
        Source is used to determine how many source cells lie within each
        input cell.
        """
        ...
    
    def SetSourceData(self, vtkDataObject):
        """
        V.SetSourceData(vtkDataObject)
        C++: void SetSourceData(vtkDataObject *source)
        
        Specify the data set whose cells will be counted. The Input gives
        the geometry (the points and cells) for the output, while the
        Source is used to determine how many source cells lie within each
        input cell.
        """
        ...
    
    def SetSpatialMatch(self, p_int):
        """
        V.SetSpatialMatch(int)
        C++: virtual void SetSpatialMatch(vtkTypeBool _arg)
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def SetStoreNumberOfNonzeroBins(self, bool):
        """
        V.SetStoreNumberOfNonzeroBins(bool)
        C++: virtual void SetStoreNumberOfNonzeroBins(bool _arg)
        
        Set whether to store the number of nonzero bins for each cell. On
        by default.
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        Set the tolerance used to compute whether a cell centroid in the
        source is in a cell of the input.  This value is only used if
        ComputeTolerance is off.
        """
        ...
    
    def SetValue(self, p_int, p_float):
        """
        V.SetValue(int, float)
        C++: void SetValue(int i, double value)
        
        Methods to set / get bin values.
        """
        ...
    
    def SpatialMatchOff(self):
        """
        V.SpatialMatchOff()
        C++: virtual void SpatialMatchOff()
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def SpatialMatchOn(self):
        """
        V.SpatialMatchOn()
        C++: virtual void SpatialMatchOn()
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def StoreNumberOfNonzeroBinsOff(self):
        """
        V.StoreNumberOfNonzeroBinsOff()
        C++: virtual void StoreNumberOfNonzeroBinsOff()
        
        Set whether to store the number of nonzero bins for each cell. On
        by default.
        """
        ...
    
    def StoreNumberOfNonzeroBinsOn(self):
        """
        V.StoreNumberOfNonzeroBinsOn()
        C++: virtual void StoreNumberOfNonzeroBinsOn()
        
        Set whether to store the number of nonzero bins for each cell. On
        by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CellOverlapCriterion = ...
    CELL_CENTROID = ...
    CELL_POINTS = ...
    __dict__ = ...
    __vtkname__ = ...


