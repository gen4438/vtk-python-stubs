"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSmoothPolyDataFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSmoothPolyDataFilter - adjust point positions using Laplacian
    smoothing
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSmoothPolyDataFilter is a filter that adjusts point coordinates
    using Laplacian smoothing. The effect is to "relax" the mesh, making
    the cells better shaped and the vertices more evenly distributed.
    Note that this filter operates on the lines, polygons, and triangle
    strips composing an instance of vtkPolyData. Vertex or poly-vertex
    cells are never modified.
    
    The algorithm proceeds as follows. For each vertex v, a topological
    and geometric analysis is performed to determine which vertices are
    connected to v, and which cells are connected to v. Then, a
    connectivity array is constructed for each vertex. (The connectivity
    array is a list of lists of vertices that directly attach to each
    vertex.) Next, an iteration phase begins over all vertices. For each
    vertex v, the coordinates of v are modified according to an average
    of the connected vertices.  (A relaxation factor is available to
    control the amount of displacement of v).  The process repeats for
    each vertex. This pass over the list of vertices is a single
    iteration. Many iterations (generally around 20 or so) are repeated
    until the desired result is obtained.
    
    There are some special instance variables used to control the
    execution of this filter. (These ivars basically control what
    vertices can be smoothed, and the creation of the connectivity
    array.) The BoundarySmoothing ivar enables/disables the smoothing
    operation on vertices that are on the "boundary" of the mesh. A
    boundary vertex is one that is surrounded by a semi-cycle of polygons
    (or used by a single line).
    
    Another important ivar is FeatureEdgeSmoothing. If this ivar is
    enabled, then interior vertices are classified as either "simple", "interior
    edge", or "fixed", and smoothed differently. (Interior vertices are
    manifold vertices surrounded by a cycle of polygons; or used by two
    line cells.) The classification is based on the number of feature
    edges attached to v. A feature edge occurs when the angle between the
    two surface normals of a polygon sharing an edge is greater than the
    FeatureAngle ivar. Then, vertices used by no feature edges are
    classified "simple", vertices used by exactly two feature edges are
    classified "interior edge", and all others are "fixed" vertices.
    
    Once the classification is known, the vertices are smoothed
    differently. Corner (i.e., fixed) vertices are not smoothed at all.
    Simple vertices are smoothed as before (i.e., average of connected
    vertex coordinates). Interior edge vertices are smoothed only along
    their two connected edges, and only if the angle between the edges is
    less than the EdgeAngle ivar.
    
    The total smoothing can be controlled by using two ivars. The
    NumberOfIterations is a cap on the maximum number of smoothing
    passes. The Convergence ivar is a limit on the maximum point motion.
    If the maximum motion during an iteration is less than Convergence,
    then the smoothing process terminates. (Convergence is expressed as a
    fraction of the diagonal of the bounding box.)
    
    There are two instance variables that control the generation of error
    data. If the ivar GenerateErrorScalars is on, then a scalar value
    indicating the distance of each vertex from its original position is
    computed. If the ivar GenerateErrorVectors is on, then a vector
    representing change in position is computed.
    
    Optionally you can further control the smoothing process by defining
    a second input: the Source. If defined, the input mesh is constrained
    to lie on the surface defined by the Source ivar.
    
    @warning
    The Laplacian operation reduces high frequency information in the
    geometry of the mesh. With excessive smoothing important details may
    be lost, and the surface may shrink towards the centroid. Enabling
    FeatureEdgeSmoothing helps reduce this effect, but cannot entirely
    eliminate it. You may also wish to try vtkWindowedSincPolyDataFilter.
    It does a better job of minimizing shrinkage.
    
    @sa
    vtkWindowedSincPolyDataFilter vtkDecimate vtkDecimatePro
    """
    def BoundarySmoothingOff(self):
        """
        V.BoundarySmoothingOff()
        C++: virtual void BoundarySmoothingOff()
        
        Turn on/off the smoothing of vertices on the boundary of the
        mesh.
        """
        ...
    
    def BoundarySmoothingOn(self):
        """
        V.BoundarySmoothingOn()
        C++: virtual void BoundarySmoothingOn()
        
        Turn on/off the smoothing of vertices on the boundary of the
        mesh.
        """
        ...
    
    def FeatureEdgeSmoothingOff(self):
        """
        V.FeatureEdgeSmoothingOff()
        C++: virtual void FeatureEdgeSmoothingOff()
        
        Turn on/off smoothing along sharp interior edges.
        """
        ...
    
    def FeatureEdgeSmoothingOn(self):
        """
        V.FeatureEdgeSmoothingOn()
        C++: virtual void FeatureEdgeSmoothingOn()
        
        Turn on/off smoothing along sharp interior edges.
        """
        ...
    
    def GenerateErrorScalarsOff(self):
        """
        V.GenerateErrorScalarsOff()
        C++: virtual void GenerateErrorScalarsOff()
        
        Turn on/off the generation of scalar distance values.
        """
        ...
    
    def GenerateErrorScalarsOn(self):
        """
        V.GenerateErrorScalarsOn()
        C++: virtual void GenerateErrorScalarsOn()
        
        Turn on/off the generation of scalar distance values.
        """
        ...
    
    def GenerateErrorVectorsOff(self):
        """
        V.GenerateErrorVectorsOff()
        C++: virtual void GenerateErrorVectorsOff()
        
        Turn on/off the generation of error vectors.
        """
        ...
    
    def GenerateErrorVectorsOn(self):
        """
        V.GenerateErrorVectorsOn()
        C++: virtual void GenerateErrorVectorsOn()
        
        Turn on/off the generation of error vectors.
        """
        ...
    
    def GetBoundarySmoothing(self):
        """
        V.GetBoundarySmoothing() -> int
        C++: virtual vtkTypeBool GetBoundarySmoothing()
        
        Turn on/off the smoothing of vertices on the boundary of the
        mesh.
        """
        ...
    
    def GetConvergence(self):
        """
        V.GetConvergence() -> float
        C++: virtual double GetConvergence()
        
        Specify a convergence criterion for the iteration process.
        Smaller numbers result in more smoothing iterations.
        """
        ...
    
    def GetConvergenceMaxValue(self):
        """
        V.GetConvergenceMaxValue() -> float
        C++: virtual double GetConvergenceMaxValue()
        
        Specify a convergence criterion for the iteration process.
        Smaller numbers result in more smoothing iterations.
        """
        ...
    
    def GetConvergenceMinValue(self):
        """
        V.GetConvergenceMinValue() -> float
        C++: virtual double GetConvergenceMinValue()
        
        Specify a convergence criterion for the iteration process.
        Smaller numbers result in more smoothing iterations.
        """
        ...
    
    def GetEdgeAngle(self):
        """
        V.GetEdgeAngle() -> float
        C++: virtual double GetEdgeAngle()
        
        Specify the edge angle to control smoothing along edges (either
        interior or boundary).
        """
        ...
    
    def GetEdgeAngleMaxValue(self):
        """
        V.GetEdgeAngleMaxValue() -> float
        C++: virtual double GetEdgeAngleMaxValue()
        
        Specify the edge angle to control smoothing along edges (either
        interior or boundary).
        """
        ...
    
    def GetEdgeAngleMinValue(self):
        """
        V.GetEdgeAngleMinValue() -> float
        C++: virtual double GetEdgeAngleMinValue()
        
        Specify the edge angle to control smoothing along edges (either
        interior or boundary).
        """
        ...
    
    def GetFeatureAngle(self):
        """
        V.GetFeatureAngle() -> float
        C++: virtual double GetFeatureAngle()
        
        Specify the feature angle for sharp edge identification.
        """
        ...
    
    def GetFeatureAngleMaxValue(self):
        """
        V.GetFeatureAngleMaxValue() -> float
        C++: virtual double GetFeatureAngleMaxValue()
        
        Specify the feature angle for sharp edge identification.
        """
        ...
    
    def GetFeatureAngleMinValue(self):
        """
        V.GetFeatureAngleMinValue() -> float
        C++: virtual double GetFeatureAngleMinValue()
        
        Specify the feature angle for sharp edge identification.
        """
        ...
    
    def GetFeatureEdgeSmoothing(self):
        """
        V.GetFeatureEdgeSmoothing() -> int
        C++: virtual vtkTypeBool GetFeatureEdgeSmoothing()
        
        Turn on/off smoothing along sharp interior edges.
        """
        ...
    
    def GetGenerateErrorScalars(self):
        """
        V.GetGenerateErrorScalars() -> int
        C++: virtual vtkTypeBool GetGenerateErrorScalars()
        
        Turn on/off the generation of scalar distance values.
        """
        ...
    
    def GetGenerateErrorVectors(self):
        """
        V.GetGenerateErrorVectors() -> int
        C++: virtual vtkTypeBool GetGenerateErrorVectors()
        
        Turn on/off the generation of error vectors.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfIterations(self):
        """
        V.GetNumberOfIterations() -> int
        C++: virtual int GetNumberOfIterations()
        
        Specify the number of iterations for Laplacian smoothing,
        """
        ...
    
    def GetNumberOfIterationsMaxValue(self):
        """
        V.GetNumberOfIterationsMaxValue() -> int
        C++: virtual int GetNumberOfIterationsMaxValue()
        
        Specify the number of iterations for Laplacian smoothing,
        """
        ...
    
    def GetNumberOfIterationsMinValue(self):
        """
        V.GetNumberOfIterationsMinValue() -> int
        C++: virtual int GetNumberOfIterationsMinValue()
        
        Specify the number of iterations for Laplacian smoothing,
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def GetRelaxationFactor(self):
        """
        V.GetRelaxationFactor() -> float
        C++: virtual double GetRelaxationFactor()
        
        Specify the relaxation factor for Laplacian smoothing. As in all
        iterative methods, the stability of the process is sensitive to
        this parameter. In general, small relaxation factors and large
        numbers of iterations are more stable than larger relaxation
        factors and smaller numbers of iterations.
        """
        ...
    
    def GetSource(self):
        """
        V.GetSource() -> vtkPolyData
        C++: vtkPolyData *GetSource()
        
        Specify the source object which is used to constrain smoothing.
        The source defines a surface that the input (as it is smoothed)
        is constrained to lie upon.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSmoothPolyDataFilter
        C++: vtkSmoothPolyDataFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSmoothPolyDataFilter
        C++: static vtkSmoothPolyDataFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBoundarySmoothing(self, p_int):
        """
        V.SetBoundarySmoothing(int)
        C++: virtual void SetBoundarySmoothing(vtkTypeBool _arg)
        
        Turn on/off the smoothing of vertices on the boundary of the
        mesh.
        """
        ...
    
    def SetConvergence(self, p_float):
        """
        V.SetConvergence(float)
        C++: virtual void SetConvergence(double _arg)
        
        Specify a convergence criterion for the iteration process.
        Smaller numbers result in more smoothing iterations.
        """
        ...
    
    def SetEdgeAngle(self, p_float):
        """
        V.SetEdgeAngle(float)
        C++: virtual void SetEdgeAngle(double _arg)
        
        Specify the edge angle to control smoothing along edges (either
        interior or boundary).
        """
        ...
    
    def SetFeatureAngle(self, p_float):
        """
        V.SetFeatureAngle(float)
        C++: virtual void SetFeatureAngle(double _arg)
        
        Specify the feature angle for sharp edge identification.
        """
        ...
    
    def SetFeatureEdgeSmoothing(self, p_int):
        """
        V.SetFeatureEdgeSmoothing(int)
        C++: virtual void SetFeatureEdgeSmoothing(vtkTypeBool _arg)
        
        Turn on/off smoothing along sharp interior edges.
        """
        ...
    
    def SetGenerateErrorScalars(self, p_int):
        """
        V.SetGenerateErrorScalars(int)
        C++: virtual void SetGenerateErrorScalars(vtkTypeBool _arg)
        
        Turn on/off the generation of scalar distance values.
        """
        ...
    
    def SetGenerateErrorVectors(self, p_int):
        """
        V.SetGenerateErrorVectors(int)
        C++: virtual void SetGenerateErrorVectors(vtkTypeBool _arg)
        
        Turn on/off the generation of error vectors.
        """
        ...
    
    def SetNumberOfIterations(self, p_int):
        """
        V.SetNumberOfIterations(int)
        C++: virtual void SetNumberOfIterations(int _arg)
        
        Specify the number of iterations for Laplacian smoothing,
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def SetRelaxationFactor(self, p_float):
        """
        V.SetRelaxationFactor(float)
        C++: virtual void SetRelaxationFactor(double _arg)
        
        Specify the relaxation factor for Laplacian smoothing. As in all
        iterative methods, the stability of the process is sensitive to
        this parameter. In general, small relaxation factors and large
        numbers of iterations are more stable than larger relaxation
        factors and smaller numbers of iterations.
        """
        ...
    
    def SetSourceData(self, vtkPolyData):
        """
        V.SetSourceData(vtkPolyData)
        C++: void SetSourceData(vtkPolyData *source)
        
        Specify the source object which is used to constrain smoothing.
        The source defines a surface that the input (as it is smoothed)
        is constrained to lie upon.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


