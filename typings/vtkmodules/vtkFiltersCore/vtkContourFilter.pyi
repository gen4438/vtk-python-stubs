"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkContourFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkContourFilter - generate isosurfaces/isolines from scalar values
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkContourFilter is a filter that takes as input any dataset and
    generates on output isosurfaces and/or isolines. The exact form of
    the output depends upon the dimensionality of the input data. Data
    consisting of 3D cells will generate isosurfaces, data consisting of
    2D cells will generate isolines, and data with 1D or 0D cells will
    generate isopoints. Combinations of output type are possible if the
    input dimension is mixed.
    
    To use this filter you must specify one or more contour values. You
    can either use the method SetValue() to specify each contour value,
    or use GenerateValues() to generate a series of evenly spaced
    contours. It is also possible to accelerate the operation of this
    filter (at the cost of extra memory) by using a vtkScalarTree. A
    scalar tree is used to quickly locate cells that contain a contour
    surface. This is especially effective if multiple contours are being
    extracted. If you want to use a scalar tree, invoke the method
    UseScalarTreeOn().
    
    @warning
    For unstructured data or structured grids, normals and gradients are
    not computed. Use vtkPolyDataNormals to compute the surface normals.
    
    @sa
    vtkFlyingEdges3D vtkFlyingEdges2D vtkDiscreteFlyingEdges3D
    vtkDiscreteFlyingEdges2D vtkMarchingContourFilter vtkMarchingCubes
    vtkSliceCubes vtkMarchingSquares vtkImageMarchingCubes
    """
    def ComputeGradientsOff(self):
        """
        V.ComputeGradientsOff()
        C++: virtual void ComputeGradientsOff()
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def ComputeGradientsOn(self):
        """
        V.ComputeGradientsOn()
        C++: virtual void ComputeGradientsOn()
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def ComputeNormalsOff(self):
        """
        V.ComputeNormalsOff()
        C++: virtual void ComputeNormalsOff()
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off. This setting defaults to
        On for vtkImageData, vtkRectilinearGrid, vtkStructuredGrid, and
        vtkUnstructuredGrid inputs, and Off for all others. This default
        behavior is to preserve the behavior of an older version of this
        filter, which would ignore this setting for certain inputs.
        """
        ...
    
    def ComputeNormalsOn(self):
        """
        V.ComputeNormalsOn()
        C++: virtual void ComputeNormalsOn()
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off. This setting defaults to
        On for vtkImageData, vtkRectilinearGrid, vtkStructuredGrid, and
        vtkUnstructuredGrid inputs, and Off for all others. This default
        behavior is to preserve the behavior of an older version of this
        filter, which would ignore this setting for certain inputs.
        """
        ...
    
    def ComputeScalarsOff(self):
        """
        V.ComputeScalarsOff()
        C++: virtual void ComputeScalarsOff()
        
        Set/Get the computation of scalars.
        """
        ...
    
    def ComputeScalarsOn(self):
        """
        V.ComputeScalarsOn()
        C++: virtual void ComputeScalarsOn()
        
        Set/Get the computation of scalars.
        """
        ...
    
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified. The locator is used to merge coincident points.
        """
        ...
    
    def GenerateTrianglesOff(self):
        """
        V.GenerateTrianglesOff()
        C++: virtual void GenerateTrianglesOff()
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygon WARNING:
        if the contour surface is not planar, the output polygon will not
        be planar, which might be nice to look at but hard to compute
        with downstream.
        """
        ...
    
    def GenerateTrianglesOn(self):
        """
        V.GenerateTrianglesOn()
        C++: virtual void GenerateTrianglesOn()
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygon WARNING:
        if the contour surface is not planar, the output polygon will not
        be planar, which might be nice to look at but hard to compute
        with downstream.
        """
        ...
    
    def GenerateValues(self, p_int, p_float=..., p_float=...):
        """
        V.GenerateValues(int, [float, float])
        C++: void GenerateValues(int numContours, double range[2])
        V.GenerateValues(int, float, float)
        C++: void GenerateValues(int numContours, double rangeStart,
            double rangeEnd)
        
        Methods to set / get contour values.
        """
        ...
    
    def GetArrayComponent(self):
        """
        V.GetArrayComponent() -> int
        C++: int GetArrayComponent()
        
        Set/get which component of the scalar array to contour on;
        defaults to 0. Currently this feature only works if the input is
        a vtkImageData.
        """
        ...
    
    def GetComputeGradients(self):
        """
        V.GetComputeGradients() -> int
        C++: virtual vtkTypeBool GetComputeGradients()
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def GetComputeNormals(self):
        """
        V.GetComputeNormals() -> int
        C++: virtual vtkTypeBool GetComputeNormals()
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off. This setting defaults to
        On for vtkImageData, vtkRectilinearGrid, vtkStructuredGrid, and
        vtkUnstructuredGrid inputs, and Off for all others. This default
        behavior is to preserve the behavior of an older version of this
        filter, which would ignore this setting for certain inputs.
        """
        ...
    
    def GetComputeScalars(self):
        """
        V.GetComputeScalars() -> int
        C++: virtual vtkTypeBool GetComputeScalars()
        
        Set/Get the computation of scalars.
        """
        ...
    
    def GetGenerateTriangles(self):
        """
        V.GetGenerateTriangles() -> int
        C++: virtual vtkTypeBool GetGenerateTriangles()
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygon WARNING:
        if the contour surface is not planar, the output polygon will not
        be planar, which might be nice to look at but hard to compute
        with downstream.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Set / get a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Modified GetMTime Because we delegate to vtkContourValues
        """
        ...
    
    def GetNumberOfContours(self):
        """
        V.GetNumberOfContours() -> int
        C++: vtkIdType GetNumberOfContours()
        
        Methods to set / get contour values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::Precision enum for an
        explanation of the available precision settings.
        """
        ...
    
    def GetScalarTree(self):
        """
        V.GetScalarTree() -> vtkScalarTree
        C++: virtual vtkScalarTree *GetScalarTree()
        
        Enable the use of a scalar tree to accelerate contour extraction.
        """
        ...
    
    def GetUseScalarTree(self):
        """
        V.GetUseScalarTree() -> int
        C++: virtual vtkTypeBool GetUseScalarTree()
        
        Enable the use of a scalar tree to accelerate contour extraction.
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> float
        C++: double GetValue(int i)
        
        Methods to set / get contour values.
        """
        ...
    
    def GetValues(self):
        """
        V.GetValues() -> (float, ...)
        C++: double *GetValues()
        V.GetValues([float, ...])
        C++: void GetValues(double *contourValues)
        
        Methods to set / get contour values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContourFilter
        C++: vtkContourFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContourFilter
        C++: static vtkContourFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetArrayComponent(self, p_int):
        """
        V.SetArrayComponent(int)
        C++: void SetArrayComponent(int)
        
        Set/get which component of the scalar array to contour on;
        defaults to 0. Currently this feature only works if the input is
        a vtkImageData.
        """
        ...
    
    def SetComputeGradients(self, p_int):
        """
        V.SetComputeGradients(int)
        C++: virtual void SetComputeGradients(vtkTypeBool _arg)
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def SetComputeNormals(self, p_int):
        """
        V.SetComputeNormals(int)
        C++: virtual void SetComputeNormals(vtkTypeBool _arg)
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off. This setting defaults to
        On for vtkImageData, vtkRectilinearGrid, vtkStructuredGrid, and
        vtkUnstructuredGrid inputs, and Off for all others. This default
        behavior is to preserve the behavior of an older version of this
        filter, which would ignore this setting for certain inputs.
        """
        ...
    
    def SetComputeScalars(self, p_int):
        """
        V.SetComputeScalars(int)
        C++: virtual void SetComputeScalars(vtkTypeBool _arg)
        
        Set/Get the computation of scalars.
        """
        ...
    
    def SetGenerateTriangles(self, p_int):
        """
        V.SetGenerateTriangles(int)
        C++: virtual void SetGenerateTriangles(vtkTypeBool _arg)
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygon WARNING:
        if the contour surface is not planar, the output polygon will not
        be planar, which might be nice to look at but hard to compute
        with downstream.
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *locator)
        
        Set / get a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetNumberOfContours(self, p_int):
        """
        V.SetNumberOfContours(int)
        C++: void SetNumberOfContours(int number)
        
        Methods to set / get contour values.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: void SetOutputPointsPrecision(int precision)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::Precision enum for an
        explanation of the available precision settings.
        """
        ...
    
    def SetScalarTree(self, vtkScalarTree):
        """
        V.SetScalarTree(vtkScalarTree)
        C++: virtual void SetScalarTree(vtkScalarTree *)
        
        Enable the use of a scalar tree to accelerate contour extraction.
        """
        ...
    
    def SetUseScalarTree(self, p_int):
        """
        V.SetUseScalarTree(int)
        C++: virtual void SetUseScalarTree(vtkTypeBool _arg)
        
        Enable the use of a scalar tree to accelerate contour extraction.
        """
        ...
    
    def SetValue(self, p_int, p_float):
        """
        V.SetValue(int, float)
        C++: void SetValue(int i, double value)
        
        Methods to set / get contour values.
        """
        ...
    
    def UseScalarTreeOff(self):
        """
        V.UseScalarTreeOff()
        C++: virtual void UseScalarTreeOff()
        
        Enable the use of a scalar tree to accelerate contour extraction.
        """
        ...
    
    def UseScalarTreeOn(self):
        """
        V.UseScalarTreeOn()
        C++: virtual void UseScalarTreeOn()
        
        Enable the use of a scalar tree to accelerate contour extraction.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


