"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPolyDataConnectivityFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkPolyDataConnectivityFilter - extract polygonal data based on
    geometric connectivity
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkPolyDataConnectivityFilter is a filter that extracts cells that
    share common points and/or satisfy a scalar threshold criterion.
    (Such a group of cells is called a region.) The filter works in one
    of six ways: 1) extract the largest (most points) connected region in
    the dataset; 2) extract specified region numbers; 3) extract all
    regions sharing specified point ids; 4) extract all regions sharing
    specified cell ids; 5) extract the region closest to the specified
    point; or 6) extract all regions (used to color regions).
    
    This filter is specialized for polygonal data. This means it runs a
    bit faster and is easier to construct visualization networks that
    process polygonal data.
    
    The behavior of vtkPolyDataConnectivityFilter can be modified by
    turning on the boolean ivar ScalarConnectivity. If this flag is on,
    the connectivity algorithm is modified so that cells are considered
    connected only if 1) they are geometrically connected (share a point)
    and 2) the scalar values of the cell's points falls in the scalar
    range specified. If ScalarConnectivity and FullScalarConnectivity is
    ON, all the cell's points must lie in the scalar range specified for
    the cell to qualify as being connected. If FullScalarConnectivity is
    OFF, any one of the cell's points may lie in the user specified
    scalar range for the cell to qualify as being connected.
    
    This use of ScalarConnectivity is particularly useful for selecting
    cells for later processing.
    
    @sa
    vtkConnectivityFilter
    """
    def AddSeed(self, p_int):
        """
        V.AddSeed(int)
        C++: void AddSeed(int id)
        
        Add a seed id (point or cell id). Note: ids are 0-offset.
        """
        ...
    
    def AddSpecifiedRegion(self, p_int):
        """
        V.AddSpecifiedRegion(int)
        C++: void AddSpecifiedRegion(int id)
        
        Add a region id to extract. Note: ids are 0-offset.
        """
        ...
    
    def ColorRegionsOff(self):
        """
        V.ColorRegionsOff()
        C++: virtual void ColorRegionsOff()
        
        Turn on/off the coloring of connected regions.
        """
        ...
    
    def ColorRegionsOn(self):
        """
        V.ColorRegionsOn()
        C++: virtual void ColorRegionsOn()
        
        Turn on/off the coloring of connected regions.
        """
        ...
    
    def DeleteSeed(self, p_int):
        """
        V.DeleteSeed(int)
        C++: void DeleteSeed(int id)
        
        Delete a seed id (point or cell id). Note: ids are 0-offset.
        """
        ...
    
    def DeleteSpecifiedRegion(self, p_int):
        """
        V.DeleteSpecifiedRegion(int)
        C++: void DeleteSpecifiedRegion(int id)
        
        Delete a region id to extract. Note: ids are 0-offset.
        """
        ...
    
    def FullScalarConnectivityOff(self):
        """
        V.FullScalarConnectivityOff()
        C++: virtual void FullScalarConnectivityOff()
        
        Turn on/off the use of Fully connected scalar connectivity. This
        is off by default. The flag is used only if ScalarConnectivity is
        on. If FullScalarConnectivity is ON, all the cell's points must
        lie in the scalar range specified for the cell to qualify as
        being connected. If FullScalarConnectivity is OFF, any one of the
        cell's points may lie in the user specified scalar range for the
        cell to qualify as being connected.
        """
        ...
    
    def FullScalarConnectivityOn(self):
        """
        V.FullScalarConnectivityOn()
        C++: virtual void FullScalarConnectivityOn()
        
        Turn on/off the use of Fully connected scalar connectivity. This
        is off by default. The flag is used only if ScalarConnectivity is
        on. If FullScalarConnectivity is ON, all the cell's points must
        lie in the scalar range specified for the cell to qualify as
        being connected. If FullScalarConnectivity is OFF, any one of the
        cell's points may lie in the user specified scalar range for the
        cell to qualify as being connected.
        """
        ...
    
    def GetClosestPoint(self):
        """
        V.GetClosestPoint() -> (float, float, float)
        C++: virtual double *GetClosestPoint()
        
        Use to specify x-y-z point coordinates when extracting the region
        closest to a specified point.
        """
        ...
    
    def GetColorRegions(self):
        """
        V.GetColorRegions() -> int
        C++: virtual vtkTypeBool GetColorRegions()
        
        Turn on/off the coloring of connected regions.
        """
        ...
    
    def GetExtractionMode(self):
        """
        V.GetExtractionMode() -> int
        C++: virtual int GetExtractionMode()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def GetExtractionModeAsString(self):
        """
        V.GetExtractionModeAsString() -> string
        C++: const char *GetExtractionModeAsString()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def GetExtractionModeMaxValue(self):
        """
        V.GetExtractionModeMaxValue() -> int
        C++: virtual int GetExtractionModeMaxValue()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def GetExtractionModeMinValue(self):
        """
        V.GetExtractionModeMinValue() -> int
        C++: virtual int GetExtractionModeMinValue()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def GetFullScalarConnectivity(self):
        """
        V.GetFullScalarConnectivity() -> int
        C++: virtual vtkTypeBool GetFullScalarConnectivity()
        
        Turn on/off the use of Fully connected scalar connectivity. This
        is off by default. The flag is used only if ScalarConnectivity is
        on. If FullScalarConnectivity is ON, all the cell's points must
        lie in the scalar range specified for the cell to qualify as
        being connected. If FullScalarConnectivity is OFF, any one of the
        cell's points may lie in the user specified scalar range for the
        cell to qualify as being connected.
        """
        ...
    
    def GetMarkVisitedPointIds(self):
        """
        V.GetMarkVisitedPointIds() -> int
        C++: virtual vtkTypeBool GetMarkVisitedPointIds()
        
        Specify whether to record input point ids that appear in the
        output connected components. It may be useful to extract the
        visited point ids for use by a downstream filter. Default is OFF.
        """
        ...
    
    def GetNumberOfExtractedRegions(self):
        """
        V.GetNumberOfExtractedRegions() -> int
        C++: int GetNumberOfExtractedRegions()
        
        Obtain the number of connected regions.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def GetRegionSizes(self):
        """
        V.GetRegionSizes() -> vtkIdTypeArray
        C++: virtual vtkIdTypeArray *GetRegionSizes()
        
        Obtain the array containing the region sizes of the extracted
        regions
        """
        ...
    
    def GetScalarConnectivity(self):
        """
        V.GetScalarConnectivity() -> int
        C++: virtual vtkTypeBool GetScalarConnectivity()
        
        Turn on/off connectivity based on scalar value. If on, cells are
        connected only if they share points AND one of the cells scalar
        values falls in the scalar range specified.
        """
        ...
    
    def GetScalarRange(self):
        """
        V.GetScalarRange() -> (float, float)
        C++: virtual double *GetScalarRange()
        
        Set the scalar range to use to extract cells based on scalar
        connectivity.
        """
        ...
    
    def GetVisitedPointIds(self):
        """
        V.GetVisitedPointIds() -> vtkIdList
        C++: virtual vtkIdList *GetVisitedPointIds()
        
        Get the input point ids that appear in the output connected
        components. This is non-empty only if MarkVisitedPointIds has
        been set.
        """
        ...
    
    def InitializeSeedList(self):
        """
        V.InitializeSeedList()
        C++: void InitializeSeedList()
        
        Initialize list of point ids/cell ids used to seed regions.
        """
        ...
    
    def InitializeSpecifiedRegionList(self):
        """
        V.InitializeSpecifiedRegionList()
        C++: void InitializeSpecifiedRegionList()
        
        Initialize list of region ids to extract.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MarkVisitedPointIdsOff(self):
        """
        V.MarkVisitedPointIdsOff()
        C++: virtual void MarkVisitedPointIdsOff()
        
        Specify whether to record input point ids that appear in the
        output connected components. It may be useful to extract the
        visited point ids for use by a downstream filter. Default is OFF.
        """
        ...
    
    def MarkVisitedPointIdsOn(self):
        """
        V.MarkVisitedPointIdsOn()
        C++: virtual void MarkVisitedPointIdsOn()
        
        Specify whether to record input point ids that appear in the
        output connected components. It may be useful to extract the
        visited point ids for use by a downstream filter. Default is OFF.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataConnectivityFilter
        C++: vtkPolyDataConnectivityFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataConnectivityFilter
        C++: static vtkPolyDataConnectivityFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def ScalarConnectivityOff(self):
        """
        V.ScalarConnectivityOff()
        C++: virtual void ScalarConnectivityOff()
        
        Turn on/off connectivity based on scalar value. If on, cells are
        connected only if they share points AND one of the cells scalar
        values falls in the scalar range specified.
        """
        ...
    
    def ScalarConnectivityOn(self):
        """
        V.ScalarConnectivityOn()
        C++: virtual void ScalarConnectivityOn()
        
        Turn on/off connectivity based on scalar value. If on, cells are
        connected only if they share points AND one of the cells scalar
        values falls in the scalar range specified.
        """
        ...
    
    def SetClosestPoint(self, p_float, p_float_1, p_float_2):
        """
        V.SetClosestPoint(float, float, float)
        C++: virtual void SetClosestPoint(double _arg1, double _arg2,
            double _arg3)
        V.SetClosestPoint((float, float, float))
        C++: virtual void SetClosestPoint(const double _arg[3])
        
        Use to specify x-y-z point coordinates when extracting the region
        closest to a specified point.
        """
        ...
    
    def SetColorRegions(self, p_int):
        """
        V.SetColorRegions(int)
        C++: virtual void SetColorRegions(vtkTypeBool _arg)
        
        Turn on/off the coloring of connected regions.
        """
        ...
    
    def SetExtractionMode(self, p_int):
        """
        V.SetExtractionMode(int)
        C++: virtual void SetExtractionMode(int _arg)
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def SetExtractionModeToAllRegions(self):
        """
        V.SetExtractionModeToAllRegions()
        C++: void SetExtractionModeToAllRegions()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def SetExtractionModeToCellSeededRegions(self):
        """
        V.SetExtractionModeToCellSeededRegions()
        C++: void SetExtractionModeToCellSeededRegions()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def SetExtractionModeToClosestPointRegion(self):
        """
        V.SetExtractionModeToClosestPointRegion()
        C++: void SetExtractionModeToClosestPointRegion()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def SetExtractionModeToLargestRegion(self):
        """
        V.SetExtractionModeToLargestRegion()
        C++: void SetExtractionModeToLargestRegion()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def SetExtractionModeToPointSeededRegions(self):
        """
        V.SetExtractionModeToPointSeededRegions()
        C++: void SetExtractionModeToPointSeededRegions()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def SetExtractionModeToSpecifiedRegions(self):
        """
        V.SetExtractionModeToSpecifiedRegions()
        C++: void SetExtractionModeToSpecifiedRegions()
        
        Control the extraction of connected surfaces.
        """
        ...
    
    def SetFullScalarConnectivity(self, p_int):
        """
        V.SetFullScalarConnectivity(int)
        C++: virtual void SetFullScalarConnectivity(vtkTypeBool _arg)
        
        Turn on/off the use of Fully connected scalar connectivity. This
        is off by default. The flag is used only if ScalarConnectivity is
        on. If FullScalarConnectivity is ON, all the cell's points must
        lie in the scalar range specified for the cell to qualify as
        being connected. If FullScalarConnectivity is OFF, any one of the
        cell's points may lie in the user specified scalar range for the
        cell to qualify as being connected.
        """
        ...
    
    def SetMarkVisitedPointIds(self, p_int):
        """
        V.SetMarkVisitedPointIds(int)
        C++: virtual void SetMarkVisitedPointIds(vtkTypeBool _arg)
        
        Specify whether to record input point ids that appear in the
        output connected components. It may be useful to extract the
        visited point ids for use by a downstream filter. Default is OFF.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def SetScalarConnectivity(self, p_int):
        """
        V.SetScalarConnectivity(int)
        C++: virtual void SetScalarConnectivity(vtkTypeBool _arg)
        
        Turn on/off connectivity based on scalar value. If on, cells are
        connected only if they share points AND one of the cells scalar
        values falls in the scalar range specified.
        """
        ...
    
    def SetScalarRange(self, p_float, p_float_1):
        """
        V.SetScalarRange(float, float)
        C++: virtual void SetScalarRange(double _arg1, double _arg2)
        V.SetScalarRange((float, float))
        C++: void SetScalarRange(const double _arg[2])
        
        Set the scalar range to use to extract cells based on scalar
        connectivity.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


