"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMaskFields(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkMaskFields - Allow control of which fields get passed to the output
    
    Superclass: vtkDataSetAlgorithm
    
    vtkMaskFields is used to mark which fields in the input dataset get
    copied to the output.  The output will contain only those fields
    marked as on by the filter.
    
    @sa
    vtkFieldData vtkDataSet vtkDataObjectToDataSetFilter
    vtkDataSetAttributes vtkDataArray vtkRearrangeFields vtkSplitField
    vtkMergeFields vtkAssignAttribute
    """
    def CopyAllOff(self):
        """
        V.CopyAllOff()
        C++: virtual void CopyAllOff()
        
        Turn off copying of all data. During the copying/passing, the
        following rules are followed for each array:
        1. If the copy flag for an array is set (on or off), it is
           applied This overrides rule 2.
        2. If CopyAllOn is set, copy the array. If CopyAllOff is set, do
           not copy the array
        """
        ...
    
    def CopyAllOn(self):
        """
        V.CopyAllOn()
        C++: virtual void CopyAllOn()
        
        Turn on copying of all data. During the copying/passing, the
        following rules are followed for each array:
        1. If the copy flag for an array is set (on or off), it is
           applied This overrides rule 2.
        2. If CopyAllOn is set, copy the array. If CopyAllOff is set, do
           not copy the array
        """
        ...
    
    def CopyAttributeOff(self, p_int, p_int_1):
        """
        V.CopyAttributeOff(int, int)
        C++: void CopyAttributeOff(int attributeLocation,
            int attributeType)
        V.CopyAttributeOff(string, string)
        C++: void CopyAttributeOff(const char *attributeLoc,
            const char *attributeType)
        """
        ...
    
    def CopyAttributeOn(self, p_int, p_int_1):
        """
        V.CopyAttributeOn(int, int)
        C++: void CopyAttributeOn(int attributeLocation,
            int attributeType)
        V.CopyAttributeOn(string, string)
        C++: void CopyAttributeOn(const char *attributeLoc,
            const char *attributeType)
        
        Turn on/off the copying of the attribute or specified by
        vtkDataSetAttributes:AttributeTypes. During the copying/passing,
        the following rules are followed for each array:
        1. If the copy flag for an array is set (on or off), it is
           applied This overrides rule 2.
        2. If CopyAllOn is set, copy the array. If CopyAllOff is set, do
           not copy the array An attribute type and a location must be
           specified. For example:
         maskFields->CopyAttributeOff(vtkMaskFields::POINT_DATA, vtkDataSetAttributes::SCALARS);
          causes the scalars on the input point data to not get copied to
        the output.
        """
        ...
    
    def CopyAttributesOff(self):
        """
        V.CopyAttributesOff()
        C++: void CopyAttributesOff()
        """
        ...
    
    def CopyAttributesOn(self):
        """
        V.CopyAttributesOn()
        C++: void CopyAttributesOn()
        """
        ...
    
    def CopyFieldOff(self, p_int, string):
        """
        V.CopyFieldOff(int, string)
        C++: void CopyFieldOff(int fieldLocation, const char *name)
        V.CopyFieldOff(string, string)
        C++: void CopyFieldOff(const char *fieldLoc, const char *name)
        """
        ...
    
    def CopyFieldOn(self, p_int, string):
        """
        V.CopyFieldOn(int, string)
        C++: void CopyFieldOn(int fieldLocation, const char *name)
        V.CopyFieldOn(string, string)
        C++: void CopyFieldOn(const char *fieldLoc, const char *name)
        
        Turn on/off the copying of the field or specified by name. During
        the copying/passing, the following rules are followed for each
        array:
        1. If the copy flag for an array is set (on or off), it is
           applied This overrides rule 2.
        2. If CopyAllOn is set, copy the array. If CopyAllOff is set, do
           not copy the array A field name and a location must be
           specified. For example:
         maskFields->CopyFieldOff(vtkMaskFields::CELL_DATA, "foo");
          causes the field "foo" on the input cell data to not get copied
           to the output.
        """
        ...
    
    def CopyFieldsOff(self):
        """
        V.CopyFieldsOff()
        C++: void CopyFieldsOff()
        
        Convenience methods which operate on all field data or attribute
        data.  More specific than CopyAllOn or CopyAllOff
        """
        ...
    
    def CopyFieldsOn(self):
        """
        V.CopyFieldsOn()
        C++: void CopyFieldsOn()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMaskFields
        C++: vtkMaskFields *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMaskFields
        C++: static vtkMaskFields *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CELL_DATA = ...
    FieldLocation = ...
    OBJECT_DATA = ...
    POINT_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


