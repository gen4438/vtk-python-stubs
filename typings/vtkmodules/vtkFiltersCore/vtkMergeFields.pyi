"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMergeFields(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkMergeFields - Merge multiple fields into one.
    
    Superclass: vtkDataSetAlgorithm
    
    vtkMergeFields is used to merge multiple field into one. The new
    field is put in the same field data as the original field. For
    example
     mf->SetOutputField("foo", vtkMergeFields::POINT_DATA);
     mf->SetNumberOfComponents(2);
     mf->Merge(0, "array1", 1);
     mf->Merge(1, "array2", 0);
      will tell vtkMergeFields to use the 2nd component of array1 and the
    1st component of array2 to create a 2 component field called foo.
    
    @sa
    vtkFieldData vtkDataSet vtkDataObjectToDataSetFilter
    vtkDataSetAttributes vtkDataArray vtkRearrangeFields vtkSplitField
    vtkAssignAttribute
    """
    def GetNumberOfComponents(self):
        """
        V.GetNumberOfComponents() -> int
        C++: virtual int GetNumberOfComponents()
        
        Set the number of the components in the output field. This has to
        be set before execution. Default value is 0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Merge(self, p_int, string, p_int_1):
        """
        V.Merge(int, string, int)
        C++: void Merge(int component, const char *arrayName,
            int sourceComp)
        
        Add a component (arrayName,sourceComp) to the output field.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMergeFields
        C++: vtkMergeFields *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMergeFields
        C++: static vtkMergeFields *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfComponents(self, p_int):
        """
        V.SetNumberOfComponents(int)
        C++: virtual void SetNumberOfComponents(int _arg)
        
        Set the number of the components in the output field. This has to
        be set before execution. Default value is 0.
        """
        ...
    
    def SetOutputField(self, string, p_int):
        """
        V.SetOutputField(string, int)
        C++: void SetOutputField(const char *name, int fieldLoc)
        V.SetOutputField(string, string)
        C++: void SetOutputField(const char *name, const char *fieldLoc)
        
        The output field will have the given name and it will be in
        fieldLoc (the input fields also have to be in fieldLoc).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CELL_DATA = ...
    DATA_OBJECT = ...
    FieldLocations = ...
    POINT_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


