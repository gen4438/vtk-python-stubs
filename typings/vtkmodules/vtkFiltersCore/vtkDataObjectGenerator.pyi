"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDataObjectGenerator(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkDataObjectGenerator - produces simple (composite or atomic) data
    sets for testing.
    
    Superclass: vtkDataObjectAlgorithm
    
    vtkDataObjectGenerator parses a string and produces dataobjects from
    the dataobject template names it sees in the string. For example, if
    the string contains "ID1" the generator will create a vtkImageData.
    "UF1", "RG1", "SG1", "PD1", and "UG1" will produce vtkUniformGrid,
    vtkRectilinearGrid, vtkStructuredGrid, vtkPolyData and
    vtkUnstructuredGrid respectively. "PD2" will produce an alternate
    vtkPolyData. You can compose composite datasets from the atomic ones
    listed above by placing them within one of the two composite dataset
    identifiers
    - "MB{}" or "HB[]". "MB{ ID1 PD1 MB{} }" for example will create a
      vtkMultiBlockDataSet consisting of three blocks: image data, poly
      data, multi-block (empty). Hierarchical Box data sets additionally
      require the notion of groups, declared within "()" braces, to
      specify AMR depth. "HB[ (UF1)(UF1)(UF1) ]" will create a
      vtkHierarchicalBoxDataSet representing an octree that is three
      levels deep, in which the firstmost cell in each level is refined.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetProgram(self):
        """
        V.GetProgram() -> string
        C++: virtual char *GetProgram()
        
        The string that will be parsed to specify a dataobject structure.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataObjectGenerator
        C++: vtkDataObjectGenerator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataObjectGenerator
        C++: static vtkDataObjectGenerator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetProgram(self, string):
        """
        V.SetProgram(string)
        C++: virtual void SetProgram(const char *_arg)
        
        The string that will be parsed to specify a dataobject structure.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


