"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkStaticCleanPolyData(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkStaticCleanPolyData - merge duplicate points, and/or remove unused
    points and/or remove degenerate cells
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkStaticCleanPolyData is a filter that takes polygonal data as input
    and generates polygonal data as output. vtkStaticCleanPolyData will
    merge duplicate points (within specified tolerance), and if enabled,
    transform degenerate cells into appropriate forms (for example, a
    triangle is converted into a line if two points of triangle are
    merged).
    
    Conversion of degenerate cells is controlled by the flags
    ConvertLinesToPoints, ConvertPolysToLines, ConvertStripsToPolys which
    act cumulatively such that a degenerate strip may become a poly. The
    full set is Line with 1 points -> Vert (if ConvertLinesToPoints) Poly
    with 2 points -> Line (if ConvertPolysToLines) Poly with 1 points ->
    Vert (if ConvertPolysToLines && ConvertLinesToPoints) Strp with 3
    points -> Poly (if ConvertStripsToPolys) Strp with 2 points -> Line
    (if ConvertStripsToPolys && ConvertPolysToLines) Strp with 1 points
    -> Vert (if ConvertStripsToPolys && ConvertPolysToLines
      && ConvertLinesToPoints)
    
    Internally this class uses vtkStaticPointLocator, which is a
    threaded, and much faster locator than the incremental locators that
    vtkCleanPolyData uses. Note because of these and other differences,
    the output of this filter may be different than vtkCleanPolyData.
    
    Note that if you want to remove points that aren't used by any cells
    (i.e., disable point merging), then use vtkCleanPolyData.
    
    @warning
    Merging points can alter topology, including introducing non-manifold
    forms. The tolerance should be chosen carefully to avoid these
    problems. Large tolerances (of size > locator bin width) may generate
    poor results.
    
    @warning
    Merging close points with tolerance >0.0 is inherently an unstable
    problem because the results are order dependent (e.g., the order in
    which points are processed). When parallel computing, the order of
    processing points is unpredictable, hence the results may vary
    between runs.
    
    @warning
    If you wish to operate on a set of coordinates that has no cells, you
    must add a vtkPolyVertex cell with all of the points to the PolyData
    (or use a vtkVertexGlyphFilter) before using the
    vtkStaticCleanPolyData filter.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkCleanPolyData
    """
    def ConvertLinesToPointsOff(self):
        """
        V.ConvertLinesToPointsOff()
        C++: virtual void ConvertLinesToPointsOff()
        
        Turn on/off conversion of degenerate lines to points. Default is
        On.
        """
        ...
    
    def ConvertLinesToPointsOn(self):
        """
        V.ConvertLinesToPointsOn()
        C++: virtual void ConvertLinesToPointsOn()
        
        Turn on/off conversion of degenerate lines to points. Default is
        On.
        """
        ...
    
    def ConvertPolysToLinesOff(self):
        """
        V.ConvertPolysToLinesOff()
        C++: virtual void ConvertPolysToLinesOff()
        
        Turn on/off conversion of degenerate polys to lines. Default is
        On.
        """
        ...
    
    def ConvertPolysToLinesOn(self):
        """
        V.ConvertPolysToLinesOn()
        C++: virtual void ConvertPolysToLinesOn()
        
        Turn on/off conversion of degenerate polys to lines. Default is
        On.
        """
        ...
    
    def ConvertStripsToPolysOff(self):
        """
        V.ConvertStripsToPolysOff()
        C++: virtual void ConvertStripsToPolysOff()
        
        Turn on/off conversion of degenerate strips to polys. Default is
        On.
        """
        ...
    
    def ConvertStripsToPolysOn(self):
        """
        V.ConvertStripsToPolysOn()
        C++: virtual void ConvertStripsToPolysOn()
        
        Turn on/off conversion of degenerate strips to polys. Default is
        On.
        """
        ...
    
    def GetAbsoluteTolerance(self):
        """
        V.GetAbsoluteTolerance() -> float
        C++: virtual double GetAbsoluteTolerance()
        
        Specify tolerance in absolute terms. Default is 1.0.
        """
        ...
    
    def GetAbsoluteToleranceMaxValue(self):
        """
        V.GetAbsoluteToleranceMaxValue() -> float
        C++: virtual double GetAbsoluteToleranceMaxValue()
        
        Specify tolerance in absolute terms. Default is 1.0.
        """
        ...
    
    def GetAbsoluteToleranceMinValue(self):
        """
        V.GetAbsoluteToleranceMinValue() -> float
        C++: virtual double GetAbsoluteToleranceMinValue()
        
        Specify tolerance in absolute terms. Default is 1.0.
        """
        ...
    
    def GetConvertLinesToPoints(self):
        """
        V.GetConvertLinesToPoints() -> int
        C++: virtual vtkTypeBool GetConvertLinesToPoints()
        
        Turn on/off conversion of degenerate lines to points. Default is
        On.
        """
        ...
    
    def GetConvertPolysToLines(self):
        """
        V.GetConvertPolysToLines() -> int
        C++: virtual vtkTypeBool GetConvertPolysToLines()
        
        Turn on/off conversion of degenerate polys to lines. Default is
        On.
        """
        ...
    
    def GetConvertStripsToPolys(self):
        """
        V.GetConvertStripsToPolys() -> int
        C++: virtual vtkTypeBool GetConvertStripsToPolys()
        
        Turn on/off conversion of degenerate strips to polys. Default is
        On.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkStaticPointLocator
        C++: vtkStaticPointLocator *GetLocator()
        
        Retrieve the internal locator to manually configure it, for
        example specifying the number of points per bucket. This method
        is generally used for debugging or testing purposes.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the MTime of this object also considering the locator.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods to instantiate, print, and provide type
        information.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods to instantiate, print, and provide type
        information.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def GetPieceInvariant(self):
        """
        V.GetPieceInvariant() -> int
        C++: virtual vtkTypeBool GetPieceInvariant()
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        Specify tolerance in terms of fraction of bounding box length. 
        Default is 0.0. This takes effect only if ToleranceIsAbsolute is
        false.
        """
        ...
    
    def GetToleranceIsAbsolute(self):
        """
        V.GetToleranceIsAbsolute() -> int
        C++: virtual vtkTypeBool GetToleranceIsAbsolute()
        
        By default ToleranceIsAbsolute is false and Tolerance is a
        fraction of Bounding box diagonal, if true, AbsoluteTolerance is
        used when adding points to locator (merging)
        """
        ...
    
    def GetToleranceMaxValue(self):
        """
        V.GetToleranceMaxValue() -> float
        C++: virtual double GetToleranceMaxValue()
        
        Specify tolerance in terms of fraction of bounding box length. 
        Default is 0.0. This takes effect only if ToleranceIsAbsolute is
        false.
        """
        ...
    
    def GetToleranceMinValue(self):
        """
        V.GetToleranceMinValue() -> float
        C++: virtual double GetToleranceMinValue()
        
        Specify tolerance in terms of fraction of bounding box length. 
        Default is 0.0. This takes effect only if ToleranceIsAbsolute is
        false.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods to instantiate, print, and provide type
        information.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods to instantiate, print, and provide type
        information.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStaticCleanPolyData
        C++: vtkStaticCleanPolyData *NewInstance()
        
        Standard methods to instantiate, print, and provide type
        information.
        """
        ...
    
    def PieceInvariantOff(self):
        """
        V.PieceInvariantOff()
        C++: virtual void PieceInvariantOff()
        """
        ...
    
    def PieceInvariantOn(self):
        """
        V.PieceInvariantOn()
        C++: virtual void PieceInvariantOn()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStaticCleanPolyData
        C++: static vtkStaticCleanPolyData *SafeDownCast(vtkObjectBase *o)
        
        Standard methods to instantiate, print, and provide type
        information.
        """
        ...
    
    def SetAbsoluteTolerance(self, p_float):
        """
        V.SetAbsoluteTolerance(float)
        C++: virtual void SetAbsoluteTolerance(double _arg)
        
        Specify tolerance in absolute terms. Default is 1.0.
        """
        ...
    
    def SetConvertLinesToPoints(self, p_int):
        """
        V.SetConvertLinesToPoints(int)
        C++: virtual void SetConvertLinesToPoints(vtkTypeBool _arg)
        
        Turn on/off conversion of degenerate lines to points. Default is
        On.
        """
        ...
    
    def SetConvertPolysToLines(self, p_int):
        """
        V.SetConvertPolysToLines(int)
        C++: virtual void SetConvertPolysToLines(vtkTypeBool _arg)
        
        Turn on/off conversion of degenerate polys to lines. Default is
        On.
        """
        ...
    
    def SetConvertStripsToPolys(self, p_int):
        """
        V.SetConvertStripsToPolys(int)
        C++: virtual void SetConvertStripsToPolys(vtkTypeBool _arg)
        
        Turn on/off conversion of degenerate strips to polys. Default is
        On.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def SetPieceInvariant(self, p_int):
        """
        V.SetPieceInvariant(int)
        C++: virtual void SetPieceInvariant(vtkTypeBool _arg)
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        Specify tolerance in terms of fraction of bounding box length. 
        Default is 0.0. This takes effect only if ToleranceIsAbsolute is
        false.
        """
        ...
    
    def SetToleranceIsAbsolute(self, p_int):
        """
        V.SetToleranceIsAbsolute(int)
        C++: virtual void SetToleranceIsAbsolute(vtkTypeBool _arg)
        
        By default ToleranceIsAbsolute is false and Tolerance is a
        fraction of Bounding box diagonal, if true, AbsoluteTolerance is
        used when adding points to locator (merging)
        """
        ...
    
    def ToleranceIsAbsoluteOff(self):
        """
        V.ToleranceIsAbsoluteOff()
        C++: virtual void ToleranceIsAbsoluteOff()
        
        By default ToleranceIsAbsolute is false and Tolerance is a
        fraction of Bounding box diagonal, if true, AbsoluteTolerance is
        used when adding points to locator (merging)
        """
        ...
    
    def ToleranceIsAbsoluteOn(self):
        """
        V.ToleranceIsAbsoluteOn()
        C++: virtual void ToleranceIsAbsoluteOn()
        
        By default ToleranceIsAbsolute is false and Tolerance is a
        fraction of Bounding box diagonal, if true, AbsoluteTolerance is
        used when adding points to locator (merging)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


