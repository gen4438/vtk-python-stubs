"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMergeFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkMergeFilter - extract separate components of data from different
    datasets
    
    Superclass: vtkDataSetAlgorithm
    
    vtkMergeFilter is a filter that extracts separate components of data
    from different datasets and merges them into a single dataset. The
    output from this filter is of the same type as the input (i.e.,
    vtkDataSet.) It treats both cell and point data set attributes.
    """
    def AddField(self, string, vtkDataSet):
        """
        V.AddField(string, vtkDataSet)
        C++: void AddField(const char *name, vtkDataSet *input)
        
        Set the object from which to extract a field and the name of the
        field. Note that this does not create pipeline connectivity.
        """
        ...
    
    def GetGeometry(self):
        """
        V.GetGeometry() -> vtkDataSet
        C++: vtkDataSet *GetGeometry()
        
        Specify object from which to extract geometry information. Note
        that this method does not connect the pipeline. The algorithm
        will work on the input data as it is without updating the
        producer of the data. See SetGeometryConnection for connecting
        the pipeline.
        """
        ...
    
    def GetNormals(self):
        """
        V.GetNormals() -> vtkDataSet
        C++: vtkDataSet *GetNormals()
        
        Set / get the object from which to extract normal information.
        Note that this method does not connect the pipeline. The
        algorithm will work on the input data as it is without updating
        the producer of the data. See SetNormalsConnection for connecting
        the pipeline.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalars(self):
        """
        V.GetScalars() -> vtkDataSet
        C++: vtkDataSet *GetScalars()
        
        Specify object from which to extract scalar information. Note
        that this method does not connect the pipeline. The algorithm
        will work on the input data as it is without updating the
        producer of the data. See SetScalarConnection for connecting the
        pipeline.
        """
        ...
    
    def GetTCoords(self):
        """
        V.GetTCoords() -> vtkDataSet
        C++: vtkDataSet *GetTCoords()
        
        Set / get the object from which to extract texture coordinates
        information. Note that this method does not connect the pipeline.
        The algorithm will work on the input data as it is without
        updating the producer of the data. See SetTCoordsConnection for
        connecting the pipeline.
        """
        ...
    
    def GetTensors(self):
        """
        V.GetTensors() -> vtkDataSet
        C++: vtkDataSet *GetTensors()
        
        Set / get the object from which to extract tensor data. Note that
        this method does not connect the pipeline. The algorithm will
        work on the input data as it is without updating the producer of
        the data. See SetTensorsConnection for connecting the pipeline.
        """
        ...
    
    def GetVectors(self):
        """
        V.GetVectors() -> vtkDataSet
        C++: vtkDataSet *GetVectors()
        
        Set / get the object from which to extract vector information.
        Note that this method does not connect the pipeline. The
        algorithm will work on the input data as it is without updating
        the producer of the data. See SetVectorsConnection for connecting
        the pipeline.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMergeFilter
        C++: vtkMergeFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMergeFilter
        C++: static vtkMergeFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGeometryConnection(self, vtkAlgorithmOutput):
        """
        V.SetGeometryConnection(vtkAlgorithmOutput)
        C++: void SetGeometryConnection(vtkAlgorithmOutput *algOutput)
        
        Specify object from which to extract geometry information.
        Equivalent to SetInputConnection(0, algOutput)
        """
        ...
    
    def SetGeometryInputData(self, vtkDataSet):
        """
        V.SetGeometryInputData(vtkDataSet)
        C++: void SetGeometryInputData(vtkDataSet *input)
        
        Specify object from which to extract geometry information. Note
        that this method does not connect the pipeline. The algorithm
        will work on the input data as it is without updating the
        producer of the data. See SetGeometryConnection for connecting
        the pipeline.
        """
        ...
    
    def SetNormalsConnection(self, vtkAlgorithmOutput):
        """
        V.SetNormalsConnection(vtkAlgorithmOutput)
        C++: void SetNormalsConnection(vtkAlgorithmOutput *algOutput)
        
        Set  the connection from which to extract normal information.
        Equivalent to SetInputConnection(3, algOutput)
        """
        ...
    
    def SetNormalsData(self, vtkDataSet):
        """
        V.SetNormalsData(vtkDataSet)
        C++: void SetNormalsData(vtkDataSet *)
        
        Set / get the object from which to extract normal information.
        Note that this method does not connect the pipeline. The
        algorithm will work on the input data as it is without updating
        the producer of the data. See SetNormalsConnection for connecting
        the pipeline.
        """
        ...
    
    def SetScalarsConnection(self, vtkAlgorithmOutput):
        """
        V.SetScalarsConnection(vtkAlgorithmOutput)
        C++: void SetScalarsConnection(vtkAlgorithmOutput *algOutput)
        
        Specify object from which to extract scalar information.
        Equivalent to SetInputConnection(1, algOutput)
        """
        ...
    
    def SetScalarsData(self, vtkDataSet):
        """
        V.SetScalarsData(vtkDataSet)
        C++: void SetScalarsData(vtkDataSet *)
        
        Specify object from which to extract scalar information. Note
        that this method does not connect the pipeline. The algorithm
        will work on the input data as it is without updating the
        producer of the data. See SetScalarConnection for connecting the
        pipeline.
        """
        ...
    
    def SetTCoordsConnection(self, vtkAlgorithmOutput):
        """
        V.SetTCoordsConnection(vtkAlgorithmOutput)
        C++: void SetTCoordsConnection(vtkAlgorithmOutput *algOutput)
        
        Set the connection from which to extract texture coordinates
        information. Equivalent to SetInputConnection(4, algOutput)
        """
        ...
    
    def SetTCoordsData(self, vtkDataSet):
        """
        V.SetTCoordsData(vtkDataSet)
        C++: void SetTCoordsData(vtkDataSet *)
        
        Set / get the object from which to extract texture coordinates
        information. Note that this method does not connect the pipeline.
        The algorithm will work on the input data as it is without
        updating the producer of the data. See SetTCoordsConnection for
        connecting the pipeline.
        """
        ...
    
    def SetTensorsConnection(self, vtkAlgorithmOutput):
        """
        V.SetTensorsConnection(vtkAlgorithmOutput)
        C++: void SetTensorsConnection(vtkAlgorithmOutput *algOutput)
        
        Set the connection from which to extract tensor data. Equivalent
        to SetInputConnection(5, algOutput)
        """
        ...
    
    def SetTensorsData(self, vtkDataSet):
        """
        V.SetTensorsData(vtkDataSet)
        C++: void SetTensorsData(vtkDataSet *)
        
        Set / get the object from which to extract tensor data. Note that
        this method does not connect the pipeline. The algorithm will
        work on the input data as it is without updating the producer of
        the data. See SetTensorsConnection for connecting the pipeline.
        """
        ...
    
    def SetVectorsConnection(self, vtkAlgorithmOutput):
        """
        V.SetVectorsConnection(vtkAlgorithmOutput)
        C++: void SetVectorsConnection(vtkAlgorithmOutput *algOutput)
        
        Set the connection from which to extract vector information.
        Equivalent to SetInputConnection(2, algOutput)
        """
        ...
    
    def SetVectorsData(self, vtkDataSet):
        """
        V.SetVectorsData(vtkDataSet)
        C++: void SetVectorsData(vtkDataSet *)
        
        Set / get the object from which to extract vector information.
        Note that this method does not connect the pipeline. The
        algorithm will work on the input data as it is without updating
        the producer of the data. See SetVectorsConnection for connecting
        the pipeline.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


