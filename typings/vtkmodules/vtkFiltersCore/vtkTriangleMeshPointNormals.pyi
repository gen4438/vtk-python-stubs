"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTriangleMeshPointNormals(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkTriangleMeshPointNormals - compute point normals for triangle mesh
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkTriangleMeshPointNormals is a filter that computes point normals
    for a triangle mesh to enable high-performance rendering. It is a
    fast-path version of the vtkPolyDataNormals filter in order to be
    able to compute normals for triangle meshes deforming rapidly.
    
    The computed normals (a vtkFloatArray) are set to be the active
    normals (using SetNormals()) of the PointData. The array name is
    "Normals", so they can be retrieved either with
    `output->GetPointData()->GetNormals()` or with
    `output->GetPointData()->GetArray("Normals")`.
    
    The algorithm works by determining normals for each triangle and
    adding these vectors to the triangle points. The resulting vectors at
    each point are then normalized.
    
    @warning
    Normals are computed only for triangular polygons: the filter can not
    handle meshes with other types of cells (Verts, Lines, Strips) or
    Polys with the wrong number of components (not equal to 3).
    
    @warning
    Unlike the vtkPolyDataNormals filter, this filter does not apply any
    splitting nor checks for cell orientation consistency in order to
    speed up the computation. Moreover, normals are not calculated the
    exact same way as the vtkPolyDataNormals filter since the triangle
    normals are not normalized before being added to the point normals:
    those cell normals are therefore weighted by the triangle area. This
    is not more nor less correct than normalizing them before adding
    them, but it is much faster.
    
    @sa
    If you do not need to do high-performance rendering, you should use
    vtkPolyDataNormals if your mesh is not only triangular, if you need
    to split vertices at sharp edges, or if you need to check that the
    cell orientations are consistent to flip inverted normals.
    
    @sa
    If you still need high-performance rendering but your input polydata
    is not a triangular mesh and/or does not have consistent cell
    orientations (causing inverted normals), you can still use this
    filter by using vtkTriangleFilter and/or vtkCleanPolyData
    respectively beforehand. If your mesh is deforming rapidly, you
    should be deforming the output mesh of those two filters instead in
    order to only run them once.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTriangleMeshPointNormals
        C++: vtkTriangleMeshPointNormals *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTriangleMeshPointNormals
        C++: static vtkTriangleMeshPointNormals *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


