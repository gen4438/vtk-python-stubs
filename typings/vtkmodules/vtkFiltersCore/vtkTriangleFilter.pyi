"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTriangleFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkTriangleFilter - convert input polygons and strips to triangles
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkTriangleFilter generates triangles from input polygons and
    triangle strips.  It also generates line segments from polylines
    unless PassLines is off, and generates individual vertex cells from
    vtkVertex point lists unless PassVerts is off.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPassLines(self):
        """
        V.GetPassLines() -> int
        C++: virtual vtkTypeBool GetPassLines()
        
        Turn on/off passing lines through filter (default: on). If this
        is on, then the input polylines will be broken into line
        segments.  If it is off, then the input lines will be ignored and
        the output will have no lines.
        """
        ...
    
    def GetPassVerts(self):
        """
        V.GetPassVerts() -> int
        C++: virtual vtkTypeBool GetPassVerts()
        
        Turn on/off passing vertices through filter (default: on). If
        this is on, then the input vertex cells will be broken into
        individual vertex cells (one point per cell).  If it is off, the
        input vertex cells will be ignored.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTriangleFilter
        C++: vtkTriangleFilter *NewInstance()
        """
        ...
    
    def PassLinesOff(self):
        """
        V.PassLinesOff()
        C++: virtual void PassLinesOff()
        
        Turn on/off passing lines through filter (default: on). If this
        is on, then the input polylines will be broken into line
        segments.  If it is off, then the input lines will be ignored and
        the output will have no lines.
        """
        ...
    
    def PassLinesOn(self):
        """
        V.PassLinesOn()
        C++: virtual void PassLinesOn()
        
        Turn on/off passing lines through filter (default: on). If this
        is on, then the input polylines will be broken into line
        segments.  If it is off, then the input lines will be ignored and
        the output will have no lines.
        """
        ...
    
    def PassVertsOff(self):
        """
        V.PassVertsOff()
        C++: virtual void PassVertsOff()
        
        Turn on/off passing vertices through filter (default: on). If
        this is on, then the input vertex cells will be broken into
        individual vertex cells (one point per cell).  If it is off, the
        input vertex cells will be ignored.
        """
        ...
    
    def PassVertsOn(self):
        """
        V.PassVertsOn()
        C++: virtual void PassVertsOn()
        
        Turn on/off passing vertices through filter (default: on). If
        this is on, then the input vertex cells will be broken into
        individual vertex cells (one point per cell).  If it is off, the
        input vertex cells will be ignored.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTriangleFilter
        C++: static vtkTriangleFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPassLines(self, p_int):
        """
        V.SetPassLines(int)
        C++: virtual void SetPassLines(vtkTypeBool _arg)
        
        Turn on/off passing lines through filter (default: on). If this
        is on, then the input polylines will be broken into line
        segments.  If it is off, then the input lines will be ignored and
        the output will have no lines.
        """
        ...
    
    def SetPassVerts(self, p_int):
        """
        V.SetPassVerts(int)
        C++: virtual void SetPassVerts(vtkTypeBool _arg)
        
        Turn on/off passing vertices through filter (default: on). If
        this is on, then the input vertex cells will be broken into
        individual vertex cells (one point per cell).  If it is off, the
        input vertex cells will be ignored.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


