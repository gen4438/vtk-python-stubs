"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkHull(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkHull - produce an n-sided convex hull
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkHull is a filter which will produce an n-sided convex hull given a
    set of n planes. (The convex hull bounds the input polygonal data.)
    The hull is generated by squeezing the planes towards the input
    vtkPolyData, until the planes just touch the vtkPolyData. Then, the
    resulting planes are used to generate a polyhedron (i.e., hull) that
    is represented by triangles.
    
    The n planes can be defined in a number of ways including 1) manually
    specifying each plane; 2) choosing the six face planes of the input's
    bounding box; 3) choosing the eight vertex planes of the input's
    bounding box; 4) choosing the twelve edge planes of the input's
    bounding box; and/or 5) using a recursively subdivided octahedron.
    Note that when specifying planes, the plane normals should point
    outside of the convex region.
    
    The output of this filter can be used in combination with vtkLODActor
    to represent a levels-of-detail in the LOD hierarchy. Another use of
    this class is to manually specify the planes, and then generate the
    polyhedron from the planes (without squeezing the planes towards the
    input). The method GenerateHull() is used to do this.
    """
    def AddCubeEdgePlanes(self):
        """
        V.AddCubeEdgePlanes()
        C++: void AddCubeEdgePlanes()
        
        Add the 12 planes that represent the edges of a cube - halfway
        between the two connecting face planes - (1,1,0), (-1,-1,0),
        (-1,1,0), (1,-1,0), (0,1,1), (0,-1,-1), (0,1,-1), (0,-1,1),
        (1,0,1), (-1,0,-1), (1,0,-1), (-1,0,1)
        """
        ...
    
    def AddCubeFacePlanes(self):
        """
        V.AddCubeFacePlanes()
        C++: void AddCubeFacePlanes()
        
        Add the six planes that make up the faces of a cube - (1,0,0),
        (-1, 0, 0), (0,1,0), (0,-1,0), (0,0,1), (0,0,-1)
        """
        ...
    
    def AddCubeVertexPlanes(self):
        """
        V.AddCubeVertexPlanes()
        C++: void AddCubeVertexPlanes()
        
        Add the 8 planes that represent the vertices of a cube - the
        combination of the three face planes connecting to a vertex -
        (1,1,1), (1,1,-1), (1,-1,1), (1,-1,1), (-1,1,1), (-1,1,-1),
        (-1,-1,1), (-1,-1-1).
        """
        ...
    
    def AddPlane(self, p_float, p_float_1, p_float_2):
        """
        V.AddPlane(float, float, float) -> int
        C++: int AddPlane(double A, double B, double C)
        V.AddPlane([float, float, float]) -> int
        C++: int AddPlane(double plane[3])
        V.AddPlane(float, float, float, float) -> int
        C++: int AddPlane(double A, double B, double C, double D)
        V.AddPlane([float, float, float], float) -> int
        C++: int AddPlane(double plane[3], double D)
        
        Add a plane to the current set of planes. It will be added at the
        end of the list, and an index that can later be used to set this
        plane's normal will be returned. The values A, B, C are from the
        plane equation Ax + By + Cz + D = 0. This vector does not have to
        have unit length (but it must have a non-zero length!). If a
        value 0 > i >= -NumberOfPlanes is returned, then the plane is
        parallel with a previously inserted plane, and |-i-1| is the
        index of the plane that was previously inserted. If a value i <
        -NumberOfPlanes is returned, then the plane normal is zero
        length.
        """
        ...
    
    def AddRecursiveSpherePlanes(self, p_int):
        """
        V.AddRecursiveSpherePlanes(int)
        C++: void AddRecursiveSpherePlanes(int level)
        
        Add the planes that represent the normals of the vertices of a
        polygonal sphere formed by recursively subdividing the triangles
        in an octahedron.  Each triangle is subdivided by connecting the
        midpoints of the edges thus forming 4 smaller triangles. The
        level indicates how many subdivisions to do with a level of 0
        used to add the 6 planes from the original octahedron, level 1
        will add 18 planes, and so on.
        """
        ...
    
    def GenerateHull(self, vtkPolyData, *float):
        """
        V.GenerateHull(vtkPolyData, [float, ...])
        C++: void GenerateHull(vtkPolyData *pd, double *bounds)
        V.GenerateHull(vtkPolyData, float, float, float, float, float,
            float)
        C++: void GenerateHull(vtkPolyData *pd, double xmin, double xmax,
            double ymin, double ymax, double zmin, double zmax)
        
        A special method that is used to generate a polyhedron directly
        from a set of n planes. The planes that are supplied by the user
        are not squeezed towards the input data (in fact the user need
        not specify an input). To use this method, you must provide an
        instance of vtkPolyData into which the points and cells defining
        the polyhedron are placed. You must also provide a bounding box
        where you expect the resulting polyhedron to lie. This can be a
        very generous fit, it's only used to create the initial polygons
        that are eventually clipped.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPlanes(self):
        """
        V.GetNumberOfPlanes() -> int
        C++: virtual int GetNumberOfPlanes()
        
        Get the number of planes in the current set of planes.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHull
        C++: vtkHull *NewInstance()
        """
        ...
    
    def RemoveAllPlanes(self):
        """
        V.RemoveAllPlanes()
        C++: void RemoveAllPlanes(void)
        
        Remove all planes from the current set of planes.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHull
        C++: static vtkHull *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPlane(self, p_int, p_float, p_float_1, p_float_2):
        """
        V.SetPlane(int, float, float, float)
        C++: void SetPlane(int i, double A, double B, double C)
        V.SetPlane(int, [float, float, float])
        C++: void SetPlane(int i, double plane[3])
        V.SetPlane(int, float, float, float, float)
        C++: void SetPlane(int i, double A, double B, double C, double D)
        V.SetPlane(int, [float, float, float], float)
        C++: void SetPlane(int i, double plane[3], double D)
        
        Set the normal values for plane i. This is a plane that was
        already added to the current set of planes with AddPlane(), and
        is now being modified. The values A, B, C are from the plane
        equation Ax + By + Cz + D = 0. This vector does not have to have
        unit length. Note that D is set to zero, except in the case of
        the method taking a vtkPlanes* argument, where it is set to the D
        value defined there.
        """
        ...
    
    def SetPlanes(self, vtkPlanes):
        """
        V.SetPlanes(vtkPlanes)
        C++: void SetPlanes(vtkPlanes *planes)
        
        Set all the planes at once using a vtkPlanes implicit function.
        This also sets the D value, so it can be used with
        GenerateHull().
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


