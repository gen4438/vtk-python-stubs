"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCellDataToPointData(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkCellDataToPointData - map cell data to point data
    
    Superclass: vtkDataSetAlgorithm
    
    vtkCellDataToPointData is a filter that transforms cell data (i.e.,
    data specified per cell) into point data (i.e., data specified at
    cell points). The method of transformation is based on averaging the
    data values of all cells using a particular point. For large datasets
    with several cell data arrays, the filter optionally supports
    selective processing to speed up processing. Optionally, the input
    cell data can be passed through to the output as well. Unstructured
    grids and polydata can have cells of different dimensions. To handle
    different use cases in this situation, the user can specify which
    cells contribute to the computation. The options for this are All
    (default), Patch and DataSetMax. Patch uses only the highest
    dimension cells attached to a point. DataSetMax uses the highest cell
    dimension in the entire data set.
    
    @warning
    This filter is an abstract filter, that is, the output is an abstract
    type (i.e., vtkDataSet). Use the convenience methods (e.g.,
    GetPolyDataOutput(), GetStructuredPointsOutput(), etc.) to get the
    type of output you want.
    
    @sa
    vtkPointData vtkCellData vtkPointDataToCellData
    """
    def AddCellDataArray(self, string):
        """
        V.AddCellDataArray(string)
        C++: virtual void AddCellDataArray(const char *name)
        
        Adds an array to be processed. This only has an effect if the
        ProcessAllArrays option is turned off. If a name is already
        present, nothing happens.
        """
        ...
    
    def ClearCellDataArrays(self):
        """
        V.ClearCellDataArrays()
        C++: virtual void ClearCellDataArrays()
        
        Removes all arrays to be processed from the list. This only has
        an effect if the ProcessAllArrays option is turned off.
        """
        ...
    
    def GetContributingCellOption(self):
        """
        V.GetContributingCellOption() -> int
        C++: virtual int GetContributingCellOption()
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def GetContributingCellOptionMaxValue(self):
        """
        V.GetContributingCellOptionMaxValue() -> int
        C++: virtual int GetContributingCellOptionMaxValue()
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def GetContributingCellOptionMinValue(self):
        """
        V.GetContributingCellOptionMinValue() -> int
        C++: virtual int GetContributingCellOptionMinValue()
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPassCellData(self):
        """
        V.GetPassCellData() -> bool
        C++: virtual bool GetPassCellData()
        
        Control whether the input cell data is to be passed to the
        output. If on, then the input cell data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def GetProcessAllArrays(self):
        """
        V.GetProcessAllArrays() -> bool
        C++: virtual bool GetProcessAllArrays()
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellDataToPointData
        C++: vtkCellDataToPointData *NewInstance()
        """
        ...
    
    def PassCellDataOff(self):
        """
        V.PassCellDataOff()
        C++: virtual void PassCellDataOff()
        
        Control whether the input cell data is to be passed to the
        output. If on, then the input cell data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def PassCellDataOn(self):
        """
        V.PassCellDataOn()
        C++: virtual void PassCellDataOn()
        
        Control whether the input cell data is to be passed to the
        output. If on, then the input cell data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def ProcessAllArraysOff(self):
        """
        V.ProcessAllArraysOff()
        C++: virtual void ProcessAllArraysOff()
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def ProcessAllArraysOn(self):
        """
        V.ProcessAllArraysOn()
        C++: virtual void ProcessAllArraysOn()
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def RemoveCellDataArray(self, string):
        """
        V.RemoveCellDataArray(string)
        C++: virtual void RemoveCellDataArray(const char *name)
        
        Removes an array to be processed. This only has an effect if the
        ProcessAllArrays option is turned off. If the specified name is
        not present, nothing happens.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellDataToPointData
        C++: static vtkCellDataToPointData *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetContributingCellOption(self, p_int):
        """
        V.SetContributingCellOption(int)
        C++: virtual void SetContributingCellOption(int _arg)
        
        Option to specify what cells to include in the gradient
        computation. Options are all cells (All, Patch and DataSetMax).
        The default is All.
        """
        ...
    
    def SetPassCellData(self, bool):
        """
        V.SetPassCellData(bool)
        C++: virtual void SetPassCellData(bool _arg)
        
        Control whether the input cell data is to be passed to the
        output. If on, then the input cell data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def SetProcessAllArrays(self, bool):
        """
        V.SetProcessAllArrays(bool)
        C++: virtual void SetProcessAllArrays(bool _arg)
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    All = ...
    ContributingCellEnum = ...
    DataSetMax = ...
    Patch = ...
    __dict__ = ...
    __vtkname__ = ...


