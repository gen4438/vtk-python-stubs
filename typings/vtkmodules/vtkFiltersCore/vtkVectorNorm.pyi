"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkVectorNorm(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkVectorNorm - generate scalars from Euclidean norm of vectors
    
    Superclass: vtkDataSetAlgorithm
    
    vtkVectorNorm is a filter that generates scalar values by computing
    Euclidean norm of vector triplets. Scalars can be normalized 0<=s<=1
    if desired.
    
    Note that this filter operates on point or cell attribute data, or
    both.  By default, the filter operates on both point and cell data if
    vector point and cell data, respectively, are available from the
    input. Alternatively, you can choose to generate scalar norm values
    for just cell or point data.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    """
    def GetAttributeMode(self):
        """
        V.GetAttributeMode() -> int
        C++: virtual int GetAttributeMode()
        
        Control how the filter works to generate scalar data from the
        input vector data. By default, (AttributeModeToDefault) the
        filter will generate the scalar norm for point and cell data (if
        vector data present in the input). Alternatively, you can
        explicitly set the filter to generate point data
        (AttributeModeToUsePointData) or cell data
        (AttributeModeToUseCellData).
        """
        ...
    
    def GetAttributeModeAsString(self):
        """
        V.GetAttributeModeAsString() -> string
        C++: const char *GetAttributeModeAsString()
        
        Control how the filter works to generate scalar data from the
        input vector data. By default, (AttributeModeToDefault) the
        filter will generate the scalar norm for point and cell data (if
        vector data present in the input). Alternatively, you can
        explicitly set the filter to generate point data
        (AttributeModeToUsePointData) or cell data
        (AttributeModeToUseCellData).
        """
        ...
    
    def GetNormalize(self):
        """
        V.GetNormalize() -> int
        C++: virtual vtkTypeBool GetNormalize()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVectorNorm
        C++: vtkVectorNorm *NewInstance()
        """
        ...
    
    def NormalizeOff(self):
        """
        V.NormalizeOff()
        C++: virtual void NormalizeOff()
        """
        ...
    
    def NormalizeOn(self):
        """
        V.NormalizeOn()
        C++: virtual void NormalizeOn()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVectorNorm
        C++: static vtkVectorNorm *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAttributeMode(self, p_int):
        """
        V.SetAttributeMode(int)
        C++: virtual void SetAttributeMode(int _arg)
        
        Control how the filter works to generate scalar data from the
        input vector data. By default, (AttributeModeToDefault) the
        filter will generate the scalar norm for point and cell data (if
        vector data present in the input). Alternatively, you can
        explicitly set the filter to generate point data
        (AttributeModeToUsePointData) or cell data
        (AttributeModeToUseCellData).
        """
        ...
    
    def SetAttributeModeToDefault(self):
        """
        V.SetAttributeModeToDefault()
        C++: void SetAttributeModeToDefault()
        
        Control how the filter works to generate scalar data from the
        input vector data. By default, (AttributeModeToDefault) the
        filter will generate the scalar norm for point and cell data (if
        vector data present in the input). Alternatively, you can
        explicitly set the filter to generate point data
        (AttributeModeToUsePointData) or cell data
        (AttributeModeToUseCellData).
        """
        ...
    
    def SetAttributeModeToUseCellData(self):
        """
        V.SetAttributeModeToUseCellData()
        C++: void SetAttributeModeToUseCellData()
        
        Control how the filter works to generate scalar data from the
        input vector data. By default, (AttributeModeToDefault) the
        filter will generate the scalar norm for point and cell data (if
        vector data present in the input). Alternatively, you can
        explicitly set the filter to generate point data
        (AttributeModeToUsePointData) or cell data
        (AttributeModeToUseCellData).
        """
        ...
    
    def SetAttributeModeToUsePointData(self):
        """
        V.SetAttributeModeToUsePointData()
        C++: void SetAttributeModeToUsePointData()
        
        Control how the filter works to generate scalar data from the
        input vector data. By default, (AttributeModeToDefault) the
        filter will generate the scalar norm for point and cell data (if
        vector data present in the input). Alternatively, you can
        explicitly set the filter to generate point data
        (AttributeModeToUsePointData) or cell data
        (AttributeModeToUseCellData).
        """
        ...
    
    def SetNormalize(self, p_int):
        """
        V.SetNormalize(int)
        C++: virtual void SetNormalize(vtkTypeBool _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


