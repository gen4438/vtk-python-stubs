"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtk3DLinearGridPlaneCutter(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtk3DLinearGridPlaneCutter - fast plane cutting of
    vtkUnstructuredGrid containing 3D linear cells
    
    Superclass: vtkDataObjectAlgorithm
    
    vtk3DLinearGridPlaneCutter is a specialized filter that cuts an input
    vtkUnstructuredGrid consisting of 3D linear cells: tetrahedra,
    hexahedra, voxels, pyramids, and/or wedges. (The cells are linear in
    the sense that each cell edge is a straight line.)  The filter is
    designed for high-speed, specialized operation. All other cell types
    are skipped and produce no output.
    
    To use this filter you must specify an input unstructured grid or
    vtkCompositeDataSet (containing unstructured grids) and a plane to
    cut with.
    
    The filter performance varies depending on optional output
    information. Basically if point merging is required (when
    PointMerging is set) a sorting process is required to eliminate
    duplicate output points in the cut surface. Otherwise when point
    merging is not required, a fast path process produces independent
    triangles representing the cut surface.
    
    This algorithm is fast because it is threaded, and may perform
    oeprations (in a preprocessing step) to accelerate the plane cutting.
    
    Because this filter may build an initial data structure during a
    preprocessing step, the first execution of the filter may take longer
    than subsequent operations. Typically the first execution is still
    faster than vtkCutter (especially with threading enabled), but for
    certain types of data this may not be true. However if you are using
    the filter to cut a dataset multiple times (as in an exploratory or
    interactive workflow) this filter works well.
    
    @warning
    When the input is of type vtkCompositeDataSet the filter will process
    the unstructured grid(s) contained in the composite data set. As a
    result the output of this filter is then a vtkMultiBlockDataSet
    containing multiple vtkPolyData. When a vtkUnstructuredGrid is
    provided as input the output is a single vtkPolyData.
    
    @warning
    Input cells that are not of 3D linear type (tetrahedron, hexahedron,
    wedge, pyramid, and voxel) are simply skipped and not processed.
    
    @warning
    The filter is templated on types of input and output points, and
    input scalar type. To reduce object file bloat, only real points
    (float,double) are processed.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkCutter vtkFlyingEdgesPlaneCutter vtkPlaneCutter vtkPlane
    vtkSphereTree vtkContour3DLinearGrid
    """
    def CanFullyProcessDataObject(self, vtkDataObject):
        """
        V.CanFullyProcessDataObject(vtkDataObject) -> bool
        C++: static bool CanFullyProcessDataObject(vtkDataObject *object)
        
        Returns true if the data object passed in is fully supported by
        this filter, i.e., all cell types are linear. For composite
        datasets, this means all dataset leaves have only linear cell
        types that can be processed by this filter.
        """
        ...
    
    def ComputeNormalsOff(self):
        """
        V.ComputeNormalsOff()
        C++: virtual void ComputeNormalsOff()
        
        Set/Get the computation of normals. The normal generated is
        simply the cut plane normal. The normal, if generated, is defined
        by cell data associated with the output polygons. By default
        computing of normals is off.
        """
        ...
    
    def ComputeNormalsOn(self):
        """
        V.ComputeNormalsOn()
        C++: virtual void ComputeNormalsOn()
        
        Set/Get the computation of normals. The normal generated is
        simply the cut plane normal. The normal, if generated, is defined
        by cell data associated with the output polygons. By default
        computing of normals is off.
        """
        ...
    
    def GetComputeNormals(self):
        """
        V.GetComputeNormals() -> int
        C++: virtual vtkTypeBool GetComputeNormals()
        
        Set/Get the computation of normals. The normal generated is
        simply the cut plane normal. The normal, if generated, is defined
        by cell data associated with the output polygons. By default
        computing of normals is off.
        """
        ...
    
    def GetInterpolateAttributes(self):
        """
        V.GetInterpolateAttributes() -> int
        C++: virtual vtkTypeBool GetInterpolateAttributes()
        
        Indicate whether to interpolate input attributes onto the cut
        plane. By default this option is on.
        """
        ...
    
    def GetLargeIds(self):
        """
        V.GetLargeIds() -> bool
        C++: bool GetLargeIds()
        
        Inform the user as to whether large ids were used during filter
        execution. This flag only has meaning after the filter has
        executed. Large ids are used when the id of the larges cell or
        point is greater than signed 32-bit precision. (Smaller ids
        reduce memory usage and speed computation. Note that LargeIds are
        only available on 64-bit architectures.)
        """
        ...
    
    def GetMergePoints(self):
        """
        V.GetMergePoints() -> int
        C++: virtual vtkTypeBool GetMergePoints()
        
        Indicate whether to merge coincident points. Merging can take
        extra time and produces fewer output points, creating a
        "watertight" output surface. On the other hand, merging reduced
        output data size and may be just as fast especially for smaller
        data. By default this is off.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overloaded GetMTime() because of delegation to the helper
        vtkPlane.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def GetNumberOfThreadsUsed(self):
        """
        V.GetNumberOfThreadsUsed() -> int
        C++: int GetNumberOfThreadsUsed()
        
        Return the number of threads actually used during execution. This
        is valid only after algorithm execution.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points. See the
        documentation for the vtkAlgorithm::Precision enum for an
        explanation of the available precision settings.
        """
        ...
    
    def GetPlane(self):
        """
        V.GetPlane() -> vtkPlane
        C++: virtual vtkPlane *GetPlane()
        
        Specify the plane (an implicit function) to perform the cutting.
        The definition of the plane (its origin and normal) is controlled
        via this instance of vtkPlane.
        """
        ...
    
    def GetSequentialProcessing(self):
        """
        V.GetSequentialProcessing() -> int
        C++: virtual vtkTypeBool GetSequentialProcessing()
        
        Force sequential processing (i.e. single thread) of the
        contouring process. By default, sequential processing is off.
        Note this flag only applies if the class has been compiled with
        VTK_SMP_IMPLEMENTATION_TYPE set to something other than
        Sequential. (If set to Sequential, then the filter always runs in
        serial mode.) This flag is typically used for benchmarking
        purposes.
        """
        ...
    
    def InterpolateAttributesOff(self):
        """
        V.InterpolateAttributesOff()
        C++: virtual void InterpolateAttributesOff()
        
        Indicate whether to interpolate input attributes onto the cut
        plane. By default this option is on.
        """
        ...
    
    def InterpolateAttributesOn(self):
        """
        V.InterpolateAttributesOn()
        C++: virtual void InterpolateAttributesOn()
        
        Indicate whether to interpolate input attributes onto the cut
        plane. By default this option is on.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def MergePointsOff(self):
        """
        V.MergePointsOff()
        C++: virtual void MergePointsOff()
        
        Indicate whether to merge coincident points. Merging can take
        extra time and produces fewer output points, creating a
        "watertight" output surface. On the other hand, merging reduced
        output data size and may be just as fast especially for smaller
        data. By default this is off.
        """
        ...
    
    def MergePointsOn(self):
        """
        V.MergePointsOn()
        C++: virtual void MergePointsOn()
        
        Indicate whether to merge coincident points. Merging can take
        extra time and produces fewer output points, creating a
        "watertight" output surface. On the other hand, merging reduced
        output data size and may be just as fast especially for smaller
        data. By default this is off.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtk3DLinearGridPlaneCutter
        C++: vtk3DLinearGridPlaneCutter *NewInstance()
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtk3DLinearGridPlaneCutter
        C++: static vtk3DLinearGridPlaneCutter *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def SequentialProcessingOff(self):
        """
        V.SequentialProcessingOff()
        C++: virtual void SequentialProcessingOff()
        
        Force sequential processing (i.e. single thread) of the
        contouring process. By default, sequential processing is off.
        Note this flag only applies if the class has been compiled with
        VTK_SMP_IMPLEMENTATION_TYPE set to something other than
        Sequential. (If set to Sequential, then the filter always runs in
        serial mode.) This flag is typically used for benchmarking
        purposes.
        """
        ...
    
    def SequentialProcessingOn(self):
        """
        V.SequentialProcessingOn()
        C++: virtual void SequentialProcessingOn()
        
        Force sequential processing (i.e. single thread) of the
        contouring process. By default, sequential processing is off.
        Note this flag only applies if the class has been compiled with
        VTK_SMP_IMPLEMENTATION_TYPE set to something other than
        Sequential. (If set to Sequential, then the filter always runs in
        serial mode.) This flag is typically used for benchmarking
        purposes.
        """
        ...
    
    def SetComputeNormals(self, p_int):
        """
        V.SetComputeNormals(int)
        C++: virtual void SetComputeNormals(vtkTypeBool _arg)
        
        Set/Get the computation of normals. The normal generated is
        simply the cut plane normal. The normal, if generated, is defined
        by cell data associated with the output polygons. By default
        computing of normals is off.
        """
        ...
    
    def SetInterpolateAttributes(self, p_int):
        """
        V.SetInterpolateAttributes(int)
        C++: virtual void SetInterpolateAttributes(vtkTypeBool _arg)
        
        Indicate whether to interpolate input attributes onto the cut
        plane. By default this option is on.
        """
        ...
    
    def SetMergePoints(self, p_int):
        """
        V.SetMergePoints(int)
        C++: virtual void SetMergePoints(vtkTypeBool _arg)
        
        Indicate whether to merge coincident points. Merging can take
        extra time and produces fewer output points, creating a
        "watertight" output surface. On the other hand, merging reduced
        output data size and may be just as fast especially for smaller
        data. By default this is off.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: void SetOutputPointsPrecision(int precision)
        
        Set/get the desired precision for the output points. See the
        documentation for the vtkAlgorithm::Precision enum for an
        explanation of the available precision settings.
        """
        ...
    
    def SetPlane(self, vtkPlane):
        """
        V.SetPlane(vtkPlane)
        C++: virtual void SetPlane(vtkPlane *)
        
        Specify the plane (an implicit function) to perform the cutting.
        The definition of the plane (its origin and normal) is controlled
        via this instance of vtkPlane.
        """
        ...
    
    def SetSequentialProcessing(self, p_int):
        """
        V.SetSequentialProcessing(int)
        C++: virtual void SetSequentialProcessing(vtkTypeBool _arg)
        
        Force sequential processing (i.e. single thread) of the
        contouring process. By default, sequential processing is off.
        Note this flag only applies if the class has been compiled with
        VTK_SMP_IMPLEMENTATION_TYPE set to something other than
        Sequential. (If set to Sequential, then the filter always runs in
        serial mode.) This flag is typically used for benchmarking
        purposes.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


