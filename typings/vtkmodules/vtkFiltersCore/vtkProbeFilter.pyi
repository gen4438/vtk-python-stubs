"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkProbeFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkProbeFilter - sample data values at specified point locations
    
    Superclass: vtkDataSetAlgorithm
    
    vtkProbeFilter is a filter that computes point attributes (e.g.,
    scalars, vectors, etc.) at specified point positions. The filter has
    two inputs: the Input and Source. The Input geometric structure is
    passed through the filter. The point attributes are computed at the
    Input point positions by interpolating into the source data. For
    example, we can compute data values on a plane (plane specified as
    Input) from a volume (Source). The cell data of the source data is
    copied to the output based on in which source cell each input point
    is. If an array of the same name exists both in source's point and
    cell data, only the one from the point data is probed.
    
    This filter can be used to resample data, or convert one dataset form
    into another. For example, an unstructured grid (vtkUnstructuredGrid)
    can be probed with a volume (three-dimensional vtkImageData), and
    then volume rendering techniques can be used to visualize the
    results. Another example: a line or curve can be used to probe data
    to produce x-y plots along that line or curve.
    
    @warning
    A critical algorithmic component of vtkProbeFilter is the manner in
    which it finds the cell containing a probe point. By default, the
    vtkDataSet::FindCell() method is used, which in turn uses a
    vtkPointLocator to perform an accelerated search. However, using a
    vtkPointLocator may fail to identify an enclosing cell in some cases.
    A more robust but slower approach is to use a vtkCellLocator to
    perform the the FindCell() operation (via specification of the
    CellLocatorPrototype). Finally, more advanced searches can be
    configured by specifying an instance of vtkFindCellStrategy. (Note:
    image data probing never uses a locator since finding a containing
    cell is a simple, fast operation. This specifying a
    vtkFindCellStrategy or cell locator prototype has no effect.)
    
    @warning
    The vtkProbeFilter, once it finds the cell containing a query point,
    uses the cell's interpolation functions to perform the interpolate /
    compute the point attributes. Note that other interpolation processes
    with different kernels are available: vtkPointInterpolator and
    vtkSPHInterpolator. vtkPointInterpolator supports a variety of
    generalized kernels, while vtkSPHInterpolator supports a variety of
    SPH interpolation kernels.
    
    @sa
    vtkFindCellStrategy vtkPointLocator vtkCellLocator
    vtkStaticPointLocator vtkStaticCellLocator vtkPointInterpolator
    vtkSPHInterpolator
    """
    def CategoricalDataOff(self):
        """
        V.CategoricalDataOff()
        C++: virtual void CategoricalDataOff()
        
        Control whether the source point data is to be treated as
        categorical. If the data is categorical, then the resultant data
        will be determined by a nearest neighbor interpolation scheme.
        """
        ...
    
    def CategoricalDataOn(self):
        """
        V.CategoricalDataOn()
        C++: virtual void CategoricalDataOn()
        
        Control whether the source point data is to be treated as
        categorical. If the data is categorical, then the resultant data
        will be determined by a nearest neighbor interpolation scheme.
        """
        ...
    
    def ComputeToleranceOff(self):
        """
        V.ComputeToleranceOff()
        C++: virtual void ComputeToleranceOff()
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. On by default.
        """
        ...
    
    def ComputeToleranceOn(self):
        """
        V.ComputeToleranceOn()
        C++: virtual void ComputeToleranceOn()
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. On by default.
        """
        ...
    
    def GetCategoricalData(self):
        """
        V.GetCategoricalData() -> int
        C++: virtual vtkTypeBool GetCategoricalData()
        
        Control whether the source point data is to be treated as
        categorical. If the data is categorical, then the resultant data
        will be determined by a nearest neighbor interpolation scheme.
        """
        ...
    
    def GetCellLocatorPrototype(self):
        """
        V.GetCellLocatorPrototype() -> vtkAbstractCellLocator
        C++: virtual vtkAbstractCellLocator *GetCellLocatorPrototype()
        
        Set/Get the prototype cell locator to perform the FindCell()
        operation. (A prototype is used as an object factory to
        instantiate an instance of the prototype to perform the
        FindCell() operation). If a prototype, and a vtkFindCellStrategy
        are not defined, the vtkDataSet::FindCell() is used. If a
        vtkFindCellStrategy is not defined, then the prototype is used.
        """
        ...
    
    def GetComputeTolerance(self):
        """
        V.GetComputeTolerance() -> bool
        C++: virtual bool GetComputeTolerance()
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. On by default.
        """
        ...
    
    def GetFindCellStrategy(self):
        """
        V.GetFindCellStrategy() -> vtkFindCellStrategy
        C++: virtual vtkFindCellStrategy *GetFindCellStrategy()
        
        Set / get the strategy used to perform the FindCell() operation.
        When specified, the strategy is used in preference to a cell
        locator prototype. When neither a strategy or cell locator
        prototype is defined, then the vtkDataSet::FindCell() method is
        used.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPassCellArrays(self):
        """
        V.GetPassCellArrays() -> int
        C++: virtual vtkTypeBool GetPassCellArrays()
        
        Shallow copy the input cell data arrays to the output. Off by
        default.
        """
        ...
    
    def GetPassFieldArrays(self):
        """
        V.GetPassFieldArrays() -> int
        C++: virtual vtkTypeBool GetPassFieldArrays()
        
        Set whether to pass the field-data arrays from the Input i.e. the
        input providing the geometry to the output. On by default.
        """
        ...
    
    def GetPassPointArrays(self):
        """
        V.GetPassPointArrays() -> int
        C++: virtual vtkTypeBool GetPassPointArrays()
        
        Shallow copy the input point data arrays to the output Off by
        default.
        """
        ...
    
    def GetSource(self):
        """
        V.GetSource() -> vtkDataObject
        C++: vtkDataObject *GetSource()
        
        Specify the data set that will be probed at the input points. The
        Input gives the geometry (the points and cells) for the output,
        while the Source is probed (interpolated) to generate the
        scalars, vectors, etc. for the output points based on the point
        locations.
        """
        ...
    
    def GetSpatialMatch(self):
        """
        V.GetSpatialMatch() -> int
        C++: virtual vtkTypeBool GetSpatialMatch()
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        Set the tolerance used to compute whether a point in the source
        is in a cell of the input.  This value is only used if
        ComputeTolerance is off.
        """
        ...
    
    def GetValidPointMaskArrayName(self):
        """
        V.GetValidPointMaskArrayName() -> string
        C++: virtual char *GetValidPointMaskArrayName()
        
        Returns the name of the char array added to the output with
        values 1 for valid points and 0 for invalid points. Set to
        "vtkValidPointMask" by default.
        """
        ...
    
    def GetValidPoints(self):
        """
        V.GetValidPoints() -> vtkIdTypeArray
        C++: vtkIdTypeArray *GetValidPoints()
        
        Get the list of point ids in the output that contain attribute
        data interpolated from the source.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProbeFilter
        C++: vtkProbeFilter *NewInstance()
        """
        ...
    
    def PassCellArraysOff(self):
        """
        V.PassCellArraysOff()
        C++: virtual void PassCellArraysOff()
        
        Shallow copy the input cell data arrays to the output. Off by
        default.
        """
        ...
    
    def PassCellArraysOn(self):
        """
        V.PassCellArraysOn()
        C++: virtual void PassCellArraysOn()
        
        Shallow copy the input cell data arrays to the output. Off by
        default.
        """
        ...
    
    def PassFieldArraysOff(self):
        """
        V.PassFieldArraysOff()
        C++: virtual void PassFieldArraysOff()
        
        Set whether to pass the field-data arrays from the Input i.e. the
        input providing the geometry to the output. On by default.
        """
        ...
    
    def PassFieldArraysOn(self):
        """
        V.PassFieldArraysOn()
        C++: virtual void PassFieldArraysOn()
        
        Set whether to pass the field-data arrays from the Input i.e. the
        input providing the geometry to the output. On by default.
        """
        ...
    
    def PassPointArraysOff(self):
        """
        V.PassPointArraysOff()
        C++: virtual void PassPointArraysOff()
        
        Shallow copy the input point data arrays to the output Off by
        default.
        """
        ...
    
    def PassPointArraysOn(self):
        """
        V.PassPointArraysOn()
        C++: virtual void PassPointArraysOn()
        
        Shallow copy the input point data arrays to the output Off by
        default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProbeFilter
        C++: static vtkProbeFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCategoricalData(self, p_int):
        """
        V.SetCategoricalData(int)
        C++: virtual void SetCategoricalData(vtkTypeBool _arg)
        
        Control whether the source point data is to be treated as
        categorical. If the data is categorical, then the resultant data
        will be determined by a nearest neighbor interpolation scheme.
        """
        ...
    
    def SetCellLocatorPrototype(self, vtkAbstractCellLocator):
        """
        V.SetCellLocatorPrototype(vtkAbstractCellLocator)
        C++: virtual void SetCellLocatorPrototype(
            vtkAbstractCellLocator *)
        
        Set/Get the prototype cell locator to perform the FindCell()
        operation. (A prototype is used as an object factory to
        instantiate an instance of the prototype to perform the
        FindCell() operation). If a prototype, and a vtkFindCellStrategy
        are not defined, the vtkDataSet::FindCell() is used. If a
        vtkFindCellStrategy is not defined, then the prototype is used.
        """
        ...
    
    def SetComputeTolerance(self, bool):
        """
        V.SetComputeTolerance(bool)
        C++: virtual void SetComputeTolerance(bool _arg)
        
        Set whether to use the Tolerance field or precompute the
        tolerance. When on, the tolerance will be computed and the field
        value is ignored. On by default.
        """
        ...
    
    def SetFindCellStrategy(self, vtkFindCellStrategy):
        """
        V.SetFindCellStrategy(vtkFindCellStrategy)
        C++: virtual void SetFindCellStrategy(vtkFindCellStrategy *)
        
        Set / get the strategy used to perform the FindCell() operation.
        When specified, the strategy is used in preference to a cell
        locator prototype. When neither a strategy or cell locator
        prototype is defined, then the vtkDataSet::FindCell() method is
        used.
        """
        ...
    
    def SetPassCellArrays(self, p_int):
        """
        V.SetPassCellArrays(int)
        C++: virtual void SetPassCellArrays(vtkTypeBool _arg)
        
        Shallow copy the input cell data arrays to the output. Off by
        default.
        """
        ...
    
    def SetPassFieldArrays(self, p_int):
        """
        V.SetPassFieldArrays(int)
        C++: virtual void SetPassFieldArrays(vtkTypeBool _arg)
        
        Set whether to pass the field-data arrays from the Input i.e. the
        input providing the geometry to the output. On by default.
        """
        ...
    
    def SetPassPointArrays(self, p_int):
        """
        V.SetPassPointArrays(int)
        C++: virtual void SetPassPointArrays(vtkTypeBool _arg)
        
        Shallow copy the input point data arrays to the output Off by
        default.
        """
        ...
    
    def SetSourceConnection(self, vtkAlgorithmOutput):
        """
        V.SetSourceConnection(vtkAlgorithmOutput)
        C++: void SetSourceConnection(vtkAlgorithmOutput *algOutput)
        
        Specify the data set that will be probed at the input points. The
        Input gives the geometry (the points and cells) for the output,
        while the Source is probed (interpolated) to generate the
        scalars, vectors, etc. for the output points based on the point
        locations.
        """
        ...
    
    def SetSourceData(self, vtkDataObject):
        """
        V.SetSourceData(vtkDataObject)
        C++: void SetSourceData(vtkDataObject *source)
        
        Specify the data set that will be probed at the input points. The
        Input gives the geometry (the points and cells) for the output,
        while the Source is probed (interpolated) to generate the
        scalars, vectors, etc. for the output points based on the point
        locations.
        """
        ...
    
    def SetSpatialMatch(self, p_int):
        """
        V.SetSpatialMatch(int)
        C++: virtual void SetSpatialMatch(vtkTypeBool _arg)
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        Set the tolerance used to compute whether a point in the source
        is in a cell of the input.  This value is only used if
        ComputeTolerance is off.
        """
        ...
    
    def SetValidPointMaskArrayName(self, string):
        """
        V.SetValidPointMaskArrayName(string)
        C++: virtual void SetValidPointMaskArrayName(const char *_arg)
        
        Returns the name of the char array added to the output with
        values 1 for valid points and 0 for invalid points. Set to
        "vtkValidPointMask" by default.
        """
        ...
    
    def SpatialMatchOff(self):
        """
        V.SpatialMatchOff()
        C++: virtual void SpatialMatchOff()
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def SpatialMatchOn(self):
        """
        V.SpatialMatchOn()
        C++: virtual void SpatialMatchOn()
        
        This flag is used only when a piece is requested to update.  By
        default the flag is off.  Because no spatial correspondence
        between input pieces and source pieces is known, all of the
        source has to be requested no matter what piece of the output is
        requested.  When there is a spatial correspondence, the
        user/application can set this flag.  This hint allows the breakup
        of the probe operation to be much more efficient.  When piece m
        of n is requested for update by the user, then only n of m needs
        to be requested of the source.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


