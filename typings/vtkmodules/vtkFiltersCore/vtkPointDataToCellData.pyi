"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPointDataToCellData(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkPointDataToCellData - map point data to cell data
    
    Superclass: vtkDataSetAlgorithm
    
    vtkPointDataToCellData is a filter that transforms point data (i.e.,
    data specified per point) into cell data (i.e., data specified per
    cell). The method of transformation is based on averaging the data
    values of all points defining a particular cell. For large datasets
    with several cell data arrays, the filter optionally supports
    selective processing to speed up processing. Optionally, the input
    point data can be passed through to the output as well.
    
    @warning
    This filter is an abstract filter, that is, the output is an abstract
    type (i.e., vtkDataSet). Use the convenience methods (e.g.,
    GetPolyDataOutput(), GetStructuredPointsOutput(), etc.) to get the
    type of output you want.
    
    @sa
    vtkPointData vtkCellData vtkCellDataToPointData
    """
    def AddPointDataArray(self, string):
        """
        V.AddPointDataArray(string)
        C++: virtual void AddPointDataArray(const char *name)
        
        Adds an array to be processed. This only has an effect if the
        ProcessAllArrays option is turned off. If a name is already
        present, nothing happens.
        """
        ...
    
    def CategoricalDataOff(self):
        """
        V.CategoricalDataOff()
        C++: virtual void CategoricalDataOff()
        
        Control whether the input point data is to be treated as
        categorical. If the data is categorical, then the resultant cell
        data will be determined by a "majority rules" vote, with ties
        going to the smaller value.
        """
        ...
    
    def CategoricalDataOn(self):
        """
        V.CategoricalDataOn()
        C++: virtual void CategoricalDataOn()
        
        Control whether the input point data is to be treated as
        categorical. If the data is categorical, then the resultant cell
        data will be determined by a "majority rules" vote, with ties
        going to the smaller value.
        """
        ...
    
    def ClearPointDataArrays(self):
        """
        V.ClearPointDataArrays()
        C++: virtual void ClearPointDataArrays()
        
        Removes all arrays to be processed from the list. This only has
        an effect if the ProcessAllArrays option is turned off.
        """
        ...
    
    def GetCategoricalData(self):
        """
        V.GetCategoricalData() -> bool
        C++: virtual bool GetCategoricalData()
        
        Control whether the input point data is to be treated as
        categorical. If the data is categorical, then the resultant cell
        data will be determined by a "majority rules" vote, with ties
        going to the smaller value.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPassPointData(self):
        """
        V.GetPassPointData() -> bool
        C++: virtual bool GetPassPointData()
        
        Control whether the input point data is to be passed to the
        output. If on, then the input point data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def GetProcessAllArrays(self):
        """
        V.GetProcessAllArrays() -> bool
        C++: virtual bool GetProcessAllArrays()
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointDataToCellData
        C++: vtkPointDataToCellData *NewInstance()
        """
        ...
    
    def PassPointDataOff(self):
        """
        V.PassPointDataOff()
        C++: virtual void PassPointDataOff()
        
        Control whether the input point data is to be passed to the
        output. If on, then the input point data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def PassPointDataOn(self):
        """
        V.PassPointDataOn()
        C++: virtual void PassPointDataOn()
        
        Control whether the input point data is to be passed to the
        output. If on, then the input point data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def ProcessAllArraysOff(self):
        """
        V.ProcessAllArraysOff()
        C++: virtual void ProcessAllArraysOff()
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def ProcessAllArraysOn(self):
        """
        V.ProcessAllArraysOn()
        C++: virtual void ProcessAllArraysOn()
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def RemovePointDataArray(self, string):
        """
        V.RemovePointDataArray(string)
        C++: virtual void RemovePointDataArray(const char *name)
        
        Removes an array to be processed. This only has an effect if the
        ProcessAllArrays option is turned off. If the specified name is
        not present, nothing happens.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointDataToCellData
        C++: static vtkPointDataToCellData *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCategoricalData(self, bool):
        """
        V.SetCategoricalData(bool)
        C++: virtual void SetCategoricalData(bool _arg)
        
        Control whether the input point data is to be treated as
        categorical. If the data is categorical, then the resultant cell
        data will be determined by a "majority rules" vote, with ties
        going to the smaller value.
        """
        ...
    
    def SetPassPointData(self, bool):
        """
        V.SetPassPointData(bool)
        C++: virtual void SetPassPointData(bool _arg)
        
        Control whether the input point data is to be passed to the
        output. If on, then the input point data is passed through to the
        output; otherwise, only generated point data is placed into the
        output.
        """
        ...
    
    def SetProcessAllArrays(self, bool):
        """
        V.SetProcessAllArrays(bool)
        C++: virtual void SetProcessAllArrays(bool _arg)
        
        Activate selective processing of arrays. If inactive, only arrays
        selected by the user will be considered by this filter. The
        default is true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


