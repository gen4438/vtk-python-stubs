"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkElevationFilter(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkElevationFilter - generate scalars along a specified direction
    
    Superclass: vtkDataSetAlgorithm
    
    vtkElevationFilter is a filter to generate scalar values from a
    dataset.  The scalar values lie within a user specified range, and
    are generated by computing a projection of each dataset point onto a
    line. The line can be oriented arbitrarily. A typical example is to
    generate scalars based on elevation or height above a plane.
    
    @warning
    vtkSimpleElevationFilter may be easier to use in many cases; e.g.,
    compute vertical elevation above zero z-point.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkSimpleElevationFilter
    """
    def GetHighPoint(self):
        """
        V.GetHighPoint() -> (float, float, float)
        C++: virtual double *GetHighPoint()
        
        Define other end of the line (large scalar values).  Default is
        (0,0,1).
        """
        ...
    
    def GetLowPoint(self):
        """
        V.GetLowPoint() -> (float, float, float)
        C++: virtual double *GetLowPoint()
        
        Define one end of the line (small scalar values).  Default is
        (0,0,0).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarRange(self):
        """
        V.GetScalarRange() -> (float, float)
        C++: virtual double *GetScalarRange()
        
        Specify range to map scalars into.  Default is [0, 1].
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkElevationFilter
        C++: vtkElevationFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkElevationFilter
        C++: static vtkElevationFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetHighPoint(self, p_float, p_float_1, p_float_2):
        """
        V.SetHighPoint(float, float, float)
        C++: virtual void SetHighPoint(double _arg1, double _arg2,
            double _arg3)
        V.SetHighPoint((float, float, float))
        C++: virtual void SetHighPoint(const double _arg[3])
        
        Define other end of the line (large scalar values).  Default is
        (0,0,1).
        """
        ...
    
    def SetLowPoint(self, p_float, p_float_1, p_float_2):
        """
        V.SetLowPoint(float, float, float)
        C++: virtual void SetLowPoint(double _arg1, double _arg2,
            double _arg3)
        V.SetLowPoint((float, float, float))
        C++: virtual void SetLowPoint(const double _arg[3])
        
        Define one end of the line (small scalar values).  Default is
        (0,0,0).
        """
        ...
    
    def SetScalarRange(self, p_float, p_float_1):
        """
        V.SetScalarRange(float, float)
        C++: virtual void SetScalarRange(double _arg1, double _arg2)
        V.SetScalarRange((float, float))
        C++: void SetScalarRange(const double _arg[2])
        
        Specify range to map scalars into.  Default is [0, 1].
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


