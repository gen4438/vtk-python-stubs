"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkQuadricDecimation(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkQuadricDecimation - reduce the number of triangles in a mesh
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkQuadricDecimation is a filter to reduce the number of triangles in
    a triangle mesh, forming a good approximation to the original
    geometry. The input to vtkQuadricDecimation is a vtkPolyData object,
    and only triangles are treated. If you desire to decimate polygonal
    meshes, first triangulate the polygons with vtkTriangleFilter.
    
    The algorithm is based on repeated edge collapses until the requested
    mesh reduction is achieved. Edges are placed in a priority queue
    based on the "cost" to delete the edge. The cost is an approximate
    measure of error (distance to the original surface)--described by the
    so-called quadric error measure. The quadric error measure is
    associated with each vertex of the mesh and represents a matrix of
    planes incident on that vertex. The distance of the planes to the
    vertex is the error in the position of the vertex (originally the
    vertex error iz zero). As edges are deleted, the quadric error
    measure associated with the two end points of the edge are summed
    (this combines the plane equations) and an optimal collapse point can
    be computed. Edges connected to the collapse point are then
    reinserted into the queue after computing the new cost to delete
    them. The process continues until the desired reduction level is
    reached or topological constraints prevent further reduction. Note
    that this basic algorithm can be extended to higher dimensions by
    taking into account variation in attributes (i.e., scalars, vectors,
    and so on).
    
    This paper is based on the work of Garland and Heckbert who first
    presented the quadric error measure at Siggraph '97 "Surface
    Simplification Using Quadric Error Metrics". For details of the
    algorithm Michael Garland's Ph.D. thesis is also recommended. Hughues
    Hoppe's Vis '99 paper, "New Quadric Metric for Simplifying Meshes
    with Appearance Attributes" is also a good take on the subject
    especially as it pertains to the error metric applied to attributes.
    
    @par Thanks: Thanks to Bradley Lowekamp of the National Library of
    Medicine/NIH for contributing this class.
    """
    def AttributeErrorMetricOff(self):
        """
        V.AttributeErrorMetricOff()
        C++: virtual void AttributeErrorMetricOff()
        
        Decide whether to include data attributes in the error metric. If
        off, then only geometric error is used to control the decimation.
        By default the attribute errors are off.
        """
        ...
    
    def AttributeErrorMetricOn(self):
        """
        V.AttributeErrorMetricOn()
        C++: virtual void AttributeErrorMetricOn()
        
        Decide whether to include data attributes in the error metric. If
        off, then only geometric error is used to control the decimation.
        By default the attribute errors are off.
        """
        ...
    
    def GetActualReduction(self):
        """
        V.GetActualReduction() -> float
        C++: virtual double GetActualReduction()
        
        Get the actual reduction. This value is only valid after the
        filter has executed.
        """
        ...
    
    def GetAttributeErrorMetric(self):
        """
        V.GetAttributeErrorMetric() -> int
        C++: virtual vtkTypeBool GetAttributeErrorMetric()
        
        Decide whether to include data attributes in the error metric. If
        off, then only geometric error is used to control the decimation.
        By default the attribute errors are off.
        """
        ...
    
    def GetNormalsAttribute(self):
        """
        V.GetNormalsAttribute() -> int
        C++: virtual vtkTypeBool GetNormalsAttribute()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def GetNormalsWeight(self):
        """
        V.GetNormalsWeight() -> float
        C++: virtual double GetNormalsWeight()
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarsAttribute(self):
        """
        V.GetScalarsAttribute() -> int
        C++: virtual vtkTypeBool GetScalarsAttribute()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def GetScalarsWeight(self):
        """
        V.GetScalarsWeight() -> float
        C++: virtual double GetScalarsWeight()
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def GetTargetReduction(self):
        """
        V.GetTargetReduction() -> float
        C++: virtual double GetTargetReduction()
        
        Set/Get the desired reduction (expressed as a fraction of the
        original number of triangles). The actual reduction may be less
        depending on triangulation and topological constraints.
        """
        ...
    
    def GetTargetReductionMaxValue(self):
        """
        V.GetTargetReductionMaxValue() -> float
        C++: virtual double GetTargetReductionMaxValue()
        
        Set/Get the desired reduction (expressed as a fraction of the
        original number of triangles). The actual reduction may be less
        depending on triangulation and topological constraints.
        """
        ...
    
    def GetTargetReductionMinValue(self):
        """
        V.GetTargetReductionMinValue() -> float
        C++: virtual double GetTargetReductionMinValue()
        
        Set/Get the desired reduction (expressed as a fraction of the
        original number of triangles). The actual reduction may be less
        depending on triangulation and topological constraints.
        """
        ...
    
    def GetTCoordsAttribute(self):
        """
        V.GetTCoordsAttribute() -> int
        C++: virtual vtkTypeBool GetTCoordsAttribute()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def GetTCoordsWeight(self):
        """
        V.GetTCoordsWeight() -> float
        C++: virtual double GetTCoordsWeight()
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def GetTensorsAttribute(self):
        """
        V.GetTensorsAttribute() -> int
        C++: virtual vtkTypeBool GetTensorsAttribute()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def GetTensorsWeight(self):
        """
        V.GetTensorsWeight() -> float
        C++: virtual double GetTensorsWeight()
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def GetVectorsAttribute(self):
        """
        V.GetVectorsAttribute() -> int
        C++: virtual vtkTypeBool GetVectorsAttribute()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def GetVectorsWeight(self):
        """
        V.GetVectorsWeight() -> float
        C++: virtual double GetVectorsWeight()
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def GetVolumePreservation(self):
        """
        V.GetVolumePreservation() -> int
        C++: virtual vtkTypeBool GetVolumePreservation()
        
        Decide whether to activate volume preservation which greatly
        reduces errors in triangle normal direction. If off, volume
        preservation is disabled and if AttributeErrorMetric is active,
        these errors can be large. By default VolumePreservation is off
        the attribute errors are off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkQuadricDecimation
        C++: vtkQuadricDecimation *NewInstance()
        """
        ...
    
    def NormalsAttributeOff(self):
        """
        V.NormalsAttributeOff()
        C++: virtual void NormalsAttributeOff()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def NormalsAttributeOn(self):
        """
        V.NormalsAttributeOn()
        C++: virtual void NormalsAttributeOn()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkQuadricDecimation
        C++: static vtkQuadricDecimation *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalarsAttributeOff(self):
        """
        V.ScalarsAttributeOff()
        C++: virtual void ScalarsAttributeOff()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def ScalarsAttributeOn(self):
        """
        V.ScalarsAttributeOn()
        C++: virtual void ScalarsAttributeOn()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def SetAttributeErrorMetric(self, p_int):
        """
        V.SetAttributeErrorMetric(int)
        C++: virtual void SetAttributeErrorMetric(vtkTypeBool _arg)
        
        Decide whether to include data attributes in the error metric. If
        off, then only geometric error is used to control the decimation.
        By default the attribute errors are off.
        """
        ...
    
    def SetNormalsAttribute(self, p_int):
        """
        V.SetNormalsAttribute(int)
        C++: virtual void SetNormalsAttribute(vtkTypeBool _arg)
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def SetNormalsWeight(self, p_float):
        """
        V.SetNormalsWeight(float)
        C++: virtual void SetNormalsWeight(double _arg)
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def SetScalarsAttribute(self, p_int):
        """
        V.SetScalarsAttribute(int)
        C++: virtual void SetScalarsAttribute(vtkTypeBool _arg)
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def SetScalarsWeight(self, p_float):
        """
        V.SetScalarsWeight(float)
        C++: virtual void SetScalarsWeight(double _arg)
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def SetTargetReduction(self, p_float):
        """
        V.SetTargetReduction(float)
        C++: virtual void SetTargetReduction(double _arg)
        
        Set/Get the desired reduction (expressed as a fraction of the
        original number of triangles). The actual reduction may be less
        depending on triangulation and topological constraints.
        """
        ...
    
    def SetTCoordsAttribute(self, p_int):
        """
        V.SetTCoordsAttribute(int)
        C++: virtual void SetTCoordsAttribute(vtkTypeBool _arg)
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def SetTCoordsWeight(self, p_float):
        """
        V.SetTCoordsWeight(float)
        C++: virtual void SetTCoordsWeight(double _arg)
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def SetTensorsAttribute(self, p_int):
        """
        V.SetTensorsAttribute(int)
        C++: virtual void SetTensorsAttribute(vtkTypeBool _arg)
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def SetTensorsWeight(self, p_float):
        """
        V.SetTensorsWeight(float)
        C++: virtual void SetTensorsWeight(double _arg)
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def SetVectorsAttribute(self, p_int):
        """
        V.SetVectorsAttribute(int)
        C++: virtual void SetVectorsAttribute(vtkTypeBool _arg)
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def SetVectorsWeight(self, p_float):
        """
        V.SetVectorsWeight(float)
        C++: virtual void SetVectorsWeight(double _arg)
        
        Set/Get the scaling weight contribution of the attribute. These
        values are used to weight the contribution of the attributes
        towards the error metric.
        """
        ...
    
    def SetVolumePreservation(self, p_int):
        """
        V.SetVolumePreservation(int)
        C++: virtual void SetVolumePreservation(vtkTypeBool _arg)
        
        Decide whether to activate volume preservation which greatly
        reduces errors in triangle normal direction. If off, volume
        preservation is disabled and if AttributeErrorMetric is active,
        these errors can be large. By default VolumePreservation is off
        the attribute errors are off.
        """
        ...
    
    def TCoordsAttributeOff(self):
        """
        V.TCoordsAttributeOff()
        C++: virtual void TCoordsAttributeOff()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def TCoordsAttributeOn(self):
        """
        V.TCoordsAttributeOn()
        C++: virtual void TCoordsAttributeOn()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def TensorsAttributeOff(self):
        """
        V.TensorsAttributeOff()
        C++: virtual void TensorsAttributeOff()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def TensorsAttributeOn(self):
        """
        V.TensorsAttributeOn()
        C++: virtual void TensorsAttributeOn()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def VectorsAttributeOff(self):
        """
        V.VectorsAttributeOff()
        C++: virtual void VectorsAttributeOff()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def VectorsAttributeOn(self):
        """
        V.VectorsAttributeOn()
        C++: virtual void VectorsAttributeOn()
        
        If attribute errors are to be included in the metric (i.e.,
        AttributeErrorMetric is on), then the following flags control
        which attributes are to be included in the error calculation. By
        default all of these are on.
        """
        ...
    
    def VolumePreservationOff(self):
        """
        V.VolumePreservationOff()
        C++: virtual void VolumePreservationOff()
        
        Decide whether to activate volume preservation which greatly
        reduces errors in triangle normal direction. If off, volume
        preservation is disabled and if AttributeErrorMetric is active,
        these errors can be large. By default VolumePreservation is off
        the attribute errors are off.
        """
        ...
    
    def VolumePreservationOn(self):
        """
        V.VolumePreservationOn()
        C++: virtual void VolumePreservationOn()
        
        Decide whether to activate volume preservation which greatly
        reduces errors in triangle normal direction. If off, volume
        preservation is disabled and if AttributeErrorMetric is active,
        these errors can be large. By default VolumePreservation is off
        the attribute errors are off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


