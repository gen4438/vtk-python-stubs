"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMassProperties(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkMassProperties - estimate volume, area, shape index of triangle
    mesh
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkMassProperties estimates the volume, the surface area, and the
    normalized shape index of a triangle mesh.  The algorithm implemented
    here is based on the discrete form of the divergence theorem.  The
    general assumption here is that the model is of closed surface.  For
    more details see the following reference (Alyassin A.M. et al,
    "Evaluation of new algorithms for the interactive measurement of
    surface area and volume", Med Phys 21(6) 1994.).
    
    @warning
    Currently only triangles are processed. Use vtkTriangleFilter to
    convert any strips or polygons to triangles. If multiple closed
    objects are defined consider using vtkMultiObjectMassProperties.
    Alternatively, vtkPolyDataConnectivityFilter can be used to extract
    connected regions (i.e., objects) one at a time, and then each object
    can be processed by this filter.
    
    @sa
    vtkTriangleFilter vtkMultiObjectMassProperties
    """
    def GetKx(self):
        """
        V.GetKx() -> float
        C++: double GetKx()
        
        Compute and return the weighting factors for the maximum unit
        normal component (MUNC).
        """
        ...
    
    def GetKy(self):
        """
        V.GetKy() -> float
        C++: double GetKy()
        """
        ...
    
    def GetKz(self):
        """
        V.GetKz() -> float
        C++: double GetKz()
        """
        ...
    
    def GetMaxCellArea(self):
        """
        V.GetMaxCellArea() -> float
        C++: double GetMaxCellArea()
        
        Compute and return the max cell area.
        """
        ...
    
    def GetMinCellArea(self):
        """
        V.GetMinCellArea() -> float
        C++: double GetMinCellArea()
        
        Compute and return the min cell area.
        """
        ...
    
    def GetNormalizedShapeIndex(self):
        """
        V.GetNormalizedShapeIndex() -> float
        C++: double GetNormalizedShapeIndex()
        
        Compute and return the normalized shape index. This characterizes
        the deviation of the shape of an object from a sphere. A sphere's
        NSI is one. This number is always >= 1.0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSurfaceArea(self):
        """
        V.GetSurfaceArea() -> float
        C++: double GetSurfaceArea()
        
        Compute and return the area.
        """
        ...
    
    def GetVolume(self):
        """
        V.GetVolume() -> float
        C++: double GetVolume()
        
        Compute and return the volume.
        """
        ...
    
    def GetVolumeProjected(self):
        """
        V.GetVolumeProjected() -> float
        C++: double GetVolumeProjected()
        
        Compute and return the projected volume. Typically you should
        compare this volume to the value returned by GetVolume if you get
        an error (GetVolume()-GetVolumeProjected())*10000 that is greater
        than GetVolume() this should identify a problem:
        * Either the polydata is not closed
        * Or the polydata contains triangle that are flipped
        """
        ...
    
    def GetVolumeX(self):
        """
        V.GetVolumeX() -> float
        C++: double GetVolumeX()
        
        Compute and return the volume projected on to each axis aligned
        plane.
        """
        ...
    
    def GetVolumeY(self):
        """
        V.GetVolumeY() -> float
        C++: double GetVolumeY()
        """
        ...
    
    def GetVolumeZ(self):
        """
        V.GetVolumeZ() -> float
        C++: double GetVolumeZ()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMassProperties
        C++: vtkMassProperties *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMassProperties
        C++: static vtkMassProperties *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


