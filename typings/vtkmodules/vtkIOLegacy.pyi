"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOCore as __vtkmodules_vtkIOCore

VTK_ASCII = ...
VTK_BINARY = ...
class vtkDataReader(__vtkmodules_vtkCommonExecutionModel.vtkSimpleReader):
    """
    vtkDataReader - helper superclass for objects that read vtk data files
    
    Superclass: vtkSimpleReader
    
    vtkDataReader is a helper superclass that reads the vtk data file
    header, dataset type, and attribute data (point and cell attributes
    such as scalars, vectors, normals, etc.) from a vtk data file.  See
    text for the format of the various vtk file types.
    
    @sa
    vtkPolyDataReader vtkStructuredPointsReader vtkStructuredGridReader
    vtkUnstructuredGridReader vtkRectilinearGridReader
    """
    def CloseVTKFile(self):
        """
        V.CloseVTKFile()
        C++: void CloseVTKFile()
        
        Close the vtk file.
        """
        ...
    
    def GetFieldDataName(self):
        """
        V.GetFieldDataName() -> string
        C++: virtual char *GetFieldDataName()
        
        Set the name of the field data to extract. If not specified, uses
        first field data encountered in file.
        """
        ...
    
    def GetFieldDataNameInFile(self, p_int):
        """
        V.GetFieldDataNameInFile(int) -> string
        C++: const char *GetFieldDataNameInFile(int i)
        
        What is the name of the ith attribute of a certain type in this
        file? This requires reading the file, so the filename must be set
        prior to invoking this operation.
        """
        ...
    
    def GetFileMajorVersion(self):
        """
        V.GetFileMajorVersion() -> int
        C++: virtual int GetFileMajorVersion()
        
        Return major and minor version of the file. Returns version 3.0
        if the version cannot be read from file.
        """
        ...
    
    def GetFileMinorVersion(self):
        """
        V.GetFileMinorVersion() -> int
        C++: virtual int GetFileMinorVersion()
        
        Return major and minor version of the file. Returns version 3.0
        if the version cannot be read from file.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: const char *GetFileName()
        V.GetFileName(int) -> string
        C++: const char *GetFileName(int i)
        
        Specify file name of vtk data file to read. This is just a
        convenience method that calls the superclass' AddFileName method.
        """
        ...
    
    def GetFileType(self):
        """
        V.GetFileType() -> int
        C++: virtual int GetFileType()
        
        Get the type of file (ASCII or BINARY). Returned value only valid
        after file has been read.
        """
        ...
    
    def GetHeader(self):
        """
        V.GetHeader() -> string
        C++: virtual char *GetHeader()
        
        Get the header from the vtk data file.
        """
        ...
    
    def GetInputArray(self):
        """
        V.GetInputArray() -> vtkCharArray
        C++: virtual vtkCharArray *GetInputArray()
        
        Specify the vtkCharArray to be used  when reading from a string.
        If set, this array has precedence over InputString. Use this
        instead of InputString to avoid the extra memory copy. It should
        be noted that if the underlying char* is owned by the user (
        vtkCharArray::SetArray(array, 1); ) and is deleted before the
        reader, bad things will happen during a pipeline update.
        """
        ...
    
    def GetInputString(self):
        """
        V.GetInputString() -> string
        C++: virtual char *GetInputString()
        
        Specify the InputString for use when reading from a character
        array. Optionally include the length for binary strings. Note
        that a copy of the string is made and stored. If this causes
        exceedingly large memory consumption, consider using InputArray
        instead.
        """
        ...
    
    def GetInputStringLength(self):
        """
        V.GetInputStringLength() -> int
        C++: virtual int GetInputStringLength()
        
        Specify the InputString for use when reading from a character
        array. Optionally include the length for binary strings. Note
        that a copy of the string is made and stored. If this causes
        exceedingly large memory consumption, consider using InputArray
        instead.
        """
        ...
    
    def GetLookupTableName(self):
        """
        V.GetLookupTableName() -> string
        C++: virtual char *GetLookupTableName()
        
        Set the name of the lookup table data to extract. If not
        specified, uses lookup table named by scalar. Otherwise, this
        specification supersedes.
        """
        ...
    
    def GetNormalsName(self):
        """
        V.GetNormalsName() -> string
        C++: virtual char *GetNormalsName()
        
        Set the name of the normal data to extract. If not specified,
        first normal data encountered is extracted.
        """
        ...
    
    def GetNormalsNameInFile(self, p_int):
        """
        V.GetNormalsNameInFile(int) -> string
        C++: const char *GetNormalsNameInFile(int i)
        
        What is the name of the ith attribute of a certain type in this
        file? This requires reading the file, so the filename must be set
        prior to invoking this operation.
        """
        ...
    
    def GetNumberOfFieldDataInFile(self):
        """
        V.GetNumberOfFieldDataInFile() -> int
        C++: int GetNumberOfFieldDataInFile()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfNormalsInFile(self):
        """
        V.GetNumberOfNormalsInFile() -> int
        C++: int GetNumberOfNormalsInFile()
        """
        ...
    
    def GetNumberOfScalarsInFile(self):
        """
        V.GetNumberOfScalarsInFile() -> int
        C++: int GetNumberOfScalarsInFile()
        
        How many attributes of various types are in this file? This
        requires reading the file, so the filename must be set prior to
        invoking this operation. (Note: file characteristics are cached,
        so only a single read is necessary to return file
        characteristics.)
        """
        ...
    
    def GetNumberOfTCoordsInFile(self):
        """
        V.GetNumberOfTCoordsInFile() -> int
        C++: int GetNumberOfTCoordsInFile()
        """
        ...
    
    def GetNumberOfTensorsInFile(self):
        """
        V.GetNumberOfTensorsInFile() -> int
        C++: int GetNumberOfTensorsInFile()
        """
        ...
    
    def GetNumberOfVectorsInFile(self):
        """
        V.GetNumberOfVectorsInFile() -> int
        C++: int GetNumberOfVectorsInFile()
        """
        ...
    
    def GetReadAllColorScalars(self):
        """
        V.GetReadAllColorScalars() -> int
        C++: virtual vtkTypeBool GetReadAllColorScalars()
        
        Enable reading all color scalars.
        """
        ...
    
    def GetReadAllFields(self):
        """
        V.GetReadAllFields() -> int
        C++: virtual vtkTypeBool GetReadAllFields()
        
        Enable reading all fields.
        """
        ...
    
    def GetReadAllNormals(self):
        """
        V.GetReadAllNormals() -> int
        C++: virtual vtkTypeBool GetReadAllNormals()
        
        Enable reading all normals.
        """
        ...
    
    def GetReadAllScalars(self):
        """
        V.GetReadAllScalars() -> int
        C++: virtual vtkTypeBool GetReadAllScalars()
        
        Enable reading all scalars.
        """
        ...
    
    def GetReadAllTCoords(self):
        """
        V.GetReadAllTCoords() -> int
        C++: virtual vtkTypeBool GetReadAllTCoords()
        
        Enable reading all tcoords.
        """
        ...
    
    def GetReadAllTensors(self):
        """
        V.GetReadAllTensors() -> int
        C++: virtual vtkTypeBool GetReadAllTensors()
        
        Enable reading all tensors.
        """
        ...
    
    def GetReadAllVectors(self):
        """
        V.GetReadAllVectors() -> int
        C++: virtual vtkTypeBool GetReadAllVectors()
        
        Enable reading all vectors.
        """
        ...
    
    def GetReadFromInputString(self):
        """
        V.GetReadFromInputString() -> int
        C++: virtual vtkTypeBool GetReadFromInputString()
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def GetScalarsName(self):
        """
        V.GetScalarsName() -> string
        C++: virtual char *GetScalarsName()
        
        Set the name of the scalar data to extract. If not specified,
        first scalar data encountered is extracted.
        """
        ...
    
    def GetScalarsNameInFile(self, p_int):
        """
        V.GetScalarsNameInFile(int) -> string
        C++: const char *GetScalarsNameInFile(int i)
        
        What is the name of the ith attribute of a certain type in this
        file? This requires reading the file, so the filename must be set
        prior to invoking this operation.
        """
        ...
    
    def GetTCoordsName(self):
        """
        V.GetTCoordsName() -> string
        C++: virtual char *GetTCoordsName()
        
        Set the name of the texture coordinate data to extract. If not
        specified, first texture coordinate data encountered is
        extracted.
        """
        ...
    
    def GetTCoordsNameInFile(self, p_int):
        """
        V.GetTCoordsNameInFile(int) -> string
        C++: const char *GetTCoordsNameInFile(int i)
        
        What is the name of the ith attribute of a certain type in this
        file? This requires reading the file, so the filename must be set
        prior to invoking this operation.
        """
        ...
    
    def GetTensorsName(self):
        """
        V.GetTensorsName() -> string
        C++: virtual char *GetTensorsName()
        
        Set the name of the tensor data to extract. If not specified,
        first tensor data encountered is extracted.
        """
        ...
    
    def GetTensorsNameInFile(self, p_int):
        """
        V.GetTensorsNameInFile(int) -> string
        C++: const char *GetTensorsNameInFile(int i)
        
        What is the name of the ith attribute of a certain type in this
        file? This requires reading the file, so the filename must be set
        prior to invoking this operation.
        """
        ...
    
    def GetVectorsName(self):
        """
        V.GetVectorsName() -> string
        C++: virtual char *GetVectorsName()
        
        Set the name of the vector data to extract. If not specified,
        first vector data encountered is extracted.
        """
        ...
    
    def GetVectorsNameInFile(self, p_int):
        """
        V.GetVectorsNameInFile(int) -> string
        C++: const char *GetVectorsNameInFile(int i)
        
        What is the name of the ith attribute of a certain type in this
        file? This requires reading the file, so the filename must be set
        prior to invoking this operation.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsFilePolyData(self):
        """
        V.IsFilePolyData() -> int
        C++: int IsFilePolyData()
        
        Is the file a valid vtk file of the passed dataset type ? The
        dataset type is passed as a lower case string.
        """
        ...
    
    def IsFileRectilinearGrid(self):
        """
        V.IsFileRectilinearGrid() -> int
        C++: int IsFileRectilinearGrid()
        
        Is the file a valid vtk file of the passed dataset type ? The
        dataset type is passed as a lower case string.
        """
        ...
    
    def IsFileStructuredGrid(self):
        """
        V.IsFileStructuredGrid() -> int
        C++: int IsFileStructuredGrid()
        
        Is the file a valid vtk file of the passed dataset type ? The
        dataset type is passed as a lower case string.
        """
        ...
    
    def IsFileStructuredPoints(self):
        """
        V.IsFileStructuredPoints() -> int
        C++: int IsFileStructuredPoints()
        
        Is the file a valid vtk file of the passed dataset type ? The
        dataset type is passed as a lower case string.
        """
        ...
    
    def IsFileUnstructuredGrid(self):
        """
        V.IsFileUnstructuredGrid() -> int
        C++: int IsFileUnstructuredGrid()
        
        Is the file a valid vtk file of the passed dataset type ? The
        dataset type is passed as a lower case string.
        """
        ...
    
    def IsFileValid(self, string):
        """
        V.IsFileValid(string) -> int
        C++: int IsFileValid(const char *dstype)
        
        Is the file a valid vtk file of the passed dataset type ? The
        dataset type is passed as a lower case string.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LowerCase(self, string, p_int):
        """
        V.LowerCase(string, int) -> string
        C++: char *LowerCase(char *str, const size_t len=256)
        
        Helper method for reading in data.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataReader
        C++: vtkDataReader *NewInstance()
        """
        ...
    
    def OpenVTKFile(self, string):
        """
        V.OpenVTKFile(string) -> int
        C++: int OpenVTKFile(const char *fname=nullptr)
        
        Open a vtk data file. Returns zero if error.
        """
        ...
    
    def Peek(self, string, p_int):
        """
        V.Peek(string, int) -> int
        C++: size_t Peek(char *str, size_t n)
        
        Read n character from the stream into str, then reset the stream
        position. Returns the number of characters actually read.
        """
        ...
    
    def Read(self, string):
        """
        V.Read(string) -> int
        C++: int Read(char *)
        V.Read([int, ...]) -> int
        C++: int Read(int *)
        V.Read([int, ...]) -> int
        C++: int Read(long *)
        V.Read([int, ...]) -> int
        C++: int Read(long long *result)
        V.Read([float, ...]) -> int
        C++: int Read(double *)
        
        Internal function to read in a value.  Returns zero if there was
        an error.
        """
        ...
    
    def ReadAllColorScalarsOff(self):
        """
        V.ReadAllColorScalarsOff()
        C++: virtual void ReadAllColorScalarsOff()
        
        Enable reading all color scalars.
        """
        ...
    
    def ReadAllColorScalarsOn(self):
        """
        V.ReadAllColorScalarsOn()
        C++: virtual void ReadAllColorScalarsOn()
        
        Enable reading all color scalars.
        """
        ...
    
    def ReadAllFieldsOff(self):
        """
        V.ReadAllFieldsOff()
        C++: virtual void ReadAllFieldsOff()
        
        Enable reading all fields.
        """
        ...
    
    def ReadAllFieldsOn(self):
        """
        V.ReadAllFieldsOn()
        C++: virtual void ReadAllFieldsOn()
        
        Enable reading all fields.
        """
        ...
    
    def ReadAllNormalsOff(self):
        """
        V.ReadAllNormalsOff()
        C++: virtual void ReadAllNormalsOff()
        
        Enable reading all normals.
        """
        ...
    
    def ReadAllNormalsOn(self):
        """
        V.ReadAllNormalsOn()
        C++: virtual void ReadAllNormalsOn()
        
        Enable reading all normals.
        """
        ...
    
    def ReadAllScalarsOff(self):
        """
        V.ReadAllScalarsOff()
        C++: virtual void ReadAllScalarsOff()
        
        Enable reading all scalars.
        """
        ...
    
    def ReadAllScalarsOn(self):
        """
        V.ReadAllScalarsOn()
        C++: virtual void ReadAllScalarsOn()
        
        Enable reading all scalars.
        """
        ...
    
    def ReadAllTCoordsOff(self):
        """
        V.ReadAllTCoordsOff()
        C++: virtual void ReadAllTCoordsOff()
        
        Enable reading all tcoords.
        """
        ...
    
    def ReadAllTCoordsOn(self):
        """
        V.ReadAllTCoordsOn()
        C++: virtual void ReadAllTCoordsOn()
        
        Enable reading all tcoords.
        """
        ...
    
    def ReadAllTensorsOff(self):
        """
        V.ReadAllTensorsOff()
        C++: virtual void ReadAllTensorsOff()
        
        Enable reading all tensors.
        """
        ...
    
    def ReadAllTensorsOn(self):
        """
        V.ReadAllTensorsOn()
        C++: virtual void ReadAllTensorsOn()
        
        Enable reading all tensors.
        """
        ...
    
    def ReadAllVectorsOff(self):
        """
        V.ReadAllVectorsOff()
        C++: virtual void ReadAllVectorsOff()
        
        Enable reading all vectors.
        """
        ...
    
    def ReadAllVectorsOn(self):
        """
        V.ReadAllVectorsOn()
        C++: virtual void ReadAllVectorsOn()
        
        Enable reading all vectors.
        """
        ...
    
    def ReadArray(self, string, p_int, p_int_1):
        """
        V.ReadArray(string, int, int) -> vtkAbstractArray
        C++: vtkAbstractArray *ReadArray(const char *dataType,
            vtkIdType numTuples, vtkIdType numComp)
        
        Helper functions for reading data.
        """
        ...
    
    def ReadArrays(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadArrays(int, int, int, int, vtkDataObject) -> int
        C++: int ReadArrays(int, int, int, int, vtkDataObject *) override;
        
        Overridden to handle reading from a string. The superclass only
        knows about files.
        """
        ...
    
    def ReadArraysSimple(self, string, vtkDataObject):
        """
        V.ReadArraysSimple(string, vtkDataObject) -> int
        C++: int ReadArraysSimple(const std::string &, vtkDataObject *)
            override;
        
        Overridden with default implementation of doing nothing so that
        subclasses only override what is needed (usually only ReadMesh).
        """
        ...
    
    def ReadCellData(self, vtkDataSet, p_int):
        """
        V.ReadCellData(vtkDataSet, int) -> int
        C++: int ReadCellData(vtkDataSet *ds, vtkIdType numCells)
        
        Read the cell data of a vtk data file. The number of cells (from
        the dataset) must match the number of cells defined in cell
        attributes (unless no geometry was defined).
        """
        ...
    
    def ReadCells(self, vtkSmartPointer_I12vtkCellArrayE):
        """
        V.ReadCells(vtkSmartPointer_I12vtkCellArrayE) -> int
        C++: int ReadCells(vtkSmartPointer<vtkCellArray> &cellArray)
        
        Read cells in a vtkCellArray, and update the smartpointer
        reference passed in. If no cells are present in the file,
        cellArray will be set to nullptr. Returns 0 if error.
        """
        ...
    
    def ReadCellsLegacy(self, p_int, *int):
        """
        V.ReadCellsLegacy(int, [int, ...]) -> int
        C++: int ReadCellsLegacy(vtkIdType size, int *data)
        V.ReadCellsLegacy(int, [int, ...], int, int, int) -> int
        C++: int ReadCellsLegacy(vtkIdType size, int *data, int skip1,
            int read2, int skip3)
        
        Read a bunch of "cells". Return 0 if error.
        
        ote Legacy implementation for file versions < 5.0.
        """
        ...
    
    def ReadCoordinates(self, vtkRectilinearGrid, p_int, p_int_1):
        """
        V.ReadCoordinates(vtkRectilinearGrid, int, int) -> int
        C++: int ReadCoordinates(vtkRectilinearGrid *rg, int axes,
            int numCoords)
        
        Read the coordinates for a rectilinear grid. The axes parameter
        specifies which coordinate axes (0,1,2) is being read.
        """
        ...
    
    def ReadEdgeData(self, vtkGraph, p_int):
        """
        V.ReadEdgeData(vtkGraph, int) -> int
        C++: int ReadEdgeData(vtkGraph *g, vtkIdType numEdges)
        
        Read the edge data of a vtk data file. The number of edges (from
        the graph) must match the number of edges defined in edge
        attributes (unless no geometry was defined).
        """
        ...
    
    def ReadFieldData(self, FieldType):
        """
        V.ReadFieldData(FieldType) -> vtkFieldData
        C++: vtkFieldData *ReadFieldData(FieldType fieldType=FIELD_DATA)
        
        Helper functions for reading data.
        """
        ...
    
    def ReadFromInputStringOff(self):
        """
        V.ReadFromInputStringOff()
        C++: virtual void ReadFromInputStringOff()
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def ReadFromInputStringOn(self):
        """
        V.ReadFromInputStringOn()
        C++: virtual void ReadFromInputStringOn()
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def ReadHeader(self, string):
        """
        V.ReadHeader(string) -> int
        C++: int ReadHeader(const char *fname=nullptr)
        
        Read the header of a vtk data file. Returns 0 if error.
        """
        ...
    
    def ReadLine(self, char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=...):
        """
        V.ReadLine([char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char]) -> int
        C++: int ReadLine(char result[256])
        
        Internal function to read in a line up to 256 characters. Returns
        zero if there was an error.
        """
        ...
    
    def ReadMesh(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadMesh(int, int, int, int, vtkDataObject) -> int
        C++: int ReadMesh(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        Overridden to handle reading from a string. The superclass only
        knows about files.
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &, vtkDataObject *)
            override;
        
        Overridden with default implementation of doing nothing so that
        subclasses only override what is needed (usually only ReadMesh).
        """
        ...
    
    def ReadPointCoordinates(self, vtkPointSet, p_int):
        """
        V.ReadPointCoordinates(vtkPointSet, int) -> int
        C++: int ReadPointCoordinates(vtkPointSet *ps, vtkIdType numPts)
        V.ReadPointCoordinates(vtkGraph, int) -> int
        C++: int ReadPointCoordinates(vtkGraph *g, vtkIdType numPts)
        
        Read point coordinates. Return 0 if error.
        """
        ...
    
    def ReadPointData(self, vtkDataSet, p_int):
        """
        V.ReadPointData(vtkDataSet, int) -> int
        C++: int ReadPointData(vtkDataSet *ds, vtkIdType numPts)
        
        Read the point data of a vtk data file. The number of points
        (from the dataset) must match the number of points defined in
        point attributes (unless no geometry was defined).
        """
        ...
    
    def ReadPoints(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadPoints(int, int, int, int, vtkDataObject) -> int
        C++: int ReadPoints(int, int, int, int, vtkDataObject *) override;
        
        Overridden to handle reading from a string. The superclass only
        knows about files.
        """
        ...
    
    def ReadPointsSimple(self, string, vtkDataObject):
        """
        V.ReadPointsSimple(string, vtkDataObject) -> int
        C++: int ReadPointsSimple(const std::string &, vtkDataObject *)
            override;
        
        Overridden with default implementation of doing nothing so that
        subclasses only override what is needed (usually only ReadMesh).
        """
        ...
    
    def ReadRowData(self, vtkTable, p_int):
        """
        V.ReadRowData(vtkTable, int) -> int
        C++: int ReadRowData(vtkTable *t, vtkIdType numEdges)
        
        Read the row data of a vtk data file.
        """
        ...
    
    def ReadString(self, char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=..., char=...):
        """
        V.ReadString([char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char, char, char,
            char, char, char, char, char, char, char, char]) -> int
        C++: int ReadString(char result[256])
        
        Internal function to read in a string up to 256 characters.
        Returns zero if there was an error.
        """
        ...
    
    def ReadTimeDependentMetaData(self, p_int, vtkInformation):
        """
        V.ReadTimeDependentMetaData(int, vtkInformation) -> int
        C++: int ReadTimeDependentMetaData(int timestep,
            vtkInformation *metadata) override;
        
        Overridden to handle reading from a string. The superclass only
        knows about files.
        """
        ...
    
    def ReadVertexData(self, vtkGraph, p_int):
        """
        V.ReadVertexData(vtkGraph, int) -> int
        C++: int ReadVertexData(vtkGraph *g, vtkIdType numVertices)
        
        Read the vertex data of a vtk data file. The number of vertices
        (from the graph) must match the number of vertices defined in
        vertex attributes (unless no geometry was defined).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataReader
        C++: static vtkDataReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBinaryInputString(self, string, p_int):
        """
        V.SetBinaryInputString(string, int)
        C++: void SetBinaryInputString(const char *, int len)
        
        Specify the InputString for use when reading from a character
        array. Optionally include the length for binary strings. Note
        that a copy of the string is made and stored. If this causes
        exceedingly large memory consumption, consider using InputArray
        instead.
        """
        ...
    
    def SetFieldDataName(self, string):
        """
        V.SetFieldDataName(string)
        C++: virtual void SetFieldDataName(const char *_arg)
        
        Set the name of the field data to extract. If not specified, uses
        first field data encountered in file.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fname)
        
        Specify file name of vtk data file to read. This is just a
        convenience method that calls the superclass' AddFileName method.
        """
        ...
    
    def SetInputArray(self, vtkCharArray):
        """
        V.SetInputArray(vtkCharArray)
        C++: virtual void SetInputArray(vtkCharArray *)
        
        Specify the vtkCharArray to be used  when reading from a string.
        If set, this array has precedence over InputString. Use this
        instead of InputString to avoid the extra memory copy. It should
        be noted that if the underlying char* is owned by the user (
        vtkCharArray::SetArray(array, 1); ) and is deleted before the
        reader, bad things will happen during a pipeline update.
        """
        ...
    
    def SetInputString(self, string, p_int):
        """
        V.SetInputString(string, int)
        C++: void SetInputString(const char *in, int len)
        V.SetInputString(string)
        C++: void SetInputString(const vtkStdString &input)
        
        Specify the InputString for use when reading from a character
        array. Optionally include the length for binary strings. Note
        that a copy of the string is made and stored. If this causes
        exceedingly large memory consumption, consider using InputArray
        instead.
        """
        ...
    
    def SetLookupTableName(self, string):
        """
        V.SetLookupTableName(string)
        C++: virtual void SetLookupTableName(const char *_arg)
        
        Set the name of the lookup table data to extract. If not
        specified, uses lookup table named by scalar. Otherwise, this
        specification supersedes.
        """
        ...
    
    def SetNormalsName(self, string):
        """
        V.SetNormalsName(string)
        C++: virtual void SetNormalsName(const char *_arg)
        
        Set the name of the normal data to extract. If not specified,
        first normal data encountered is extracted.
        """
        ...
    
    def SetReadAllColorScalars(self, p_int):
        """
        V.SetReadAllColorScalars(int)
        C++: virtual void SetReadAllColorScalars(vtkTypeBool _arg)
        
        Enable reading all color scalars.
        """
        ...
    
    def SetReadAllFields(self, p_int):
        """
        V.SetReadAllFields(int)
        C++: virtual void SetReadAllFields(vtkTypeBool _arg)
        
        Enable reading all fields.
        """
        ...
    
    def SetReadAllNormals(self, p_int):
        """
        V.SetReadAllNormals(int)
        C++: virtual void SetReadAllNormals(vtkTypeBool _arg)
        
        Enable reading all normals.
        """
        ...
    
    def SetReadAllScalars(self, p_int):
        """
        V.SetReadAllScalars(int)
        C++: virtual void SetReadAllScalars(vtkTypeBool _arg)
        
        Enable reading all scalars.
        """
        ...
    
    def SetReadAllTCoords(self, p_int):
        """
        V.SetReadAllTCoords(int)
        C++: virtual void SetReadAllTCoords(vtkTypeBool _arg)
        
        Enable reading all tcoords.
        """
        ...
    
    def SetReadAllTensors(self, p_int):
        """
        V.SetReadAllTensors(int)
        C++: virtual void SetReadAllTensors(vtkTypeBool _arg)
        
        Enable reading all tensors.
        """
        ...
    
    def SetReadAllVectors(self, p_int):
        """
        V.SetReadAllVectors(int)
        C++: virtual void SetReadAllVectors(vtkTypeBool _arg)
        
        Enable reading all vectors.
        """
        ...
    
    def SetReadFromInputString(self, p_int):
        """
        V.SetReadFromInputString(int)
        C++: virtual void SetReadFromInputString(vtkTypeBool _arg)
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def SetScalarsName(self, string):
        """
        V.SetScalarsName(string)
        C++: virtual void SetScalarsName(const char *_arg)
        
        Set the name of the scalar data to extract. If not specified,
        first scalar data encountered is extracted.
        """
        ...
    
    def SetTCoordsName(self, string):
        """
        V.SetTCoordsName(string)
        C++: virtual void SetTCoordsName(const char *_arg)
        
        Set the name of the texture coordinate data to extract. If not
        specified, first texture coordinate data encountered is
        extracted.
        """
        ...
    
    def SetTensorsName(self, string):
        """
        V.SetTensorsName(string)
        C++: virtual void SetTensorsName(const char *_arg)
        
        Set the name of the tensor data to extract. If not specified,
        first tensor data encountered is extracted.
        """
        ...
    
    def SetVectorsName(self, string):
        """
        V.SetVectorsName(string)
        C++: virtual void SetVectorsName(const char *_arg)
        
        Set the name of the vector data to extract. If not specified,
        first vector data encountered is extracted.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CELL_DATA = ...
    FieldType = ...
    FIELD_DATA = ...
    POINT_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCompositeDataReader(vtkDataReader):
    """
    vtkCompositeDataReader - read vtkCompositeDataSet data file.
    
    Superclass: vtkDataReader
    
    @warning
    This is an experimental format. Use XML-based formats for writing
    composite datasets. Saving composite dataset in legacy VTK format is
    expected to change in future including changes to the file layout.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkCompositeDataSet
        C++: vtkCompositeDataSet *GetOutput()
        V.GetOutput(int) -> vtkCompositeDataSet
        C++: vtkCompositeDataSet *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCompositeDataReader
        C++: vtkCompositeDataReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCompositeDataReader
        C++: static vtkCompositeDataReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkCompositeDataSet):
        """
        V.SetOutput(vtkCompositeDataSet)
        C++: void SetOutput(vtkCompositeDataSet *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkDataWriter - helper class for objects that write vtk data files
    
    Superclass: vtkWriter
    
    vtkDataWriter is a helper class that opens and writes the vtk header
    and point data (e.g., scalars, vectors, normals, etc.) from a vtk
    data file. See text for various formats.
    
    @sa
    vtkDataSetWriter vtkPolyDataWriter vtkStructuredGridWriter
    vtkStructuredPointsWriter vtkUnstructuredGridWriter
    vtkFieldDataWriter vtkRectilinearGridWriter
    """
    def GetBinaryOutputString(self):
        """
        V.GetBinaryOutputString() -> (int, ...)
        C++: unsigned char *GetBinaryOutputString()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetEdgeFlagsName(self):
        """
        V.GetEdgeFlagsName() -> string
        C++: virtual char *GetEdgeFlagsName()
        
        Give a name to the edge flags data. If not specified, uses
        default name "edge_flags".
        """
        ...
    
    def GetFieldDataName(self):
        """
        V.GetFieldDataName() -> string
        C++: virtual char *GetFieldDataName()
        
        Give a name to the field data. If not specified, uses default
        name "field".
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def GetFileType(self):
        """
        V.GetFileType() -> int
        C++: virtual int GetFileType()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetFileTypeMaxValue(self):
        """
        V.GetFileTypeMaxValue() -> int
        C++: virtual int GetFileTypeMaxValue()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetFileTypeMinValue(self):
        """
        V.GetFileTypeMinValue() -> int
        C++: virtual int GetFileTypeMinValue()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetGlobalIdsName(self):
        """
        V.GetGlobalIdsName() -> string
        C++: virtual char *GetGlobalIdsName()
        
        Give a name to the global ids data. If not specified, uses
        default name "global_ids".
        """
        ...
    
    def GetHeader(self):
        """
        V.GetHeader() -> string
        C++: virtual char *GetHeader()
        
        Specify the header for the vtk data file.
        """
        ...
    
    def GetLookupTableName(self):
        """
        V.GetLookupTableName() -> string
        C++: virtual char *GetLookupTableName()
        
        Give a name to the lookup table. If not specified, uses default
        name "lookupTable".
        """
        ...
    
    def GetNormalsName(self):
        """
        V.GetNormalsName() -> string
        C++: virtual char *GetNormalsName()
        
        Give a name to the normals data. If not specified, uses default
        name "normals".
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputStdString(self):
        """
        V.GetOutputStdString() -> string
        C++: vtkStdString GetOutputStdString()
        
        When WriteToOutputString is on, this method returns a copy of the
        output string in a vtkStdString.
        """
        ...
    
    def GetOutputString(self):
        """
        V.GetOutputString() -> string
        C++: virtual char *GetOutputString()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetOutputStringLength(self):
        """
        V.GetOutputStringLength() -> int
        C++: virtual vtkIdType GetOutputStringLength()
        
        When WriteToOutputString in on, then a string is allocated,
        written to, and can be retrieved with these methods.  The string
        is deleted during the next call to write ...
        """
        ...
    
    def GetPedigreeIdsName(self):
        """
        V.GetPedigreeIdsName() -> string
        C++: virtual char *GetPedigreeIdsName()
        
        Give a name to the pedigree ids data. If not specified, uses
        default name "pedigree_ids".
        """
        ...
    
    def GetScalarsName(self):
        """
        V.GetScalarsName() -> string
        C++: virtual char *GetScalarsName()
        
        Give a name to the scalar data. If not specified, uses default
        name "scalars".
        """
        ...
    
    def GetTCoordsName(self):
        """
        V.GetTCoordsName() -> string
        C++: virtual char *GetTCoordsName()
        
        Give a name to the texture coordinates data. If not specified,
        uses default name "textureCoords".
        """
        ...
    
    def GetTensorsName(self):
        """
        V.GetTensorsName() -> string
        C++: virtual char *GetTensorsName()
        
        Give a name to the tensors data. If not specified, uses default
        name "tensors".
        """
        ...
    
    def GetVectorsName(self):
        """
        V.GetVectorsName() -> string
        C++: virtual char *GetVectorsName()
        
        Give a name to the vector data. If not specified, uses default
        name "vectors".
        """
        ...
    
    def GetWriteArrayMetaData(self):
        """
        V.GetWriteArrayMetaData() -> bool
        C++: virtual bool GetWriteArrayMetaData()
        
        If true, vtkInformation objects attached to arrays and array
        component nameswill be written to the output. Default is true.
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> int
        C++: virtual vtkTypeBool GetWriteToOutputString()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataWriter
        C++: vtkDataWriter *NewInstance()
        """
        ...
    
    def RegisterAndGetOutputString(self):
        """
        V.RegisterAndGetOutputString() -> string
        C++: char *RegisterAndGetOutputString()
        
        This convenience method returns the string, sets the IVAR to
        nullptr, so that the user is responsible for deleting the string.
        I am not sure what the name should be, so it may change in the
        future.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataWriter
        C++: static vtkDataWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEdgeFlagsName(self, string):
        """
        V.SetEdgeFlagsName(string)
        C++: virtual void SetEdgeFlagsName(const char *_arg)
        
        Give a name to the edge flags data. If not specified, uses
        default name "edge_flags".
        """
        ...
    
    def SetFieldDataName(self, string):
        """
        V.SetFieldDataName(string)
        C++: virtual void SetFieldDataName(const char *_arg)
        
        Give a name to the field data. If not specified, uses default
        name "field".
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def SetFileType(self, p_int):
        """
        V.SetFileType(int)
        C++: virtual void SetFileType(int _arg)
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetFileTypeToASCII(self):
        """
        V.SetFileTypeToASCII()
        C++: void SetFileTypeToASCII()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetFileTypeToBinary(self):
        """
        V.SetFileTypeToBinary()
        C++: void SetFileTypeToBinary()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetGlobalIdsName(self, string):
        """
        V.SetGlobalIdsName(string)
        C++: virtual void SetGlobalIdsName(const char *_arg)
        
        Give a name to the global ids data. If not specified, uses
        default name "global_ids".
        """
        ...
    
    def SetHeader(self, string):
        """
        V.SetHeader(string)
        C++: virtual void SetHeader(const char *_arg)
        
        Specify the header for the vtk data file.
        """
        ...
    
    def SetLookupTableName(self, string):
        """
        V.SetLookupTableName(string)
        C++: virtual void SetLookupTableName(const char *_arg)
        
        Give a name to the lookup table. If not specified, uses default
        name "lookupTable".
        """
        ...
    
    def SetNormalsName(self, string):
        """
        V.SetNormalsName(string)
        C++: virtual void SetNormalsName(const char *_arg)
        
        Give a name to the normals data. If not specified, uses default
        name "normals".
        """
        ...
    
    def SetPedigreeIdsName(self, string):
        """
        V.SetPedigreeIdsName(string)
        C++: virtual void SetPedigreeIdsName(const char *_arg)
        
        Give a name to the pedigree ids data. If not specified, uses
        default name "pedigree_ids".
        """
        ...
    
    def SetScalarsName(self, string):
        """
        V.SetScalarsName(string)
        C++: virtual void SetScalarsName(const char *_arg)
        
        Give a name to the scalar data. If not specified, uses default
        name "scalars".
        """
        ...
    
    def SetTCoordsName(self, string):
        """
        V.SetTCoordsName(string)
        C++: virtual void SetTCoordsName(const char *_arg)
        
        Give a name to the texture coordinates data. If not specified,
        uses default name "textureCoords".
        """
        ...
    
    def SetTensorsName(self, string):
        """
        V.SetTensorsName(string)
        C++: virtual void SetTensorsName(const char *_arg)
        
        Give a name to the tensors data. If not specified, uses default
        name "tensors".
        """
        ...
    
    def SetVectorsName(self, string):
        """
        V.SetVectorsName(string)
        C++: virtual void SetVectorsName(const char *_arg)
        
        Give a name to the vector data. If not specified, uses default
        name "vectors".
        """
        ...
    
    def SetWriteArrayMetaData(self, bool):
        """
        V.SetWriteArrayMetaData(bool)
        C++: virtual void SetWriteArrayMetaData(bool _arg)
        
        If true, vtkInformation objects attached to arrays and array
        component nameswill be written to the output. Default is true.
        """
        ...
    
    def SetWriteToOutputString(self, p_int):
        """
        V.SetWriteToOutputString(int)
        C++: virtual void SetWriteToOutputString(vtkTypeBool _arg)
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteArrayMetaDataOff(self):
        """
        V.WriteArrayMetaDataOff()
        C++: virtual void WriteArrayMetaDataOff()
        
        If true, vtkInformation objects attached to arrays and array
        component nameswill be written to the output. Default is true.
        """
        ...
    
    def WriteArrayMetaDataOn(self):
        """
        V.WriteArrayMetaDataOn()
        C++: virtual void WriteArrayMetaDataOn()
        
        If true, vtkInformation objects attached to arrays and array
        component nameswill be written to the output. Default is true.
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: virtual void WriteToOutputStringOff()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: virtual void WriteToOutputStringOn()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCompositeDataWriter(vtkDataWriter):
    """
    vtkCompositeDataWriter - legacy VTK file writer for
    vtkCompositeDataSet subclasses.
    
    Superclass: vtkDataWriter
    
    vtkCompositeDataWriter is a writer for writing legacy VTK files for
    vtkCompositeDataSet and subclasses.
    @warning
    This is an experimental format. Use XML-based formats for writing
    composite datasets. Saving composite dataset in legacy VTK format is
    expected to change in future including changes to the file layout.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkCompositeDataSet
        C++: vtkCompositeDataSet *GetInput()
        V.GetInput(int) -> vtkCompositeDataSet
        C++: vtkCompositeDataSet *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCompositeDataWriter
        C++: vtkCompositeDataWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCompositeDataWriter
        C++: static vtkCompositeDataWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataObjectReader(vtkDataReader):
    """
    vtkDataObjectReader - read vtk field data file
    
    Superclass: vtkDataReader
    
    vtkDataObjectReader is a source object that reads ASCII or binary
    field data files in vtk format. Fields are general matrix structures
    used represent complex data. (See text for format details).  The
    output of this reader is a single vtkDataObject.  The superclass of
    this class, vtkDataReader, provides many methods for controlling the
    reading of the data file, see vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkFieldData vtkDataObjectWriter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkDataObject
        C++: vtkDataObject *GetOutput()
        V.GetOutput(int) -> vtkDataObject
        C++: vtkDataObject *GetOutput(int idx)
        
        Get the output field of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataObjectReader
        C++: vtkDataObjectReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataObjectReader
        C++: static vtkDataObjectReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkDataObject):
        """
        V.SetOutput(vtkDataObject)
        C++: void SetOutput(vtkDataObject *)
        
        Get the output field of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataObjectWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkDataObjectWriter - write vtk field data
    
    Superclass: vtkWriter
    
    vtkDataObjectWriter is a source object that writes ASCII or binary
    field data files in vtk format. Field data is a general form of data
    in matrix form.
    
    @warning
    Binary files written on one system may not be readable on other
    systems.
    
    @sa
    vtkFieldData vtkFieldDataReader
    """
    def GetBinaryOutputString(self):
        """
        V.GetBinaryOutputString() -> (int, ...)
        C++: unsigned char *GetBinaryOutputString()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetFieldDataName(self):
        """
        V.GetFieldDataName() -> string
        C++: char *GetFieldDataName()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: char *GetFileName()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetFileType(self):
        """
        V.GetFileType() -> int
        C++: int GetFileType()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetHeader(self):
        """
        V.GetHeader() -> string
        C++: char *GetHeader()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputStdString(self):
        """
        V.GetOutputStdString() -> string
        C++: vtkStdString GetOutputStdString()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetOutputString(self):
        """
        V.GetOutputString() -> string
        C++: char *GetOutputString()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetOutputStringLength(self):
        """
        V.GetOutputStringLength() -> int
        C++: vtkIdType GetOutputStringLength()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> int
        C++: int GetWriteToOutputString()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataObjectWriter
        C++: vtkDataObjectWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataObjectWriter
        C++: static vtkDataObjectWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFieldDataName(self, string):
        """
        V.SetFieldDataName(string)
        C++: void SetFieldDataName(const char *fieldname)
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *filename)
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def SetFileType(self, p_int):
        """
        V.SetFileType(int)
        C++: void SetFileType(int type)
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def SetFileTypeToASCII(self):
        """
        V.SetFileTypeToASCII()
        C++: void SetFileTypeToASCII()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def SetFileTypeToBinary(self):
        """
        V.SetFileTypeToBinary()
        C++: void SetFileTypeToBinary()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def SetHeader(self, string):
        """
        V.SetHeader(string)
        C++: void SetHeader(const char *header)
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def SetWriteToOutputString(self, p_int):
        """
        V.SetWriteToOutputString(int)
        C++: void SetWriteToOutputString(int b)
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: void WriteToOutputStringOff()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: void WriteToOutputStringOn()
        
        Methods delegated to vtkDataWriter, see vtkDataWriter.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataSetReader(vtkDataReader):
    """
    vtkDataSetReader - class to read any type of vtk dataset
    
    Superclass: vtkDataReader
    
    vtkDataSetReader is a class that provides instance variables and
    methods to read any type of dataset in Visualization Toolkit (vtk)
    format.  The output type of this class will vary depending upon the
    type of data file. Convenience methods are provided to keep the data
    as a particular type. (See text for format description details). The
    superclass of this class, vtkDataReader, provides many methods for
    controlling the reading of the data file, see vtkDataReader for more
    information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkDataReader vtkPolyDataReader vtkRectilinearGridReader
    vtkStructuredPointsReader vtkStructuredGridReader
    vtkUnstructuredGridReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkDataSet
        C++: vtkDataSet *GetOutput()
        V.GetOutput(int) -> vtkDataSet
        C++: vtkDataSet *GetOutput(int idx)
        
        Get the output of this filter
        """
        ...
    
    def GetPolyDataOutput(self):
        """
        V.GetPolyDataOutput() -> vtkPolyData
        C++: vtkPolyData *GetPolyDataOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetRectilinearGridOutput(self):
        """
        V.GetRectilinearGridOutput() -> vtkRectilinearGrid
        C++: vtkRectilinearGrid *GetRectilinearGridOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetStructuredGridOutput(self):
        """
        V.GetStructuredGridOutput() -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetStructuredGridOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetStructuredPointsOutput(self):
        """
        V.GetStructuredPointsOutput() -> vtkStructuredPoints
        C++: vtkStructuredPoints *GetStructuredPointsOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetUnstructuredGridOutput(self):
        """
        V.GetUnstructuredGridOutput() -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetUnstructuredGridOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataSetReader
        C++: vtkDataSetReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def ReadMetaDataSimple(self, string, vtkInformation):
        """
        V.ReadMetaDataSimple(string, vtkInformation) -> int
        C++: int ReadMetaDataSimple(const std::string &fname,
            vtkInformation *metadata) override;
        
        Read metadata from file.
        """
        ...
    
    def ReadOutputType(self):
        """
        V.ReadOutputType() -> int
        C++: virtual int ReadOutputType()
        
        This method can be used to find out the type of output expected
        without needing to read the whole file.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataSetReader
        C++: static vtkDataSetReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataSetWriter(vtkDataWriter):
    """
    vtkDataSetWriter - write any type of vtk dataset to file
    
    Superclass: vtkDataWriter
    
    vtkDataSetWriter is an abstract class for mapper objects that write
    their data to disk (or into a communications port). The input to this
    object is a dataset of any type.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkDataSet
        C++: vtkDataSet *GetInput()
        V.GetInput(int) -> vtkDataSet
        C++: vtkDataSet *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataSetWriter
        C++: vtkDataSetWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataSetWriter
        C++: static vtkDataSetWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGenericDataObjectReader(vtkDataReader):
    """
    vtkGenericDataObjectReader - class to read any type of vtk data object
    
    Superclass: vtkDataReader
    
    vtkGenericDataObjectReader is a class that provides instance
    variables and methods to read any type of data object in
    Visualization Toolkit (vtk) format.  The output type of this class
    will vary depending upon the type of data file. Convenience methods
    are provided to return the data as a particular type. (See text for
    format description details). The superclass of this class,
    vtkDataReader, provides many methods for controlling the reading of
    the data file, see vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkDataReader vtkGraphReader vtkPolyDataReader
    vtkRectilinearGridReader vtkStructuredPointsReader
    vtkStructuredGridReader vtkTableReader vtkTreeReader
    vtkUnstructuredGridReader
    """
    def GetGraphOutput(self):
        """
        V.GetGraphOutput() -> vtkGraph
        C++: vtkGraph *GetGraphOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetMoleculeOutput(self):
        """
        V.GetMoleculeOutput() -> vtkMolecule
        C++: vtkMolecule *GetMoleculeOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkDataObject
        C++: vtkDataObject *GetOutput()
        V.GetOutput(int) -> vtkDataObject
        C++: vtkDataObject *GetOutput(int idx)
        
        Get the output of this filter
        """
        ...
    
    def GetPolyDataOutput(self):
        """
        V.GetPolyDataOutput() -> vtkPolyData
        C++: vtkPolyData *GetPolyDataOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetRectilinearGridOutput(self):
        """
        V.GetRectilinearGridOutput() -> vtkRectilinearGrid
        C++: vtkRectilinearGrid *GetRectilinearGridOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetStructuredGridOutput(self):
        """
        V.GetStructuredGridOutput() -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetStructuredGridOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetStructuredPointsOutput(self):
        """
        V.GetStructuredPointsOutput() -> vtkStructuredPoints
        C++: vtkStructuredPoints *GetStructuredPointsOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetTableOutput(self):
        """
        V.GetTableOutput() -> vtkTable
        C++: vtkTable *GetTableOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetTreeOutput(self):
        """
        V.GetTreeOutput() -> vtkTree
        C++: vtkTree *GetTreeOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def GetUnstructuredGridOutput(self):
        """
        V.GetUnstructuredGridOutput() -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetUnstructuredGridOutput()
        
        Get the output as various concrete types. This method is
        typically used when you know exactly what type of data is being
        read.  Otherwise, use the general GetOutput() method. If the
        wrong type is used nullptr is returned.  (You must also set the
        filename of the object prior to getting the output.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericDataObjectReader
        C++: vtkGenericDataObjectReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def ReadMetaDataSimple(self, string, vtkInformation):
        """
        V.ReadMetaDataSimple(string, vtkInformation) -> int
        C++: int ReadMetaDataSimple(const std::string &fname,
            vtkInformation *metadata) override;
        
        Read metadata from file.
        """
        ...
    
    def ReadOutputType(self):
        """
        V.ReadOutputType() -> int
        C++: virtual int ReadOutputType()
        
        This method can be used to find out the type of output expected
        without needing to read the whole file.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericDataObjectReader
        C++: static vtkGenericDataObjectReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGenericDataObjectWriter(vtkDataWriter):
    """
    vtkGenericDataObjectWriter - writes any type of vtk data object to
    file
    
    Superclass: vtkDataWriter
    
    vtkGenericDataObjectWriter is a concrete class that writes data
    objects to disk. The input to this object is any subclass of
    vtkDataObject.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericDataObjectWriter
        C++: vtkGenericDataObjectWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericDataObjectWriter
        C++: static vtkGenericDataObjectWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGraphReader(vtkDataReader):
    """
    vtkGraphReader - read vtkGraph data file
    
    Superclass: vtkDataReader
    
    vtkGraphReader is a source object that reads ASCII or binary vtkGraph
    data files in vtk format. (see text for format details). The output
    of this reader is a single vtkGraph data object. The superclass of
    this class, vtkDataReader, provides many methods for controlling the
    reading of the data file, see vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkGraph vtkDataReader vtkGraphWriter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkGraph
        C++: vtkGraph *GetOutput()
        V.GetOutput(int) -> vtkGraph
        C++: vtkGraph *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphReader
        C++: vtkGraphReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphReader
        C++: static vtkGraphReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGraphWriter(vtkDataWriter):
    """
    vtkGraphWriter - write vtkGraph data to a file
    
    Superclass: vtkDataWriter
    
    vtkGraphWriter is a sink object that writes ASCII or binary vtkGraph
    data files in vtk format. See text for format details.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkGraph
        C++: vtkGraph *GetInput()
        V.GetInput(int) -> vtkGraph
        C++: vtkGraph *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphWriter
        C++: vtkGraphWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphWriter
        C++: static vtkGraphWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPixelExtentIO(object):
    """
    vtkPixelExtentIO - A small collection of I/O routines that can write
    vtkPixelExtent's or collections of them to disk for visualization as
    unstructured grids.
    
    vtkPixelExtentIO()
    vtkPixelExtentIO(const &vtkPixelExtentIO)
    """
    def Write(self, p_int, string, vtkPixelExtent):
        """
        V.Write(int, string, vtkPixelExtent)
        C++: static void Write(int commRank, const char *fileName,
            const vtkPixelExtent &ext)
        
        Write an extent per MPI rank to disk. All ranks write. It's
        assumed that each rank passes a unique filename.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkPolyDataReader(vtkDataReader):
    """
    vtkPolyDataReader - read vtk polygonal data file
    
    Superclass: vtkDataReader
    
    vtkPolyDataReader is a source object that reads ASCII or binary
    polygonal data files in vtk format (see text for format details). The
    output of this reader is a single vtkPolyData data object. The
    superclass of this class, vtkDataReader, provides many methods for
    controlling the reading of the data file, see vtkDataReader for more
    information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkPolyData vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkPolyData
        C++: vtkPolyData *GetOutput()
        V.GetOutput(int) -> vtkPolyData
        C++: vtkPolyData *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataReader
        C++: vtkPolyDataReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataReader
        C++: static vtkPolyDataReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkPolyData):
        """
        V.SetOutput(vtkPolyData)
        C++: void SetOutput(vtkPolyData *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPolyDataWriter(vtkDataWriter):
    """
    vtkPolyDataWriter - write vtk polygonal data
    
    Superclass: vtkDataWriter
    
    vtkPolyDataWriter is a source object that writes ASCII or binary
    polygonal data files in vtk format. See text for format details.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        V.GetInput(int) -> vtkPolyData
        C++: vtkPolyData *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataWriter
        C++: vtkPolyDataWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataWriter
        C++: static vtkPolyDataWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRectilinearGridReader(vtkDataReader):
    """
    vtkRectilinearGridReader - read vtk rectilinear grid data file
    
    Superclass: vtkDataReader
    
    vtkRectilinearGridReader is a source object that reads ASCII or
    binary rectilinear grid data files in vtk format (see text for format
    details). The output of this reader is a single vtkRectilinearGrid
    data object. The superclass of this class, vtkDataReader, provides
    many methods for controlling the reading of the data file, see
    vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkRectilinearGrid vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkRectilinearGrid
        C++: vtkRectilinearGrid *GetOutput()
        V.GetOutput(int) -> vtkRectilinearGrid
        C++: vtkRectilinearGrid *GetOutput(int idx)
        
        Get and set the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRectilinearGridReader
        C++: vtkRectilinearGridReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def ReadMetaDataSimple(self, string, vtkInformation):
        """
        V.ReadMetaDataSimple(string, vtkInformation) -> int
        C++: int ReadMetaDataSimple(const std::string &fname,
            vtkInformation *metadata) override;
        
        Read the meta information from the file (WHOLE_EXTENT).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRectilinearGridReader
        C++: static vtkRectilinearGridReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkRectilinearGrid):
        """
        V.SetOutput(vtkRectilinearGrid)
        C++: void SetOutput(vtkRectilinearGrid *output)
        
        Get and set the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRectilinearGridWriter(vtkDataWriter):
    """
    vtkRectilinearGridWriter - write vtk rectilinear grid data file
    
    Superclass: vtkDataWriter
    
    vtkRectilinearGridWriter is a source object that writes ASCII or
    binary rectilinear grid data files in vtk format. See text for format
    details.
    
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkRectilinearGrid
        C++: vtkRectilinearGrid *GetInput()
        V.GetInput(int) -> vtkRectilinearGrid
        C++: vtkRectilinearGrid *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWriteExtent(self):
        """
        V.GetWriteExtent() -> bool
        C++: virtual bool GetWriteExtent()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRectilinearGridWriter
        C++: vtkRectilinearGridWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRectilinearGridWriter
        C++: static vtkRectilinearGridWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetWriteExtent(self, bool):
        """
        V.SetWriteExtent(bool)
        C++: virtual void SetWriteExtent(bool _arg)
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def WriteExtentOff(self):
        """
        V.WriteExtentOff()
        C++: virtual void WriteExtentOff()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def WriteExtentOn(self):
        """
        V.WriteExtentOn()
        C++: virtual void WriteExtentOn()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSimplePointsReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSimplePointsReader - Read a list of points from a file.
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSimplePointsReader is a source object that reads a list of points
    from a file.  Each point is specified by three floating-point values
    in ASCII format.  There is one point per line of the file.  A vertex
    cell is created for each point in the output.  This reader is meant
    as an example of how to write a reader in VTK.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/Get the name of the file from which to read points.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimplePointsReader
        C++: vtkSimplePointsReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimplePointsReader
        C++: static vtkSimplePointsReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/Get the name of the file from which to read points.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSimplePointsWriter(vtkDataSetWriter):
    """
    vtkSimplePointsWriter - write a file of xyz coordinates
    
    Superclass: vtkDataSetWriter
    
    vtkSimplePointsWriter writes a simple file of xyz coordinates
    
    @sa
    vtkSimplePointsReader
    """
    def GetDecimalPrecision(self):
        """
        V.GetDecimalPrecision() -> int
        C++: virtual int GetDecimalPrecision()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimplePointsWriter
        C++: vtkSimplePointsWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimplePointsWriter
        C++: static vtkSimplePointsWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDecimalPrecision(self, p_int):
        """
        V.SetDecimalPrecision(int)
        C++: virtual void SetDecimalPrecision(int _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredGridReader(vtkDataReader):
    """
    vtkStructuredGridReader - read vtk structured grid data file
    
    Superclass: vtkDataReader
    
    vtkStructuredGridReader is a source object that reads ASCII or binary
    structured grid data files in vtk format. (see text for format
    details). The output of this reader is a single vtkStructuredGrid
    data object. The superclass of this class, vtkDataReader, provides
    many methods for controlling the reading of the data file, see
    vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkStructuredGrid vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetOutput()
        V.GetOutput(int) -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredGridReader
        C++: vtkStructuredGridReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def ReadMetaDataSimple(self, string, vtkInformation):
        """
        V.ReadMetaDataSimple(string, vtkInformation) -> int
        C++: int ReadMetaDataSimple(const std::string &fname,
            vtkInformation *metadata) override;
        
        Read the meta information from the file (WHOLE_EXTENT).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredGridReader
        C++: static vtkStructuredGridReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkStructuredGrid):
        """
        V.SetOutput(vtkStructuredGrid)
        C++: void SetOutput(vtkStructuredGrid *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredGridWriter(vtkDataWriter):
    """
    vtkStructuredGridWriter - write vtk structured grid data file
    
    Superclass: vtkDataWriter
    
    vtkStructuredGridWriter is a source object that writes ASCII or
    binary structured grid data files in vtk format. See text for format
    details.
    
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetInput()
        V.GetInput(int) -> vtkStructuredGrid
        C++: vtkStructuredGrid *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWriteExtent(self):
        """
        V.GetWriteExtent() -> bool
        C++: virtual bool GetWriteExtent()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredGridWriter
        C++: vtkStructuredGridWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredGridWriter
        C++: static vtkStructuredGridWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetWriteExtent(self, bool):
        """
        V.SetWriteExtent(bool)
        C++: virtual void SetWriteExtent(bool _arg)
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def WriteExtentOff(self):
        """
        V.WriteExtentOff()
        C++: virtual void WriteExtentOff()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def WriteExtentOn(self):
        """
        V.WriteExtentOn()
        C++: virtual void WriteExtentOn()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredPointsReader(vtkDataReader):
    """
    vtkStructuredPointsReader - read vtk structured points data file
    
    Superclass: vtkDataReader
    
    vtkStructuredPointsReader is a source object that reads ASCII or
    binary structured points data files in vtk format (see text for
    format details). The output of this reader is a single
    vtkStructuredPoints data object. The superclass of this class,
    vtkDataReader, provides many methods for controlling the reading of
    the data file, see vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkStructuredPoints vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self, p_int):
        """
        V.GetOutput(int) -> vtkStructuredPoints
        C++: vtkStructuredPoints *GetOutput(int idx)
        V.GetOutput() -> vtkStructuredPoints
        C++: vtkStructuredPoints *GetOutput()
        
        Set/Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredPointsReader
        C++: vtkStructuredPointsReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def ReadMetaDataSimple(self, string, vtkInformation):
        """
        V.ReadMetaDataSimple(string, vtkInformation) -> int
        C++: int ReadMetaDataSimple(const std::string &fname,
            vtkInformation *metadata) override;
        
        Read the meta information from the file (WHOLE_EXTENT).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredPointsReader
        C++: static vtkStructuredPointsReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkStructuredPoints):
        """
        V.SetOutput(vtkStructuredPoints)
        C++: void SetOutput(vtkStructuredPoints *output)
        
        Set/Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredPointsWriter(vtkDataWriter):
    """
    vtkStructuredPointsWriter - write vtk structured points data file
    
    Superclass: vtkDataWriter
    
    vtkStructuredPointsWriter is a source object that writes ASCII or
    binary structured points data in vtk file format. See text for format
    details.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: vtkImageData *GetInput()
        V.GetInput(int) -> vtkImageData
        C++: vtkImageData *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWriteExtent(self):
        """
        V.GetWriteExtent() -> bool
        C++: virtual bool GetWriteExtent()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredPointsWriter
        C++: vtkStructuredPointsWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredPointsWriter
        C++: static vtkStructuredPointsWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetWriteExtent(self, bool):
        """
        V.SetWriteExtent(bool)
        C++: virtual void SetWriteExtent(bool _arg)
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def WriteExtentOff(self):
        """
        V.WriteExtentOff()
        C++: virtual void WriteExtentOff()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def WriteExtentOn(self):
        """
        V.WriteExtentOn()
        C++: virtual void WriteExtentOn()
        
        When WriteExtent is on, vtkStructuredPointsWriter writes data
        extent in the output file. Otherwise, it writes dimensions. The
        only time this option is useful is when the extents do not start
        at (0, 0, 0). This is an options to support writing of older
        formats while still using a newer VTK.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTableReader(vtkDataReader):
    """
    vtkTableReader - read vtkTable data file
    
    Superclass: vtkDataReader
    
    vtkTableReader is a source object that reads ASCII or binary vtkTable
    data files in vtk format. (see text for format details). The output
    of this reader is a single vtkTable data object. The superclass of
    this class, vtkDataReader, provides many methods for controlling the
    reading of the data file, see vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkTable vtkDataReader vtkTableWriter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkTable
        C++: vtkTable *GetOutput()
        V.GetOutput(int) -> vtkTable
        C++: vtkTable *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTableReader
        C++: vtkTableReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTableReader
        C++: static vtkTableReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkTable):
        """
        V.SetOutput(vtkTable)
        C++: void SetOutput(vtkTable *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTableWriter(vtkDataWriter):
    """
    vtkTableWriter - write vtkTable to a file
    
    Superclass: vtkDataWriter
    
    vtkTableWriter is a sink object that writes ASCII or binary vtkTable
    data files in vtk format. See text for format details.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkTable
        C++: vtkTable *GetInput()
        V.GetInput(int) -> vtkTable
        C++: vtkTable *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTableWriter
        C++: vtkTableWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTableWriter
        C++: static vtkTableWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTreeReader(vtkDataReader):
    """
    vtkTreeReader - read vtkTree data file
    
    Superclass: vtkDataReader
    
    vtkTreeReader is a source object that reads ASCII or binary vtkTree
    data files in vtk format. (see text for format details). The output
    of this reader is a single vtkTree data object. The superclass of
    this class, vtkDataReader, provides many methods for controlling the
    reading of the data file, see vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkTree vtkDataReader vtkTreeWriter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkTree
        C++: vtkTree *GetOutput()
        V.GetOutput(int) -> vtkTree
        C++: vtkTree *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeReader
        C++: vtkTreeReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeReader
        C++: static vtkTreeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkTree):
        """
        V.SetOutput(vtkTree)
        C++: void SetOutput(vtkTree *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTreeWriter(vtkDataWriter):
    """
    vtkTreeWriter - write vtkTree data to a file
    
    Superclass: vtkDataWriter
    
    vtkTreeWriter is a sink object that writes ASCII or binary vtkTree
    data files in vtk format. See text for format details.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkTree
        C++: vtkTree *GetInput()
        V.GetInput(int) -> vtkTree
        C++: vtkTree *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeWriter
        C++: vtkTreeWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeWriter
        C++: static vtkTreeWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkUnstructuredGridReader(vtkDataReader):
    """
    vtkUnstructuredGridReader - read vtk unstructured grid data file
    
    Superclass: vtkDataReader
    
    vtkUnstructuredGridReader is a source object that reads ASCII or
    binary unstructured grid data files in vtk format. (see text for
    format details). The output of this reader is a single
    vtkUnstructuredGrid data object. The superclass of this class,
    vtkDataReader, provides many methods for controlling the reading of
    the data file, see vtkDataReader for more information.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    @sa
    vtkUnstructuredGrid vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetOutput()
        V.GetOutput(int) -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUnstructuredGridReader
        C++: vtkUnstructuredGridReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUnstructuredGridReader
        C++: static vtkUnstructuredGridReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkUnstructuredGrid):
        """
        V.SetOutput(vtkUnstructuredGrid)
        C++: void SetOutput(vtkUnstructuredGrid *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkUnstructuredGridWriter(vtkDataWriter):
    """
    vtkUnstructuredGridWriter - write vtk unstructured grid data file
    
    Superclass: vtkDataWriter
    
    vtkUnstructuredGridWriter is a source object that writes ASCII or
    binary unstructured grid data files in vtk format. See text for
    format details.
    @warning
    Binary files written on one system may not be readable on other
    systems.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetInput()
        V.GetInput(int) -> vtkUnstructuredGrid
        C++: vtkUnstructuredGrid *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUnstructuredGridWriter
        C++: vtkUnstructuredGridWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUnstructuredGridWriter
        C++: static vtkUnstructuredGridWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
