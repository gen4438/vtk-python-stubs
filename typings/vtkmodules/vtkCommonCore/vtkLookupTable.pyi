"""
This type stub file was generated by pyright.
"""

from .vtkScalarsToColors import vtkScalarsToColors

class vtkLookupTable(vtkScalarsToColors):
    """
    vtkLookupTable - map scalar values into colors via a lookup table
    
    Superclass: vtkScalarsToColors
    
    vtkLookupTable is an object that is used by mapper objects to map
    scalar values into RGBA (red-green-blue-alpha) color specification,
    or RGBA into scalar values. The color table can be created by direct
    insertion of color values, or by specifying a hue, saturation, value,
    and alpha range and generating a table.
    
    A special color for NaN values in the data can be specified via
    SetNanColor(). In addition, a color for data values below the lookup
    table range minimum can be specified with SetBelowRangeColor(), and
    that color will be used for values below the range minimum when
    UseBelowRangeColor is on.  Likewise, a color for data values above
    the lookup table range maximum can be specified with
    SetAboveRangeColor(), and it is used when UseAboveRangeColor is on.
    
    This class behaves differently depending on how IndexedLookup is set.
    When true, vtkLookupTable enters a mode for representing categorical
    color maps. By setting IndexedLookup to true, you indicate that the
    annotated values are the only valid values for which entries in the
    color table should be returned. The colors in the lookup Table are
    assigned to annotated values by taking the modulus of their index in
    the list of annotations. IndexedLookup changes the behavior of
    GetIndex, which in turn changes the way MapScalarsThroughTable2
    behaves; when IndexedLookup is true, MapScalarsThroughTable2 will
    search for scalar values in AnnotatedValues and use the resulting
    index to determine the color. If a scalar value is not present in
    AnnotatedValues, then NanColor will be used.
    
    @warning
    You need to explicitly call Build() when constructing the LUT by
    hand.
    
    @sa
    vtkLogLookupTable vtkWindowLevelLookupTable
    """
    def Allocate(self, p_int, p_int_1):
        """
        V.Allocate(int, int) -> int
        C++: int Allocate(int sz=256, int ext=256)
        
        Allocate a color table of specified size. Note that ext is no
        longer used.
        """
        ...
    
    def ApplyLogScale(self, p_float, , ):
        """
        V.ApplyLogScale(float, (float, float), (float, float)) -> float
        C++: static double ApplyLogScale(double v, const double range[2],
            const double log_range[2])
        
        Apply log to value, with appropriate constraints.
        """
        ...
    
    def Build(self):
        """
        V.Build()
        C++: void Build() override;
        
        Generate lookup table from hue, saturation, value, alpha min/max
        values. Table is built from linear ramp of each value.
        """
        ...
    
    def BuildSpecialColors(self):
        """
        V.BuildSpecialColors()
        C++: void BuildSpecialColors()
        
        Copies the "special" colors into the given table.
        """
        ...
    
    def DeepCopy(self, vtkScalarsToColors):
        """
        V.DeepCopy(vtkScalarsToColors)
        C++: void DeepCopy(vtkScalarsToColors *lut) override;
        
        Copy the contents from another LookupTable.
        """
        ...
    
    def ForceBuild(self):
        """
        V.ForceBuild()
        C++: virtual void ForceBuild()
        
        Force the lookup table to regenerate from hue, saturation, value,
        and alpha min/max values.  Table is built from a linear ramp of
        each value.  ForceBuild() is useful if a lookup table has been
        defined manually (using SetTableValue) and then an application
        decides to rebuild the lookup table using the implicit process.
        """
        ...
    
    def GetAboveRangeColor(self):
        """
        V.GetAboveRangeColor() -> (float, float, float, float)
        C++: virtual double *GetAboveRangeColor()
        
        Set the color to use when a value above the range is encountered.
        This is an RGBA 4-tuple of doubles in the range [0, 1].
        """
        ...
    
    def GetAlphaRange(self):
        """
        V.GetAlphaRange() -> (float, float)
        C++: virtual double *GetAlphaRange()
        
        Set the range in alpha (using automatic generation). Alpha ranges
        from [0,1].
        """
        ...
    
    def GetBelowRangeColor(self):
        """
        V.GetBelowRangeColor() -> (float, float, float, float)
        C++: virtual double *GetBelowRangeColor()
        
        Set the color to use when a value below the range is encountered.
        This is an RGBA 4-tuple of doubles in the range [0, 1].
        """
        ...
    
    def GetColor(self, p_float, p_float=..., p_float=..., p_float=...):
        """
        V.GetColor(float, [float, float, float])
        C++: void GetColor(double x, double rgb[3]) override;
        
        Map one value through the lookup table and return the color as an
        RGB[3] array of doubles between 0 and 1. Note lack of alpha.
        """
        ...
    
    def GetColorAsUnsignedChars(self, , p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetColorAsUnsignedChars((float, float, float, float), [int, int,
             int, int])
        C++: static void GetColorAsUnsignedChars(const double colorIn[4],
            unsigned char colorOut[4])
        
        Given an RGBA[4] color in the [0,1] range, convert it to RGBA[4]
        in the [0,255] range.
        """
        ...
    
    def GetHueRange(self):
        """
        V.GetHueRange() -> (float, float)
        C++: virtual double *GetHueRange()
        
        Set the range in hue (using automatic generation). Hue ranges
        between [0,1].
        """
        ...
    
    def GetIndex(self, p_float):
        """
        V.GetIndex(float) -> int
        C++: virtual vtkIdType GetIndex(double v)
        
        Return the table index associated with a particular value.
        Returns -1 if v is NaN.
        
        * Do not use this function when IndexedLookup is true:
        * in that case, the set of values v may take on is exactly the
          integers
        * from 0 to GetNumberOfTableValues() - 1;
        * and v serves directly as an index into TableValues.
        """
        ...
    
    def GetIndexedColor(self, p_int, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetIndexedColor(int, [float, float, float, float])
        C++: void GetIndexedColor(vtkIdType idx, double rgba[4]) override;
        
        Return a color given an integer index.
        
        * This is used to assign colors to annotations (given an offset
          into the
        * list of annotations).
        * If the table is empty or idx < 0, then NanColor is returned.
        """
        ...
    
    def GetLogRange(self, , p_float=..., p_float=...):
        """
        V.GetLogRange((float, float), [float, float])
        C++: static void GetLogRange(const double range[2],
            double log_range[2])
        
        Returns the log of range in log_range. There is a little more to
        this than simply taking the log10 of the two range values: we do
        conversion of negative ranges to positive ranges, and conversion
        of zero to a 'very small number'.
        """
        ...
    
    def GetNanColor(self):
        """
        V.GetNanColor() -> (float, float, float, float)
        C++: virtual double *GetNanColor()
        
        Set the color to use when a NaN (not a number) is encountered. 
        This is an RGBA 4-tuple of doubles in the range [0,1].
        """
        ...
    
    def GetNanColorAsUnsignedChars(self):
        """
        V.GetNanColorAsUnsignedChars() -> (int, ...)
        C++: unsigned char *GetNanColorAsUnsignedChars()
        
        Return the NanColor as a pointer to 4 unsigned chars. This will
        overwrite any data returned by previous calls to MapValue.
        """
        ...
    
    def GetNumberOfAvailableColors(self):
        """
        V.GetNumberOfAvailableColors() -> int
        C++: vtkIdType GetNumberOfAvailableColors() override;
        
        Get the number of available colors for mapping to.
        """
        ...
    
    def GetNumberOfColors(self):
        """
        V.GetNumberOfColors() -> int
        C++: virtual vtkIdType GetNumberOfColors()
        
        Set the number of colors in the lookup table.  Use
        SetNumberOfTableValues() instead, it can be used both before and
        after the table has been built whereas SetNumberOfColors() has no
        effect after the table has been built.
        """
        ...
    
    def GetNumberOfColorsMaxValue(self):
        """
        V.GetNumberOfColorsMaxValue() -> int
        C++: virtual vtkIdType GetNumberOfColorsMaxValue()
        
        Set the number of colors in the lookup table.  Use
        SetNumberOfTableValues() instead, it can be used both before and
        after the table has been built whereas SetNumberOfColors() has no
        effect after the table has been built.
        """
        ...
    
    def GetNumberOfColorsMinValue(self):
        """
        V.GetNumberOfColorsMinValue() -> int
        C++: virtual vtkIdType GetNumberOfColorsMinValue()
        
        Set the number of colors in the lookup table.  Use
        SetNumberOfTableValues() instead, it can be used both before and
        after the table has been built whereas SetNumberOfColors() has no
        effect after the table has been built.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTableValues(self):
        """
        V.GetNumberOfTableValues() -> int
        C++: vtkIdType GetNumberOfTableValues()
        
        Specify the number of values (i.e., colors) in the lookup table.
        """
        ...
    
    def GetOpacity(self, p_float):
        """
        V.GetOpacity(float) -> float
        C++: double GetOpacity(double v) override;
        
        Map one value through the lookup table and return the alpha value
        (the opacity) as a double between 0 and 1.
        """
        ...
    
    def GetPointer(self, p_int):
        """
        V.GetPointer(int) -> (int, ...)
        C++: unsigned char *GetPointer(vtkIdType id)
        
        Get pointer to color table data. Format is array of unsigned char
        R-G-B-A...R-G-B-A.
        """
        ...
    
    def GetRamp(self):
        """
        V.GetRamp() -> int
        C++: virtual int GetRamp()
        
        Set the shape of the table ramp to either S-curve, linear, or
        sqrt. The default is S-curve, which tails off gradually at either
        end.
        
        The equation used for the S-curve is y = (sin((x - 1/2)*pi) +
        1)/2, For an S-curve greyscale ramp, you should set
        NumberOfTableValues to 402 (which is 256*pi/2) to provide room
        for the tails of the ramp.
        
        The equation for the linear ramp is simply y = x.
        
        The equation for the SQRT is y = sqrt(x).
        """
        ...
    
    def GetRange(self):
        """
        V.GetRange() -> (float, float)
        C++: double *GetRange() override;
        
        Sets/Gets the range of scalars which will be mapped.  This is a
        duplicate of Get/SetTableRange.
        """
        ...
    
    def GetSaturationRange(self):
        """
        V.GetSaturationRange() -> (float, float)
        C++: virtual double *GetSaturationRange()
        
        Set the range in saturation (using automatic generation).
        Saturation ranges between [0,1].
        """
        ...
    
    def GetScale(self):
        """
        V.GetScale() -> int
        C++: virtual int GetScale()
        
        Set the type of scale to use, linear or logarithmic.  The default
        is linear.  If the scale is logarithmic, then the TableRange must
        not cross the value zero.
        """
        ...
    
    def GetTable(self):
        """
        V.GetTable() -> vtkUnsignedCharArray
        C++: virtual vtkUnsignedCharArray *GetTable()
        
        Set/Get the internal table array that is used to map the scalars
        to colors.  The table array is an unsigned char array with 4
        components representing RGBA.
        """
        ...
    
    def GetTableRange(self):
        """
        V.GetTableRange() -> (float, float)
        C++: virtual double *GetTableRange()
        
        Set/Get the minimum/maximum scalar values for scalar mapping.
        Scalar values less than minimum range value are clamped to
        minimum range value. Scalar values greater than maximum range
        value are clamped to maximum range value.
        
        * The TableRange values are only used when IndexedLookup is
          false.
        """
        ...
    
    def GetTableValue(self, p_int):
        """
        V.GetTableValue(int) -> (float, float, float, float)
        C++: double *GetTableValue(vtkIdType id)
        V.GetTableValue(int, [float, float, float, float])
        C++: void GetTableValue(vtkIdType id, double rgba[4])
        
        Return an RGBA color value for the given index into the lookup
        table. Color components are expressed as [0,1] double values.
        """
        ...
    
    def GetUseAboveRangeColor(self):
        """
        V.GetUseAboveRangeColor() -> int
        C++: virtual vtkTypeBool GetUseAboveRangeColor()
        
        Set whether the above range color should be used.
        """
        ...
    
    def GetUseBelowRangeColor(self):
        """
        V.GetUseBelowRangeColor() -> int
        C++: virtual vtkTypeBool GetUseBelowRangeColor()
        
        Set whether the below range color should be used.
        """
        ...
    
    def GetValueRange(self):
        """
        V.GetValueRange() -> (float, float)
        C++: virtual double *GetValueRange()
        
        Set the range in value (using automatic generation). Value ranges
        between [0,1].
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsOpaque(self):
        """
        V.IsOpaque() -> int
        C++: int IsOpaque() override;
        V.IsOpaque(vtkAbstractArray, int, int) -> int
        C++: int IsOpaque(vtkAbstractArray *scalars, int colorMode,
            int component) override;
        
        Return true if all of the values defining the mapping have an
        opacity equal to 1.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapScalarsThroughTable2(self, void, *int, **kwargs):
        """
        V.MapScalarsThroughTable2(void, [int, ...], int, int, int, int)
        C++: void MapScalarsThroughTable2(void *input,
            unsigned char *output, int inputDataType, int numberOfValues,
            int inputIncrement, int outputIncrement) override;
        
        Map a set of scalars through the lookup table.
        
        * This member function is thread safe.
        """
        ...
    
    def MapValue(self, p_float):
        """
        V.MapValue(float) -> (int, ...)
        C++: const unsigned char *MapValue(double v) override;
        
        Map one value through the lookup table, returning an RBGA[4]
        color.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLookupTable
        C++: vtkLookupTable *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLookupTable
        C++: static vtkLookupTable *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAboveRangeColor(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetAboveRangeColor(float, float, float, float)
        C++: virtual void SetAboveRangeColor(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetAboveRangeColor((float, float, float, float))
        C++: virtual void SetAboveRangeColor(const double _arg[4])
        
        Set the color to use when a value above the range is encountered.
        This is an RGBA 4-tuple of doubles in the range [0, 1].
        """
        ...
    
    def SetAlphaRange(self, p_float, p_float_1):
        """
        V.SetAlphaRange(float, float)
        C++: virtual void SetAlphaRange(double _arg1, double _arg2)
        V.SetAlphaRange((float, float))
        C++: void SetAlphaRange(const double _arg[2])
        
        Set the range in alpha (using automatic generation). Alpha ranges
        from [0,1].
        """
        ...
    
    def SetBelowRangeColor(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetBelowRangeColor(float, float, float, float)
        C++: virtual void SetBelowRangeColor(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetBelowRangeColor((float, float, float, float))
        C++: virtual void SetBelowRangeColor(const double _arg[4])
        
        Set the color to use when a value below the range is encountered.
        This is an RGBA 4-tuple of doubles in the range [0, 1].
        """
        ...
    
    def SetHueRange(self, p_float, p_float_1):
        """
        V.SetHueRange(float, float)
        C++: virtual void SetHueRange(double _arg1, double _arg2)
        V.SetHueRange((float, float))
        C++: void SetHueRange(const double _arg[2])
        
        Set the range in hue (using automatic generation). Hue ranges
        between [0,1].
        """
        ...
    
    def SetNanColor(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetNanColor(float, float, float, float)
        C++: virtual void SetNanColor(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetNanColor((float, float, float, float))
        C++: virtual void SetNanColor(const double _arg[4])
        
        Set the color to use when a NaN (not a number) is encountered. 
        This is an RGBA 4-tuple of doubles in the range [0,1].
        """
        ...
    
    def SetNumberOfColors(self, p_int):
        """
        V.SetNumberOfColors(int)
        C++: virtual void SetNumberOfColors(vtkIdType _arg)
        
        Set the number of colors in the lookup table.  Use
        SetNumberOfTableValues() instead, it can be used both before and
        after the table has been built whereas SetNumberOfColors() has no
        effect after the table has been built.
        """
        ...
    
    def SetNumberOfTableValues(self, p_int):
        """
        V.SetNumberOfTableValues(int)
        C++: void SetNumberOfTableValues(vtkIdType number)
        
        Specify the number of values (i.e., colors) in the lookup table.
        """
        ...
    
    def SetRamp(self, p_int):
        """
        V.SetRamp(int)
        C++: virtual void SetRamp(int _arg)
        
        Set the shape of the table ramp to either S-curve, linear, or
        sqrt. The default is S-curve, which tails off gradually at either
        end.
        
        The equation used for the S-curve is y = (sin((x - 1/2)*pi) +
        1)/2, For an S-curve greyscale ramp, you should set
        NumberOfTableValues to 402 (which is 256*pi/2) to provide room
        for the tails of the ramp.
        
        The equation for the linear ramp is simply y = x.
        
        The equation for the SQRT is y = sqrt(x).
        """
        ...
    
    def SetRampToLinear(self):
        """
        V.SetRampToLinear()
        C++: void SetRampToLinear()
        
        Set the shape of the table ramp to either S-curve, linear, or
        sqrt. The default is S-curve, which tails off gradually at either
        end.
        
        The equation used for the S-curve is y = (sin((x - 1/2)*pi) +
        1)/2, For an S-curve greyscale ramp, you should set
        NumberOfTableValues to 402 (which is 256*pi/2) to provide room
        for the tails of the ramp.
        
        The equation for the linear ramp is simply y = x.
        
        The equation for the SQRT is y = sqrt(x).
        """
        ...
    
    def SetRampToSCurve(self):
        """
        V.SetRampToSCurve()
        C++: void SetRampToSCurve()
        
        Set the shape of the table ramp to either S-curve, linear, or
        sqrt. The default is S-curve, which tails off gradually at either
        end.
        
        The equation used for the S-curve is y = (sin((x - 1/2)*pi) +
        1)/2, For an S-curve greyscale ramp, you should set
        NumberOfTableValues to 402 (which is 256*pi/2) to provide room
        for the tails of the ramp.
        
        The equation for the linear ramp is simply y = x.
        
        The equation for the SQRT is y = sqrt(x).
        """
        ...
    
    def SetRampToSQRT(self):
        """
        V.SetRampToSQRT()
        C++: void SetRampToSQRT()
        
        Set the shape of the table ramp to either S-curve, linear, or
        sqrt. The default is S-curve, which tails off gradually at either
        end.
        
        The equation used for the S-curve is y = (sin((x - 1/2)*pi) +
        1)/2, For an S-curve greyscale ramp, you should set
        NumberOfTableValues to 402 (which is 256*pi/2) to provide room
        for the tails of the ramp.
        
        The equation for the linear ramp is simply y = x.
        
        The equation for the SQRT is y = sqrt(x).
        """
        ...
    
    def SetRange(self, p_float, p_float_1):
        """
        V.SetRange(float, float)
        C++: void SetRange(double min, double max) override;
        V.SetRange((float, float))
        C++: void SetRange(const double rng[2]) override;
        
        Sets/Gets the range of scalars which will be mapped.  This is a
        duplicate of Get/SetTableRange.
        """
        ...
    
    def SetSaturationRange(self, p_float, p_float_1):
        """
        V.SetSaturationRange(float, float)
        C++: virtual void SetSaturationRange(double _arg1, double _arg2)
        V.SetSaturationRange((float, float))
        C++: void SetSaturationRange(const double _arg[2])
        
        Set the range in saturation (using automatic generation).
        Saturation ranges between [0,1].
        """
        ...
    
    def SetScale(self, p_int):
        """
        V.SetScale(int)
        C++: void SetScale(int scale)
        
        Set the type of scale to use, linear or logarithmic.  The default
        is linear.  If the scale is logarithmic, then the TableRange must
        not cross the value zero.
        """
        ...
    
    def SetScaleToLinear(self):
        """
        V.SetScaleToLinear()
        C++: void SetScaleToLinear()
        
        Set the type of scale to use, linear or logarithmic.  The default
        is linear.  If the scale is logarithmic, then the TableRange must
        not cross the value zero.
        """
        ...
    
    def SetScaleToLog10(self):
        """
        V.SetScaleToLog10()
        C++: void SetScaleToLog10()
        
        Set the type of scale to use, linear or logarithmic.  The default
        is linear.  If the scale is logarithmic, then the TableRange must
        not cross the value zero.
        """
        ...
    
    def SetTable(self, vtkUnsignedCharArray):
        """
        V.SetTable(vtkUnsignedCharArray)
        C++: void SetTable(vtkUnsignedCharArray *)
        
        Set/Get the internal table array that is used to map the scalars
        to colors.  The table array is an unsigned char array with 4
        components representing RGBA.
        """
        ...
    
    def SetTableRange(self, ):
        """
        V.SetTableRange((float, float))
        C++: virtual void SetTableRange(const double r[2])
        V.SetTableRange(float, float)
        C++: virtual void SetTableRange(double min, double max)
        
        Set/Get the minimum/maximum scalar values for scalar mapping.
        Scalar values less than minimum range value are clamped to
        minimum range value. Scalar values greater than maximum range
        value are clamped to maximum range value.
        
        * The TableRange values are only used when IndexedLookup is
          false.
        """
        ...
    
    def SetTableValue(self, p_int, ):
        """
        V.SetTableValue(int, (float, float, float, float))
        C++: virtual void SetTableValue(vtkIdType indx,
            const double rgba[4])
        V.SetTableValue(int, float, float, float, float)
        C++: virtual void SetTableValue(vtkIdType indx, double r,
            double g, double b, double a=1.0)
        
        Directly load color into lookup table. Use [0,1] double values
        for color component specification. Make sure that you've either
        used the Build() method or used SetNumberOfTableValues() prior to
        using this method.
        """
        ...
    
    def SetUseAboveRangeColor(self, p_int):
        """
        V.SetUseAboveRangeColor(int)
        C++: virtual void SetUseAboveRangeColor(vtkTypeBool _arg)
        
        Set whether the above range color should be used.
        """
        ...
    
    def SetUseBelowRangeColor(self, p_int):
        """
        V.SetUseBelowRangeColor(int)
        C++: virtual void SetUseBelowRangeColor(vtkTypeBool _arg)
        
        Set whether the below range color should be used.
        """
        ...
    
    def SetValueRange(self, p_float, p_float_1):
        """
        V.SetValueRange(float, float)
        C++: virtual void SetValueRange(double _arg1, double _arg2)
        V.SetValueRange((float, float))
        C++: void SetValueRange(const double _arg[2])
        
        Set the range in value (using automatic generation). Value ranges
        between [0,1].
        """
        ...
    
    def UseAboveRangeColorOff(self):
        """
        V.UseAboveRangeColorOff()
        C++: virtual void UseAboveRangeColorOff()
        
        Set whether the above range color should be used.
        """
        ...
    
    def UseAboveRangeColorOn(self):
        """
        V.UseAboveRangeColorOn()
        C++: virtual void UseAboveRangeColorOn()
        
        Set whether the above range color should be used.
        """
        ...
    
    def UseBelowRangeColorOff(self):
        """
        V.UseBelowRangeColorOff()
        C++: virtual void UseBelowRangeColorOff()
        
        Set whether the below range color should be used.
        """
        ...
    
    def UseBelowRangeColorOn(self):
        """
        V.UseBelowRangeColorOn()
        C++: virtual void UseBelowRangeColorOn()
        
        Set whether the below range color should be used.
        """
        ...
    
    def UsingLogScale(self):
        """
        V.UsingLogScale() -> int
        C++: int UsingLogScale() override;
        
        This should return 1 if the subclass is using log scale for
        mapping scalars to colors. Returns 1 is scale == VTK_SCALE_LOG10.
        """
        ...
    
    def WritePointer(self, p_int, p_int_1):
        """
        V.WritePointer(int, int) -> (int, ...)
        C++: unsigned char *WritePointer(vtkIdType id, int number)
        
        Get pointer to data. Useful for direct writes into object. MaxId
        is bumped by number (and memory allocated if necessary). Id is
        the location you wish to write into; number is the number of rgba
        values to write.
        
        * \warning If you modify the table data via the pointer returned
          by this
        * member function, you must call
          vtkLookupTable::BuildSpecialColors()
        * afterwards to ensure that the special colors (below/above range
        and NaN
        * value) are up-to-date.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


