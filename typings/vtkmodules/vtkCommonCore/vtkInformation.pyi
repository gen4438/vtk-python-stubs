"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkInformation(vtkObject):
    """
    vtkInformation - Store vtkAlgorithm input/output information.
    
    Superclass: vtkObject
    
    vtkInformation represents information and/or data for one input or
    one output of a vtkAlgorithm.  It maps from keys to values of several
    data types.  Instances of this class are collected in
    vtkInformationVector instances and passed to
    vtkAlgorithm::ProcessRequest calls.  The information and data
    referenced by the instance on a particular input or output define the
    request made to the vtkAlgorithm instance.
    """
    def Append(self, vtkInformation, p_int):
        """
        V.Append(vtkInformation, int)
        C++: void Append(vtkInformation *from, int deep=0)
        V.Append(vtkInformationIntegerVectorKey, int)
        C++: void Append(vtkInformationIntegerVectorKey *key, int value)
        V.Append(vtkInformationStringVectorKey, string)
        C++: void Append(vtkInformationStringVectorKey *key,
            const std::string &value)
        V.Append(vtkInformationDoubleVectorKey, float)
        C++: void Append(vtkInformationDoubleVectorKey *key, double value)
        V.Append(vtkInformationVariantVectorKey, vtkVariant)
        C++: void Append(vtkInformationVariantVectorKey *key,
            const vtkVariant &value)
        V.Append(vtkInformationKeyVectorKey, vtkInformationKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationKey *value)
        V.Append(vtkInformationKeyVectorKey, vtkInformationDataObjectKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationDataObjectKey *value)
        V.Append(vtkInformationKeyVectorKey, vtkInformationDoubleKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationDoubleKey *value)
        V.Append(vtkInformationKeyVectorKey,
            vtkInformationDoubleVectorKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationDoubleVectorKey *value)
        V.Append(vtkInformationKeyVectorKey, vtkInformationInformationKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationInformationKey *value)
        V.Append(vtkInformationKeyVectorKey,
            vtkInformationInformationVectorKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationInformationVectorKey *value)
        V.Append(vtkInformationKeyVectorKey, vtkInformationIntegerKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationIntegerKey *value)
        V.Append(vtkInformationKeyVectorKey,
            vtkInformationIntegerVectorKey)
        C++: void Append(vtkInformationKeyVectorKey *key,
            vtkInformationIntegerVectorKey *value)
        
        Append all information entries from the given vtkInformation
        instance. If deep==1, a deep copy of the information structure is
        performed (new instances of  ...
         [Truncated]
        """
        ...
    
    def AppendUnique(self, vtkInformationKeyVectorKey, vtkInformationKey):
        """
        V.AppendUnique(vtkInformationKeyVectorKey, vtkInformationKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationDataObjectKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationDataObjectKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationDoubleKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationDoubleKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationDoubleVectorKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationDoubleVectorKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationInformationKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationInformationKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationInformationVectorKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationInformationVectorKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationIntegerKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationIntegerKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationIntegerVectorKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationIntegerVectorKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationStringKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationStringKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationStringVectorKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationStringVectorKey *value)
        V.AppendUnique(vtkInformationKeyVectorKey,
            vtkInformationObjectBaseKey)
        C++: void AppendUnique(vtkInformationKeyVectorKey *key,
            vtkInformationObjectBaseKey *value)
        
        Get/Set an InformationKey-vector-valued entry.
        """
        ...
    
    def Clear(self):
        """
        V.Clear()
        C++: void Clear()
        
        Clear all information entries.
        """
        ...
    
    def Copy(self, vtkInformation, p_int):
        """
        V.Copy(vtkInformation, int)
        C++: void Copy(vtkInformation *from, int deep=0)
        
        Copy all information entries from the given vtkInformation
        instance.  Any previously existing entries are removed.  If
        deep==1, a deep copy of the information structure is performed
        (new instances of any contained vtkInformation and
        vtkInformationVector objects are created).
        """
        ...
    
    def CopyEntries(self, vtkInformation, vtkInformationKeyVectorKey, p_int):
        """
        V.CopyEntries(vtkInformation, vtkInformationKeyVectorKey, int)
        C++: void CopyEntries(vtkInformation *from,
            vtkInformationKeyVectorKey *key, int deep=0)
        
        Use the given key to lookup a list of other keys in the given
        information object.  The key/value pairs associated with these
        other keys will be copied.  If deep==1, a deep copy of the
        information structure is performed.
        """
        ...
    
    def CopyEntry(self, vtkInformation, vtkInformationKey, p_int):
        """
        V.CopyEntry(vtkInformation, vtkInformationKey, int)
        C++: void CopyEntry(vtkInformation *from, vtkInformationKey *key,
            int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationDataObjectKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationDataObjectKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationDoubleVectorKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationDoubleVectorKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationVariantKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationVariantKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationVariantVectorKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationVariantVectorKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationInformationKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationInformationKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationInformationVectorKey,
            int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationInformationVectorKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationIntegerKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationIntegerKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationIntegerVectorKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationIntegerVectorKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationObjectBaseVectorKey,
            int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationObjectBaseVectorKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationRequestKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationRequestKey *key, int deep=0)
        V.CopyEntry(vtkInformation, vtkInformationStringKey, int)
        C++: void CopyEntry(vtkInformation *from,
            vtkInformationStringKey *key, int deep=0)
        
        Copy the key/value pair associated with the given key in the
        given information object.  If deep=1, a deep copy of the
        informati ...
         [Truncated]
        """
        ...
    
    def Get(self, vtkInformationIntegerKey):
        """
        V.Get(vtkInformationIntegerKey) -> int
        C++: int Get(vtkInformationIntegerKey *key)
        V.Get(vtkInformationIdTypeKey) -> int
        C++: vtkIdType Get(vtkInformationIdTypeKey *key)
        V.Get(vtkInformationDoubleKey) -> float
        C++: double Get(vtkInformationDoubleKey *key)
        V.Get(vtkInformationVariantKey) -> vtkVariant
        C++: const vtkVariant &Get(vtkInformationVariantKey *key)
        V.Get(vtkInformationIntegerVectorKey) -> (int, ...)
        C++: int *Get(vtkInformationIntegerVectorKey *key)
        V.Get(vtkInformationIntegerVectorKey, int) -> int
        C++: int Get(vtkInformationIntegerVectorKey *key, int idx)
        V.Get(vtkInformationIntegerVectorKey, [int, ...])
        C++: void Get(vtkInformationIntegerVectorKey *key, int *value)
        V.Get(vtkInformationStringVectorKey, int) -> string
        C++: const char *Get(vtkInformationStringVectorKey *key,
            int idx=0)
        V.Get(vtkInformationIntegerPointerKey) -> (int, ...)
        C++: int *Get(vtkInformationIntegerPointerKey *key)
        V.Get(vtkInformationIntegerPointerKey, [int, ...])
        C++: void Get(vtkInformationIntegerPointerKey *key, int *value)
        V.Get(vtkInformationUnsignedLongKey) -> int
        C++: unsigned long Get(vtkInformationUnsignedLongKey *key)
        V.Get(vtkInformationDoubleVectorKey) -> (float, ...)
        C++: double *Get(vtkInformationDoubleVectorKey *key)
        V.Get(vtkInformationDoubleVectorKey, int) -> float
        C++: double Get(vtkInformationDoubleVectorKey *key, int idx)
        V.Get(vtkInformationDoubleVectorKey, [float, ...])
        C++: void Get(vtkInformationDoubleVectorKey *key, double *value)
        V.Get(vtkInformationVariantVectorKey, int) -> vtkVariant
        C++: const vtkVariant &Get(vtkInformationVariantVectorKey *key,
            int idx)
        V.Get(vtkInformationKeyVectorKey, int) -> vtkInformationKey
        C++: vtkInformationKey *Get(vtkInformationKeyVectorKey *key,
            int idx)
        V.Get(vtkInformationStringKey) -> string
        C++: const char *Get(vtkInformationStringKey *key)
        V.Get(vtkInformationInformationKey) -> vtkInformation
        C++: vtkInformation *Get(vtkInformationInformationKey *key)
        
        Get/Set an integer-valued entry.
        """
        ...
    
    def GetKey(self, vtkInformationDataObjectKey):
        """
        V.GetKey(vtkInformationDataObjectKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationDataObjectKey *key)
        V.GetKey(vtkInformationDoubleKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationDoubleKey *key)
        V.GetKey(vtkInformationDoubleVectorKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationDoubleVectorKey *key)
        V.GetKey(vtkInformationInformationKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationInformationKey *key)
        V.GetKey(vtkInformationInformationVectorKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationInformationVectorKey *key)
        V.GetKey(vtkInformationIntegerKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationIntegerKey *key)
        V.GetKey(vtkInformationIntegerVectorKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationIntegerVectorKey *key)
        V.GetKey(vtkInformationRequestKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationRequestKey *key)
        V.GetKey(vtkInformationStringKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationStringKey *key)
        V.GetKey(vtkInformationStringVectorKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationStringVectorKey *key)
        V.GetKey(vtkInformationKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(vtkInformationKey *key)
        V.GetKey(vtkInformationUnsignedLongKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationUnsignedLongKey *key)
        V.GetKey(vtkInformationVariantKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationVariantKey *key)
        V.GetKey(vtkInformationVariantVectorKey) -> vtkInformationKey
        C++: static vtkInformationKey *GetKey(
            vtkInformationVariantVectorKey *key)
        
        Upcast the given key instance.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfKeys(self):
        """
        V.GetNumberOfKeys() -> int
        C++: int GetNumberOfKeys()
        
        Return the number of keys in this information object (as would be
        returned by iterating over the keys).
        """
        ...
    
    def GetRequest(self):
        """
        V.GetRequest() -> vtkInformationRequestKey
        C++: vtkInformationRequestKey *GetRequest()
        
        Get/Set the Request ivar
        """
        ...
    
    def Has(self, vtkInformationKey):
        """
        V.Has(vtkInformationKey) -> int
        C++: int Has(vtkInformationKey *key)
        V.Has(vtkInformationRequestKey) -> int
        C++: int Has(vtkInformationRequestKey *key)
        V.Has(vtkInformationIntegerKey) -> int
        C++: int Has(vtkInformationIntegerKey *key)
        V.Has(vtkInformationIdTypeKey) -> int
        C++: int Has(vtkInformationIdTypeKey *key)
        V.Has(vtkInformationDoubleKey) -> int
        C++: int Has(vtkInformationDoubleKey *key)
        V.Has(vtkInformationVariantKey) -> int
        C++: int Has(vtkInformationVariantKey *key)
        V.Has(vtkInformationIntegerVectorKey) -> int
        C++: int Has(vtkInformationIntegerVectorKey *key)
        V.Has(vtkInformationStringVectorKey) -> int
        C++: int Has(vtkInformationStringVectorKey *key)
        V.Has(vtkInformationIntegerPointerKey) -> int
        C++: int Has(vtkInformationIntegerPointerKey *key)
        V.Has(vtkInformationUnsignedLongKey) -> int
        C++: int Has(vtkInformationUnsignedLongKey *key)
        V.Has(vtkInformationDoubleVectorKey) -> int
        C++: int Has(vtkInformationDoubleVectorKey *key)
        V.Has(vtkInformationVariantVectorKey) -> int
        C++: int Has(vtkInformationVariantVectorKey *key)
        V.Has(vtkInformationKeyVectorKey) -> int
        C++: int Has(vtkInformationKeyVectorKey *key)
        V.Has(vtkInformationStringKey) -> int
        C++: int Has(vtkInformationStringKey *key)
        V.Has(vtkInformationInformationKey) -> int
        C++: int Has(vtkInformationInformationKey *key)
        V.Has(vtkInformationInformationVectorKey) -> int
        C++: int Has(vtkInformationInformationVectorKey *key)
        V.Has(vtkInformationObjectBaseKey) -> int
        C++: int Has(vtkInformationObjectBaseKey *key)
        V.Has(vtkInformationObjectBaseVectorKey) -> int
        C++: int Has(vtkInformationObjectBaseVectorKey *key)
        V.Has(vtkInformationDataObjectKey) -> int
        C++: int Has(vtkInformationDataObjectKey *key)
        
        Check whether the given key appears in this information object.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Length(self, vtkInformationIntegerVectorKey):
        """
        V.Length(vtkInformationIntegerVectorKey) -> int
        C++: int Length(vtkInformationIntegerVectorKey *key)
        V.Length(vtkInformationStringVectorKey) -> int
        C++: int Length(vtkInformationStringVectorKey *key)
        V.Length(vtkInformationIntegerPointerKey) -> int
        C++: int Length(vtkInformationIntegerPointerKey *key)
        V.Length(vtkInformationDoubleVectorKey) -> int
        C++: int Length(vtkInformationDoubleVectorKey *key)
        V.Length(vtkInformationVariantVectorKey) -> int
        C++: int Length(vtkInformationVariantVectorKey *key)
        V.Length(vtkInformationKeyVectorKey) -> int
        C++: int Length(vtkInformationKeyVectorKey *key)
        V.Length(vtkInformationObjectBaseVectorKey) -> int
        C++: int Length(vtkInformationObjectBaseVectorKey *key)
        
        Get/Set an integer-vector-valued entry.
        """
        ...
    
    def Modified(self):
        """
        V.Modified()
        C++: void Modified() override;
        V.Modified(vtkInformationKey)
        C++: void Modified(vtkInformationKey *key)
        
        Modified signature with no arguments that calls Modified on
        vtkObject superclass.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInformation
        C++: vtkInformation *NewInstance()
        """
        ...
    
    def Remove(self, vtkInformationKey):
        """
        V.Remove(vtkInformationKey)
        C++: void Remove(vtkInformationKey *key)
        V.Remove(vtkInformationRequestKey)
        C++: void Remove(vtkInformationRequestKey *key)
        V.Remove(vtkInformationIntegerKey)
        C++: void Remove(vtkInformationIntegerKey *key)
        V.Remove(vtkInformationIdTypeKey)
        C++: void Remove(vtkInformationIdTypeKey *key)
        V.Remove(vtkInformationDoubleKey)
        C++: void Remove(vtkInformationDoubleKey *key)
        V.Remove(vtkInformationVariantKey)
        C++: void Remove(vtkInformationVariantKey *key)
        V.Remove(vtkInformationIntegerVectorKey)
        C++: void Remove(vtkInformationIntegerVectorKey *key)
        V.Remove(vtkInformationStringVectorKey)
        C++: void Remove(vtkInformationStringVectorKey *key)
        V.Remove(vtkInformationIntegerPointerKey)
        C++: void Remove(vtkInformationIntegerPointerKey *key)
        V.Remove(vtkInformationUnsignedLongKey)
        C++: void Remove(vtkInformationUnsignedLongKey *key)
        V.Remove(vtkInformationDoubleVectorKey)
        C++: void Remove(vtkInformationDoubleVectorKey *key)
        V.Remove(vtkInformationVariantVectorKey)
        C++: void Remove(vtkInformationVariantVectorKey *key)
        V.Remove(vtkInformationKeyVectorKey, vtkInformationKey)
        C++: void Remove(vtkInformationKeyVectorKey *key,
            vtkInformationKey *value)
        V.Remove(vtkInformationKeyVectorKey)
        C++: void Remove(vtkInformationKeyVectorKey *key)
        V.Remove(vtkInformationStringKey)
        C++: void Remove(vtkInformationStringKey *key)
        V.Remove(vtkInformationInformationKey)
        C++: void Remove(vtkInformationInformationKey *key)
        V.Remove(vtkInformationInformationVectorKey)
        C++: void Remove(vtkInformationInformationVectorKey *key)
        V.Remove(vtkInformationObjectBaseKey)
        C++: void Remove(vtkInformationObjectBaseKey *key)
        V.Remove(vtkInformationObjectBaseVectorKey)
        C++: void Remove(vtkInformationObjectBaseVectorKey *key)
        V.Remove(vtkInformationObjectBaseVectorKey, vtkObjectBase)
        C++: void Remove(vtkInformationObjectBaseVectorKey *key,
            vtkObjectBase *objectToRemove)
        
        Remove the given key and its data from this information object.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInformation
        C++: static vtkInformation *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Set(self, vtkInformationRequestKey):
        """
        V.Set(vtkInformationRequestKey)
        C++: void Set(vtkInformationRequestKey *key)
        V.Set(vtkInformationIntegerKey, int)
        C++: void Set(vtkInformationIntegerKey *key, int value)
        V.Set(vtkInformationIdTypeKey, int)
        C++: void Set(vtkInformationIdTypeKey *key, vtkIdType value)
        V.Set(vtkInformationDoubleKey, float)
        C++: void Set(vtkInformationDoubleKey *key, double value)
        V.Set(vtkInformationVariantKey, vtkVariant)
        C++: void Set(vtkInformationVariantKey *key,
            const vtkVariant &value)
        V.Set(vtkInformationIntegerVectorKey, (int, ...), int)
        C++: void Set(vtkInformationIntegerVectorKey *key,
            const int *value, int length)
        V.Set(vtkInformationIntegerVectorKey, int, int, int)
        C++: void Set(vtkInformationIntegerVectorKey *key, int value1,
            int value2, int value3)
        V.Set(vtkInformationIntegerVectorKey, int, int, int, int, int,
            int)
        C++: void Set(vtkInformationIntegerVectorKey *key, int value1,
            int value2, int value3, int value4, int value5, int value6)
        V.Set(vtkInformationStringVectorKey, string, int)
        C++: void Set(vtkInformationStringVectorKey *key,
            const std::string &value, int idx=0)
        V.Set(vtkInformationIntegerPointerKey, [int, ...], int)
        C++: void Set(vtkInformationIntegerPointerKey *key, int *value,
            int length)
        V.Set(vtkInformationUnsignedLongKey, int)
        C++: void Set(vtkInformationUnsignedLongKey *key,
            unsigned long value)
        V.Set(vtkInformationDoubleVectorKey, (float, ...), int)
        C++: void Set(vtkInformationDoubleVectorKey *key,
            const double *value, int length)
        V.Set(vtkInformationDoubleVectorKey, float, float, float)
        C++: void Set(vtkInformationDoubleVectorKey *key, double value1,
            double value2, double value3)
        V.Set(vtkInformationDoubleVectorKey, float, float, float, float,
            float, float)
        C++: void Set(vtkInformationDoubleVectorKey *key, double value1,
            double value2, double value3, double value4, double value5,
            double value6)
        
        Get/Set a request-valued entry.
        """
        ...
    
    def SetRequest(self, vtkInformationRequestKey):
        """
        V.SetRequest(vtkInformationRequestKey)
        C++: void SetRequest(vtkInformationRequestKey *request)
        
        Get/Set the Request ivar
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


