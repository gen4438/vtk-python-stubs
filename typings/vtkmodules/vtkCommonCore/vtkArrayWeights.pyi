"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkArrayWeights(object):
    """
    vtkArrayWeights - Stores a collection of weighting factors.
    
    vtkArrayWeights provides storage for a collection of weights to be
    used when merging / interpolating N-way arrays.  Convenience
    constructors are provided for working with one, two, three, and four
    weighting factors.  For arbitrary collections of weights, use
    SetCount() and operator[] to assign values.
    
    vtkArrayWeights is most commonly used with the vtkInterpolate()
    function to compute weighted sums of vtkArray objects.
    
    @sa
    vtkArray, vtkArraySlices
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    
    vtkArrayWeights()
    vtkArrayWeights(const vtkArrayWeights &other)
    vtkArrayWeights(double i)
    vtkArrayWeights(double i, double j)
    vtkArrayWeights(double i, double j, double k)
    vtkArrayWeights(double i, double j, double k, double l)
    """
    def GetCount(self):
        """
        V.GetCount() -> int
        C++: vtkIdType GetCount()
        
        Returns the number of weights stored in this container.
        """
        ...
    
    def SetCount(self, p_int):
        """
        V.SetCount(int)
        C++: void SetCount(vtkIdType count)
        
        Sets the number of weights stored in this container.  Note that
        each weight will be reset to 0.0 after calling SetCount(), use
        operator[] to assign the desired value for each weight.
        """
        ...
    
    def __delitem__(self, *args, **kwargs):
        """ Delete self[key]. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __getitem__(self, *args, **kwargs):
        """ Return self[key]. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __len__(self, *args, **kwargs):
        """ Return len(self). """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setitem__(self, *args, **kwargs):
        """ Set self[key] to value. """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    


