"""
This type stub file was generated by pyright.
"""

from .vtkObjectBase import vtkObjectBase

class vtkLogger(vtkObjectBase):
    """
    vtkLogger - logging framework for use in VTK and in applications
    based on VTK
    
    Superclass: vtkObjectBase
    
    vtkLogger acts as the entry point to VTK's logging framework. The
    implementation uses the loguru (https://github.com/emilk/loguru).
    vtkLogger provides some static API to initialize and configure
    logging together with a collection of macros that can be used to add
    items to the generated log.
    
    The logging framework is based on verbosity levels. Level 0-9 are
    supported in addition to named levels such as ERROR, WARNING, and
    INFO. When a log for a particular verbosity level is being generated,
    all log additions issued with verbosity level less than or equal to
    the requested verbosity level will get logged.
    
    When using any of the logging macros, it must be noted that unless a
    log output is requesting that verbosity provided (or higher), the
    call is a no-op and the message stream or printf-style arguments will
    not be evaluated.
    
    @section Setup Setup
    
    To initialize logging, in your application's `main()` you may call
    `vtkLogger::Init(argv, argc)`. This is totally optional but useful to
    time-stamp the  start of the  log. Furthermore, it can optionally
    detect verbosity level on the command line as `-v` (or any another
    string pass as the optional argument to `Init`) that will be used as
    the verbosity level for logging on to `stderr`. By default, it is set
    to `0` (or `INFO`) unless changed by calling
    `vtkLogger::SetStderrVerbosity`.
    
    In additional to logging to `stderr`, one can accumulate logs to one
    or more files using `vtkLogger::LogToFile`. Each log file can be
    given its own verbosity level.
    
    For multithreaded applications, you may want to name each of the
    threads so that the generated log can use human readable names for
    the threads. For that, use `vtkLogger::SetThreadName`. Calling
    `vtkLogger::Init` will set the name for the main thread.
    
    @section Logging Logging
    
    vtkLogger provides several macros (again, based on `loguru`) that can
    be used to add the log. Both printf-style and stream-style is
    supported. All printf-style macros are suffixed with `F` to
    distinguish them from the stream macros. Another pattern in naming
    macros is the presence of `V` e.g. `vtkVLog` vs `vtkLog`. A macro
    with the `V` prefix takes a fully qualified verbosity enum e.g.
    `vtkLogger::VERBOSITY_INFO` or `vtkLogger::VERBOSITY_0`, while the
    non-`V` variant takes the verbosity name e.g. `INFO` or `0`.
    
    Following code snippet provides an overview of the available macros
    and their usage.
    
    {.cpp}
    
    
     // Optional, but useful to time-stamp the start of the log.
     // Will also detect verbosity level on the command line as -v.
    
    
     vtkLogger::Init(argc, argv);
    
    
     // Put every log message in "everything.log":
     vtkLogger::LogToFile("everything.log", vtkLogger::APPEND,
    vtkLogger::VERBOSITY_MAX);
    
    
     // Only log INFO, WARNING, ERROR to "latest_readable.log":
     vtkLogger::LogToFile("latest_readable.log", vtkLogger::TRUNCATE,
    vtkLogger::VERBOSITY_INFO);
    
    
     // Only show most relevant things on stderr:
     vtkLogger::SetStderrVerbosity(vtkLogger::VERBOSITY_1);
    
    
     // add a line to log using the verbosity name.
     vtkLogF(INFO, "I'm hungry for some %.3f!", 3.14159);
     vtkLogF(0, "same deal");
    
    
     // add a line to log using the verbosity enum.
     vtkVLogF(vtkLogger::VERBOSITY_INFO, "I'm hungry for some %.3f!",
    3.14159);
     vtkVLogF(vtkLogger::VERBOSITY_0, "same deal");
    
    
     // to add an identifier for a vtkObjectBase or subclass
     vtkLogF(INFO, "The object is %s", vtkLogIdentifier(vtkobject));
    
    
     // add a line conditionally to log if the condition succeeds:
     vtkLogIfF(INFO, ptr == nullptr, "ptr is nullptr (some number:
    %.3f)", *  3.14159);
    
    
     vtkLogScopeF(INFO, "Will indent all log messages within this
    scope.");
     // in a function, you may use vtkLogScopeFunction(INFO)
    
    
     // scope can be explicitly started and closed by vtkLogStartScope
    (or
     // vtkLogStartScopef) and vtkLogEndScope
     vtkLogStartScope(INFO, "id-used-as-message");
     vtkLogStartScopeF(INFO, "id", "message-%d", 1);
     vtkLogEndScope("id");
     vtkLogEndScope("id-used-as-message");
    
    
     // alternatively, you can use streams instead of printf-style
     vtkLog(INFO, "I'm hungry for some " << 3.14159 << "!");
     vtkLogIF(INFO, ptr == nullptr, "ptr is " << "nullptr");
    
    @section LoggingAndLegacyMacros Logging and VTK error macros
    
    VTK has long supported multiple macros to report errors, warnings and
    debug messages through `vtkErrorMacro`, `vtkWarningMacro`,
    `vtkDebugMacro`, etc. In addition to performing the traditional
    message reporting via `vtkOutputWindow`, these macros also log to the
    logging sub-system with appropriate verbosity levels.
    
    To avoid the vtkLogger and vtkOutputWindow both posting the message
    to the standard output streams, vtkOutputWindow now supports an
    ability to specify terminal display mode, via
    `vtkOutputWindow::SetDisplayMode`. If display mode is
    `vtkOutputWindow::DEFAULT` then the output window will not post
    messages originating from the standard error/warning/debug macros to
    the standard output if VTK is built with logging support. If VTK is
    not built with logging support, then vtkOutputWindow will post the
    messages to the standard output streams, unless disabled explicitly.
    
    @section Callbacks Custom callbacks/handlers for log messages
    
    vtkLogger supports ability to register callbacks to call on each
    logged message. This is useful to show the messages in application
    specific viewports, e.g. a special message widget.
    
    To register a callback use `vtkLogger::AddCallback` and to remove a
    callback use `vtkLogger::RemoveCallback` with the id provided when
    registering the callback.
    """
    def ConvertToVerbosity(self, p_int):
        """
        V.ConvertToVerbosity(int) -> Verbosity
        C++: static Verbosity ConvertToVerbosity(int value)
        V.ConvertToVerbosity(string) -> Verbosity
        C++: static Verbosity ConvertToVerbosity(const char *value)
        
        Convenience function to convert an integer to matching verbosity
        level. If val is less than or equal to
        vtkLogger::VERBOSITY_INVALID, then vtkLogger::VERBOSITY_INVALID
        is returned. If value is greater than vtkLogger::VERBOSITY_MAX,
        then vtkLogger::VERBOSITY_MAX is returned.
        """
        ...
    
    def EndLogToFile(self, string):
        """
        V.EndLogToFile(string)
        C++: static void EndLogToFile(const char *path)
        
        Stop logging to a file at the given path.
        """
        ...
    
    def EndScope(self, string):
        """
        V.EndScope(string)
        C++: static void EndScope(const char *id)
        """
        ...
    
    def GetCurrentVerbosityCutoff(self):
        """
        V.GetCurrentVerbosityCutoff() -> Verbosity
        C++: static Verbosity GetCurrentVerbosityCutoff()
        
        Returns the maximum verbosity of all log outputs. A log item for
        a verbosity higher than this will not be generated in any of the
        currently active outputs.
        """
        ...
    
    def GetIdentifier(self, vtkObjectBase):
        """
        V.GetIdentifier(vtkObjectBase) -> string
        C++: static std::string GetIdentifier(vtkObjectBase *obj)
        
        Returns a printable string for a vtkObjectBase instance.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetThreadName(self):
        """
        V.GetThreadName() -> string
        C++: static std::string GetThreadName()
        
        Get/Set the name to identify the current thread in the log
        output.
        """
        ...
    
    def Init(self):
        """
        V.Init()
        C++: static void Init()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsEnabled(self):
        """
        V.IsEnabled() -> bool
        C++: static bool IsEnabled()
        
        Returns true if VTK is built with logging support enabled.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Log(self, Verbosity, string, p_int, string_1):
        """
        V.Log(Verbosity, string, int, string)
        C++: static void Log(Verbosity verbosity, const char *fname,
            unsigned int lineno, const char *txt)
        """
        ...
    
    def LogToFile(self, string, FileMode, Verbosity):
        """
        V.LogToFile(string, FileMode, Verbosity)
        C++: static void LogToFile(const char *path, FileMode filemode,
            Verbosity verbosity)
        
        Enable logging to a file at the given path. Any logging message
        with verbosity lower or equal to the given verbosity will be
        included. This method will create all directories in the 'path'
        if needed. To stop the file logging, call `EndLogToFile` with the
        same path.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLogger
        C++: vtkLogger *NewInstance()
        """
        ...
    
    def RemoveCallback(self, string):
        """
        V.RemoveCallback(string) -> bool
        C++: static bool RemoveCallback(const char *id)
        
        Remove a callback using the id specified. Returns true if and
        only if the callback was found (and removed).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLogger
        C++: static vtkLogger *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetStderrVerbosity(self, Verbosity):
        """
        V.SetStderrVerbosity(Verbosity)
        C++: static void SetStderrVerbosity(Verbosity level)
        
        Set the verbosity level for the output logged to stderr.
        Everything with a verbosity equal or less than the level
        specified will be written to stderr. Set to `VERBOSITY_OFF` to
        write nothing to stderr. Default is 0.
        """
        ...
    
    def SetThreadName(self, string):
        """
        V.SetThreadName(string)
        C++: static void SetThreadName(const std::string &name)
        
        Get/Set the name to identify the current thread in the log
        output.
        """
        ...
    
    def StartScope(self, Verbosity, string, string_1, p_int):
        """
        V.StartScope(Verbosity, string, string, int)
        C++: static void StartScope(Verbosity verbosity, const char *id,
            const char *fname, unsigned int lineno)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    APPEND = ...
    FileMode = ...
    TRUNCATE = ...
    Verbosity = ...
    VERBOSITY_0 = ...
    VERBOSITY_1 = ...
    VERBOSITY_2 = ...
    VERBOSITY_3 = ...
    VERBOSITY_4 = ...
    VERBOSITY_5 = ...
    VERBOSITY_6 = ...
    VERBOSITY_7 = ...
    VERBOSITY_8 = ...
    VERBOSITY_9 = ...
    VERBOSITY_ERROR = ...
    VERBOSITY_INFO = ...
    VERBOSITY_INVALID = ...
    VERBOSITY_MAX = ...
    VERBOSITY_OFF = ...
    VERBOSITY_TRACE = ...
    VERBOSITY_WARNING = ...
    __dict__ = ...
    __vtkname__ = ...


