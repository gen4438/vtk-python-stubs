"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkConditionVariable(vtkObject):
    """
    vtkConditionVariable - mutual exclusion locking class
    
    Superclass: vtkObject
    
    vtkConditionVariable allows the locking of variables which are
    accessed through different threads.  This header file also defines
    vtkSimpleConditionVariable which is not a subclass of vtkObject.
    
    The win32 implementation is based on notes provided by Douglas C.
    Schmidt and Irfan Pyarali, Department of Computer Science, Washington
    University, St. Louis, Missouri.
    http://www.cs.wustl.edu/~schmidt/win32-cv-1.html
    """
    def Broadcast(self):
        """
        V.Broadcast()
        C++: void Broadcast()
        
        Wake all threads waiting for the condition to change.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkConditionVariable
        C++: vtkConditionVariable *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkConditionVariable
        C++: static vtkConditionVariable *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Signal(self):
        """
        V.Signal()
        C++: void Signal()
        
        Wake one thread waiting for the condition to change.
        """
        ...
    
    def Wait(self, vtkMutexLock):
        """
        V.Wait(vtkMutexLock) -> int
        C++: int Wait(vtkMutexLock *mutex)
        
        Wait for the condition to change. Upon entry, the mutex must be
        locked and the lock held by the calling thread. Upon exit, the
        mutex will be locked and held by the calling thread. Between
        entry and exit, the mutex will be unlocked and may be held by
        other threads.
        
        * @param mutex The mutex that should be locked on entry and will
          be locked on exit (but not in between)
        * @retval Normally, this function returns 0. Should a thread be
          interrupted by a signal, a non-zero value may be returned.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


