"""
This type stub file was generated by pyright.
"""

from .vtkArrayIterator import vtkArrayIterator

class vtkArrayIteratorTemplate_IdE(vtkArrayIterator):
    """
    vtkArrayIteratorTemplate- Implementation template for a array
    iterator.
    
    Superclass: vtkArrayIterator
    
    This is implementation template for a array iterator. It only works
    with arrays that have a contiguous internal storage of values (as in
    vtkDataArray, vtkStringArray).
    """
    def GetArray(self):
        """
        V.GetArray() -> vtkAbstractArray
        C++: vtkAbstractArray *GetArray()
        
        Get the array.
        """
        ...
    
    def GetDataType(self):
        """
        V.GetDataType() -> int
        C++: int GetDataType() override;
        
        Get the data type from the underlying array.
        """
        ...
    
    def GetDataTypeSize(self):
        """
        V.GetDataTypeSize() -> int
        C++: int GetDataTypeSize()
        
        Get the data type size from the underlying array.
        """
        ...
    
    def GetNumberOfComponents(self):
        """
        V.GetNumberOfComponents() -> int
        C++: int GetNumberOfComponents()
        
        Must be called only after Initialize.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTuples(self):
        """
        V.GetNumberOfTuples() -> int
        C++: vtkIdType GetNumberOfTuples()
        
        Must be called only after Initialize.
        """
        ...
    
    def GetNumberOfValues(self):
        """
        V.GetNumberOfValues() -> int
        C++: vtkIdType GetNumberOfValues()
        
        Must be called only after Initialize.
        """
        ...
    
    def GetTuple(self, p_int):
        """
        V.GetTuple(int) -> (float, ...)
        C++: double *GetTuple(vtkIdType id)
        
        Must be called only after Initialize.
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> float
        C++: double &GetValue(vtkIdType id)
        
        Must be called only after Initialize.
        """
        ...
    
    def Initialize(self, vtkAbstractArray):
        """
        V.Initialize(vtkAbstractArray)
        C++: void Initialize(vtkAbstractArray *array) override;
        
        Set the array this iterator will iterate over. After Initialize()
        has been called, the iterator is valid so long as the Array has
        not been modified (except using the iterator itself). If the
        array is modified, the iterator must be re-initialized.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArrayIteratorTemplate_IdE
        C++: vtkArrayIteratorTemplate<double> *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArrayIteratorTemplate_IdE
        C++: static vtkArrayIteratorTemplate<double> *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetValue(self, p_int, p_float):
        """
        V.SetValue(int, float)
        C++: void SetValue(vtkIdType id, double value)
        
        Sets the value at the index. This does not verify if the index is
        valid.  The caller must ensure that id is less than the maximum
        number of values.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


