"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkSmartPointerBase(object):
    """
    vtkSmartPointerBase - Non-templated superclass for vtkSmartPointer.
    
    vtkSmartPointerBase holds a pointer to a vtkObjectBase or subclass
    instance and performs one Register/UnRegister pair.  This is useful
    for storing VTK objects in STL containers.  This class is not
    intended to be used directly.  Instead, use the vtkSmartPointer class
    template to automatically perform proper cast operations.
    
    vtkSmartPointerBase() noexcept;
    vtkSmartPointerBase(vtkObjectBase *r)
    vtkSmartPointerBase(const vtkSmartPointerBase &r)
    vtkSmartPointerBase(vtkSmartPointerBase &&r) noexcept;
    """
    def GetPointer(self):
        """
        V.GetPointer() -> vtkObjectBase
        C++: vtkObjectBase *GetPointer() noexcept;
        
        Get the contained pointer.
        """
        ...
    
    def Report(self, vtkGarbageCollector, string):
        """
        V.Report(vtkGarbageCollector, string)
        C++: void Report(vtkGarbageCollector *collector, const char *desc)
        
        Report the reference held by the smart pointer to a collector.
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    


