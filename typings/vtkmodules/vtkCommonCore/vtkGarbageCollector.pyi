"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkGarbageCollector(vtkObject):
    """
    vtkGarbageCollector - Detect and break reference loops
    
    Superclass: vtkObject
    
    vtkGarbageCollector is used by VTK classes that may be involved in
    reference counting loops (such as Algorithm <-> Executive).  It
    detects strongly connected components of the reference graph that
    have been leaked deletes them.  The garbage collector uses the
    ReportReferences method to search the reference graph and construct a
    net reference count for each connected component.  If the net
    reference count is zero the entire set of objects is deleted.
    Deleting each component may leak other components, which are then
    collected recursively.
    
    To enable garbage collection for a class, add these members:
    
    public:
      void Register(vtkObjectBase* o) override
        {
        this->RegisterInternal(o, true);
        }
      void UnRegister(vtkObjectBase* o) override
        {
        this->UnRegisterInternal(o, true);
        }
    
    
     protected:
    
    
      void ReportReferences(vtkGarbageCollector* collector) override
        {
        // Report references held by this object that may be in a loop.
        this->Superclass::ReportReferences(collector);
        vtkGarbageCollectorReport(collector, this->OtherObject, "Other
    Object");
        }
    
    The implementations should be in the .cxx file in practice. It is
    important that the reference be reported using the real pointer or
    smart pointer instance that holds the reference.  When collecting the
    garbage collector will actually set this pointer to nullptr.  The
    destructor of the class should be written to deal with this.  It is
    also expected that an invariant is maintained for any reference that
    is reported.  The variable holding the reference must always either
    be nullptr or refer to a fully constructed valid object.  Therefore
    code like "this->Object->UnRegister(this)" must be avoided if
    "this->Object" is a reported reference because it is possible that
    the object is deleted before UnRegister returns but then
    "this->Object" will be left as a dangling pointer.  Instead use code
    like
    
    vtkObjectBase* obj = this->Object;
      this->Object = 0;
      obj->UnRegister(this);
    
    so that the reported reference maintains the invariant.
    
    If subclassing from a class that already supports garbage collection,
    one need only provide the ReportReferences method.
    """
    def Collect(self):
        """
        V.Collect()
        C++: static void Collect()
        V.Collect(vtkObjectBase)
        C++: static void Collect(vtkObjectBase *root)
        
        Collect immediately using any objects whose collection was
        previously deferred as a root for the reference graph walk.
        Strongly connected components in the reference graph are
        identified.  Those with a net reference count of zero are
        deleted.  When a component is deleted it may remove references to
        other components that are not part of the same reference loop but
        are held by objects in the original component.  These removed
        references are handled as any other and their corresponding
        checks may be deferred.  This method keeps collecting until no
        deferred collection checks remain.
        """
        ...
    
    def DeferredCollectionPop(self):
        """
        V.DeferredCollectionPop()
        C++: static void DeferredCollectionPop()
        
        Push/Pop whether to do deferred collection.  Whenever the total
        number of pushes exceeds the total number of pops collection will
        be deferred.  Code can call the Collect method directly to force
        collection.
        """
        ...
    
    def DeferredCollectionPush(self):
        """
        V.DeferredCollectionPush()
        C++: static void DeferredCollectionPush()
        
        Push/Pop whether to do deferred collection.  Whenever the total
        number of pushes exceeds the total number of pops collection will
        be deferred.  Code can call the Collect method directly to force
        collection.
        """
        ...
    
    def GetGlobalDebugFlag(self):
        """
        V.GetGlobalDebugFlag() -> bool
        C++: static bool GetGlobalDebugFlag()
        
        Set/Get global garbage collection debugging flag.  When set to
        true, all garbage collection checks will produce debugging
        information.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGarbageCollector
        C++: vtkGarbageCollector *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGarbageCollector
        C++: static vtkGarbageCollector *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGlobalDebugFlag(self, bool):
        """
        V.SetGlobalDebugFlag(bool)
        C++: static void SetGlobalDebugFlag(bool flag)
        
        Set/Get global garbage collection debugging flag.  When set to
        true, all garbage collection checks will produce debugging
        information.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


