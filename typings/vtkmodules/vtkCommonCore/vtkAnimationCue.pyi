"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkAnimationCue(vtkObject):
    """
    vtkAnimationCue - a seqin an animation.
    
    Superclass: vtkObject
    
    vtkAnimationCue and vtkAnimationScene provide the framework to
    support animations in VTK. vtkAnimationCue represents an entity that
    changes/ animates with time, while vtkAnimationScene represents scene
    or setup for the animation, which consists on individual cues or
    other scenes.
    
    A cue has three states: UNINITIALIZED, ACTIVE and INACTIVE.
    UNINITIALIZED represents an point in time before the start time of
    the cue. The cue is in ACTIVE state at a point in time between start
    time and end time for the cue. While, beyond the end time, it is in
    INACTIVE state. When the cue enters the ACTIVE state,
    StartAnimationCueEvent is fired. This event may be handled to
    initialize the entity to be animated. When the cue leaves the ACTIVE
    state, EndAnimationCueEvent is fired, which can be handled to cleanup
    after having run the animation. For every request to render during
    the ACTIVE state, AnimationCueTickEvent is fired, which must be
    handled to perform the actual animation.
    @sa
    vtkAnimationScene
    """
    def Finalize(self):
        """
        V.Finalize()
        C++: virtual void Finalize()
        
        Called when the scene reaches the end. If the cue state is ACTIVE
        when this method is called, this will trigger a
        EndAnimationCueEvent.
        """
        ...
    
    def GetAnimationTime(self):
        """
        V.GetAnimationTime() -> float
        C++: virtual double GetAnimationTime()
        
        This is valid only in a AnimationCueTickEvent handler. Before
        firing the event the animation cue sets the AnimationTime to the
        time of the tick.
        """
        ...
    
    def GetClockTime(self):
        """
        V.GetClockTime() -> float
        C++: virtual double GetClockTime()
        
        This is valid only in a AnimationCueTickEvent handler. Before
        firing the event the animation cue sets the ClockTime to the time
        of the tick. ClockTime is directly the time from the animation
        scene neither normalized nor offsetted to the start of the scene.
        """
        ...
    
    def GetDeltaTime(self):
        """
        V.GetDeltaTime() -> float
        C++: virtual double GetDeltaTime()
        
        This is valid only in a AnimationCueTickEvent handler. Before
        firing the event the animation cue sets the DeltaTime to the
        difference in time between the current tick and the last tick.
        """
        ...
    
    def GetEndTime(self):
        """
        V.GetEndTime() -> float
        C++: virtual double GetEndTime()
        
        Get/Set the End time for this cue. When the current time is >
        EndTime, the Cue is in INACTIVE state. Whenever the cue leaves an
        ACTIVE state to enter INACTIVE state, the EndEvent is triggered.
        The End time is in seconds relative to the start of the container
        Scene (when in Relative time mode) or is normalized over the span
        of the container Scene (when in Normalized time mode).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStartTime(self):
        """
        V.GetStartTime() -> float
        C++: virtual double GetStartTime()
        
        Get/Set the Start time for this cue. When the current time is >=
        StartTime, the Cue is in ACTIVE state. if Current time i <
        StartTime, the Cue is in UNINITIALIZED state. Whenever the cue
        enters the ACTIVE state from an INACTIVE state, it triggers the
        StartEvent. The Start time is in seconds relative to the start of
        the container Scene (when in Relative time mode) or is normalized
        over the span of the container Scene (when in Normalized time
        mode).
        """
        ...
    
    def GetTimeMode(self):
        """
        V.GetTimeMode() -> int
        C++: virtual int GetTimeMode()
        
        Get/Set the time mode. In Normalized mode, the start and end
        times of the cue are normalized [0,1] with respect to the start
        and end times of the container scene. In Relative mode the start
        and end time of the cue are specified in offset seconds relative
        to the start time of the container scene.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize()
        
        Called when the playing of the scene begins. This will set the
        Cue to UNINITIALIZED state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAnimationCue
        C++: vtkAnimationCue *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAnimationCue
        C++: static vtkAnimationCue *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEndTime(self, p_float):
        """
        V.SetEndTime(float)
        C++: virtual void SetEndTime(double _arg)
        
        Get/Set the End time for this cue. When the current time is >
        EndTime, the Cue is in INACTIVE state. Whenever the cue leaves an
        ACTIVE state to enter INACTIVE state, the EndEvent is triggered.
        The End time is in seconds relative to the start of the container
        Scene (when in Relative time mode) or is normalized over the span
        of the container Scene (when in Normalized time mode).
        """
        ...
    
    def SetStartTime(self, p_float):
        """
        V.SetStartTime(float)
        C++: virtual void SetStartTime(double _arg)
        
        Get/Set the Start time for this cue. When the current time is >=
        StartTime, the Cue is in ACTIVE state. if Current time i <
        StartTime, the Cue is in UNINITIALIZED state. Whenever the cue
        enters the ACTIVE state from an INACTIVE state, it triggers the
        StartEvent. The Start time is in seconds relative to the start of
        the container Scene (when in Relative time mode) or is normalized
        over the span of the container Scene (when in Normalized time
        mode).
        """
        ...
    
    def SetTimeMode(self, p_int):
        """
        V.SetTimeMode(int)
        C++: virtual void SetTimeMode(int mode)
        
        Get/Set the time mode. In Normalized mode, the start and end
        times of the cue are normalized [0,1] with respect to the start
        and end times of the container scene. In Relative mode the start
        and end time of the cue are specified in offset seconds relative
        to the start time of the container scene.
        """
        ...
    
    def SetTimeModeToNormalized(self):
        """
        V.SetTimeModeToNormalized()
        C++: void SetTimeModeToNormalized()
        
        Get/Set the time mode. In Normalized mode, the start and end
        times of the cue are normalized [0,1] with respect to the start
        and end times of the container scene. In Relative mode the start
        and end time of the cue are specified in offset seconds relative
        to the start time of the container scene.
        """
        ...
    
    def SetTimeModeToRelative(self):
        """
        V.SetTimeModeToRelative()
        C++: void SetTimeModeToRelative()
        
        Get/Set the time mode. In Normalized mode, the start and end
        times of the cue are normalized [0,1] with respect to the start
        and end times of the container scene. In Relative mode the start
        and end time of the cue are specified in offset seconds relative
        to the start time of the container scene.
        """
        ...
    
    def Tick(self, p_float, p_float_1, p_float_2):
        """
        V.Tick(float, float, float)
        C++: virtual void Tick(double currenttime, double deltatime,
            double clocktime)
        
        Indicates a tick or point in time in the animation. Triggers a
        Tick event if currenttime >= StartTime and currenttime <=
        EndTime. Whenever the state of the cue changes, either StartEvent
        or EndEvent is triggered depending upon whether the cue entered
        Active state or quit active state respectively. The current time
        is relative to the start of the container Scene (when in Relative
        time mode) or is normalized over the span of the container Scene
        (when in Normalized time mode). deltatime is the time since last
        call to Tick. deltatime also can be in seconds relative to the
        start of the container Scene or normalized depending upon the
        cue's Time mode. clocktime is the time from the scene i.e. it
        does not depend on the time mode for the cue. For the first call
        to Tick after a call to Initialize(), the deltatime is 0;
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    TimeCodes = ...
    TIMEMODE_NORMALIZED = ...
    TIMEMODE_RELATIVE = ...
    __dict__ = ...
    __vtkname__ = ...


