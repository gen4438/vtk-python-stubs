"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkTimeStamp(object):
    """
    vtkTimeStamp - record modification and/or execution time
    
    vtkTimeStamp records a unique time when the method Modified() is
    executed. This time is guaranteed to be monotonically increasing.
    Classes use this object to record modified and/or execution time.
    There is built in support for the binary < and > comparison operators
    between two vtkTimeStamp objects.
    
    vtkTimeStamp()
    vtkTimeStamp(const &vtkTimeStamp)
    """
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime()
        
        Return this object's Modified time.
        """
        ...
    
    def Modified(self):
        """
        V.Modified()
        C++: void Modified()
        
        Set this objects time to the current time. The current time is
        just a monotonically increasing unsigned long integer. It is
        possible for this number to wrap around back to zero. This should
        only happen for processes that have been running for a very long
        time, while constantly changing objects within the program. When
        this does occur, the typical consequence should be that some
        filters will update themselves when really they don't need to.
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


