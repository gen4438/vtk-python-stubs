"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkWindow(vtkObject):
    """
    vtkWindow - window superclass for vtkRenderWindow
    
    Superclass: vtkObject
    
    vtkWindow is an abstract object to specify the behavior of a
    rendering window.  It contains vtkViewports.
    
    @sa
    vtkRenderWindow vtkViewport
    """
    def DetectDPI(self):
        """
        V.DetectDPI() -> bool
        C++: virtual bool DetectDPI()
        
        Attempt to detect and set the DPI of the display device by
        querying the system. Note that this is not supported on most
        backends, and this method will return false if the DPI could not
        be detected. Use GetDPI() to inspect the detected value.
        """
        ...
    
    def DoubleBufferOff(self):
        """
        V.DoubleBufferOff()
        C++: virtual void DoubleBufferOff()
        
        Keep track of whether double buffering is on or off
        """
        ...
    
    def DoubleBufferOn(self):
        """
        V.DoubleBufferOn()
        C++: virtual void DoubleBufferOn()
        
        Keep track of whether double buffering is on or off
        """
        ...
    
    def EraseOff(self):
        """
        V.EraseOff()
        C++: virtual void EraseOff()
        
        Turn on/off erasing the screen between images. This allows
        multiple exposure sequences if turned on. You will need to turn
        double buffering off or make use of the SwapBuffers methods to
        prevent you from swapping buffers between exposures.
        """
        ...
    
    def EraseOn(self):
        """
        V.EraseOn()
        C++: virtual void EraseOn()
        
        Turn on/off erasing the screen between images. This allows
        multiple exposure sequences if turned on. You will need to turn
        double buffering off or make use of the SwapBuffers methods to
        prevent you from swapping buffers between exposures.
        """
        ...
    
    def GetActualSize(self):
        """
        V.GetActualSize() -> (int, int)
        C++: int *GetActualSize()
        
        GetSize() returns the size * this->TileScale, whereas this method
        returns the size without multiplying with the tile scale.
        Measured in pixels.
        """
        ...
    
    def GetDoubleBuffer(self):
        """
        V.GetDoubleBuffer() -> int
        C++: virtual vtkTypeBool GetDoubleBuffer()
        
        Keep track of whether double buffering is on or off
        """
        ...
    
    def GetDPI(self):
        """
        V.GetDPI() -> int
        C++: virtual int GetDPI()
        
        Return a best estimate to the dots per inch of the display device
        being rendered (or printed).
        """
        ...
    
    def GetDPIMaxValue(self):
        """
        V.GetDPIMaxValue() -> int
        C++: virtual int GetDPIMaxValue()
        
        Return a best estimate to the dots per inch of the display device
        being rendered (or printed).
        """
        ...
    
    def GetDPIMinValue(self):
        """
        V.GetDPIMinValue() -> int
        C++: virtual int GetDPIMinValue()
        
        Return a best estimate to the dots per inch of the display device
        being rendered (or printed).
        """
        ...
    
    def GetErase(self):
        """
        V.GetErase() -> int
        C++: virtual vtkTypeBool GetErase()
        
        Turn on/off erasing the screen between images. This allows
        multiple exposure sequences if turned on. You will need to turn
        double buffering off or make use of the SwapBuffers methods to
        prevent you from swapping buffers between exposures.
        """
        ...
    
    def GetGenericContext(self):
        """
        V.GetGenericContext() -> void
        C++: virtual void *GetGenericContext()
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def GetGenericDisplayId(self):
        """
        V.GetGenericDisplayId() -> void
        C++: virtual void *GetGenericDisplayId()
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def GetGenericDrawable(self):
        """
        V.GetGenericDrawable() -> void
        C++: virtual void *GetGenericDrawable()
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def GetGenericParentId(self):
        """
        V.GetGenericParentId() -> void
        C++: virtual void *GetGenericParentId()
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def GetGenericWindowId(self):
        """
        V.GetGenericWindowId() -> void
        C++: virtual void *GetGenericWindowId()
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def GetMapped(self):
        """
        V.GetMapped() -> int
        C++: virtual vtkTypeBool GetMapped()
        
        Keep track of whether the rendering window has been mapped to
        screen.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOffScreenRendering(self):
        """
        V.GetOffScreenRendering() -> int
        C++: vtkTypeBool GetOffScreenRendering()
        
        Deprecated, directly use GetShowWindow and GetOffScreenBuffers
        instead.
        """
        ...
    
    def GetPixelData(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.GetPixelData(int, int, int, int, int, int) -> (int, ...)
        C++: virtual unsigned char *GetPixelData(int, int, int, int, int,
            int=0)
        V.GetPixelData(int, int, int, int, int, vtkUnsignedCharArray, int)
             -> int
        C++: virtual int GetPixelData(int, int, int, int, int,
            vtkUnsignedCharArray *, int=0)
        
        Get the pixel data of an image, transmitted as RGBRGBRGB. The
        front argument indicates if the front buffer should be used or
        the back buffer. It is the caller's responsibility to delete the
        resulting array. It is very important to realize that the memory
        in this array is organized from the bottom of the window to the
        top. The origin of the screen is in the lower left corner. The y
        axis increases as you go up the screen. So the storage of pixels
        is from left to right and from bottom to top. (x,y) is any corner
        of the rectangle. (x2,y2) is its opposite corner on the diagonal.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (int, int)
        C++: virtual int *GetPosition()
        
        Get the position (x and y) of the rendering window in screen
        coordinates (in pixels).
        """
        ...
    
    def GetScreenSize(self):
        """
        V.GetScreenSize() -> (int, int)
        C++: virtual int *GetScreenSize()
        
        Get the current size of the screen in pixels.
        """
        ...
    
    def GetShowWindow(self):
        """
        V.GetShowWindow() -> bool
        C++: virtual bool GetShowWindow()
        
        Show or not Show the window
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> (int, int)
        C++: virtual int *GetSize()
        
        Get the size (width and height) of the rendering window in screen
        coordinates (in pixels).
        """
        ...
    
    def GetTileScale(self):
        """
        V.GetTileScale() -> (int, int)
        C++: virtual int *GetTileScale()
        
        These methods are used by vtkWindowToImageFilter to tell a VTK
        window to simulate a larger window by tiling. For 3D geometry
        these methods have no impact. It is just in handling annotation
        that this information must be available to the mappers and the
        coordinate calculations.
        """
        ...
    
    def GetTileViewport(self):
        """
        V.GetTileViewport() -> (float, float, float, float)
        C++: virtual double *GetTileViewport()
        
        These methods are used by vtkWindowToImageFilter to tell a VTK
        window to simulate a larger window by tiling. For 3D geometry
        these methods have no impact. It is just in handling annotation
        that this information must be available to the mappers and the
        coordinate calculations.
        """
        ...
    
    def GetUseOffScreenBuffers(self):
        """
        V.GetUseOffScreenBuffers() -> bool
        C++: virtual bool GetUseOffScreenBuffers()
        
        Render to an offscreen destination such as a framebuffer. All
        four combinations of ShowWindow and UseOffScreenBuffers should
        work for most rendering backends.
        """
        ...
    
    def GetWindowName(self):
        """
        V.GetWindowName() -> string
        C++: virtual char *GetWindowName()
        
        Get name of rendering window
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MakeCurrent(self):
        """
        V.MakeCurrent()
        C++: virtual void MakeCurrent()
        
        Make the window current. May be overridden in subclasses to do
        for example a glXMakeCurrent or a wglMakeCurrent.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWindow
        C++: vtkWindow *NewInstance()
        """
        ...
    
    def OffScreenRenderingOff(self):
        """
        V.OffScreenRenderingOff()
        C++: virtual void OffScreenRenderingOff()
        
        Convenience to set SHowWindow and UseOffScreenBuffers in one call
        """
        ...
    
    def OffScreenRenderingOn(self):
        """
        V.OffScreenRenderingOn()
        C++: virtual void OffScreenRenderingOn()
        
        Convenience to set SHowWindow and UseOffScreenBuffers in one call
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *)
        
        Release any graphics resources that are being consumed by this
        texture. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: virtual void Render()
        
        Ask each viewport owned by this Window to render its image and
        synchronize this process.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWindow
        C++: static vtkWindow *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDisplayId(self, void):
        """
        V.SetDisplayId(void)
        C++: virtual void SetDisplayId(void *)
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def SetDoubleBuffer(self, p_int):
        """
        V.SetDoubleBuffer(int)
        C++: virtual void SetDoubleBuffer(vtkTypeBool _arg)
        
        Keep track of whether double buffering is on or off
        """
        ...
    
    def SetDPI(self, p_int):
        """
        V.SetDPI(int)
        C++: virtual void SetDPI(int _arg)
        
        Return a best estimate to the dots per inch of the display device
        being rendered (or printed).
        """
        ...
    
    def SetErase(self, p_int):
        """
        V.SetErase(int)
        C++: virtual void SetErase(vtkTypeBool _arg)
        
        Turn on/off erasing the screen between images. This allows
        multiple exposure sequences if turned on. You will need to turn
        double buffering off or make use of the SwapBuffers methods to
        prevent you from swapping buffers between exposures.
        """
        ...
    
    def SetOffScreenRendering(self, p_int):
        """
        V.SetOffScreenRendering(int)
        C++: void SetOffScreenRendering(vtkTypeBool val)
        
        Convenience to set SHowWindow and UseOffScreenBuffers in one call
        """
        ...
    
    def SetParentId(self, void):
        """
        V.SetParentId(void)
        C++: virtual void SetParentId(void *)
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def SetParentInfo(self, string):
        """
        V.SetParentInfo(string)
        C++: virtual void SetParentInfo(const char *)
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def SetPosition(self, p_int, p_int_1):
        """
        V.SetPosition(int, int)
        C++: virtual void SetPosition(int x, int y)
        V.SetPosition([int, int])
        C++: virtual void SetPosition(int a[2])
        
        Set the position (x and y) of the rendering window in screen
        coordinates (in pixels). This resizes the operating system's
        view/window and redraws it.
        """
        ...
    
    def SetShowWindow(self, bool):
        """
        V.SetShowWindow(bool)
        C++: virtual void SetShowWindow(bool _arg)
        
        Show or not Show the window
        """
        ...
    
    def SetSize(self, p_int, p_int_1):
        """
        V.SetSize(int, int)
        C++: virtual void SetSize(int width, int height)
        V.SetSize([int, int])
        C++: virtual void SetSize(int a[2])
        
        Set the size (width and height) of the rendering window in screen
        coordinates (in pixels). This resizes the operating system's
        view/window and redraws it.
        
        If the size has changed, this method will fire
        vtkCommand::WindowResizeEvent.
        """
        ...
    
    def SetTileScale(self, p_int, p_int_1):
        """
        V.SetTileScale(int, int)
        C++: virtual void SetTileScale(int _arg1, int _arg2)
        V.SetTileScale((int, int))
        C++: void SetTileScale(const int _arg[2])
        V.SetTileScale(int)
        C++: void SetTileScale(int s)
        
        These methods are used by vtkWindowToImageFilter to tell a VTK
        window to simulate a larger window by tiling. For 3D geometry
        these methods have no impact. It is just in handling annotation
        that this information must be available to the mappers and the
        coordinate calculations.
        """
        ...
    
    def SetTileViewport(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetTileViewport(float, float, float, float)
        C++: virtual void SetTileViewport(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetTileViewport((float, float, float, float))
        C++: virtual void SetTileViewport(const double _arg[4])
        
        These methods are used by vtkWindowToImageFilter to tell a VTK
        window to simulate a larger window by tiling. For 3D geometry
        these methods have no impact. It is just in handling annotation
        that this information must be available to the mappers and the
        coordinate calculations.
        """
        ...
    
    def SetUseOffScreenBuffers(self, bool):
        """
        V.SetUseOffScreenBuffers(bool)
        C++: virtual void SetUseOffScreenBuffers(bool _arg)
        
        Render to an offscreen destination such as a framebuffer. All
        four combinations of ShowWindow and UseOffScreenBuffers should
        work for most rendering backends.
        """
        ...
    
    def SetWindowId(self, void):
        """
        V.SetWindowId(void)
        C++: virtual void SetWindowId(void *)
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def SetWindowInfo(self, string):
        """
        V.SetWindowInfo(string)
        C++: virtual void SetWindowInfo(const char *)
        
        These are window system independent methods that are used to help
        interface vtkWindow to native windowing systems.
        """
        ...
    
    def SetWindowName(self, string):
        """
        V.SetWindowName(string)
        C++: virtual void SetWindowName(const char *_arg)
        
        Get name of rendering window
        """
        ...
    
    def ShowWindowOff(self):
        """
        V.ShowWindowOff()
        C++: virtual void ShowWindowOff()
        
        Show or not Show the window
        """
        ...
    
    def ShowWindowOn(self):
        """
        V.ShowWindowOn()
        C++: virtual void ShowWindowOn()
        
        Show or not Show the window
        """
        ...
    
    def UseOffScreenBuffersOff(self):
        """
        V.UseOffScreenBuffersOff()
        C++: virtual void UseOffScreenBuffersOff()
        
        Render to an offscreen destination such as a framebuffer. All
        four combinations of ShowWindow and UseOffScreenBuffers should
        work for most rendering backends.
        """
        ...
    
    def UseOffScreenBuffersOn(self):
        """
        V.UseOffScreenBuffersOn()
        C++: virtual void UseOffScreenBuffersOn()
        
        Render to an offscreen destination such as a framebuffer. All
        four combinations of ShowWindow and UseOffScreenBuffers should
        work for most rendering backends.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


