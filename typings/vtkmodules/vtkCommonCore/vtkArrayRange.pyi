"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkArrayRange(object):
    """
    vtkArrayRange - Stores a half-open range of array coordinates.
    
    vtkArrayRange stores a half-open range of array coordinates along a
    single dimension of a vtkArraySlice object.
    
    @sa
    vtkArray, vtkArrayRange
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    
    vtkArrayRange()
    vtkArrayRange(CoordinateT begin, CoordinateT end)
    vtkArrayRange(const &vtkArrayRange)
    """
    def Contains(self, vtkArrayRange):
        """
        V.Contains(vtkArrayRange) -> bool
        C++: bool Contains(const vtkArrayRange &range)
        V.Contains(int) -> bool
        C++: bool Contains(const CoordinateT coordinate)
        
        Returns true iff the given range is a non-overlapping subset of
        this range.
        """
        ...
    
    def GetBegin(self):
        """
        V.GetBegin() -> int
        C++: CoordinateT GetBegin()
        
        Returns the beginning of the range
        """
        ...
    
    def GetEnd(self):
        """
        V.GetEnd() -> int
        C++: CoordinateT GetEnd()
        
        Returns one-past-the-end of the range
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> int
        C++: CoordinateT GetSize()
        
        Returns the size of the range (the distance End - Begin).
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    


