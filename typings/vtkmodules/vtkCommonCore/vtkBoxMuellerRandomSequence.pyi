"""
This type stub file was generated by pyright.
"""

from .vtkGaussianRandomSequence import vtkGaussianRandomSequence

class vtkBoxMuellerRandomSequence(vtkGaussianRandomSequence):
    """
    vtkBoxMuellerRandomSequence - Gaussian sequence of pseudo random
    numbers implemented with the Box-Mueller transform
    
    Superclass: vtkGaussianRandomSequence
    
    vtkGaussianRandomSequence is a sequence of pseudo random numbers
    distributed according to the Gaussian/normal distribution (mean=0 and
    standard deviation=1).
    
    It based is calculation from a uniformly distributed pseudo random
    sequence. The initial sequence is a vtkMinimalStandardRandomSequence.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def GetUniformSequence(self):
        """
        V.GetUniformSequence() -> vtkRandomSequence
        C++: vtkRandomSequence *GetUniformSequence()
        
        Return the uniformly distributed sequence of random numbers.
        """
        ...
    
    def GetValue(self):
        """
        V.GetValue() -> float
        C++: double GetValue() override;
        
        Current value.
        """
        ...
    
    def Initialize(self, p_int):
        """
        V.Initialize(int)
        C++: void Initialize(vtkTypeUInt32 seed) override;
        
        Satisfy general API of vtkRandomSequence superclass. Initialize
        the sequence with a seed.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBoxMuellerRandomSequence
        C++: vtkBoxMuellerRandomSequence *NewInstance()
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def Next(self):
        """
        V.Next()
        C++: void Next() override;
        
        Move to the next number in the random sequence.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBoxMuellerRandomSequence
        C++: static vtkBoxMuellerRandomSequence *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def SetUniformSequence(self, vtkRandomSequence):
        """
        V.SetUniformSequence(vtkRandomSequence)
        C++: void SetUniformSequence(vtkRandomSequence *uniformSequence)
        
        Set the uniformly distributed sequence of random numbers. Default
        is a .
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


