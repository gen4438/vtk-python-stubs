"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkDataArraySelection(vtkObject):
    """
    vtkDataArraySelection - Store on/off settings for data arrays for a
    vtkSource.
    
    Superclass: vtkObject
    
    vtkDataArraySelection can be used by vtkSource subclasses to store
    on/off settings for whether each vtkDataArray in its input should be
    passed in the source's output.  This is primarily intended to allow
    file readers to configure what data arrays are read from the file.
    """
    def AddArray(self, string, bool):
        """
        V.AddArray(string, bool) -> int
        C++: int AddArray(const char *name, bool state=true)
        
        Add to the list of arrays that have entries.  For arrays that
        already have entries, the settings are untouched.  For arrays
        that don't already have an entry, they are assumed to be enabled
        by default. The state can also be passed as the second argument.
        This method should be called only by the filter owning this
        object.
        
        This method **does not** call `this->Modified()`.
        
        Also note for arrays already known to this instance (i.e.
        `this->ArrayExists(name) == true`, this method has no effect.
        """
        ...
    
    def ArrayExists(self, string):
        """
        V.ArrayExists(string) -> int
        C++: int ArrayExists(const char *name)
        
        Return whether the array with the given name exists.
        """
        ...
    
    def ArrayIsEnabled(self, string):
        """
        V.ArrayIsEnabled(string) -> int
        C++: int ArrayIsEnabled(const char *name)
        
        Return whether the array with the given name is enabled.  If
        there is no entry, the array is assumed to be disabled.
        """
        ...
    
    def CopySelections(self, vtkDataArraySelection):
        """
        V.CopySelections(vtkDataArraySelection)
        C++: void CopySelections(vtkDataArraySelection *selections)
        
        Copy the selections from the given vtkDataArraySelection
        instance.
        
        This method will call `this->Modified()` if the array selections
        changed.
        """
        ...
    
    def DisableAllArrays(self):
        """
        V.DisableAllArrays()
        C++: void DisableAllArrays()
        
        Disable all arrays that currently have an entry.
        
        This method will call `this->Modified()` if the enable state for
        any of the known arrays is changed.
        """
        ...
    
    def DisableArray(self, string):
        """
        V.DisableArray(string)
        C++: void DisableArray(const char *name)
        
        Disable the array with the given name.  Creates a new entry if
        none exists.
        
        This method will call `this->Modified()` if the enable state for
        the array changed.
        """
        ...
    
    def EnableAllArrays(self):
        """
        V.EnableAllArrays()
        C++: void EnableAllArrays()
        
        Enable all arrays that currently have an entry.
        
        This method will call `this->Modified()` if the enable state for
        any of the known arrays is changed.
        """
        ...
    
    def EnableArray(self, string):
        """
        V.EnableArray(string)
        C++: void EnableArray(const char *name)
        
        Enable the array with the given name.  Creates a new entry if
        none exists.
        
        This method will call `this->Modified()` if the enable state for
        the array changed.
        """
        ...
    
    def GetArrayIndex(self, string):
        """
        V.GetArrayIndex(string) -> int
        C++: int GetArrayIndex(const char *name)
        
        Get an index of the array with the given name.
        """
        ...
    
    def GetArrayName(self, p_int):
        """
        V.GetArrayName(int) -> string
        C++: const char *GetArrayName(int index)
        
        Get the name of the array entry at the given index.
        """
        ...
    
    def GetArraySetting(self, p_int):
        """
        V.GetArraySetting(int) -> int
        C++: int GetArraySetting(int index)
        V.GetArraySetting(string) -> int
        C++: int GetArraySetting(const char *name)
        
        Get whether the array at the given index is enabled.
        """
        ...
    
    def GetEnabledArrayIndex(self, string):
        """
        V.GetEnabledArrayIndex(string) -> int
        C++: int GetEnabledArrayIndex(const char *name)
        
        Get the index of an array with the given name among those that
        are enabled.  Returns -1 if the array is not enabled.
        """
        ...
    
    def GetNumberOfArrays(self):
        """
        V.GetNumberOfArrays() -> int
        C++: int GetNumberOfArrays()
        
        Get the number of arrays that currently have an entry.
        """
        ...
    
    def GetNumberOfArraysEnabled(self):
        """
        V.GetNumberOfArraysEnabled() -> int
        C++: int GetNumberOfArraysEnabled()
        
        Get the number of arrays that are enabled.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUnknownArraySetting(self):
        """
        V.GetUnknownArraySetting() -> int
        C++: virtual int GetUnknownArraySetting()
        
        Get/Set enabled state for any unknown arrays. Default is 0 i.e.
        not enabled. When set to 1, `ArrayIsEnabled` will return 1 for
        any array not explicitly specified.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataArraySelection
        C++: vtkDataArraySelection *NewInstance()
        """
        ...
    
    def RemoveAllArrays(self):
        """
        V.RemoveAllArrays()
        C++: void RemoveAllArrays()
        
        Remove all array entries.
        
        This method will call `this->Modified()` if the arrays were
        cleared.
        """
        ...
    
    def RemoveArrayByIndex(self, p_int):
        """
        V.RemoveArrayByIndex(int)
        C++: void RemoveArrayByIndex(int index)
        
        Remove an array setting given its index.
        
        This method **does not** call `this->Modified()`.
        """
        ...
    
    def RemoveArrayByName(self, string):
        """
        V.RemoveArrayByName(string)
        C++: void RemoveArrayByName(const char *name)
        
        Remove an array setting given its name.
        
        This method **does not** call `this->Modified()`.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataArraySelection
        C++: static vtkDataArraySelection *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetArraySetting(self, string, p_int):
        """
        V.SetArraySetting(string, int)
        C++: void SetArraySetting(const char *name, int status)
        
        Set array setting given the name. If the array doesn't exist, it
        will be added.
        
        This method will call `this->Modified()` if the enable state for
        the array changed.
        """
        ...
    
    def SetUnknownArraySetting(self, p_int):
        """
        V.SetUnknownArraySetting(int)
        C++: virtual void SetUnknownArraySetting(int _arg)
        
        Get/Set enabled state for any unknown arrays. Default is 0 i.e.
        not enabled. When set to 1, `ArrayIsEnabled` will return 1 for
        any array not explicitly specified.
        """
        ...
    
    def Union(self, vtkDataArraySelection):
        """
        V.Union(vtkDataArraySelection)
        C++: void Union(vtkDataArraySelection *other)
        
        Update `this` to include values from `other`. For arrays that
        don't exist in `this` but exist in `other`, they will get added
        to `this` with the same array setting as in `other`. Array
        settings for arrays already in `this` are left unchanged.
        
        This method will call `this->Modified()` if the array selections
        changed.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


