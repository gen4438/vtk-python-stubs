"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkVoidArray(vtkObject):
    """
    vtkVoidArray - dynamic, self-adjusting array of void* pointers
    
    Superclass: vtkObject
    
    vtkVoidArray is an array of pointers to void. It provides methods for
    insertion and retrieval of these pointers values, and will
    automatically resize itself to hold new data.
    """
    def Allocate(self, p_int, p_int_1):
        """
        V.Allocate(int, int) -> int
        C++: vtkTypeBool Allocate(vtkIdType sz, vtkIdType ext=1000)
        
        Allocate memory for this array. Delete old storage only if
        necessary. Note that the parameter ext is no longer used.
        """
        ...
    
    def DeepCopy(self, vtkVoidArray):
        """
        V.DeepCopy(vtkVoidArray)
        C++: void DeepCopy(vtkVoidArray *va)
        
        Deep copy of another void array.
        """
        ...
    
    def GetDataType(self):
        """
        V.GetDataType() -> int
        C++: int GetDataType()
        
        Return the type of data.
        """
        ...
    
    def GetDataTypeSize(self):
        """
        V.GetDataTypeSize() -> int
        C++: int GetDataTypeSize()
        
        Return the size of the data contained in the array.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPointers(self):
        """
        V.GetNumberOfPointers() -> int
        C++: vtkIdType GetNumberOfPointers()
        
        Get the number of void* pointers held in the array.
        """
        ...
    
    def GetVoidPointer(self, p_int):
        """
        V.GetVoidPointer(int) -> void
        C++: void *GetVoidPointer(vtkIdType id)
        
        Get the void* pointer at the ith location.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Release storage and reset array to initial state.
        """
        ...
    
    def InsertNextVoidPointer(self, void):
        """
        V.InsertNextVoidPointer(void) -> int
        C++: vtkIdType InsertNextVoidPointer(void *tuple)
        
        Insert (memory allocation performed) the void* pointer at the end
        of the array.
        """
        ...
    
    def InsertVoidPointer(self, p_int, void):
        """
        V.InsertVoidPointer(int, void)
        C++: void InsertVoidPointer(vtkIdType i, void *ptr)
        
        Insert (memory allocation performed) the void* into the ith
        location in the array.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVoidArray
        C++: vtkVoidArray *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reuse already allocated data; make the container look like it is
        empty.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVoidArray
        C++: static vtkVoidArray *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfPointers(self, p_int):
        """
        V.SetNumberOfPointers(int)
        C++: void SetNumberOfPointers(vtkIdType number)
        
        Set the number of void* pointers held in the array.
        """
        ...
    
    def SetVoidPointer(self, p_int, void):
        """
        V.SetVoidPointer(int, void)
        C++: void SetVoidPointer(vtkIdType id, void *ptr)
        
        Set the void* pointer value at the ith location in the array.
        """
        ...
    
    def Squeeze(self):
        """
        V.Squeeze()
        C++: void Squeeze()
        
        Resize the array to just fit the inserted memory. Reclaims extra
        memory.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


