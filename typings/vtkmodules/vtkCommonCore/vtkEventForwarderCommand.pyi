"""
This type stub file was generated by pyright.
"""

from .vtkCommand import vtkCommand

class vtkEventForwarderCommand(vtkCommand):
    """
    vtkEventForwarderCommand - a simple event forwarder command
    
    Superclass: vtkCommand
    
    Use vtkEventForwarderCommand to forward an event to a new object.
    This command will intercept the event, and use InvokeEvent on a
    'target' as if that object was the one that invoked the event instead
    of the object this command was attached to using AddObserver.
    
    @sa
    vtkCommand
    """
    def Execute(self, vtkObject, p_int, void):
        """
        V.Execute(vtkObject, int, void)
        C++: void Execute(vtkObject *caller, unsigned long eid,
            void *callData) override;
        
        Satisfy the superclass API for callbacks. Recall that the caller
        is the instance invoking the event; eid is the event id (see
        vtkCommand.h); and calldata is information sent when the callback
        was invoked (e.g., progress value in the
        vtkCommand::ProgressEvent).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTarget(self):
        """
        V.GetTarget() -> void
        C++: virtual void *GetTarget()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEventForwarderCommand
        C++: vtkEventForwarderCommand *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEventForwarderCommand
        C++: static vtkEventForwarderCommand *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetTarget(self, vtkObject):
        """
        V.SetTarget(vtkObject)
        C++: virtual void SetTarget(vtkObject *obj)
        
        Methods to set and get client and callback information, and the
        callback function.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


