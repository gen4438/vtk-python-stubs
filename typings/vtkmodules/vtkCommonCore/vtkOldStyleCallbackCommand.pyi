"""
This type stub file was generated by pyright.
"""

from .vtkCommand import vtkCommand

class vtkOldStyleCallbackCommand(vtkCommand):
    """
    vtkOldStyleCallbackCommand - supports legacy function callbacks for
    VTK
    
    Superclass: vtkCommand
    
    vtkOldStyleCallbackCommand is a callback that supports the legacy
    callback methods found in VTK. For example, the legacy method
    vtkProcessObject::SetStartMethod() is actually invoked using the
    command/observer design pattern of VTK, and the
    vtkOldStyleCallbackCommand is used to provide the legacy
    functionality. The callback function should have the form void
    func(void *clientdata), where clientdata is special data that should
    is associated with this instance of vtkCallbackCommand.
    
    @warning
    This is legacy glue. Please do not use; it will be eventually
    eliminated.
    
    @sa
    vtkCommand vtkCallbackCommand
    """
    def Execute(self, vtkObject, p_int, void):
        """
        V.Execute(vtkObject, int, void)
        C++: void Execute(vtkObject *invoker, unsigned long eid,
            void *calldata) override;
        
        Satisfy the superclass API for callbacks.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOldStyleCallbackCommand
        C++: vtkOldStyleCallbackCommand *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOldStyleCallbackCommand
        C++: static vtkOldStyleCallbackCommand *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetClientData(self, void):
        """
        V.SetClientData(void)
        C++: void SetClientData(void *cd)
        
        Methods to set and get client and callback information.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


