"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkIdList(vtkObject):
    """
    vtkIdList - list of point or cell ids
    
    Superclass: vtkObject
    
    vtkIdList is used to represent and pass data id's between objects.
    vtkIdList may represent any type of integer id, but usually
    represents point and cell ids.
    """
    def Allocate(self, p_int, p_int_1):
        """
        V.Allocate(int, int) -> int
        C++: int Allocate(const vtkIdType sz, const int strategy=0)
        
        Allocate a capacity for sz ids in the list and set the number of
        stored ids in the list to 0. strategy is not used.
        """
        ...
    
    def begin(self):
        """
        V.begin() -> (int, ...)
        C++: vtkIdType *begin()
        
        To support range-based `for` loops
        """
        ...
    
    def DeepCopy(self, vtkIdList):
        """
        V.DeepCopy(vtkIdList)
        C++: void DeepCopy(vtkIdList *ids)
        
        Copy an id list by explicitly copying the internal array.
        """
        ...
    
    def DeleteId(self, p_int):
        """
        V.DeleteId(int)
        C++: void DeleteId(vtkIdType vtkid)
        
        Delete specified id from list. Will remove all occurrences of id
        in list.
        """
        ...
    
    def end(self):
        """
        V.end() -> (int, ...)
        C++: vtkIdType *end()
        
        To support range-based `for` loops
        """
        ...
    
    def FindIdLocation(self, p_int):
        """
        V.FindIdLocation(int) -> int
        C++: vtkIdType FindIdLocation(const vtkIdType id)
        
        Find the location i of the provided id.
        """
        ...
    
    def GetId(self, p_int):
        """
        V.GetId(int) -> int
        C++: vtkIdType GetId(const vtkIdType i)
        
        Return the id at location i.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def GetNumberOfIds(self):
        """
        V.GetNumberOfIds() -> int
        C++: vtkIdType GetNumberOfIds()
        
        Return the number of id's in the list.
        """
        ...
    
    def GetPointer(self, p_int):
        """
        V.GetPointer(int) -> (int, ...)
        C++: vtkIdType *GetPointer(const vtkIdType i)
        
        Get a pointer to a particular data index.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Release memory and restore to unallocated state.
        """
        ...
    
    def InsertId(self, p_int, p_int_1):
        """
        V.InsertId(int, int)
        C++: void InsertId(const vtkIdType i, const vtkIdType vtkid)
        
        Set the id at location i. Does range checking and allocates
        memory as necessary.
        """
        ...
    
    def InsertNextId(self, p_int):
        """
        V.InsertNextId(int) -> int
        C++: vtkIdType InsertNextId(const vtkIdType vtkid)
        
        Add the id specified to the end of the list. Range checking is
        performed.
        """
        ...
    
    def InsertUniqueId(self, p_int):
        """
        V.InsertUniqueId(int) -> int
        C++: vtkIdType InsertUniqueId(const vtkIdType vtkid)
        
        If id is not already in list, insert it and return location in
        list. Otherwise return just location in list.
        """
        ...
    
    def IntersectWith(self, vtkIdList):
        """
        V.IntersectWith(vtkIdList)
        C++: void IntersectWith(vtkIdList *otherIds)
        V.IntersectWith(vtkIdList)
        C++: void IntersectWith(vtkIdList &otherIds)
        
        Intersect this list with another vtkIdList. Updates current list
        according to result of intersection operation.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def IsId(self, p_int):
        """
        V.IsId(int) -> int
        C++: vtkIdType IsId(vtkIdType vtkid)
        
        Return -1 if id specified is not contained in the list; otherwise
        return the position in the list.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkIdList
        C++: vtkIdList *NewInstance()
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reset to an empty state but retain previously allocated memory.
        """
        ...
    
    def Resize(self, p_int):
        """
        V.Resize(int) -> (int, ...)
        C++: vtkIdType *Resize(const vtkIdType sz)
        
        Adjust the size of the id list while maintaining its content
        (except when being truncated).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkIdList
        C++: static vtkIdList *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiation, type information, and
        printing.
        """
        ...
    
    def SetArray(self, *int, **kwargs):
        """
        V.SetArray([int, ...], int)
        C++: void SetArray(vtkIdType *array, vtkIdType size)
        
        Specify an array of vtkIdType to use as the id list. This
        replaces the underlying array. This instance of vtkIdList takes
        ownership of the array, meaning that it deletes it on destruction
        (using delete[]).
        """
        ...
    
    def SetId(self, p_int, p_int_1):
        """
        V.SetId(int, int)
        C++: void SetId(const vtkIdType i, const vtkIdType vtkid)
        
        Set the id at location i. Doesn't do range checking so it's a bit
        faster than InsertId. Make sure you use SetNumberOfIds() to
        allocate memory prior to using SetId().
        """
        ...
    
    def SetNumberOfIds(self, p_int):
        """
        V.SetNumberOfIds(int)
        C++: void SetNumberOfIds(const vtkIdType number)
        
        Specify the number of ids for this object to hold. Does an
        allocation as well as setting the number of ids.
        """
        ...
    
    def Sort(self):
        """
        V.Sort()
        C++: void Sort()
        
        Sort the ids in the list in ascending id order. This method uses
        vtkSMPTools::Sort() so it can be sped up if built properly.
        """
        ...
    
    def Squeeze(self):
        """
        V.Squeeze()
        C++: void Squeeze()
        
        Free any unused memory.
        """
        ...
    
    def WritePointer(self, p_int, p_int_1):
        """
        V.WritePointer(int, int) -> (int, ...)
        C++: vtkIdType *WritePointer(const vtkIdType i,
            const vtkIdType number)
        
        Get a pointer to a particular data index. Make sure data is
        allocated for the number of items requested. Set MaxId according
        to the number of data values requested.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


