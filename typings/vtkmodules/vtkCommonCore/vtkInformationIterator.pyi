"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkInformationIterator(vtkObject):
    """
    vtkInformationIterator - Iterates over keys of an information object
    
    Superclass: vtkObject
    
    vtkInformationIterator can be used to iterate over the keys of an
    information object. The corresponding values can then be directly
    obtained from the information object using the keys.
    
    @sa
    vtkInformation vtkInformationKey
    """
    def GetCurrentKey(self):
        """
        V.GetCurrentKey() -> vtkInformationKey
        C++: virtual vtkInformationKey *GetCurrentKey()
        
        Get the current item. Valid only when IsDoneWithTraversal()
        returns 1.
        """
        ...
    
    def GetInformation(self):
        """
        V.GetInformation() -> vtkInformation
        C++: virtual vtkInformation *GetInformation()
        
        Set/Get the information to iterator over.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GoToFirstItem(self):
        """
        V.GoToFirstItem()
        C++: virtual void GoToFirstItem()
        
        Move the iterator to the beginning of the collection.
        """
        ...
    
    def GoToNextItem(self):
        """
        V.GoToNextItem()
        C++: virtual void GoToNextItem()
        
        Move the iterator to the next item in the collection.
        """
        ...
    
    def InitTraversal(self):
        """
        V.InitTraversal()
        C++: void InitTraversal()
        
        Move the iterator to the beginning of the collection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsDoneWithTraversal(self):
        """
        V.IsDoneWithTraversal() -> int
        C++: virtual int IsDoneWithTraversal()
        
        Test whether the iterator is currently pointing to a valid item.
        Returns 1 for yes, 0 for no.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInformationIterator
        C++: vtkInformationIterator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInformationIterator
        C++: static vtkInformationIterator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInformation(self, vtkInformation):
        """
        V.SetInformation(vtkInformation)
        C++: void SetInformation(vtkInformation *)
        
        Set/Get the information to iterator over.
        """
        ...
    
    def SetInformationWeak(self, vtkInformation):
        """
        V.SetInformationWeak(vtkInformation)
        C++: void SetInformationWeak(vtkInformation *)
        
        Set the function to iterate over. The iterator will not hold a
        reference to the information object. Can be used to optimize
        certain places by avoiding garbage collection.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


