"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkRandomSequence(vtkObject):
    """
    vtkRandomSequence - Generate a sequence of random numbers.
    
    Superclass: vtkObject
    
    vtkRandomSequence defines the interface of any sequence of random
    numbers.
    
    At this level of abstraction, there is no assumption about the
    distribution of the numbers or about the quality of the sequence of
    numbers to be statistically independent. There is no assumption about
    the range of values.
    
    To the question about why a random "sequence" class instead of a
    random "generator" class or to a random "number" class?, see the OOSC
    book: "Object-Oriented Software Construction", 2nd Edition, by
    Bertrand Meyer. chapter 23, "Principles of class design",
    "Pseudo-random number generators: a design exercise", page 754--755.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetValue(self):
        """
        V.GetValue() -> float
        C++: virtual double GetValue()
        
        Return the current value.
        """
        ...
    
    def Initialize(self, p_int):
        """
        V.Initialize(int)
        C++: virtual void Initialize(vtkTypeUInt32 seed)
        
        Initialize the sequence with a seed.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRandomSequence
        C++: vtkRandomSequence *NewInstance()
        
        Standard methods for type information and printing.
        """
        ...
    
    def Next(self):
        """
        V.Next()
        C++: virtual void Next()
        
        Move to the next number in the random sequence.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRandomSequence
        C++: static vtkRandomSequence *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for type information and printing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


