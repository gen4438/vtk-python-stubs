"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkOutputWindow(vtkObject):
    """
    vtkOutputWindow - base class for writing debug output to a console
    
    Superclass: vtkObject
    
    This class is used to encapsulate all text output, so that it will
    work with operating systems that have a stdout and stderr, and ones
    that do not.  (i.e windows does not).  Sub-classes can be provided
    which can redirect the output to a window.
    """
    def DisplayDebugText(self, string):
        """
        V.DisplayDebugText(string)
        C++: virtual void DisplayDebugText(const char *)
        
        Display the text. Four virtual methods exist, depending on the
        type of message to display. This allows redirection or
        reformatting of the messages. The default implementation uses
        DisplayText for all. Consequently, subclasses can simply override
        DisplayText and use `GetCurrentMessageType` to determine the type
        of message that's being reported.
        """
        ...
    
    def DisplayErrorText(self, string):
        """
        V.DisplayErrorText(string)
        C++: virtual void DisplayErrorText(const char *)
        
        Display the text. Four virtual methods exist, depending on the
        type of message to display. This allows redirection or
        reformatting of the messages. The default implementation uses
        DisplayText for all. Consequently, subclasses can simply override
        DisplayText and use `GetCurrentMessageType` to determine the type
        of message that's being reported.
        """
        ...
    
    def DisplayGenericWarningText(self, string):
        """
        V.DisplayGenericWarningText(string)
        C++: virtual void DisplayGenericWarningText(const char *)
        
        Display the text. Four virtual methods exist, depending on the
        type of message to display. This allows redirection or
        reformatting of the messages. The default implementation uses
        DisplayText for all. Consequently, subclasses can simply override
        DisplayText and use `GetCurrentMessageType` to determine the type
        of message that's being reported.
        """
        ...
    
    def DisplayText(self, string):
        """
        V.DisplayText(string)
        C++: virtual void DisplayText(const char *)
        
        Display the text. Four virtual methods exist, depending on the
        type of message to display. This allows redirection or
        reformatting of the messages. The default implementation uses
        DisplayText for all. Consequently, subclasses can simply override
        DisplayText and use `GetCurrentMessageType` to determine the type
        of message that's being reported.
        """
        ...
    
    def DisplayWarningText(self, string):
        """
        V.DisplayWarningText(string)
        C++: virtual void DisplayWarningText(const char *)
        
        Display the text. Four virtual methods exist, depending on the
        type of message to display. This allows redirection or
        reformatting of the messages. The default implementation uses
        DisplayText for all. Consequently, subclasses can simply override
        DisplayText and use `GetCurrentMessageType` to determine the type
        of message that's being reported.
        """
        ...
    
    def GetDisplayMode(self):
        """
        V.GetDisplayMode() -> int
        C++: virtual int GetDisplayMode()
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def GetDisplayModeMaxValue(self):
        """
        V.GetDisplayModeMaxValue() -> int
        C++: virtual int GetDisplayModeMaxValue()
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def GetDisplayModeMinValue(self):
        """
        V.GetDisplayModeMinValue() -> int
        C++: virtual int GetDisplayModeMinValue()
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def GetInstance(self):
        """
        V.GetInstance() -> vtkOutputWindow
        C++: static vtkOutputWindow *GetInstance()
        
        Return the singleton instance with no reference counting.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseStdErrorForAllMessages(self):
        """
        V.GetUseStdErrorForAllMessages() -> bool
        C++: bool GetUseStdErrorForAllMessages()
        
        Historically (VTK 8.1 and earlier), when printing messages to
        terminals, vtkOutputWindow would always post messages to `cerr`.
        Setting this to true restores that incorrect behavior. When false
        (default), vtkOutputWindow uses `cerr` for debug, error and
        warning messages, and `cout` for text messages.
        
        @deprecated use `SetDisplayModeToAlwaysStdErr` instead.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOutputWindow
        C++: vtkOutputWindow *NewInstance()
        """
        ...
    
    def PromptUserOff(self):
        """
        V.PromptUserOff()
        C++: virtual void PromptUserOff()
        
        If PromptUser is set to true then each time a line of text is
        displayed, the user is asked if they want to keep getting
        messages.
        
        Note that PromptUser has not effect of messages displayed by
        directly calling `DisplayText`. The prompt is never shown for
        such messages.
        """
        ...
    
    def PromptUserOn(self):
        """
        V.PromptUserOn()
        C++: virtual void PromptUserOn()
        
        If PromptUser is set to true then each time a line of text is
        displayed, the user is asked if they want to keep getting
        messages.
        
        Note that PromptUser has not effect of messages displayed by
        directly calling `DisplayText`. The prompt is never shown for
        such messages.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOutputWindow
        C++: static vtkOutputWindow *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDisplayMode(self, p_int):
        """
        V.SetDisplayMode(int)
        C++: virtual void SetDisplayMode(int _arg)
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def SetDisplayModeToAlways(self):
        """
        V.SetDisplayModeToAlways()
        C++: void SetDisplayModeToAlways()
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def SetDisplayModeToAlwaysStdErr(self):
        """
        V.SetDisplayModeToAlwaysStdErr()
        C++: void SetDisplayModeToAlwaysStdErr()
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def SetDisplayModeToDefault(self):
        """
        V.SetDisplayModeToDefault()
        C++: void SetDisplayModeToDefault()
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def SetDisplayModeToNever(self):
        """
        V.SetDisplayModeToNever()
        C++: void SetDisplayModeToNever()
        
        Flag indicates how the vtkOutputWindow handles displaying of text
        to `stderr` / `stdout`. Default is `DEFAULT` except in
        `vtkWin32OutputWindow` where on non dashboard runs, the default
        is `NEVER`.
        
        `NEVER` indicates that the messages should never be forwarded to
        the standard output/error streams.
        
        `ALWAYS` will result in error/warning/debug messages being posted
        to the standard error stream, while text messages to standard
        output stream.
        
        `ALWAYS_STDERR` will result in all messages being posted to the
        standard error stream (this was default behavior in VTK 8.1 and
        earlier).
        
        `DEFAULT` is similar to `ALWAYS` except when logging is enabled.
        If logging is enabled, messages posted to the output window using
        VTK error/warning macros such as `vtkErrorMacro`,
        `vtkWarningMacro` etc. will not posted on any of the output
        streams. This is done to avoid duplicate messages on these
        streams since these macros also result in add items to the log.
        
        ote vtkStringOutputWindow does not result this flag as is never
        forwards any text to the output streams.
        """
        ...
    
    def SetInstance(self, vtkOutputWindow):
        """
        V.SetInstance(vtkOutputWindow)
        C++: static void SetInstance(vtkOutputWindow *instance)
        
        Supply a user defined output window. Call ->Delete() on the
        supplied instance after setting it.
        """
        ...
    
    def SetPromptUser(self, bool):
        """
        V.SetPromptUser(bool)
        C++: virtual void SetPromptUser(bool _arg)
        
        If PromptUser is set to true then each time a line of text is
        displayed, the user is asked if they want to keep getting
        messages.
        
        Note that PromptUser has not effect of messages displayed by
        directly calling `DisplayText`. The prompt is never shown for
        such messages.
        """
        ...
    
    def SetUseStdErrorForAllMessages(self, bool):
        """
        V.SetUseStdErrorForAllMessages(bool)
        C++: void SetUseStdErrorForAllMessages(bool)
        
        Historically (VTK 8.1 and earlier), when printing messages to
        terminals, vtkOutputWindow would always post messages to `cerr`.
        Setting this to true restores that incorrect behavior. When false
        (default), vtkOutputWindow uses `cerr` for debug, error and
        warning messages, and `cout` for text messages.
        
        @deprecated use `SetDisplayModeToAlwaysStdErr` instead.
        """
        ...
    
    def UseStdErrorForAllMessagesOff(self):
        """
        V.UseStdErrorForAllMessagesOff()
        C++: void UseStdErrorForAllMessagesOff()
        
        Historically (VTK 8.1 and earlier), when printing messages to
        terminals, vtkOutputWindow would always post messages to `cerr`.
        Setting this to true restores that incorrect behavior. When false
        (default), vtkOutputWindow uses `cerr` for debug, error and
        warning messages, and `cout` for text messages.
        
        @deprecated use `SetDisplayModeToAlwaysStdErr` instead.
        """
        ...
    
    def UseStdErrorForAllMessagesOn(self):
        """
        V.UseStdErrorForAllMessagesOn()
        C++: void UseStdErrorForAllMessagesOn()
        
        Historically (VTK 8.1 and earlier), when printing messages to
        terminals, vtkOutputWindow would always post messages to `cerr`.
        Setting this to true restores that incorrect behavior. When false
        (default), vtkOutputWindow uses `cerr` for debug, error and
        warning messages, and `cout` for text messages.
        
        @deprecated use `SetDisplayModeToAlwaysStdErr` instead.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ALWAYS = ...
    ALWAYS_STDERR = ...
    DEFAULT = ...
    DisplayModes = ...
    NEVER = ...
    __dict__ = ...
    __vtkname__ = ...


