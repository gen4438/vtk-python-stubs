"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkCollection(vtkObject):
    """
    vtkCollection - create and manipulate ordered lists of objects
    
    Superclass: vtkObject
    
    vtkCollection is a general object for creating and manipulating lists
    of objects. The lists are ordered and allow duplicate entries.
    vtkCollection also serves as a base class for lists of specific types
    of objects.
    
    @sa
    vtkActorCollection vtkAssemblyPaths vtkDataSetCollection
    vtkImplicitFunctionCollection vtkLightCollection
    vtkPolyDataCollection vtkRenderWindowCollection vtkRendererCollection
    vtkStructuredPointsCollection vtkTransformCollection
    vtkVolumeCollection
    """
    def AddItem(self, vtkObject):
        """
        V.AddItem(vtkObject)
        C++: void AddItem(vtkObject *)
        
        Add an object to the bottom of the list. Does not prevent
        duplicate entries.
        """
        ...
    
    def GetItemAsObject(self, p_int):
        """
        V.GetItemAsObject(int) -> vtkObject
        C++: vtkObject *GetItemAsObject(int i)
        
        Get the i'th item in the collection. nullptr is returned if i is
        out of range
        """
        ...
    
    def GetNextItemAsObject(self):
        """
        V.GetNextItemAsObject() -> vtkObject
        C++: vtkObject *GetNextItemAsObject()
        
        Get the next item in the collection. nullptr is returned if the
        collection is exhausted.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfItems(self):
        """
        V.GetNumberOfItems() -> int
        C++: int GetNumberOfItems()
        
        Return the number of objects in the list.
        """
        ...
    
    def InitTraversal(self):
        """
        V.InitTraversal()
        C++: void InitTraversal()
        
        Initialize the traversal of the collection. This means the data
        pointer is set at the beginning of the list.
        """
        ...
    
    def InsertItem(self, p_int, vtkObject):
        """
        V.InsertItem(int, vtkObject)
        C++: void InsertItem(int i, vtkObject *)
        
        Insert item into the list after the i'th item. Does not prevent
        duplicate entries. If i < 0 the item is placed at the top of the
        list.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsItemPresent(self, vtkObject):
        """
        V.IsItemPresent(vtkObject) -> int
        C++: int IsItemPresent(vtkObject *a)
        
        Search for an object and return location in list. If the return
        value is 0, the object was not found. If the object was found,
        the location is the return value-1.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCollection
        C++: vtkCollection *NewInstance()
        """
        ...
    
    def NewIterator(self):
        """
        V.NewIterator() -> vtkCollectionIterator
        C++: vtkCollectionIterator *NewIterator()
        
        Get an iterator to traverse the objects in this collection.
        """
        ...
    
    def RemoveAllItems(self):
        """
        V.RemoveAllItems()
        C++: void RemoveAllItems()
        
        Remove all objects from the list.
        """
        ...
    
    def RemoveItem(self, p_int):
        """
        V.RemoveItem(int)
        C++: void RemoveItem(int i)
        V.RemoveItem(vtkObject)
        C++: void RemoveItem(vtkObject *)
        
        Remove the i'th item in the list. Be careful if using this
        function during traversal of the list using GetNextItemAsObject
        (or GetNextItem in derived class).  The list WILL be shortened if
        a valid index is given!  If this->Current is equal to the element
        being removed, have it point to then next element in the list.
        """
        ...
    
    def ReplaceItem(self, p_int, vtkObject):
        """
        V.ReplaceItem(int, vtkObject)
        C++: void ReplaceItem(int i, vtkObject *)
        
        Replace the i'th item in the collection with another item.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCollection
        C++: static vtkCollection *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def __iter__(self, *args, **kwargs):
        """ Implement iter(self). """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


