"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkVariant(object):
    """
    vtkVariant - A atomic type representing the union of many types
    
    @par Thanks: Thanks to Patricia Crossno, Ken Moreland, Andrew Wilson
    and Brian Wylie from Sandia National Laboratories for their help in
    developing this class.
    
    vtkVariant()
    vtkVariant(const vtkVariant &other)
    vtkVariant(bool value)
    vtkVariant(char value)
    vtkVariant(unsigned char value)
    vtkVariant(signed char value)
    vtkVariant(short value)
    vtkVariant(unsigned short value)
    vtkVariant(int value)
    vtkVariant(unsigned int value)
    vtkVariant(long value)
    vtkVariant(unsigned long value)
    vtkVariant(long long value)
    vtkVariant(unsigned long long value)
    vtkVariant(float value)
    vtkVariant(double value)
    vtkVariant(const char *value)
    vtkVariant(vtkStdString value)
    vtkVariant(const vtkUnicodeString &value)
    vtkVariant(vtkObjectBase *value)
    vtkVariant(const vtkVariant &other, unsigned int type)
    """
    def GetType(self):
        """
        V.GetType() -> int
        C++: unsigned int GetType()
        
        Get the type of the variant.
        """
        ...
    
    def GetTypeAsString(self):
        """
        V.GetTypeAsString() -> string
        C++: const char *GetTypeAsString()
        
        Get the type of the variant as a string.
        """
        ...
    
    def IsArray(self):
        """
        V.IsArray() -> bool
        C++: bool IsArray()
        
        Get whether the variant is a VTK array (i.e. a subclass of
        vtkAbstractArray).
        """
        ...
    
    def IsChar(self):
        """
        V.IsChar() -> bool
        C++: bool IsChar()
        
        Get whether the variant is an char.
        """
        ...
    
    def IsDouble(self):
        """
        V.IsDouble() -> bool
        C++: bool IsDouble()
        
        Get whether the variant is a double.
        """
        ...
    
    def IsEqual(self, vtkVariant):
        """
        V.IsEqual(vtkVariant) -> bool
        C++: bool IsEqual(const vtkVariant &other)
        
        Determines whether two variants have the same value. They do not
        need to be storing exactly the same type to have the same value. 
        In practice you don't need to use this method: just use
        operator== instead.  If you want precise equality down to the bit
        level use the following idiom:
        
        * vtkVariantStrictEquality comparator;
        * bool variantsEqual = comparator(firstVariant, secondVariant);
        """
        ...
    
    def IsFloat(self):
        """
        V.IsFloat() -> bool
        C++: bool IsFloat()
        
        Get whether the variant is a float.
        """
        ...
    
    def IsInt(self):
        """
        V.IsInt() -> bool
        C++: bool IsInt()
        
        Get whether the variant is an int.
        """
        ...
    
    def IsLong(self):
        """
        V.IsLong() -> bool
        C++: bool IsLong()
        
        Get whether the variant is an long.
        """
        ...
    
    def IsLongLong(self):
        """
        V.IsLongLong() -> bool
        C++: bool IsLongLong()
        
        Get whether the variant is long long.
        """
        ...
    
    def IsNumeric(self):
        """
        V.IsNumeric() -> bool
        C++: bool IsNumeric()
        
        Get whether the variant is any numeric type.
        """
        ...
    
    def IsShort(self):
        """
        V.IsShort() -> bool
        C++: bool IsShort()
        
        Get whether the variant is an short.
        """
        ...
    
    def IsSignedChar(self):
        """
        V.IsSignedChar() -> bool
        C++: bool IsSignedChar()
        
        Get whether the variant is an signed char.
        """
        ...
    
    def IsString(self):
        """
        V.IsString() -> bool
        C++: bool IsString()
        
        Get whether the variant is a string.
        """
        ...
    
    def IsUnicodeString(self):
        """
        V.IsUnicodeString() -> bool
        C++: bool IsUnicodeString()
        
        Get whether the variant is a Unicode string.
        """
        ...
    
    def IsUnsignedChar(self):
        """
        V.IsUnsignedChar() -> bool
        C++: bool IsUnsignedChar()
        
        Get whether the variant is an unsigned char.
        """
        ...
    
    def IsUnsignedInt(self):
        """
        V.IsUnsignedInt() -> bool
        C++: bool IsUnsignedInt()
        
        Get whether the variant is an unsigned int.
        """
        ...
    
    def IsUnsignedLong(self):
        """
        V.IsUnsignedLong() -> bool
        C++: bool IsUnsignedLong()
        
        Get whether the variant is an unsigned long.
        """
        ...
    
    def IsUnsignedLongLong(self):
        """
        V.IsUnsignedLongLong() -> bool
        C++: bool IsUnsignedLongLong()
        
        Get whether the variant is unsigned long long.
        """
        ...
    
    def IsUnsignedShort(self):
        """
        V.IsUnsignedShort() -> bool
        C++: bool IsUnsignedShort()
        
        Get whether the variant is an unsigned short.
        """
        ...
    
    def IsUnsigned__Int64(self):
        """
        V.IsUnsigned__Int64() -> bool
        C++: bool IsUnsigned__Int64()
        
        Legacy.  Returns false.  The variant is never an unsigned
        __int64.
        """
        ...
    
    def IsValid(self):
        """
        V.IsValid() -> bool
        C++: bool IsValid()
        
        Get whether the variant value is valid.
        """
        ...
    
    def IsVTKObject(self):
        """
        V.IsVTKObject() -> bool
        C++: bool IsVTKObject()
        
        Get whether the variant is a VTK object pointer.
        """
        ...
    
    def Is__Int64(self):
        """
        V.Is__Int64() -> bool
        C++: bool Is__Int64()
        
        Legacy.  Returns false.  The variant is never an __int64.
        """
        ...
    
    def ToArray(self):
        """
        V.ToArray() -> vtkAbstractArray
        C++: vtkAbstractArray *ToArray()
        
        Return the array, or nullptr if not of that type.
        """
        ...
    
    def ToChar(self, *bool):
        """
        V.ToChar([bool, ...]) -> char
        C++: char ToChar(bool *valid)
        V.ToChar() -> char
        C++: char ToChar()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToDouble(self, *bool):
        """
        V.ToDouble([bool, ...]) -> float
        C++: double ToDouble(bool *valid)
        V.ToDouble() -> float
        C++: double ToDouble()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToFloat(self, *bool):
        """
        V.ToFloat([bool, ...]) -> float
        C++: float ToFloat(bool *valid)
        V.ToFloat() -> float
        C++: float ToFloat()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToInt(self, *bool):
        """
        V.ToInt([bool, ...]) -> int
        C++: int ToInt(bool *valid)
        V.ToInt() -> int
        C++: int ToInt()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToLong(self, *bool):
        """
        V.ToLong([bool, ...]) -> int
        C++: long ToLong(bool *valid)
        V.ToLong() -> int
        C++: long ToLong()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToLongLong(self, *bool):
        """
        V.ToLongLong([bool, ...]) -> int
        C++: long long ToLongLong(bool *valid)
        V.ToLongLong() -> int
        C++: long long ToLongLong()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToShort(self, *bool):
        """
        V.ToShort([bool, ...]) -> int
        C++: short ToShort(bool *valid)
        V.ToShort() -> int
        C++: short ToShort()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToSignedChar(self, *bool):
        """
        V.ToSignedChar([bool, ...]) -> int
        C++: signed char ToSignedChar(bool *valid)
        V.ToSignedChar() -> int
        C++: signed char ToSignedChar()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToString(self):
        """
        V.ToString() -> string
        C++: vtkStdString ToString()
        
        Convert the variant to a string.
        """
        ...
    
    def ToTypeInt64(self, *bool):
        """
        V.ToTypeInt64([bool, ...]) -> int
        C++: vtkTypeInt64 ToTypeInt64(bool *valid)
        V.ToTypeInt64() -> int
        C++: vtkTypeInt64 ToTypeInt64()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToTypeUInt64(self, *bool):
        """
        V.ToTypeUInt64([bool, ...]) -> int
        C++: vtkTypeUInt64 ToTypeUInt64(bool *valid)
        V.ToTypeUInt64() -> int
        C++: vtkTypeUInt64 ToTypeUInt64()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToUnicodeString(self):
        """
        V.ToUnicodeString() -> unicode
        C++: vtkUnicodeString ToUnicodeString()
        
        convert the variant to a Unicode string.
        """
        ...
    
    def ToUnsignedChar(self, *bool):
        """
        V.ToUnsignedChar([bool, ...]) -> int
        C++: unsigned char ToUnsignedChar(bool *valid)
        V.ToUnsignedChar() -> int
        C++: unsigned char ToUnsignedChar()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToUnsignedInt(self, *bool):
        """
        V.ToUnsignedInt([bool, ...]) -> int
        C++: unsigned int ToUnsignedInt(bool *valid)
        V.ToUnsignedInt() -> int
        C++: unsigned int ToUnsignedInt()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToUnsignedLong(self, *bool):
        """
        V.ToUnsignedLong([bool, ...]) -> int
        C++: unsigned long ToUnsignedLong(bool *valid)
        V.ToUnsignedLong() -> int
        C++: unsigned long ToUnsignedLong()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToUnsignedLongLong(self, *bool):
        """
        V.ToUnsignedLongLong([bool, ...]) -> int
        C++: unsigned long long ToUnsignedLongLong(bool *valid)
        V.ToUnsignedLongLong() -> int
        C++: unsigned long long ToUnsignedLongLong()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToUnsignedShort(self, *bool):
        """
        V.ToUnsignedShort([bool, ...]) -> int
        C++: unsigned short ToUnsignedShort(bool *valid)
        V.ToUnsignedShort() -> int
        C++: unsigned short ToUnsignedShort()
        
        Convert the variant to a numeric type: If it holds a numeric,
        cast to the appropriate type. If it holds a string, attempt to
        convert the string to the appropriate type; set the valid flag to
        false when the conversion fails. If it holds an array type, cast
        the first value of the array to the appropriate type. Fail if it
        holds a VTK object which is not an array.
        """
        ...
    
    def ToVTKObject(self):
        """
        V.ToVTKObject() -> vtkObjectBase
        C++: vtkObjectBase *ToVTKObject()
        
        Return the VTK object, or nullptr if not of that type.
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    


