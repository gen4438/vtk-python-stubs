"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkOverrideInformation(vtkObject):
    """
    vtkOverrideInformation - Factory object override information
    
    Superclass: vtkObject
    
    vtkOverrideInformation is used to represent the information about a
    class which is overridden in a vtkObjectFactory.
    """
    def GetClassOverrideName(self):
        """
        V.GetClassOverrideName() -> string
        C++: const char *GetClassOverrideName()
        
        Returns the name of the class being overridden.  For example, if
        you had a factory that provided an override for vtkVertex, then
        this function would return "vtkVertex"
        """
        ...
    
    def GetClassOverrideWithName(self):
        """
        V.GetClassOverrideWithName() -> string
        C++: const char *GetClassOverrideWithName()
        
        Returns the name of the class that will override the class. For
        example, if you had a factory that provided an override for
        vtkVertex called vtkMyVertex, then this would return
        "vtkMyVertex"
        """
        ...
    
    def GetDescription(self):
        """
        V.GetDescription() -> string
        C++: const char *GetDescription()
        
        Return a human readable or GUI displayable description of this
        override.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetObjectFactory(self):
        """
        V.GetObjectFactory() -> vtkObjectFactory
        C++: vtkObjectFactory *GetObjectFactory()
        
        Return the specific object factory that this override occurs in.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOverrideInformation
        C++: vtkOverrideInformation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOverrideInformation
        C++: static vtkOverrideInformation *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClassOverrideName(self, string):
        """
        V.SetClassOverrideName(string)
        C++: virtual void SetClassOverrideName(const char *_arg)
        
        Set the class override name
        """
        ...
    
    def SetClassOverrideWithName(self, string):
        """
        V.SetClassOverrideWithName(string)
        C++: virtual void SetClassOverrideWithName(const char *_arg)
        
        Set the class override with name
        """
        ...
    
    def SetDescription(self, string):
        """
        V.SetDescription(string)
        C++: virtual void SetDescription(const char *_arg)
        
        Set the description
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


