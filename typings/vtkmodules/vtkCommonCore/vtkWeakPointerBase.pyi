"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkWeakPointerBase(object):
    """
    vtkWeakPointerBase - Non-templated superclass for vtkWeakPointer.
    
    vtkWeakPointerBase holds a pointer to a vtkObjectBase or subclass
    instance, but it never affects the reference count of the
    vtkObjectBase. However, when the vtkObjectBase referred to is
    destroyed, the pointer gets initialized to nullptr, thus avoid
    dangling references.
    
    vtkWeakPointerBase() noexcept;
    vtkWeakPointerBase(vtkObjectBase *r)
    vtkWeakPointerBase(const vtkWeakPointerBase &r)
    vtkWeakPointerBase(vtkWeakPointerBase &&r) noexcept;
    """
    def GetPointer(self):
        """
        V.GetPointer() -> vtkObjectBase
        C++: vtkObjectBase *GetPointer()
        
        Get the contained pointer.
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    


