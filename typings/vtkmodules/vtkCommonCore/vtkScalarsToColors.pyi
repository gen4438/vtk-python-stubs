"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkScalarsToColors(vtkObject):
    """
    vtkScalarsToColors - Superclass for mapping scalar values to colors
    
    Superclass: vtkObject
    
    vtkScalarsToColors is a general-purpose base class for objects that
    convert scalars to colors. This include vtkLookupTable classes and
    color transfer functions.  By itself, this class will simply rescale
    the scalars.
    
    The scalar-to-color mapping can be augmented with an additional
    uniform alpha blend. This is used, for example, to blend a vtkActor's
    opacity with the lookup table values.
    
    Specific scalar values may be annotated with text strings that will
    be included in color legends using SetAnnotations,
    SetAnnotation,GetNumberOfAnnotatedValues, GetAnnotatedValue,
    GetAnnotation,RemoveAnnotation, and ResetAnnotations.
    
    This class also has a method for indicating that the set of annotated
    values form a categorical color map; by setting \a IndexedLookup to
    true, you indicate that the annotated values are the only valid
    values for which entries in the color table should be returned. In
    this mode, subclasses should then assign colors to annotated values
    by taking the modulus of an annotated value's index in the list of
    annotations with the number of colors in the table.
    
    @sa
    vtkLookupTable vtkColorTransferFunction
    """
    def Build(self):
        """
        V.Build()
        C++: virtual void Build()
        
        Perform any processing required (if any) before processing
        scalars. Default implementation does nothing.
        """
        ...
    
    def DeepCopy(self, vtkScalarsToColors):
        """
        V.DeepCopy(vtkScalarsToColors)
        C++: virtual void DeepCopy(vtkScalarsToColors *o)
        
        Copy the contents from another object.
        """
        ...
    
    def GetAlpha(self):
        """
        V.GetAlpha() -> float
        C++: virtual double GetAlpha()
        
        Specify an additional opacity (alpha) value to blend with. Values
        != 1 modify the resulting color consistent with the requested
        form of the output. This is typically used by an actor in order
        to blend its opacity. Value is clamped between 0 and 1.
        """
        ...
    
    def GetAnnotatedValue(self, p_int):
        """
        V.GetAnnotatedValue(int) -> vtkVariant
        C++: vtkVariant GetAnnotatedValue(vtkIdType idx)
        
        Return the annotated value at a particular index in the list of
        annotations.
        """
        ...
    
    def GetAnnotatedValueIndex(self, vtkVariant):
        """
        V.GetAnnotatedValueIndex(vtkVariant) -> int
        C++: vtkIdType GetAnnotatedValueIndex(vtkVariant val)
        
        Return the index of the given value in the list of annotated
        values (or -1 if not present).
        """
        ...
    
    def GetAnnotatedValueIndexInternal(self, vtkVariant):
        """
        V.GetAnnotatedValueIndexInternal(vtkVariant) -> int
        C++: vtkIdType GetAnnotatedValueIndexInternal(
            const vtkVariant &val)
        
        Look up an index into the array of annotations given a value.
        Does no pointer checks. Returns -1 when val not present.
        """
        ...
    
    def GetAnnotatedValues(self):
        """
        V.GetAnnotatedValues() -> vtkAbstractArray
        C++: virtual vtkAbstractArray *GetAnnotatedValues()
        
        Set a list of discrete values, either as a categorical set of
        values (when IndexedLookup is true) or as a set of annotations to
        add to a scalar array (when IndexedLookup is false). The two
        arrays must both either be nullptr or of the same length or the
        call will be ignored.
        
        * Note that these arrays are deep copied rather than being used
          directly
        * in order to support the use case where edits are made. If the
        * values and annotations arrays were held by this class then each
        * call to map scalar values to colors would require us to check
          the MTime
        * of the arrays.
        """
        ...
    
    def GetAnnotation(self, p_int):
        """
        V.GetAnnotation(int) -> string
        C++: vtkStdString GetAnnotation(vtkIdType idx)
        
        Return the annotation at a particular index in the list of
        annotations.
        """
        ...
    
    def GetAnnotationColor(self, vtkVariant, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetAnnotationColor(vtkVariant, [float, float, float, float])
        C++: virtual void GetAnnotationColor(const vtkVariant &val,
            double rgba[4])
        
        Obtain the color associated with a particular annotated value (or
        NanColor if unmatched).
        """
        ...
    
    def GetAnnotations(self):
        """
        V.GetAnnotations() -> vtkStringArray
        C++: virtual vtkStringArray *GetAnnotations()
        
        Set a list of discrete values, either as a categorical set of
        values (when IndexedLookup is true) or as a set of annotations to
        add to a scalar array (when IndexedLookup is false). The two
        arrays must both either be nullptr or of the same length or the
        call will be ignored.
        
        * Note that these arrays are deep copied rather than being used
          directly
        * in order to support the use case where edits are made. If the
        * values and annotations arrays were held by this class then each
        * call to map scalar values to colors would require us to check
          the MTime
        * of the arrays.
        """
        ...
    
    def GetColor(self, p_float, p_float=..., p_float=..., p_float=...):
        """
        V.GetColor(float, [float, float, float])
        C++: virtual void GetColor(double v, double rgb[3])
        V.GetColor(float) -> (float, float, float)
        C++: double *GetColor(double v)
        
        Map one value through the lookup table and store the color as an
        RGB array of doubles between 0 and 1 in the rgb argument.
        """
        ...
    
    def GetIndexedColor(self, p_int, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetIndexedColor(int, [float, float, float, float])
        C++: virtual void GetIndexedColor(vtkIdType i, double rgba[4])
        
        Get the "indexed color" assigned to an index.
        
        * The index is used in IndexedLookup mode to assign colors to
          annotations (in the order
        * the annotations were set).
        * Subclasses must implement this and interpret how to treat the
          index.
        * vtkLookupTable simply returns GetTableValue( index %
          this->GetNumberOfTableValues()).
        * vtkColorTransferFunction returns the color associated with node
        index % this->GetSize().
        
        * Note that implementations *must* set the opacity (alpha)
          component of the color, even if they
        * do not provide opacity values in their colormaps. In that case,
        alpha = 1 should be used.
        """
        ...
    
    def GetIndexedLookup(self):
        """
        V.GetIndexedLookup() -> int
        C++: virtual vtkTypeBool GetIndexedLookup()
        
        Set/get whether the lookup table is for categorical or ordinal
        data. The default is ordinal data; values not present in the
        lookup table will be assigned an interpolated color.
        
        * When categorical data is present, only values in the lookup
          table will be
        * considered valid; all other values will be assigned NanColor.
        """
        ...
    
    def GetLuminance(self, p_float):
        """
        V.GetLuminance(float) -> float
        C++: double GetLuminance(double x)
        
        Map one value through the lookup table and return the luminance
        0.3*red + 0.59*green + 0.11*blue as a double between 0 and 1.
        Returns the luminance value for the specified scalar value.
        """
        ...
    
    def GetNumberOfAnnotatedValues(self):
        """
        V.GetNumberOfAnnotatedValues() -> int
        C++: vtkIdType GetNumberOfAnnotatedValues()
        
        Return the annotated value at a particular index in the list of
        annotations.
        """
        ...
    
    def GetNumberOfAvailableColors(self):
        """
        V.GetNumberOfAvailableColors() -> int
        C++: virtual vtkIdType GetNumberOfAvailableColors()
        
        Get the number of available colors for mapping to.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpacity(self, p_float):
        """
        V.GetOpacity(float) -> float
        C++: virtual double GetOpacity(double v)
        
        Map one value through the lookup table and return the alpha value
        (the opacity) as a double between 0 and 1. This implementation
        always returns 1.
        """
        ...
    
    def GetRange(self):
        """
        V.GetRange() -> (float, float)
        C++: virtual double *GetRange()
        
        Sets/Gets the range of scalars that will be mapped.
        """
        ...
    
    def GetVectorComponent(self):
        """
        V.GetVectorComponent() -> int
        C++: virtual int GetVectorComponent()
        
        If the mapper does not select which component of a vector to map
        to colors, you can specify it here.
        """
        ...
    
    def GetVectorMode(self):
        """
        V.GetVectorMode() -> int
        C++: virtual int GetVectorMode()
        
        Change mode that maps vectors by magnitude vs. component. If the
        mode is "RGBColors", then the vectors components are scaled to
        the range and passed directly as the colors.
        """
        ...
    
    def GetVectorSize(self):
        """
        V.GetVectorSize() -> int
        C++: virtual int GetVectorSize()
        
        When mapping vectors, consider only the number of components
        selected by VectorSize to be part of the vector, and ignore any
        other components.  Set to -1 to map all components.  If this is
        not set to -1, then you can use SetVectorComponent to set which
        scalar component will be the first component in the vector to be
        mapped.
        """
        ...
    
    def IndexedLookupOff(self):
        """
        V.IndexedLookupOff()
        C++: virtual void IndexedLookupOff()
        
        Set/get whether the lookup table is for categorical or ordinal
        data. The default is ordinal data; values not present in the
        lookup table will be assigned an interpolated color.
        
        * When categorical data is present, only values in the lookup
          table will be
        * considered valid; all other values will be assigned NanColor.
        """
        ...
    
    def IndexedLookupOn(self):
        """
        V.IndexedLookupOn()
        C++: virtual void IndexedLookupOn()
        
        Set/get whether the lookup table is for categorical or ordinal
        data. The default is ordinal data; values not present in the
        lookup table will be assigned an interpolated color.
        
        * When categorical data is present, only values in the lookup
          table will be
        * considered valid; all other values will be assigned NanColor.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsOpaque(self):
        """
        V.IsOpaque() -> int
        C++: virtual int IsOpaque()
        V.IsOpaque(vtkAbstractArray, int, int) -> int
        C++: virtual int IsOpaque(vtkAbstractArray *scalars,
            int colorMode, int component)
        
        Return true if all of the values defining the mapping have an
        opacity equal to 1. Default implementation returns true. The more
        complex signature will yield more accurate results.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapScalars(self, vtkDataArray, p_int, p_int_1, p_int_2):
        """
        V.MapScalars(vtkDataArray, int, int, int) -> vtkUnsignedCharArray
        C++: virtual vtkUnsignedCharArray *MapScalars(
            vtkDataArray *scalars, int colorMode, int component,
            int outputFormat=VTK_RGBA)
        V.MapScalars(vtkAbstractArray, int, int, int)
            -> vtkUnsignedCharArray
        C++: virtual vtkUnsignedCharArray *MapScalars(
            vtkAbstractArray *scalars, int colorMode, int component,
            int outputFormat=VTK_RGBA)
        
        Internal methods that map a data array into an unsigned char
        array. The output format can be set to VTK_RGBA (4 components),
        VTK_RGB (3 components), VTK_LUMINANCE (1 component, greyscale),
        or VTK_LUMINANCE_ALPHA (2 components). If not supplied, the
        output format defaults to RGBA. The color mode determines the
        behavior of mapping. If VTK_COLOR_MODE_DEFAULT is set, then
        unsigned char data arrays are treated as colors (and converted to
        RGBA if necessary); If VTK_COLOR_MODE_DIRECT_SCALARS is set, then
        all arrays are treated as colors (integer types are clamped in
        the range 0-255, floating point arrays are clamped in the range
        0.0-1.0. Note 'char' does not have enough values to represent a
        color so mapping this type is considered an error); otherwise,
        the data is mapped through this instance of ScalarsToColors. The
        component argument is used for data arrays with more than one
        component; it indicates which component to use to do the
        blending. When the component argument is -1, then the this object
        uses its own selected technique to change a vector into a scalar
        to map.
        """
        ...
    
    def MapScalarsThroughTable(self, vtkDataArray, *int, **kwargs):
        """
        V.MapScalarsThroughTable(vtkDataArray, [int, ...], int)
        C++: void MapScalarsThroughTable(vtkDataArray *scalars,
            unsigned char *output, int outputFormat)
        V.MapScalarsThroughTable(vtkDataArray, [int, ...])
        C++: void MapScalarsThroughTable(vtkDataArray *scalars,
            unsigned char *output)
        V.MapScalarsThroughTable(void, [int, ...], int, int, int, int)
        C++: void MapScalarsThroughTable(void *input,
            unsigned char *output, int inputDataType, int numberOfValues,
            int inputIncrement, int outputFormat)
        
        Map a set of scalars through the lookup table in a single
        operation. This method ignores the VectorMode and the
        VectorComponent. The output format can be set to VTK_RGBA (4
        components), VTK_RGB (3 components), VTK_LUMINANCE (1 component,
        greyscale), or VTK_LUMINANCE_ALPHA (2 components) If not
        supplied, the output format defaults to RGBA.
        """
        ...
    
    def MapScalarsThroughTable2(self, void, *int, **kwargs):
        """
        V.MapScalarsThroughTable2(void, [int, ...], int, int, int, int)
        C++: virtual void MapScalarsThroughTable2(void *input,
            unsigned char *output, int inputDataType, int numberOfValues,
            int inputIncrement, int outputFormat)
        
        An internal method typically not used in applications.  This
        should be a protected function, but it must be kept public for
        backwards compatibility.  Never call this method directly.
        """
        ...
    
    def MapValue(self, p_float):
        """
        V.MapValue(float) -> (int, ...)
        C++: virtual const unsigned char *MapValue(double v)
        
        Map one value through the lookup table and return a color defined
        as an RGBA unsigned char tuple (4 bytes).
        """
        ...
    
    def MapVectorsThroughTable(self, void, *int, **kwargs):
        """
        V.MapVectorsThroughTable(void, [int, ...], int, int, int, int,
            int, int)
        C++: void MapVectorsThroughTable(void *input,
            unsigned char *output, int inputDataType, int numberOfValues,
            int inputIncrement, int outputFormat, int vectorComponent,
            int vectorSize)
        V.MapVectorsThroughTable(void, [int, ...], int, int, int, int)
        C++: void MapVectorsThroughTable(void *input,
            unsigned char *output, int inputDataType, int numberOfValues,
            int inputIncrement, int outputFormat)
        
        Map vectors through the lookup table.  Unlike
        MapScalarsThroughTable, this method will use the VectorMode to
        decide how to map vectors. The output format can be set to
        VTK_RGBA (4 components), VTK_RGB (3 components), VTK_LUMINANCE (1
        component, greyscale), or VTK_LUMINANCE_ALPHA (2 components)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkScalarsToColors
        C++: vtkScalarsToColors *NewInstance()
        """
        ...
    
    def RemoveAnnotation(self, vtkVariant):
        """
        V.RemoveAnnotation(vtkVariant) -> bool
        C++: virtual bool RemoveAnnotation(vtkVariant value)
        
        Remove an existing entry from the list of annotated values.
        
        * Returns true when the entry was actually removed (i.e., it
          existed before the call).
        * Otherwise, returns false.
        """
        ...
    
    def ResetAnnotations(self):
        """
        V.ResetAnnotations()
        C++: virtual void ResetAnnotations()
        
        Remove all existing values and their annotations.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkScalarsToColors
        C++: static vtkScalarsToColors *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAlpha(self, p_float):
        """
        V.SetAlpha(float)
        C++: virtual void SetAlpha(double alpha)
        
        Specify an additional opacity (alpha) value to blend with. Values
        != 1 modify the resulting color consistent with the requested
        form of the output. This is typically used by an actor in order
        to blend its opacity. Value is clamped between 0 and 1.
        """
        ...
    
    def SetAnnotation(self, vtkVariant, string):
        """
        V.SetAnnotation(vtkVariant, string) -> int
        C++: virtual vtkIdType SetAnnotation(vtkVariant value,
            vtkStdString annotation)
        V.SetAnnotation(string, string) -> int
        C++: virtual vtkIdType SetAnnotation(vtkStdString value,
            vtkStdString annotation)
        
        Add a new entry (or change an existing entry) to the list of
        annotated values. Returns the index of value in the list of
        annotations.
        """
        ...
    
    def SetAnnotations(self, vtkAbstractArray, vtkStringArray):
        """
        V.SetAnnotations(vtkAbstractArray, vtkStringArray)
        C++: virtual void SetAnnotations(vtkAbstractArray *values,
            vtkStringArray *annotations)
        
        Set a list of discrete values, either as a categorical set of
        values (when IndexedLookup is true) or as a set of annotations to
        add to a scalar array (when IndexedLookup is false). The two
        arrays must both either be nullptr or of the same length or the
        call will be ignored.
        
        * Note that these arrays are deep copied rather than being used
          directly
        * in order to support the use case where edits are made. If the
        * values and annotations arrays were held by this class then each
        * call to map scalar values to colors would require us to check
          the MTime
        * of the arrays.
        """
        ...
    
    def SetIndexedLookup(self, p_int):
        """
        V.SetIndexedLookup(int)
        C++: virtual void SetIndexedLookup(vtkTypeBool _arg)
        
        Set/get whether the lookup table is for categorical or ordinal
        data. The default is ordinal data; values not present in the
        lookup table will be assigned an interpolated color.
        
        * When categorical data is present, only values in the lookup
          table will be
        * considered valid; all other values will be assigned NanColor.
        """
        ...
    
    def SetRange(self, p_float, p_float_1):
        """
        V.SetRange(float, float)
        C++: virtual void SetRange(double min, double max)
        V.SetRange((float, float))
        C++: virtual void SetRange(const double rng[2])
        
        Sets/Gets the range of scalars that will be mapped.
        """
        ...
    
    def SetVectorComponent(self, p_int):
        """
        V.SetVectorComponent(int)
        C++: virtual void SetVectorComponent(int _arg)
        
        If the mapper does not select which component of a vector to map
        to colors, you can specify it here.
        """
        ...
    
    def SetVectorMode(self, p_int):
        """
        V.SetVectorMode(int)
        C++: virtual void SetVectorMode(int _arg)
        
        Change mode that maps vectors by magnitude vs. component. If the
        mode is "RGBColors", then the vectors components are scaled to
        the range and passed directly as the colors.
        """
        ...
    
    def SetVectorModeToComponent(self):
        """
        V.SetVectorModeToComponent()
        C++: void SetVectorModeToComponent()
        
        Change mode that maps vectors by magnitude vs. component. If the
        mode is "RGBColors", then the vectors components are scaled to
        the range and passed directly as the colors.
        """
        ...
    
    def SetVectorModeToMagnitude(self):
        """
        V.SetVectorModeToMagnitude()
        C++: void SetVectorModeToMagnitude()
        
        Change mode that maps vectors by magnitude vs. component. If the
        mode is "RGBColors", then the vectors components are scaled to
        the range and passed directly as the colors.
        """
        ...
    
    def SetVectorModeToRGBColors(self):
        """
        V.SetVectorModeToRGBColors()
        C++: void SetVectorModeToRGBColors()
        
        Change mode that maps vectors by magnitude vs. component. If the
        mode is "RGBColors", then the vectors components are scaled to
        the range and passed directly as the colors.
        """
        ...
    
    def SetVectorSize(self, p_int):
        """
        V.SetVectorSize(int)
        C++: virtual void SetVectorSize(int _arg)
        
        When mapping vectors, consider only the number of components
        selected by VectorSize to be part of the vector, and ignore any
        other components.  Set to -1 to map all components.  If this is
        not set to -1, then you can use SetVectorComponent to set which
        scalar component will be the first component in the vector to be
        mapped.
        """
        ...
    
    def UsingLogScale(self):
        """
        V.UsingLogScale() -> int
        C++: virtual int UsingLogScale()
        
        This should return 1 is the subclass is using log scale for
        mapping scalars to colors. Default implementation always returns
        0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    COMPONENT = ...
    MAGNITUDE = ...
    RGBCOLORS = ...
    VectorModes = ...
    __dict__ = ...
    __vtkname__ = ...


