"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkObjectFactory(vtkObject):
    """
    vtkObjectFactory - abstract base class for vtkObjectFactories
    
    Superclass: vtkObject
    
    vtkObjectFactory is used to create vtk objects.   The base class
    vtkObjectFactory contains a static method CreateInstance which is
    used to create vtk objects from the list of registered
    vtkObjectFactory sub-classes.   The first time CreateInstance is
    called, all dll's or shared libraries in the environment variable
    VTK_AUTOLOAD_PATH are loaded into the current process.   The C
    functions vtkLoad, vtkGetFactoryCompilerUsed, and
    vtkGetFactoryVersion are called on each dll.  To implement these
    functions in a shared library or dll, use the macro:
    VTK_FACTORY_INTERFACE_IMPLEMENT. VTK_AUTOLOAD_PATH is an environment
    variable containing a colon separated (semi-colon on win32) list of
    paths.
    
    The vtkObjectFactory can be use to override the creation of any
    object in VTK with a sub-class of that object.  The factories can be
    registered either at run time with the VTK_AUTOLOAD_PATH, or at
    compile time with the vtkObjectFactory::RegisterFactory method.
    """
    def CreateAllInstance(self, string, vtkCollection):
        """
        V.CreateAllInstance(string, vtkCollection)
        C++: static void CreateAllInstance(const char *vtkclassname,
            vtkCollection *retList)
        
        Create all possible instances of the named vtk object. Each
        registered vtkObjectFactory will be asked, and the result will be
        stored in the user allocated vtkCollection passed in to the
        function.
        """
        ...
    
    def CreateInstance(self, string, bool):
        """
        V.CreateInstance(string, bool) -> vtkObject
        C++: static vtkObject *CreateInstance(const char *vtkclassname,
            bool isAbstract=false)
        
        Create and return an instance of the named vtk object. Each
        loaded vtkObjectFactory will be asked in the order the factory
        was in the VTK_AUTOLOAD_PATH.  After the first factory returns
        the object no other factories are asked. isAbstract is no longer
        used. This method calls vtkObjectBase::InitializeObjectBase() on
        the instance when the return value is non-nullptr.
        """
        ...
    
    def Disable(self, string):
        """
        V.Disable(string)
        C++: virtual void Disable(const char *className)
        
        Set all enable flags for the given class to 0.  This will mean
        that the factory will stop producing class with the given name.
        """
        ...
    
    def GetClassOverrideName(self, p_int):
        """
        V.GetClassOverrideName(int) -> string
        C++: virtual const char *GetClassOverrideName(int index)
        
        Return the name of a class override at the given index.
        """
        ...
    
    def GetClassOverrideWithName(self, p_int):
        """
        V.GetClassOverrideWithName(int) -> string
        C++: virtual const char *GetClassOverrideWithName(int index)
        
        Return the name of the class that will override the class at the
        given index
        """
        ...
    
    def GetDescription(self):
        """
        V.GetDescription() -> string
        C++: virtual const char *GetDescription()
        
        Return a descriptive string describing the factory.
        """
        ...
    
    def GetEnableFlag(self, p_int):
        """
        V.GetEnableFlag(int) -> int
        C++: virtual vtkTypeBool GetEnableFlag(int index)
        V.GetEnableFlag(string, string) -> int
        C++: virtual vtkTypeBool GetEnableFlag(const char *className,
            const char *subclassName)
        
        Return the enable flag for the class at the given index.
        """
        ...
    
    def GetLibraryPath(self):
        """
        V.GetLibraryPath() -> string
        C++: virtual char *GetLibraryPath()
        
        This returns the path to a dynamically loaded factory.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfOverrides(self):
        """
        V.GetNumberOfOverrides() -> int
        C++: virtual int GetNumberOfOverrides()
        
        Return number of overrides this factory can create.
        """
        ...
    
    def GetOverrideDescription(self, p_int):
        """
        V.GetOverrideDescription(int) -> string
        C++: virtual const char *GetOverrideDescription(int index)
        
        Return the description for a the class override at the given
        index.
        """
        ...
    
    def GetOverrideInformation(self, string, vtkOverrideInformationCollection):
        """
        V.GetOverrideInformation(string, vtkOverrideInformationCollection)
        C++: static void GetOverrideInformation(const char *name,
            vtkOverrideInformationCollection *)
        
        Fill the given collection with all the overrides for the class
        with the given name.
        """
        ...
    
    def GetRegisteredFactories(self):
        """
        V.GetRegisteredFactories() -> vtkObjectFactoryCollection
        C++: static vtkObjectFactoryCollection *GetRegisteredFactories()
        
        Return the list of all registered factories.  This is NOT a copy,
        do not remove items from this list!
        """
        ...
    
    def GetVTKSourceVersion(self):
        """
        V.GetVTKSourceVersion() -> string
        C++: virtual const char *GetVTKSourceVersion()
        
        All sub-classes of vtkObjectFactory should must return the
        version of VTK they were built with.  This should be implemented
        with the macro VTK_SOURCE_VERSION and NOT a call to
        vtkVersion::GetVTKSourceVersion. As the version needs to be
        compiled into the file as a string constant. This is critical to
        determine possible incompatible dynamic factory loads.
        """
        ...
    
    def HasOverride(self, string):
        """
        V.HasOverride(string) -> int
        C++: virtual int HasOverride(const char *className)
        V.HasOverride(string, string) -> int
        C++: virtual int HasOverride(const char *className,
            const char *subclassName)
        
        Return 1 if this factory overrides the given class name, 0
        otherwise.
        """
        ...
    
    def HasOverrideAny(self, string):
        """
        V.HasOverrideAny(string) -> int
        C++: static int HasOverrideAny(const char *className)
        
        return 1 if one of the registered factories overrides the given
        class name
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkObjectFactory
        C++: vtkObjectFactory *NewInstance()
        """
        ...
    
    def RegisterFactory(self, vtkObjectFactory):
        """
        V.RegisterFactory(vtkObjectFactory)
        C++: static void RegisterFactory(vtkObjectFactory *)
        
        Register a factory so it can be used to create vtk objects
        """
        ...
    
    def ReHash(self):
        """
        V.ReHash()
        C++: static void ReHash()
        
        Re-check the VTK_AUTOLOAD_PATH for new factory libraries. This
        calls UnRegisterAll before re-loading
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkObjectFactory
        C++: static vtkObjectFactory *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllEnableFlags(self, p_int, string):
        """
        V.SetAllEnableFlags(int, string)
        C++: static void SetAllEnableFlags(vtkTypeBool flag,
            const char *className)
        V.SetAllEnableFlags(int, string, string)
        C++: static void SetAllEnableFlags(vtkTypeBool flag,
            const char *className, const char *subclassName)
        
        Set the enable flag for a given named class for all registered
        factories.
        """
        ...
    
    def SetEnableFlag(self, p_int, string, string_1):
        """
        V.SetEnableFlag(int, string, string)
        C++: virtual void SetEnableFlag(vtkTypeBool flag,
            const char *className, const char *subclassName)
        
        Set and Get the Enable flag for the specific override of
        className. if subclassName is null, then it is ignored.
        """
        ...
    
    def UnRegisterAllFactories(self):
        """
        V.UnRegisterAllFactories()
        C++: static void UnRegisterAllFactories()
        
        Unregister all factories
        """
        ...
    
    def UnRegisterFactory(self, vtkObjectFactory):
        """
        V.UnRegisterFactory(vtkObjectFactory)
        C++: static void UnRegisterFactory(vtkObjectFactory *)
        
        Remove a factory from the list of registered factories
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


