"""
This type stub file was generated by pyright.
"""

from .vtkFileOutputWindow import vtkFileOutputWindow

class vtkXMLFileOutputWindow(vtkFileOutputWindow):
    """
    vtkXMLFileOutputWindow - XML File Specific output window class
    
    Superclass: vtkFileOutputWindow
    
    Writes debug/warning/error output to an XML file. Uses prefined XML
    tags for each text display method. The text is processed to replace
    XML markup characters.
    
    
      DisplayText - 
    
    
      DisplayErrorText - 
    
    
      DisplayWarningText - 
    
    
      DisplayGenericWarningText - 
    
    
      DisplayDebugText - 
    
    The method DisplayTag outputs the text unprocessed. To use this
    class, instantiate it and then call SetInstance(this).
    """
    def DisplayDebugText(self, string):
        """
        V.DisplayDebugText(string)
        C++: void DisplayDebugText(const char *) override;
        
        Put the text into the log file. The text is processed to replace
        &, <, > with &amp, &lt, and &gt. Each display method outputs a
        different XML tag.
        """
        ...
    
    def DisplayErrorText(self, string):
        """
        V.DisplayErrorText(string)
        C++: void DisplayErrorText(const char *) override;
        
        Put the text into the log file. The text is processed to replace
        &, <, > with &amp, &lt, and &gt. Each display method outputs a
        different XML tag.
        """
        ...
    
    def DisplayGenericWarningText(self, string):
        """
        V.DisplayGenericWarningText(string)
        C++: void DisplayGenericWarningText(const char *) override;
        
        Put the text into the log file. The text is processed to replace
        &, <, > with &amp, &lt, and &gt. Each display method outputs a
        different XML tag.
        """
        ...
    
    def DisplayTag(self, string):
        """
        V.DisplayTag(string)
        C++: virtual void DisplayTag(const char *)
        
        Put the text into the log file without processing it.
        """
        ...
    
    def DisplayText(self, string):
        """
        V.DisplayText(string)
        C++: void DisplayText(const char *) override;
        
        Put the text into the log file. The text is processed to replace
        &, <, > with &amp, &lt, and &gt. Each display method outputs a
        different XML tag.
        """
        ...
    
    def DisplayWarningText(self, string):
        """
        V.DisplayWarningText(string)
        C++: void DisplayWarningText(const char *) override;
        
        Put the text into the log file. The text is processed to replace
        &, <, > with &amp, &lt, and &gt. Each display method outputs a
        different XML tag.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLFileOutputWindow
        C++: vtkXMLFileOutputWindow *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLFileOutputWindow
        C++: static vtkXMLFileOutputWindow *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


