"""
This type stub file was generated by pyright.
"""

from .vtkObject import vtkObject

class vtkArray(vtkObject):
    """
    vtkArray - Abstract interface for N-dimensional arrays.
    
    Superclass: vtkObject
    
    vtkArray is the root of a hierarchy of arrays that can be used to
    store data with any number of dimensions.  It provides an abstract
    interface for retrieving and setting array attributes that are
    independent of the type of values stored in the array - such as the
    number of dimensions, extents along each dimension, and number of
    values stored in the array.
    
    To get and set array values, the vtkTypedArray template class derives
    from vtkArray and provides type-specific methods for retrieval and
    update.
    
    Two concrete derivatives of vtkTypedArray are provided at the moment:
    vtkDenseArray and vtkSparseArray, which provide dense and sparse
    storage for arbitrary-dimension data, respectively.  Toolkit users
    can create their own concrete derivatives that implement alternative
    storage strategies, such as compressed-sparse-row, etc.  You could
    also create an array that provided read-only access to 'virtual'
    data, such as an array that returned a Fibonacci sequence, etc.
    
    @sa
    vtkTypedArray, vtkDenseArray, vtkSparseArray
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at 
    Sandia National Laboratories.
    """
    def CopyValue(self, vtkArray, vtkArrayCoordinates, vtkArrayCoordinates_1):
        """
        V.CopyValue(vtkArray, vtkArrayCoordinates, vtkArrayCoordinates)
        C++: virtual void CopyValue(vtkArray *source,
            const vtkArrayCoordinates &source_coordinates,
            const vtkArrayCoordinates &target_coordinates)
        V.CopyValue(vtkArray, int, vtkArrayCoordinates)
        C++: virtual void CopyValue(vtkArray *source,
            const SizeT source_index,
            const vtkArrayCoordinates &target_coordinates)
        V.CopyValue(vtkArray, vtkArrayCoordinates, int)
        C++: virtual void CopyValue(vtkArray *source,
            const vtkArrayCoordinates &source_coordinates,
            const SizeT target_index)
        
        Overwrites a value with a value retrieved from another array. 
        Both arrays must store the same data types.
        """
        ...
    
    def CreateArray(self, p_int, p_int_1):
        """
        V.CreateArray(int, int) -> vtkArray
        C++: static vtkArray *CreateArray(int StorageType, int ValueType)
        
        Creates a new array where StorageType is one of vtkArray::DENSE
        or vtkArray::SPARSE, and ValueType is one of VTK_CHAR,
        VTK_UNSIGNED_CHAR, VTK_SHORT, VTK_UNSIGNED_SHORT,  VTK_INT,
        VTK_UNSIGNED_INT, VTK_LONG, VTK_UNSIGNED_LONG, VTK_DOUBLE,
        VTK_ID_TYPE, or VTK_STRING.  The caller is responsible for the
        lifetime of the returned object.
        """
        ...
    
    def DeepCopy(self):
        """
        V.DeepCopy() -> vtkArray
        C++: virtual vtkArray *DeepCopy()
        
        Returns a new array that is a deep copy of this array.
        """
        ...
    
    def GetCoordinatesN(self, p_int, vtkArrayCoordinates):
        """
        V.GetCoordinatesN(int, vtkArrayCoordinates)
        C++: virtual void GetCoordinatesN(const SizeT n,
            vtkArrayCoordinates &coordinates)
        
        Returns the coordinates of the n-th value in the array, where n
        is in the range [0, GetNonNullSize()).  Note that the order in
        which coordinates are visited is undefined, but is guaranteed to
        match the order in which values are visited using
        vtkTypedArray::GetValueN() and vtkTypedArray::SetValueN().
        """
        ...
    
    def GetDimensionLabel(self, p_int):
        """
        V.GetDimensionLabel(int) -> string
        C++: vtkStdString GetDimensionLabel(DimensionT i)
        
        Returns the label for the i-th array dimension.
        """
        ...
    
    def GetDimensions(self):
        """
        V.GetDimensions() -> int
        C++: DimensionT GetDimensions()
        
        Returns the number of dimensions stored in the array.  Note that
        this is the same as calling GetExtents().GetDimensions().
        """
        ...
    
    def GetExtent(self, p_int):
        """
        V.GetExtent(int) -> vtkArrayRange
        C++: vtkArrayRange GetExtent(DimensionT dimension)
        
        Returns the extent (valid coordinate range) along the given
        dimension.
        """
        ...
    
    def GetExtents(self):
        """
        V.GetExtents() -> vtkArrayExtents
        C++: virtual const vtkArrayExtents &GetExtents()
        
        Returns the extents (the number of dimensions and size along each
        dimension) of the array.
        """
        ...
    
    def GetName(self):
        """
        V.GetName() -> string
        C++: vtkStdString GetName()
        
        Returns the array name.
        """
        ...
    
    def GetNonNullSize(self):
        """
        V.GetNonNullSize() -> int
        C++: virtual SizeT GetNonNullSize()
        
        Returns the number of non-null values stored in the array.  Note
        that this value will equal GetSize() for dense arrays, and will
        be less-than-or-equal to GetSize() for sparse arrays.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> int
        C++: SizeT GetSize()
        
        Returns the number of values stored in the array.  Note that this
        is the same as calling GetExtents().GetSize(), and represents the
        maximum number of values that could ever be stored using the
        current extents.  This is equal to the number of values stored in
        a dense array, but may be larger than the number of values stored
        in a sparse array.
        """
        ...
    
    def GetVariantValue(self, p_int):
        """
        V.GetVariantValue(int) -> vtkVariant
        C++: vtkVariant GetVariantValue(CoordinateT i)
        V.GetVariantValue(int, int) -> vtkVariant
        C++: vtkVariant GetVariantValue(CoordinateT i, CoordinateT j)
        V.GetVariantValue(int, int, int) -> vtkVariant
        C++: vtkVariant GetVariantValue(CoordinateT i, CoordinateT j,
            CoordinateT k)
        V.GetVariantValue(vtkArrayCoordinates) -> vtkVariant
        C++: virtual vtkVariant GetVariantValue(
            const vtkArrayCoordinates &coordinates)
        
        Returns the value stored in the array at the given coordinates.
        Note that the number of dimensions in the supplied coordinates
        must match the number of dimensions in the array.
        """
        ...
    
    def GetVariantValueN(self, p_int):
        """
        V.GetVariantValueN(int) -> vtkVariant
        C++: virtual vtkVariant GetVariantValueN(const SizeT n)
        
        Returns the n-th value stored in the array, where n is in the
        range [0, GetNonNullSize()).  This is useful for efficiently
        visiting every value in the array.  Note that the order in which
        values are visited is undefined, but is guaranteed to match the
        order used by vtkArray::GetCoordinatesN().
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsDense(self):
        """
        V.IsDense() -> bool
        C++: virtual bool IsDense()
        
        Returns true iff the underlying array storage is "dense", i.e.
        that GetSize() and GetNonNullSize() will always return the same
        value. If not, the array is "sparse".
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArray
        C++: vtkArray *NewInstance()
        """
        ...
    
    def Resize(self, p_int):
        """
        V.Resize(int)
        C++: void Resize(const CoordinateT i)
        V.Resize(int, int)
        C++: void Resize(const CoordinateT i, const CoordinateT j)
        V.Resize(int, int, int)
        C++: void Resize(const CoordinateT i, const CoordinateT j,
            const CoordinateT k)
        V.Resize(vtkArrayRange)
        C++: void Resize(const vtkArrayRange &i)
        V.Resize(vtkArrayRange, vtkArrayRange)
        C++: void Resize(const vtkArrayRange &i, const vtkArrayRange &j)
        V.Resize(vtkArrayRange, vtkArrayRange, vtkArrayRange)
        C++: void Resize(const vtkArrayRange &i, const vtkArrayRange &j,
            const vtkArrayRange &k)
        V.Resize(vtkArrayExtents)
        C++: void Resize(const vtkArrayExtents &extents)
        
        Resizes the array to the given extents (number of dimensions and
        size of each dimension).  Note that concrete implementations of
        vtkArray may place constraints on the extents that they will
        store, so you cannot assume that GetExtents() will always return
        the same value passed to Resize().
        
        * The contents of the array are undefined after calling Resize()
          - you
        * should initialize its contents accordingly.  In particular,
        * dimension-labels will be undefined, dense array values will be
        * undefined, and sparse arrays will be empty.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArray
        C++: static vtkArray *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDimensionLabel(self, p_int, string):
        """
        V.SetDimensionLabel(int, string)
        C++: void SetDimensionLabel(DimensionT i,
            const vtkStdString &label)
        
        Sets the label for the i-th array dimension.
        """
        ...
    
    def SetName(self, string):
        """
        V.SetName(string)
        C++: void SetName(const vtkStdString &name)
        
        Sets the array name.
        """
        ...
    
    def SetVariantValue(self, p_int, vtkVariant):
        """
        V.SetVariantValue(int, vtkVariant)
        C++: void SetVariantValue(CoordinateT i, const vtkVariant &value)
        V.SetVariantValue(int, int, vtkVariant)
        C++: void SetVariantValue(CoordinateT i, CoordinateT j,
            const vtkVariant &value)
        V.SetVariantValue(int, int, int, vtkVariant)
        C++: void SetVariantValue(CoordinateT i, CoordinateT j,
            CoordinateT k, const vtkVariant &value)
        V.SetVariantValue(vtkArrayCoordinates, vtkVariant)
        C++: virtual void SetVariantValue(
            const vtkArrayCoordinates &coordinates,
            const vtkVariant &value)
        
        Overwrites the value stored in the array at the given
        coordinates. Note that the number of dimensions in the supplied
        coordinates must match the number of dimensions in the array.
        """
        ...
    
    def SetVariantValueN(self, p_int, vtkVariant):
        """
        V.SetVariantValueN(int, vtkVariant)
        C++: virtual void SetVariantValueN(const SizeT n,
            const vtkVariant &value)
        
        Overwrites the n-th value stored in the array, where n is in the
        range [0, GetNonNullSize()).  This is useful for efficiently
        visiting every value in the array.  Note that the order in which
        values are visited is undefined, but is guaranteed to match the
        order used by vtkArray::GetCoordinatesN().
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DENSE = ...
    SPARSE = ...
    __dict__ = ...
    __vtkname__ = ...


