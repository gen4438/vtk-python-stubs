"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkSMPTools(object):
    """
    vtkSMPTools - A set of parallel (multi-threaded) utility functions.
    
    vtkSMPTools provides a set of utility functions that can be used to
    parallelize parts of VTK code using multiple threads. There are
    several back-end implementations of parallel functionality (currently
    Sequential, TBB and X-Kaapi) that actual execution is delegated to.
    
    vtkSMPTools()
    vtkSMPTools(const &vtkSMPTools)
    """
    def GetEstimatedNumberOfThreads(self):
        """
        V.GetEstimatedNumberOfThreads() -> int
        C++: static int GetEstimatedNumberOfThreads()
        
        Get the estimated number of threads being used by the backend.
        This should be used as just an estimate since the number of
        threads may vary dynamically and a particular task may not be
        executed on all the available threads.
        """
        ...
    
    def Initialize(self, p_int):
        """
        V.Initialize(int)
        C++: static void Initialize(int numThreads=0)
        
        Initialize the underlying libraries for execution. This is not
        required as it is automatically called before the first execution
        of any parallel code. However, it can be used to control the
        maximum number of threads used when the back-end supports it
        (currently Simple and TBB only). Make sure to call it before any
        other parallel operation. When using Kaapi, use the
        KAAPI_CPUCOUNT env. variable to control the number of threads
        used in the thread pool.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


