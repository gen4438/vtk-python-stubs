"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkFreeTypeStringToImage(__vtkmodules_vtkRenderingCore.vtkStringToImage):
    """
    vtkFreeTypeStringToImage - render the supplied text to an image.
    
    Superclass: vtkStringToImage
    """
    def DeepCopy(self, vtkFreeTypeStringToImage):
        """
        V.DeepCopy(vtkFreeTypeStringToImage)
        C++: void DeepCopy(vtkFreeTypeStringToImage *utility)
        
        Make a deep copy of the supplied utility class.
        """
        ...
    
    def GetBounds(self, vtkTextProperty, unicode, p_int):
        """
        V.GetBounds(vtkTextProperty, unicode, int) -> vtkVector2i
        C++: vtkVector2i GetBounds(vtkTextProperty *property,
            const vtkUnicodeString &string, int dpi) override;
        V.GetBounds(vtkTextProperty, string, int) -> vtkVector2i
        C++: vtkVector2i GetBounds(vtkTextProperty *property,
            const vtkStdString &string, int dpi) override;
        
        Given a text property and a string, get the bounding box [xmin,
        xmax] x [ymin, ymax]. Note that this is the bounding box of the
        area where actual pixels will be written, given a
        text/pen/baseline location of (0,0). For example, if the string
        starts with a 'space', or depending on the orientation, you can
        end up with a [-20, -10] x [5, 10] bbox (the math to get the real
        bbox is straightforward). Return 1 on success, 0 otherwise. You
        can use IsBoundingBoxValid() to test if the computed bbox is
        valid (it may not if GetBoundingBox() failed or if the string was
        empty).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFreeTypeStringToImage
        C++: vtkFreeTypeStringToImage *NewInstance()
        """
        ...
    
    def RenderString(self, vtkTextProperty, unicode, p_int, vtkImageData, p_int=..., p_int=...):
        """
        V.RenderString(vtkTextProperty, unicode, int, vtkImageData, [int,
            int]) -> int
        C++: int RenderString(vtkTextProperty *property,
            const vtkUnicodeString &string, int dpi, vtkImageData *data,
            int textDims[2]=nullptr) override;
        V.RenderString(vtkTextProperty, string, int, vtkImageData, [int,
            int]) -> int
        C++: int RenderString(vtkTextProperty *property,
            const vtkStdString &string, int dpi, vtkImageData *data,
            int textDims[2]=nullptr) override;
        
        Given a text property and a string, this function initializes the
        vtkImageData *data and renders it in a vtkImageData. textDims, if
        provided, will be overwritten by the pixel width and height of
        the rendered string. This is useful when ScaleToPowerOfTwo is
        true, and the image dimensions may not match the dimensions of
        the rendered text.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFreeTypeStringToImage
        C++: static vtkFreeTypeStringToImage *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetScaleToPowerOfTwo(self, bool):
        """
        V.SetScaleToPowerOfTwo(bool)
        C++: void SetScaleToPowerOfTwo(bool scale) override;
        
        Should we produce images at powers of 2, makes rendering on old
        OpenGL hardware easier. Default is false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFreeTypeTools(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkFreeTypeTools - FreeType library support
    
    Superclass: vtkObject
    
    vtkFreeTypeTools provides a low-level interface to the FreeType2
    library, including font-cache and rasterization.
    
    @warning
    Internal use only.
    """
    def DebugTexturesOff(self):
        """
        V.DebugTexturesOff()
        C++: virtual void DebugTexturesOff()
        
        If true, images produced by RenderString will have a transparent
        grey background and set the justification anchor texel to bright
        yellow.
        """
        ...
    
    def DebugTexturesOn(self):
        """
        V.DebugTexturesOn()
        C++: virtual void DebugTexturesOn()
        
        If true, images produced by RenderString will have a transparent
        grey background and set the justification anchor texel to bright
        yellow.
        """
        ...
    
    def ForceCompiledFontsOff(self):
        """
        V.ForceCompiledFontsOff()
        C++: virtual void ForceCompiledFontsOff()
        
        Force use of the fonts compiled into VTK, ignoring any FontConfig
        or embedded fonts. Useful for generating test images consistently
        across platforms. This flag is on by default.
        """
        ...
    
    def ForceCompiledFontsOn(self):
        """
        V.ForceCompiledFontsOn()
        C++: virtual void ForceCompiledFontsOn()
        
        Force use of the fonts compiled into VTK, ignoring any FontConfig
        or embedded fonts. Useful for generating test images consistently
        across platforms. This flag is on by default.
        """
        ...
    
    def GetBoundingBox(self, vtkTextProperty, string, p_int, p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetBoundingBox(vtkTextProperty, string, int, [int, int, int,
            int]) -> bool
        C++: bool GetBoundingBox(vtkTextProperty *tprop,
            const vtkStdString &str, int dpi, int bbox[4])
        V.GetBoundingBox(vtkTextProperty, unicode, int, [int, int, int,
            int]) -> bool
        C++: bool GetBoundingBox(vtkTextProperty *tprop,
            const vtkUnicodeString &str, int dpi, int bbox[4])
        
        Given a text property and a string, get the bounding box {xmin,
        xmax, ymin, ymax} of the rendered string in pixels. The origin of
        the bounding box is the anchor point described by the horizontal
        and vertical justification text property variables. Returns true
        on success, false otherwise.
        @sa GetMetrics
        """
        ...
    
    def GetConstrainedFontSize(self, string, vtkTextProperty, p_int, p_int_1, p_int_2):
        """
        V.GetConstrainedFontSize(string, vtkTextProperty, int, int, int)
            -> int
        C++: int GetConstrainedFontSize(const vtkStdString &str,
            vtkTextProperty *tprop, int dpi, int targetWidth,
            int targetHeight)
        V.GetConstrainedFontSize(unicode, vtkTextProperty, int, int, int)
            -> int
        C++: int GetConstrainedFontSize(const vtkUnicodeString &str,
            vtkTextProperty *tprop, int dpi, int targetWidth,
            int targetHeight)
        
        This function returns the font size (in points) required to fit
        the string in the target rectangle. The font size of tprop is
        updated to the computed value as well. If an error occurs, -1 is
        returned.
        """
        ...
    
    def GetDebugTextures(self):
        """
        V.GetDebugTextures() -> bool
        C++: virtual bool GetDebugTextures()
        
        If true, images produced by RenderString will have a transparent
        grey background and set the justification anchor texel to bright
        yellow.
        """
        ...
    
    def GetForceCompiledFonts(self):
        """
        V.GetForceCompiledFonts() -> bool
        C++: virtual bool GetForceCompiledFonts()
        
        Force use of the fonts compiled into VTK, ignoring any FontConfig
        or embedded fonts. Useful for generating test images consistently
        across platforms. This flag is on by default.
        """
        ...
    
    def GetInstance(self):
        """
        V.GetInstance() -> vtkFreeTypeTools
        C++: static vtkFreeTypeTools *GetInstance()
        
        Return the singleton instance with no reference counting.
        """
        ...
    
    def GetMaximumNumberOfBytes(self):
        """
        V.GetMaximumNumberOfBytes() -> int
        C++: virtual unsigned long GetMaximumNumberOfBytes()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfBytesMaxValue(self):
        """
        V.GetMaximumNumberOfBytesMaxValue() -> int
        C++: virtual unsigned long GetMaximumNumberOfBytesMaxValue()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfBytesMinValue(self):
        """
        V.GetMaximumNumberOfBytesMinValue() -> int
        C++: virtual unsigned long GetMaximumNumberOfBytesMinValue()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfFaces(self):
        """
        V.GetMaximumNumberOfFaces() -> int
        C++: virtual unsigned int GetMaximumNumberOfFaces()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfFacesMaxValue(self):
        """
        V.GetMaximumNumberOfFacesMaxValue() -> int
        C++: virtual unsigned int GetMaximumNumberOfFacesMaxValue()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfFacesMinValue(self):
        """
        V.GetMaximumNumberOfFacesMinValue() -> int
        C++: virtual unsigned int GetMaximumNumberOfFacesMinValue()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfSizes(self):
        """
        V.GetMaximumNumberOfSizes() -> int
        C++: virtual unsigned int GetMaximumNumberOfSizes()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfSizesMaxValue(self):
        """
        V.GetMaximumNumberOfSizesMaxValue() -> int
        C++: virtual unsigned int GetMaximumNumberOfSizesMaxValue()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetMaximumNumberOfSizesMinValue(self):
        """
        V.GetMaximumNumberOfSizesMinValue() -> int
        C++: virtual unsigned int GetMaximumNumberOfSizesMinValue()
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaleToPowerTwo(self):
        """
        V.GetScaleToPowerTwo() -> bool
        C++: virtual bool GetScaleToPowerTwo()
        
        Set whether the image produced should be scaled up to the nearest
        power of
        2. This is normally required for older graphics cards where all
           textures must be a power of 2. This defaults to false, and
           should be fine on modern hardware.
        """
        ...
    
    def HashBuffer(self, void, p_int, p_int_1):
        """
        V.HashBuffer(void, int, int) -> int
        C++: static vtkTypeUInt32 HashBuffer(const void *str, size_t n,
            vtkTypeUInt32 hash=0)
        
        Hash a string of a given length. This function hashes n chars and
        does not depend on a terminating null character.
        """
        ...
    
    def HashString(self, string):
        """
        V.HashString(string) -> int
        C++: static vtkTypeUInt16 HashString(const char *str)
        
        Turn a string into a hash. This is not a general purpose hash
        function, and is only used to generate identifiers for cached
        fonts.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapIdToTextProperty(self, p_int, vtkTextProperty):
        """
        V.MapIdToTextProperty(int, vtkTextProperty)
        C++: void MapIdToTextProperty(size_t tprop_cache_id,
            vtkTextProperty *tprop)
        
        Given a text property 'tprop', get its unique ID in our cache
        framework. In the same way, given a unique ID in our cache,
        retrieve the corresponding text property and assign its
        parameters to 'tprop'. Warning: there is no one to one mapping
        between a single text property the corresponding ID, and
        vice-versa. The ID is just a fast hash, a binary mask
        concatenating the attributes of the text property that are
        relevant to our cache (Color, Opacity, Justification setting are
        not stored).
        """
        ...
    
    def MapTextPropertyToId(self, vtkTextProperty, *int):
        """
        V.MapTextPropertyToId(vtkTextProperty, [int, ...])
        C++: void MapTextPropertyToId(vtkTextProperty *tprop,
            size_t *tprop_cache_id)
        
        Given a text property 'tprop', get its unique ID in our cache
        framework. In the same way, given a unique ID in our cache,
        retrieve the corresponding text property and assign its
        parameters to 'tprop'. Warning: there is no one to one mapping
        between a single text property the corresponding ID, and
        vice-versa. The ID is just a fast hash, a binary mask
        concatenating the attributes of the text property that are
        relevant to our cache (Color, Opacity, Justification setting are
        not stored).
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFreeTypeTools
        C++: vtkFreeTypeTools *NewInstance()
        """
        ...
    
    def RenderString(self, vtkTextProperty, string, p_int, vtkImageData, p_int=..., p_int=...):
        """
        V.RenderString(vtkTextProperty, string, int, vtkImageData, [int,
            int]) -> bool
        C++: bool RenderString(vtkTextProperty *tprop,
            const vtkStdString &str, int dpi, vtkImageData *data,
            int textDims[2]=nullptr)
        V.RenderString(vtkTextProperty, unicode, int, vtkImageData, [int,
            int]) -> bool
        C++: bool RenderString(vtkTextProperty *tprop,
            const vtkUnicodeString &str, int dpi, vtkImageData *data,
            int textDims[2]=nullptr)
        
        Given a text property and a string, this function initializes the
        vtkImageData *data and renders it in a vtkImageData. textDims, if
        provided, will be overwritten by the pixel width and height of
        the rendered string. This is useful when ScaleToPowerOfTwo is
        true, and the image dimensions may not match the dimensions of
        the rendered text. The origin of the image's extents is aligned
        with the anchor point described by the text property's vertical
        and horizontal justification options.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFreeTypeTools
        C++: static vtkFreeTypeTools *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScaleToPowerTwoOff(self):
        """
        V.ScaleToPowerTwoOff()
        C++: virtual void ScaleToPowerTwoOff()
        
        Set whether the image produced should be scaled up to the nearest
        power of
        2. This is normally required for older graphics cards where all
           textures must be a power of 2. This defaults to false, and
           should be fine on modern hardware.
        """
        ...
    
    def ScaleToPowerTwoOn(self):
        """
        V.ScaleToPowerTwoOn()
        C++: virtual void ScaleToPowerTwoOn()
        
        Set whether the image produced should be scaled up to the nearest
        power of
        2. This is normally required for older graphics cards where all
           textures must be a power of 2. This defaults to false, and
           should be fine on modern hardware.
        """
        ...
    
    def SetDebugTextures(self, bool):
        """
        V.SetDebugTextures(bool)
        C++: virtual void SetDebugTextures(bool _arg)
        
        If true, images produced by RenderString will have a transparent
        grey background and set the justification anchor texel to bright
        yellow.
        """
        ...
    
    def SetForceCompiledFonts(self, bool):
        """
        V.SetForceCompiledFonts(bool)
        C++: virtual void SetForceCompiledFonts(bool _arg)
        
        Force use of the fonts compiled into VTK, ignoring any FontConfig
        or embedded fonts. Useful for generating test images consistently
        across platforms. This flag is on by default.
        """
        ...
    
    def SetInstance(self, vtkFreeTypeTools):
        """
        V.SetInstance(vtkFreeTypeTools)
        C++: static void SetInstance(vtkFreeTypeTools *instance)
        
        Supply a user defined instance. Call Delete() on the supplied
        instance after setting it to fix the reference count.
        """
        ...
    
    def SetMaximumNumberOfBytes(self, p_int):
        """
        V.SetMaximumNumberOfBytes(int)
        C++: virtual void SetMaximumNumberOfBytes(unsigned long _arg)
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def SetMaximumNumberOfFaces(self, p_int):
        """
        V.SetMaximumNumberOfFaces(int)
        C++: virtual void SetMaximumNumberOfFaces(unsigned int _arg)
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def SetMaximumNumberOfSizes(self, p_int):
        """
        V.SetMaximumNumberOfSizes(int)
        C++: virtual void SetMaximumNumberOfSizes(unsigned int _arg)
        
        Set/Get the maximum number of faces (FT_Face), sizes (FT_Size)
        and bytes used by the cache. These settings can be changed as
        long as it is done prior to accessing any of the caches or the
        cache manager.
        """
        ...
    
    def SetScaleToPowerTwo(self, bool):
        """
        V.SetScaleToPowerTwo(bool)
        C++: virtual void SetScaleToPowerTwo(bool _arg)
        
        Set whether the image produced should be scaled up to the nearest
        power of
        2. This is normally required for older graphics cards where all
           textures must be a power of 2. This defaults to false, and
           should be fine on modern hardware.
        """
        ...
    
    def StringToPath(self, vtkTextProperty, string, p_int, vtkPath):
        """
        V.StringToPath(vtkTextProperty, string, int, vtkPath) -> bool
        C++: bool StringToPath(vtkTextProperty *tprop,
            const vtkStdString &str, int dpi, vtkPath *path)
        V.StringToPath(vtkTextProperty, unicode, int, vtkPath) -> bool
        C++: bool StringToPath(vtkTextProperty *tprop,
            const vtkUnicodeString &str, int dpi, vtkPath *path)
        
        Given a text property and a string, this function populates the
        vtkPath path with the outline of the rendered string. The origin
        of the path coordinates is aligned with the anchor point
        described by the text property's horizontal and vertical
        justification options.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFreeTypeToolsCleanup(object):
    """
    vtkFreeTypeToolsCleanup - no description provided.
    
    vtkFreeTypeToolsCleanup()
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkMathTextFreeTypeTextRenderer(__vtkmodules_vtkRenderingCore.vtkTextRenderer):
    """
    vtkMathTextFreeTypeTextRenderer - Default implementation of
    vtkTextRenderer.
    
    Superclass: vtkTextRenderer
    
    Default implementation of vtkTextRenderer using vtkFreeTypeTools and
    vtkMathTextUtilities.
    
    @warning
    The MathText backend does not currently support UTF16 strings, thus
    UTF16 strings passed to the MathText renderer will be converted to
    UTF8.
    """
    def FreeTypeIsSupported(self):
        """
        V.FreeTypeIsSupported() -> bool
        C++: bool FreeTypeIsSupported() override;
        
        Test for availability of various backends
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MathTextIsSupported(self):
        """
        V.MathTextIsSupported() -> bool
        C++: bool MathTextIsSupported() override;
        
        Test for availability of various backends
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMathTextFreeTypeTextRenderer
        C++: vtkMathTextFreeTypeTextRenderer *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMathTextFreeTypeTextRenderer
        C++: static vtkMathTextFreeTypeTextRenderer *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMathTextUtilities(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkMathTextUtilities - Abstract interface to equation rendering.
    
    Superclass: vtkObject
    
    vtkMathTextUtilities defines an interface for equation rendering.
    Intended for use with the python matplotlib.mathtext module
    (implemented in the vtkMatplotlib module).
    """
    def GetBoundingBox(self, vtkTextProperty, string, p_int, p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetBoundingBox(vtkTextProperty, string, int, [int, int, int,
            int]) -> bool
        C++: virtual bool GetBoundingBox(vtkTextProperty *tprop,
            const char *str, int dpi, int bbox[4])
        
        Determine the dimensions of the image that RenderString will
        produce for a given str, tprop, and dpi
        """
        ...
    
    def GetConstrainedFontSize(self, string, vtkTextProperty, p_int, p_int_1, p_int_2):
        """
        V.GetConstrainedFontSize(string, vtkTextProperty, int, int, int)
            -> int
        C++: virtual int GetConstrainedFontSize(const char *str,
            vtkTextProperty *tprop, int targetWidth, int targetHeight,
            int dpi)
        
        This function returns the font size (in points) required to fit
        the string in the target rectangle. The font size of tprop is
        updated to the computed value as well. If an error occurs (e.g.
        an improperly formatted MathText string), -1 is returned.
        """
        ...
    
    def GetInstance(self):
        """
        V.GetInstance() -> vtkMathTextUtilities
        C++: static vtkMathTextUtilities *GetInstance()
        
        Return the singleton instance with no reference counting.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaleToPowerOfTwo(self):
        """
        V.GetScaleToPowerOfTwo() -> bool
        C++: virtual bool GetScaleToPowerOfTwo()
        
        Set to true if the graphics implementation requires texture image
        dimensions to be a power of two. Default is true, but this member
        will be set appropriately when GL is inited.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsAvailable(self):
        """
        V.IsAvailable() -> bool
        C++: virtual bool IsAvailable()
        
        Returns true if mathtext rendering is available.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMathTextUtilities
        C++: vtkMathTextUtilities *NewInstance()
        """
        ...
    
    def RenderString(self, string, vtkImageData, vtkTextProperty, p_int, p_int=..., p_int=...):
        """
        V.RenderString(string, vtkImageData, vtkTextProperty, int, [int,
            int]) -> bool
        C++: virtual bool RenderString(const char *str,
            vtkImageData *data, vtkTextProperty *tprop, int dpi,
            int textDims[2]=nullptr)
        
        Render the given string str into the vtkImageData data with a
        resolution of dpi. textDims, will be overwritten by the pixel
        width and height of the rendered string. This is useful when
        ScaleToPowerOfTwo is set to true, and the image dimensions may
        not match the dimensions of the rendered text.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMathTextUtilities
        C++: static vtkMathTextUtilities *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInstance(self, vtkMathTextUtilities):
        """
        V.SetInstance(vtkMathTextUtilities)
        C++: static void SetInstance(vtkMathTextUtilities *instance)
        
        Supply a user defined instance. Call Delete() on the supplied
        instance after setting it to fix the reference count.
        """
        ...
    
    def SetScaleToPowerOfTwo(self, bool):
        """
        V.SetScaleToPowerOfTwo(bool)
        C++: virtual void SetScaleToPowerOfTwo(bool scale)
        
        Set to true if the graphics implementation requires texture image
        dimensions to be a power of two. Default is true, but this member
        will be set appropriately when GL is inited.
        """
        ...
    
    def StringToPath(self, string, vtkPath, vtkTextProperty, p_int):
        """
        V.StringToPath(string, vtkPath, vtkTextProperty, int) -> bool
        C++: virtual bool StringToPath(const char *str, vtkPath *path,
            vtkTextProperty *tprop, int dpi)
        
        Parse the MathText expression in str and fill path with a contour
        of the glyphs.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMathTextUtilitiesCleanup(object):
    """
    vtkMathTextUtilitiesCleanup - no description provided.
    
    vtkMathTextUtilitiesCleanup()
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkScaledTextActor(__vtkmodules_vtkRenderingCore.vtkTextActor):
    """
    vtkScaledTextActor - create text that will scale as needed
    
    Superclass: vtkTextActor
    
    vtkScaledTextActor is deprecated. New code should use vtkTextActor
    with the Scaled = true option.
    
    @sa
    vtkTextActor vtkActor2D vtkTextMapper
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkScaledTextActor
        C++: vtkScaledTextActor *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkScaledTextActor
        C++: static vtkScaledTextActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTextRendererStringToImage(__vtkmodules_vtkRenderingCore.vtkStringToImage):
    """
    vtkTextRendererStringToImage - uses vtkTextRenderer to render the
    supplied text to an image.
    
    Superclass: vtkStringToImage
    """
    def DeepCopy(self, vtkTextRendererStringToImage):
        """
        V.DeepCopy(vtkTextRendererStringToImage)
        C++: void DeepCopy(vtkTextRendererStringToImage *utility)
        
        Make a deep copy of the supplied utility class.
        """
        ...
    
    def GetBounds(self, vtkTextProperty, unicode, p_int):
        """
        V.GetBounds(vtkTextProperty, unicode, int) -> vtkVector2i
        C++: vtkVector2i GetBounds(vtkTextProperty *property,
            const vtkUnicodeString &string, int dpi) override;
        V.GetBounds(vtkTextProperty, string, int) -> vtkVector2i
        C++: vtkVector2i GetBounds(vtkTextProperty *property,
            const vtkStdString &string, int dpi) override;
        
        Given a text property and a string, get the bounding box [xmin,
        xmax] x [ymin, ymax]. Note that this is the bounding box of the
        area where actual pixels will be written, given a
        text/pen/baseline location of (0,0). For example, if the string
        starts with a 'space', or depending on the orientation, you can
        end up with a [-20, -10] x [5, 10] bbox (the math to get the real
        bbox is straightforward). Return 1 on success, 0 otherwise. You
        can use IsBoundingBoxValid() to test if the computed bbox is
        valid (it may not if GetBoundingBox() failed or if the string was
        empty).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTextRendererStringToImage
        C++: vtkTextRendererStringToImage *NewInstance()
        """
        ...
    
    def RenderString(self, vtkTextProperty, unicode, p_int, vtkImageData, p_int=..., p_int=...):
        """
        V.RenderString(vtkTextProperty, unicode, int, vtkImageData, [int,
            int]) -> int
        C++: int RenderString(vtkTextProperty *property,
            const vtkUnicodeString &string, int dpi, vtkImageData *data,
            int textDims[2]=nullptr) override;
        V.RenderString(vtkTextProperty, string, int, vtkImageData, [int,
            int]) -> int
        C++: int RenderString(vtkTextProperty *property,
            const vtkStdString &string, int dpi, vtkImageData *data,
            int textDims[2]=nullptr) override;
        
        Given a text property and a string, this function initializes the
        vtkImageData *data and renders it in a vtkImageData. textDims, if
        provided, will be overwritten by the pixel width and height of
        the rendered string. This is useful when ScaleToPowerOfTwo is
        true, and the image dimensions may not match the dimensions of
        the rendered text.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTextRendererStringToImage
        C++: static vtkTextRendererStringToImage *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetScaleToPowerOfTwo(self, bool):
        """
        V.SetScaleToPowerOfTwo(bool)
        C++: void SetScaleToPowerOfTwo(bool scale) override;
        
        Should we produce images at powers of 2, makes rendering on old
        OpenGL hardware easier. Default is false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkVectorText(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkVectorText - create polygonal text
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkVectorText generates vtkPolyData from an input text string.
    Besides the ASCII alphanumeric characters a-z, A-Z, 0-9,
    vtkVectorText also supports ASCII punctuation marks. (The supported
    ASCII character set are the codes (33-126) inclusive.) The only
    control character supported is the line feed character "\n", which
    advances to a new line.
    
    To use this class, you normally couple it with a vtkPolyDataMapper
    and a vtkActor. In this case you would use the vtkActor's
    transformation methods to position, orient, and scale the text. You
    may also wish to use a vtkFollower to orient the text so that it
    always faces the camera.
    
    @sa
    vtkTextMapper vtkCaptionActor2D
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetText(self):
        """
        V.GetText() -> string
        C++: virtual char *GetText()
        
        Set/Get the text to be drawn.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVectorText
        C++: vtkVectorText *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVectorText
        C++: static vtkVectorText *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetText(self, string):
        """
        V.SetText(string)
        C++: virtual void SetText(const char *_arg)
        
        Set/Get the text to be drawn.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
