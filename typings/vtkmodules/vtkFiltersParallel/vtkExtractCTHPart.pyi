"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExtractCTHPart(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkExtractCTHPart - Generates surface of a CTH volume fraction.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkExtractCTHPart is a filter that is specialized for creating
    visualizations for a CTH simulation. CTH datasets comprise of either
    vtkNonOverlappingAMR or a multiblock of non-overlapping rectilinear
    grids with cell-data. Certain cell-arrays in the dataset identify the
    fraction of a particular material present in a given cell. This goal
    with this filter is to extract a surface contour demarcating the
    surface where the volume fraction for a particular material is equal
    to the user chosen value.
    
    To achieve that, this filter first converts the cell-data to
    point-data and then simply apply vtkContourFilter filter to extract
    the contour.
    
    vtkExtractCTHPart also provides the user with an option to clip the
    resultant contour using a vtkPlane. Internally, it uses
    vtkClipClosedSurface to clip the contour using the vtkPlane provided.
    
    The output of this filter is a vtkMultiBlockDataSet with one block
    corresponding to each volume-fraction array requested. Each block
    itself is a vtkPolyData for the contour generated on the current
    process (which may be null, for processes where no contour is
    generated).
    """
    def AddVolumeArrayName(self, string):
        """
        V.AddVolumeArrayName(string)
        C++: void AddVolumeArrayName(const char *)
        
        Select cell-data arrays (volume-fraction arrays) to contour with.
        """
        ...
    
    def CappingOff(self):
        """
        V.CappingOff()
        C++: virtual void CappingOff()
        
        On by default, enables logic to cap the material volume.
        """
        ...
    
    def CappingOn(self):
        """
        V.CappingOn()
        C++: virtual void CappingOn()
        
        On by default, enables logic to cap the material volume.
        """
        ...
    
    def GenerateSolidGeometryOff(self):
        """
        V.GenerateSolidGeometryOff()
        C++: virtual void GenerateSolidGeometryOff()
        
        Generate solid geometry as results instead of 2D contours. When
        set to true, GenerateTriangles flag will be ignored. False by
        default.
        """
        ...
    
    def GenerateSolidGeometryOn(self):
        """
        V.GenerateSolidGeometryOn()
        C++: virtual void GenerateSolidGeometryOn()
        
        Generate solid geometry as results instead of 2D contours. When
        set to true, GenerateTriangles flag will be ignored. False by
        default.
        """
        ...
    
    def GenerateTrianglesOff(self):
        """
        V.GenerateTrianglesOff()
        C++: virtual void GenerateTrianglesOff()
        
        Triangulate results. When set to false, the internal cut and
        contour filters are told not to triangulate results if possible.
        true by default.
        """
        ...
    
    def GenerateTrianglesOn(self):
        """
        V.GenerateTrianglesOn()
        C++: virtual void GenerateTrianglesOn()
        
        Triangulate results. When set to false, the internal cut and
        contour filters are told not to triangulate results if possible.
        true by default.
        """
        ...
    
    def GetCapping(self):
        """
        V.GetCapping() -> bool
        C++: virtual bool GetCapping()
        
        On by default, enables logic to cap the material volume.
        """
        ...
    
    def GetClipPlane(self):
        """
        V.GetClipPlane() -> vtkPlane
        C++: virtual vtkPlane *GetClipPlane()
        
        Set, get or manipulate the implicit clipping plane.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Get/Set the parallel controller. By default, the value returned
        by vtkMultiBlockDataSetAlgorithm::GetGlobalController() when the
        object is instantiated is used.
        """
        ...
    
    def GetGenerateSolidGeometry(self):
        """
        V.GetGenerateSolidGeometry() -> bool
        C++: virtual bool GetGenerateSolidGeometry()
        
        Generate solid geometry as results instead of 2D contours. When
        set to true, GenerateTriangles flag will be ignored. False by
        default.
        """
        ...
    
    def GetGenerateTriangles(self):
        """
        V.GetGenerateTriangles() -> bool
        C++: virtual bool GetGenerateTriangles()
        
        Triangulate results. When set to false, the internal cut and
        contour filters are told not to triangulate results if possible.
        true by default.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Look at clip plane to compute MTime.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfVolumeArrayNames(self):
        """
        V.GetNumberOfVolumeArrayNames() -> int
        C++: int GetNumberOfVolumeArrayNames()
        
        Select cell-data arrays (volume-fraction arrays) to contour with.
        """
        ...
    
    def GetRemoveGhostCells(self):
        """
        V.GetRemoveGhostCells() -> bool
        C++: virtual bool GetRemoveGhostCells()
        
        When set to false, the output surfaces will not hide contours
        extracted from ghost cells. This results in overlapping contours
        but overcomes holes. Default is set to true.
        """
        ...
    
    def GetVolumeArrayName(self, p_int):
        """
        V.GetVolumeArrayName(int) -> string
        C++: const char *GetVolumeArrayName(int idx)
        
        Select cell-data arrays (volume-fraction arrays) to contour with.
        """
        ...
    
    def GetVolumeFractionSurfaceValue(self):
        """
        V.GetVolumeFractionSurfaceValue() -> float
        C++: virtual double GetVolumeFractionSurfaceValue()
        
        Set and get the volume fraction surface value. This value should
        be between 0 and 1
        """
        ...
    
    def GetVolumeFractionSurfaceValueMaxValue(self):
        """
        V.GetVolumeFractionSurfaceValueMaxValue() -> float
        C++: virtual double GetVolumeFractionSurfaceValueMaxValue()
        
        Set and get the volume fraction surface value. This value should
        be between 0 and 1
        """
        ...
    
    def GetVolumeFractionSurfaceValueMinValue(self):
        """
        V.GetVolumeFractionSurfaceValueMinValue() -> float
        C++: virtual double GetVolumeFractionSurfaceValueMinValue()
        
        Set and get the volume fraction surface value. This value should
        be between 0 and 1
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractCTHPart
        C++: vtkExtractCTHPart *NewInstance()
        """
        ...
    
    def RemoveGhostCellsOff(self):
        """
        V.RemoveGhostCellsOff()
        C++: virtual void RemoveGhostCellsOff()
        
        When set to false, the output surfaces will not hide contours
        extracted from ghost cells. This results in overlapping contours
        but overcomes holes. Default is set to true.
        """
        ...
    
    def RemoveGhostCellsOn(self):
        """
        V.RemoveGhostCellsOn()
        C++: virtual void RemoveGhostCellsOn()
        
        When set to false, the output surfaces will not hide contours
        extracted from ghost cells. This results in overlapping contours
        but overcomes holes. Default is set to true.
        """
        ...
    
    def RemoveVolumeArrayNames(self):
        """
        V.RemoveVolumeArrayNames()
        C++: void RemoveVolumeArrayNames()
        
        Select cell-data arrays (volume-fraction arrays) to contour with.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractCTHPart
        C++: static vtkExtractCTHPart *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCapping(self, bool):
        """
        V.SetCapping(bool)
        C++: virtual void SetCapping(bool _arg)
        
        On by default, enables logic to cap the material volume.
        """
        ...
    
    def SetClipPlane(self, vtkPlane):
        """
        V.SetClipPlane(vtkPlane)
        C++: void SetClipPlane(vtkPlane *clipPlane)
        
        Set, get or manipulate the implicit clipping plane.
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: void SetController(vtkMultiProcessController *controller)
        
        Get/Set the parallel controller. By default, the value returned
        by vtkMultiBlockDataSetAlgorithm::GetGlobalController() when the
        object is instantiated is used.
        """
        ...
    
    def SetGenerateSolidGeometry(self, bool):
        """
        V.SetGenerateSolidGeometry(bool)
        C++: virtual void SetGenerateSolidGeometry(bool _arg)
        
        Generate solid geometry as results instead of 2D contours. When
        set to true, GenerateTriangles flag will be ignored. False by
        default.
        """
        ...
    
    def SetGenerateTriangles(self, bool):
        """
        V.SetGenerateTriangles(bool)
        C++: virtual void SetGenerateTriangles(bool _arg)
        
        Triangulate results. When set to false, the internal cut and
        contour filters are told not to triangulate results if possible.
        true by default.
        """
        ...
    
    def SetRemoveGhostCells(self, bool):
        """
        V.SetRemoveGhostCells(bool)
        C++: virtual void SetRemoveGhostCells(bool _arg)
        
        When set to false, the output surfaces will not hide contours
        extracted from ghost cells. This results in overlapping contours
        but overcomes holes. Default is set to true.
        """
        ...
    
    def SetVolumeFractionSurfaceValue(self, p_float):
        """
        V.SetVolumeFractionSurfaceValue(float)
        C++: virtual void SetVolumeFractionSurfaceValue(double _arg)
        
        Set and get the volume fraction surface value. This value should
        be between 0 and 1
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


