"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCollectGraph(__vtkmodules_vtkCommonExecutionModel.vtkGraphAlgorithm):
    """
    vtkCollectGraph - Collect distributed graph.
    
    Superclass: vtkGraphAlgorithm
    
    This filter has code to collect a graph from across processes onto
    vertex 0. Collection can be turned on or off using the "PassThrough"
    flag.
    """
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        By default this filter uses the global controller, but this
        method can be used to set another instead.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputType(self):
        """
        V.GetOutputType() -> int
        C++: virtual int GetOutputType()
        
        Directedness flag, used to signal whether the output graph is
        directed or undirected. DIRECTED_OUTPUT expects that this filter
        is generating a directed graph. UNDIRECTED_OUTPUT expects that
        this filter is generating an undirected graph. DIRECTED_OUTPUT
        and UNDIRECTED_OUTPUT flags should only be set on the client
        filter.  Server filters should be set to USE_INPUT_TYPE since
        they have valid input and the directedness is determined from the
        input type.
        """
        ...
    
    def GetPassThrough(self):
        """
        V.GetPassThrough() -> int
        C++: virtual vtkTypeBool GetPassThrough()
        
        To collect or just copy input to output. Off (collect) by
        default.
        """
        ...
    
    def GetSocketController(self):
        """
        V.GetSocketController() -> vtkSocketController
        C++: virtual vtkSocketController *GetSocketController()
        
        When this filter is being used in client-server mode, this is the
        controller used to communicate between client and server.  Client
        should not set the other controller.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCollectGraph
        C++: vtkCollectGraph *NewInstance()
        """
        ...
    
    def PassThroughOff(self):
        """
        V.PassThroughOff()
        C++: virtual void PassThroughOff()
        
        To collect or just copy input to output. Off (collect) by
        default.
        """
        ...
    
    def PassThroughOn(self):
        """
        V.PassThroughOn()
        C++: virtual void PassThroughOn()
        
        To collect or just copy input to output. Off (collect) by
        default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCollectGraph
        C++: static vtkCollectGraph *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *)
        
        By default this filter uses the global controller, but this
        method can be used to set another instead.
        """
        ...
    
    def SetOutputType(self, p_int):
        """
        V.SetOutputType(int)
        C++: virtual void SetOutputType(int _arg)
        
        Directedness flag, used to signal whether the output graph is
        directed or undirected. DIRECTED_OUTPUT expects that this filter
        is generating a directed graph. UNDIRECTED_OUTPUT expects that
        this filter is generating an undirected graph. DIRECTED_OUTPUT
        and UNDIRECTED_OUTPUT flags should only be set on the client
        filter.  Server filters should be set to USE_INPUT_TYPE since
        they have valid input and the directedness is determined from the
        input type.
        """
        ...
    
    def SetPassThrough(self, p_int):
        """
        V.SetPassThrough(int)
        C++: virtual void SetPassThrough(vtkTypeBool _arg)
        
        To collect or just copy input to output. Off (collect) by
        default.
        """
        ...
    
    def SetSocketController(self, vtkSocketController):
        """
        V.SetSocketController(vtkSocketController)
        C++: virtual void SetSocketController(vtkSocketController *)
        
        When this filter is being used in client-server mode, this is the
        controller used to communicate between client and server.  Client
        should not set the other controller.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DIRECTED_OUTPUT = ...
    UNDIRECTED_OUTPUT = ...
    USE_INPUT_TYPE = ...
    __dict__ = ...
    __vtkname__ = ...


