"""
This type stub file was generated by pyright.
"""

from .vtkPeriodicFilter import vtkPeriodicFilter

class vtkAngularPeriodicFilter(vtkPeriodicFilter):
    """
    vtkAngularPeriodicFilter - A filter to produce mapped angular
    periodic multiblock dataset from a single block, by rotation.
    
    Superclass: vtkPeriodicFilter
    
    Generate angular periodic dataset by rotating points, vectors and
    tensors data arrays from an original data array. The generated
    dataset is of the same type than the input (float or double). To
    compute the rotation this filter needs i) a number of periods, which
    can be the maximum, i.e. a full period, ii) an angle, which can be
    fetched from a field data array in radian or directly in degrees;
    iii) the axis (X, Y or Z) and the center of rotation. Point
    coordinates are transformed, as well as all vectors (3-components)
    and tensors (9 components) in points and cell data arrays. The
    generated multiblock will have the same tree architecture than the
    input, except transformed leaves are replaced by a
    vtkMultipieceDataSet. Supported input leaf dataset type are:
    vtkPolyData, vtkStructuredGrid and vtkUnstructuredGrid. Other data
    objects are rotated using the transform filter (at a high cost!).
    """
    def ComputeRotationsOnTheFlyOff(self):
        """
        V.ComputeRotationsOnTheFlyOff()
        C++: virtual void ComputeRotationsOnTheFlyOff()
        
        Set/Get whether the rotated array values should be computed
        on-the-fly (default), which is compute-intensive, or the arrays
        should be explicitly generated and stored, at the cost of using
        more memory.
        """
        ...
    
    def ComputeRotationsOnTheFlyOn(self):
        """
        V.ComputeRotationsOnTheFlyOn()
        C++: virtual void ComputeRotationsOnTheFlyOn()
        
        Set/Get whether the rotated array values should be computed
        on-the-fly (default), which is compute-intensive, or the arrays
        should be explicitly generated and stored, at the cost of using
        more memory.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set/Get Rotation Center
        """
        ...
    
    def GetComputeRotationsOnTheFly(self):
        """
        V.GetComputeRotationsOnTheFly() -> bool
        C++: virtual bool GetComputeRotationsOnTheFly()
        
        Set/Get whether the rotated array values should be computed
        on-the-fly (default), which is compute-intensive, or the arrays
        should be explicitly generated and stored, at the cost of using
        more memory.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRotationAngle(self):
        """
        V.GetRotationAngle() -> float
        C++: virtual double GetRotationAngle()
        
        Set/Get Rotation angle, in degrees. Used only with
        VTK_ROTATION_MODE_DIRECT_ANGLE. Default is 180.
        """
        ...
    
    def GetRotationArrayName(self):
        """
        V.GetRotationArrayName() -> string
        C++: virtual char *GetRotationArrayName()
        
        Set/Get Name of array to get the angle from. Used only with
        VTK_ROTATION_MODE_ARRAY_VALUE.
        """
        ...
    
    def GetRotationAxis(self):
        """
        V.GetRotationAxis() -> int
        C++: virtual int GetRotationAxis()
        
        Set/Get Rotation Axis, 0 for X, 1 for Y, 2 for Z
        """
        ...
    
    def GetRotationAxisMaxValue(self):
        """
        V.GetRotationAxisMaxValue() -> int
        C++: virtual int GetRotationAxisMaxValue()
        
        Set/Get Rotation Axis, 0 for X, 1 for Y, 2 for Z
        """
        ...
    
    def GetRotationAxisMinValue(self):
        """
        V.GetRotationAxisMinValue() -> int
        C++: virtual int GetRotationAxisMinValue()
        
        Set/Get Rotation Axis, 0 for X, 1 for Y, 2 for Z
        """
        ...
    
    def GetRotationMode(self):
        """
        V.GetRotationMode() -> int
        C++: virtual int GetRotationMode()
        
        Set/Get The rotation mode. VTK_ROTATION_MODE_DIRECT_ANGLE to
        specify an angle value (default), VTK_ROTATION_MODE_ARRAY_VALUE
        to use value from an array in the input dataset.
        """
        ...
    
    def GetRotationModeMaxValue(self):
        """
        V.GetRotationModeMaxValue() -> int
        C++: virtual int GetRotationModeMaxValue()
        
        Set/Get The rotation mode. VTK_ROTATION_MODE_DIRECT_ANGLE to
        specify an angle value (default), VTK_ROTATION_MODE_ARRAY_VALUE
        to use value from an array in the input dataset.
        """
        ...
    
    def GetRotationModeMinValue(self):
        """
        V.GetRotationModeMinValue() -> int
        C++: virtual int GetRotationModeMinValue()
        
        Set/Get The rotation mode. VTK_ROTATION_MODE_DIRECT_ANGLE to
        specify an angle value (default), VTK_ROTATION_MODE_ARRAY_VALUE
        to use value from an array in the input dataset.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAngularPeriodicFilter
        C++: vtkAngularPeriodicFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAngularPeriodicFilter
        C++: static vtkAngularPeriodicFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set/Get Rotation Center
        """
        ...
    
    def SetComputeRotationsOnTheFly(self, bool):
        """
        V.SetComputeRotationsOnTheFly(bool)
        C++: virtual void SetComputeRotationsOnTheFly(bool _arg)
        
        Set/Get whether the rotated array values should be computed
        on-the-fly (default), which is compute-intensive, or the arrays
        should be explicitly generated and stored, at the cost of using
        more memory.
        """
        ...
    
    def SetRotationAngle(self, p_float):
        """
        V.SetRotationAngle(float)
        C++: virtual void SetRotationAngle(double _arg)
        
        Set/Get Rotation angle, in degrees. Used only with
        VTK_ROTATION_MODE_DIRECT_ANGLE. Default is 180.
        """
        ...
    
    def SetRotationArrayName(self, string):
        """
        V.SetRotationArrayName(string)
        C++: virtual void SetRotationArrayName(const char *_arg)
        
        Set/Get Name of array to get the angle from. Used only with
        VTK_ROTATION_MODE_ARRAY_VALUE.
        """
        ...
    
    def SetRotationAxis(self, p_int):
        """
        V.SetRotationAxis(int)
        C++: virtual void SetRotationAxis(int _arg)
        
        Set/Get Rotation Axis, 0 for X, 1 for Y, 2 for Z
        """
        ...
    
    def SetRotationAxisToX(self):
        """
        V.SetRotationAxisToX()
        C++: void SetRotationAxisToX()
        
        Set/Get Rotation Axis, 0 for X, 1 for Y, 2 for Z
        """
        ...
    
    def SetRotationAxisToY(self):
        """
        V.SetRotationAxisToY()
        C++: void SetRotationAxisToY()
        
        Set/Get Rotation Axis, 0 for X, 1 for Y, 2 for Z
        """
        ...
    
    def SetRotationAxisToZ(self):
        """
        V.SetRotationAxisToZ()
        C++: void SetRotationAxisToZ()
        
        Set/Get Rotation Axis, 0 for X, 1 for Y, 2 for Z
        """
        ...
    
    def SetRotationMode(self, p_int):
        """
        V.SetRotationMode(int)
        C++: virtual void SetRotationMode(int _arg)
        
        Set/Get The rotation mode. VTK_ROTATION_MODE_DIRECT_ANGLE to
        specify an angle value (default), VTK_ROTATION_MODE_ARRAY_VALUE
        to use value from an array in the input dataset.
        """
        ...
    
    def SetRotationModeToArrayValue(self):
        """
        V.SetRotationModeToArrayValue()
        C++: void SetRotationModeToArrayValue()
        
        Set/Get The rotation mode. VTK_ROTATION_MODE_DIRECT_ANGLE to
        specify an angle value (default), VTK_ROTATION_MODE_ARRAY_VALUE
        to use value from an array in the input dataset.
        """
        ...
    
    def SetRotationModeToDirectAngle(self):
        """
        V.SetRotationModeToDirectAngle()
        C++: void SetRotationModeToDirectAngle()
        
        Set/Get The rotation mode. VTK_ROTATION_MODE_DIRECT_ANGLE to
        specify an angle value (default), VTK_ROTATION_MODE_ARRAY_VALUE
        to use value from an array in the input dataset.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


