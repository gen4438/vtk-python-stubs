"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel

class vtkPKdTree(__vtkmodules_vtkCommonDataModel.vtkKdTree):
    """
    vtkPKdTree - Build a k-d tree decomposition of a list of points.
    
    Superclass: vtkKdTree
    
    Build, in parallel, a k-d tree decomposition of one or more
         vtkDataSets distributed across processors.  We assume each
         process has read in one portion of a large distributed data set.
         When done, each process has access to the k-d tree structure,
         can obtain information about which process contains
         data for each spatial region, and can depth sort the spatial
         regions.
    
    
         This class can also assign spatial regions to processors, based
         on one of several region assignment schemes.  By default
         a contiguous, convex region is assigned to each process. 
    Several
         queries return information about how many and what cells I have
         that lie in a region assigned to another process.
    
    @sa
         vtkKdTree
    """
    def AssignRegions(self, *int, **kwargs):
        """
        V.AssignRegions([int, ...], int) -> int
        C++: int AssignRegions(int *map, int numRegions)
        
        Assign spatial regions to processes via a user defined map. The
        user-supplied map is indexed by region ID, and provides a process
        ID for each region.
        """
        ...
    
    def AssignRegionsContiguous(self):
        """
        V.AssignRegionsContiguous() -> int
        C++: int AssignRegionsContiguous()
        
        Let the PKdTree class assign a process to each region by
        assigning contiguous sets of spatial regions to each process. 
        The set of regions assigned to each process will always have a
        union that is a convex space (a box). If the k-d tree has not yet
        been built, the regions will be assigned after BuildLocator
        executes.
        """
        ...
    
    def AssignRegionsRoundRobin(self):
        """
        V.AssignRegionsRoundRobin() -> int
        C++: int AssignRegionsRoundRobin()
        
        Let the PKdTree class assign a process to each region in a round
        robin fashion.  If the k-d tree has not yet been built, the
        regions will be assigned after BuildLocator executes.
        """
        ...
    
    def BuildLocator(self):
        """
        V.BuildLocator()
        C++: void BuildLocator() override;
        
        Build the spatial decomposition.  Call this explicitly after
        changing any parameters affecting the build of the tree.  It must
        be called by all processes in the parallel application, or it
        will hang.
        """
        ...
    
    def CreateGlobalDataArrayBounds(self):
        """
        V.CreateGlobalDataArrayBounds() -> int
        C++: int CreateGlobalDataArrayBounds()
        
        A convenience function which compiles the global bounds of the
        data arrays across processes. These bounds can be accessed with
        "GetCellArrayGlobalRange" and "GetPointArrayGlobalRange". This
        method must be called by all processes or it will hang. Returns 1
        on error, 0 when no error.
        """
        ...
    
    def CreateProcessCellCountData(self):
        """
        V.CreateProcessCellCountData() -> int
        C++: int CreateProcessCellCountData()
        
        Create tables of counts of cells per process per region. These
        tables can be accessed with queries like "HasData",
        "GetProcessCellCountForRegion", and so on. You must have called
        BuildLocator() beforehand.  This method must be called by all
        processes or it will hang. Returns 1 on error, 0 when no error.
        """
        ...
    
    def GetAllProcessesBorderingOnPoint(self, p_float, p_float_1, p_float_2, vtkIntArray):
        """
        V.GetAllProcessesBorderingOnPoint(float, float, float,
            vtkIntArray)
        C++: void GetAllProcessesBorderingOnPoint(float x, float y,
            float z, vtkIntArray *list)
        
        The k-d tree spatial regions have been assigned to processes.
        Given a point on the boundary of one of the regions, this method
        creates a list of all processes whose region boundaries include
        that point.  This may be required when looking for processes that
        have cells adjacent to the cells of a given process.
        """
        ...
    
    def GetCellArrayGlobalRange(self, string, p_float=..., p_float=...):
        """
        V.GetCellArrayGlobalRange(string, [float, float]) -> int
        C++: int GetCellArrayGlobalRange(const char *name,
            double range[2])
        V.GetCellArrayGlobalRange(int, [float, float]) -> int
        C++: int GetCellArrayGlobalRange(int arrayIndex, double range[2])
        """
        ...
    
    def GetCellListsForProcessRegions(self, p_int, p_int_1, vtkIdList, vtkIdList_1):
        """
        V.GetCellListsForProcessRegions(int, int, vtkIdList, vtkIdList)
            -> int
        C++: vtkIdType GetCellListsForProcessRegions(int ProcessId,
            int set, vtkIdList *inRegionCells, vtkIdList *onBoundaryCells)
        V.GetCellListsForProcessRegions(int, vtkDataSet, vtkIdList,
            vtkIdList) -> int
        C++: vtkIdType GetCellListsForProcessRegions(int ProcessId,
            vtkDataSet *set, vtkIdList *inRegionCells,
            vtkIdList *onBoundaryCells)
        V.GetCellListsForProcessRegions(int, vtkIdList, vtkIdList) -> int
        C++: vtkIdType GetCellListsForProcessRegions(int ProcessId,
            vtkIdList *inRegionCells, vtkIdList *onBoundaryCells)
        
        After regions have been assigned to processes, I may want to know
        which cells I have that are in the regions assigned to a
        particular process.
        
        * This method takes a process ID and two vtkIdLists.  It
        * writes to the first list the IDs of the cells
        * contained in the process' regions.  (That is, their cell
        * centroid is contained in the region.)  To the second list it
        * write the IDs of the cells which intersect the process' regions
        * but whose cell centroid lies elsewhere.
        
        * The total number of cell IDs written to both lists is returned.
        * Either list pointer passed in can be nullptr, and it will be
          ignored.
        * If there are multiple data sets, you must specify which data
          set
        * you wish cell IDs for.
        
        * The caller should delete these two lists when done.  This
          method
        * uses the cell lists created in vtkKdTree::CreateCellLists().
        * If the cell lists for the process' regions do not exist, this
        * method will first build the cell lists for all regions by
          calling
        * CreateCellLists().  You must remember to DeleteCellLists() when
        * done with all calls to this method, as cell lists can require a
        * great deal of memory.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set/Get the communicator object
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard type and print methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def GetPointArrayGlobalRange(self, string, p_float=..., p_float=...):
        """
        V.GetPointArrayGlobalRange(string, [float, float]) -> int
        C++: int GetPointArrayGlobalRange(const char *name,
            double range[2])
        V.GetPointArrayGlobalRange(int, [float, float]) -> int
        C++: int GetPointArrayGlobalRange(int arrayIndex, double range[2])
        """
        ...
    
    def GetProcessAssignedToRegion(self, p_int):
        """
        V.GetProcessAssignedToRegion(int) -> int
        C++: int GetProcessAssignedToRegion(int regionId)
        
        Returns the ID of the process assigned to the region.
        """
        ...
    
    def GetProcessCellCountForRegion(self, p_int, p_int_1):
        """
        V.GetProcessCellCountForRegion(int, int) -> int
        C++: int GetProcessCellCountForRegion(int processId, int regionId)
        
        Returns the number of cells the specified process has in the
        specified region.
        """
        ...
    
    def GetProcessesCellCountForRegion(self, p_int, *int, **kwargs):
        """
        V.GetProcessesCellCountForRegion(int, [int, ...], int) -> int
        C++: int GetProcessesCellCountForRegion(int regionId, int *count,
            int len)
        
        Writes the number of cells each process has for the region to the
        supplied list of length len.  Returns the number of cell counts
        written.  The order of the cell counts corresponds to the order
        of process IDs in the process list returned by
        GetProcessListForRegion.
        """
        ...
    
    def GetProcessListForRegion(self, p_int, vtkIntArray):
        """
        V.GetProcessListForRegion(int, vtkIntArray) -> int
        C++: int GetProcessListForRegion(int regionId,
            vtkIntArray *processes)
        
        Adds the list of processes having data for the given region to
        the supplied list, returns the number of processes added.
        """
        ...
    
    def GetRegionAssignment(self):
        """
        V.GetRegionAssignment() -> int
        C++: virtual int GetRegionAssignment()
        
        The PKdTree class can assign spatial regions to processors after
        building the k-d tree, using one of several partitioning
        criteria. These functions Set/Get whether this assignment is
        computed. The default is "Off", no assignment is computed.   If
        "On", and no assignment scheme is specified, contiguous
        assignment will be computed.  Specifying an assignment scheme
        (with AssignRegions*()) automatically turns on RegionAssignment.
        """
        ...
    
    def GetRegionAssignmentList(self, p_int, vtkIntArray):
        """
        V.GetRegionAssignmentList(int, vtkIntArray) -> int
        C++: int GetRegionAssignmentList(int procId, vtkIntArray *list)
        
        Writes the list of region IDs assigned to the specified process. 
        Regions IDs start at 0 and increase by 1 from there. Returns the
        number of regions in the list.
        """
        ...
    
    def GetRegionAssignmentMap(self):
        """
        V.GetRegionAssignmentMap() -> (int, ...)
        C++: const int *GetRegionAssignmentMap()
        
        Returns the region assignment map where index is the region and
        value is the processes id for that region.
        """
        ...
    
    def GetRegionAssignmentMapLength(self):
        """
        V.GetRegionAssignmentMapLength() -> int
        C++: int GetRegionAssignmentMapLength()
        
        / Returns the number of regions in the region assignment map.
        """
        ...
    
    def GetRegionListForProcess(self, p_int, vtkIntArray):
        """
        V.GetRegionListForProcess(int, vtkIntArray) -> int
        C++: int GetRegionListForProcess(int processId,
            vtkIntArray *regions)
        
        Adds the region IDs for which this process has data to the
        supplied vtkIntArray.  Returns the number of regions.
        """
        ...
    
    def GetRegionsCellCountForProcess(self, p_int, *int, **kwargs):
        """
        V.GetRegionsCellCountForProcess(int, [int, ...], int) -> int
        C++: int GetRegionsCellCountForProcess(int ProcessId, int *count,
            int len)
        
        Writes to the supplied integer array the number of cells this
        process has for each region.  Returns the number of cell counts
        written.  The order of the cell counts corresponds to the order
        of region IDs in the region list returned by
        GetRegionListForProcess.
        """
        ...
    
    def GetTotalNumberOfCells(self):
        """
        V.GetTotalNumberOfCells() -> int
        C++: vtkIdType GetTotalNumberOfCells()
        
        Get the total number of cells distributed across the data files
        read by all processes.  You must have called BuildLocator before
        calling this method.
        """
        ...
    
    def GetTotalProcessesInRegion(self, p_int):
        """
        V.GetTotalProcessesInRegion(int) -> int
        C++: int GetTotalProcessesInRegion(int regionId)
        
        Returns the total number of processes that have data falling
        within this spatial region.
        """
        ...
    
    def GetTotalRegionsForProcess(self, p_int):
        """
        V.GetTotalRegionsForProcess(int) -> int
        C++: int GetTotalRegionsForProcess(int processId)
        
        Returns the total number of spatial regions that a given process
        has data for.
        """
        ...
    
    def HasData(self, p_int, p_int_1):
        """
        V.HasData(int, int) -> int
        C++: int HasData(int processId, int regionId)
        
        Returns 1 if the process has data for the given region, 0
        otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard type and print methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard type and print methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPKdTree
        C++: vtkPKdTree *NewInstance()
        
        Standard type and print methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPKdTree
        C++: static vtkPKdTree *SafeDownCast(vtkObjectBase *o)
        
        Standard type and print methods.
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: void SetController(vtkMultiProcessController *c)
        
        Set/Get the communicator object
        """
        ...
    
    def ViewOrderAllProcessesFromPosition(self, , vtkIntArray):
        """
        V.ViewOrderAllProcessesFromPosition((float, float, float),
            vtkIntArray) -> int
        C++: int ViewOrderAllProcessesFromPosition(
            const double cameraPosition[3], vtkIntArray *orderedList)
        
        Return a list of all processes in order from front to back given
        a camera position.  Use this to do visibility sorts in
        perspective projection mode. `orderedList' will be resized to the
        number of processes. The return value is the number of processes.
        \pre orderedList_exists: orderedList!=0
        """
        ...
    
    def ViewOrderAllProcessesInDirection(self, , vtkIntArray):
        """
        V.ViewOrderAllProcessesInDirection((float, float, float),
            vtkIntArray) -> int
        C++: int ViewOrderAllProcessesInDirection(
            const double directionOfProjection[3],
            vtkIntArray *orderedList)
        
        Return a list of all processes in order from front to back given
        a vector direction of projection.  Use this to do visibility
        sorts in parallel projection mode. `orderedList' will be resized
        to the number of processes. The return value is the number of
        processes.
        \pre orderedList_exists: orderedList!=0
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


