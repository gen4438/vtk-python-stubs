"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkUnstructuredGridGhostCellsGenerator(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkUnstructuredGridGhostCellsGenerator - Builds ghost cells for a
    distributed unstructured grid dataset.
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    This filter is a serial implementation of the
    vtkPUnstructuredGridGhostCellsGenerator filter with the intent that
    it can be used in non-MPI builds. Both the serial and parallel
    version act as a "pass-through" filter when run in serial. The
    combination of these filters serves to unify the API for serial and
    parallel builds.
    
    @sa
    vtkPDistributedDataFilter vtkPUnstructuredGridGhostCellsGenerator
    """
    def BuildIfRequiredOff(self):
        """
        V.BuildIfRequiredOff()
        C++: virtual void BuildIfRequiredOff()
        
        Specify if the filter must generate the ghost cells only if
        required by the pipeline. If false, ghost cells are computed even
        if they are not required. Default is TRUE.
        """
        ...
    
    def BuildIfRequiredOn(self):
        """
        V.BuildIfRequiredOn()
        C++: virtual void BuildIfRequiredOn()
        
        Specify if the filter must generate the ghost cells only if
        required by the pipeline. If false, ghost cells are computed even
        if they are not required. Default is TRUE.
        """
        ...
    
    def GetBuildIfRequired(self):
        """
        V.GetBuildIfRequired() -> bool
        C++: virtual bool GetBuildIfRequired()
        
        Specify if the filter must generate the ghost cells only if
        required by the pipeline. If false, ghost cells are computed even
        if they are not required. Default is TRUE.
        """
        ...
    
    def GetGlobalCellIdsArrayName(self):
        """
        V.GetGlobalCellIdsArrayName() -> string
        C++: virtual char *GetGlobalCellIdsArrayName()
        
        Specify the name of the global cell ids data array if the
        GlobalIds attribute array is not set. Default is "GlobalNodeIds".
        """
        ...
    
    def GetGlobalPointIdsArrayName(self):
        """
        V.GetGlobalPointIdsArrayName() -> string
        C++: virtual char *GetGlobalPointIdsArrayName()
        
        Specify the name of the global point ids data array if the
        GlobalIds attribute array is not set. Default is "GlobalNodeIds".
        """
        ...
    
    def GetHasGlobalCellIds(self):
        """
        V.GetHasGlobalCellIds() -> bool
        C++: virtual bool GetHasGlobalCellIds()
        
        Specify if the data has global cell ids. If more than one layer
        of ghost cells is needed, global cell ids are necessary. If
        global cell ids are not provided, they will be computed
        internally. If false, global cell ids will be computed, then
        deleted afterwards. Default is FALSE.
        """
        ...
    
    def GetMinimumNumberOfGhostLevels(self):
        """
        V.GetMinimumNumberOfGhostLevels() -> int
        C++: virtual int GetMinimumNumberOfGhostLevels()
        
        When BuildIfRequired is `false`, this can be used to set the
        minimum number of ghost levels to generate. Note, if the
        downstream pipeline requests more ghost levels than the number
        specified here, then the filter will generate those extra ghost
        levels as needed. Accepted values are in the interval [1,
        VTK_INT_MAX].
        """
        ...
    
    def GetMinimumNumberOfGhostLevelsMaxValue(self):
        """
        V.GetMinimumNumberOfGhostLevelsMaxValue() -> int
        C++: virtual int GetMinimumNumberOfGhostLevelsMaxValue()
        
        When BuildIfRequired is `false`, this can be used to set the
        minimum number of ghost levels to generate. Note, if the
        downstream pipeline requests more ghost levels than the number
        specified here, then the filter will generate those extra ghost
        levels as needed. Accepted values are in the interval [1,
        VTK_INT_MAX].
        """
        ...
    
    def GetMinimumNumberOfGhostLevelsMinValue(self):
        """
        V.GetMinimumNumberOfGhostLevelsMinValue() -> int
        C++: virtual int GetMinimumNumberOfGhostLevelsMinValue()
        
        When BuildIfRequired is `false`, this can be used to set the
        minimum number of ghost levels to generate. Note, if the
        downstream pipeline requests more ghost levels than the number
        specified here, then the filter will generate those extra ghost
        levels as needed. Accepted values are in the interval [1,
        VTK_INT_MAX].
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseGlobalPointIds(self):
        """
        V.GetUseGlobalPointIds() -> bool
        C++: virtual bool GetUseGlobalPointIds()
        
        Specify if the filter must take benefit of global point ids if
        they exist. If false, point coordinates are used. Default is
        TRUE.
        """
        ...
    
    def HasGlobalCellIdsOff(self):
        """
        V.HasGlobalCellIdsOff()
        C++: virtual void HasGlobalCellIdsOff()
        
        Specify if the data has global cell ids. If more than one layer
        of ghost cells is needed, global cell ids are necessary. If
        global cell ids are not provided, they will be computed
        internally. If false, global cell ids will be computed, then
        deleted afterwards. Default is FALSE.
        """
        ...
    
    def HasGlobalCellIdsOn(self):
        """
        V.HasGlobalCellIdsOn()
        C++: virtual void HasGlobalCellIdsOn()
        
        Specify if the data has global cell ids. If more than one layer
        of ghost cells is needed, global cell ids are necessary. If
        global cell ids are not provided, they will be computed
        internally. If false, global cell ids will be computed, then
        deleted afterwards. Default is FALSE.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUnstructuredGridGhostCellsGenerator
        C++: vtkUnstructuredGridGhostCellsGenerator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkUnstructuredGridGhostCellsGenerator
        C++: static vtkUnstructuredGridGhostCellsGenerator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBuildIfRequired(self, bool):
        """
        V.SetBuildIfRequired(bool)
        C++: virtual void SetBuildIfRequired(bool _arg)
        
        Specify if the filter must generate the ghost cells only if
        required by the pipeline. If false, ghost cells are computed even
        if they are not required. Default is TRUE.
        """
        ...
    
    def SetGlobalCellIdsArrayName(self, string):
        """
        V.SetGlobalCellIdsArrayName(string)
        C++: virtual void SetGlobalCellIdsArrayName(const char *_arg)
        
        Specify the name of the global cell ids data array if the
        GlobalIds attribute array is not set. Default is "GlobalNodeIds".
        """
        ...
    
    def SetGlobalPointIdsArrayName(self, string):
        """
        V.SetGlobalPointIdsArrayName(string)
        C++: virtual void SetGlobalPointIdsArrayName(const char *_arg)
        
        Specify the name of the global point ids data array if the
        GlobalIds attribute array is not set. Default is "GlobalNodeIds".
        """
        ...
    
    def SetHasGlobalCellIds(self, bool):
        """
        V.SetHasGlobalCellIds(bool)
        C++: virtual void SetHasGlobalCellIds(bool _arg)
        
        Specify if the data has global cell ids. If more than one layer
        of ghost cells is needed, global cell ids are necessary. If
        global cell ids are not provided, they will be computed
        internally. If false, global cell ids will be computed, then
        deleted afterwards. Default is FALSE.
        """
        ...
    
    def SetMinimumNumberOfGhostLevels(self, p_int):
        """
        V.SetMinimumNumberOfGhostLevels(int)
        C++: virtual void SetMinimumNumberOfGhostLevels(int _arg)
        
        When BuildIfRequired is `false`, this can be used to set the
        minimum number of ghost levels to generate. Note, if the
        downstream pipeline requests more ghost levels than the number
        specified here, then the filter will generate those extra ghost
        levels as needed. Accepted values are in the interval [1,
        VTK_INT_MAX].
        """
        ...
    
    def SetUseGlobalPointIds(self, bool):
        """
        V.SetUseGlobalPointIds(bool)
        C++: virtual void SetUseGlobalPointIds(bool _arg)
        
        Specify if the filter must take benefit of global point ids if
        they exist. If false, point coordinates are used. Default is
        TRUE.
        """
        ...
    
    def UseGlobalPointIdsOff(self):
        """
        V.UseGlobalPointIdsOff()
        C++: virtual void UseGlobalPointIdsOff()
        
        Specify if the filter must take benefit of global point ids if
        they exist. If false, point coordinates are used. Default is
        TRUE.
        """
        ...
    
    def UseGlobalPointIdsOn(self):
        """
        V.UseGlobalPointIdsOn()
        C++: virtual void UseGlobalPointIdsOn()
        
        Specify if the filter must take benefit of global point ids if
        they exist. If false, point coordinates are used. Default is
        TRUE.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


