"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPeriodicFilter(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkPeriodicFilter - A filter to produce mapped  periodic multiblock
    dataset from a single block
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    Generate periodic dataset by transforming points, vectors, tensors
    data arrays from an original data array. The generated dataset is of
    the same type than the input (float or double). This is an abstract
    class which do not implement the actual transformation. Point
    coordinates are transformed, as well as all vectors (3-components)
    and tensors (9 components) in points and cell data arrays. The
    generated multiblock will have the same tree architecture than the
    input, except transformed leaves are replaced by a
    vtkMultipieceDataSet. Supported input leaf dataset type are:
    vtkPolyData, vtkStructuredGrid and vtkUnstructuredGrid. Other data
    objects are transformed using the transform filter (at a high cost!).
    """
    def AddIndex(self, p_int):
        """
        V.AddIndex(int)
        C++: virtual void AddIndex(unsigned int index)
        
        Select the periodic pieces indices. Each node in the multi -
        block tree is identified by an index. The index can be obtained
        by performing a preorder traversal of the tree (including empty
        nodes). eg. A(B (D, E), C(F, G)). Inorder traversal yields: A, B,
        D, E, C, F, G Index of A is 0, while index of C is 4.
        """
        ...
    
    def GetIterationMode(self):
        """
        V.GetIterationMode() -> int
        C++: virtual int GetIterationMode()
        
        Set/Get Iteration mode. VTK_ITERATION_MODE_DIRECT_NB to specify
        the number of periods, VTK_ITERATION_MODE_MAX to generate a full
        period (default).
        """
        ...
    
    def GetIterationModeMaxValue(self):
        """
        V.GetIterationModeMaxValue() -> int
        C++: virtual int GetIterationModeMaxValue()
        
        Set/Get Iteration mode. VTK_ITERATION_MODE_DIRECT_NB to specify
        the number of periods, VTK_ITERATION_MODE_MAX to generate a full
        period (default).
        """
        ...
    
    def GetIterationModeMinValue(self):
        """
        V.GetIterationModeMinValue() -> int
        C++: virtual int GetIterationModeMinValue()
        
        Set/Get Iteration mode. VTK_ITERATION_MODE_DIRECT_NB to specify
        the number of periods, VTK_ITERATION_MODE_MAX to generate a full
        period (default).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPeriods(self):
        """
        V.GetNumberOfPeriods() -> int
        C++: virtual int GetNumberOfPeriods()
        
        Set/Get Number of periods. Used only with
        ITERATION_MODE_DIRECT_NB.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPeriodicFilter
        C++: vtkPeriodicFilter *NewInstance()
        """
        ...
    
    def RemoveAllIndices(self):
        """
        V.RemoveAllIndices()
        C++: virtual void RemoveAllIndices()
        
        Clear selected indices tree
        """
        ...
    
    def RemoveIndex(self, p_int):
        """
        V.RemoveIndex(int)
        C++: virtual void RemoveIndex(unsigned int index)
        
        Remove an index from selected indices tress
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPeriodicFilter
        C++: static vtkPeriodicFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetIterationMode(self, p_int):
        """
        V.SetIterationMode(int)
        C++: virtual void SetIterationMode(int _arg)
        
        Set/Get Iteration mode. VTK_ITERATION_MODE_DIRECT_NB to specify
        the number of periods, VTK_ITERATION_MODE_MAX to generate a full
        period (default).
        """
        ...
    
    def SetIterationModeToDirectNb(self):
        """
        V.SetIterationModeToDirectNb()
        C++: void SetIterationModeToDirectNb()
        
        Set/Get Iteration mode. VTK_ITERATION_MODE_DIRECT_NB to specify
        the number of periods, VTK_ITERATION_MODE_MAX to generate a full
        period (default).
        """
        ...
    
    def SetIterationModeToMax(self):
        """
        V.SetIterationModeToMax()
        C++: void SetIterationModeToMax()
        
        Set/Get Iteration mode. VTK_ITERATION_MODE_DIRECT_NB to specify
        the number of periods, VTK_ITERATION_MODE_MAX to generate a full
        period (default).
        """
        ...
    
    def SetNumberOfPeriods(self, p_int):
        """
        V.SetNumberOfPeriods(int)
        C++: virtual void SetNumberOfPeriods(int _arg)
        
        Set/Get Number of periods. Used only with
        ITERATION_MODE_DIRECT_NB.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


