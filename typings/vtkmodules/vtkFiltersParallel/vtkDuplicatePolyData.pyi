"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDuplicatePolyData(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkDuplicatePolyData - For distributed tiled displays.
    
    Superclass: vtkPolyDataAlgorithm
    
    This filter collects poly data and duplicates it on every node.
    Converts data parallel so every node has a complete copy of the data.
    The filter is used at the end of a pipeline for driving a tiled
    display.
    """
    def GetClientFlag(self):
        """
        V.GetClientFlag() -> int
        C++: virtual int GetClientFlag()
        
        This duplicate filter works in client server mode when this
        controller is set.  We have a client flag to differentiate the
        client and server because the socket controller is odd: Proth
        processes think their id is 0.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        By default this filter uses the global controller, but this
        method can be used to set another instead.
        """
        ...
    
    def GetMemorySize(self):
        """
        V.GetMemorySize() -> int
        C++: virtual unsigned long GetMemorySize()
        
        This returns to size of the output (on this process). This method
        is not really used.  It is needed to have the same API as
        vtkCollectPolyData.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSocketController(self):
        """
        V.GetSocketController() -> vtkSocketController
        C++: vtkSocketController *GetSocketController()
        
        This duplicate filter works in client server mode when this
        controller is set.  We have a client flag to differentiate the
        client and server because the socket controller is odd: Proth
        processes think their id is 0.
        """
        ...
    
    def GetSynchronous(self):
        """
        V.GetSynchronous() -> int
        C++: virtual vtkTypeBool GetSynchronous()
        
        This flag causes sends and receives to be matched. When this flag
        is off, two sends occur then two receives. I want to see if it
        makes a difference in performance. The flag is on by default.
        """
        ...
    
    def InitializeSchedule(self, p_int):
        """
        V.InitializeSchedule(int)
        C++: void InitializeSchedule(int numProcs)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDuplicatePolyData
        C++: vtkDuplicatePolyData *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDuplicatePolyData
        C++: static vtkDuplicatePolyData *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClientFlag(self, p_int):
        """
        V.SetClientFlag(int)
        C++: virtual void SetClientFlag(int _arg)
        
        This duplicate filter works in client server mode when this
        controller is set.  We have a client flag to differentiate the
        client and server because the socket controller is odd: Proth
        processes think their id is 0.
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *)
        
        By default this filter uses the global controller, but this
        method can be used to set another instead.
        """
        ...
    
    def SetSocketController(self, vtkSocketController):
        """
        V.SetSocketController(vtkSocketController)
        C++: void SetSocketController(vtkSocketController *controller)
        
        This duplicate filter works in client server mode when this
        controller is set.  We have a client flag to differentiate the
        client and server because the socket controller is odd: Proth
        processes think their id is 0.
        """
        ...
    
    def SetSynchronous(self, p_int):
        """
        V.SetSynchronous(int)
        C++: virtual void SetSynchronous(vtkTypeBool _arg)
        
        This flag causes sends and receives to be matched. When this flag
        is off, two sends occur then two receives. I want to see if it
        makes a difference in performance. The flag is on by default.
        """
        ...
    
    def SynchronousOff(self):
        """
        V.SynchronousOff()
        C++: virtual void SynchronousOff()
        
        This flag causes sends and receives to be matched. When this flag
        is off, two sends occur then two receives. I want to see if it
        makes a difference in performance. The flag is on by default.
        """
        ...
    
    def SynchronousOn(self):
        """
        V.SynchronousOn()
        C++: virtual void SynchronousOn()
        
        This flag causes sends and receives to be matched. When this flag
        is off, two sends occur then two receives. I want to see if it
        makes a difference in performance. The flag is on by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


