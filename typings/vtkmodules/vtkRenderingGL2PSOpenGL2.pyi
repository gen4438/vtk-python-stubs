"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingOpenGL2 as __vtkmodules_vtkRenderingOpenGL2

class vtkOpenGLGL2PSHelperImpl(__vtkmodules_vtkRenderingOpenGL2.vtkOpenGLGL2PSHelper):
    """
    vtkOpenGLGL2PSHelperImpl - vtkOpenGLGL2PSHelper override
    implementation.
    
    Superclass: vtkOpenGLGL2PSHelper
    """
    def Draw3DPath(self, vtkPath, vtkMatrix4x4, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Draw3DPath(vtkPath, vtkMatrix4x4, [float, float, float], [int,
            int, int, int], vtkRenderer, string)
        C++: void Draw3DPath(vtkPath *path, vtkMatrix4x4 *actorMatrix,
            double rasterPos[3], unsigned char actorColor[4],
            vtkRenderer *ren, const char *label=nullptr) override;
        
        Transform the path using the actor's matrix and current GL state,
        then draw it to GL2PS. The label string is inserted into the
        GL2PS output at the beginning of the path specification as a
        comment on supported backends.
        """
        ...
    
    def DrawImage(self, vtkImageData, p_float=..., p_float=..., p_float=...):
        """
        V.DrawImage(vtkImageData, [float, float, float])
        C++: void DrawImage(vtkImageData *image, double pos[3]) override;
        
        Draw the image at pos. Image must be RGB or RGBA with float
        scalars.
        """
        ...
    
    def DrawPath(self, vtkPath, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.DrawPath(vtkPath, [float, float, float], [float, float], [int,
            int, int, int], [float, float], float, float, string)
        C++: void DrawPath(vtkPath *path, double rasterPos[3],
            double windowPos[2], unsigned char rgba[4],
            double scale[2]=nullptr, double rotateAngle=0.0,
            float strokeWidth=-1, const char *label=nullptr) override;
        
        Generate PS, EPS, or SVG markup from a vtkPath object, and then
        inject it into the output using the gl2psSpecial command. The
        path is translated uniformly in the scene by windowPos. It is
        scaled by scale and rotated counter-clockwise by rotateAngle. The
        rasterPos is in world coordinates and determines clipping and
        depth. If scale is NULL, no scaling is done. If strokeWidth is
        positive, the path will be stroked with the indicated width. If
        zero or negative, the path will be filled (default). The label
        string is inserted into the GL2PS output at the beginning of the
        path specification as a comment on supported backends.
        """
        ...
    
    def DrawString(self, string, vtkTextProperty, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.DrawString(string, vtkTextProperty, [float, float, float],
            float, vtkRenderer)
        C++: void DrawString(const std::string &str,
            vtkTextProperty *tprop, double pos[3], double backgroundDepth,
             vtkRenderer *ren) override;
        
        Format the text in str according to tprop and instruct GL2PS to
        draw it at pixel coordinate pos. Background depth is the z value
        for the background quad, and should be in NDC space. The drawing
        is always done in the overlay plane.
        @sa TextAsPath
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLGL2PSHelperImpl
        C++: vtkOpenGLGL2PSHelperImpl *NewInstance()
        """
        ...
    
    def ProcessTransformFeedback(self, vtkTransformFeedback, vtkRenderer, vtkActor):
        """
        V.ProcessTransformFeedback(vtkTransformFeedback, vtkRenderer,
            vtkActor)
        C++: void ProcessTransformFeedback(vtkTransformFeedback *tfc,
            vtkRenderer *ren, vtkActor *act) override;
        V.ProcessTransformFeedback(vtkTransformFeedback, vtkRenderer,
            [int, int, int, int])
        C++: void ProcessTransformFeedback(vtkTransformFeedback *tfc,
            vtkRenderer *ren, unsigned char col[4]) override;
        V.ProcessTransformFeedback(vtkTransformFeedback, vtkRenderer,
            [float, float, float, float])
        C++: void ProcessTransformFeedback(vtkTransformFeedback *tfc,
            vtkRenderer *ren, float col[4]) override;
        
        Parse the vertex information in tfc and inject primitives into
        GL2PS. ren is used to obtain viewport information to complete the
        vertex transformation into pixel coordinates, and act/col are
        used to color the vertices when tfc does not contain color
        information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLGL2PSHelperImpl
        C++: static vtkOpenGLGL2PSHelperImpl *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
