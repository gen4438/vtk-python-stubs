"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAMRBaseParticlesReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkAMRBaseParticlesReader -  An abstract base class that implements
    all the common functionality for
     all particle readers.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    """
    def FilterLocationOff(self):
        """
        V.FilterLocationOff()
        C++: virtual void FilterLocationOff()
        
        Set & Get for filter location and boolean macro
        """
        ...
    
    def FilterLocationOn(self):
        """
        V.FilterLocationOn()
        C++: virtual void FilterLocationOn()
        
        Set & Get for filter location and boolean macro
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set & Get the multi-process controller.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetFilterLocation(self):
        """
        V.GetFilterLocation() -> int
        C++: virtual vtkTypeBool GetFilterLocation()
        
        Set & Get for filter location and boolean macro
        """
        ...
    
    def GetFrequency(self):
        """
        V.GetFrequency() -> int
        C++: virtual int GetFrequency()
        
        Set & Get the frequency.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfParticleArrays(self):
        """
        V.GetNumberOfParticleArrays() -> int
        C++: int GetNumberOfParticleArrays()
        
        Get the number of particles arrays available in the input.
        """
        ...
    
    def GetParticleArrayName(self, p_int):
        """
        V.GetParticleArrayName(int) -> string
        C++: const char *GetParticleArrayName(int index)
        
        Get the particle array name of the array associated with the
        given index.
        """
        ...
    
    def GetParticleArrayStatus(self, string):
        """
        V.GetParticleArrayStatus(string) -> int
        C++: int GetParticleArrayStatus(const char *name)
        
        Get/Set whether the particle array status.
        """
        ...
    
    def GetParticleDataArraySelection(self):
        """
        V.GetParticleDataArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetParticleDataArraySelection(
            )
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetTotalNumberOfParticles(self):
        """
        V.GetTotalNumberOfParticles() -> int
        C++: virtual int GetTotalNumberOfParticles()
        
        Returns the total number of particles
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRBaseParticlesReader
        C++: vtkAMRBaseParticlesReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRBaseParticlesReader
        C++: static vtkAMRBaseParticlesReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *_arg)
        
        Set & Get the multi-process controller.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *fileName)
        """
        ...
    
    def SetFilterLocation(self, p_int):
        """
        V.SetFilterLocation(int)
        C++: virtual void SetFilterLocation(vtkTypeBool _arg)
        
        Set & Get for filter location and boolean macro
        """
        ...
    
    def SetFrequency(self, p_int):
        """
        V.SetFrequency(int)
        C++: virtual void SetFrequency(int _arg)
        
        Set & Get the frequency.
        """
        ...
    
    def SetMaxLocation(self, p_float, p_float_1, p_float_2):
        """
        V.SetMaxLocation(float, float, float)
        C++: void SetMaxLocation(const double maxx, const double maxy,
            const double maxz)
        
        Sets the max location
        """
        ...
    
    def SetMinLocation(self, p_float, p_float_1, p_float_2):
        """
        V.SetMinLocation(float, float, float)
        C++: void SetMinLocation(const double minx, const double miny,
            const double minz)
        
        Sets the min location
        """
        ...
    
    def SetParticleArrayStatus(self, string, p_int):
        """
        V.SetParticleArrayStatus(string, int)
        C++: void SetParticleArrayStatus(const char *name, int status)
        
        Get/Set whether the particle array status.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRBaseReader(__vtkmodules_vtkCommonExecutionModel.vtkOverlappingAMRAlgorithm):
    """
    vtkAMRBaseReader - An abstract class that encapsulates common
    functionality for all AMR readers.
    
    Superclass: vtkOverlappingAMRAlgorithm
    """
    def EnableCachingOff(self):
        """
        V.EnableCachingOff()
        C++: virtual void EnableCachingOff()
        
        Set/Get Reader caching property
        """
        ...
    
    def EnableCachingOn(self):
        """
        V.EnableCachingOn()
        C++: virtual void EnableCachingOn()
        
        Set/Get Reader caching property
        """
        ...
    
    def GetCellArrayName(self, p_int):
        """
        V.GetCellArrayName(int) -> string
        C++: const char *GetCellArrayName(int index)
        
        Get the name of the point or cell array with the given index in
        the input.
        """
        ...
    
    def GetCellArrayStatus(self, string):
        """
        V.GetCellArrayStatus(string) -> int
        C++: int GetCellArrayStatus(const char *name)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def GetCellDataArraySelection(self):
        """
        V.GetCellDataArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetCellDataArraySelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Set/Get a multiprocess-controller for reading in parallel. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def GetEnableCaching(self):
        """
        V.GetEnableCaching() -> int
        C++: virtual vtkTypeBool GetEnableCaching()
        
        Set/Get Reader caching property
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/Get the filename. Concrete instances of this class must
        implement the SetFileName method accordingly.
        """
        ...
    
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: virtual int GetNumberOfBlocks()
        
        Returns the total number of blocks. Implemented by concrete
        instances.
        """
        ...
    
    def GetNumberOfCellArrays(self):
        """
        V.GetNumberOfCellArrays() -> int
        C++: int GetNumberOfCellArrays()
        
        Get the number of point or cell arrays available in the input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLevels(self):
        """
        V.GetNumberOfLevels() -> int
        C++: virtual int GetNumberOfLevels()
        
        Returns the total number of levels. Implemented by concrete
        instances.
        """
        ...
    
    def GetNumberOfPointArrays(self):
        """
        V.GetNumberOfPointArrays() -> int
        C++: int GetNumberOfPointArrays()
        
        Get the number of point or cell arrays available in the input.
        """
        ...
    
    def GetPointArrayName(self, p_int):
        """
        V.GetPointArrayName(int) -> string
        C++: const char *GetPointArrayName(int index)
        
        Get the name of the point or cell array with the given index in
        the input.
        """
        ...
    
    def GetPointArrayStatus(self, string):
        """
        V.GetPointArrayStatus(string) -> int
        C++: int GetPointArrayStatus(const char *name)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def GetPointDataArraySelection(self):
        """
        V.GetPointDataArraySelection() -> vtkDataArraySelection
        C++: virtual vtkDataArraySelection *GetPointDataArraySelection()
        
        Get the data array selection tables used to configure which data
        arrays are loaded by the reader.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Initializes the AMR reader. All concrete instances must call this
        method in their constructor.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsCachingEnabled(self):
        """
        V.IsCachingEnabled() -> bool
        C++: bool IsCachingEnabled()
        
        Set/Get Reader caching property
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRBaseReader
        C++: vtkAMRBaseReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRBaseReader
        C++: static vtkAMRBaseReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellArrayStatus(self, string, p_int):
        """
        V.SetCellArrayStatus(string, int)
        C++: void SetCellArrayStatus(const char *name, int status)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: virtual void SetController(vtkMultiProcessController *_arg)
        
        Set/Get a multiprocess-controller for reading in parallel. By
        default this parameter is set to nullptr by the constructor.
        """
        ...
    
    def SetEnableCaching(self, p_int):
        """
        V.SetEnableCaching(int)
        C++: virtual void SetEnableCaching(vtkTypeBool _arg)
        
        Set/Get Reader caching property
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *fileName)
        
        Set/Get the filename. Concrete instances of this class must
        implement the SetFileName method accordingly.
        """
        ...
    
    def SetMaxLevel(self, p_int):
        """
        V.SetMaxLevel(int)
        C++: virtual void SetMaxLevel(int _arg)
        
        Set the level, up to which the blocks are loaded.
        """
        ...
    
    def SetPointArrayStatus(self, string, p_int):
        """
        V.SetPointArrayStatus(string, int)
        C++: void SetPointArrayStatus(const char *name, int status)
        
        Get/Set whether the point or cell array with the given name is to
        be read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRDataSetCache(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAMRDataSetCache -  A concrete implementation of vtkObject that
    provides functionality for
     caching AMR blocks.
    
    Superclass: vtkObject
    
    The primary intent of this class is to be used by the
     AMR reader infrastructure for caching blocks/data in memory to
    minimize
     out-of-core operations.
    """
    def GetAMRBlock(self, p_int):
        """
        V.GetAMRBlock(int) -> vtkUniformGrid
        C++: vtkUniformGrid *GetAMRBlock(int compositeIdx)
        
        Given the composite index, this method returns the AMR block.
        NOTE: Null is returned if the AMR block does not exist in the
        cache.
        """
        ...
    
    def GetAMRBlockCellData(self, p_int, string):
        """
        V.GetAMRBlockCellData(int, string) -> vtkDataArray
        C++: vtkDataArray *GetAMRBlockCellData(int compositeIdx,
            const char *dataName)
        
        Given the name of the cell array and AMR block composite index,
        this method returns a pointer to the cell data array. NOTE: Null
        is returned if the cell array and/or block is not cached.
        """
        ...
    
    def GetAMRBlockPointData(self, p_int, string):
        """
        V.GetAMRBlockPointData(int, string) -> vtkDataArray
        C++: vtkDataArray *GetAMRBlockPointData(int compositeIdx,
            const char *dataName)
        
        Given the name of the point array and AMR block composite index,
        this method returns a pointer to the point data array. NOTE: Null
        is returned if the point array and /or block is not cached.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HasAMRBlock(self, p_int):
        """
        V.HasAMRBlock(int) -> bool
        C++: bool HasAMRBlock(const int compositeIdx)
        
        Checks if the AMR block associated with the given composite is
        cached.
        """
        ...
    
    def HasAMRBlockCellData(self, p_int, string):
        """
        V.HasAMRBlockCellData(int, string) -> bool
        C++: bool HasAMRBlockCellData(int compositeIdx, const char *name)
        
        Checks if the cell data array, associated with the provided name,
        has been cached for the AMR block with the given composite index.
        """
        ...
    
    def HasAMRBlockPointData(self, p_int, string):
        """
        V.HasAMRBlockPointData(int, string) -> bool
        C++: bool HasAMRBlockPointData(int compositeIdx, const char *name)
        
        Checks if the point data array, associated with the provided
        name, has been cached for the AMR block with the given composite
        index.
        """
        ...
    
    def InsertAMRBlock(self, p_int, vtkUniformGrid):
        """
        V.InsertAMRBlock(int, vtkUniformGrid)
        C++: void InsertAMRBlock(int compositeIdx,
            vtkUniformGrid *amrGrid)
        
        Inserts an AMR block to the cache
        """
        ...
    
    def InsertAMRBlockCellData(self, p_int, vtkDataArray):
        """
        V.InsertAMRBlockCellData(int, vtkDataArray)
        C++: void InsertAMRBlockCellData(int compositeIdx,
            vtkDataArray *dataArray)
        
        Inserts a cell data array to an already cached block NOTE:
        this->HasAMRBlock( compositeIdx ) == true
        """
        ...
    
    def InsertAMRBlockPointData(self, p_int, vtkDataArray):
        """
        V.InsertAMRBlockPointData(int, vtkDataArray)
        C++: void InsertAMRBlockPointData(int compositeIdx,
            vtkDataArray *dataArray)
        
        Inserts a point data array to an already cached block NOTE:
        this->HasAMRBlock( compositeIdx ) == true
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRDataSetCache
        C++: vtkAMRDataSetCache *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRDataSetCache
        C++: static vtkAMRDataSetCache *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMREnzoParticlesReader(vtkAMRBaseParticlesReader):
    """
    vtkAMREnzoParticlesReader -  A concrete instance of the
    vtkAMRBaseParticlesReader which provides
     functionality for loading ENZO AMR particle datasets from ENZO.
    
    Superclass: vtkAMRBaseParticlesReader
    
    @sa
     vtkAMRBaseParticlesReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetParticleType(self):
        """
        V.GetParticleType() -> int
        C++: virtual int GetParticleType()
        
        Returns the requested particle type.
        """
        ...
    
    def GetTotalNumberOfParticles(self):
        """
        V.GetTotalNumberOfParticles() -> int
        C++: int GetTotalNumberOfParticles() override;
        
        See vtkAMRBaseParticlesReader::GetTotalNumberOfParticles.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMREnzoParticlesReader
        C++: vtkAMREnzoParticlesReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMREnzoParticlesReader
        C++: static vtkAMREnzoParticlesReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetParticleType(self, p_int):
        """
        V.SetParticleType(int)
        C++: virtual void SetParticleType(int _arg)
        
        Returns the requested particle type.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMREnzoReader(vtkAMRBaseReader):
    """
    vtkAMREnzoReader - A concrete instance of vtkAMRBaseReader that
    implements functionality for reading Enzo AMR datasets.
    
    Superclass: vtkAMRBaseReader
    """
    def ConvertToCGSOff(self):
        """
        V.ConvertToCGSOff()
        C++: virtual void ConvertToCGSOff()
        
        Set/Get whether data should be converted to CGS
        """
        ...
    
    def ConvertToCGSOn(self):
        """
        V.ConvertToCGSOn()
        C++: virtual void ConvertToCGSOn()
        
        Set/Get whether data should be converted to CGS
        """
        ...
    
    def GetConvertToCGS(self):
        """
        V.GetConvertToCGS() -> int
        C++: virtual vtkTypeBool GetConvertToCGS()
        
        Set/Get whether data should be converted to CGS
        """
        ...
    
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: int GetNumberOfBlocks() override;
        
        See vtkAMRBaseReader::GetNumberOfBlocks
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLevels(self):
        """
        V.GetNumberOfLevels() -> int
        C++: int GetNumberOfLevels() override;
        
        See vtkAMRBaseReader::GetNumberOfLevels
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMREnzoReader
        C++: vtkAMREnzoReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMREnzoReader
        C++: static vtkAMREnzoReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetConvertToCGS(self, p_int):
        """
        V.SetConvertToCGS(int)
        C++: virtual void SetConvertToCGS(vtkTypeBool _arg)
        
        Set/Get whether data should be converted to CGS
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fileName) override;
        
        See vtkAMRBaseReader::SetFileName
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMReXGridReader(vtkAMRBaseReader):
    """
    vtkAMReXGridReader - reader for AMReX plotfiles grid data.
    
    Superclass: vtkAMRBaseReader
    
    vtkAMReXGridReader readers grid data from AMReX plotfiles.
    """
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: int GetNumberOfBlocks() override;
        
        See vtkAMRBaseReader::GetNumberOfBlocks
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLevels(self):
        """
        V.GetNumberOfLevels() -> int
        C++: int GetNumberOfLevels() override;
        
        See vtkAMRBaseReader::GetNumberOfLevels
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMReXGridReader
        C++: vtkAMReXGridReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMReXGridReader
        C++: static vtkAMReXGridReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fileName) override;
        
        See vtkAMRBaseReader::SetFileName
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMReXParticlesReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkAMReXParticlesReader - reader for AMReX plotfiles particle data.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkAMReXParticlesReader readers particle data from AMReX plotfiles.
    The reader is based on the  `ParticleContainer::Restart` and
    `amrex_binary_particles_to_vtp` files in the [AMReX
    code](https://amrex-codes.github.io/).
    
    The reader reads all levels in as blocks in output multiblock dataset
    distributed datasets at each level between ranks in a contiguous
    fashion.
    
    To use the reader, one must set the `PlotFileName` and `ParticleType`
    which identifies the type particles from the PlotFileName to read.
    
    The reader provides ability to select point data arrays to be made
    available in the output. Note that due to the nature of the file
    structure, all variables are still read in and hence deselecting
    arrays does not reduce I/O calls or initial memory requirements.
    """
    def CanReadFile(self, string, string_1):
        """
        V.CanReadFile(string, string) -> int
        C++: static int CanReadFile(const char *fname,
            const char *particlesType=nullptr)
        
        Returns 1 is fname refers to a plotfile that the reader can read.
        """
        ...
    
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Get/Set the controller to use. By default, the global
        vtkMultiProcessController will be used.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetParticleType(self):
        """
        V.GetParticleType() -> string
        C++: const std::string &GetParticleType()
        
        Get/Set the particle type to read. By default, this is set to
        'particles'.
        """
        ...
    
    def GetPlotFileName(self):
        """
        V.GetPlotFileName() -> string
        C++: const char *GetPlotFileName()
        
        Get/Set the AMReX plotfile. Note this is a directory on the
        filesystem and not the file.
        """
        ...
    
    def GetPointDataArraySelection(self):
        """
        V.GetPointDataArraySelection() -> vtkDataArraySelection
        C++: vtkDataArraySelection *GetPointDataArraySelection()
        
        Get vtkDataArraySelection instance to select point arrays to
        read. Due to the nature of the AMReX particles files, all point
        data is read in from the disk, despite certain arrays unselected.
        The unselected arrays will be discarded from the generated output
        dataset.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMReXParticlesReader
        C++: vtkAMReXParticlesReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMReXParticlesReader
        C++: static vtkAMReXParticlesReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: void SetController(vtkMultiProcessController *controller)
        
        Get/Set the controller to use. By default, the global
        vtkMultiProcessController will be used.
        """
        ...
    
    def SetParticleType(self, string):
        """
        V.SetParticleType(string)
        C++: void SetParticleType(const std::string &str)
        
        Get/Set the particle type to read. By default, this is set to
        'particles'.
        """
        ...
    
    def SetPlotFileName(self, string):
        """
        V.SetPlotFileName(string)
        C++: void SetPlotFileName(const char *fname)
        
        Get/Set the AMReX plotfile. Note this is a directory on the
        filesystem and not the file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRFlashParticlesReader(vtkAMRBaseParticlesReader):
    """
    vtkAMRFlashParticlesReader -  A concrete instance of
    vtkAMRBaseParticlesReader that implements
     functionality for reading flash particle datasets.
    
    Superclass: vtkAMRBaseParticlesReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTotalNumberOfParticles(self):
        """
        V.GetTotalNumberOfParticles() -> int
        C++: int GetTotalNumberOfParticles() override;
        
        See vtkAMRBaseParticlesReader::GetTotalNumberOfParticles.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRFlashParticlesReader
        C++: vtkAMRFlashParticlesReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRFlashParticlesReader
        C++: static vtkAMRFlashParticlesReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAMRFlashReader(vtkAMRBaseReader):
    """
    vtkAMRFlashReader - no description provided.
    
    Superclass: vtkAMRBaseReader
    """
    def GetNumberOfBlocks(self):
        """
        V.GetNumberOfBlocks() -> int
        C++: int GetNumberOfBlocks() override;
        
        See vtkAMRBaseReader::GetNumberOfBlocks
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLevels(self):
        """
        V.GetNumberOfLevels() -> int
        C++: int GetNumberOfLevels() override;
        
        See vtkAMRBaseReader::GetNumberOfLevels
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAMRFlashReader
        C++: vtkAMRFlashReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAMRFlashReader
        C++: static vtkAMRFlashReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fileName) override;
        
        See vtkAMRBaseReader::SetFileName
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
