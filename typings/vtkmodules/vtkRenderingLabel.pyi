"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

VTK_LABEL_FIELD_DATA = ...
VTK_LABEL_IDS = ...
VTK_LABEL_NORMALS = ...
VTK_LABEL_SCALARS = ...
VTK_LABEL_TCOORDS = ...
VTK_LABEL_TENSORS = ...
VTK_LABEL_VECTORS = ...
class vtkLabeledDataMapper(__vtkmodules_vtkRenderingCore.vtkMapper2D):
    """
    vtkLabeledDataMapper - draw text labels at dataset points
    
    Superclass: vtkMapper2D
    
    vtkLabeledDataMapper is a mapper that renders text at dataset points.
    Various items can be labeled including point ids, scalars, vectors,
    normals, texture coordinates, tensors, and field data components.
    
    The format with which the label is drawn is specified using a printf
    style format string. The font attributes of the text can be set
    through the vtkTextProperty associated to this mapper.
    
    By default, all the components of multi-component data such as
    vectors, normals, texture coordinates, tensors, and multi-component
    scalars are labeled. However, you can specify a single component if
    you prefer. (Note: the label format specifies the format to use for a
    single component. The label is creating by looping over all
    components and using the label format to render each component.) The
    character separator between components can be set. By default, it is
    set to a single whitespace.
    
    @warning
    Use this filter in combination with vtkSelectVisiblePoints if you
    want to label only points that are visible. If you want to label
    cells rather than points, use the filter vtkCellCenters to generate
    points at the center of the cells. Also, you can use the class
    vtkIdFilter to generate ids as scalars or field data, which can then
    be labeled.
    
    @sa
    vtkMapper2D vtkActor2D vtkTextMapper vtkTextProperty
    vtkSelectVisiblePoints vtkIdFilter vtkCellCenters
    """
    def CoordinateSystemDisplay(self):
        """
        V.CoordinateSystemDisplay()
        C++: void CoordinateSystemDisplay()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def CoordinateSystemWorld(self):
        """
        V.CoordinateSystemWorld()
        C++: void CoordinateSystemWorld()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def GetComponentSeparator(self):
        """
        V.GetComponentSeparator() -> char
        C++: virtual char GetComponentSeparator()
        
        Set/Get the separator between components.
        """
        ...
    
    def GetCoordinateSystem(self):
        """
        V.GetCoordinateSystem() -> int
        C++: virtual int GetCoordinateSystem()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def GetCoordinateSystemMaxValue(self):
        """
        V.GetCoordinateSystemMaxValue() -> int
        C++: virtual int GetCoordinateSystemMaxValue()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def GetCoordinateSystemMinValue(self):
        """
        V.GetCoordinateSystemMinValue() -> int
        C++: virtual int GetCoordinateSystemMinValue()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def GetFieldDataArray(self):
        """
        V.GetFieldDataArray() -> int
        C++: virtual int GetFieldDataArray()
        
        Set/Get the field data array to label. This instance variable is
        only applicable if field data is labeled.  This will clear
        FieldDataName when set.
        """
        ...
    
    def GetFieldDataName(self):
        """
        V.GetFieldDataName() -> string
        C++: virtual char *GetFieldDataName()
        
        Set/Get the name of the field data array to label.  This instance
        variable is only applicable if field data is labeled.  This will
        override FieldDataArray when set.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataSet
        C++: vtkDataSet *GetInput()
        
        Use GetInputDataObject() to get the input data object for
        composite datasets.
        """
        ...
    
    def GetLabeledComponent(self):
        """
        V.GetLabeledComponent() -> int
        C++: virtual int GetLabeledComponent()
        
        Set/Get the component number to label if the data to print has
        more than one component. For example, all the components of
        scalars, vectors, normals, etc. are labeled by default
        (LabeledComponent=(-1)). However, if this ivar is nonnegative,
        then only the one component specified is labeled.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Set/Get the format with which to print the labels.  This should
        be a printf-style format string.
        
        * By default, the mapper will try to print each component of the
        * tuple using a sane format: %d for integers, %f for floats, %g
          for
        * doubles, %ld for longs, et cetera.  If you need a different
        * format, set it here.  You can do things like limit the number
          of
        * significant digits, add prefixes/suffixes, basically anything
        * that printf can do.  If you only want to print one component of
        a
        * vector, see the ivar LabeledComponent.
        """
        ...
    
    def GetLabelMode(self):
        """
        V.GetLabelMode() -> int
        C++: virtual int GetLabelMode()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def GetLabelPosition(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.GetLabelPosition(int, [float, float, float])
        C++: void GetLabelPosition(int label, double pos[3])
        
        Return the position of the requested label.
        """
        ...
    
    def GetLabelText(self, p_int):
        """
        V.GetLabelText(int) -> string
        C++: const char *GetLabelText(int label)
        
        Return the text for the requested label.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        V.GetLabelTextProperty(int) -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty(int type)
        
        Set/Get the text property. If an integer argument is provided,
        you may provide different text properties for different label
        types. The type is determined by an optional type input array.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the modified time for this object.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLabels(self):
        """
        V.GetNumberOfLabels() -> int
        C++: virtual int GetNumberOfLabels()
        
        Return the number of labels rendered by the mapper.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform
        C++: virtual vtkTransform *GetTransform()
        
        The transform to apply to the labels before mapping to 2D.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabeledDataMapper
        C++: vtkLabeledDataMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport, vtkActor2D):
        """
        V.RenderOpaqueGeometry(vtkViewport, vtkActor2D)
        C++: void RenderOpaqueGeometry(vtkViewport *viewport,
            vtkActor2D *actor) override;
        
        Draw the text to the screen at each input point.
        """
        ...
    
    def RenderOverlay(self, vtkViewport, vtkActor2D):
        """
        V.RenderOverlay(vtkViewport, vtkActor2D)
        C++: void RenderOverlay(vtkViewport *viewport, vtkActor2D *actor)
            override;
        
        Draw the text to the screen at each input point.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabeledDataMapper
        C++: static vtkLabeledDataMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComponentSeparator(self, char):
        """
        V.SetComponentSeparator(char)
        C++: virtual void SetComponentSeparator(char _arg)
        
        Set/Get the separator between components.
        """
        ...
    
    def SetCoordinateSystem(self, p_int):
        """
        V.SetCoordinateSystem(int)
        C++: virtual void SetCoordinateSystem(int _arg)
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def SetFieldDataArray(self, p_int):
        """
        V.SetFieldDataArray(int)
        C++: void SetFieldDataArray(int arrayIndex)
        
        Set/Get the field data array to label. This instance variable is
        only applicable if field data is labeled.  This will clear
        FieldDataName when set.
        """
        ...
    
    def SetFieldDataName(self, string):
        """
        V.SetFieldDataName(string)
        C++: void SetFieldDataName(const char *arrayName)
        
        Set/Get the name of the field data array to label.  This instance
        variable is only applicable if field data is labeled.  This will
        override FieldDataArray when set.
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: virtual void SetInputData(vtkDataObject *)
        
        Set the input dataset to the mapper. This mapper handles any type
        of data.
        """
        ...
    
    def SetLabeledComponent(self, p_int):
        """
        V.SetLabeledComponent(int)
        C++: virtual void SetLabeledComponent(int _arg)
        
        Set/Get the component number to label if the data to print has
        more than one component. For example, all the components of
        scalars, vectors, normals, etc. are labeled by default
        (LabeledComponent=(-1)). However, if this ivar is nonnegative,
        then only the one component specified is labeled.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Set/Get the format with which to print the labels.  This should
        be a printf-style format string.
        
        * By default, the mapper will try to print each component of the
        * tuple using a sane format: %d for integers, %f for floats, %g
          for
        * doubles, %ld for longs, et cetera.  If you need a different
        * format, set it here.  You can do things like limit the number
          of
        * significant digits, add prefixes/suffixes, basically anything
        * that printf can do.  If you only want to print one component of
        a
        * vector, see the ivar LabeledComponent.
        """
        ...
    
    def SetLabelMode(self, p_int):
        """
        V.SetLabelMode(int)
        C++: virtual void SetLabelMode(int _arg)
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelModeToLabelFieldData(self):
        """
        V.SetLabelModeToLabelFieldData()
        C++: void SetLabelModeToLabelFieldData()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelModeToLabelIds(self):
        """
        V.SetLabelModeToLabelIds()
        C++: void SetLabelModeToLabelIds()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelModeToLabelNormals(self):
        """
        V.SetLabelModeToLabelNormals()
        C++: void SetLabelModeToLabelNormals()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelModeToLabelScalars(self):
        """
        V.SetLabelModeToLabelScalars()
        C++: void SetLabelModeToLabelScalars()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelModeToLabelTCoords(self):
        """
        V.SetLabelModeToLabelTCoords()
        C++: void SetLabelModeToLabelTCoords()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelModeToLabelTensors(self):
        """
        V.SetLabelModeToLabelTensors()
        C++: void SetLabelModeToLabelTensors()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelModeToLabelVectors(self):
        """
        V.SetLabelModeToLabelVectors()
        C++: void SetLabelModeToLabelVectors()
        
        Specify which data to plot: IDs, scalars, vectors, normals,
        texture coords, tensors, or field data. If the data has more than
        one component, use the method SetLabeledComponent to control
        which components to plot. The default is VTK_LABEL_IDS.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p)
        V.SetLabelTextProperty(vtkTextProperty, int)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *p,
            int type)
        
        Set/Get the text property. If an integer argument is provided,
        you may provide different text properties for different label
        types. The type is determined by an optional type input array.
        """
        ...
    
    def SetTransform(self, vtkTransform):
        """
        V.SetTransform(vtkTransform)
        C++: void SetTransform(vtkTransform *t)
        
        The transform to apply to the labels before mapping to 2D.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Coordinates = ...
    DISPLAY = ...
    WORLD = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDynamic2DLabelMapper(vtkLabeledDataMapper):
    """
    vtkDynamic2DLabelMapper - draw text labels at 2D dataset points
    
    Superclass: vtkLabeledDataMapper
    
    vtkDynamic2DLabelMapper is a mapper that renders text at dataset
    points such that the labels do not overlap. Various items can be
    labeled including point ids, scalars, vectors, normals, texture
    coordinates, tensors, and field data components. This mapper assumes
    that the points are located on the x-y plane and that the camera
    remains perpendicular to that plane with a y-up axis (this can be
    constrained using vtkImageInteractor). On the first render, the
    mapper computes the visiblility of all labels at all scales, and
    queries this information on successive renders. This causes the first
    render to be much slower. The visibility algorithm is a greedy
    approach based on the point id, so the label for a point will be
    drawn unless the label for a point with lower id overlaps it.
    
    @warning
    Use this filter in combination with vtkSelectVisiblePoints if you
    want to label only points that are visible. If you want to label
    cells rather than points, use the filter vtkCellCenters to generate
    points at the center of the cells. Also, you can use the class
    vtkIdFilter to generate ids as scalars or field data, which can then
    be labeled.
    
    @sa
    vtkLabeledDataMapper
    
    @par Thanks: This algorithm was developed in the paper Ken Been and
    Chee Yap. Dynamic Map Labeling. IEEE Transactions on Visualization
    and Computer Graphics, Vol. 12, No. 5, 2006. pp. 773-780.
    """
    def GetLabelHeightPadding(self):
        """
        V.GetLabelHeightPadding() -> float
        C++: virtual float GetLabelHeightPadding()
        
        Set the label height padding as a percentage. The percentage is a
        percentage of your label height. Default is 50%.
        """
        ...
    
    def GetLabelWidthPadding(self):
        """
        V.GetLabelWidthPadding() -> float
        C++: virtual float GetLabelWidthPadding()
        
        Set the label width padding as a percentage. The percentage is a
        percentage of your label ^height^ (yes, not a typo). Default is
        50%.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Instantiate object with %%-#6.3g label format. By default, point
        ids are labeled.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Instantiate object with %%-#6.3g label format. By default, point
        ids are labeled.
        """
        ...
    
    def GetReversePriority(self):
        """
        V.GetReversePriority() -> bool
        C++: virtual bool GetReversePriority()
        
        Whether to reverse the priority order (i.e. low values have high
        priority). Default is off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Instantiate object with %%-#6.3g label format. By default, point
        ids are labeled.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Instantiate object with %%-#6.3g label format. By default, point
        ids are labeled.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDynamic2DLabelMapper
        C++: vtkDynamic2DLabelMapper *NewInstance()
        
        Instantiate object with %%-#6.3g label format. By default, point
        ids are labeled.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport, vtkActor2D):
        """
        V.RenderOpaqueGeometry(vtkViewport, vtkActor2D)
        C++: void RenderOpaqueGeometry(vtkViewport *viewport,
            vtkActor2D *actor) override;
        
        Draw non-overlapping labels to the screen.
        """
        ...
    
    def RenderOverlay(self, vtkViewport, vtkActor2D):
        """
        V.RenderOverlay(vtkViewport, vtkActor2D)
        C++: void RenderOverlay(vtkViewport *viewport, vtkActor2D *actor)
            override;
        
        Draw non-overlapping labels to the screen.
        """
        ...
    
    def ReversePriorityOff(self):
        """
        V.ReversePriorityOff()
        C++: virtual void ReversePriorityOff()
        
        Whether to reverse the priority order (i.e. low values have high
        priority). Default is off.
        """
        ...
    
    def ReversePriorityOn(self):
        """
        V.ReversePriorityOn()
        C++: virtual void ReversePriorityOn()
        
        Whether to reverse the priority order (i.e. low values have high
        priority). Default is off.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDynamic2DLabelMapper
        C++: static vtkDynamic2DLabelMapper *SafeDownCast(
            vtkObjectBase *o)
        
        Instantiate object with %%-#6.3g label format. By default, point
        ids are labeled.
        """
        ...
    
    def SetLabelHeightPadding(self, p_float):
        """
        V.SetLabelHeightPadding(float)
        C++: virtual void SetLabelHeightPadding(float _arg)
        
        Set the label height padding as a percentage. The percentage is a
        percentage of your label height. Default is 50%.
        """
        ...
    
    def SetLabelWidthPadding(self, p_float):
        """
        V.SetLabelWidthPadding(float)
        C++: virtual void SetLabelWidthPadding(float _arg)
        
        Set the label width padding as a percentage. The percentage is a
        percentage of your label ^height^ (yes, not a typo). Default is
        50%.
        """
        ...
    
    def SetPriorityArrayName(self, string):
        """
        V.SetPriorityArrayName(string)
        C++: void SetPriorityArrayName(const char *name)
        
        Set the points array name to use to give priority to labels.
        Defaults to "priority".
        """
        ...
    
    def SetReversePriority(self, bool):
        """
        V.SetReversePriority(bool)
        C++: virtual void SetReversePriority(bool _arg)
        
        Whether to reverse the priority order (i.e. low values have high
        priority). Default is off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelRenderStrategy(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkLabelRenderStrategy - Superclass for label rendering
    implementations.
    
    Superclass: vtkObject
    
    These methods should only be called within a mapper.
    """
    def ComputeLabelBounds(self, vtkTextProperty, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeLabelBounds(vtkTextProperty, string, [float, float,
            float, float])
        C++: virtual void ComputeLabelBounds(vtkTextProperty *tprop,
            vtkStdString label, double bds[4])
        V.ComputeLabelBounds(vtkTextProperty, unicode, [float, float,
            float, float])
        C++: virtual void ComputeLabelBounds(vtkTextProperty *tprop,
            vtkUnicodeString label, double bds[4])
        
        Compute the bounds of a label. Must be performed after the
        renderer is set. Only the unicode string version must be
        implemented in subclasses.
        """
        ...
    
    def EndFrame(self):
        """
        V.EndFrame()
        C++: virtual void EndFrame()
        
        End a rendering frame.
        """
        ...
    
    def GetDefaultTextProperty(self):
        """
        V.GetDefaultTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetDefaultTextProperty()
        
        Set the default text property for the strategy.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        Set the renderer associated with this strategy.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelRenderStrategy
        C++: vtkLabelRenderStrategy *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *)
        
        Release any graphics resources that are being consumed by this
        strategy. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderLabel(self, p_int=..., p_int=..., *args, **kwargs):
        """
        V.RenderLabel([int, int], vtkTextProperty, string)
        C++: virtual void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkStdString label)
        V.RenderLabel([int, int], vtkTextProperty, string, int)
        C++: virtual void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkStdString label, int maxWidth)
        V.RenderLabel([int, int], vtkTextProperty, unicode)
        C++: virtual void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkUnicodeString label)
        V.RenderLabel([int, int], vtkTextProperty, unicode, int)
        C++: virtual void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkUnicodeString label, int maxWidth)
        
        Render a label at a location in display coordinates. Must be
        performed between StartFrame() and EndFrame() calls. Only the
        unicode string version must be implemented in subclasses. The
        optional final parameter maxWidth specifies a maximum width for
        the label. Longer labels can be shorted with an ellipsis (...).
        Only renderer strategies that return true from
        SupportsBoundedSize must implement this version of th method.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabelRenderStrategy
        C++: static vtkLabelRenderStrategy *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDefaultTextProperty(self, vtkTextProperty):
        """
        V.SetDefaultTextProperty(vtkTextProperty)
        C++: virtual void SetDefaultTextProperty(vtkTextProperty *tprop)
        
        Set the default text property for the strategy.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: virtual void SetRenderer(vtkRenderer *ren)
        
        Set the renderer associated with this strategy.
        """
        ...
    
    def StartFrame(self):
        """
        V.StartFrame()
        C++: virtual void StartFrame()
        
        Start a rendering frame. Renderer must be set.
        """
        ...
    
    def SupportsBoundedSize(self):
        """
        V.SupportsBoundedSize() -> bool
        C++: virtual bool SupportsBoundedSize()
        
        Whether the text rendering strategy supports bounded size. The
        superclass returns true. Subclasses should override this to
        return the appropriate value. Subclasses that return true from
        this method should implement the version of RenderLabel() that
        takes a maximum size (see RenderLabel()).
        """
        ...
    
    def SupportsRotation(self):
        """
        V.SupportsRotation() -> bool
        C++: virtual bool SupportsRotation()
        
        Whether the text rendering strategy supports rotation. The
        superclass returns true. Subclasses should override this to
        return the appropriate value.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFreeTypeLabelRenderStrategy(vtkLabelRenderStrategy):
    """
    vtkFreeTypeLabelRenderStrategy - Renders labels with freetype
    
    Superclass: vtkLabelRenderStrategy
    
    Uses the FreeType to render labels and compute label sizes. This
    strategy may be used with vtkLabelPlacementMapper.
    """
    def ComputeLabelBounds(self, vtkTextProperty, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeLabelBounds(vtkTextProperty, string, [float, float,
            float, float])
        C++: void ComputeLabelBounds(vtkTextProperty *tprop,
            vtkStdString label, double bds[4]) override;
        V.ComputeLabelBounds(vtkTextProperty, unicode, [float, float,
            float, float])
        C++: void ComputeLabelBounds(vtkTextProperty *tprop,
            vtkUnicodeString label, double bds[4]) override;
        
        Compute the bounds of a label. Must be performed after the
        renderer is set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFreeTypeLabelRenderStrategy
        C++: vtkFreeTypeLabelRenderStrategy *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *window) override;
        
        Release any graphics resources that are being consumed by this
        strategy. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderLabel(self, p_int=..., p_int=..., *args, **kwargs):
        """
        V.RenderLabel([int, int], vtkTextProperty, string)
        C++: void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkStdString label) override;
        V.RenderLabel([int, int], vtkTextProperty, string, int)
        C++: void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkStdString label, int width) override;
        V.RenderLabel([int, int], vtkTextProperty, unicode)
        C++: void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkUnicodeString label) override;
        V.RenderLabel([int, int], vtkTextProperty, unicode, int)
        C++: void RenderLabel(int x[2], vtkTextProperty *tprop,
            vtkUnicodeString label, int width) override;
        
        Render a label at a location in world coordinates. Must be
        performed between StartFrame() and EndFrame() calls.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFreeTypeLabelRenderStrategy
        C++: static vtkFreeTypeLabelRenderStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SupportsBoundedSize(self):
        """
        V.SupportsBoundedSize() -> bool
        C++: bool SupportsBoundedSize() override;
        
        The free type render strategy currently does not support bounded
        size labels.
        """
        ...
    
    def SupportsRotation(self):
        """
        V.SupportsRotation() -> bool
        C++: bool SupportsRotation() override;
        
        The free type render strategy currently does not support
        rotation.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabeledTreeMapDataMapper(vtkLabeledDataMapper):
    """
    vtkLabeledTreeMapDataMapper - draw text labels on a tree map
    
    Superclass: vtkLabeledDataMapper
    
    vtkLabeledTreeMapDataMapper is a mapper that renders text on a tree
    map. A tree map is a vtkTree with an associated 4-tuple array used
    for storing the boundary rectangle for each vertex in the tree. The
    user must specify the array name used for storing the rectangles.
    
    The mapper iterates through the tree and attempts and renders a label
    inside the vertex's rectangle as long as the following conditions
    hold:
    1. The vertex level is within the range of levels specified for
       labeling.
    2. The label can fully fit inside its box.
    3. The label does not overlap an ancestor's label.
    
    @sa
    vtkLabeledDataMapper
    
    @par Thanks: Thanks to Patricia Crossno, Ken Moreland, Andrew Wilson
    and Brian Wylie from Sandia National Laboratories for their help in
    developing this class.
    """
    def GetChildMotion(self):
        """
        V.GetChildMotion() -> int
        C++: virtual int GetChildMotion()
        
        Indicates if the label can be moved by its ancestors
        """
        ...
    
    def GetClipTextMode(self):
        """
        V.GetClipTextMode() -> int
        C++: virtual int GetClipTextMode()
        
        Indicates if the label can be displayed clipped by the Window
        mode = 0 - ok to clip labels 1 - auto center labels w/r to the
        area of the vertex's clipped region
        """
        ...
    
    def GetDynamicLevel(self):
        """
        V.GetDynamicLevel() -> int
        C++: virtual int GetDynamicLevel()
        
        Indicates at which level labeling should be dynamic
        """
        ...
    
    def GetFontSizeRange(self, p_int=..., p_int=..., p_int=...):
        """
        V.GetFontSizeRange([int, int, int])
        C++: void GetFontSizeRange(int range[3])
        
        The range of font sizes to use when rendering the labels.
        """
        ...
    
    def GetInputTree(self):
        """
        V.GetInputTree() -> vtkTree
        C++: virtual vtkTree *GetInputTree()
        
        The input to this filter.
        """
        ...
    
    def GetLevelRange(self, p_int=..., p_int=...):
        """
        V.GetLevelRange([int, int])
        C++: void GetLevelRange(int range[2])
        
        The range of levels to attempt to label. The level of a vertex is
        the length of the path to the root (the root has level 0).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabeledTreeMapDataMapper
        C++: vtkLabeledTreeMapDataMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport, vtkActor2D):
        """
        V.RenderOpaqueGeometry(vtkViewport, vtkActor2D)
        C++: void RenderOpaqueGeometry(vtkViewport *viewport,
            vtkActor2D *actor) override;
        
        Draw the text to the screen at each input point.
        """
        ...
    
    def RenderOverlay(self, vtkViewport, vtkActor2D):
        """
        V.RenderOverlay(vtkViewport, vtkActor2D)
        C++: void RenderOverlay(vtkViewport *viewport, vtkActor2D *actor)
            override;
        
        Draw the text to the screen at each input point.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabeledTreeMapDataMapper
        C++: static vtkLabeledTreeMapDataMapper *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetChildMotion(self, p_int):
        """
        V.SetChildMotion(int)
        C++: virtual void SetChildMotion(int _arg)
        
        Indicates if the label can be moved by its ancestors
        """
        ...
    
    def SetClipTextMode(self, p_int):
        """
        V.SetClipTextMode(int)
        C++: virtual void SetClipTextMode(int _arg)
        
        Indicates if the label can be displayed clipped by the Window
        mode = 0 - ok to clip labels 1 - auto center labels w/r to the
        area of the vertex's clipped region
        """
        ...
    
    def SetDynamicLevel(self, p_int):
        """
        V.SetDynamicLevel(int)
        C++: virtual void SetDynamicLevel(int _arg)
        
        Indicates at which level labeling should be dynamic
        """
        ...
    
    def SetFontSizeRange(self, p_int, p_int_1, p_int_2):
        """
        V.SetFontSizeRange(int, int, int)
        C++: void SetFontSizeRange(int maxSize, int minSize, int delta=4)
        
        The range of font sizes to use when rendering the labels.
        """
        ...
    
    def SetLevelRange(self, p_int, p_int_1):
        """
        V.SetLevelRange(int, int)
        C++: void SetLevelRange(int startLevel, int endLevel)
        
        The range of levels to attempt to label. The level of a vertex is
        the length of the path to the root (the root has level 0).
        """
        ...
    
    def SetRectanglesArrayName(self, string):
        """
        V.SetRectanglesArrayName(string)
        C++: virtual void SetRectanglesArrayName(const char *name)
        
        The name of the 4-tuple array used for
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelHierarchy(__vtkmodules_vtkCommonDataModel.vtkPointSet):
    """
    vtkLabelHierarchy - contains an octree of labels
    
    Superclass: vtkPointSet
    
    This class represents labels in a hierarchy used to denote rendering
    priority. A binary tree of labels is maintained that subdivides the
    bounds of the of the label anchors spatially. Which level of the tree
    a label occupies determines its priority; those at higher levels of
    the tree will be more likely to render than those at lower levels of
    the tree.
    
    Pass vtkLabelHierarchy objects to a vtkLabelPlacementMapper filter
    for dynamic, non-overlapping, per-frame placement of labels.
    
    Note that if we have a d-dimensional binary tree and we want a fixed
    number $n $ of labels in each node (all nodes, not just leaves), we
    can compute the depth of tree required assuming a uniform
    distribution of points. Given a total of $N $ points we know
    that$\frac{N}{|T|} = n $, where $|T| $ is the cardinality of the tree
    (i.e., the number of nodes it contains). Because we have a uniform
    distribution, the tree will be uniformly subdivided and thus $|T| = 1
    + 2^d + \left(2^d\right)^2 + \cdots + \left(2^d\right)^k $, where $d $
    is the dimensionality of the input points (fixed at 3 for now). As $k $
    becomes large, $|T|\approx 2 \left(2^d\right)^k $. Using this
    approximation, we can solve for $k $:\[ k =
    \frac{\log{\frac{N}{2n}}}{\log{2^d}} \] Given a set of $N $ input
    label anchors, we'll compute $k $ and then bin the anchors into tree
    nodes at level $k $ of the tree. After this, all the nodes will be in
    the leaves of the tree and those leaves will be at the $k $-th level;
    no anchors will be in levels $1, 2, \ldots, k-1 $. To fix that, we'll
    choose to move some anchors upwards. The exact number to move upwards
    depends on TargetLabelCount. We'll move as many up as required to
    have TargetLabelCount at each node.
    
    You should avoid situations where MaximumDepth does not allow
    forTargetLabelCount or fewer entries at each node. The MaximumDepth
    is a hard limit while TargetLabelCount is a suggested optimum. You
    will end up with many more than TargetLabelCount entries per node and
    things will be sloooow.
    """
    def ComputeHierarchy(self):
        """
        V.ComputeHierarchy()
        C++: virtual void ComputeHierarchy()
        
        Fill the hierarchy with the input labels.
        """
        ...
    
    def FindCell(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindCell([float, float, float], vtkCell, int, float, int,
            [float, float, float], [float, ...]) -> int
        C++: vtkIdType FindCell(double *, vtkCell *, vtkIdType, double,
            int &, double *, double *) override;
        V.FindCell([float, float, float], vtkCell, vtkGenericCell, int,
            float, int, [float, float, float], [float, ...]) -> int
        C++: vtkIdType FindCell(double *, vtkCell *, vtkGenericCell *,
            vtkIdType, double, int &, double *, double *) override;
        
        Inherited members (from vtkDataSet)
        """
        ...
    
    def GetAnchorFrustumPlanes(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.GetAnchorFrustumPlanes([float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float], vtkRenderer, vtkCoordinate)
        C++: static void GetAnchorFrustumPlanes(double frustumPlanes[24],
            vtkRenderer *ren, vtkCoordinate *anchorTransform)
        
        Compute frustum for quickly excluding labels from rendering that
        are outside the visible region. This is a shared utility
        function.
        """
        ...
    
    def GetBoundedSizes(self):
        """
        V.GetBoundedSizes() -> vtkDataArray
        C++: virtual vtkDataArray *GetBoundedSizes()
        
        Set/get the array specifying the maximum width and height in
        world coordinates of each label.
        """
        ...
    
    def GetCell(self, p_int):
        """
        V.GetCell(int) -> vtkCell
        C++: vtkCell *GetCell(vtkIdType) override;
        V.GetCell(int, vtkGenericCell)
        C++: void GetCell(vtkIdType, vtkGenericCell *) override;
        V.GetCell(int, int, int) -> vtkCell
        C++: virtual vtkCell *GetCell(int i, int j, int k)
        
        Inherited members (from vtkDataSet)
        """
        ...
    
    def GetCellPoints(self, p_int, vtkIdList):
        """
        V.GetCellPoints(int, vtkIdList)
        C++: void GetCellPoints(vtkIdType, vtkIdList *) override;
        
        Inherited members (from vtkDataSet)
        """
        ...
    
    def GetCellType(self, p_int):
        """
        V.GetCellType(int) -> int
        C++: int GetCellType(vtkIdType) override;
        
        Inherited members (from vtkDataSet)
        """
        ...
    
    def GetCenterPts(self):
        """
        V.GetCenterPts() -> vtkPoints
        C++: virtual vtkPoints *GetCenterPts()
        
        Provide access to original coordinates of sets of coincident
        points
        """
        ...
    
    def GetCoincidentPoints(self):
        """
        V.GetCoincidentPoints() -> vtkCoincidentPoints
        C++: virtual vtkCoincidentPoints *GetCoincidentPoints()
        
        Provide access to the set of coincident points that have been
        perturbed by the hierarchy in order to render labels for each
        without overlap.
        """
        ...
    
    def GetDiscreteNodeCoordinatesFromWorldPoint(self, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.GetDiscreteNodeCoordinatesFromWorldPoint([int, int, int],
            [float, float, float], int)
        C++: void GetDiscreteNodeCoordinatesFromWorldPoint(int ijk[3],
            double pt[3], int level)
        
        Given a depth in the hierarchy ( level) and a point pt in world
        space, compute ijk. This is used to find other octree nodes at
        the same level that are within the search radius for candidate
        labels to be placed. It is called with pt set to the camera eye
        point and pythagorean quadruples increasingly distant from the
        origin are added to ijk to identify octree nodes whose labels
        should be placed.
        @param[out] ijk - discrete coordinates of the octree node at
            level containing pt.
        @param[in]  pt - input world point coordinates
        @param[in]  level - input octree level to be considered
        """
        ...
    
    def GetIconIndices(self):
        """
        V.GetIconIndices() -> vtkIntArray
        C++: virtual vtkIntArray *GetIconIndices()
        
        Set/get the array specifying the icon index of each label.
        """
        ...
    
    def GetLabels(self):
        """
        V.GetLabels() -> vtkAbstractArray
        C++: virtual vtkAbstractArray *GetLabels()
        
        Set/get the array specifying the text of each label.
        """
        ...
    
    def GetMaxCellSize(self):
        """
        V.GetMaxCellSize() -> int
        C++: int GetMaxCellSize() override;
        
        Inherited members (from vtkDataSet)
        """
        ...
    
    def GetMaximumDepth(self):
        """
        V.GetMaximumDepth() -> int
        C++: virtual int GetMaximumDepth()
        
        The maximum depth of the octree.
        """
        ...
    
    def GetNumberOfCells(self):
        """
        V.GetNumberOfCells() -> int
        C++: vtkIdType GetNumberOfCells() override;
        
        Inherited members (from vtkDataSet)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methdos for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def GetOrientations(self):
        """
        V.GetOrientations() -> vtkDataArray
        C++: virtual vtkDataArray *GetOrientations()
        
        Set/get the array specifying the orientation of each label.
        """
        ...
    
    def GetPathForNodalCoordinates(self, *int, **kwargs):
        """
        V.GetPathForNodalCoordinates([int, ...], [int, int, int], int)
            -> bool
        C++: static bool GetPathForNodalCoordinates(int *path, int ijk[3],
             int level)
        
        Given a level of the tree and ijk coordinates in a lattice,
        compute a path down the tree to reach the corresponding lattice
        node. If the lattice coordinates are outside the tree, this
        returns false. Otherwise it returns true. This does notguarantee
        that the path exists in the hierarchy.
        @param[out] path - a vector of level integers specifying which
            child to descend at each
        level to reach ijk
        @param[in] ijk - discrete coordinates of the octree node at level
        @param[in] level - input octree level to be considered
        """
        ...
    
    def GetPointCells(self, p_int, vtkIdList):
        """
        V.GetPointCells(int, vtkIdList)
        C++: void GetPointCells(vtkIdType, vtkIdList *) override;
        
        Inherited members (from vtkDataSet)
        """
        ...
    
    def GetPriorities(self):
        """
        V.GetPriorities() -> vtkDataArray
        C++: virtual vtkDataArray *GetPriorities()
        
        Set/get the array specifying the importance (priority) of each
        label.
        """
        ...
    
    def GetSizes(self):
        """
        V.GetSizes() -> vtkDataArray
        C++: virtual vtkDataArray *GetSizes()
        
        Set/get the array specifying the size of each label.
        """
        ...
    
    def GetTargetLabelCount(self):
        """
        V.GetTargetLabelCount() -> int
        C++: virtual int GetTargetLabelCount()
        
        The number of labels that is ideally present at any octree node.
        It is best if this is a multiple of $2^d $.
        """
        ...
    
    def GetTextProperty(self):
        """
        V.GetTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperty()
        
        The default text property assigned to labels in this hierarchy.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methdos for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelHierarchy
        C++: vtkLabelHierarchy *NewInstance()
        
        Standard methdos for type information and printing.
        """
        ...
    
    def NewIterator(self, p_int, vtkRenderer, vtkCamera, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.NewIterator(int, vtkRenderer, vtkCamera, [float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float], bool, [float, float])
            -> vtkLabelHierarchyIterator
        C++: vtkLabelHierarchyIterator *NewIterator(int type,
            vtkRenderer *ren, vtkCamera *cam, double frustumPlanes[24],
            bool positionsAsNormals, float bucketSize[2])
        
        Returns an iterator for this data object. positionsAsNormals
        should only be true when labels are on a sphere centered at the
        origin (3D world).
        @param type - the type should be one of FULL_SORT, QUEUE,
            DEPTH_FIRST, or FRUSTUM.
        @param ren - the current renderer (used for viewport information)
        @param cam - the current camera.
        @param frustumPlanes - should be the output of the camera's
            frustum planes.
        @param positionsAsNormals - throws out octree nodes on the
            opposite side of the origin.
        @param bucketSize - an array of 2 integers describing the width
            and height of label placer
        buckets.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabelHierarchy
        C++: static vtkLabelHierarchy *SafeDownCast(vtkObjectBase *o)
        
        Standard methdos for type information and printing.
        """
        ...
    
    def SetBoundedSizes(self, vtkDataArray):
        """
        V.SetBoundedSizes(vtkDataArray)
        C++: virtual void SetBoundedSizes(vtkDataArray *arr)
        
        Set/get the array specifying the maximum width and height in
        world coordinates of each label.
        """
        ...
    
    def SetIconIndices(self, vtkIntArray):
        """
        V.SetIconIndices(vtkIntArray)
        C++: virtual void SetIconIndices(vtkIntArray *arr)
        
        Set/get the array specifying the icon index of each label.
        """
        ...
    
    def SetLabels(self, vtkAbstractArray):
        """
        V.SetLabels(vtkAbstractArray)
        C++: virtual void SetLabels(vtkAbstractArray *arr)
        
        Set/get the array specifying the text of each label.
        """
        ...
    
    def SetMaximumDepth(self, p_int):
        """
        V.SetMaximumDepth(int)
        C++: virtual void SetMaximumDepth(int _arg)
        
        The maximum depth of the octree.
        """
        ...
    
    def SetOrientations(self, vtkDataArray):
        """
        V.SetOrientations(vtkDataArray)
        C++: virtual void SetOrientations(vtkDataArray *arr)
        
        Set/get the array specifying the orientation of each label.
        """
        ...
    
    def SetPoints(self, vtkPoints):
        """
        V.SetPoints(vtkPoints)
        C++: void SetPoints(vtkPoints *) override;
        
        Override SetPoints so we can reset the hierarchy when the points
        change.
        """
        ...
    
    def SetPriorities(self, vtkDataArray):
        """
        V.SetPriorities(vtkDataArray)
        C++: virtual void SetPriorities(vtkDataArray *arr)
        
        Set/get the array specifying the importance (priority) of each
        label.
        """
        ...
    
    def SetSizes(self, vtkDataArray):
        """
        V.SetSizes(vtkDataArray)
        C++: virtual void SetSizes(vtkDataArray *arr)
        
        Set/get the array specifying the size of each label.
        """
        ...
    
    def SetTargetLabelCount(self, p_int):
        """
        V.SetTargetLabelCount(int)
        C++: virtual void SetTargetLabelCount(int _arg)
        
        The number of labels that is ideally present at any octree node.
        It is best if this is a multiple of $2^d $.
        """
        ...
    
    def SetTextProperty(self, vtkTextProperty):
        """
        V.SetTextProperty(vtkTextProperty)
        C++: virtual void SetTextProperty(vtkTextProperty *tprop)
        
        The default text property assigned to labels in this hierarchy.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DEPTH_FIRST = ...
    FRUSTUM = ...
    FULL_SORT = ...
    IteratorType = ...
    QUEUE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelHierarchyAlgorithm(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkLabelHierarchyAlgorithm - Superclass for algorithms that produce
    only label hierarchies as output
    
    Superclass: vtkAlgorithm
    
    vtkLabelHierarchyAlgorithm is a convenience class to make writing
    algorithms easier. It is also designed to help transition old
    algorithms to the new pipeline architecture. There are some
    assumptions and defaults made by this class you should be aware of.
    This class defaults such that your filter will have one input port
    and one output port. If that is not the case simply change it with
    SetNumberOfInputPorts etc. See this class constructor for the
    default. This class also provides a FillInputPortInfo method that by
    default says that all inputs will be DataObjects. If that isn't the
    case then please override this method in your subclass. This class
    breaks out the downstream requests into separate functions such as
    RequestData and RequestInformation.  You should implement
    RequestData( request, inputVec, outputVec) in subclasses.
    """
    def AddInputData(self, vtkDataObject):
        """
        V.AddInputData(vtkDataObject)
        C++: void AddInputData(vtkDataObject *)
        V.AddInputData(int, vtkDataObject)
        C++: void AddInputData(int, vtkDataObject *)
        
        Assign a data object as input. Note that this method does not
        establish a pipeline connection. Use AddInputConnection() to
        setup a pipeline connection.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataObject
        C++: vtkDataObject *GetInput()
        V.GetInput(int) -> vtkDataObject
        C++: vtkDataObject *GetInput(int port)
        """
        ...
    
    def GetLabelHierarchyInput(self, p_int):
        """
        V.GetLabelHierarchyInput(int) -> vtkLabelHierarchy
        C++: vtkLabelHierarchy *GetLabelHierarchyInput(int port)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkLabelHierarchy
        C++: vtkLabelHierarchy *GetOutput()
        V.GetOutput(int) -> vtkLabelHierarchy
        C++: vtkLabelHierarchy *GetOutput(int)
        
        Get the output data object for a port on this algorithm.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelHierarchyAlgorithm
        C++: vtkLabelHierarchyAlgorithm *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabelHierarchyAlgorithm
        C++: static vtkLabelHierarchyAlgorithm *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: void SetInputData(vtkDataObject *)
        V.SetInputData(int, vtkDataObject)
        C++: void SetInputData(int, vtkDataObject *)
        
        Assign a data object as input. Note that this method does not
        establish a pipeline connection. Use SetInputConnection() to
        setup a pipeline connection.
        """
        ...
    
    def SetOutput(self, vtkDataObject):
        """
        V.SetOutput(vtkDataObject)
        C++: virtual void SetOutput(vtkDataObject *d)
        
        Get the output data object for a port on this algorithm.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelHierarchyIterator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkLabelHierarchyIterator - iterator over vtkLabelHierarchy
    
    Superclass: vtkObject
    
    Abstract superclass for iterators over vtkLabelHierarchy.
    """
    def Begin(self, vtkIdTypeArray):
        """
        V.Begin(vtkIdTypeArray)
        C++: virtual void Begin(vtkIdTypeArray *)
        
        Initializes the iterator. lastLabels is an array holding labels
        which should be traversed before any other labels in the
        hierarchy. This could include labels placed during a previous
        rendering or a label located under the mouse pointer. You may
        pass a null pointer.
        """
        ...
    
    def BoxAllNodes(self, vtkPolyData):
        """
        V.BoxAllNodes(vtkPolyData)
        C++: virtual void BoxAllNodes(vtkPolyData *)
        
        Add a representation for all existing octree nodes to the
        specified polydata. This is equivalent to setting
        TraversedBounds, iterating over the entire hierarchy, and then
        resetting TraversedBounds to its original value.
        """
        ...
    
    def BoxNode(self):
        """
        V.BoxNode()
        C++: virtual void BoxNode()
        
        Add a representation to TraversedBounds for the current octree
        node. This should be called by subclasses inside Next(). Does
        nothing if TraversedBounds is NULL.
        """
        ...
    
    def GetAllBounds(self):
        """
        V.GetAllBounds() -> int
        C++: virtual int GetAllBounds()
        
        Set/get whether all nodes in the hierarchy should be added to the
        TraversedBounds polydata or only those traversed. When non-zero,
        all nodes will be added. By default, AllBounds is 0.
        """
        ...
    
    def GetBoundedSize(self, p_float=..., p_float=...):
        """
        V.GetBoundedSize([float, float])
        C++: virtual void GetBoundedSize(double sz[2])
        
        Retrieves the current label maximum width in world coordinates.
        """
        ...
    
    def GetHierarchy(self):
        """
        V.GetHierarchy() -> vtkLabelHierarchy
        C++: virtual vtkLabelHierarchy *GetHierarchy()
        
        Get the label hierarchy associated with the current label.
        """
        ...
    
    def GetLabel(self):
        """
        V.GetLabel() -> string
        C++: virtual vtkStdString GetLabel()
        
        Retrieves the current label string.
        """
        ...
    
    def GetLabelId(self):
        """
        V.GetLabelId() -> int
        C++: virtual vtkIdType GetLabelId()
        
        Retrieves the current label id.
        """
        ...
    
    def GetNodeGeometry(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.GetNodeGeometry([float, float, float], float)
        C++: virtual void GetNodeGeometry(double ctr[3], double &size)
        
        Retrieve the coordinates of the center of the current hierarchy
        node and the size of the node. Nodes are n-cubes, so the size is
        the length of any edge of the cube. This is used by BoxNode().
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> float
        C++: virtual double GetOrientation()
        
        Retrieves the current label orientation.
        """
        ...
    
    def GetPoint(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint([float, float, float])
        C++: virtual void GetPoint(double x[3])
        
        Retrieves the current label location.
        """
        ...
    
    def GetSize(self, p_float=..., p_float=...):
        """
        V.GetSize([float, float])
        C++: virtual void GetSize(double sz[2])
        
        Retrieves the current label size.
        """
        ...
    
    def GetType(self):
        """
        V.GetType() -> int
        C++: virtual int GetType()
        
        Retrieves the current label type.
        """
        ...
    
    def GetUnicodeLabel(self):
        """
        V.GetUnicodeLabel() -> unicode
        C++: virtual vtkUnicodeString GetUnicodeLabel()
        
        Retrieves the current label as a unicode string.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsAtEnd(self):
        """
        V.IsAtEnd() -> bool
        C++: virtual bool IsAtEnd()
        
        Returns true if the iterator is at the end.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelHierarchyIterator
        C++: vtkLabelHierarchyIterator *NewInstance()
        """
        ...
    
    def Next(self):
        """
        V.Next()
        C++: virtual void Next()
        
        Advance the iterator.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabelHierarchyIterator
        C++: static vtkLabelHierarchyIterator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAllBounds(self, p_int):
        """
        V.SetAllBounds(int)
        C++: virtual void SetAllBounds(int _arg)
        
        Set/get whether all nodes in the hierarchy should be added to the
        TraversedBounds polydata or only those traversed. When non-zero,
        all nodes will be added. By default, AllBounds is 0.
        """
        ...
    
    def SetTraversedBounds(self, vtkPolyData):
        """
        V.SetTraversedBounds(vtkPolyData)
        C++: virtual void SetTraversedBounds(vtkPolyData *)
        
        Sets a polydata to fill with geometry representing the bounding
        boxes of the traversed octree nodes.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelHierarchyCompositeIterator(vtkLabelHierarchyIterator):
    """
    vtkLabelHierarchyCompositeIterator - Iterator over sub-iterators
    
    Superclass: vtkLabelHierarchyIterator
    
    Iterates over child iterators in a round-robin order. Each iterator
    may have its own count, which is the number of times it is repeated
    until moving to the next iterator.
    
    For example, if you initialize the iterator with
    
    it->AddIterator(A, 1); it->AddIterator(B, 3);  The order of iterators
    will be A,B,B,B,A,B,B,B,...
    """
    def AddIterator(self, vtkLabelHierarchyIterator):
        """
        V.AddIterator(vtkLabelHierarchyIterator)
        C++: virtual void AddIterator(vtkLabelHierarchyIterator *it)
        V.AddIterator(vtkLabelHierarchyIterator, int)
        C++: virtual void AddIterator(vtkLabelHierarchyIterator *it,
            int count)
        
        Adds a label iterator to this composite iterator. The second
        optional argument is the number of times to repeat the iterator
        before moving to the next one round-robin style. Default is 1.
        """
        ...
    
    def Begin(self, vtkIdTypeArray):
        """
        V.Begin(vtkIdTypeArray)
        C++: void Begin(vtkIdTypeArray *) override;
        
        Initializes the iterator. lastLabels is an array holding labels
        which should be traversed before any other labels in the
        hierarchy. This could include labels placed during a previous
        rendering or a label located under the mouse pointer. You may
        pass a null pointer.
        """
        ...
    
    def BoxAllNodes(self, vtkPolyData):
        """
        V.BoxAllNodes(vtkPolyData)
        C++: void BoxAllNodes(vtkPolyData *) override;
        
        Not implemented.
        """
        ...
    
    def BoxNode(self):
        """
        V.BoxNode()
        C++: void BoxNode() override;
        
        Not implemented.
        """
        ...
    
    def ClearIterators(self):
        """
        V.ClearIterators()
        C++: virtual void ClearIterators()
        
        Remove all iterators from this composite iterator.
        """
        ...
    
    def GetHierarchy(self):
        """
        V.GetHierarchy() -> vtkLabelHierarchy
        C++: vtkLabelHierarchy *GetHierarchy() override;
        
        Retrieve the current label hierarchy.
        """
        ...
    
    def GetLabelId(self):
        """
        V.GetLabelId() -> int
        C++: vtkIdType GetLabelId() override;
        
        Retrieves the current label id.
        """
        ...
    
    def GetNodeGeometry(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.GetNodeGeometry([float, float, float], float)
        C++: void GetNodeGeometry(double ctr[3], double &size) override;
        
        Retrieve the coordinates of the center of the current hierarchy
        node and the size of the node. Nodes are n-cubes, so the size is
        the length of any edge of the cube. This is used by BoxNode().
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsAtEnd(self):
        """
        V.IsAtEnd() -> bool
        C++: bool IsAtEnd() override;
        
        Returns true if the iterator is at the end.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelHierarchyCompositeIterator
        C++: vtkLabelHierarchyCompositeIterator *NewInstance()
        """
        ...
    
    def Next(self):
        """
        V.Next()
        C++: void Next() override;
        
        Advance the iterator.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkLabelHierarchyCompositeIterator
        C++: static vtkLabelHierarchyCompositeIterator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelPlacementMapper(__vtkmodules_vtkRenderingCore.vtkMapper2D):
    """
    vtkLabelPlacementMapper - Places and renders non-overlapping labels.
    
    Superclass: vtkMapper2D
    
    To use this mapper, first send your data through
    vtkPointSetToLabelHierarchy, which takes a set of points, associates
    special arrays to the points (label, priority, etc.), and produces a
    prioritized spatial tree of labels.
    
    This mapper then takes that hierarchy (or hierarchies) as input, and
    every frame will decide which labels and/or icons to place in order
    of priority, and will render only those labels/icons. A label render
    strategy is used to render the labels, and can use e.g. FreeType or
    Qt for rendering.
    """
    def GeneratePerturbedLabelSpokesOff(self):
        """
        V.GeneratePerturbedLabelSpokesOff()
        C++: virtual void GeneratePerturbedLabelSpokesOff()
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def GeneratePerturbedLabelSpokesOn(self):
        """
        V.GeneratePerturbedLabelSpokesOn()
        C++: virtual void GeneratePerturbedLabelSpokesOn()
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def GetAnchorTransform(self):
        """
        V.GetAnchorTransform() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetAnchorTransform()
        
        Get the transform for the anchor points.
        """
        ...
    
    def GetBackgroundColor(self):
        """
        V.GetBackgroundColor() -> (float, float, float)
        C++: virtual double *GetBackgroundColor()
        
        The color of the background shape.
        """
        ...
    
    def GetBackgroundOpacity(self):
        """
        V.GetBackgroundOpacity() -> float
        C++: virtual double GetBackgroundOpacity()
        
        The opacity of the background shape.
        """
        ...
    
    def GetBackgroundOpacityMaxValue(self):
        """
        V.GetBackgroundOpacityMaxValue() -> float
        C++: virtual double GetBackgroundOpacityMaxValue()
        
        The opacity of the background shape.
        """
        ...
    
    def GetBackgroundOpacityMinValue(self):
        """
        V.GetBackgroundOpacityMinValue() -> float
        C++: virtual double GetBackgroundOpacityMinValue()
        
        The opacity of the background shape.
        """
        ...
    
    def GetGeneratePerturbedLabelSpokes(self):
        """
        V.GetGeneratePerturbedLabelSpokes() -> bool
        C++: virtual bool GetGeneratePerturbedLabelSpokes()
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def GetIteratorType(self):
        """
        V.GetIteratorType() -> int
        C++: virtual int GetIteratorType()
        
        The type of iterator used when traversing the labels. May be
        vtkLabelHierarchy::FRUSTUM or vtkLabelHierarchy::FULL_SORT
        """
        ...
    
    def GetMargin(self):
        """
        V.GetMargin() -> float
        C++: virtual double GetMargin()
        
        The size of the margin on the label background shape. Default is
        5.
        """
        ...
    
    def GetMaximumLabelFraction(self):
        """
        V.GetMaximumLabelFraction() -> float
        C++: virtual double GetMaximumLabelFraction()
        
        The maximum fraction of the screen that the labels may cover.
        Label placement stops when this fraction is reached.
        """
        ...
    
    def GetMaximumLabelFractionMaxValue(self):
        """
        V.GetMaximumLabelFractionMaxValue() -> float
        C++: virtual double GetMaximumLabelFractionMaxValue()
        
        The maximum fraction of the screen that the labels may cover.
        Label placement stops when this fraction is reached.
        """
        ...
    
    def GetMaximumLabelFractionMinValue(self):
        """
        V.GetMaximumLabelFractionMinValue() -> float
        C++: virtual double GetMaximumLabelFractionMinValue()
        
        The maximum fraction of the screen that the labels may cover.
        Label placement stops when this fraction is reached.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputTraversedBounds(self):
        """
        V.GetOutputTraversedBounds() -> bool
        C++: virtual bool GetOutputTraversedBounds()
        
        Whether to render traversed bounds. Off by default.
        """
        ...
    
    def GetPlaceAllLabels(self):
        """
        V.GetPlaceAllLabels() -> bool
        C++: virtual bool GetPlaceAllLabels()
        
        Tells the placer to place every label regardless of overlap. Off
        by default.
        """
        ...
    
    def GetPositionsAsNormals(self):
        """
        V.GetPositionsAsNormals() -> bool
        C++: virtual bool GetPositionsAsNormals()
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def GetRenderStrategy(self):
        """
        V.GetRenderStrategy() -> vtkLabelRenderStrategy
        C++: virtual vtkLabelRenderStrategy *GetRenderStrategy()
        
        Set the label rendering strategy.
        """
        ...
    
    def GetShape(self):
        """
        V.GetShape() -> int
        C++: virtual int GetShape()
        
        The shape of the label background, should be one of the values in
        the LabelShape enumeration.
        """
        ...
    
    def GetShapeMaxValue(self):
        """
        V.GetShapeMaxValue() -> int
        C++: virtual int GetShapeMaxValue()
        
        The shape of the label background, should be one of the values in
        the LabelShape enumeration.
        """
        ...
    
    def GetShapeMinValue(self):
        """
        V.GetShapeMinValue() -> int
        C++: virtual int GetShapeMinValue()
        
        The shape of the label background, should be one of the values in
        the LabelShape enumeration.
        """
        ...
    
    def GetStyle(self):
        """
        V.GetStyle() -> int
        C++: virtual int GetStyle()
        
        The style of the label background shape, should be one of the
        values in the LabelStyle enumeration.
        """
        ...
    
    def GetStyleMaxValue(self):
        """
        V.GetStyleMaxValue() -> int
        C++: virtual int GetStyleMaxValue()
        
        The style of the label background shape, should be one of the
        values in the LabelStyle enumeration.
        """
        ...
    
    def GetStyleMinValue(self):
        """
        V.GetStyleMinValue() -> int
        C++: virtual int GetStyleMinValue()
        
        The style of the label background shape, should be one of the
        values in the LabelStyle enumeration.
        """
        ...
    
    def GetUseDepthBuffer(self):
        """
        V.GetUseDepthBuffer() -> bool
        C++: virtual bool GetUseDepthBuffer()
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def GetUseUnicodeStrings(self):
        """
        V.GetUseUnicodeStrings() -> bool
        C++: virtual bool GetUseUnicodeStrings()
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelPlacementMapper
        C++: vtkLabelPlacementMapper *NewInstance()
        """
        ...
    
    def OutputTraversedBoundsOff(self):
        """
        V.OutputTraversedBoundsOff()
        C++: virtual void OutputTraversedBoundsOff()
        
        Whether to render traversed bounds. Off by default.
        """
        ...
    
    def OutputTraversedBoundsOn(self):
        """
        V.OutputTraversedBoundsOn()
        C++: virtual void OutputTraversedBoundsOn()
        
        Whether to render traversed bounds. Off by default.
        """
        ...
    
    def PlaceAllLabelsOff(self):
        """
        V.PlaceAllLabelsOff()
        C++: virtual void PlaceAllLabelsOff()
        
        Tells the placer to place every label regardless of overlap. Off
        by default.
        """
        ...
    
    def PlaceAllLabelsOn(self):
        """
        V.PlaceAllLabelsOn()
        C++: virtual void PlaceAllLabelsOn()
        
        Tells the placer to place every label regardless of overlap. Off
        by default.
        """
        ...
    
    def PositionsAsNormalsOff(self):
        """
        V.PositionsAsNormalsOff()
        C++: virtual void PositionsAsNormalsOff()
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def PositionsAsNormalsOn(self):
        """
        V.PositionsAsNormalsOn()
        C++: virtual void PositionsAsNormalsOn()
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        mapper. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOverlay(self, vtkViewport, vtkActor2D):
        """
        V.RenderOverlay(vtkViewport, vtkActor2D)
        C++: void RenderOverlay(vtkViewport *viewport, vtkActor2D *actor)
            override;
        
        Draw non-overlapping labels to the screen.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabelPlacementMapper
        C++: static vtkLabelPlacementMapper *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBackgroundColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetBackgroundColor(float, float, float)
        C++: virtual void SetBackgroundColor(double _arg1, double _arg2,
            double _arg3)
        V.SetBackgroundColor((float, float, float))
        C++: virtual void SetBackgroundColor(const double _arg[3])
        
        The color of the background shape.
        """
        ...
    
    def SetBackgroundOpacity(self, p_float):
        """
        V.SetBackgroundOpacity(float)
        C++: virtual void SetBackgroundOpacity(double _arg)
        
        The opacity of the background shape.
        """
        ...
    
    def SetGeneratePerturbedLabelSpokes(self, bool):
        """
        V.SetGeneratePerturbedLabelSpokes(bool)
        C++: virtual void SetGeneratePerturbedLabelSpokes(bool _arg)
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def SetIteratorType(self, p_int):
        """
        V.SetIteratorType(int)
        C++: virtual void SetIteratorType(int _arg)
        
        The type of iterator used when traversing the labels. May be
        vtkLabelHierarchy::FRUSTUM or vtkLabelHierarchy::FULL_SORT
        """
        ...
    
    def SetMargin(self, p_float):
        """
        V.SetMargin(float)
        C++: virtual void SetMargin(double _arg)
        
        The size of the margin on the label background shape. Default is
        5.
        """
        ...
    
    def SetMaximumLabelFraction(self, p_float):
        """
        V.SetMaximumLabelFraction(float)
        C++: virtual void SetMaximumLabelFraction(double _arg)
        
        The maximum fraction of the screen that the labels may cover.
        Label placement stops when this fraction is reached.
        """
        ...
    
    def SetOutputTraversedBounds(self, bool):
        """
        V.SetOutputTraversedBounds(bool)
        C++: virtual void SetOutputTraversedBounds(bool _arg)
        
        Whether to render traversed bounds. Off by default.
        """
        ...
    
    def SetPlaceAllLabels(self, bool):
        """
        V.SetPlaceAllLabels(bool)
        C++: virtual void SetPlaceAllLabels(bool _arg)
        
        Tells the placer to place every label regardless of overlap. Off
        by default.
        """
        ...
    
    def SetPositionsAsNormals(self, bool):
        """
        V.SetPositionsAsNormals(bool)
        C++: virtual void SetPositionsAsNormals(bool _arg)
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def SetRenderStrategy(self, vtkLabelRenderStrategy):
        """
        V.SetRenderStrategy(vtkLabelRenderStrategy)
        C++: virtual void SetRenderStrategy(vtkLabelRenderStrategy *s)
        
        Set the label rendering strategy.
        """
        ...
    
    def SetShape(self, p_int):
        """
        V.SetShape(int)
        C++: virtual void SetShape(int _arg)
        
        The shape of the label background, should be one of the values in
        the LabelShape enumeration.
        """
        ...
    
    def SetShapeToNone(self):
        """
        V.SetShapeToNone()
        C++: virtual void SetShapeToNone()
        
        The shape of the label background, should be one of the values in
        the LabelShape enumeration.
        """
        ...
    
    def SetShapeToRect(self):
        """
        V.SetShapeToRect()
        C++: virtual void SetShapeToRect()
        
        The shape of the label background, should be one of the values in
        the LabelShape enumeration.
        """
        ...
    
    def SetShapeToRoundedRect(self):
        """
        V.SetShapeToRoundedRect()
        C++: virtual void SetShapeToRoundedRect()
        
        The shape of the label background, should be one of the values in
        the LabelShape enumeration.
        """
        ...
    
    def SetStyle(self, p_int):
        """
        V.SetStyle(int)
        C++: virtual void SetStyle(int _arg)
        
        The style of the label background shape, should be one of the
        values in the LabelStyle enumeration.
        """
        ...
    
    def SetStyleToFilled(self):
        """
        V.SetStyleToFilled()
        C++: virtual void SetStyleToFilled()
        
        The style of the label background shape, should be one of the
        values in the LabelStyle enumeration.
        """
        ...
    
    def SetStyleToOutline(self):
        """
        V.SetStyleToOutline()
        C++: virtual void SetStyleToOutline()
        
        The style of the label background shape, should be one of the
        values in the LabelStyle enumeration.
        """
        ...
    
    def SetUseDepthBuffer(self, bool):
        """
        V.SetUseDepthBuffer(bool)
        C++: virtual void SetUseDepthBuffer(bool _arg)
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def SetUseUnicodeStrings(self, bool):
        """
        V.SetUseUnicodeStrings(bool)
        C++: virtual void SetUseUnicodeStrings(bool _arg)
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def UseDepthBufferOff(self):
        """
        V.UseDepthBufferOff()
        C++: virtual void UseDepthBufferOff()
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def UseDepthBufferOn(self):
        """
        V.UseDepthBufferOn()
        C++: virtual void UseDepthBufferOn()
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def UseUnicodeStringsOff(self):
        """
        V.UseUnicodeStringsOff()
        C++: virtual void UseUnicodeStringsOff()
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def UseUnicodeStringsOn(self):
        """
        V.UseUnicodeStringsOn()
        C++: virtual void UseUnicodeStringsOn()
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    FILLED = ...
    LabelShape = ...
    LabelStyle = ...
    NONE = ...
    NUMBER_OF_LABEL_SHAPES = ...
    NUMBER_OF_LABEL_STYLES = ...
    OUTLINE = ...
    RECT = ...
    ROUNDED_RECT = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelPlacer(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkLabelPlacer - place a prioritized hierarchy of labels in screen
    space
    
    Superclass: vtkPolyDataAlgorithm
    
    This class is deprecated and will be removed from VTK in a future
    release. Use vtkLabelPlacementMapper instead.
    
    This should probably be a mapper unto itself (given that the polydata
    output could be large and will realistically always be iterated over
    exactly once before being tossed for the next frame of the render).
    
    In any event, it takes as input one (or more, eventually)
    vtkLabelHierarchies that represent prioritized lists of labels sorted
    by their placement in space. As output, it provides vtkPolyData
    containing only VTK_QUAD cells, each representing a single label from
    the input. Each quadrilateral has cell data indicating what label in
    the input it corresponds to (via an array named "LabelId").
    """
    def GeneratePerturbedLabelSpokesOff(self):
        """
        V.GeneratePerturbedLabelSpokesOff()
        C++: virtual void GeneratePerturbedLabelSpokesOff()
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def GeneratePerturbedLabelSpokesOn(self):
        """
        V.GeneratePerturbedLabelSpokesOn()
        C++: virtual void GeneratePerturbedLabelSpokesOn()
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def GetAnchorTransform(self):
        """
        V.GetAnchorTransform() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetAnchorTransform()
        """
        ...
    
    def GetGeneratePerturbedLabelSpokes(self):
        """
        V.GetGeneratePerturbedLabelSpokes() -> bool
        C++: virtual bool GetGeneratePerturbedLabelSpokes()
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def GetGravity(self):
        """
        V.GetGravity() -> int
        C++: virtual int GetGravity()
        
        The placement of the label relative to the anchor point.
        """
        ...
    
    def GetIteratorType(self):
        """
        V.GetIteratorType() -> int
        C++: virtual int GetIteratorType()
        
        The type of iterator used when traversing the labels. May be
        vtkLabelHierarchy::FRUSTUM or vtkLabelHierarchy::FULL_SORT.
        """
        ...
    
    def GetMaximumLabelFraction(self):
        """
        V.GetMaximumLabelFraction() -> float
        C++: virtual double GetMaximumLabelFraction()
        
        The maximum amount of screen space labels can take up before
        placement terminates.
        """
        ...
    
    def GetMaximumLabelFractionMaxValue(self):
        """
        V.GetMaximumLabelFractionMaxValue() -> float
        C++: virtual double GetMaximumLabelFractionMaxValue()
        
        The maximum amount of screen space labels can take up before
        placement terminates.
        """
        ...
    
    def GetMaximumLabelFractionMinValue(self):
        """
        V.GetMaximumLabelFractionMinValue() -> float
        C++: virtual double GetMaximumLabelFractionMinValue()
        
        The maximum amount of screen space labels can take up before
        placement terminates.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return this object's modified time.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputCoordinateSystem(self):
        """
        V.GetOutputCoordinateSystem() -> int
        C++: virtual int GetOutputCoordinateSystem()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def GetOutputCoordinateSystemMaxValue(self):
        """
        V.GetOutputCoordinateSystemMaxValue() -> int
        C++: virtual int GetOutputCoordinateSystemMaxValue()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def GetOutputCoordinateSystemMinValue(self):
        """
        V.GetOutputCoordinateSystemMinValue() -> int
        C++: virtual int GetOutputCoordinateSystemMinValue()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def GetOutputTraversedBounds(self):
        """
        V.GetOutputTraversedBounds() -> bool
        C++: virtual bool GetOutputTraversedBounds()
        
        In the second output, output the geometry of the traversed octree
        nodes.
        """
        ...
    
    def GetPositionsAsNormals(self):
        """
        V.GetPositionsAsNormals() -> bool
        C++: virtual bool GetPositionsAsNormals()
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        """
        ...
    
    def GetUseDepthBuffer(self):
        """
        V.GetUseDepthBuffer() -> bool
        C++: virtual bool GetUseDepthBuffer()
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def GetUseUnicodeStrings(self):
        """
        V.GetUseUnicodeStrings() -> bool
        C++: virtual bool GetUseUnicodeStrings()
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelPlacer
        C++: vtkLabelPlacer *NewInstance()
        """
        ...
    
    def OutputCoordinateSystemDisplay(self):
        """
        V.OutputCoordinateSystemDisplay()
        C++: void OutputCoordinateSystemDisplay()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def OutputCoordinateSystemWorld(self):
        """
        V.OutputCoordinateSystemWorld()
        C++: void OutputCoordinateSystemWorld()
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def OutputTraversedBoundsOff(self):
        """
        V.OutputTraversedBoundsOff()
        C++: virtual void OutputTraversedBoundsOff()
        
        In the second output, output the geometry of the traversed octree
        nodes.
        """
        ...
    
    def OutputTraversedBoundsOn(self):
        """
        V.OutputTraversedBoundsOn()
        C++: virtual void OutputTraversedBoundsOn()
        
        In the second output, output the geometry of the traversed octree
        nodes.
        """
        ...
    
    def PositionsAsNormalsOff(self):
        """
        V.PositionsAsNormalsOff()
        C++: virtual void PositionsAsNormalsOff()
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def PositionsAsNormalsOn(self):
        """
        V.PositionsAsNormalsOn()
        C++: virtual void PositionsAsNormalsOn()
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabelPlacer
        C++: static vtkLabelPlacer *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGeneratePerturbedLabelSpokes(self, bool):
        """
        V.SetGeneratePerturbedLabelSpokes(bool)
        C++: virtual void SetGeneratePerturbedLabelSpokes(bool _arg)
        
        Enable drawing spokes (lines) to anchor point coordinates that
        were perturbed for being coincident with other anchor point
        coordinates.
        """
        ...
    
    def SetGravity(self, p_int):
        """
        V.SetGravity(int)
        C++: virtual void SetGravity(int gravity)
        
        The placement of the label relative to the anchor point.
        """
        ...
    
    def SetIteratorType(self, p_int):
        """
        V.SetIteratorType(int)
        C++: virtual void SetIteratorType(int _arg)
        
        The type of iterator used when traversing the labels. May be
        vtkLabelHierarchy::FRUSTUM or vtkLabelHierarchy::FULL_SORT.
        """
        ...
    
    def SetMaximumLabelFraction(self, p_float):
        """
        V.SetMaximumLabelFraction(float)
        C++: virtual void SetMaximumLabelFraction(double _arg)
        
        The maximum amount of screen space labels can take up before
        placement terminates.
        """
        ...
    
    def SetOutputCoordinateSystem(self, p_int):
        """
        V.SetOutputCoordinateSystem(int)
        C++: virtual void SetOutputCoordinateSystem(int _arg)
        
        Set/get the coordinate system used for output labels. The output
        datasets may have point coordinates reported in the world space
        or display space.
        """
        ...
    
    def SetOutputTraversedBounds(self, bool):
        """
        V.SetOutputTraversedBounds(bool)
        C++: virtual void SetOutputTraversedBounds(bool _arg)
        
        In the second output, output the geometry of the traversed octree
        nodes.
        """
        ...
    
    def SetPositionsAsNormals(self, bool):
        """
        V.SetPositionsAsNormals(bool)
        C++: virtual void SetPositionsAsNormals(bool _arg)
        
        Use label anchor point coordinates as normal vectors and
        eliminate those pointing away from the camera. Valid only when
        points are on a sphere centered at the origin (such as a 3D
        geographic view). Off by default.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: virtual void SetRenderer(vtkRenderer *)
        """
        ...
    
    def SetUseDepthBuffer(self, bool):
        """
        V.SetUseDepthBuffer(bool)
        C++: virtual void SetUseDepthBuffer(bool _arg)
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def SetUseUnicodeStrings(self, bool):
        """
        V.SetUseUnicodeStrings(bool)
        C++: virtual void SetUseUnicodeStrings(bool _arg)
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def UseDepthBufferOff(self):
        """
        V.UseDepthBufferOff()
        C++: virtual void UseDepthBufferOff()
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def UseDepthBufferOn(self):
        """
        V.UseDepthBufferOn()
        C++: virtual void UseDepthBufferOn()
        
        Use the depth buffer to test each label to see if it should not
        be displayed if it would be occluded by other objects in the
        scene. Off by default.
        """
        ...
    
    def UseUnicodeStringsOff(self):
        """
        V.UseUnicodeStringsOff()
        C++: virtual void UseUnicodeStringsOff()
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def UseUnicodeStringsOn(self):
        """
        V.UseUnicodeStringsOn()
        C++: virtual void UseUnicodeStringsOn()
        
        Set whether, or not, to use unicode strings.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BaselineCenter = ...
    BaselineLeft = ...
    BaselineRight = ...
    CenterCenter = ...
    CenterLeft = ...
    CenterRight = ...
    DISPLAY = ...
    HorizontalBitMask = ...
    HorizontalCenterBit = ...
    HorizontalLeftBit = ...
    HorizontalRightBit = ...
    LabelGravity = ...
    LowerCenter = ...
    LowerLeft = ...
    LowerRight = ...
    OutputCoordinates = ...
    UpperCenter = ...
    UpperLeft = ...
    UpperRight = ...
    VerticalBaselineBit = ...
    VerticalBitMask = ...
    VerticalBottomBit = ...
    VerticalCenterBit = ...
    VerticalTopBit = ...
    WORLD = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabelSizeCalculator(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkLabelSizeCalculator - This filter takes an input dataset, an array
    to process (which must be a string array), and a text property.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    It creates a new output array (named "LabelSize" by default) with 4
    components per tuple that contain the width, height, horizontal
    offset, and descender height (in that order) of each string in the
    array.
    
    Use the inherited SelectInputArrayToProcess to indicate a string
    array. In no input array is specified, the first of the following
    that is a string array is used: point scalars, cell scalars, field
    scalars.
    
    The second input array to process is an array specifying the type of
    each label. Different label types may have different font properties.
    This array must be a vtkIntArray. Any type that does not map to a
    font property that was set will be set to the type 0's type property.
    """
    def GetDPI(self):
        """
        V.GetDPI() -> int
        C++: virtual int GetDPI()
        
        Get/Set the DPI at which the labels are to be rendered. Defaults
        to 72.
        @sa vtkWindow::GetDPI()
        """
        ...
    
    def GetFontProperty(self, p_int):
        """
        V.GetFontProperty(int) -> vtkTextProperty
        C++: virtual vtkTextProperty *GetFontProperty(int type=0)
        
        Get/Set the font used compute label sizes. This defaults to
        "Arial" at 12 points. If type is provided, it refers to the type
        of the text label provided in the optional label type array. The
        default type is type 0.
        """
        ...
    
    def GetLabelSizeArrayName(self):
        """
        V.GetLabelSizeArrayName() -> string
        C++: virtual char *GetLabelSizeArrayName()
        
        The name of the output array containing text label sizes This
        defaults to "LabelSize"
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabelSizeCalculator
        C++: vtkLabelSizeCalculator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabelSizeCalculator
        C++: static vtkLabelSizeCalculator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDPI(self, p_int):
        """
        V.SetDPI(int)
        C++: virtual void SetDPI(int _arg)
        
        Get/Set the DPI at which the labels are to be rendered. Defaults
        to 72.
        @sa vtkWindow::GetDPI()
        """
        ...
    
    def SetFontProperty(self, vtkTextProperty, p_int):
        """
        V.SetFontProperty(vtkTextProperty, int)
        C++: virtual void SetFontProperty(vtkTextProperty *fontProp,
            int type=0)
        
        Get/Set the font used compute label sizes. This defaults to
        "Arial" at 12 points. If type is provided, it refers to the type
        of the text label provided in the optional label type array. The
        default type is type 0.
        """
        ...
    
    def SetLabelSizeArrayName(self, string):
        """
        V.SetLabelSizeArrayName(string)
        C++: virtual void SetLabelSizeArrayName(const char *_arg)
        
        The name of the output array containing text label sizes This
        defaults to "LabelSize"
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPointSetToLabelHierarchy(vtkLabelHierarchyAlgorithm):
    """
    vtkPointSetToLabelHierarchy - build a label hierarchy for a graph or
    point set.
    
    Superclass: vtkLabelHierarchyAlgorithm
    
    Every point in the input vtkPoints object is taken to be an anchor
    point for a label. Statistics on the input points are used to
    subdivide an octree referencing the points until the points each
    octree node contains have a variance close to the node size and a
    limited population (< 100).
    """
    def GetBoundedSizeArrayName(self):
        """
        V.GetBoundedSizeArrayName() -> string
        C++: virtual const char *GetBoundedSizeArrayName()
        
        Set/get the maximum text width (in world coordinates) array name.
        """
        ...
    
    def GetIconIndexArrayName(self):
        """
        V.GetIconIndexArrayName() -> string
        C++: virtual const char *GetIconIndexArrayName()
        
        Set/get the icon index array name.
        """
        ...
    
    def GetLabelArrayName(self):
        """
        V.GetLabelArrayName() -> string
        C++: virtual const char *GetLabelArrayName()
        
        Set/get the label array name.
        """
        ...
    
    def GetMaximumDepth(self):
        """
        V.GetMaximumDepth() -> int
        C++: virtual int GetMaximumDepth()
        
        Set/get the maximum tree depth in the output hierarchy.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientationArrayName(self):
        """
        V.GetOrientationArrayName() -> string
        C++: virtual const char *GetOrientationArrayName()
        
        Set/get the text orientation array name.
        """
        ...
    
    def GetPriorityArrayName(self):
        """
        V.GetPriorityArrayName() -> string
        C++: virtual const char *GetPriorityArrayName()
        
        Set/get the priority array name.
        """
        ...
    
    def GetSizeArrayName(self):
        """
        V.GetSizeArrayName() -> string
        C++: virtual const char *GetSizeArrayName()
        
        Set/get the priority array name.
        """
        ...
    
    def GetTargetLabelCount(self):
        """
        V.GetTargetLabelCount() -> int
        C++: virtual int GetTargetLabelCount()
        
        Set/get the "ideal" number of labels to associate with each node
        in the output hierarchy.
        """
        ...
    
    def GetTextProperty(self):
        """
        V.GetTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperty()
        
        Set/get the text property assigned to the hierarchy.
        """
        ...
    
    def GetUseUnicodeStrings(self):
        """
        V.GetUseUnicodeStrings() -> bool
        C++: virtual bool GetUseUnicodeStrings()
        
        Whether to use unicode strings.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointSetToLabelHierarchy
        C++: vtkPointSetToLabelHierarchy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointSetToLabelHierarchy
        C++: static vtkPointSetToLabelHierarchy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBoundedSizeArrayName(self, string):
        """
        V.SetBoundedSizeArrayName(string)
        C++: virtual void SetBoundedSizeArrayName(const char *name)
        
        Set/get the maximum text width (in world coordinates) array name.
        """
        ...
    
    def SetIconIndexArrayName(self, string):
        """
        V.SetIconIndexArrayName(string)
        C++: virtual void SetIconIndexArrayName(const char *name)
        
        Set/get the icon index array name.
        """
        ...
    
    def SetLabelArrayName(self, string):
        """
        V.SetLabelArrayName(string)
        C++: virtual void SetLabelArrayName(const char *name)
        
        Set/get the label array name.
        """
        ...
    
    def SetMaximumDepth(self, p_int):
        """
        V.SetMaximumDepth(int)
        C++: virtual void SetMaximumDepth(int _arg)
        
        Set/get the maximum tree depth in the output hierarchy.
        """
        ...
    
    def SetOrientationArrayName(self, string):
        """
        V.SetOrientationArrayName(string)
        C++: virtual void SetOrientationArrayName(const char *name)
        
        Set/get the text orientation array name.
        """
        ...
    
    def SetPriorityArrayName(self, string):
        """
        V.SetPriorityArrayName(string)
        C++: virtual void SetPriorityArrayName(const char *name)
        
        Set/get the priority array name.
        """
        ...
    
    def SetSizeArrayName(self, string):
        """
        V.SetSizeArrayName(string)
        C++: virtual void SetSizeArrayName(const char *name)
        
        Set/get the priority array name.
        """
        ...
    
    def SetTargetLabelCount(self, p_int):
        """
        V.SetTargetLabelCount(int)
        C++: virtual void SetTargetLabelCount(int _arg)
        
        Set/get the "ideal" number of labels to associate with each node
        in the output hierarchy.
        """
        ...
    
    def SetTextProperty(self, vtkTextProperty):
        """
        V.SetTextProperty(vtkTextProperty)
        C++: virtual void SetTextProperty(vtkTextProperty *tprop)
        
        Set/get the text property assigned to the hierarchy.
        """
        ...
    
    def SetUseUnicodeStrings(self, bool):
        """
        V.SetUseUnicodeStrings(bool)
        C++: virtual void SetUseUnicodeStrings(bool _arg)
        
        Whether to use unicode strings.
        """
        ...
    
    def UseUnicodeStringsOff(self):
        """
        V.UseUnicodeStringsOff()
        C++: virtual void UseUnicodeStringsOff()
        
        Whether to use unicode strings.
        """
        ...
    
    def UseUnicodeStringsOn(self):
        """
        V.UseUnicodeStringsOn()
        C++: virtual void UseUnicodeStringsOn()
        
        Whether to use unicode strings.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
