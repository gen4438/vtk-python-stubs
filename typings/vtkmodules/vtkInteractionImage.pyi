"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkImageViewer(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkImageViewer - Display a 2d image.
    
    Superclass: vtkObject
    
    vtkImageViewer is a convenience class for displaying a 2d image.  It
    packages up the functionality found in vtkRenderWindow, vtkRenderer,
    vtkActor2D and vtkImageMapper into a single easy to use class. 
    Behind the scenes these four classes are actually used to to provide
    the required functionality. vtkImageViewer is simply a wrapper around
    them.
    
    @sa
    vtkRenderWindow vtkRenderer vtkImageMapper vtkActor2D
    """
    def GetActor2D(self):
        """
        V.GetActor2D() -> vtkActor2D
        C++: virtual vtkActor2D *GetActor2D()
        
        Get the internal objects
        """
        ...
    
    def GetColorLevel(self):
        """
        V.GetColorLevel() -> float
        C++: double GetColorLevel()
        
        Sets window/level for mapping pixels to colors.
        """
        ...
    
    def GetColorWindow(self):
        """
        V.GetColorWindow() -> float
        C++: double GetColorWindow()
        
        Sets window/level for mapping pixels to colors.
        """
        ...
    
    def GetImageMapper(self):
        """
        V.GetImageMapper() -> vtkImageMapper
        C++: virtual vtkImageMapper *GetImageMapper()
        
        Get the internal objects
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: vtkImageData *GetInput()
        
        Set/Get the input to the viewer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOffScreenRendering(self):
        """
        V.GetOffScreenRendering() -> int
        C++: vtkTypeBool GetOffScreenRendering()
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (int, int)
        C++: int *GetPosition()
        
        Get the position (x and y) of the rendering window in screen
        coordinates (in pixels).
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        Get the internal objects
        """
        ...
    
    def GetRenderWindow(self):
        """
        V.GetRenderWindow() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetRenderWindow()
        
        Get the internal objects
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> (int, int)
        C++: int *GetSize()
        
        Get the size (width and height) of the rendering window in screen
        coordinates (in pixels).
        """
        ...
    
    def GetWholeZMax(self):
        """
        V.GetWholeZMax() -> int
        C++: int GetWholeZMax()
        
        What is the possible Min/ Max z slices available.
        """
        ...
    
    def GetWholeZMin(self):
        """
        V.GetWholeZMin() -> int
        C++: int GetWholeZMin()
        
        What is the possible Min/ Max z slices available.
        """
        ...
    
    def GetWindowName(self):
        """
        V.GetWindowName() -> string
        C++: char *GetWindowName()
        
        Get name of rendering window
        """
        ...
    
    def GetZSlice(self):
        """
        V.GetZSlice() -> int
        C++: int GetZSlice()
        
        Set/Get the current Z Slice to display
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageViewer
        C++: vtkImageViewer *NewInstance()
        """
        ...
    
    def OffScreenRenderingOff(self):
        """
        V.OffScreenRenderingOff()
        C++: void OffScreenRenderingOff()
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def OffScreenRenderingOn(self):
        """
        V.OffScreenRenderingOn()
        C++: void OffScreenRenderingOn()
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: virtual void Render(void)
        
        Render the resulting image.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageViewer
        C++: static vtkImageViewer *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColorLevel(self, p_float):
        """
        V.SetColorLevel(float)
        C++: void SetColorLevel(double s)
        
        Sets window/level for mapping pixels to colors.
        """
        ...
    
    def SetColorWindow(self, p_float):
        """
        V.SetColorWindow(float)
        C++: void SetColorWindow(double s)
        
        Sets window/level for mapping pixels to colors.
        """
        ...
    
    def SetDisplayId(self, void):
        """
        V.SetDisplayId(void)
        C++: void SetDisplayId(void *a)
        
        These are here for using a tk window.
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *input)
        
        Set/Get the input to the viewer.
        """
        ...
    
    def SetInputData(self, vtkImageData):
        """
        V.SetInputData(vtkImageData)
        C++: void SetInputData(vtkImageData *in)
        
        Set/Get the input to the viewer.
        """
        ...
    
    def SetOffScreenRendering(self, p_int):
        """
        V.SetOffScreenRendering(int)
        C++: void SetOffScreenRendering(vtkTypeBool)
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def SetParentId(self, void):
        """
        V.SetParentId(void)
        C++: void SetParentId(void *a)
        
        These are here for using a tk window.
        """
        ...
    
    def SetPosition(self, p_int, p_int_1):
        """
        V.SetPosition(int, int)
        C++: void SetPosition(int x, int y)
        V.SetPosition([int, int])
        C++: virtual void SetPosition(int a[2])
        
        Set the position (x and y) of the rendering window in screen
        coordinates (in pixels). This resizes the operating system's
        view/window and redraws it.
        """
        ...
    
    def SetRenderWindow(self, vtkRenderWindow):
        """
        V.SetRenderWindow(vtkRenderWindow)
        C++: void SetRenderWindow(vtkRenderWindow *renWin)
        
        Get the internal objects
        """
        ...
    
    def SetSize(self, p_int, p_int_1):
        """
        V.SetSize(int, int)
        C++: void SetSize(int width, int height)
        V.SetSize([int, int])
        C++: virtual void SetSize(int a[2])
        
        Set the size (width and height) of the rendering window in screen
        coordinates (in pixels). This resizes the operating system's
        view/window and redraws it.
        
        If the size has changed, this method will fire
        vtkCommand::WindowResizeEvent.
        """
        ...
    
    def SetupInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetupInteractor(vtkRenderWindowInteractor)
        C++: void SetupInteractor(vtkRenderWindowInteractor *)
        
        Create and attach an interactor for this window
        """
        ...
    
    def SetWindowId(self, void):
        """
        V.SetWindowId(void)
        C++: void SetWindowId(void *a)
        
        These are here for using a tk window.
        """
        ...
    
    def SetZSlice(self, p_int):
        """
        V.SetZSlice(int)
        C++: void SetZSlice(int s)
        
        Set/Get the current Z Slice to display
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageViewer2(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkImageViewer2 - Display a 2D image.
    
    Superclass: vtkObject
    
    vtkImageViewer2 is a convenience class for displaying a 2D image.  It
    packages up the functionality found in vtkRenderWindow, vtkRenderer,
    vtkImageActor and vtkImageMapToWindowLevelColors into a single easy
    to use class.  This class also creates an image interactor style
    (vtkInteractorStyleImage) that allows zooming and panning of images,
    and supports interactive window/level operations on the image. Note
    that vtkImageViewer2 is simply a wrapper around these classes.
    
    vtkImageViewer2 uses the 3D rendering and texture mapping engine to
    draw an image on a plane.  This allows for rapid rendering, zooming,
    and panning. The image is placed in the 3D scene at a depth based on
    the z-coordinate of the particular image slice. Each call to
    SetSlice() changes the image data (slice) displayed AND changes the
    depth of the displayed slice in the 3D scene. This can be controlled
    by the AutoAdjustCameraClippingRange ivar of the InteractorStyle
    member.
    
    It is possible to mix images and geometry, using the methods:
    
    viewer->SetInputConnection( imageSource->GetOutputPort() ); // or
    viewer->SetInputData ( image ); viewer->GetRenderer()->AddActor(
    myActor );
    
    This can be used to annotate an image with a PolyData of "edges" or
    or highlight sections of an image or display a 3D isosurface with a
    slice from the volume, etc. Any portions of your geometry that are in
    front of the displayed slice will be visible; any portions of your
    geometry that are behind the displayed slice will be obscured. A more
    general framework (with respect to viewing direction) for achieving
    this effect is provided by the vtkImagePlaneWidget .
    
    Note that pressing 'r' will reset the window/level and pressing
    shift+'r' or control+'r' will reset the camera.
    
    @sa
    vtkRenderWindow vtkRenderer vtkImageActor
    vtkImageMapToWindowLevelColors
    """
    def GetColorLevel(self):
        """
        V.GetColorLevel() -> float
        C++: virtual double GetColorLevel()
        
        Set window and level for mapping pixels to colors.
        """
        ...
    
    def GetColorWindow(self):
        """
        V.GetColorWindow() -> float
        C++: virtual double GetColorWindow()
        
        Set window and level for mapping pixels to colors.
        """
        ...
    
    def GetImageActor(self):
        """
        V.GetImageActor() -> vtkImageActor
        C++: virtual vtkImageActor *GetImageActor()
        
        Get the internal render window, renderer, image actor, and image
        map instances.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: virtual vtkImageData *GetInput()
        
        Set/Get the input image to the viewer.
        """
        ...
    
    def GetInteractorStyle(self):
        """
        V.GetInteractorStyle() -> vtkInteractorStyleImage
        C++: virtual vtkInteractorStyleImage *GetInteractorStyle()
        
        Get the internal render window, renderer, image actor, and image
        map instances.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOffScreenRendering(self):
        """
        V.GetOffScreenRendering() -> int
        C++: virtual vtkTypeBool GetOffScreenRendering()
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (int, int)
        C++: virtual int *GetPosition()
        
        Get the position (x and y) of the rendering window in screen
        coordinates (in pixels).
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        Get the internal render window, renderer, image actor, and image
        map instances.
        """
        ...
    
    def GetRenderWindow(self):
        """
        V.GetRenderWindow() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetRenderWindow()
        
        Get the internal render window, renderer, image actor, and image
        map instances.
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> (int, int)
        C++: virtual int *GetSize()
        
        Get the size (width and height) of the rendering window in screen
        coordinates (in pixels).
        """
        ...
    
    def GetSlice(self):
        """
        V.GetSlice() -> int
        C++: virtual int GetSlice()
        
        Set/Get the current slice to display (depending on the
        orientation this can be in X, Y or Z).
        """
        ...
    
    def GetSliceMax(self):
        """
        V.GetSliceMax() -> int
        C++: virtual int GetSliceMax()
        
        Return the minimum and maximum slice values (depending on the
        orientation this can be in X, Y or Z).
        """
        ...
    
    def GetSliceMin(self):
        """
        V.GetSliceMin() -> int
        C++: virtual int GetSliceMin()
        
        Return the minimum and maximum slice values (depending on the
        orientation this can be in X, Y or Z).
        """
        ...
    
    def GetSliceOrientation(self):
        """
        V.GetSliceOrientation() -> int
        C++: virtual int GetSliceOrientation()
        """
        ...
    
    def GetSliceRange(self, p_int=..., p_int=...):
        """
        V.GetSliceRange([int, int])
        C++: virtual void GetSliceRange(int range[2])
        V.GetSliceRange(int, int)
        C++: virtual void GetSliceRange(int &min, int &max)
        V.GetSliceRange() -> (int, ...)
        C++: virtual int *GetSliceRange()
        
        Return the minimum and maximum slice values (depending on the
        orientation this can be in X, Y or Z).
        """
        ...
    
    def GetWindowLevel(self):
        """
        V.GetWindowLevel() -> vtkImageMapToWindowLevelColors
        C++: virtual vtkImageMapToWindowLevelColors *GetWindowLevel()
        
        Get the internal render window, renderer, image actor, and image
        map instances.
        """
        ...
    
    def GetWindowName(self):
        """
        V.GetWindowName() -> string
        C++: virtual const char *GetWindowName()
        
        Get the name of rendering window.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageViewer2
        C++: vtkImageViewer2 *NewInstance()
        """
        ...
    
    def OffScreenRenderingOff(self):
        """
        V.OffScreenRenderingOff()
        C++: virtual void OffScreenRenderingOff()
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def OffScreenRenderingOn(self):
        """
        V.OffScreenRenderingOn()
        C++: virtual void OffScreenRenderingOn()
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: virtual void Render(void)
        
        Render the resulting image.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageViewer2
        C++: static vtkImageViewer2 *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColorLevel(self, p_float):
        """
        V.SetColorLevel(float)
        C++: virtual void SetColorLevel(double s)
        
        Set window and level for mapping pixels to colors.
        """
        ...
    
    def SetColorWindow(self, p_float):
        """
        V.SetColorWindow(float)
        C++: virtual void SetColorWindow(double s)
        
        Set window and level for mapping pixels to colors.
        """
        ...
    
    def SetDisplayId(self, void):
        """
        V.SetDisplayId(void)
        C++: virtual void SetDisplayId(void *a)
        
        These are here when using a Tk window.
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *input)
        
        Set/Get the input image to the viewer.
        """
        ...
    
    def SetInputData(self, vtkImageData):
        """
        V.SetInputData(vtkImageData)
        C++: virtual void SetInputData(vtkImageData *in)
        
        Set/Get the input image to the viewer.
        """
        ...
    
    def SetOffScreenRendering(self, p_int):
        """
        V.SetOffScreenRendering(int)
        C++: virtual void SetOffScreenRendering(vtkTypeBool)
        
        Create a window in memory instead of on the screen. This may not
        be supported for every type of window and on some windows you may
        need to invoke this prior to the first render.
        """
        ...
    
    def SetParentId(self, void):
        """
        V.SetParentId(void)
        C++: virtual void SetParentId(void *a)
        
        These are here when using a Tk window.
        """
        ...
    
    def SetPosition(self, p_int, p_int_1):
        """
        V.SetPosition(int, int)
        C++: virtual void SetPosition(int x, int y)
        V.SetPosition([int, int])
        C++: virtual void SetPosition(int a[2])
        
        Set the position (x and y) of the rendering window in screen
        coordinates (in pixels). This resizes the operating system's
        view/window and redraws it.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: virtual void SetRenderer(vtkRenderer *arg)
        
        Set your own renderwindow and renderer
        """
        ...
    
    def SetRenderWindow(self, vtkRenderWindow):
        """
        V.SetRenderWindow(vtkRenderWindow)
        C++: virtual void SetRenderWindow(vtkRenderWindow *arg)
        
        Set your own renderwindow and renderer
        """
        ...
    
    def SetSize(self, p_int, p_int_1):
        """
        V.SetSize(int, int)
        C++: virtual void SetSize(int width, int height)
        V.SetSize([int, int])
        C++: virtual void SetSize(int a[2])
        
        Set the size (width and height) of the rendering window in screen
        coordinates (in pixels). This resizes the operating system's
        view/window and redraws it.
        
        If the size has changed, this method will fire
        vtkCommand::WindowResizeEvent.
        """
        ...
    
    def SetSlice(self, p_int):
        """
        V.SetSlice(int)
        C++: virtual void SetSlice(int s)
        
        Set/Get the current slice to display (depending on the
        orientation this can be in X, Y or Z).
        """
        ...
    
    def SetSliceOrientation(self, p_int):
        """
        V.SetSliceOrientation(int)
        C++: virtual void SetSliceOrientation(int orientation)
        """
        ...
    
    def SetSliceOrientationToXY(self):
        """
        V.SetSliceOrientationToXY()
        C++: virtual void SetSliceOrientationToXY()
        """
        ...
    
    def SetSliceOrientationToXZ(self):
        """
        V.SetSliceOrientationToXZ()
        C++: virtual void SetSliceOrientationToXZ()
        """
        ...
    
    def SetSliceOrientationToYZ(self):
        """
        V.SetSliceOrientationToYZ()
        C++: virtual void SetSliceOrientationToYZ()
        """
        ...
    
    def SetupInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetupInteractor(vtkRenderWindowInteractor)
        C++: virtual void SetupInteractor(vtkRenderWindowInteractor *)
        
        Attach an interactor for the internal render window.
        """
        ...
    
    def SetWindowId(self, void):
        """
        V.SetWindowId(void)
        C++: virtual void SetWindowId(void *a)
        
        These are here when using a Tk window.
        """
        ...
    
    def UpdateDisplayExtent(self):
        """
        V.UpdateDisplayExtent()
        C++: virtual void UpdateDisplayExtent()
        
        Update the display extent manually so that the proper slice for
        the given orientation is displayed. It will also try to set a
        reasonable camera clipping range. This method is called
        automatically when the Input is changed, but most of the time the
        input of this class is likely to remain the same, i.e. connected
        to the output of a filter, or an image reader. When the input of
        this filter or reader itself is changed, an error message might
        be displayed since the current display extent is probably outside
        the new whole extent. Calling this method will ensure that the
        display extent is reset properly.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    SLICE_ORIENTATION_XY = ...
    SLICE_ORIENTATION_XZ = ...
    SLICE_ORIENTATION_YZ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkResliceImageViewer(vtkImageViewer2):
    """
    vtkResliceImageViewer - Display an image along with a reslice cursor
    
    Superclass: vtkImageViewer2
    
    This class is similar to vtkImageViewer2. It displays the image along
    with a two cross hairs for reslicing. The cross hairs may be
    interactively manipulated and are typically used to reslice two other
    views of vtkResliceImageViewer. See QtVTKRenderWindows for an
    example. The reslice cursor is used to perform thin or thick MPR
    through data. The class can also default to the behaviour of
    vtkImageViewer2 if the Reslice mode is set to RESLICE_AXIS_ALIGNED.
    @sa
    vtkResliceCursor vtkResliceCursorWidget
    vtkResliceCursorRepresentation
    """
    def GetInteractor(self):
        """
        V.GetInteractor() -> vtkRenderWindowInteractor
        C++: virtual vtkRenderWindowInteractor *GetInteractor()
        
        Get the render window interactor
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: vtkScalarsToColors *GetLookupTable()
        
        Set the lookup table
        """
        ...
    
    def GetMeasurements(self):
        """
        V.GetMeasurements() -> vtkResliceImageViewerMeasurements
        C++: virtual vtkResliceImageViewerMeasurements *GetMeasurements()
        
        Get the measurements manager
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetPointPlacer(self):
        """
        V.GetPointPlacer() -> vtkBoundedPlanePointPlacer
        C++: virtual vtkBoundedPlanePointPlacer *GetPointPlacer()
        
        Get the point placer.
        """
        ...
    
    def GetResliceCursor(self):
        """
        V.GetResliceCursor() -> vtkResliceCursor
        C++: vtkResliceCursor *GetResliceCursor()
        
        Set/Get the reslice cursor.
        """
        ...
    
    def GetResliceCursorWidget(self):
        """
        V.GetResliceCursorWidget() -> vtkResliceCursorWidget
        C++: virtual vtkResliceCursorWidget *GetResliceCursorWidget()
        
        Get the internal render window, renderer, image actor, and image
        map instances.
        """
        ...
    
    def GetResliceMode(self):
        """
        V.GetResliceMode() -> int
        C++: virtual int GetResliceMode()
        """
        ...
    
    def GetSliceScrollOnMouseWheel(self):
        """
        V.GetSliceScrollOnMouseWheel() -> int
        C++: virtual vtkTypeBool GetSliceScrollOnMouseWheel()
        
        Scroll slices on the mouse wheel ? In the case of MPR view, it
        moves one "normalized spacing" in the direction of the normal to
        the resliced plane, provided the new center will continue to lie
        within the volume.
        """
        ...
    
    def GetThickMode(self):
        """
        V.GetThickMode() -> int
        C++: virtual int GetThickMode()
        
        Switch to / from thick mode
        """
        ...
    
    def IncrementSlice(self, p_int):
        """
        V.IncrementSlice(int)
        C++: virtual void IncrementSlice(int n)
        
        Increment/Decrement slice by 'n' slices
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkResliceImageViewer
        C++: vtkResliceImageViewer *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: void Render() override;
        
        Render the resulting image.
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: virtual void Reset()
        
        Reset all views back to initial state
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkResliceImageViewer
        C++: static vtkResliceImageViewer *SafeDownCast(vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetColorLevel(self, p_float):
        """
        V.SetColorLevel(float)
        C++: void SetColorLevel(double s) override;
        
        Set window and level for mapping pixels to colors.
        """
        ...
    
    def SetColorWindow(self, p_float):
        """
        V.SetColorWindow(float)
        C++: void SetColorWindow(double s) override;
        
        Set window and level for mapping pixels to colors.
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: void SetInputConnection(vtkAlgorithmOutput *input) override;
        
        Set/Get the input image to the viewer.
        """
        ...
    
    def SetInputData(self, vtkImageData):
        """
        V.SetInputData(vtkImageData)
        C++: void SetInputData(vtkImageData *in) override;
        
        Set/Get the input image to the viewer.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: virtual void SetLookupTable(vtkScalarsToColors *)
        
        Set the lookup table
        """
        ...
    
    def SetResliceCursor(self, vtkResliceCursor):
        """
        V.SetResliceCursor(vtkResliceCursor)
        C++: void SetResliceCursor(vtkResliceCursor *rc)
        
        Set/Get the reslice cursor.
        """
        ...
    
    def SetResliceMode(self, p_int):
        """
        V.SetResliceMode(int)
        C++: virtual void SetResliceMode(int resliceMode)
        """
        ...
    
    def SetResliceModeToAxisAligned(self):
        """
        V.SetResliceModeToAxisAligned()
        C++: virtual void SetResliceModeToAxisAligned()
        """
        ...
    
    def SetResliceModeToOblique(self):
        """
        V.SetResliceModeToOblique()
        C++: virtual void SetResliceModeToOblique()
        """
        ...
    
    def SetSliceScrollOnMouseWheel(self, p_int):
        """
        V.SetSliceScrollOnMouseWheel(int)
        C++: virtual void SetSliceScrollOnMouseWheel(vtkTypeBool _arg)
        
        Scroll slices on the mouse wheel ? In the case of MPR view, it
        moves one "normalized spacing" in the direction of the normal to
        the resliced plane, provided the new center will continue to lie
        within the volume.
        """
        ...
    
    def SetThickMode(self, p_int):
        """
        V.SetThickMode(int)
        C++: virtual void SetThickMode(int)
        
        Switch to / from thick mode
        """
        ...
    
    def SliceScrollOnMouseWheelOff(self):
        """
        V.SliceScrollOnMouseWheelOff()
        C++: virtual void SliceScrollOnMouseWheelOff()
        
        Scroll slices on the mouse wheel ? In the case of MPR view, it
        moves one "normalized spacing" in the direction of the normal to
        the resliced plane, provided the new center will continue to lie
        within the volume.
        """
        ...
    
    def SliceScrollOnMouseWheelOn(self):
        """
        V.SliceScrollOnMouseWheelOn()
        C++: virtual void SliceScrollOnMouseWheelOn()
        
        Scroll slices on the mouse wheel ? In the case of MPR view, it
        moves one "normalized spacing" in the direction of the normal to
        the resliced plane, provided the new center will continue to lie
        within the volume.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    RESLICE_AXIS_ALIGNED = ...
    RESLICE_OBLIQUE = ...
    SliceChangedEvent = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkResliceImageViewerMeasurements(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkResliceImageViewerMeasurements - Manage measurements on a resliced
    image
    
    Superclass: vtkObject
    
    This class manages measurements on the resliced image. It toggles the
    the visibility of the measurements based on whether the resliced
    image is the same orientation as when the measurement was initially
    placed.
    @sa
    vtkResliceCursor vtkResliceCursorWidget
    vtkResliceCursorRepresentation
    """
    def AddItem(self, vtkAbstractWidget):
        """
        V.AddItem(vtkAbstractWidget)
        C++: virtual void AddItem(vtkAbstractWidget *)
        
        Add / remove a measurement widget
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetProcessEvents(self):
        """
        V.GetProcessEvents() -> int
        C++: virtual vtkTypeBool GetProcessEvents()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def GetProcessEventsMaxValue(self):
        """
        V.GetProcessEventsMaxValue() -> int
        C++: virtual vtkTypeBool GetProcessEventsMaxValue()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def GetProcessEventsMinValue(self):
        """
        V.GetProcessEventsMinValue() -> int
        C++: virtual vtkTypeBool GetProcessEventsMinValue()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def GetResliceImageViewer(self):
        """
        V.GetResliceImageViewer() -> vtkResliceImageViewer
        C++: virtual vtkResliceImageViewer *GetResliceImageViewer()
        
        Set the reslice image viewer. This is automatically done in the
        class vtkResliceImageViewer
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        Tolerance for Point-in-Plane check
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkResliceImageViewerMeasurements
        C++: vtkResliceImageViewerMeasurements *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def ProcessEventsOff(self):
        """
        V.ProcessEventsOff()
        C++: virtual void ProcessEventsOff()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def ProcessEventsOn(self):
        """
        V.ProcessEventsOn()
        C++: virtual void ProcessEventsOn()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def RemoveAllItems(self):
        """
        V.RemoveAllItems()
        C++: virtual void RemoveAllItems()
        
        Add / remove a measurement widget
        """
        ...
    
    def RemoveItem(self, vtkAbstractWidget):
        """
        V.RemoveItem(vtkAbstractWidget)
        C++: virtual void RemoveItem(vtkAbstractWidget *)
        
        Add / remove a measurement widget
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: virtual void Render()
        
        Render the measurements.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkResliceImageViewerMeasurements
        C++: static vtkResliceImageViewerMeasurements *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetProcessEvents(self, p_int):
        """
        V.SetProcessEvents(int)
        C++: virtual void SetProcessEvents(vtkTypeBool _arg)
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def SetResliceImageViewer(self, vtkResliceImageViewer):
        """
        V.SetResliceImageViewer(vtkResliceImageViewer)
        C++: virtual void SetResliceImageViewer(vtkResliceImageViewer *)
        
        Set the reslice image viewer. This is automatically done in the
        class vtkResliceImageViewer
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        Tolerance for Point-in-Plane check
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: virtual void Update()
        
        Update the measurements. This is automatically called when the
        reslice cursor's axes are change.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
