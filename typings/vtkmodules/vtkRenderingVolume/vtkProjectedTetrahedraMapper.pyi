"""
This type stub file was generated by pyright.
"""

from .vtkUnstructuredGridVolumeMapper import vtkUnstructuredGridVolumeMapper

class vtkProjectedTetrahedraMapper(vtkUnstructuredGridVolumeMapper):
    """
    vtkProjectedTetrahedraMapper - Unstructured grid volume renderer.
    
    Superclass: vtkUnstructuredGridVolumeMapper
    
    vtkProjectedTetrahedraMapper is an implementation of the classic
    Projected Tetrahedra algorithm presented by Shirley and Tuchman in "A
    Polygonal Approximation to Direct Scalar Volume Rendering" in
    Computer Graphics, December 1990.
    
    @bug This mapper relies highly on the implementation of the OpenGL
    pipeline. A typical hardware driver has lots of options and some
    settings can cause this mapper to produce artifacts.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetVisibilitySort(self):
        """
        V.GetVisibilitySort() -> vtkVisibilitySort
        C++: virtual vtkVisibilitySort *GetVisibilitySort()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsSupported(self, vtkRenderWindow):
        """
        V.IsSupported(vtkRenderWindow) -> bool
        C++: virtual bool IsSupported(vtkRenderWindow *)
        
        Return true if the rendering context provides the nececessary
        functionality to use this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapScalarsToColors(self, vtkDataArray, vtkVolumeProperty, vtkDataArray_1):
        """
        V.MapScalarsToColors(vtkDataArray, vtkVolumeProperty,
            vtkDataArray)
        C++: static void MapScalarsToColors(vtkDataArray *colors,
            vtkVolumeProperty *property, vtkDataArray *scalars)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProjectedTetrahedraMapper
        C++: vtkProjectedTetrahedraMapper *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProjectedTetrahedraMapper
        C++: static vtkProjectedTetrahedraMapper *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetVisibilitySort(self, vtkVisibilitySort):
        """
        V.SetVisibilitySort(vtkVisibilitySort)
        C++: virtual void SetVisibilitySort(vtkVisibilitySort *sort)
        """
        ...
    
    def TransformPoints(self, vtkPoints, , , vtkFloatArray):
        """
        V.TransformPoints(vtkPoints, (float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float), (float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float), vtkFloatArray)
        C++: static void TransformPoints(vtkPoints *inPoints,
            const float projection_mat[16], const float modelview_mat[16],
             vtkFloatArray *outPoints)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


