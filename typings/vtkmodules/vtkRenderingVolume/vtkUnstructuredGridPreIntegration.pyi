"""
This type stub file was generated by pyright.
"""

from .vtkUnstructuredGridVolumeRayIntegrator import vtkUnstructuredGridVolumeRayIntegrator

class vtkUnstructuredGridPreIntegration(vtkUnstructuredGridVolumeRayIntegrator):
    """
    vtkUnstructuredGridPreIntegration - performs ray integration with
    pre-integration tables.
    
    Superclass: vtkUnstructuredGridVolumeRayIntegrator
    
    vtkUnstructuredGridPreIntegration performs ray integration by looking
    into a precomputed table.  The result should be equivalent to that
    computed by vtkUnstructuredGridLinearRayIntegrator and
    vtkUnstructuredGridPartialPreIntegration, but faster than either one.
    The pre-integration algorithm was first introduced by Roettger,
    Kraus, and Ertl in "Hardware-Accelerated Volume And Isosurface
    Rendering Based On Cell-Projection."
    
    Due to table size limitations, a table can only be indexed by
    independent scalars.  Thus, dependent scalars are not supported.
    """
    def GetIncrementalPreIntegration(self):
        """
        V.GetIncrementalPreIntegration() -> int
        C++: virtual vtkTypeBool GetIncrementalPreIntegration()
        
        Get/set whether to use incremental pre-integration (by default
        it's on).  Incremental pre-integration is much faster but can
        introduce error due to numerical imprecision.  Under most
        circumstances, the error is not noticeable.
        """
        ...
    
    def GetIndexedTableEntry(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.GetIndexedTableEntry(int, int, int, int) -> (float, ...)
        C++: float *GetIndexedTableEntry(int scalar_front_index,
            int scalar_back_index, int length_index, int component=0)
        
        Like GetTableEntry, except the inputs are scaled indices into the
        table rather than than the actual scalar and length values.  Use
        GetTableEntry unless you are really sure you know what you are
        doing.
        """
        ...
    
    def GetIntegrationTableLengthResolution(self):
        """
        V.GetIntegrationTableLengthResolution() -> int
        C++: virtual int GetIntegrationTableLengthResolution()
        
        Set/Get the size of the integration table built.
        """
        ...
    
    def GetIntegrationTableLengthScale(self):
        """
        V.GetIntegrationTableLengthScale() -> float
        C++: virtual double GetIntegrationTableLengthScale()
        
        Get how an integration table is indexed.
        """
        ...
    
    def GetIntegrationTableScalarResolution(self):
        """
        V.GetIntegrationTableScalarResolution() -> int
        C++: virtual int GetIntegrationTableScalarResolution()
        
        Set/Get the size of the integration table built.
        """
        ...
    
    def GetIntegrationTableScalarScale(self, p_int):
        """
        V.GetIntegrationTableScalarScale(int) -> float
        C++: virtual double GetIntegrationTableScalarScale(
            int component=0)
        
        Get how an integration table is indexed.
        """
        ...
    
    def GetIntegrationTableScalarShift(self, p_int):
        """
        V.GetIntegrationTableScalarShift(int) -> float
        C++: virtual double GetIntegrationTableScalarShift(
            int component=0)
        
        Get how an integration table is indexed.
        """
        ...
    
    def GetIntegrator(self):
        """
        V.GetIntegrator() -> vtkUnstructuredGridVolumeRayIntegrator
        C++: virtual vtkUnstructuredGridVolumeRayIntegrator *GetIntegrator(
            )
        
        The class used to fill the pre integration table.  By default, a
        vtkUnstructuredGridPartialPreIntegration is built.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPreIntegrationTable(self, p_int):
        """
        V.GetPreIntegrationTable(int) -> (float, ...)
        C++: virtual float *GetPreIntegrationTable(int component=0)
        
        Get the partial pre-integration table for the given scalar
        component. The tables are built when Initialize is called.  A
        segment of length d with a front scalar of sf and a back scalar
        of sb is referenced in the resulting table as 4 * ((l *
        IntegrationTableLengthScale) * \c
        IntegrationTableScalarResolution *
        IntegrationTableScalarResolution + (sb *
        IntegrationTableScalarScale + \c IntegrationTableScalarShift) *
        IntegrationTableScalarResolution + (sf *
        IntegrationTableScalarScale + \c IntegrationTableScalarShift)).
        """
        ...
    
    def GetTableEntry(self, p_float, p_float_1, p_float_2, p_int):
        """
        V.GetTableEntry(float, float, float, int) -> (float, ...)
        C++: float *GetTableEntry(double scalar_front, double scalar_back,
             double length, int component=0)
        
        Get an entry (RGBA) in one of the pre-integration tables.  The
        tables are built when Initialize is called.
        """
        ...
    
    def IncrementalPreIntegrationOff(self):
        """
        V.IncrementalPreIntegrationOff()
        C++: virtual void IncrementalPreIntegrationOff()
        
        Get/set whether to use incremental pre-integration (by default
        it's on).  Incremental pre-integration is much faster but can
        introduce error due to numerical imprecision.  Under most
        circumstances, the error is not noticeable.
        """
        ...
    
    def IncrementalPreIntegrationOn(self):
        """
        V.IncrementalPreIntegrationOn()
        C++: virtual void IncrementalPreIntegrationOn()
        
        Get/set whether to use incremental pre-integration (by default
        it's on).  Incremental pre-integration is much faster but can
        introduce error due to numerical imprecision.  Under most
        circumstances, the error is not noticeable.
        """
        ...
    
    def Initialize(self, vtkVolume, vtkDataArray):
        """
        V.Initialize(vtkVolume, vtkDataArray)
        C++: void Initialize(vtkVolume *volume, vtkDataArray *scalars)
            override;
        
        Set up the integrator with the given properties and scalars.
        """
        ...
    
    def Integrate(self, vtkDoubleArray, vtkDataArray, vtkDataArray_1, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.Integrate(vtkDoubleArray, vtkDataArray, vtkDataArray, [float,
            float, float, float])
        C++: void Integrate(vtkDoubleArray *intersectionLengths,
            vtkDataArray *nearIntersections,
            vtkDataArray *farIntersections, float color[4]) override;
        
        Given a set of intersections (defined by the three arrays),
        compute the piecewise integration of the array in front to back
        order. /c intersectionLengths holds the lengths of each piecewise
        segment. /c nearIntersections and /c farIntersections hold the
        scalar values at the front and back of each segment.  /c color
        should contain the RGBA value of the volume in front of the
        segments passed in, and the result will be placed back into /c
        color.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUnstructuredGridPreIntegration
        C++: vtkUnstructuredGridPreIntegration *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUnstructuredGridPreIntegration
        C++: static vtkUnstructuredGridPreIntegration *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetIncrementalPreIntegration(self, p_int):
        """
        V.SetIncrementalPreIntegration(int)
        C++: virtual void SetIncrementalPreIntegration(vtkTypeBool _arg)
        
        Get/set whether to use incremental pre-integration (by default
        it's on).  Incremental pre-integration is much faster but can
        introduce error due to numerical imprecision.  Under most
        circumstances, the error is not noticeable.
        """
        ...
    
    def SetIntegrationTableLengthResolution(self, p_int):
        """
        V.SetIntegrationTableLengthResolution(int)
        C++: virtual void SetIntegrationTableLengthResolution(int _arg)
        
        Set/Get the size of the integration table built.
        """
        ...
    
    def SetIntegrationTableScalarResolution(self, p_int):
        """
        V.SetIntegrationTableScalarResolution(int)
        C++: virtual void SetIntegrationTableScalarResolution(int _arg)
        
        Set/Get the size of the integration table built.
        """
        ...
    
    def SetIntegrator(self, vtkUnstructuredGridVolumeRayIntegrator):
        """
        V.SetIntegrator(vtkUnstructuredGridVolumeRayIntegrator)
        C++: virtual void SetIntegrator(
            vtkUnstructuredGridVolumeRayIntegrator *)
        
        The class used to fill the pre integration table.  By default, a
        vtkUnstructuredGridPartialPreIntegration is built.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


