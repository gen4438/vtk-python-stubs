"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkVolumePicker(__vtkmodules_vtkRenderingCore.vtkCellPicker):
    """
    vtkVolumePicker - ray-cast picker enhanced for volumes
    
    Superclass: vtkCellPicker
    
    vtkVolumePicker is a subclass of vtkCellPicker.  It has one advantage
    over vtkCellPicker for volumes: it will be able to correctly perform
    picking when CroppingPlanes are present.  This isn't possible for vtkCellPicker since it
    doesn't link to the VolumeRendering classes and hence cannot access
    information about the CroppingPlanes.
    
    @sa
    vtkPicker vtkPointPicker vtkCellPicker
    
    @par Thanks: This class was contributed to VTK by David Gobbi on
    behalf of Atamai Inc.
    """
    def GetCroppingPlaneId(self):
        """
        V.GetCroppingPlaneId() -> int
        C++: virtual int GetCroppingPlaneId()
        
        Get the index of the cropping plane that the pick ray passed
        through on its way to the prop. This will be set regardless of
        whether PickCroppingPlanes is on.  The crop planes are ordered as
        follows: xmin, xmax, ymin, ymax, zmin, zmax.  If the volume is
        not cropped, the value will bet set to -1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPickCroppingPlanes(self):
        """
        V.GetPickCroppingPlanes() -> int
        C++: virtual vtkTypeBool GetPickCroppingPlanes()
        
        Set whether to pick the cropping planes of props that have them.
        If this is set, then the pick will be done on the cropping planes
        rather than on the data. The GetCroppingPlaneId() method will
        return the index of the cropping plane of the volume that was
        picked.  This setting is only relevant to the picking of volumes.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVolumePicker
        C++: vtkVolumePicker *NewInstance()
        """
        ...
    
    def PickCroppingPlanesOff(self):
        """
        V.PickCroppingPlanesOff()
        C++: virtual void PickCroppingPlanesOff()
        
        Set whether to pick the cropping planes of props that have them.
        If this is set, then the pick will be done on the cropping planes
        rather than on the data. The GetCroppingPlaneId() method will
        return the index of the cropping plane of the volume that was
        picked.  This setting is only relevant to the picking of volumes.
        """
        ...
    
    def PickCroppingPlanesOn(self):
        """
        V.PickCroppingPlanesOn()
        C++: virtual void PickCroppingPlanesOn()
        
        Set whether to pick the cropping planes of props that have them.
        If this is set, then the pick will be done on the cropping planes
        rather than on the data. The GetCroppingPlaneId() method will
        return the index of the cropping plane of the volume that was
        picked.  This setting is only relevant to the picking of volumes.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVolumePicker
        C++: static vtkVolumePicker *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPickCroppingPlanes(self, p_int):
        """
        V.SetPickCroppingPlanes(int)
        C++: virtual void SetPickCroppingPlanes(vtkTypeBool _arg)
        
        Set whether to pick the cropping planes of props that have them.
        If this is set, then the pick will be done on the cropping planes
        rather than on the data. The GetCroppingPlaneId() method will
        return the index of the cropping plane of the volume that was
        picked.  This setting is only relevant to the picking of volumes.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


