"""
This type stub file was generated by pyright.
"""

from .vtkFixedPointVolumeRayCastHelper import vtkFixedPointVolumeRayCastHelper

class vtkFixedPointVolumeRayCastCompositeShadeHelper(vtkFixedPointVolumeRayCastHelper):
    """
    vtkFixedPointVolumeRayCastCompositeShadeHelper - A helper that
    generates composite images for the volume ray cast mapper
    
    Superclass: vtkFixedPointVolumeRayCastHelper
    
    This is one of the helper classes for the
    vtkFixedPointVolumeRayCastMapper. It will generate composite images
    using an alpha blending operation. This class should not be used
    directly, it is a helper class for the mapper and has no user-level
    API.
    
    @sa
    vtkFixedPointVolumeRayCastMapper
    """
    def GenerateImage(self, p_int, p_int_1, vtkVolume, vtkFixedPointVolumeRayCastMapper):
        """
        V.GenerateImage(int, int, vtkVolume,
            vtkFixedPointVolumeRayCastMapper)
        C++: void GenerateImage(int threadID, int threadCount,
            vtkVolume *vol, vtkFixedPointVolumeRayCastMapper *mapper)
            override;
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFixedPointVolumeRayCastCompositeShadeHelper
        C++: vtkFixedPointVolumeRayCastCompositeShadeHelper *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkFixedPointVolumeRayCastCompositeShadeHelper
        C++: static vtkFixedPointVolumeRayCastCompositeShadeHelper *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


