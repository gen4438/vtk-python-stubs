"""
This type stub file was generated by pyright.
"""

from .vtkVolumeMapper import vtkVolumeMapper

class vtkFixedPointVolumeRayCastMapper(vtkVolumeMapper):
    """
    vtkFixedPointVolumeRayCastMapper - A fixed point mapper for volumes
    
    Superclass: vtkVolumeMapper
    
    This is a software ray caster for rendering volumes in vtkImageData.
    It works with all input data types and up to four components. It
    performs composite or MIP rendering, and can be intermixed with
    geometric data. Space leaping is used to speed up the rendering
    process. In addition, calculation are performed in 15 bit fixed point
    precision. This mapper is threaded, and will interleave scan lines
    across processors.
    
    WARNING: This ray caster may not produce consistent results when the
    number of threads exceeds 1. The class warns if the number of threads
    > 1. The differences may be subtle. Applications should decide if the
    trade-off in performance is worth the lack of consistency.
    
    Other limitations of this ray caster include that:
    - it does not do isosurface ray casting
    - it does only interpolate before classify compositing
    - it does only maximum scalar value MIP
    
    This mapper handles all data type from unsigned char through double.
    However, some of the internal calcultions are performed in float and
    therefore even the full float range may cause problems for this
    mapper (both in scalar data values and in spacing between samples).
    
    Space leaping is performed by creating a sub-sampled volume. 4x4x4
    cells in the original volume are represented by a min, max, and
    combined gradient and flag value. The min max volume has three
    unsigned shorts per 4x4x4 group of cells from the original volume -
    one reprenting the minimum scalar index (the scalar value adjusted to
    fit in the 15 bit range), the maximum scalar index, and a third
    unsigned short which is both the maximum gradient opacity in the
    neighborhood (an unsigned char) and the flag that is filled in for
    the current lookup tables to indicate whether this region can be
    skipped.
    
    @sa
    vtkVolumeMapper
    """
    def AbortRender(self):
        """
        V.AbortRender()
        C++: void AbortRender()
        """
        ...
    
    def AutoAdjustSampleDistancesOff(self):
        """
        V.AutoAdjustSampleDistancesOff()
        C++: virtual void AutoAdjustSampleDistancesOff()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance and
        the SampleDistance will be varied to achieve the allocated render
        time of this prop (controlled by the desired update rate and any
        culling in use). If this is an interactive render (more than 1
        frame per second) the SampleDistance will be increased, otherwise
        it will not be altered (a binary decision, as opposed to the
        ImageSampleDistance which will vary continuously).
        """
        ...
    
    def AutoAdjustSampleDistancesOn(self):
        """
        V.AutoAdjustSampleDistancesOn()
        C++: virtual void AutoAdjustSampleDistancesOn()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance and
        the SampleDistance will be varied to achieve the allocated render
        time of this prop (controlled by the desired update rate and any
        culling in use). If this is an interactive render (more than 1
        frame per second) the SampleDistance will be increased, otherwise
        it will not be altered (a binary decision, as opposed to the
        ImageSampleDistance which will vary continuously).
        """
        ...
    
    def CheckIfCropped(self, p_int=..., p_int=..., p_int=...):
        """
        V.CheckIfCropped([int, int, int]) -> int
        C++: int CheckIfCropped(unsigned int pos[3])
        """
        ...
    
    def CheckMinMaxVolumeFlag(self, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.CheckMinMaxVolumeFlag([int, int, int], int) -> int
        C++: int CheckMinMaxVolumeFlag(unsigned int pos[3], int c)
        """
        ...
    
    def CheckMIPMinMaxVolumeFlag(self, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.CheckMIPMinMaxVolumeFlag([int, int, int], int, int, int) -> int
        C++: int CheckMIPMinMaxVolumeFlag(unsigned int pos[3], int c,
            unsigned short maxIdx, int flip)
        """
        ...
    
    def ComputeRayInfo(self, p_int, p_int_1, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.ComputeRayInfo(int, int, [int, int, int], [int, int, int], [int,
             ...])
        C++: void ComputeRayInfo(int x, int y, unsigned int pos[3],
            unsigned int dir[3], unsigned int *numSteps)
        """
        ...
    
    def ComputeRequiredImageSampleDistance(self, p_float, vtkRenderer):
        """
        V.ComputeRequiredImageSampleDistance(float, vtkRenderer) -> float
        C++: float ComputeRequiredImageSampleDistance(float desiredTime,
            vtkRenderer *ren)
        V.ComputeRequiredImageSampleDistance(float, vtkRenderer,
            vtkVolume) -> float
        C++: float ComputeRequiredImageSampleDistance(float desiredTime,
            vtkRenderer *ren, vtkVolume *vol)
        
        What is the image sample distance required to achieve the desired
        time? A version of this method is provided that does not require
        the volume argument since if you are using an LODProp3D you may
        not know this information. If you use this version you must be
        certain that the ray cast mapper is only used for one volume (and
        not shared among multiple volumes)
        """
        ...
    
    def CreateCanonicalView(self, vtkVolume, vtkImageData, p_int, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.CreateCanonicalView(vtkVolume, vtkImageData, int, [float, float,
             float], [float, float, float])
        C++: void CreateCanonicalView(vtkVolume *volume,
            vtkImageData *image, int blend_mode, double viewDirection[3],
            double viewUp[3])
        """
        ...
    
    def DisplayRenderedImage(self, vtkRenderer, vtkVolume):
        """
        V.DisplayRenderedImage(vtkRenderer, vtkVolume)
        C++: void DisplayRenderedImage(vtkRenderer *, vtkVolume *)
        """
        ...
    
    def FixedPointIncrement(self, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.FixedPointIncrement([int, int, int], [int, int, int])
        C++: void FixedPointIncrement(unsigned int position[3],
            unsigned int increment[3])
        """
        ...
    
    def GetAutoAdjustSampleDistances(self):
        """
        V.GetAutoAdjustSampleDistances() -> int
        C++: virtual vtkTypeBool GetAutoAdjustSampleDistances()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance and
        the SampleDistance will be varied to achieve the allocated render
        time of this prop (controlled by the desired update rate and any
        culling in use). If this is an interactive render (more than 1
        frame per second) the SampleDistance will be increased, otherwise
        it will not be altered (a binary decision, as opposed to the
        ImageSampleDistance which will vary continuously).
        """
        ...
    
    def GetAutoAdjustSampleDistancesMaxValue(self):
        """
        V.GetAutoAdjustSampleDistancesMaxValue() -> int
        C++: virtual vtkTypeBool GetAutoAdjustSampleDistancesMaxValue()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance and
        the SampleDistance will be varied to achieve the allocated render
        time of this prop (controlled by the desired update rate and any
        culling in use). If this is an interactive render (more than 1
        frame per second) the SampleDistance will be increased, otherwise
        it will not be altered (a binary decision, as opposed to the
        ImageSampleDistance which will vary continuously).
        """
        ...
    
    def GetAutoAdjustSampleDistancesMinValue(self):
        """
        V.GetAutoAdjustSampleDistancesMinValue() -> int
        C++: virtual vtkTypeBool GetAutoAdjustSampleDistancesMinValue()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance and
        the SampleDistance will be varied to achieve the allocated render
        time of this prop (controlled by the desired update rate and any
        culling in use). If this is an interactive render (more than 1
        frame per second) the SampleDistance will be increased, otherwise
        it will not be altered (a binary decision, as opposed to the
        ImageSampleDistance which will vary continuously).
        """
        ...
    
    def GetColorTable(self, p_int):
        """
        V.GetColorTable(int) -> (int, ...)
        C++: unsigned short *GetColorTable(int c)
        """
        ...
    
    def GetCompositeGOHelper(self):
        """
        V.GetCompositeGOHelper()
            -> vtkFixedPointVolumeRayCastCompositeGOHelper
        C++: virtual vtkFixedPointVolumeRayCastCompositeGOHelper *GetCompositeGOHelper(
            )
        """
        ...
    
    def GetCompositeGOShadeHelper(self):
        """
        V.GetCompositeGOShadeHelper()
            -> vtkFixedPointVolumeRayCastCompositeGOShadeHelper
        C++: virtual vtkFixedPointVolumeRayCastCompositeGOShadeHelper *GetCompositeGOShadeHelper(
            )
        """
        ...
    
    def GetCompositeHelper(self):
        """
        V.GetCompositeHelper()
            -> vtkFixedPointVolumeRayCastCompositeHelper
        C++: virtual vtkFixedPointVolumeRayCastCompositeHelper *GetCompositeHelper(
            )
        """
        ...
    
    def GetCompositeShadeHelper(self):
        """
        V.GetCompositeShadeHelper()
            -> vtkFixedPointVolumeRayCastCompositeShadeHelper
        C++: virtual vtkFixedPointVolumeRayCastCompositeShadeHelper *GetCompositeShadeHelper(
            )
        """
        ...
    
    def GetCurrentScalars(self):
        """
        V.GetCurrentScalars() -> vtkDataArray
        C++: virtual vtkDataArray *GetCurrentScalars()
        """
        ...
    
    def GetDiffuseShadingTable(self, p_int):
        """
        V.GetDiffuseShadingTable(int) -> (int, ...)
        C++: unsigned short *GetDiffuseShadingTable(int c)
        """
        ...
    
    def GetEstimatedRenderTime(self, vtkRenderer, vtkVolume):
        """
        V.GetEstimatedRenderTime(vtkRenderer, vtkVolume) -> float
        C++: float GetEstimatedRenderTime(vtkRenderer *ren,
            vtkVolume *vol)
        V.GetEstimatedRenderTime(vtkRenderer) -> float
        C++: float GetEstimatedRenderTime(vtkRenderer *ren)
        
        Get an estimate of the rendering time for a given volume /
        renderer. Only valid if this mapper has been used to render that
        volume for that renderer previously. Estimate is good when the
        viewing parameters have not changed much since that last render.
        """
        ...
    
    def GetFinalColorLevel(self):
        """
        V.GetFinalColorLevel() -> float
        C++: virtual float GetFinalColorLevel()
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def GetFinalColorWindow(self):
        """
        V.GetFinalColorWindow() -> float
        C++: virtual float GetFinalColorWindow()
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def GetFlipMIPComparison(self):
        """
        V.GetFlipMIPComparison() -> int
        C++: virtual int GetFlipMIPComparison()
        """
        ...
    
    def GetFloatTripleFromPointer(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.GetFloatTripleFromPointer([float, float, float], [float, ...])
        C++: void GetFloatTripleFromPointer(float v[3], float *ptr)
        """
        ...
    
    def GetGradientOpacityRequired(self):
        """
        V.GetGradientOpacityRequired() -> int
        C++: virtual int GetGradientOpacityRequired()
        """
        ...
    
    def GetGradientOpacityTable(self, p_int):
        """
        V.GetGradientOpacityTable(int) -> (int, ...)
        C++: unsigned short *GetGradientOpacityTable(int c)
        """
        ...
    
    def GetImageSampleDistance(self):
        """
        V.GetImageSampleDistance() -> float
        C++: virtual float GetImageSampleDistance()
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def GetImageSampleDistanceMaxValue(self):
        """
        V.GetImageSampleDistanceMaxValue() -> float
        C++: virtual float GetImageSampleDistanceMaxValue()
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def GetImageSampleDistanceMinValue(self):
        """
        V.GetImageSampleDistanceMinValue() -> float
        C++: virtual float GetImageSampleDistanceMinValue()
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def GetInteractiveSampleDistance(self):
        """
        V.GetInteractiveSampleDistance() -> float
        C++: virtual float GetInteractiveSampleDistance()
        
        Set/Get the distance between samples when interactive rendering
        is happening. In this case, interactive is defined as this volume
        mapper having less than 1 second allocated for rendering. When
        AutoAdjustSampleDistance is On, and the allocated render time is
        less than 1 second, then this InteractiveSampleDistance will be
        used instead of the SampleDistance above.
        """
        ...
    
    def GetIntermixIntersectingGeometry(self):
        """
        V.GetIntermixIntersectingGeometry() -> int
        C++: virtual vtkTypeBool GetIntermixIntersectingGeometry()
        
        If IntermixIntersectingGeometry is turned on, the zbuffer will be
        captured and used to limit the traversal of the rays.
        """
        ...
    
    def GetIntermixIntersectingGeometryMaxValue(self):
        """
        V.GetIntermixIntersectingGeometryMaxValue() -> int
        C++: virtual vtkTypeBool GetIntermixIntersectingGeometryMaxValue()
        
        If IntermixIntersectingGeometry is turned on, the zbuffer will be
        captured and used to limit the traversal of the rays.
        """
        ...
    
    def GetIntermixIntersectingGeometryMinValue(self):
        """
        V.GetIntermixIntersectingGeometryMinValue() -> int
        C++: virtual vtkTypeBool GetIntermixIntersectingGeometryMinValue()
        
        If IntermixIntersectingGeometry is turned on, the zbuffer will be
        captured and used to limit the traversal of the rays.
        """
        ...
    
    def GetLockSampleDistanceToInputSpacing(self):
        """
        V.GetLockSampleDistanceToInputSpacing() -> int
        C++: virtual vtkTypeBool GetLockSampleDistanceToInputSpacing()
        
        Automatically compute the sample distance from the data spacing. 
        When the number of voxels is 8, the sample distance will be
        roughly 1/200 the average voxel size. The distance will grow
        proportionally to numVoxels^(1/3) until it reaches 1/2 average
        voxel size when number of voxels is 1E6. Note that
        ScalarOpacityUnitDistance is still taken into account and if
        different than 1, will effect the sample distance.
        """
        ...
    
    def GetLockSampleDistanceToInputSpacingMaxValue(self):
        """
        V.GetLockSampleDistanceToInputSpacingMaxValue() -> int
        C++: virtual vtkTypeBool GetLockSampleDistanceToInputSpacingMaxValue(
            )
        
        Automatically compute the sample distance from the data spacing. 
        When the number of voxels is 8, the sample distance will be
        roughly 1/200 the average voxel size. The distance will grow
        proportionally to numVoxels^(1/3) until it reaches 1/2 average
        voxel size when number of voxels is 1E6. Note that
        ScalarOpacityUnitDistance is still taken into account and if
        different than 1, will effect the sample distance.
        """
        ...
    
    def GetLockSampleDistanceToInputSpacingMinValue(self):
        """
        V.GetLockSampleDistanceToInputSpacingMinValue() -> int
        C++: virtual vtkTypeBool GetLockSampleDistanceToInputSpacingMinValue(
            )
        
        Automatically compute the sample distance from the data spacing. 
        When the number of voxels is 8, the sample distance will be
        roughly 1/200 the average voxel size. The distance will grow
        proportionally to numVoxels^(1/3) until it reaches 1/2 average
        voxel size when number of voxels is 1E6. Note that
        ScalarOpacityUnitDistance is still taken into account and if
        different than 1, will effect the sample distance.
        """
        ...
    
    def GetMaximumImageSampleDistance(self):
        """
        V.GetMaximumImageSampleDistance() -> float
        C++: virtual float GetMaximumImageSampleDistance()
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMaximumImageSampleDistanceMaxValue(self):
        """
        V.GetMaximumImageSampleDistanceMaxValue() -> float
        C++: virtual float GetMaximumImageSampleDistanceMaxValue()
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMaximumImageSampleDistanceMinValue(self):
        """
        V.GetMaximumImageSampleDistanceMinValue() -> float
        C++: virtual float GetMaximumImageSampleDistanceMinValue()
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMinimumImageSampleDistance(self):
        """
        V.GetMinimumImageSampleDistance() -> float
        C++: virtual float GetMinimumImageSampleDistance()
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMinimumImageSampleDistanceMaxValue(self):
        """
        V.GetMinimumImageSampleDistanceMaxValue() -> float
        C++: virtual float GetMinimumImageSampleDistanceMaxValue()
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMinimumImageSampleDistanceMinValue(self):
        """
        V.GetMinimumImageSampleDistanceMinValue() -> float
        C++: virtual float GetMinimumImageSampleDistanceMinValue()
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMIPHelper(self):
        """
        V.GetMIPHelper() -> vtkFixedPointVolumeRayCastMIPHelper
        C++: virtual vtkFixedPointVolumeRayCastMIPHelper *GetMIPHelper()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfThreads(self):
        """
        V.GetNumberOfThreads() -> int
        C++: int GetNumberOfThreads()
        
        Set/Get the number of threads to use. This by default is equal to
        the number of available processors detected. WARNING: If number
        of threads > 1, results may not be consistent.
        """
        ...
    
    def GetPreviousScalars(self):
        """
        V.GetPreviousScalars() -> vtkDataArray
        C++: virtual vtkDataArray *GetPreviousScalars()
        """
        ...
    
    def GetRayCastImage(self):
        """
        V.GetRayCastImage() -> vtkFixedPointRayCastImage
        C++: virtual vtkFixedPointRayCastImage *GetRayCastImage()
        
        Set / Get the underlying image object. One will be automatically
        created - only need to set it when using from an AMR mapper which
        renders multiple times into the same image.
        """
        ...
    
    def GetRenderWindow(self):
        """
        V.GetRenderWindow() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetRenderWindow()
        """
        ...
    
    def GetRowBounds(self):
        """
        V.GetRowBounds() -> (int, ...)
        C++: int *GetRowBounds()
        """
        ...
    
    def GetSampleDistance(self):
        """
        V.GetSampleDistance() -> float
        C++: virtual float GetSampleDistance()
        
        Set/Get the distance between samples used for rendering when
        AutoAdjustSampleDistances is off, or when this mapper has more
        than 1 second allocated to it for rendering.
        """
        ...
    
    def GetScalarOpacityTable(self, p_int):
        """
        V.GetScalarOpacityTable(int) -> (int, ...)
        C++: unsigned short *GetScalarOpacityTable(int c)
        """
        ...
    
    def GetShadingRequired(self):
        """
        V.GetShadingRequired() -> int
        C++: virtual int GetShadingRequired()
        """
        ...
    
    def GetSpecularShadingTable(self, p_int):
        """
        V.GetSpecularShadingTable(int) -> (int, ...)
        C++: unsigned short *GetSpecularShadingTable(int c)
        """
        ...
    
    def GetTableScale(self):
        """
        V.GetTableScale() -> (float, float, float, float)
        C++: virtual float *GetTableScale()
        """
        ...
    
    def GetTableShift(self):
        """
        V.GetTableShift() -> (float, float, float, float)
        C++: virtual float *GetTableShift()
        """
        ...
    
    def GetUIntTripleFromPointer(self, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.GetUIntTripleFromPointer([int, int, int], [int, ...])
        C++: void GetUIntTripleFromPointer(unsigned int v[3],
            unsigned int *ptr)
        """
        ...
    
    def GetVolume(self):
        """
        V.GetVolume() -> vtkVolume
        C++: vtkVolume *GetVolume()
        """
        ...
    
    def InitializeRayInfo(self, vtkVolume):
        """
        V.InitializeRayInfo(vtkVolume)
        C++: void InitializeRayInfo(vtkVolume *vol)
        """
        ...
    
    def IntermixIntersectingGeometryOff(self):
        """
        V.IntermixIntersectingGeometryOff()
        C++: virtual void IntermixIntersectingGeometryOff()
        
        If IntermixIntersectingGeometry is turned on, the zbuffer will be
        captured and used to limit the traversal of the rays.
        """
        ...
    
    def IntermixIntersectingGeometryOn(self):
        """
        V.IntermixIntersectingGeometryOn()
        C++: virtual void IntermixIntersectingGeometryOn()
        
        If IntermixIntersectingGeometry is turned on, the zbuffer will be
        captured and used to limit the traversal of the rays.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LockSampleDistanceToInputSpacingOff(self):
        """
        V.LockSampleDistanceToInputSpacingOff()
        C++: virtual void LockSampleDistanceToInputSpacingOff()
        
        Automatically compute the sample distance from the data spacing. 
        When the number of voxels is 8, the sample distance will be
        roughly 1/200 the average voxel size. The distance will grow
        proportionally to numVoxels^(1/3) until it reaches 1/2 average
        voxel size when number of voxels is 1E6. Note that
        ScalarOpacityUnitDistance is still taken into account and if
        different than 1, will effect the sample distance.
        """
        ...
    
    def LockSampleDistanceToInputSpacingOn(self):
        """
        V.LockSampleDistanceToInputSpacingOn()
        C++: virtual void LockSampleDistanceToInputSpacingOn()
        
        Automatically compute the sample distance from the data spacing. 
        When the number of voxels is 8, the sample distance will be
        roughly 1/200 the average voxel size. The distance will grow
        proportionally to numVoxels^(1/3) until it reaches 1/2 average
        voxel size when number of voxels is 1E6. Note that
        ScalarOpacityUnitDistance is still taken into account and if
        different than 1, will effect the sample distance.
        """
        ...
    
    def LookupColorUC(self, *int, **kwargs):
        """
        V.LookupColorUC([int, ...], [int, ...], int, [int, int, int, int])
        C++: void LookupColorUC(unsigned short *colorTable,
            unsigned short *scalarOpacityTable, unsigned short index,
            unsigned char color[4])
        """
        ...
    
    def LookupDependentColorUC(self, *int, **kwargs):
        """
        V.LookupDependentColorUC([int, ...], [int, ...], [int, int, int,
            int], int, [int, int, int, int])
        C++: void LookupDependentColorUC(unsigned short *colorTable,
            unsigned short *scalarOpacityTable, unsigned short index[4],
            int components, unsigned char color[4])
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFixedPointVolumeRayCastMapper
        C++: vtkFixedPointVolumeRayCastMapper *NewInstance()
        """
        ...
    
    def PerImageInitialization(self, vtkRenderer, vtkVolume, p_int, *float, **kwargs):
        """
        V.PerImageInitialization(vtkRenderer, vtkVolume, int, [float,
            ...], [float, ...], [int, ...]) -> int
        C++: int PerImageInitialization(vtkRenderer *, vtkVolume *, int,
            double *, double *, int *)
        """
        ...
    
    def PerSubVolumeInitialization(self, vtkRenderer, vtkVolume, p_int):
        """
        V.PerSubVolumeInitialization(vtkRenderer, vtkVolume, int)
        C++: void PerSubVolumeInitialization(vtkRenderer *, vtkVolume *,
            int)
        """
        ...
    
    def PerVolumeInitialization(self, vtkRenderer, vtkVolume):
        """
        V.PerVolumeInitialization(vtkRenderer, vtkVolume)
        C++: void PerVolumeInitialization(vtkRenderer *, vtkVolume *)
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE Release
        any graphics resources that are being consumed by this mapper.
        The parameter window could be used to determine which graphic
        resources to release.
        """
        ...
    
    def Render(self, vtkRenderer, vtkVolume):
        """
        V.Render(vtkRenderer, vtkVolume)
        C++: void Render(vtkRenderer *, vtkVolume *) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
        Initialize rendering for this volume.
        """
        ...
    
    def RenderSubVolume(self):
        """
        V.RenderSubVolume()
        C++: void RenderSubVolume()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFixedPointVolumeRayCastMapper
        C++: static vtkFixedPointVolumeRayCastMapper *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAutoAdjustSampleDistances(self, p_int):
        """
        V.SetAutoAdjustSampleDistances(int)
        C++: virtual void SetAutoAdjustSampleDistances(vtkTypeBool _arg)
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance and
        the SampleDistance will be varied to achieve the allocated render
        time of this prop (controlled by the desired update rate and any
        culling in use). If this is an interactive render (more than 1
        frame per second) the SampleDistance will be increased, otherwise
        it will not be altered (a binary decision, as opposed to the
        ImageSampleDistance which will vary continuously).
        """
        ...
    
    def SetFinalColorLevel(self, p_float):
        """
        V.SetFinalColorLevel(float)
        C++: virtual void SetFinalColorLevel(float _arg)
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def SetFinalColorWindow(self, p_float):
        """
        V.SetFinalColorWindow(float)
        C++: virtual void SetFinalColorWindow(float _arg)
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def SetImageSampleDistance(self, p_float):
        """
        V.SetImageSampleDistance(float)
        C++: virtual void SetImageSampleDistance(float _arg)
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def SetInteractiveSampleDistance(self, p_float):
        """
        V.SetInteractiveSampleDistance(float)
        C++: virtual void SetInteractiveSampleDistance(float _arg)
        
        Set/Get the distance between samples when interactive rendering
        is happening. In this case, interactive is defined as this volume
        mapper having less than 1 second allocated for rendering. When
        AutoAdjustSampleDistance is On, and the allocated render time is
        less than 1 second, then this InteractiveSampleDistance will be
        used instead of the SampleDistance above.
        """
        ...
    
    def SetIntermixIntersectingGeometry(self, p_int):
        """
        V.SetIntermixIntersectingGeometry(int)
        C++: virtual void SetIntermixIntersectingGeometry(
            vtkTypeBool _arg)
        
        If IntermixIntersectingGeometry is turned on, the zbuffer will be
        captured and used to limit the traversal of the rays.
        """
        ...
    
    def SetLockSampleDistanceToInputSpacing(self, p_int):
        """
        V.SetLockSampleDistanceToInputSpacing(int)
        C++: virtual void SetLockSampleDistanceToInputSpacing(
            vtkTypeBool _arg)
        
        Automatically compute the sample distance from the data spacing. 
        When the number of voxels is 8, the sample distance will be
        roughly 1/200 the average voxel size. The distance will grow
        proportionally to numVoxels^(1/3) until it reaches 1/2 average
        voxel size when number of voxels is 1E6. Note that
        ScalarOpacityUnitDistance is still taken into account and if
        different than 1, will effect the sample distance.
        """
        ...
    
    def SetMaximumImageSampleDistance(self, p_float):
        """
        V.SetMaximumImageSampleDistance(float)
        C++: virtual void SetMaximumImageSampleDistance(float _arg)
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def SetMinimumImageSampleDistance(self, p_float):
        """
        V.SetMinimumImageSampleDistance(float)
        C++: virtual void SetMinimumImageSampleDistance(float _arg)
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def SetNumberOfThreads(self, p_int):
        """
        V.SetNumberOfThreads(int)
        C++: void SetNumberOfThreads(int num)
        
        Set/Get the number of threads to use. This by default is equal to
        the number of available processors detected. WARNING: If number
        of threads > 1, results may not be consistent.
        """
        ...
    
    def SetRayCastImage(self, vtkFixedPointRayCastImage):
        """
        V.SetRayCastImage(vtkFixedPointRayCastImage)
        C++: void SetRayCastImage(vtkFixedPointRayCastImage *)
        
        Set / Get the underlying image object. One will be automatically
        created - only need to set it when using from an AMR mapper which
        renders multiple times into the same image.
        """
        ...
    
    def SetSampleDistance(self, p_float):
        """
        V.SetSampleDistance(float)
        C++: virtual void SetSampleDistance(float _arg)
        
        Set/Get the distance between samples used for rendering when
        AutoAdjustSampleDistances is off, or when this mapper has more
        than 1 second allocated to it for rendering.
        """
        ...
    
    def ShiftVectorDown(self, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.ShiftVectorDown([int, int, int], [int, int, int])
        C++: void ShiftVectorDown(unsigned int in[3], unsigned int out[3])
        """
        ...
    
    def ShouldUseNearestNeighborInterpolation(self, vtkVolume):
        """
        V.ShouldUseNearestNeighborInterpolation(vtkVolume) -> int
        C++: int ShouldUseNearestNeighborInterpolation(vtkVolume *vol)
        """
        ...
    
    def ToFixedPointDirection(self, p_float):
        """
        V.ToFixedPointDirection(float) -> int
        C++: unsigned int ToFixedPointDirection(float dir)
        V.ToFixedPointDirection([float, float, float], [int, int, int])
        C++: void ToFixedPointDirection(float in[3], unsigned int out[3])
        """
        ...
    
    def ToFixedPointPosition(self, p_float):
        """
        V.ToFixedPointPosition(float) -> int
        C++: unsigned int ToFixedPointPosition(float val)
        V.ToFixedPointPosition([float, float, float], [int, int, int])
        C++: void ToFixedPointPosition(float in[3], unsigned int out[3])
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


