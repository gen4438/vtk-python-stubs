"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkDirectionEncoder(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkDirectionEncoder - encode a direction into a one or two byte value
    
    Superclass: vtkObject
    
    Given a direction, encode it into an integer value. This value should
    be less than 65536, which is the maximum number of encoded directions
    supported by this superclass. A direction encoded is used to encode
    normals in a volume for use during volume rendering, and the amount
    of space that is allocated per normal is 2 bytes. This is an abstract
    superclass - see the subclasses for specific implementation details.
    
    @sa
    vtkRecursiveSphereDirectionEncoder
    """
    def GetDecodedGradient(self, p_int):
        """
        V.GetDecodedGradient(int) -> (float, float, float)
        C++: virtual float *GetDecodedGradient(int value)
        
        / Given an encoded value, return a pointer to the normal vector
        """
        ...
    
    def GetDecodedGradientTable(self):
        """
        V.GetDecodedGradientTable() -> (float, ...)
        C++: virtual float *GetDecodedGradientTable(void)
        
        Get the decoded gradient table. There are
        this->GetNumberOfEncodedDirections() entries in the table, each
        containing a normal (direction) vector. This is a flat structure
        - 3 times the number of directions floats in an array.
        """
        ...
    
    def GetEncodedDirection(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetEncodedDirection([float, float, float]) -> int
        C++: virtual int GetEncodedDirection(float n[3])
        
        Given a normal vector n, return the encoded direction
        """
        ...
    
    def GetNumberOfEncodedDirections(self):
        """
        V.GetNumberOfEncodedDirections() -> int
        C++: virtual int GetNumberOfEncodedDirections(void)
        
        Return the number of encoded directions
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Get the name of this class
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Get the name of this class
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Get the name of this class
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Get the name of this class
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDirectionEncoder
        C++: vtkDirectionEncoder *NewInstance()
        
        Get the name of this class
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDirectionEncoder
        C++: static vtkDirectionEncoder *SafeDownCast(vtkObjectBase *o)
        
        Get the name of this class
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


