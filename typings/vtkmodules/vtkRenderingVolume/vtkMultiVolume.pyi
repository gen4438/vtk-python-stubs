"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkMultiVolume(__vtkmodules_vtkRenderingCore.vtkVolume):
    """
    vtkMultiVolume - Represents a world axis-aligned bounding-box
    containing a set of volumes in a rendered scene.
    
    Superclass: vtkVolume
    
    vtkVolume instances registered in this class can be overlapping. They
    are intended to be all rendered simultaneously by a
    vtkGPUVolumeRayCastMapper (inputs should be set directly in the
    mapper).
    
    This class holds the full transformation of a bounding-box containing
    all of the registered volumes.
    
    
         + TexToBBox : Texture-to-Data (scaling)
         + Matrix : Data-to-World (translation)
    
    ote This class is intended to be used only by mappers supporting
    multiple inputs.
    
    @sa vtkVolume vtkAbstractVolumeMapper vtkGPUVolumeRayCastMapper
    """
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Computes the bounds of the box containing all of the vtkVolume
        instances. Returns the bounds (vtkVolume::Bounds) in world
        coordinates [xmin, xmax, ymin, ymax, zmin, zmax] but also keeps
        cached the bounds in data coordinates
        (vtkMultiVolume::DataBounds).
        """
        ...
    
    def GetBoundsTime(self):
        """
        V.GetBoundsTime() -> int
        C++: vtkMTimeType GetBoundsTime()
        """
        ...
    
    def GetDataBounds(self):
        """
        V.GetDataBounds() -> (float, ...)
        C++: double *GetDataBounds()
        
        Total bounds in data coordinates.
        """
        ...
    
    def GetDataGeometry(self):
        """
        V.GetDataGeometry() -> (float, ...)
        C++: double *GetDataGeometry()
        
        Return the eight corners of the volume
        """
        ...
    
    def GetMatrix(self):
        """
        V.GetMatrix() -> vtkMatrix4x4
        C++: vtkMatrix4x4 *GetMatrix() override;
        V.GetMatrix(vtkMatrix4x4)
        C++: virtual void GetMatrix(vtkMatrix4x4 *m)
        V.GetMatrix([float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float,
            float])
        C++: virtual void GetMatrix(double m[16])
        
        Get a pointer to an internal vtkMatrix4x4. that represents
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        \sa vtkVolume
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkVolumeProperty
        C++: vtkVolumeProperty *GetProperty() override;
        
        Given that this class represents a bounding-box only there is no
        property directly associated with it (a cannot be set directly).
        This instance will return the property of the volume registered
        in the 0th port (or nullptr if no volume has been set).
        \sa vtkVolume
        """
        ...
    
    def GetTextureMatrix(self):
        """
        V.GetTextureMatrix() -> vtkMatrix4x4
        C++: vtkMatrix4x4 *GetTextureMatrix()
        
        Returns the transformation from texture coordinates to data
        cooridinates of the bounding-box. Since this class represents an
        axis-aligned bounding
        -boxThis, this transformation only contains a scaling diagonal.
        """
        ...
    
    def GetVolume(self, p_int):
        """
        V.GetVolume(int) -> vtkVolume
        C++: vtkVolume *GetVolume(int port=0)
        
        Add / Remove a vtkVolume instance.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMultiVolume
        C++: vtkMultiVolume *NewInstance()
        """
        ...
    
    def RemoveVolume(self, p_int):
        """
        V.RemoveVolume(int)
        C++: void RemoveVolume(int port)
        
        Add / Remove a vtkVolume instance.
        """
        ...
    
    def RenderVolumetricGeometry(self, vtkViewport):
        """
        V.RenderVolumetricGeometry(vtkViewport) -> int
        C++: int RenderVolumetricGeometry(vtkViewport *vp) override;
        
        Since vtkMultiVolume acts like a proxy volume to compute the
        bounding box for its internal vtkVolume instances, there are no
        properties to be set directly in this instance. For that reason,
        this override ignores the vtkVolumeProperty check.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMultiVolume
        C++: static vtkMultiVolume *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetProperty(self, vtkVolumeProperty):
        """
        V.SetProperty(vtkVolumeProperty)
        C++: void SetProperty(vtkVolumeProperty *property) override;
        
        Given that this class represents a bounding-box only there is no
        property directly associated with it (a cannot be set directly).
        This instance will return the property of the volume registered
        in the 0th port (or nullptr if no volume has been set).
        \sa vtkVolume
        """
        ...
    
    def SetVolume(self, vtkVolume, p_int):
        """
        V.SetVolume(vtkVolume, int)
        C++: void SetVolume(vtkVolume *volume, int port=0)
        
        Add / Remove a vtkVolume instance.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Checks whether the vtkProp passed is another vtkMultiVolume and
        tries to copy accordingly. Otherwise it falls back to
        vtkVolume::ShallowCopy.
        \sa vtkVolume
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


