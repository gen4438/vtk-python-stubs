"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkUnstructuredGridVolumeRayCastIterator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkUnstructuredGridVolumeRayCastIterator -
    vtkUnstructuredGridVolumeRayCastIterator is a superclass for
    iterating over the intersections of a viewing ray with a group of
    unstructured cells.
    
    Superclass: vtkObject
    
    These iterators are created with a
    vtkUnstructuredGridVolumeRayCastFunction.
    
    @sa
    vtkUnstructuredGridVolumeRayCastFunction
    """
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float)
        C++: virtual double *GetBounds()
        
        Set/get the bounds of the cast ray (in viewing coordinates).  By
        default the range is [0,1].
        """
        ...
    
    def GetMaxNumberOfIntersections(self):
        """
        V.GetMaxNumberOfIntersections() -> int
        C++: virtual vtkIdType GetMaxNumberOfIntersections()
        """
        ...
    
    def GetNextIntersections(self, vtkIdList, vtkDoubleArray, vtkDataArray, vtkDataArray_1, vtkDataArray_2):
        """
        V.GetNextIntersections(vtkIdList, vtkDoubleArray, vtkDataArray,
            vtkDataArray, vtkDataArray) -> int
        C++: virtual vtkIdType GetNextIntersections(
            vtkIdList *intersectedCells,
            vtkDoubleArray *intersectionLengths, vtkDataArray *scalars,
            vtkDataArray *nearIntersections,
            vtkDataArray *farIntersections)
        
        Get the intersections of the next several cells.  The cell ids
        are stored in intersectedCells and the length of each ray segment
        within the cell is stored in intersectionLengths.  The point
        scalars scalars are interpolated and stored in nearIntersections
        and farIntersections.  intersectedCells, intersectionLengths, or
        scalars may be NULL to suppress passing the associated
        information.  The number of intersections actually encountered is
        returned.  0 is returned if and only if no more intersections are
        to be found.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Initialize(self, p_int, p_int_1):
        """
        V.Initialize(int, int)
        C++: virtual void Initialize(int x, int y)
        
        Initializes the iteration to the start of the ray at the given
        screen coordinates.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUnstructuredGridVolumeRayCastIterator
        C++: vtkUnstructuredGridVolumeRayCastIterator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkUnstructuredGridVolumeRayCastIterator
        C++: static vtkUnstructuredGridVolumeRayCastIterator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBounds(self, p_float, p_float_1):
        """
        V.SetBounds(float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2)
        V.SetBounds((float, float))
        C++: void SetBounds(const double _arg[2])
        
        Set/get the bounds of the cast ray (in viewing coordinates).  By
        default the range is [0,1].
        """
        ...
    
    def SetMaxNumberOfIntersections(self, p_int):
        """
        V.SetMaxNumberOfIntersections(int)
        C++: virtual void SetMaxNumberOfIntersections(vtkIdType _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


