"""
This type stub file was generated by pyright.
"""

from .vtkVolumeMapper import vtkVolumeMapper

class vtkGPUVolumeRayCastMapper(vtkVolumeMapper):
    """
    vtkGPUVolumeRayCastMapper - Ray casting performed on the GPU.
    
    Superclass: vtkVolumeMapper
    
    vtkGPUVolumeRayCastMapper is a volume mapper that performs ray
    casting on the GPU using fragment programs.
    
    This mapper supports connections in multiple ports of input 0 (port 0
    being the only required connection). It is up to the concrete
    implementation whether additional inputs will be used during
    rendering. This class maintains a list of the currently active input
    ports (Ports) as well as a list of the ports that have been
    disconnected (RemovedPorts). RemovedPorts is used the the concrete
    implementation to clean up internal structures.
    """
    def AutoAdjustSampleDistancesOff(self):
        """
        V.AutoAdjustSampleDistancesOff()
        C++: virtual void AutoAdjustSampleDistancesOff()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance will
        be varied to achieve the allocated render time of this prop
        (controlled by the desired update rate and any culling in use).
        """
        ...
    
    def AutoAdjustSampleDistancesOn(self):
        """
        V.AutoAdjustSampleDistancesOn()
        C++: virtual void AutoAdjustSampleDistancesOn()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance will
        be varied to achieve the allocated render time of this prop
        (controlled by the desired update rate and any culling in use).
        """
        ...
    
    def ClampDepthToBackfaceOff(self):
        """
        V.ClampDepthToBackfaceOff()
        C++: virtual void ClampDepthToBackfaceOff()
        
        Enable or disable clamping the depth value of the fully
        transparent voxel to the depth of the back-face of the volume.
        This parameter is used when RenderToImage mode is enabled. When
        ClampDepthToBackFace is false, the fully transparent voxels will
        have a value of 1.0 in the depth image. When this is true, the
        fully transparent voxels will have the depth value of the face at
        which the ray exits the volume. By default, this is set to 0
        (off).
        \sa SetRenderToImage(), GetDepthImage()
        """
        ...
    
    def ClampDepthToBackfaceOn(self):
        """
        V.ClampDepthToBackfaceOn()
        C++: virtual void ClampDepthToBackfaceOn()
        
        Enable or disable clamping the depth value of the fully
        transparent voxel to the depth of the back-face of the volume.
        This parameter is used when RenderToImage mode is enabled. When
        ClampDepthToBackFace is false, the fully transparent voxels will
        have a value of 1.0 in the depth image. When this is true, the
        fully transparent voxels will have the depth value of the face at
        which the ray exits the volume. By default, this is set to 0
        (off).
        \sa SetRenderToImage(), GetDepthImage()
        """
        ...
    
    def CreateCanonicalView(self, vtkRenderer, vtkVolume, vtkImageData, p_int, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.CreateCanonicalView(vtkRenderer, vtkVolume, vtkImageData, int,
            [float, float, float], [float, float, float])
        C++: void CreateCanonicalView(vtkRenderer *ren, vtkVolume *volume,
             vtkImageData *image, int blend_mode, double viewDirection[3],
             double viewUp[3])
        """
        ...
    
    def GetAutoAdjustSampleDistances(self):
        """
        V.GetAutoAdjustSampleDistances() -> int
        C++: virtual vtkTypeBool GetAutoAdjustSampleDistances()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance will
        be varied to achieve the allocated render time of this prop
        (controlled by the desired update rate and any culling in use).
        """
        ...
    
    def GetAutoAdjustSampleDistancesMaxValue(self):
        """
        V.GetAutoAdjustSampleDistancesMaxValue() -> int
        C++: virtual vtkTypeBool GetAutoAdjustSampleDistancesMaxValue()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance will
        be varied to achieve the allocated render time of this prop
        (controlled by the desired update rate and any culling in use).
        """
        ...
    
    def GetAutoAdjustSampleDistancesMinValue(self):
        """
        V.GetAutoAdjustSampleDistancesMinValue() -> int
        C++: virtual vtkTypeBool GetAutoAdjustSampleDistancesMinValue()
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance will
        be varied to achieve the allocated render time of this prop
        (controlled by the desired update rate and any culling in use).
        """
        ...
    
    def GetBoundsFromPort(self, p_int):
        """
        V.GetBoundsFromPort(int) -> (float, float, float, float, float,
            float)
        C++: double *GetBoundsFromPort(const int port)
        """
        ...
    
    def GetClampDepthToBackface(self):
        """
        V.GetClampDepthToBackface() -> int
        C++: virtual vtkTypeBool GetClampDepthToBackface()
        
        Enable or disable clamping the depth value of the fully
        transparent voxel to the depth of the back-face of the volume.
        This parameter is used when RenderToImage mode is enabled. When
        ClampDepthToBackFace is false, the fully transparent voxels will
        have a value of 1.0 in the depth image. When this is true, the
        fully transparent voxels will have the depth value of the face at
        which the ray exits the volume. By default, this is set to 0
        (off).
        \sa SetRenderToImage(), GetDepthImage()
        """
        ...
    
    def GetColorImage(self, vtkImageData):
        """
        V.GetColorImage(vtkImageData)
        C++: virtual void GetColorImage(vtkImageData *)
        
        Low level API to export the color texture as vtkImageData in
        RenderToImage mode. Should be implemented by the graphics API
        specific mapper (GL or other).
        \sa SetRenderToImage()
        """
        ...
    
    def GetColorRangeType(self):
        """
        V.GetColorRangeType() -> int
        C++: virtual int GetColorRangeType()
        
        Set whether to use the scalar range or the native transfer
        function range when looking up transfer functions for color and
        opacity values. When the range is set to
        TransferFunctionRange::SCALAR, the function is distributed over
        the entire scalar range. If it is set to
        TransferFunctionRange::NATIVE, the scalar values outside the
        native transfer function range will be truncated to native range.
        By default, the volume scalar range is used.
        
        ote The native range of the transfer function is the range
        returned by vtkColorTransferFunction::GetRange() or
        vtkPiecewiseFunction::GetRange().
        
        ote There is no special API provided for 2D transfer functions
        considering that they are set as a pre-generated vtkImageData on
        this class i.e. the range is already encoded.
        """
        ...
    
    def GetDepthImage(self, vtkImageData):
        """
        V.GetDepthImage(vtkImageData)
        C++: virtual void GetDepthImage(vtkImageData *)
        
        Low level API to export the depth texture as vtkImageData in
        RenderToImage mode. Should be implemented by the graphics API
        specific mapper (GL or other).
        \sa SetRenderToImage()
        """
        ...
    
    def GetDepthImageScalarType(self):
        """
        V.GetDepthImageScalarType() -> int
        C++: virtual int GetDepthImageScalarType()
        
        Set/Get the scalar type of the depth texture in RenderToImage
        mode. By default, the type if VTK_FLOAT.
        \sa SetRenderToImage()
        """
        ...
    
    def GetDepthPassContourValues(self):
        """
        V.GetDepthPassContourValues() -> vtkContourValues
        C++: vtkContourValues *GetDepthPassContourValues()
        
        Return handle to contour values container so that values can be
        set by the application. Contour values will be used only when
        UseDepthPass is on.
        """
        ...
    
    def GetFinalColorLevel(self):
        """
        V.GetFinalColorLevel() -> float
        C++: virtual float GetFinalColorLevel()
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def GetFinalColorWindow(self):
        """
        V.GetFinalColorWindow() -> float
        C++: virtual float GetFinalColorWindow()
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def GetGradientOpacityRangeType(self):
        """
        V.GetGradientOpacityRangeType() -> int
        C++: virtual int GetGradientOpacityRangeType()
        
        Set whether to use the scalar range or the native transfer
        function range when looking up transfer functions for color and
        opacity values. When the range is set to
        TransferFunctionRange::SCALAR, the function is distributed over
        the entire scalar range. If it is set to
        TransferFunctionRange::NATIVE, the scalar values outside the
        native transfer function range will be truncated to native range.
        By default, the volume scalar range is used.
        
        ote The native range of the transfer function is the range
        returned by vtkColorTransferFunction::GetRange() or
        vtkPiecewiseFunction::GetRange().
        
        ote There is no special API provided for 2D transfer functions
        considering that they are set as a pre-generated vtkImageData on
        this class i.e. the range is already encoded.
        """
        ...
    
    def GetImageSampleDistance(self):
        """
        V.GetImageSampleDistance() -> float
        C++: virtual float GetImageSampleDistance()
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def GetImageSampleDistanceMaxValue(self):
        """
        V.GetImageSampleDistanceMaxValue() -> float
        C++: virtual float GetImageSampleDistanceMaxValue()
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def GetImageSampleDistanceMinValue(self):
        """
        V.GetImageSampleDistanceMinValue() -> float
        C++: virtual float GetImageSampleDistanceMinValue()
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: vtkImageData *GetInput() override;
        
        Set/Get the input data
        """
        ...
    
    def GetInputCount(self):
        """
        V.GetInputCount() -> int
        C++: int GetInputCount()
        
        Number of currently active ports.
        """
        ...
    
    def GetLockSampleDistanceToInputSpacing(self):
        """
        V.GetLockSampleDistanceToInputSpacing() -> int
        C++: virtual vtkTypeBool GetLockSampleDistanceToInputSpacing()
        
        Compute the sample distance from the data spacing.  When the
        number of voxels is 8, the sample distance will be roughly 1/200
        the average voxel size. The distance will grow proportionally to
        numVoxels^(1/3). Off by default.
        """
        ...
    
    def GetLockSampleDistanceToInputSpacingMaxValue(self):
        """
        V.GetLockSampleDistanceToInputSpacingMaxValue() -> int
        C++: virtual vtkTypeBool GetLockSampleDistanceToInputSpacingMaxValue(
            )
        
        Compute the sample distance from the data spacing.  When the
        number of voxels is 8, the sample distance will be roughly 1/200
        the average voxel size. The distance will grow proportionally to
        numVoxels^(1/3). Off by default.
        """
        ...
    
    def GetLockSampleDistanceToInputSpacingMinValue(self):
        """
        V.GetLockSampleDistanceToInputSpacingMinValue() -> int
        C++: virtual vtkTypeBool GetLockSampleDistanceToInputSpacingMinValue(
            )
        
        Compute the sample distance from the data spacing.  When the
        number of voxels is 8, the sample distance will be roughly 1/200
        the average voxel size. The distance will grow proportionally to
        numVoxels^(1/3). Off by default.
        """
        ...
    
    def GetMaskBlendFactor(self):
        """
        V.GetMaskBlendFactor() -> float
        C++: virtual float GetMaskBlendFactor()
        
        Tells how much mask color transfer function is used compared to
        the standard color transfer function when the mask is true. This
        is relevant only for the label map mask. 0.0 means only standard
        color transfer function. 1.0 means only mask color transfer
        function. The default value is 1.0.
        """
        ...
    
    def GetMaskBlendFactorMaxValue(self):
        """
        V.GetMaskBlendFactorMaxValue() -> float
        C++: virtual float GetMaskBlendFactorMaxValue()
        
        Tells how much mask color transfer function is used compared to
        the standard color transfer function when the mask is true. This
        is relevant only for the label map mask. 0.0 means only standard
        color transfer function. 1.0 means only mask color transfer
        function. The default value is 1.0.
        """
        ...
    
    def GetMaskBlendFactorMinValue(self):
        """
        V.GetMaskBlendFactorMinValue() -> float
        C++: virtual float GetMaskBlendFactorMinValue()
        
        Tells how much mask color transfer function is used compared to
        the standard color transfer function when the mask is true. This
        is relevant only for the label map mask. 0.0 means only standard
        color transfer function. 1.0 means only mask color transfer
        function. The default value is 1.0.
        """
        ...
    
    def GetMaskInput(self):
        """
        V.GetMaskInput() -> vtkImageData
        C++: virtual vtkImageData *GetMaskInput()
        
        Optionally, set a mask input. This mask may be a binary mask or a
        label map. This must be specified via SetMaskType.
        
        * If the mask is a binary mask, the volume rendering is confined
          to regions
        * within the binary mask. The binary mask is assumed to have a
          datatype of
        * UCHAR and values of 255 (inside) and 0 (outside).
        
        * The mask may also be a label map. The label map must have a
          datatype of
        * UCHAR i.e. it can have upto 256 labels. The label 0 is reserved
        as a
        * special label. In voxels with label value of 0, the default
          transfer
        * functions supplied by vtkVolumeProperty are used.
        *
        * For voxels with a label values greater than 0, the color
          transfer functions
        * supplied using vtkVolumeProperty's label API are used.
        *
        * For voxels with a label value greater than 0, the color
          transfer function
        * is blended with the default color transfer function, with the
          blending
        * weight determined by MaskBlendFactor.
        """
        ...
    
    def GetMaskType(self):
        """
        V.GetMaskType() -> int
        C++: virtual int GetMaskType()
        
        Set the mask type, if mask is to be used. See documentation for
        SetMaskInput(). The default is a LabelMapMaskType.
        """
        ...
    
    def GetMaximumImageSampleDistance(self):
        """
        V.GetMaximumImageSampleDistance() -> float
        C++: virtual float GetMaximumImageSampleDistance()
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMaximumImageSampleDistanceMaxValue(self):
        """
        V.GetMaximumImageSampleDistanceMaxValue() -> float
        C++: virtual float GetMaximumImageSampleDistanceMaxValue()
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMaximumImageSampleDistanceMinValue(self):
        """
        V.GetMaximumImageSampleDistanceMinValue() -> float
        C++: virtual float GetMaximumImageSampleDistanceMinValue()
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMaxMemoryFraction(self):
        """
        V.GetMaxMemoryFraction() -> float
        C++: virtual float GetMaxMemoryFraction()
        
        Maximum fraction of the MaxMemoryInBytes that should be used to
        hold the texture. Valid values are 0.1 to 1.0.
        """
        ...
    
    def GetMaxMemoryFractionMaxValue(self):
        """
        V.GetMaxMemoryFractionMaxValue() -> float
        C++: virtual float GetMaxMemoryFractionMaxValue()
        
        Maximum fraction of the MaxMemoryInBytes that should be used to
        hold the texture. Valid values are 0.1 to 1.0.
        """
        ...
    
    def GetMaxMemoryFractionMinValue(self):
        """
        V.GetMaxMemoryFractionMinValue() -> float
        C++: virtual float GetMaxMemoryFractionMinValue()
        
        Maximum fraction of the MaxMemoryInBytes that should be used to
        hold the texture. Valid values are 0.1 to 1.0.
        """
        ...
    
    def GetMaxMemoryInBytes(self):
        """
        V.GetMaxMemoryInBytes() -> int
        C++: virtual vtkIdType GetMaxMemoryInBytes()
        
        Maximum size of the 3D texture in GPU memory. Will default to the
        size computed from the graphics card. Can be adjusted by the
        user.
        """
        ...
    
    def GetMinimumImageSampleDistance(self):
        """
        V.GetMinimumImageSampleDistance() -> float
        C++: virtual float GetMinimumImageSampleDistance()
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMinimumImageSampleDistanceMaxValue(self):
        """
        V.GetMinimumImageSampleDistanceMaxValue() -> float
        C++: virtual float GetMinimumImageSampleDistanceMaxValue()
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetMinimumImageSampleDistanceMinValue(self):
        """
        V.GetMinimumImageSampleDistanceMinValue() -> float
        C++: virtual float GetMinimumImageSampleDistanceMinValue()
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReductionRatio(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetReductionRatio([float, float, float])
        C++: virtual void GetReductionRatio(double ratio[3])
        
        Return how much the dataset has to be reduced in each dimension
        to fit on the GPU. If the value is 1.0, there is no need to
        reduce the dataset.
        \pre the calling thread has a current OpenGL context.
        \pre mapper_supported:
            IsRenderSupported(renderer->GetRenderWindow(),0)
        The computation is based on hardware limits (3D texture indexable
        size) and MaxMemoryInBytes.
        \post valid_i_ratio: ratio[0]>0 && ratio[0]<=1.0
        \post valid_j_ratio: ratio[1]>0 && ratio[1]<=1.0
        \post valid_k_ratio: ratio[2]>0 && ratio[2]<=1.0
        """
        ...
    
    def GetRenderToImage(self):
        """
        V.GetRenderToImage() -> int
        C++: virtual vtkTypeBool GetRenderToImage()
        
        Enable or disable setting output of volume rendering to be color
        and depth textures. By default this is set to 0 (off). It should
        be noted that it is possible that underlying API specific mapper
        may not supoport RenderToImage mode.
        \warning
        \li This method ignores any other volumes / props in the scene.
        \li This method does not respect the general attributes of the
        scene i.e. background color, etc. It always produces a color
        image that has a transparent white background outside the bounds
        of the volume.
        
        * \sa GetDepthImage(), GetColorImage()
        """
        ...
    
    def GetReportProgress(self):
        """
        V.GetReportProgress() -> bool
        C++: virtual bool GetReportProgress()
        
        Tells if the mapper will report intermediate progress. Initial
        value is true. As the progress works with a GL blocking call
        (glFinish()), this can be useful for huge dataset but can slow
        down rendering of small dataset. It should be set to true for big
        dataset or complex shading and streaming but to false for small
        datasets.
        """
        ...
    
    def GetSampleDistance(self):
        """
        V.GetSampleDistance() -> float
        C++: virtual float GetSampleDistance()
        
        Set/Get the distance between samples used for rendering when
        AutoAdjustSampleDistances is off, or when this mapper has more
        than 1 second allocated to it for rendering. Initial value is
        1.0.
        """
        ...
    
    def GetScalarOpacityRangeType(self):
        """
        V.GetScalarOpacityRangeType() -> int
        C++: virtual int GetScalarOpacityRangeType()
        
        Set whether to use the scalar range or the native transfer
        function range when looking up transfer functions for color and
        opacity values. When the range is set to
        TransferFunctionRange::SCALAR, the function is distributed over
        the entire scalar range. If it is set to
        TransferFunctionRange::NATIVE, the scalar values outside the
        native transfer function range will be truncated to native range.
        By default, the volume scalar range is used.
        
        ote The native range of the transfer function is the range
        returned by vtkColorTransferFunction::GetRange() or
        vtkPiecewiseFunction::GetRange().
        
        ote There is no special API provided for 2D transfer functions
        considering that they are set as a pre-generated vtkImageData on
        this class i.e. the range is already encoded.
        """
        ...
    
    def GetTransformedInput(self, p_int):
        """
        V.GetTransformedInput(int) -> vtkImageData
        C++: vtkImageData *GetTransformedInput(const int port=0)
        """
        ...
    
    def GetUseDepthPass(self):
        """
        V.GetUseDepthPass() -> int
        C++: virtual vtkTypeBool GetUseDepthPass()
        
        If UseDepthPass is on, the mapper will use two passes. In the
        first pass, an isocontour depth buffer will be utilized as
        starting point for ray-casting hence eliminating traversal on
        voxels that are not going to participate in final rendering.
        UseDepthPass requires reasonable contour values to be set which
        can be set by calling GetDepthPassContourValues() method and
        using vtkControurValues API.
        """
        ...
    
    def GetUseDepthPassMaxValue(self):
        """
        V.GetUseDepthPassMaxValue() -> int
        C++: virtual vtkTypeBool GetUseDepthPassMaxValue()
        
        If UseDepthPass is on, the mapper will use two passes. In the
        first pass, an isocontour depth buffer will be utilized as
        starting point for ray-casting hence eliminating traversal on
        voxels that are not going to participate in final rendering.
        UseDepthPass requires reasonable contour values to be set which
        can be set by calling GetDepthPassContourValues() method and
        using vtkControurValues API.
        """
        ...
    
    def GetUseDepthPassMinValue(self):
        """
        V.GetUseDepthPassMinValue() -> int
        C++: virtual vtkTypeBool GetUseDepthPassMinValue()
        
        If UseDepthPass is on, the mapper will use two passes. In the
        first pass, an isocontour depth buffer will be utilized as
        starting point for ray-casting hence eliminating traversal on
        voxels that are not going to participate in final rendering.
        UseDepthPass requires reasonable contour values to be set which
        can be set by calling GetDepthPassContourValues() method and
        using vtkControurValues API.
        """
        ...
    
    def GetUseJittering(self):
        """
        V.GetUseJittering() -> int
        C++: virtual vtkTypeBool GetUseJittering()
        
        If UseJittering is on, each ray traversal direction will be
        perturbed slightly using a noise-texture to get rid of wood-grain
        effect.
        """
        ...
    
    def GetUseJitteringMaxValue(self):
        """
        V.GetUseJitteringMaxValue() -> int
        C++: virtual vtkTypeBool GetUseJitteringMaxValue()
        
        If UseJittering is on, each ray traversal direction will be
        perturbed slightly using a noise-texture to get rid of wood-grain
        effect.
        """
        ...
    
    def GetUseJitteringMinValue(self):
        """
        V.GetUseJitteringMinValue() -> int
        C++: virtual vtkTypeBool GetUseJitteringMinValue()
        
        If UseJittering is on, each ray traversal direction will be
        perturbed slightly using a noise-texture to get rid of wood-grain
        effect.
        """
        ...
    
    def GPURender(self, vtkRenderer, vtkVolume):
        """
        V.GPURender(vtkRenderer, vtkVolume)
        C++: virtual void GPURender(vtkRenderer *, vtkVolume *)
        
        Handled in the subclass - the actual render method
        \pre input is up-to-date.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsRenderSupported(self, vtkRenderWindow, vtkVolumeProperty):
        """
        V.IsRenderSupported(vtkRenderWindow, vtkVolumeProperty) -> int
        C++: virtual int IsRenderSupported(vtkRenderWindow *window,
            vtkVolumeProperty *property)
        
        Based on hardware and properties, we may or may not be able to
        render using 3D texture mapping. This indicates if 3D texture
        mapping is supported by the hardware, and if the other extensions
        necessary to support the specific properties are available.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LockSampleDistanceToInputSpacingOff(self):
        """
        V.LockSampleDistanceToInputSpacingOff()
        C++: virtual void LockSampleDistanceToInputSpacingOff()
        
        Compute the sample distance from the data spacing.  When the
        number of voxels is 8, the sample distance will be roughly 1/200
        the average voxel size. The distance will grow proportionally to
        numVoxels^(1/3). Off by default.
        """
        ...
    
    def LockSampleDistanceToInputSpacingOn(self):
        """
        V.LockSampleDistanceToInputSpacingOn()
        C++: virtual void LockSampleDistanceToInputSpacingOn()
        
        Compute the sample distance from the data spacing.  When the
        number of voxels is 8, the sample distance will be roughly 1/200
        the average voxel size. The distance will grow proportionally to
        numVoxels^(1/3). Off by default.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGPUVolumeRayCastMapper
        C++: vtkGPUVolumeRayCastMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        mapper. The parameter window could be used to determine which
        graphic resources to release.
        \warning INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
        """
        ...
    
    def RemoveInputConnection(self, p_int, vtkAlgorithmOutput):
        """
        V.RemoveInputConnection(int, vtkAlgorithmOutput)
        C++: void RemoveInputConnection(int port,
            vtkAlgorithmOutput *input) override;
        V.RemoveInputConnection(int, int)
        C++: void RemoveInputConnection(int port, int idx) override;
        
        Add/Remove input connections. Active and removed ports are cached
        in Ports and RemovedPorts respectively.
        """
        ...
    
    def Render(self, vtkRenderer, vtkVolume):
        """
        V.Render(vtkRenderer, vtkVolume)
        C++: void Render(vtkRenderer *, vtkVolume *) override;
        
        Initialize rendering for this volume.
        \warning INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
        """
        ...
    
    def RenderToImageOff(self):
        """
        V.RenderToImageOff()
        C++: virtual void RenderToImageOff()
        
        Enable or disable setting output of volume rendering to be color
        and depth textures. By default this is set to 0 (off). It should
        be noted that it is possible that underlying API specific mapper
        may not supoport RenderToImage mode.
        \warning
        \li This method ignores any other volumes / props in the scene.
        \li This method does not respect the general attributes of the
        scene i.e. background color, etc. It always produces a color
        image that has a transparent white background outside the bounds
        of the volume.
        
        * \sa GetDepthImage(), GetColorImage()
        """
        ...
    
    def RenderToImageOn(self):
        """
        V.RenderToImageOn()
        C++: virtual void RenderToImageOn()
        
        Enable or disable setting output of volume rendering to be color
        and depth textures. By default this is set to 0 (off). It should
        be noted that it is possible that underlying API specific mapper
        may not supoport RenderToImage mode.
        \warning
        \li This method ignores any other volumes / props in the scene.
        \li This method does not respect the general attributes of the
        scene i.e. background color, etc. It always produces a color
        image that has a transparent white background outside the bounds
        of the volume.
        
        * \sa GetDepthImage(), GetColorImage()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGPUVolumeRayCastMapper
        C++: static vtkGPUVolumeRayCastMapper *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAutoAdjustSampleDistances(self, p_int):
        """
        V.SetAutoAdjustSampleDistances(int)
        C++: virtual void SetAutoAdjustSampleDistances(vtkTypeBool _arg)
        
        If AutoAdjustSampleDistances is on, the ImageSampleDistance will
        be varied to achieve the allocated render time of this prop
        (controlled by the desired update rate and any culling in use).
        """
        ...
    
    def SetClampDepthToBackface(self, p_int):
        """
        V.SetClampDepthToBackface(int)
        C++: virtual void SetClampDepthToBackface(vtkTypeBool _arg)
        
        Enable or disable clamping the depth value of the fully
        transparent voxel to the depth of the back-face of the volume.
        This parameter is used when RenderToImage mode is enabled. When
        ClampDepthToBackFace is false, the fully transparent voxels will
        have a value of 1.0 in the depth image. When this is true, the
        fully transparent voxels will have the depth value of the face at
        which the ray exits the volume. By default, this is set to 0
        (off).
        \sa SetRenderToImage(), GetDepthImage()
        """
        ...
    
    def SetColorRangeType(self, p_int):
        """
        V.SetColorRangeType(int)
        C++: virtual void SetColorRangeType(int _arg)
        
        Set whether to use the scalar range or the native transfer
        function range when looking up transfer functions for color and
        opacity values. When the range is set to
        TransferFunctionRange::SCALAR, the function is distributed over
        the entire scalar range. If it is set to
        TransferFunctionRange::NATIVE, the scalar values outside the
        native transfer function range will be truncated to native range.
        By default, the volume scalar range is used.
        
        ote The native range of the transfer function is the range
        returned by vtkColorTransferFunction::GetRange() or
        vtkPiecewiseFunction::GetRange().
        
        ote There is no special API provided for 2D transfer functions
        considering that they are set as a pre-generated vtkImageData on
        this class i.e. the range is already encoded.
        """
        ...
    
    def SetDepthImageScalarType(self, p_int):
        """
        V.SetDepthImageScalarType(int)
        C++: virtual void SetDepthImageScalarType(int _arg)
        
        Set/Get the scalar type of the depth texture in RenderToImage
        mode. By default, the type if VTK_FLOAT.
        \sa SetRenderToImage()
        """
        ...
    
    def SetDepthImageScalarTypeToFloat(self):
        """
        V.SetDepthImageScalarTypeToFloat()
        C++: void SetDepthImageScalarTypeToFloat()
        
        Set/Get the scalar type of the depth texture in RenderToImage
        mode. By default, the type if VTK_FLOAT.
        \sa SetRenderToImage()
        """
        ...
    
    def SetDepthImageScalarTypeToUnsignedChar(self):
        """
        V.SetDepthImageScalarTypeToUnsignedChar()
        C++: void SetDepthImageScalarTypeToUnsignedChar()
        
        Set/Get the scalar type of the depth texture in RenderToImage
        mode. By default, the type if VTK_FLOAT.
        \sa SetRenderToImage()
        """
        ...
    
    def SetDepthImageScalarTypeToUnsignedShort(self):
        """
        V.SetDepthImageScalarTypeToUnsignedShort()
        C++: void SetDepthImageScalarTypeToUnsignedShort()
        
        Set/Get the scalar type of the depth texture in RenderToImage
        mode. By default, the type if VTK_FLOAT.
        \sa SetRenderToImage()
        """
        ...
    
    def SetFinalColorLevel(self, p_float):
        """
        V.SetFinalColorLevel(float)
        C++: virtual void SetFinalColorLevel(float _arg)
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def SetFinalColorWindow(self, p_float):
        """
        V.SetFinalColorWindow(float)
        C++: virtual void SetFinalColorWindow(float _arg)
        
        Set/Get the window / level applied to the final color. This
        allows brightness / contrast adjustments on the final image.
        window is the width of the window. level is the center of the
        window. Initial window value is 1.0 Initial level value is 0.5
        window cannot be null but can be negative, this way values will
        be reversed. |window| can be larger than 1.0 level can be any
        real value.
        """
        ...
    
    def SetGradientOpacityRangeType(self, p_int):
        """
        V.SetGradientOpacityRangeType(int)
        C++: virtual void SetGradientOpacityRangeType(int _arg)
        
        Set whether to use the scalar range or the native transfer
        function range when looking up transfer functions for color and
        opacity values. When the range is set to
        TransferFunctionRange::SCALAR, the function is distributed over
        the entire scalar range. If it is set to
        TransferFunctionRange::NATIVE, the scalar values outside the
        native transfer function range will be truncated to native range.
        By default, the volume scalar range is used.
        
        ote The native range of the transfer function is the range
        returned by vtkColorTransferFunction::GetRange() or
        vtkPiecewiseFunction::GetRange().
        
        ote There is no special API provided for 2D transfer functions
        considering that they are set as a pre-generated vtkImageData on
        this class i.e. the range is already encoded.
        """
        ...
    
    def SetImageSampleDistance(self, p_float):
        """
        V.SetImageSampleDistance(float)
        C++: virtual void SetImageSampleDistance(float _arg)
        
        Sampling distance in the XY image dimensions. Default value of 1
        meaning 1 ray cast per pixel. If set to 0.5, 4 rays will be cast
        per pixel. If set to 2.0, 1 ray will be cast for every 4 (2 by 2)
        pixels. This value will be adjusted to meet a desired frame rate
        when AutoAdjustSampleDistances is on.
        """
        ...
    
    def SetInputConnection(self, p_int, vtkAlgorithmOutput):
        """
        V.SetInputConnection(int, vtkAlgorithmOutput)
        C++: void SetInputConnection(int port, vtkAlgorithmOutput *input)
            override;
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: void SetInputConnection(vtkAlgorithmOutput *input) override;
        
        Add/Remove input connections. Active and removed ports are cached
        in Ports and RemovedPorts respectively.
        """
        ...
    
    def SetLockSampleDistanceToInputSpacing(self, p_int):
        """
        V.SetLockSampleDistanceToInputSpacing(int)
        C++: virtual void SetLockSampleDistanceToInputSpacing(
            vtkTypeBool _arg)
        
        Compute the sample distance from the data spacing.  When the
        number of voxels is 8, the sample distance will be roughly 1/200
        the average voxel size. The distance will grow proportionally to
        numVoxels^(1/3). Off by default.
        """
        ...
    
    def SetMaskBlendFactor(self, p_float):
        """
        V.SetMaskBlendFactor(float)
        C++: virtual void SetMaskBlendFactor(float _arg)
        
        Tells how much mask color transfer function is used compared to
        the standard color transfer function when the mask is true. This
        is relevant only for the label map mask. 0.0 means only standard
        color transfer function. 1.0 means only mask color transfer
        function. The default value is 1.0.
        """
        ...
    
    def SetMaskInput(self, vtkImageData):
        """
        V.SetMaskInput(vtkImageData)
        C++: void SetMaskInput(vtkImageData *mask)
        
        Optionally, set a mask input. This mask may be a binary mask or a
        label map. This must be specified via SetMaskType.
        
        * If the mask is a binary mask, the volume rendering is confined
          to regions
        * within the binary mask. The binary mask is assumed to have a
          datatype of
        * UCHAR and values of 255 (inside) and 0 (outside).
        
        * The mask may also be a label map. The label map must have a
          datatype of
        * UCHAR i.e. it can have upto 256 labels. The label 0 is reserved
        as a
        * special label. In voxels with label value of 0, the default
          transfer
        * functions supplied by vtkVolumeProperty are used.
        *
        * For voxels with a label values greater than 0, the color
          transfer functions
        * supplied using vtkVolumeProperty's label API are used.
        *
        * For voxels with a label value greater than 0, the color
          transfer function
        * is blended with the default color transfer function, with the
          blending
        * weight determined by MaskBlendFactor.
        """
        ...
    
    def SetMaskType(self, p_int):
        """
        V.SetMaskType(int)
        C++: virtual void SetMaskType(int _arg)
        
        Set the mask type, if mask is to be used. See documentation for
        SetMaskInput(). The default is a LabelMapMaskType.
        """
        ...
    
    def SetMaskTypeToBinary(self):
        """
        V.SetMaskTypeToBinary()
        C++: void SetMaskTypeToBinary()
        
        Set the mask type, if mask is to be used. See documentation for
        SetMaskInput(). The default is a LabelMapMaskType.
        """
        ...
    
    def SetMaskTypeToLabelMap(self):
        """
        V.SetMaskTypeToLabelMap()
        C++: void SetMaskTypeToLabelMap()
        
        Set the mask type, if mask is to be used. See documentation for
        SetMaskInput(). The default is a LabelMapMaskType.
        """
        ...
    
    def SetMaximumImageSampleDistance(self, p_float):
        """
        V.SetMaximumImageSampleDistance(float)
        C++: virtual void SetMaximumImageSampleDistance(float _arg)
        
        This is the maximum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def SetMaxMemoryFraction(self, p_float):
        """
        V.SetMaxMemoryFraction(float)
        C++: virtual void SetMaxMemoryFraction(float _arg)
        
        Maximum fraction of the MaxMemoryInBytes that should be used to
        hold the texture. Valid values are 0.1 to 1.0.
        """
        ...
    
    def SetMaxMemoryInBytes(self, p_int):
        """
        V.SetMaxMemoryInBytes(int)
        C++: virtual void SetMaxMemoryInBytes(vtkIdType _arg)
        
        Maximum size of the 3D texture in GPU memory. Will default to the
        size computed from the graphics card. Can be adjusted by the
        user.
        """
        ...
    
    def SetMinimumImageSampleDistance(self, p_float):
        """
        V.SetMinimumImageSampleDistance(float)
        C++: virtual void SetMinimumImageSampleDistance(float _arg)
        
        This is the minimum image sample distance allow when the image
        sample distance is being automatically adjusted.
        """
        ...
    
    def SetRenderToImage(self, p_int):
        """
        V.SetRenderToImage(int)
        C++: virtual void SetRenderToImage(vtkTypeBool _arg)
        
        Enable or disable setting output of volume rendering to be color
        and depth textures. By default this is set to 0 (off). It should
        be noted that it is possible that underlying API specific mapper
        may not supoport RenderToImage mode.
        \warning
        \li This method ignores any other volumes / props in the scene.
        \li This method does not respect the general attributes of the
        scene i.e. background color, etc. It always produces a color
        image that has a transparent white background outside the bounds
        of the volume.
        
        * \sa GetDepthImage(), GetColorImage()
        """
        ...
    
    def SetReportProgress(self, bool):
        """
        V.SetReportProgress(bool)
        C++: virtual void SetReportProgress(bool _arg)
        
        Tells if the mapper will report intermediate progress. Initial
        value is true. As the progress works with a GL blocking call
        (glFinish()), this can be useful for huge dataset but can slow
        down rendering of small dataset. It should be set to true for big
        dataset or complex shading and streaming but to false for small
        datasets.
        """
        ...
    
    def SetSampleDistance(self, p_float):
        """
        V.SetSampleDistance(float)
        C++: virtual void SetSampleDistance(float _arg)
        
        Set/Get the distance between samples used for rendering when
        AutoAdjustSampleDistances is off, or when this mapper has more
        than 1 second allocated to it for rendering. Initial value is
        1.0.
        """
        ...
    
    def SetScalarOpacityRangeType(self, p_int):
        """
        V.SetScalarOpacityRangeType(int)
        C++: virtual void SetScalarOpacityRangeType(int _arg)
        
        Set whether to use the scalar range or the native transfer
        function range when looking up transfer functions for color and
        opacity values. When the range is set to
        TransferFunctionRange::SCALAR, the function is distributed over
        the entire scalar range. If it is set to
        TransferFunctionRange::NATIVE, the scalar values outside the
        native transfer function range will be truncated to native range.
        By default, the volume scalar range is used.
        
        ote The native range of the transfer function is the range
        returned by vtkColorTransferFunction::GetRange() or
        vtkPiecewiseFunction::GetRange().
        
        ote There is no special API provided for 2D transfer functions
        considering that they are set as a pre-generated vtkImageData on
        this class i.e. the range is already encoded.
        """
        ...
    
    def SetUseDepthPass(self, p_int):
        """
        V.SetUseDepthPass(int)
        C++: virtual void SetUseDepthPass(vtkTypeBool _arg)
        
        If UseDepthPass is on, the mapper will use two passes. In the
        first pass, an isocontour depth buffer will be utilized as
        starting point for ray-casting hence eliminating traversal on
        voxels that are not going to participate in final rendering.
        UseDepthPass requires reasonable contour values to be set which
        can be set by calling GetDepthPassContourValues() method and
        using vtkControurValues API.
        """
        ...
    
    def SetUseJittering(self, p_int):
        """
        V.SetUseJittering(int)
        C++: virtual void SetUseJittering(vtkTypeBool _arg)
        
        If UseJittering is on, each ray traversal direction will be
        perturbed slightly using a noise-texture to get rid of wood-grain
        effect.
        """
        ...
    
    def UseDepthPassOff(self):
        """
        V.UseDepthPassOff()
        C++: virtual void UseDepthPassOff()
        
        If UseDepthPass is on, the mapper will use two passes. In the
        first pass, an isocontour depth buffer will be utilized as
        starting point for ray-casting hence eliminating traversal on
        voxels that are not going to participate in final rendering.
        UseDepthPass requires reasonable contour values to be set which
        can be set by calling GetDepthPassContourValues() method and
        using vtkControurValues API.
        """
        ...
    
    def UseDepthPassOn(self):
        """
        V.UseDepthPassOn()
        C++: virtual void UseDepthPassOn()
        
        If UseDepthPass is on, the mapper will use two passes. In the
        first pass, an isocontour depth buffer will be utilized as
        starting point for ray-casting hence eliminating traversal on
        voxels that are not going to participate in final rendering.
        UseDepthPass requires reasonable contour values to be set which
        can be set by calling GetDepthPassContourValues() method and
        using vtkControurValues API.
        """
        ...
    
    def UseJitteringOff(self):
        """
        V.UseJitteringOff()
        C++: virtual void UseJitteringOff()
        
        If UseJittering is on, each ray traversal direction will be
        perturbed slightly using a noise-texture to get rid of wood-grain
        effect.
        """
        ...
    
    def UseJitteringOn(self):
        """
        V.UseJitteringOn()
        C++: virtual void UseJitteringOn()
        
        If UseJittering is on, each ray traversal direction will be
        perturbed slightly using a noise-texture to get rid of wood-grain
        effect.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BinaryMaskType = ...
    LabelMapMaskType = ...
    NATIVE = ...
    SCALAR = ...
    TFRangeType = ...
    __dict__ = ...
    __vtkname__ = ...


