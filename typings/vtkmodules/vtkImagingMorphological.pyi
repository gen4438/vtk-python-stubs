"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkImagingCore as __vtkmodules_vtkImagingCore
import vtkmodules.vtkImagingGeneral as __vtkmodules_vtkImagingGeneral

VTK_IMAGE_NON_MAXIMUM_SUPPRESSION_MAGNITUDE_INPUT = ...
VTK_IMAGE_NON_MAXIMUM_SUPPRESSION_VECTOR_INPUT = ...
class vtkImageConnectivityFilter(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageConnectivityFilter - Label an image by connectivity
    
    Superclass: vtkImageAlgorithm
    
    vtkImageConnectivityFilter will identify connected regions within an
    image and label them.  Only points with scalar values within a
    prescribed range are considered for inclusion, by default this range
    includes all scalar values with a value greater than zero.  Points
    within the prescribed scalar range are considered to be connected if
    a path exists between the points that does not traverse any points
    that are not within the prescribed scalar range. Adjacency of points
    is governed by 4-connectivity for 2D images, and 6-connectivity for
    3D images.
    
    The output of this filter is a label image.  By default, each region
    is assigned a different label, where the labels are integer values
    starting at a value of 1.  The SetLabelMode() method can be used to
    change the way that labels are assigned.  Labels can be assigned by
    providing input seed points for each region to be labelled, or they
    can be assigned by ranking the regions by size.
    
    If a set of seeds is provided with the SetSeedData() method, then the
    default behavior is to only output the regions that are connected to
    the seeds, and if the seeds have scalars, then these scalars will be
    used to label the regions.  Seeds with a scalar value equal to zero
    are ignored.  See the documentation for the SetExtractionMode()
    method for details on how to control which regions will labeled.
    
    Regions can be selected by size with the SetSizeRange() method, which
    can be useful for identifying objects of a certain size, e.g. for
    rejecting small regions that are likely to be noise. It is also
    possible to label only the largest region and ignore all others, with
    SetExtractionModeToLargestRegion().
    
    In addition to the labels, the following additional information is
    provided: the number of regions identified, the size of each region,
    a list of all label values used, and the seed for each region (if
    seeds were used).  Optionally, this filter can also compute the
    extent of each region if GenerateRegionExtentsOn() is called.  These
    extents can be useful for cropping the output of the filter.
    
    @sa
    vtkConnectivityFilter, vtkPolyDataConnectivityFilter,
    vtkmImageConnectivity
    """
    def GenerateRegionExtentsOff(self):
        """
        V.GenerateRegionExtentsOff()
        C++: virtual void GenerateRegionExtentsOff()
        
        Turn this on to request creation of the ExtractedRegionExtents
        array.
        """
        ...
    
    def GenerateRegionExtentsOn(self):
        """
        V.GenerateRegionExtentsOn()
        C++: virtual void GenerateRegionExtentsOn()
        
        Turn this on to request creation of the ExtractedRegionExtents
        array.
        """
        ...
    
    def GetActiveComponent(self):
        """
        V.GetActiveComponent() -> int
        C++: virtual int GetActiveComponent()
        
        For multi-component input images, select which component to use.
        """
        ...
    
    def GetExtractedRegionExtents(self):
        """
        V.GetExtractedRegionExtents() -> vtkIntArray
        C++: vtkIntArray *GetExtractedRegionExtents()
        
        Get the extent (a 6-tuples) for each output region. This is only
        valid if GenerateRegionExtentsOn() was called before the filter
        was executed.
        """
        ...
    
    def GetExtractedRegionLabels(self):
        """
        V.GetExtractedRegionLabels() -> vtkIdTypeArray
        C++: vtkIdTypeArray *GetExtractedRegionLabels()
        
        Get the label used for each extracted region.
        """
        ...
    
    def GetExtractedRegionSeedIds(self):
        """
        V.GetExtractedRegionSeedIds() -> vtkIdTypeArray
        C++: vtkIdTypeArray *GetExtractedRegionSeedIds()
        
        Get the PointId of the seed for each region. If no seed was used,
        the PointId will be -1.
        """
        ...
    
    def GetExtractedRegionSizes(self):
        """
        V.GetExtractedRegionSizes() -> vtkIdTypeArray
        C++: vtkIdTypeArray *GetExtractedRegionSizes()
        
        Get the size of each extracted region, as a voxel count.
        """
        ...
    
    def GetExtractionMode(self):
        """
        V.GetExtractionMode() -> int
        C++: virtual int GetExtractionMode()
        
        Set which regions to output from this filter. This can be all the
        regions, just the seeded regions, or the largest region (which
        will be the largest seeded region, if there are seeds). The
        default is to output all the seeded regions, if there are seeds,
        or to output all the regions, if there are no seeds.
        """
        ...
    
    def GetExtractionModeAsString(self):
        """
        V.GetExtractionModeAsString() -> string
        C++: const char *GetExtractionModeAsString()
        
        Set which regions to output from this filter. This can be all the
        regions, just the seeded regions, or the largest region (which
        will be the largest seeded region, if there are seeds). The
        default is to output all the seeded regions, if there are seeds,
        or to output all the regions, if there are no seeds.
        """
        ...
    
    def GetGenerateRegionExtents(self):
        """
        V.GetGenerateRegionExtents() -> int
        C++: virtual vtkTypeBool GetGenerateRegionExtents()
        
        Turn this on to request creation of the ExtractedRegionExtents
        array.
        """
        ...
    
    def GetLabelConstantValue(self):
        """
        V.GetLabelConstantValue() -> int
        C++: virtual int GetLabelConstantValue()
        
        The label used when LabelMode is ConstantValue. The default value
        is 255.
        """
        ...
    
    def GetLabelMode(self):
        """
        V.GetLabelMode() -> int
        C++: virtual int GetLabelMode()
        
        Set the mode for applying labels to the output. Labeling by
        SeedScalar uses the scalars from the seeds as labels, if present,
        or the regions will be labeled consecutively starting at 1, if
        the seeds have no scalars. Labeling by SizeRank means that the
        largest region is labeled 1 and other regions are labeled
        consecutively in order of decreasing size (if there is a tie,
        then the seed point ID is used as a tiebreaker).  Finally,
        Constant means that all regions will have the value of
        SetLabelConstantValue().  The default is to label using the seed
        scalars, if present, or to label consecutively, if no seed
        scalars are present.
        """
        ...
    
    def GetLabelModeAsString(self):
        """
        V.GetLabelModeAsString() -> string
        C++: const char *GetLabelModeAsString()
        
        Set the mode for applying labels to the output. Labeling by
        SeedScalar uses the scalars from the seeds as labels, if present,
        or the regions will be labeled consecutively starting at 1, if
        the seeds have no scalars. Labeling by SizeRank means that the
        largest region is labeled 1 and other regions are labeled
        consecutively in order of decreasing size (if there is a tie,
        then the seed point ID is used as a tiebreaker).  Finally,
        Constant means that all regions will have the value of
        SetLabelConstantValue().  The default is to label using the seed
        scalars, if present, or to label consecutively, if no seed
        scalars are present.
        """
        ...
    
    def GetLabelScalarType(self):
        """
        V.GetLabelScalarType() -> int
        C++: virtual int GetLabelScalarType()
        
        Set the scalar type for the output label image. This should be
        one of UnsignedChar, Short, UnsignedShort, or Int depending on
        how many labels are expected.  The default is UnsignedChar, which
        allows for 255 label values.  If the total number of regions is
        greater than the maximum label value N, then only the largest N
        regions will be kept and the rest will be discarded.
        """
        ...
    
    def GetLabelScalarTypeAsString(self):
        """
        V.GetLabelScalarTypeAsString() -> string
        C++: const char *GetLabelScalarTypeAsString()
        
        Set the scalar type for the output label image. This should be
        one of UnsignedChar, Short, UnsignedShort, or Int depending on
        how many labels are expected.  The default is UnsignedChar, which
        allows for 255 label values.  If the total number of regions is
        greater than the maximum label value N, then only the largest N
        regions will be kept and the rest will be discarded.
        """
        ...
    
    def GetNumberOfExtractedRegions(self):
        """
        V.GetNumberOfExtractedRegions() -> int
        C++: vtkIdType GetNumberOfExtractedRegions()
        
        Get the number of extracted regions.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarRange(self):
        """
        V.GetScalarRange() -> (float, float)
        C++: virtual double *GetScalarRange()
        
        Set the scalar range used to define potential regions. Only
        voxels with values that are within this range will be considered
        for region membership.  This is an inclusive range, meaning that
        the upper and lower limits are considered to be within the range.
         The default range goes from 0.5 to VTK_DOUBLE_MAX.
        """
        ...
    
    def GetSeedConnection(self):
        """
        V.GetSeedConnection() -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetSeedConnection()
        
        The input for seed locations (input port 1). Each point in the
        supplied data set will be used as a seed, unless the data set has
        scalars, in which case only the points with scalar values that
        are not equal to zero will be used as seeds.
        """
        ...
    
    def GetSizeRange(self):
        """
        V.GetSizeRange() -> (int, int)
        C++: virtual vtkIdType *GetSizeRange()
        
        Set the size range for the extracted regions. Only regions that
        have sizes within the specified range will be present in the
        output.  The default range is (1, VTK_ID_MAX).
        """
        ...
    
    def GetStencilConnection(self):
        """
        V.GetStencilConnection() -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetStencilConnection()
        
        The input for a stencil (input port 2). The output labels will be
        restricted to the region inside the stencil, as if no input
        voxels existed outside the stencil.  This allows you to apply
        this filter within an arbitrary region of interest.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageConnectivityFilter
        C++: vtkImageConnectivityFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageConnectivityFilter
        C++: static vtkImageConnectivityFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetActiveComponent(self, p_int):
        """
        V.SetActiveComponent(int)
        C++: virtual void SetActiveComponent(int _arg)
        
        For multi-component input images, select which component to use.
        """
        ...
    
    def SetExtractionMode(self, p_int):
        """
        V.SetExtractionMode(int)
        C++: virtual void SetExtractionMode(int _arg)
        
        Set which regions to output from this filter. This can be all the
        regions, just the seeded regions, or the largest region (which
        will be the largest seeded region, if there are seeds). The
        default is to output all the seeded regions, if there are seeds,
        or to output all the regions, if there are no seeds.
        """
        ...
    
    def SetExtractionModeToAllRegions(self):
        """
        V.SetExtractionModeToAllRegions()
        C++: void SetExtractionModeToAllRegions()
        
        Set which regions to output from this filter. This can be all the
        regions, just the seeded regions, or the largest region (which
        will be the largest seeded region, if there are seeds). The
        default is to output all the seeded regions, if there are seeds,
        or to output all the regions, if there are no seeds.
        """
        ...
    
    def SetExtractionModeToLargestRegion(self):
        """
        V.SetExtractionModeToLargestRegion()
        C++: void SetExtractionModeToLargestRegion()
        
        Set which regions to output from this filter. This can be all the
        regions, just the seeded regions, or the largest region (which
        will be the largest seeded region, if there are seeds). The
        default is to output all the seeded regions, if there are seeds,
        or to output all the regions, if there are no seeds.
        """
        ...
    
    def SetExtractionModeToSeededRegions(self):
        """
        V.SetExtractionModeToSeededRegions()
        C++: void SetExtractionModeToSeededRegions()
        
        Set which regions to output from this filter. This can be all the
        regions, just the seeded regions, or the largest region (which
        will be the largest seeded region, if there are seeds). The
        default is to output all the seeded regions, if there are seeds,
        or to output all the regions, if there are no seeds.
        """
        ...
    
    def SetGenerateRegionExtents(self, p_int):
        """
        V.SetGenerateRegionExtents(int)
        C++: virtual void SetGenerateRegionExtents(vtkTypeBool _arg)
        
        Turn this on to request creation of the ExtractedRegionExtents
        array.
        """
        ...
    
    def SetLabelConstantValue(self, p_int):
        """
        V.SetLabelConstantValue(int)
        C++: virtual void SetLabelConstantValue(int _arg)
        
        The label used when LabelMode is ConstantValue. The default value
        is 255.
        """
        ...
    
    def SetLabelMode(self, p_int):
        """
        V.SetLabelMode(int)
        C++: virtual void SetLabelMode(int _arg)
        
        Set the mode for applying labels to the output. Labeling by
        SeedScalar uses the scalars from the seeds as labels, if present,
        or the regions will be labeled consecutively starting at 1, if
        the seeds have no scalars. Labeling by SizeRank means that the
        largest region is labeled 1 and other regions are labeled
        consecutively in order of decreasing size (if there is a tie,
        then the seed point ID is used as a tiebreaker).  Finally,
        Constant means that all regions will have the value of
        SetLabelConstantValue().  The default is to label using the seed
        scalars, if present, or to label consecutively, if no seed
        scalars are present.
        """
        ...
    
    def SetLabelModeToConstantValue(self):
        """
        V.SetLabelModeToConstantValue()
        C++: void SetLabelModeToConstantValue()
        
        Set the mode for applying labels to the output. Labeling by
        SeedScalar uses the scalars from the seeds as labels, if present,
        or the regions will be labeled consecutively starting at 1, if
        the seeds have no scalars. Labeling by SizeRank means that the
        largest region is labeled 1 and other regions are labeled
        consecutively in order of decreasing size (if there is a tie,
        then the seed point ID is used as a tiebreaker).  Finally,
        Constant means that all regions will have the value of
        SetLabelConstantValue().  The default is to label using the seed
        scalars, if present, or to label consecutively, if no seed
        scalars are present.
        """
        ...
    
    def SetLabelModeToSeedScalar(self):
        """
        V.SetLabelModeToSeedScalar()
        C++: void SetLabelModeToSeedScalar()
        
        Set the mode for applying labels to the output. Labeling by
        SeedScalar uses the scalars from the seeds as labels, if present,
        or the regions will be labeled consecutively starting at 1, if
        the seeds have no scalars. Labeling by SizeRank means that the
        largest region is labeled 1 and other regions are labeled
        consecutively in order of decreasing size (if there is a tie,
        then the seed point ID is used as a tiebreaker).  Finally,
        Constant means that all regions will have the value of
        SetLabelConstantValue().  The default is to label using the seed
        scalars, if present, or to label consecutively, if no seed
        scalars are present.
        """
        ...
    
    def SetLabelModeToSizeRank(self):
        """
        V.SetLabelModeToSizeRank()
        C++: void SetLabelModeToSizeRank()
        
        Set the mode for applying labels to the output. Labeling by
        SeedScalar uses the scalars from the seeds as labels, if present,
        or the regions will be labeled consecutively starting at 1, if
        the seeds have no scalars. Labeling by SizeRank means that the
        largest region is labeled 1 and other regions are labeled
        consecutively in order of decreasing size (if there is a tie,
        then the seed point ID is used as a tiebreaker).  Finally,
        Constant means that all regions will have the value of
        SetLabelConstantValue().  The default is to label using the seed
        scalars, if present, or to label consecutively, if no seed
        scalars are present.
        """
        ...
    
    def SetLabelScalarType(self, p_int):
        """
        V.SetLabelScalarType(int)
        C++: virtual void SetLabelScalarType(int _arg)
        
        Set the scalar type for the output label image. This should be
        one of UnsignedChar, Short, UnsignedShort, or Int depending on
        how many labels are expected.  The default is UnsignedChar, which
        allows for 255 label values.  If the total number of regions is
        greater than the maximum label value N, then only the largest N
        regions will be kept and the rest will be discarded.
        """
        ...
    
    def SetLabelScalarTypeToInt(self):
        """
        V.SetLabelScalarTypeToInt()
        C++: void SetLabelScalarTypeToInt()
        
        Set the scalar type for the output label image. This should be
        one of UnsignedChar, Short, UnsignedShort, or Int depending on
        how many labels are expected.  The default is UnsignedChar, which
        allows for 255 label values.  If the total number of regions is
        greater than the maximum label value N, then only the largest N
        regions will be kept and the rest will be discarded.
        """
        ...
    
    def SetLabelScalarTypeToShort(self):
        """
        V.SetLabelScalarTypeToShort()
        C++: void SetLabelScalarTypeToShort()
        
        Set the scalar type for the output label image. This should be
        one of UnsignedChar, Short, UnsignedShort, or Int depending on
        how many labels are expected.  The default is UnsignedChar, which
        allows for 255 label values.  If the total number of regions is
        greater than the maximum label value N, then only the largest N
        regions will be kept and the rest will be discarded.
        """
        ...
    
    def SetLabelScalarTypeToUnsignedChar(self):
        """
        V.SetLabelScalarTypeToUnsignedChar()
        C++: void SetLabelScalarTypeToUnsignedChar()
        
        Set the scalar type for the output label image. This should be
        one of UnsignedChar, Short, UnsignedShort, or Int depending on
        how many labels are expected.  The default is UnsignedChar, which
        allows for 255 label values.  If the total number of regions is
        greater than the maximum label value N, then only the largest N
        regions will be kept and the rest will be discarded.
        """
        ...
    
    def SetLabelScalarTypeToUnsignedShort(self):
        """
        V.SetLabelScalarTypeToUnsignedShort()
        C++: void SetLabelScalarTypeToUnsignedShort()
        
        Set the scalar type for the output label image. This should be
        one of UnsignedChar, Short, UnsignedShort, or Int depending on
        how many labels are expected.  The default is UnsignedChar, which
        allows for 255 label values.  If the total number of regions is
        greater than the maximum label value N, then only the largest N
        regions will be kept and the rest will be discarded.
        """
        ...
    
    def SetScalarRange(self, p_float, p_float_1):
        """
        V.SetScalarRange(float, float)
        C++: virtual void SetScalarRange(double _arg1, double _arg2)
        V.SetScalarRange((float, float))
        C++: void SetScalarRange(const double _arg[2])
        
        Set the scalar range used to define potential regions. Only
        voxels with values that are within this range will be considered
        for region membership.  This is an inclusive range, meaning that
        the upper and lower limits are considered to be within the range.
         The default range goes from 0.5 to VTK_DOUBLE_MAX.
        """
        ...
    
    def SetSeedConnection(self, vtkAlgorithmOutput):
        """
        V.SetSeedConnection(vtkAlgorithmOutput)
        C++: void SetSeedConnection(vtkAlgorithmOutput *port)
        
        The input for seed locations (input port 1). Each point in the
        supplied data set will be used as a seed, unless the data set has
        scalars, in which case only the points with scalar values that
        are not equal to zero will be used as seeds.
        """
        ...
    
    def SetSeedData(self, vtkDataSet):
        """
        V.SetSeedData(vtkDataSet)
        C++: void SetSeedData(vtkDataSet *data)
        
        The input for seed locations (input port 1). Each point in the
        supplied data set will be used as a seed, unless the data set has
        scalars, in which case only the points with scalar values that
        are not equal to zero will be used as seeds.
        """
        ...
    
    def SetSizeRange(self, p_int, p_int_1):
        """
        V.SetSizeRange(int, int)
        C++: virtual void SetSizeRange(vtkIdType _arg1, vtkIdType _arg2)
        V.SetSizeRange((int, int))
        C++: void SetSizeRange(const vtkIdType _arg[2])
        
        Set the size range for the extracted regions. Only regions that
        have sizes within the specified range will be present in the
        output.  The default range is (1, VTK_ID_MAX).
        """
        ...
    
    def SetStencilConnection(self, vtkAlgorithmOutput):
        """
        V.SetStencilConnection(vtkAlgorithmOutput)
        C++: void SetStencilConnection(vtkAlgorithmOutput *port)
        
        The input for a stencil (input port 2). The output labels will be
        restricted to the region inside the stencil, as if no input
        voxels existed outside the stencil.  This allows you to apply
        this filter within an arbitrary region of interest.
        """
        ...
    
    def SetStencilData(self, vtkImageStencilData):
        """
        V.SetStencilData(vtkImageStencilData)
        C++: void SetStencilData(vtkImageStencilData *data)
        
        The input for a stencil (input port 2). The output labels will be
        restricted to the region inside the stencil, as if no input
        voxels existed outside the stencil.  This allows you to apply
        this filter within an arbitrary region of interest.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AllRegions = ...
    ConstantValue = ...
    ExtractionModeEnum = ...
    LabelModeEnum = ...
    LargestRegion = ...
    SeededRegions = ...
    SeedScalar = ...
    SizeRank = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageConnector(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkImageConnector - Create a binary image of a sphere.
    
    Superclass: vtkObject
    
    vtkImageConnector is a helper class for connectivity filters. It is
    not meant to be used directly. It implements a stack and breadth
    first search necessary for some connectivity filters.  Filtered axes
    sets the dimensionality of the neighbor comparison, and cannot be
    more than three dimensions. As implemented, only voxels which share
    faces are considered neighbors.
    """
    def GetConnectedValue(self):
        """
        V.GetConnectedValue() -> int
        C++: virtual unsigned char GetConnectedValue()
        
        Values used by the MarkRegion method
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUnconnectedValue(self):
        """
        V.GetUnconnectedValue() -> int
        C++: virtual unsigned char GetUnconnectedValue()
        
        Values used by the MarkRegion method
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MarkData(self, vtkImageData, p_int, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.MarkData(vtkImageData, int, [int, int, int, int, int, int])
        C++: void MarkData(vtkImageData *data, int dimensionality,
            int ext[6])
        
        Input a data of 0's and "UnconnectedValue"s. Seeds of this object
        are used to find connected pixels.  All pixels connected to seeds
        are set to ConnectedValue.  The data has to be unsigned char.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageConnector
        C++: vtkImageConnector *NewInstance()
        """
        ...
    
    def RemoveAllSeeds(self):
        """
        V.RemoveAllSeeds()
        C++: void RemoveAllSeeds()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageConnector
        C++: static vtkImageConnector *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetConnectedValue(self, p_int):
        """
        V.SetConnectedValue(int)
        C++: virtual void SetConnectedValue(unsigned char _arg)
        
        Values used by the MarkRegion method
        """
        ...
    
    def SetUnconnectedValue(self, p_int):
        """
        V.SetUnconnectedValue(int)
        C++: virtual void SetUnconnectedValue(unsigned char _arg)
        
        Values used by the MarkRegion method
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageConnectorSeed(object):
    """
    vtkImageConnectorSeed - no description provided.
    
    vtkImageConnectorSeed()
    vtkImageConnectorSeed(const &vtkImageConnectorSeed)
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkImageContinuousDilate3D(__vtkmodules_vtkImagingGeneral.vtkImageSpatialAlgorithm):
    """
    vtkImageContinuousDilate3D - Dilate implemented as a maximum.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageContinuousDilate3D replaces a pixel with the maximum over an
    ellipsoidal neighborhood.  If KernelSize of an axis is 1, no
    processing is done on that axis.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageContinuousDilate3D filter. By
        default zero values are dilated.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageContinuousDilate3D filter. By
        default zero values are dilated.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageContinuousDilate3D filter. By
        default zero values are dilated.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageContinuousDilate3D filter. By
        default zero values are dilated.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageContinuousDilate3D
        C++: vtkImageContinuousDilate3D *NewInstance()
        
        Construct an instance of vtkImageContinuousDilate3D filter. By
        default zero values are dilated.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageContinuousDilate3D
        C++: static vtkImageContinuousDilate3D *SafeDownCast(
            vtkObjectBase *o)
        
        Construct an instance of vtkImageContinuousDilate3D filter. By
        default zero values are dilated.
        """
        ...
    
    def SetKernelSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetKernelSize(int, int, int)
        C++: void SetKernelSize(int size0, int size1, int size2)
        
        This method sets the size of the neighborhood.  It also sets the
        default middle of the neighborhood and computes the elliptical
        foot print.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageContinuousErode3D(__vtkmodules_vtkImagingGeneral.vtkImageSpatialAlgorithm):
    """
    vtkImageContinuousErode3D - Erosion implemented as a minimum.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageContinuousErode3D replaces a pixel with the minimum over an
    ellipsoidal neighborhood.  If KernelSize of an axis is 1, no
    processing is done on that axis.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageContinuousErode3D filter. By
        default zero values are eroded.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageContinuousErode3D filter. By
        default zero values are eroded.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageContinuousErode3D filter. By
        default zero values are eroded.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageContinuousErode3D filter. By
        default zero values are eroded.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageContinuousErode3D
        C++: vtkImageContinuousErode3D *NewInstance()
        
        Construct an instance of vtkImageContinuousErode3D filter. By
        default zero values are eroded.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageContinuousErode3D
        C++: static vtkImageContinuousErode3D *SafeDownCast(
            vtkObjectBase *o)
        
        Construct an instance of vtkImageContinuousErode3D filter. By
        default zero values are eroded.
        """
        ...
    
    def SetKernelSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetKernelSize(int, int, int)
        C++: void SetKernelSize(int size0, int size1, int size2)
        
        This method sets the size of the neighborhood.  It also sets the
        default middle of the neighborhood and computes the elliptical
        foot print.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageDilateErode3D(__vtkmodules_vtkImagingGeneral.vtkImageSpatialAlgorithm):
    """
    vtkImageDilateErode3D - Dilates one value and erodes another.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageDilateErode3D will dilate one value and erode another. It
    uses an elliptical foot print, and only erodes/dilates on the
    boundary of the two values.  The filter is restricted to the X, Y,
    and Z axes for now.  It can degenerate to a 2 or 1 dimensional filter
    by setting the kernel size to 1 for a specific axis.
    """
    def GetDilateValue(self):
        """
        V.GetDilateValue() -> float
        C++: virtual double GetDilateValue()
        
        Set/Get the Dilate and Erode values to be used by this filter.
        """
        ...
    
    def GetErodeValue(self):
        """
        V.GetErodeValue() -> float
        C++: virtual double GetErodeValue()
        
        Set/Get the Dilate and Erode values to be used by this filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDilateErode3D filter. By default
        zero values are dilated.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDilateErode3D filter. By default
        zero values are dilated.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDilateErode3D filter. By default
        zero values are dilated.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDilateErode3D filter. By default
        zero values are dilated.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageDilateErode3D
        C++: vtkImageDilateErode3D *NewInstance()
        
        Construct an instance of vtkImageDilateErode3D filter. By default
        zero values are dilated.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageDilateErode3D
        C++: static vtkImageDilateErode3D *SafeDownCast(vtkObjectBase *o)
        
        Construct an instance of vtkImageDilateErode3D filter. By default
        zero values are dilated.
        """
        ...
    
    def SetDilateValue(self, p_float):
        """
        V.SetDilateValue(float)
        C++: virtual void SetDilateValue(double _arg)
        
        Set/Get the Dilate and Erode values to be used by this filter.
        """
        ...
    
    def SetErodeValue(self, p_float):
        """
        V.SetErodeValue(float)
        C++: virtual void SetErodeValue(double _arg)
        
        Set/Get the Dilate and Erode values to be used by this filter.
        """
        ...
    
    def SetKernelSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetKernelSize(int, int, int)
        C++: void SetKernelSize(int size0, int size1, int size2)
        
        This method sets the size of the neighborhood.  It also sets the
        default middle of the neighborhood and computes the elliptical
        foot print.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageIslandRemoval2D(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageIslandRemoval2D - Removes small clusters in masks.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageIslandRemoval2D computes the area of separate islands in a
    mask image.  It removes any island that has less than AreaThreshold
    pixels.  Output has the same ScalarType as input.  It generates the
    whole 2D output image for any output request.
    """
    def GetAreaThreshold(self):
        """
        V.GetAreaThreshold() -> int
        C++: virtual int GetAreaThreshold()
        
        Set/Get the cutoff area for removal
        """
        ...
    
    def GetIslandValue(self):
        """
        V.GetIslandValue() -> float
        C++: virtual double GetIslandValue()
        
        Set/Get the value to remove.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Constructor: Sets default filter to be identity.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Constructor: Sets default filter to be identity.
        """
        ...
    
    def GetReplaceValue(self):
        """
        V.GetReplaceValue() -> float
        C++: virtual double GetReplaceValue()
        
        Set/Get the value to put in the place of removed pixels.
        """
        ...
    
    def GetSquareNeighborhood(self):
        """
        V.GetSquareNeighborhood() -> int
        C++: virtual vtkTypeBool GetSquareNeighborhood()
        
        Set/Get whether to use 4 or 8 neighbors
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Constructor: Sets default filter to be identity.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Constructor: Sets default filter to be identity.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageIslandRemoval2D
        C++: vtkImageIslandRemoval2D *NewInstance()
        
        Constructor: Sets default filter to be identity.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageIslandRemoval2D
        C++: static vtkImageIslandRemoval2D *SafeDownCast(
            vtkObjectBase *o)
        
        Constructor: Sets default filter to be identity.
        """
        ...
    
    def SetAreaThreshold(self, p_int):
        """
        V.SetAreaThreshold(int)
        C++: virtual void SetAreaThreshold(int _arg)
        
        Set/Get the cutoff area for removal
        """
        ...
    
    def SetIslandValue(self, p_float):
        """
        V.SetIslandValue(float)
        C++: virtual void SetIslandValue(double _arg)
        
        Set/Get the value to remove.
        """
        ...
    
    def SetReplaceValue(self, p_float):
        """
        V.SetReplaceValue(float)
        C++: virtual void SetReplaceValue(double _arg)
        
        Set/Get the value to put in the place of removed pixels.
        """
        ...
    
    def SetSquareNeighborhood(self, p_int):
        """
        V.SetSquareNeighborhood(int)
        C++: virtual void SetSquareNeighborhood(vtkTypeBool _arg)
        
        Set/Get whether to use 4 or 8 neighbors
        """
        ...
    
    def SquareNeighborhoodOff(self):
        """
        V.SquareNeighborhoodOff()
        C++: virtual void SquareNeighborhoodOff()
        
        Set/Get whether to use 4 or 8 neighbors
        """
        ...
    
    def SquareNeighborhoodOn(self):
        """
        V.SquareNeighborhoodOn()
        C++: virtual void SquareNeighborhoodOn()
        
        Set/Get whether to use 4 or 8 neighbors
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageNonMaximumSuppression(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageNonMaximumSuppression - Performs non-maximum suppression
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageNonMaximumSuppression Sets to zero any pixel that is not a
    peak. If a pixel has a neighbor along the vector that has larger
    magnitude, the smaller pixel is set to zero.  The filter takes two
    inputs: a magnitude and a vector.  Output is magnitude information
    and is always in doubles. Typically this filter is used with
    vtkImageGradient and vtkImageGradientMagnitude as inputs.
    """
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Determines how the input is interpreted (set of 2d slices or a 3D
        volume)
        """
        ...
    
    def GetDimensionalityMaxValue(self):
        """
        V.GetDimensionalityMaxValue() -> int
        C++: virtual int GetDimensionalityMaxValue()
        
        Determines how the input is interpreted (set of 2d slices or a 3D
        volume)
        """
        ...
    
    def GetDimensionalityMinValue(self):
        """
        V.GetDimensionalityMinValue() -> int
        C++: virtual int GetDimensionalityMinValue()
        
        Determines how the input is interpreted (set of 2d slices or a 3D
        volume)
        """
        ...
    
    def GetHandleBoundaries(self):
        """
        V.GetHandleBoundaries() -> int
        C++: virtual vtkTypeBool GetHandleBoundaries()
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HandleBoundariesOff(self):
        """
        V.HandleBoundariesOff()
        C++: virtual void HandleBoundariesOff()
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def HandleBoundariesOn(self):
        """
        V.HandleBoundariesOn()
        C++: virtual void HandleBoundariesOn()
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageNonMaximumSuppression
        C++: vtkImageNonMaximumSuppression *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageNonMaximumSuppression
        C++: static vtkImageNonMaximumSuppression *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Determines how the input is interpreted (set of 2d slices or a 3D
        volume)
        """
        ...
    
    def SetHandleBoundaries(self, p_int):
        """
        V.SetHandleBoundaries(int)
        C++: virtual void SetHandleBoundaries(vtkTypeBool _arg)
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def SetMagnitudeInputData(self, vtkImageData):
        """
        V.SetMagnitudeInputData(vtkImageData)
        C++: void SetMagnitudeInputData(vtkImageData *input)
        
        Set the magnitude and vector inputs.
        """
        ...
    
    def SetVectorInputData(self, vtkImageData):
        """
        V.SetVectorInputData(vtkImageData)
        C++: void SetVectorInputData(vtkImageData *input)
        
        Set the magnitude and vector inputs.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageOpenClose3D(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageOpenClose3D - Will perform opening or closing.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageOpenClose3D performs opening or closing by having two
    vtkImageErodeDilates in series.  The size of operation is determined
    by the method SetKernelSize, and the operator is an ellipse.
    OpenValue and CloseValue determine how the filter behaves.  For
    binary images Opening and closing behaves as expected. Close value is
    first dilated, and then eroded. Open value is first eroded, and then
    dilated. Degenerate two dimensional opening/closing can be achieved
    by setting the one axis the 3D KernelSize to 1. Values other than
    open value and close value are not touched. This enables the filter
    to processes segmented images containing more than two tags.
    """
    def DebugOff(self):
        """
        V.DebugOff()
        C++: void DebugOff() override;
        
        Turn debugging output on. (in sub filters also)
        """
        ...
    
    def DebugOn(self):
        """
        V.DebugOn()
        C++: void DebugOn() override;
        
        Turn debugging output on. (in sub filters also)
        """
        ...
    
    def GetCloseValue(self):
        """
        V.GetCloseValue() -> float
        C++: double GetCloseValue()
        
        Determines the value that will closed. Close value is first
        dilated, and then eroded
        """
        ...
    
    def GetFilter0(self):
        """
        V.GetFilter0() -> vtkImageDilateErode3D
        C++: virtual vtkImageDilateErode3D *GetFilter0()
        
        Needed for Progress functions
        """
        ...
    
    def GetFilter1(self):
        """
        V.GetFilter1() -> vtkImageDilateErode3D
        C++: virtual vtkImageDilateErode3D *GetFilter1()
        
        Needed for Progress functions
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        This method considers the sub filters MTimes when computing this
        objects modified time.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Default open value is 0, and default close value is 255.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Default open value is 0, and default close value is 255.
        """
        ...
    
    def GetOpenValue(self):
        """
        V.GetOpenValue() -> float
        C++: double GetOpenValue()
        
        Determines the value that will opened. Open value is first
        eroded, and then dilated.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Default open value is 0, and default close value is 255.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Default open value is 0, and default close value is 255.
        """
        ...
    
    def Modified(self):
        """
        V.Modified()
        C++: void Modified() override;
        
        Pass modified message to sub filters.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageOpenClose3D
        C++: vtkImageOpenClose3D *NewInstance()
        
        Default open value is 0, and default close value is 255.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageOpenClose3D
        C++: static vtkImageOpenClose3D *SafeDownCast(vtkObjectBase *o)
        
        Default open value is 0, and default close value is 255.
        """
        ...
    
    def SetCloseValue(self, p_float):
        """
        V.SetCloseValue(float)
        C++: void SetCloseValue(double value)
        
        Determines the value that will closed. Close value is first
        dilated, and then eroded
        """
        ...
    
    def SetKernelSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetKernelSize(int, int, int)
        C++: void SetKernelSize(int size0, int size1, int size2)
        
        Selects the size of gaps or objects removed.
        """
        ...
    
    def SetOpenValue(self, p_float):
        """
        V.SetOpenValue(float)
        C++: void SetOpenValue(double value)
        
        Determines the value that will opened. Open value is first
        eroded, and then dilated.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSeedConnectivity(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageSeedConnectivity - SeedConnectivity with user defined seeds.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageSeedConnectivity marks pixels connected to user supplied
    seeds. The input must be unsigned char, and the output is also
    unsigned char.  If a seed supplied by the user does not have pixel
    value "InputTrueValue", then the image is scanned +x, +y, +z until a
    pixel is encountered with value "InputTrueValue".  This new pixel is
    used as the seed .  Any pixel with out value "InputTrueValue" is
    consider off.  The output pixels values are 0 for any off pixel in
    input, "OutputTrueValue" for any pixels connected to seeds, and
    "OutputUnconnectedValue" for any on pixels not connected to seeds. 
    The same seeds are used for all images in the image set.
    """
    def AddSeed(self, p_int, *int):
        """
        V.AddSeed(int, [int, ...])
        C++: void AddSeed(int num, int *index)
        V.AddSeed(int, int, int)
        C++: void AddSeed(int i0, int i1, int i2)
        V.AddSeed(int, int)
        C++: void AddSeed(int i0, int i1)
        
        Methods for manipulating the seed pixels.
        """
        ...
    
    def GetConnector(self):
        """
        V.GetConnector() -> vtkImageConnector
        C++: virtual vtkImageConnector *GetConnector()
        
        Get the vtkImageCOnnector used by this filter.
        """
        ...
    
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Set the number of axes to use in connectivity.
        """
        ...
    
    def GetInputConnectValue(self):
        """
        V.GetInputConnectValue() -> int
        C++: virtual unsigned char GetInputConnectValue()
        
        Set/Get what value is considered as connecting pixels.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputConnectedValue(self):
        """
        V.GetOutputConnectedValue() -> int
        C++: virtual unsigned char GetOutputConnectedValue()
        
        Set/Get the value to set connected pixels to.
        """
        ...
    
    def GetOutputUnconnectedValue(self):
        """
        V.GetOutputUnconnectedValue() -> int
        C++: virtual unsigned char GetOutputUnconnectedValue()
        
        Set/Get the value to set unconnected pixels to.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSeedConnectivity
        C++: vtkImageSeedConnectivity *NewInstance()
        """
        ...
    
    def RemoveAllSeeds(self):
        """
        V.RemoveAllSeeds()
        C++: void RemoveAllSeeds()
        
        Methods for manipulating the seed pixels.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSeedConnectivity
        C++: static vtkImageSeedConnectivity *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Set the number of axes to use in connectivity.
        """
        ...
    
    def SetInputConnectValue(self, p_int):
        """
        V.SetInputConnectValue(int)
        C++: virtual void SetInputConnectValue(unsigned char _arg)
        
        Set/Get what value is considered as connecting pixels.
        """
        ...
    
    def SetOutputConnectedValue(self, p_int):
        """
        V.SetOutputConnectedValue(int)
        C++: virtual void SetOutputConnectedValue(unsigned char _arg)
        
        Set/Get the value to set connected pixels to.
        """
        ...
    
    def SetOutputUnconnectedValue(self, p_int):
        """
        V.SetOutputUnconnectedValue(int)
        C++: virtual void SetOutputUnconnectedValue(unsigned char _arg)
        
        Set/Get the value to set unconnected pixels to.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSkeleton2D(__vtkmodules_vtkImagingCore.vtkImageIterateFilter):
    """
    vtkImageSkeleton2D - Skeleton of 2D images.
    
    Superclass: vtkImageIterateFilter
    
    vtkImageSkeleton2D should leave only single pixel width lines of
    non-zero-valued pixels (values of 1 are not allowed). It works by
    erosion on a 3x3 neighborhood with special rules. The number of
    iterations determines how far the filter can erode. There are three
    pruning levels:
     prune == 0 will leave traces on all angles...
     prune == 1 will not leave traces on 135 degree angles, but will on
    90.
     prune == 2 does not leave traces on any angles leaving only closed
    loops. Prune defaults to zero. The output scalar type is the same as
    the input.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPrune(self):
        """
        V.GetPrune() -> int
        C++: virtual vtkTypeBool GetPrune()
        
        When prune is on, only closed loops are left unchanged.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSkeleton2D
        C++: vtkImageSkeleton2D *NewInstance()
        """
        ...
    
    def PruneOff(self):
        """
        V.PruneOff()
        C++: virtual void PruneOff()
        
        When prune is on, only closed loops are left unchanged.
        """
        ...
    
    def PruneOn(self):
        """
        V.PruneOn()
        C++: virtual void PruneOn()
        
        When prune is on, only closed loops are left unchanged.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSkeleton2D
        C++: static vtkImageSkeleton2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfIterations(self, p_int):
        """
        V.SetNumberOfIterations(int)
        C++: void SetNumberOfIterations(int num) override;
        
        Sets the number of cycles in the erosion.
        """
        ...
    
    def SetPrune(self, p_int):
        """
        V.SetPrune(int)
        C++: virtual void SetPrune(vtkTypeBool _arg)
        
        When prune is on, only closed loops are left unchanged.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageThresholdConnectivity(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageThresholdConnectivity - Flood fill an image region.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageThresholdConnectivity will perform a flood fill on an image,
    given upper and lower pixel intensity thresholds. It works similarly
    to vtkImageThreshold, but also allows the user to set seed points to
    limit the threshold operation to contiguous regions of the image. The
    filled region, or the "inside", will be passed through to the output
    by default, while the "outside" will be replaced with zeros. This
    behavior can be changed by using the ReplaceIn() and ReplaceOut()
    methods.  The scalar type of the output is the same as the input.
    @sa
    vtkImageThreshold@par Thanks: Thanks to David Gobbi for contributing
    this class to VTK.
    """
    def GetActiveComponent(self):
        """
        V.GetActiveComponent() -> int
        C++: virtual int GetActiveComponent()
        
        For multi-component images, you can set which component will be
        used for the threshold checks.
        """
        ...
    
    def GetInValue(self):
        """
        V.GetInValue() -> float
        C++: virtual double GetInValue()
        
        If ReplaceIn is set, the filled region will be replaced by this
        value.
        """
        ...
    
    def GetLowerThreshold(self):
        """
        V.GetLowerThreshold() -> float
        C++: virtual double GetLowerThreshold()
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override the MTime to account for the seed points.
        """
        ...
    
    def GetNeighborhoodFraction(self):
        """
        V.GetNeighborhoodFraction() -> float
        C++: virtual double GetNeighborhoodFraction()
        
        The fraction of the neighborhood that must be within the
        thresholds. The default value is 0.5.
        """
        ...
    
    def GetNeighborhoodFractionMaxValue(self):
        """
        V.GetNeighborhoodFractionMaxValue() -> float
        C++: virtual double GetNeighborhoodFractionMaxValue()
        
        The fraction of the neighborhood that must be within the
        thresholds. The default value is 0.5.
        """
        ...
    
    def GetNeighborhoodFractionMinValue(self):
        """
        V.GetNeighborhoodFractionMinValue() -> float
        C++: virtual double GetNeighborhoodFractionMinValue()
        
        The fraction of the neighborhood that must be within the
        thresholds. The default value is 0.5.
        """
        ...
    
    def GetNeighborhoodRadius(self):
        """
        V.GetNeighborhoodRadius() -> (float, float, float)
        C++: virtual double *GetNeighborhoodRadius()
        
        The radius of the neighborhood that must be within the threshold
        values in order for the voxel to be included in the mask.  The
        default radius is zero (one single voxel).  The radius is
        measured in voxels.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfInVoxels(self):
        """
        V.GetNumberOfInVoxels() -> int
        C++: virtual int GetNumberOfInVoxels()
        
        After the filter has executed, use GetNumberOfVoxels() to find
        out how many voxels were filled.
        """
        ...
    
    def GetOutValue(self):
        """
        V.GetOutValue() -> float
        C++: virtual double GetOutValue()
        
        If ReplaceOut is set, outside the fill will be replaced by this
        value.
        """
        ...
    
    def GetReplaceIn(self):
        """
        V.GetReplaceIn() -> int
        C++: virtual vtkTypeBool GetReplaceIn()
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def GetReplaceOut(self):
        """
        V.GetReplaceOut() -> int
        C++: virtual vtkTypeBool GetReplaceOut()
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def GetSeedPoints(self):
        """
        V.GetSeedPoints() -> vtkPoints
        C++: virtual vtkPoints *GetSeedPoints()
        
        Set the seeds.  The seeds are in real data coordinates, not in
        voxel index locations.
        """
        ...
    
    def GetSliceRangeX(self):
        """
        V.GetSliceRangeX() -> (int, int)
        C++: virtual int *GetSliceRangeX()
        
        Limit the flood to a range of slices in the specified direction.
        """
        ...
    
    def GetSliceRangeY(self):
        """
        V.GetSliceRangeY() -> (int, int)
        C++: virtual int *GetSliceRangeY()
        
        Limit the flood to a range of slices in the specified direction.
        """
        ...
    
    def GetSliceRangeZ(self):
        """
        V.GetSliceRangeZ() -> (int, int)
        C++: virtual int *GetSliceRangeZ()
        
        Limit the flood to a range of slices in the specified direction.
        """
        ...
    
    def GetStencil(self):
        """
        V.GetStencil() -> vtkImageStencilData
        C++: vtkImageStencilData *GetStencil()
        
        Specify a stencil that will be used to limit the flood fill to an
        arbitrarily-shaped region of the image.
        """
        ...
    
    def GetUpperThreshold(self):
        """
        V.GetUpperThreshold() -> float
        C++: virtual double GetUpperThreshold()
        
        Get the Upper and Lower thresholds.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageThresholdConnectivity
        C++: vtkImageThresholdConnectivity *NewInstance()
        """
        ...
    
    def ReplaceInOff(self):
        """
        V.ReplaceInOff()
        C++: virtual void ReplaceInOff()
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def ReplaceInOn(self):
        """
        V.ReplaceInOn()
        C++: virtual void ReplaceInOn()
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def ReplaceOutOff(self):
        """
        V.ReplaceOutOff()
        C++: virtual void ReplaceOutOff()
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def ReplaceOutOn(self):
        """
        V.ReplaceOutOn()
        C++: virtual void ReplaceOutOn()
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageThresholdConnectivity
        C++: static vtkImageThresholdConnectivity *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetActiveComponent(self, p_int):
        """
        V.SetActiveComponent(int)
        C++: virtual void SetActiveComponent(int _arg)
        
        For multi-component images, you can set which component will be
        used for the threshold checks.
        """
        ...
    
    def SetInValue(self, p_float):
        """
        V.SetInValue(float)
        C++: void SetInValue(double val)
        
        If ReplaceIn is set, the filled region will be replaced by this
        value.
        """
        ...
    
    def SetNeighborhoodFraction(self, p_float):
        """
        V.SetNeighborhoodFraction(float)
        C++: virtual void SetNeighborhoodFraction(double _arg)
        
        The fraction of the neighborhood that must be within the
        thresholds. The default value is 0.5.
        """
        ...
    
    def SetNeighborhoodRadius(self, p_float, p_float_1, p_float_2):
        """
        V.SetNeighborhoodRadius(float, float, float)
        C++: virtual void SetNeighborhoodRadius(double _arg1,
            double _arg2, double _arg3)
        V.SetNeighborhoodRadius((float, float, float))
        C++: virtual void SetNeighborhoodRadius(const double _arg[3])
        
        The radius of the neighborhood that must be within the threshold
        values in order for the voxel to be included in the mask.  The
        default radius is zero (one single voxel).  The radius is
        measured in voxels.
        """
        ...
    
    def SetOutValue(self, p_float):
        """
        V.SetOutValue(float)
        C++: void SetOutValue(double val)
        
        If ReplaceOut is set, outside the fill will be replaced by this
        value.
        """
        ...
    
    def SetReplaceIn(self, p_int):
        """
        V.SetReplaceIn(int)
        C++: virtual void SetReplaceIn(vtkTypeBool _arg)
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def SetReplaceOut(self, p_int):
        """
        V.SetReplaceOut(int)
        C++: virtual void SetReplaceOut(vtkTypeBool _arg)
        
        Replace the filled region by the value set by SetInValue().
        """
        ...
    
    def SetSeedPoints(self, vtkPoints):
        """
        V.SetSeedPoints(vtkPoints)
        C++: void SetSeedPoints(vtkPoints *points)
        
        Set the seeds.  The seeds are in real data coordinates, not in
        voxel index locations.
        """
        ...
    
    def SetSliceRangeX(self, p_int, p_int_1):
        """
        V.SetSliceRangeX(int, int)
        C++: virtual void SetSliceRangeX(int _arg1, int _arg2)
        V.SetSliceRangeX((int, int))
        C++: void SetSliceRangeX(const int _arg[2])
        
        Limit the flood to a range of slices in the specified direction.
        """
        ...
    
    def SetSliceRangeY(self, p_int, p_int_1):
        """
        V.SetSliceRangeY(int, int)
        C++: virtual void SetSliceRangeY(int _arg1, int _arg2)
        V.SetSliceRangeY((int, int))
        C++: void SetSliceRangeY(const int _arg[2])
        
        Limit the flood to a range of slices in the specified direction.
        """
        ...
    
    def SetSliceRangeZ(self, p_int, p_int_1):
        """
        V.SetSliceRangeZ(int, int)
        C++: virtual void SetSliceRangeZ(int _arg1, int _arg2)
        V.SetSliceRangeZ((int, int))
        C++: void SetSliceRangeZ(const int _arg[2])
        
        Limit the flood to a range of slices in the specified direction.
        """
        ...
    
    def SetStencilData(self, vtkImageStencilData):
        """
        V.SetStencilData(vtkImageStencilData)
        C++: virtual void SetStencilData(vtkImageStencilData *stencil)
        
        Specify a stencil that will be used to limit the flood fill to an
        arbitrarily-shaped region of the image.
        """
        ...
    
    def ThresholdBetween(self, p_float, p_float_1):
        """
        V.ThresholdBetween(float, float)
        C++: void ThresholdBetween(double lower, double upper)
        
        Values within this range will be filled, where the range includes
        values that are exactly equal to the lower and upper thresholds.
        """
        ...
    
    def ThresholdByLower(self, p_float):
        """
        V.ThresholdByLower(float)
        C++: void ThresholdByLower(double thresh)
        
        Values less than or equal to this threshold will be filled.
        """
        ...
    
    def ThresholdByUpper(self, p_float):
        """
        V.ThresholdByUpper(float)
        C++: void ThresholdByUpper(double thresh)
        
        Values greater than or equal to this threshold will be filled.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
