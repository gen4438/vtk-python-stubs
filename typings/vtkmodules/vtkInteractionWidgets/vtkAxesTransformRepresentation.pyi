"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkAxesTransformRepresentation(vtkWidgetRepresentation):
    """
    vtkAxesTransformRepresentation - represent the vtkAxesTransformWidget
    
    Superclass: vtkWidgetRepresentation
    
    The vtkAxesTransformRepresentation is a representation for the
    vtkAxesTransformWidget. This representation consists of a origin
    sphere with three tubed axes with cones at the end of the axes. In
    addition an optional label provides delta values of motion. Note that
    this particular widget draws its representation in 3D space, so the
    widget can be occluded.
    @sa
    vtkDistanceWidget vtkDistanceRepresentation
    vtkDistanceRepresentation2D
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def GetInteractionStateMaxValue(self):
        """
        V.GetInteractionStateMaxValue() -> int
        C++: virtual int GetInteractionStateMaxValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkLineWidget2) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetInteractionStateMinValue(self):
        """
        V.GetInteractionStateMinValue() -> int
        C++: virtual int GetInteractionStateMinValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkLineWidget2) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Specify the format to use for labelling information during
        transformation. Note that an empty string results in no label, or
        a format string without a "%" character will not print numeric
        values.
        """
        ...
    
    def GetLabelProperty(self):
        """
        V.GetLabelProperty() -> vtkProperty
        C++: virtual vtkProperty *GetLabelProperty()
        
        Get the distance annotation property
        """
        ...
    
    def GetLabelScale(self):
        """
        V.GetLabelScale() -> (float, ...)
        C++: virtual double *GetLabelScale()
        
        Scale text (font size along each dimension). This helps control
        the appearance of the 3D text.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetOriginDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetOriginDisplayPosition([float, float, float])
        C++: void GetOriginDisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetOriginRepresentation(self):
        """
        V.GetOriginRepresentation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetOriginRepresentation()
        
        Set/Get the two handle representations used for the
        vtkAxesTransformWidget. (Note: properties can be set by grabbing
        these representations and setting the properties appropriately.)
        """
        ...
    
    def GetOriginWorldPosition(self):
        """
        V.GetOriginWorldPosition() -> (float, ...)
        C++: double *GetOriginWorldPosition()
        V.GetOriginWorldPosition([float, float, float])
        C++: void GetOriginWorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetSelectionRepresentation(self):
        """
        V.GetSelectionRepresentation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetSelectionRepresentation()
        
        Set/Get the two handle representations used for the
        vtkAxesTransformWidget. (Note: properties can be set by grabbing
        these representations and setting the properties appropriately.)
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> int
        C++: virtual int GetTolerance()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the end points
        of the widget to be active.
        """
        ...
    
    def GetToleranceMaxValue(self):
        """
        V.GetToleranceMaxValue() -> int
        C++: virtual int GetToleranceMaxValue()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the end points
        of the widget to be active.
        """
        ...
    
    def GetToleranceMinValue(self):
        """
        V.GetToleranceMinValue() -> int
        C++: virtual int GetToleranceMinValue()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the end points
        of the widget to be active.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAxesTransformRepresentation
        C++: vtkAxesTransformRepresentation *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAxesTransformRepresentation
        C++: static vtkAxesTransformRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetInteractionState(self, p_int):
        """
        V.SetInteractionState(int)
        C++: virtual void SetInteractionState(int _arg)
        
        The interaction state may be set from a widget (e.g.,
        vtkLineWidget2) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Specify the format to use for labelling information during
        transformation. Note that an empty string results in no label, or
        a format string without a "%" character will not print numeric
        values.
        """
        ...
    
    def SetLabelScale(self, p_float, p_float_1, p_float_2):
        """
        V.SetLabelScale(float, float, float)
        C++: void SetLabelScale(double x, double y, double z)
        V.SetLabelScale([float, float, float])
        C++: virtual void SetLabelScale(double scale[3])
        
        Scale text (font size along each dimension). This helps control
        the appearance of the 3D text.
        """
        ...
    
    def SetOriginDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetOriginDisplayPosition([float, float, float])
        C++: void SetOriginDisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetOriginWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetOriginWorldPosition([float, float, float])
        C++: void SetOriginWorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetTolerance(self, p_int):
        """
        V.SetTolerance(int)
        C++: virtual void SetTolerance(int _arg)
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the end points
        of the widget to be active.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double e[2]) override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double e[2]) override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    OnOrigin = ...
    OnX = ...
    OnXEnd = ...
    OnY = ...
    OnYEnd = ...
    OnZ = ...
    OnZEnd = ...
    Outside = ...
    __dict__ = ...
    __vtkname__ = ...


