"""
This type stub file was generated by pyright.
"""

from .vtk3DWidget import vtk3DWidget

class vtkSphereWidget(vtk3DWidget):
    """
    vtkSphereWidget - 3D widget for manipulating a sphere
    
    Superclass: vtk3DWidget
    
    This 3D widget defines a sphere that can be interactively placed in a
    scene.
    
    To use this object, just invoke SetInteractor() with the argument of
    the method a vtkRenderWindowInteractor.  You may also wish to invoke
    "PlaceWidget()" to initially position the widget. The interactor will
    act normally until the "i" key (for "interactor") is pressed, at
    which point the vtkSphereWidget will appear. (See superclass
    documentation for information about changing this behavior.) Events
    that occur outside of the widget (i.e., no part of the widget is
    picked) are propagated to any other registered obsevers (such as the
    interaction style).  Turn off the widget by pressing the "i" key
    again (or invoke the Off() method).
    
    The vtkSphereWidget has several methods that can be used in
    conjunction with other VTK objects. The Set/GetThetaResolution() and
    Set/GetPhiResolution() methods control the number of subdivisions of
    the sphere in the theta and phi directions; the GetPolyData() method
    can be used to get the polygonal representation and can be used for
    things like seeding streamlines. The GetSphere() method returns a
    sphere implicit function that can be used for cutting and clipping.
    Typical usage of the widget is to make use of the
    StartInteractionEvent, InteractionEvent, and EndInteractionEvent
    events. The InteractionEvent is called on mouse motion; the other two
    events are called on button down and button up (any mouse button).
    
    Some additional features of this class include the ability to control
    the properties of the widget. You can set the properties of the
    selected and unselected representations of the sphere.
    
    @sa
    vtk3DWidget vtkLineWidget vtkBoxWidget vtkPlaneWidget
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: double *GetCenter()
        V.GetCenter([float, float, float])
        C++: void GetCenter(double xyz[3])
        
        Set/Get the center of the sphere.
        """
        ...
    
    def GetHandleDirection(self):
        """
        V.GetHandleDirection() -> (float, float, float)
        C++: virtual double *GetHandleDirection()
        
        Set/Get the direction vector of the handle relative to the center
        of the sphere. The direction of the handle is from the sphere
        center to the handle position.
        """
        ...
    
    def GetHandlePosition(self):
        """
        V.GetHandlePosition() -> (float, float, float)
        C++: virtual double *GetHandlePosition()
        
        Get the position of the handle.
        """
        ...
    
    def GetHandleProperty(self):
        """
        V.GetHandleProperty() -> vtkProperty
        C++: virtual vtkProperty *GetHandleProperty()
        
        Get the handle properties (the little ball on the sphere is the
        handle). The properties of the handle when selected and
        unselected can be manipulated.
        """
        ...
    
    def GetHandleVisibility(self):
        """
        V.GetHandleVisibility() -> int
        C++: virtual vtkTypeBool GetHandleVisibility()
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPhiResolution(self):
        """
        V.GetPhiResolution() -> int
        C++: int GetPhiResolution()
        """
        ...
    
    def GetPolyData(self, vtkPolyData):
        """
        V.GetPolyData(vtkPolyData)
        C++: void GetPolyData(vtkPolyData *pd)
        
        Grab the polydata (including points) that defines the sphere. 
        The polydata consists of n+1 points, where n is the resolution of
        the sphere. These point values are guaranteed to be up-to-date
        when either the InteractionEvent or EndInteraction events are
        invoked. The user provides the vtkPolyData and the points and
        polysphere are added to it.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: double GetRadius()
        
        Set/Get the radius of sphere. Default is .5.
        """
        ...
    
    def GetRepresentation(self):
        """
        V.GetRepresentation() -> int
        C++: virtual int GetRepresentation()
        
        Set the representation of the sphere. Different representations
        are useful depending on the application. The default is
        VTK_SPHERE_WIREFRAME.
        """
        ...
    
    def GetRepresentationMaxValue(self):
        """
        V.GetRepresentationMaxValue() -> int
        C++: virtual int GetRepresentationMaxValue()
        
        Set the representation of the sphere. Different representations
        are useful depending on the application. The default is
        VTK_SPHERE_WIREFRAME.
        """
        ...
    
    def GetRepresentationMinValue(self):
        """
        V.GetRepresentationMinValue() -> int
        C++: virtual int GetRepresentationMinValue()
        
        Set the representation of the sphere. Different representations
        are useful depending on the application. The default is
        VTK_SPHERE_WIREFRAME.
        """
        ...
    
    def GetScale(self):
        """
        V.GetScale() -> int
        C++: virtual vtkTypeBool GetScale()
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def GetSelectedHandleProperty(self):
        """
        V.GetSelectedHandleProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedHandleProperty()
        
        Get the handle properties (the little ball on the sphere is the
        handle). The properties of the handle when selected and
        unselected can be manipulated.
        """
        ...
    
    def GetSelectedSphereProperty(self):
        """
        V.GetSelectedSphereProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedSphereProperty()
        
        Get the sphere properties. The properties of the sphere when
        selected and unselected can be manipulated.
        """
        ...
    
    def GetSphere(self, vtkSphere):
        """
        V.GetSphere(vtkSphere)
        C++: void GetSphere(vtkSphere *sphere)
        
        Get the spherical implicit function defined by this widget.  Note
        that vtkSphere is a subclass of vtkImplicitFunction, meaning that
        it can be used by a variety of filters to perform clipping,
        cutting, and selection of data.
        """
        ...
    
    def GetSphereProperty(self):
        """
        V.GetSphereProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSphereProperty()
        
        Get the sphere properties. The properties of the sphere when
        selected and unselected can be manipulated.
        """
        ...
    
    def GetThetaResolution(self):
        """
        V.GetThetaResolution() -> int
        C++: int GetThetaResolution()
        """
        ...
    
    def GetTranslation(self):
        """
        V.GetTranslation() -> int
        C++: virtual vtkTypeBool GetTranslation()
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def HandleVisibilityOff(self):
        """
        V.HandleVisibilityOff()
        C++: virtual void HandleVisibilityOff()
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def HandleVisibilityOn(self):
        """
        V.HandleVisibilityOn()
        C++: virtual void HandleVisibilityOn()
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSphereWidget
        C++: vtkSphereWidget *NewInstance()
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        V.PlaceWidget()
        C++: void PlaceWidget() override;
        V.PlaceWidget(float, float, float, float, float, float)
        C++: void PlaceWidget(double xmin, double xmax, double ymin,
            double ymax, double zmin, double zmax) override;
        
        Methods that satisfy the superclass' API.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSphereWidget
        C++: static vtkSphereWidget *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScaleOff(self):
        """
        V.ScaleOff()
        C++: virtual void ScaleOff()
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def ScaleOn(self):
        """
        V.ScaleOn()
        C++: virtual void ScaleOn()
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: void SetCenter(double x, double y, double z)
        V.SetCenter([float, float, float])
        C++: void SetCenter(double x[3])
        
        Set/Get the center of the sphere.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        Methods that satisfy the superclass' API.
        """
        ...
    
    def SetHandleDirection(self, p_float, p_float_1, p_float_2):
        """
        V.SetHandleDirection(float, float, float)
        C++: virtual void SetHandleDirection(double _arg1, double _arg2,
            double _arg3)
        V.SetHandleDirection((float, float, float))
        C++: virtual void SetHandleDirection(const double _arg[3])
        
        Set/Get the direction vector of the handle relative to the center
        of the sphere. The direction of the handle is from the sphere
        center to the handle position.
        """
        ...
    
    def SetHandleVisibility(self, p_int):
        """
        V.SetHandleVisibility(int)
        C++: virtual void SetHandleVisibility(vtkTypeBool _arg)
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def SetPhiResolution(self, p_int):
        """
        V.SetPhiResolution(int)
        C++: void SetPhiResolution(int r)
        
        Set/Get the resolution of the sphere in the Phi direction. The
        default is 8.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: void SetRadius(double r)
        
        Set/Get the radius of sphere. Default is .5.
        """
        ...
    
    def SetRepresentation(self, p_int):
        """
        V.SetRepresentation(int)
        C++: virtual void SetRepresentation(int _arg)
        
        Set the representation of the sphere. Different representations
        are useful depending on the application. The default is
        VTK_SPHERE_WIREFRAME.
        """
        ...
    
    def SetRepresentationToOff(self):
        """
        V.SetRepresentationToOff()
        C++: void SetRepresentationToOff()
        
        Set the representation of the sphere. Different representations
        are useful depending on the application. The default is
        VTK_SPHERE_WIREFRAME.
        """
        ...
    
    def SetRepresentationToSurface(self):
        """
        V.SetRepresentationToSurface()
        C++: void SetRepresentationToSurface()
        
        Set the representation of the sphere. Different representations
        are useful depending on the application. The default is
        VTK_SPHERE_WIREFRAME.
        """
        ...
    
    def SetRepresentationToWireframe(self):
        """
        V.SetRepresentationToWireframe()
        C++: void SetRepresentationToWireframe()
        
        Set the representation of the sphere. Different representations
        are useful depending on the application. The default is
        VTK_SPHERE_WIREFRAME.
        """
        ...
    
    def SetScale(self, p_int):
        """
        V.SetScale(int)
        C++: virtual void SetScale(vtkTypeBool _arg)
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def SetThetaResolution(self, p_int):
        """
        V.SetThetaResolution(int)
        C++: void SetThetaResolution(int r)
        
        Set/Get the resolution of the sphere in the Theta direction. The
        default is 16.
        """
        ...
    
    def SetTranslation(self, p_int):
        """
        V.SetTranslation(int)
        C++: virtual void SetTranslation(vtkTypeBool _arg)
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def TranslationOff(self):
        """
        V.TranslationOff()
        C++: virtual void TranslationOff()
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def TranslationOn(self):
        """
        V.TranslationOn()
        C++: virtual void TranslationOn()
        
        Enable translation and scaling of the widget. By default, the
        widget can be translated and rotated.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


