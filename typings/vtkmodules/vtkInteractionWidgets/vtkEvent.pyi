"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkEvent(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkEvent - a complete specification of a VTK event including all
    modifiers
    
    Superclass: vtkObject
    
    vtkEvent is a class that fully describes a VTK event. It is used by
    the widgets to help specify the mapping between VTK events and widget
    events.
    """
    def GetEventId(self):
        """
        V.GetEventId() -> int
        C++: virtual unsigned long GetEventId()
        
        Set the modifier for the event.
        """
        ...
    
    def GetKeyCode(self):
        """
        V.GetKeyCode() -> char
        C++: virtual char GetKeyCode()
        
        Set the KeyCode for the event.
        """
        ...
    
    def GetKeySym(self):
        """
        V.GetKeySym() -> string
        C++: virtual char *GetKeySym()
        
        Set the complex key symbol (compound key strokes) for the event.
        """
        ...
    
    def GetModifier(self):
        """
        V.GetModifier() -> int
        C++: virtual int GetModifier()
        V.GetModifier(vtkRenderWindowInteractor) -> int
        C++: static int GetModifier(vtkRenderWindowInteractor *)
        
        Set the modifier for the event.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard macros.
        """
        ...
    
    def GetRepeatCount(self):
        """
        V.GetRepeatCount() -> int
        C++: virtual int GetRepeatCount()
        
        Set the repease count for the event.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard macros.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEvent
        C++: vtkEvent *NewInstance()
        
        Standard macros.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEvent
        C++: static vtkEvent *SafeDownCast(vtkObjectBase *o)
        
        Standard macros.
        """
        ...
    
    def SetEventId(self, p_int):
        """
        V.SetEventId(int)
        C++: virtual void SetEventId(unsigned long _arg)
        
        Set the modifier for the event.
        """
        ...
    
    def SetKeyCode(self, char):
        """
        V.SetKeyCode(char)
        C++: virtual void SetKeyCode(char _arg)
        
        Set the KeyCode for the event.
        """
        ...
    
    def SetKeySym(self, string):
        """
        V.SetKeySym(string)
        C++: virtual void SetKeySym(const char *_arg)
        
        Set the complex key symbol (compound key strokes) for the event.
        """
        ...
    
    def SetModifier(self, p_int):
        """
        V.SetModifier(int)
        C++: virtual void SetModifier(int _arg)
        
        Set the modifier for the event.
        """
        ...
    
    def SetRepeatCount(self, p_int):
        """
        V.SetRepeatCount(int)
        C++: virtual void SetRepeatCount(int _arg)
        
        Set the repease count for the event.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AltModifier = ...
    AnyModifier = ...
    ControlModifier = ...
    EventModifiers = ...
    NoModifier = ...
    ShiftModifier = ...
    __dict__ = ...
    __vtkname__ = ...


