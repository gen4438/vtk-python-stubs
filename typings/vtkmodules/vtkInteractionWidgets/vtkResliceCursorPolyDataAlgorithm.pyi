"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkResliceCursorPolyDataAlgorithm(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkResliceCursorPolyDataAlgorithm - generates a 2D reslice cursor
    polydata
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkResliceCursorPolyDataAlgorithm is a class that generates a 2D
    reslice cursor vtkPolyData, suitable for rendering within a
    vtkResliceCursorActor. The class takes as input the reslice plane
    normal index (an index into the normal plane maintained by the
    reslice cursor object) and generates the polydata represeting the
    other two reslice axes suitable for rendering on a slice through this
    plane. The cursor consists of two intersection axes lines that meet
    at the cursor focus. These lines may have a user defined thickness.
    They need not be orthogonal to each other.
    @sa
    vtkResliceCursorActor vtkResliceCursor vtkResliceCursorWidget
    """
    def GetAxis1(self):
        """
        V.GetAxis1() -> int
        C++: virtual int GetAxis1()
        
        Get the index of the axes and the planes that they represent
        """
        ...
    
    def GetAxis2(self):
        """
        V.GetAxis2() -> int
        C++: virtual int GetAxis2()
        
        Get the index of the axes and the planes that they represent
        """
        ...
    
    def GetCenterlineAxis1(self):
        """
        V.GetCenterlineAxis1() -> vtkPolyData
        C++: virtual vtkPolyData *GetCenterlineAxis1()
        
        Get either one of the axes that this object produces. Depending
        on the mode, one renders either the centerline axes or both the
        centerline axes and the slab
        """
        ...
    
    def GetCenterlineAxis2(self):
        """
        V.GetCenterlineAxis2() -> vtkPolyData
        C++: virtual vtkPolyData *GetCenterlineAxis2()
        
        Get either one of the axes that this object produces. Depending
        on the mode, one renders either the centerline axes or both the
        centerline axes and the slab
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the MTime. Check the MTime of the internal ResliceCursor as
        well, if one has been set
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOtherPlaneForAxis(self, p_int):
        """
        V.GetOtherPlaneForAxis(int) -> int
        C++: int GetOtherPlaneForAxis(int p)
        
        Convenience method that, given one plane, returns the other plane
        that this class represents.
        """
        ...
    
    def GetPlaneAxis1(self):
        """
        V.GetPlaneAxis1() -> int
        C++: virtual int GetPlaneAxis1()
        
        Get the index of the axes and the planes that they represent
        """
        ...
    
    def GetPlaneAxis2(self):
        """
        V.GetPlaneAxis2() -> int
        C++: virtual int GetPlaneAxis2()
        
        Get the index of the axes and the planes that they represent
        """
        ...
    
    def GetResliceCursor(self):
        """
        V.GetResliceCursor() -> vtkResliceCursor
        C++: virtual vtkResliceCursor *GetResliceCursor()
        
        Set the Reslice cursor from which to generate the polydata
        representation
        """
        ...
    
    def GetReslicePlaneNormal(self):
        """
        V.GetReslicePlaneNormal() -> int
        C++: virtual int GetReslicePlaneNormal()
        
        Which of the 3 axes defines the reslice plane normal ?
        """
        ...
    
    def GetSliceBounds(self):
        """
        V.GetSliceBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetSliceBounds()
        
        Set/Get the slice bounds, ie the slice of this view on which to
        display the reslice cursor.
        """
        ...
    
    def GetThickSlabAxis1(self):
        """
        V.GetThickSlabAxis1() -> vtkPolyData
        C++: virtual vtkPolyData *GetThickSlabAxis1()
        
        Get either one of the axes that this object produces. Depending
        on the mode, one renders either the centerline axes or both the
        centerline axes and the slab
        """
        ...
    
    def GetThickSlabAxis2(self):
        """
        V.GetThickSlabAxis2() -> vtkPolyData
        C++: virtual vtkPolyData *GetThickSlabAxis2()
        
        Get either one of the axes that this object produces. Depending
        on the mode, one renders either the centerline axes or both the
        centerline axes and the slab
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkResliceCursorPolyDataAlgorithm
        C++: vtkResliceCursorPolyDataAlgorithm *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkResliceCursorPolyDataAlgorithm
        C++: static vtkResliceCursorPolyDataAlgorithm *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetResliceCursor(self, vtkResliceCursor):
        """
        V.SetResliceCursor(vtkResliceCursor)
        C++: virtual void SetResliceCursor(vtkResliceCursor *)
        
        Set the Reslice cursor from which to generate the polydata
        representation
        """
        ...
    
    def SetReslicePlaneNormal(self, p_int):
        """
        V.SetReslicePlaneNormal(int)
        C++: virtual void SetReslicePlaneNormal(int _arg)
        
        Which of the 3 axes defines the reslice plane normal ?
        """
        ...
    
    def SetReslicePlaneNormalToXAxis(self):
        """
        V.SetReslicePlaneNormalToXAxis()
        C++: void SetReslicePlaneNormalToXAxis()
        
        Set the planes that correspond to the reslice axes.
        """
        ...
    
    def SetReslicePlaneNormalToYAxis(self):
        """
        V.SetReslicePlaneNormalToYAxis()
        C++: void SetReslicePlaneNormalToYAxis()
        """
        ...
    
    def SetReslicePlaneNormalToZAxis(self):
        """
        V.SetReslicePlaneNormalToZAxis()
        C++: void SetReslicePlaneNormalToZAxis()
        """
        ...
    
    def SetSliceBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetSliceBounds(float, float, float, float, float, float)
        C++: virtual void SetSliceBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetSliceBounds((float, float, float, float, float, float))
        C++: virtual void SetSliceBounds(const double _arg[6])
        
        Set/Get the slice bounds, ie the slice of this view on which to
        display the reslice cursor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    XAxis = ...
    YAxis = ...
    ZAxis = ...
    __dict__ = ...
    __vtkname__ = ...


