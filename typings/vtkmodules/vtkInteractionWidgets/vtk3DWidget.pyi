"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtk3DWidget(__vtkmodules_vtkRenderingCore.vtkInteractorObserver):
    """
    vtk3DWidget - an abstract superclass for 3D widgets
    
    Superclass: vtkInteractorObserver
    
    vtk3DWidget is an abstract superclass for 3D interactor observers.
    These 3D widgets represent themselves in the scene, and have special
    callbacks associated with them that allows interactive manipulation
    of the widget. Inparticular, the difference between a vtk3DWidget and
    its abstract superclass vtkInteractorObserver is that vtk3DWidgets
    are "placed" in 3D space.  vtkInteractorObservers have no notion of
    where they are placed, and may not exist in 3D space at all.  3D
    widgets also provide auxiliary functions like producing a
    transformation, creating polydata (for seeding streamlines, probes,
    etc.) or creating implicit functions. See the concrete subclasses for
    particulars.
    
    Typically the widget is used by specifying a vtkProp3D or VTK dataset
    as input, and then invoking the "On" method to activate it. (You can
    also specify a bounding box to help position the widget.) Prior to
    invoking the On() method, the user may also wish to use the
    PlaceWidget() to initially position it. The 'i' (for "interactor")
    keypresses also can be used to turn the widgets on and off (methods
    exist to change the key value and enable keypress activiation).
    
    To support interactive manipulation of objects, this class (and
    subclasses) invoke the events StartInteractionEvent,
    InteractionEvent, and EndInteractionEvent.  These events are invoked
    when the vtk3DWidget enters a state where rapid response is desired:
    mouse motion, etc. The events can be used, for example, to set the
    desired update frame rate (StartInteractionEvent), operate on the
    vtkProp3D or other object (InteractionEvent), and set the desired
    frame rate back to normal values (EndInteractionEvent).
    
    Note that the Priority attribute inherited from vtkInteractorObserver
    has a new default value which is now 0.5 so that all 3D widgets have
    a higher priority than the usual interactor styles.
    
    @sa
    vtkBoxWidget vtkPlaneWidget vtkLineWidget vtkPointWidget
    vtkSphereWidget vtkImplicitPlaneWidget
    """
    def GetHandleSize(self):
        """
        V.GetHandleSize() -> float
        C++: virtual double GetHandleSize()
        
        Set/Get the factor that controls the size of the handles that
        appear as part of the widget. These handles (like spheres, etc.)
        are used to manipulate the widget, and are sized as a fraction of
        the screen diagonal.
        """
        ...
    
    def GetHandleSizeMaxValue(self):
        """
        V.GetHandleSizeMaxValue() -> float
        C++: virtual double GetHandleSizeMaxValue()
        
        Set/Get the factor that controls the size of the handles that
        appear as part of the widget. These handles (like spheres, etc.)
        are used to manipulate the widget, and are sized as a fraction of
        the screen diagonal.
        """
        ...
    
    def GetHandleSizeMinValue(self):
        """
        V.GetHandleSizeMinValue() -> float
        C++: virtual double GetHandleSizeMinValue()
        
        Set/Get the factor that controls the size of the handles that
        appear as part of the widget. These handles (like spheres, etc.)
        are used to manipulate the widget, and are sized as a fraction of
        the screen diagonal.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataSet
        C++: virtual vtkDataSet *GetInput()
        
        Specify the input dataset. This is not required, but if supplied,
        and no vtkProp3D is specified, it is used to initially position
        the widget.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlaceFactor(self):
        """
        V.GetPlaceFactor() -> float
        C++: virtual double GetPlaceFactor()
        
        Set/Get a factor representing the scaling of the widget upon
        placement (via the PlaceWidget() method). Normally the widget is
        placed so that it just fits within the bounding box defined in
        PlaceWidget(bounds). The PlaceFactor will make the widget larger
        (PlaceFactor > 1) or smaller (PlaceFactor < 1). By default,
        PlaceFactor is set to 0.5.
        """
        ...
    
    def GetPlaceFactorMaxValue(self):
        """
        V.GetPlaceFactorMaxValue() -> float
        C++: virtual double GetPlaceFactorMaxValue()
        
        Set/Get a factor representing the scaling of the widget upon
        placement (via the PlaceWidget() method). Normally the widget is
        placed so that it just fits within the bounding box defined in
        PlaceWidget(bounds). The PlaceFactor will make the widget larger
        (PlaceFactor > 1) or smaller (PlaceFactor < 1). By default,
        PlaceFactor is set to 0.5.
        """
        ...
    
    def GetPlaceFactorMinValue(self):
        """
        V.GetPlaceFactorMinValue() -> float
        C++: virtual double GetPlaceFactorMinValue()
        
        Set/Get a factor representing the scaling of the widget upon
        placement (via the PlaceWidget() method). Normally the widget is
        placed so that it just fits within the bounding box defined in
        PlaceWidget(bounds). The PlaceFactor will make the widget larger
        (PlaceFactor > 1) or smaller (PlaceFactor < 1). By default,
        PlaceFactor is set to 0.5.
        """
        ...
    
    def GetProp3D(self):
        """
        V.GetProp3D() -> vtkProp3D
        C++: virtual vtkProp3D *GetProp3D()
        
        Specify a vtkProp3D around which to place the widget. This is not
        required, but if supplied, it is used to initially position the
        widget.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtk3DWidget
        C++: vtk3DWidget *NewInstance()
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: virtual void PlaceWidget(double bounds[6])
        V.PlaceWidget()
        C++: virtual void PlaceWidget()
        V.PlaceWidget(float, float, float, float, float, float)
        C++: virtual void PlaceWidget(double xmin, double xmax,
            double ymin, double ymax, double zmin, double zmax)
        
        This method is used to initially place the widget.  The placement
        of the widget depends on whether a Prop3D or input dataset is
        provided. If one of these two is provided, they will be used to
        obtain a bounding box, around which the widget is placed.
        Otherwise, you can manually specify a bounds with the
        PlaceWidget(bounds) method. Note: PlaceWidget(bounds) is required
        by all subclasses; the other methods are provided as convenience
        methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtk3DWidget
        C++: static vtk3DWidget *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetHandleSize(self, p_float):
        """
        V.SetHandleSize(float)
        C++: virtual void SetHandleSize(double _arg)
        
        Set/Get the factor that controls the size of the handles that
        appear as part of the widget. These handles (like spheres, etc.)
        are used to manipulate the widget, and are sized as a fraction of
        the screen diagonal.
        """
        ...
    
    def SetInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *)
        
        Specify the input dataset. This is not required, but if supplied,
        and no vtkProp3D is specified, it is used to initially position
        the widget.
        """
        ...
    
    def SetInputData(self, vtkDataSet):
        """
        V.SetInputData(vtkDataSet)
        C++: virtual void SetInputData(vtkDataSet *)
        
        Specify the input dataset. This is not required, but if supplied,
        and no vtkProp3D is specified, it is used to initially position
        the widget.
        """
        ...
    
    def SetPlaceFactor(self, p_float):
        """
        V.SetPlaceFactor(float)
        C++: virtual void SetPlaceFactor(double _arg)
        
        Set/Get a factor representing the scaling of the widget upon
        placement (via the PlaceWidget() method). Normally the widget is
        placed so that it just fits within the bounding box defined in
        PlaceWidget(bounds). The PlaceFactor will make the widget larger
        (PlaceFactor > 1) or smaller (PlaceFactor < 1). By default,
        PlaceFactor is set to 0.5.
        """
        ...
    
    def SetProp3D(self, vtkProp3D):
        """
        V.SetProp3D(vtkProp3D)
        C++: virtual void SetProp3D(vtkProp3D *)
        
        Specify a vtkProp3D around which to place the widget. This is not
        required, but if supplied, it is used to initially position the
        widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


