"""
This type stub file was generated by pyright.
"""

from .vtkPointPlacer import vtkPointPlacer

class vtkCellCentersPointPlacer(vtkPointPlacer):
    """
    vtkCellCentersPointPlacer - Snaps points at the center of a cell
    
    Superclass: vtkPointPlacer
    
    vtkCellCentersPointPlacer is a class to snap points on the center of
    cells. The class has 3 modes. In the ParametricCenter mode, it snaps
    points to the parametric center of the cell (see vtkCell). In
    CellPointsMean mode, points are snapped to the mean of the points in
    the cell. In 'None' mode, no snapping is performed. The computed
    world position is the picked position within the cell.
    
    @par Usage: The actors that render data and wish to be considered for
    placement by this placer are added to the list asplacer->AddProp(
    actor );
    
    @sa
    vtkPointPlacer
    """
    def AddProp(self, vtkProp):
        """
        V.AddProp(vtkProp)
        C++: virtual void AddProp(vtkProp *)
        """
        ...
    
    def ComputeWorldPosition(self, vtkRenderer, p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float, float,
             float], [float, float, float, float, float, float, float,
            float, float]) -> int
        C++: int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double worldPos[3],
            double worldOrient[9]) override;
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float, float,
             float], [float, float, float], [float, float, float, float,
            float, float, float, float, float]) -> int
        C++: int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double refWorldPos[3],
            double worldPos[3], double worldOrient[9]) override;
        
        Given a renderer and a display position in pixel coordinates,
        compute the world position and orientation where this point will
        be placed. This method is typically used by the representation to
        place the point initially. For the Terrain point placer this
        computes world points that lie at the specified height above the
        terrain.
        """
        ...
    
    def GetCellPicker(self):
        """
        V.GetCellPicker() -> vtkCellPicker
        C++: virtual vtkCellPicker *GetCellPicker()
        
        Get the Prop picker.
        """
        ...
    
    def GetMode(self):
        """
        V.GetMode() -> int
        C++: virtual int GetMode()
        
        Modes to change the point placement. Parametric center picks the
        parametric center within the cell. CellPointsMean picks the
        average of all points in the cell. When the mode is None, the
        input point is passed through unmodified. Default is
        CellPointsMean.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfProps(self):
        """
        V.GetNumberOfProps() -> int
        C++: int GetNumberOfProps()
        """
        ...
    
    def HasProp(self, vtkProp):
        """
        V.HasProp(vtkProp) -> int
        C++: int HasProp(vtkProp *)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellCentersPointPlacer
        C++: vtkCellCentersPointPlacer *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def RemoveAllProps(self):
        """
        V.RemoveAllProps()
        C++: virtual void RemoveAllProps()
        """
        ...
    
    def RemoveViewProp(self, vtkProp):
        """
        V.RemoveViewProp(vtkProp)
        C++: virtual void RemoveViewProp(vtkProp *prop)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellCentersPointPlacer
        C++: static vtkCellCentersPointPlacer *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetMode(self, p_int):
        """
        V.SetMode(int)
        C++: virtual void SetMode(int _arg)
        
        Modes to change the point placement. Parametric center picks the
        parametric center within the cell. CellPointsMean picks the
        average of all points in the cell. When the mode is None, the
        input point is passed through unmodified. Default is
        CellPointsMean.
        """
        ...
    
    def ValidateDisplayPosition(self, vtkRenderer, p_float=..., p_float=...):
        """
        V.ValidateDisplayPosition(vtkRenderer, [float, float]) -> int
        C++: int ValidateDisplayPosition(vtkRenderer *,
            double displayPos[2]) override;
        
        Given a display position, check the validity of this position.
        """
        ...
    
    def ValidateWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.ValidateWorldPosition([float, float, float]) -> int
        C++: int ValidateWorldPosition(double worldPos[3]) override;
        V.ValidateWorldPosition([float, float, float], [float, float,
            float, float, float, float, float, float, float]) -> int
        C++: int ValidateWorldPosition(double worldPos[3],
            double worldOrient[9]) override;
        
        Given a world position check the validity of this position
        according to the constraints of the placer
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CellPointsMean = ...
    ParametricCenter = ...
    __dict__ = ...
    __vtkname__ = ...


