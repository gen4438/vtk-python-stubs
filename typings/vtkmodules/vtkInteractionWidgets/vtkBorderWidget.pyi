"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkBorderWidget(vtkAbstractWidget):
    """
    vtkBorderWidget - place a border around a 2D rectangular region
    
    Superclass: vtkAbstractWidget
    
    This class is a superclass for 2D widgets that may require a
    rectangular border. Besides drawing a border, the widget provides
    methods for resizing and moving the rectangular region (and
    associated border). The widget provides methods and internal data
    members so that subclasses can take advantage of this widgets
    capabilities, requiring only that the subclass defines a
    "representation", i.e., some combination of props or actors that can
    be managed in the 2D rectangular region.
    
    The class defines basic positioning functionality, including the
    ability to size the widget with locked x/y proportions. The area
    within the border may be made "selectable" as well, meaning that a
    selection event interior to the widget invokes a virtual
    SelectRegion() method, which can be used to pick objects or otherwise
    manipulate data interior to the widget.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    On the boundary of the widget:
      LeftButtonPressEvent - select boundary
      LeftButtonReleaseEvent - deselect boundary
      MouseMoveEvent - move/resize widget depending on which portion of
    the
                       boundary was selected. On the interior of the
    widget:
      LeftButtonPressEvent - invoke SelectButton() callback (if the ivar
                             Selectable is on) Anywhere on the widget:
      MiddleButtonPressEvent - move the widget 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkBorderWidget's widget events:
    
    
      vtkWidgetEvent::Select -- some part of the widget has been selected
      vtkWidgetEvent::EndSelect -- the selection process has completed
      vtkWidgetEvent::Translate -- the widget is to be translated
      vtkWidgetEvent::Move -- a request for slider motion has been
    invoked 
    
    @par Event Bindings: In turn, when these widget events are processed,
    this widget invokes the following VTK events on itself (which
    observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (on vtkWidgetEvent::Select)
      vtkCommand::EndInteractionEvent (on vtkWidgetEvent::EndSelect)
      vtkCommand::InteractionEvent (on vtkWidgetEvent::Move) 
    
    @sa
    vtkInteractorObserver vtkCameraInterpolator
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetBorderRepresentation(self):
        """
        V.GetBorderRepresentation() -> vtkBorderRepresentation
        C++: vtkBorderRepresentation *GetBorderRepresentation()
        
        Return the representation as a vtkBorderRepresentation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for class.
        """
        ...
    
    def GetResizable(self):
        """
        V.GetResizable() -> int
        C++: virtual vtkTypeBool GetResizable()
        
        Indicate whether the boundary of the widget can be resized. If
        not, the cursor will not change to "resize" type when mouse over
        the boundary.
        """
        ...
    
    def GetSelectable(self):
        """
        V.GetSelectable() -> int
        C++: virtual vtkTypeBool GetSelectable()
        
        Indicate whether the interior region of the widget can be
        selected or not. If not, then events (such as left mouse down)
        allow the user to "move" the widget, and no selection is
        possible. Otherwise the SelectRegion() method is invoked.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBorderWidget
        C++: vtkBorderWidget *NewInstance()
        
        Standard methods for class.
        """
        ...
    
    def ResizableOff(self):
        """
        V.ResizableOff()
        C++: virtual void ResizableOff()
        
        Indicate whether the boundary of the widget can be resized. If
        not, the cursor will not change to "resize" type when mouse over
        the boundary.
        """
        ...
    
    def ResizableOn(self):
        """
        V.ResizableOn()
        C++: virtual void ResizableOn()
        
        Indicate whether the boundary of the widget can be resized. If
        not, the cursor will not change to "resize" type when mouse over
        the boundary.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBorderWidget
        C++: static vtkBorderWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for class.
        """
        ...
    
    def SelectableOff(self):
        """
        V.SelectableOff()
        C++: virtual void SelectableOff()
        
        Indicate whether the interior region of the widget can be
        selected or not. If not, then events (such as left mouse down)
        allow the user to "move" the widget, and no selection is
        possible. Otherwise the SelectRegion() method is invoked.
        """
        ...
    
    def SelectableOn(self):
        """
        V.SelectableOn()
        C++: virtual void SelectableOn()
        
        Indicate whether the interior region of the widget can be
        selected or not. If not, then events (such as left mouse down)
        allow the user to "move" the widget, and no selection is
        possible. Otherwise the SelectRegion() method is invoked.
        """
        ...
    
    def SetRepresentation(self, vtkBorderRepresentation):
        """
        V.SetRepresentation(vtkBorderRepresentation)
        C++: void SetRepresentation(vtkBorderRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def SetResizable(self, p_int):
        """
        V.SetResizable(int)
        C++: virtual void SetResizable(vtkTypeBool _arg)
        
        Indicate whether the boundary of the widget can be resized. If
        not, the cursor will not change to "resize" type when mouse over
        the boundary.
        """
        ...
    
    def SetSelectable(self, p_int):
        """
        V.SetSelectable(int)
        C++: virtual void SetSelectable(vtkTypeBool _arg)
        
        Indicate whether the interior region of the widget can be
        selected or not. If not, then events (such as left mouse down)
        allow the user to "move" the widget, and no selection is
        possible. Otherwise the SelectRegion() method is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


