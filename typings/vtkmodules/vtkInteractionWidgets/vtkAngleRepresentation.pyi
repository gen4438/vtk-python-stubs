"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkAngleRepresentation(vtkWidgetRepresentation):
    """
    vtkAngleRepresentation - represent the vtkAngleWidget
    
    Superclass: vtkWidgetRepresentation
    
    The vtkAngleRepresentation is a superclass for classes representing
    the vtkAngleWidget. This representation consists of two rays and
    three vtkHandleRepresentations to place and manipulate the three
    points defining the angle representation. (Note: the three points are
    referred to as Point1, Center, and Point2, at the two end points
    (Point1 and Point2) and Center (around which the angle is measured).
    
    @sa
    vtkAngleWidget vtkHandleRepresentation vtkAngleRepresentation2D
    """
    def ArcVisibilityOff(self):
        """
        V.ArcVisibilityOff()
        C++: virtual void ArcVisibilityOff()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def ArcVisibilityOn(self):
        """
        V.ArcVisibilityOn()
        C++: virtual void ArcVisibilityOn()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def CenterWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.CenterWidgetInteraction([float, float])
        C++: virtual void CenterWidgetInteraction(double e[2])
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def GetAngle(self):
        """
        V.GetAngle() -> float
        C++: virtual double GetAngle()
        
        This representation and all subclasses must keep an angle (in
        degrees) consistent with the state of the widget.
        """
        ...
    
    def GetArcVisibility(self):
        """
        V.GetArcVisibility() -> int
        C++: virtual vtkTypeBool GetArcVisibility()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def GetCenterDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetCenterDisplayPosition([float, float, float])
        C++: virtual void GetCenterDisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetCenterRepresentation(self):
        """
        V.GetCenterRepresentation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetCenterRepresentation()
        
        Set/Get the handle representations used for the
        vtkAngleRepresentation.
        """
        ...
    
    def GetCenterWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetCenterWorldPosition([float, float, float])
        C++: virtual void GetCenterWorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Specify the format to use for labeling the angle. Note that an
        empty string results in no label, or a format string without a
        "%" character will not print the angle value.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint1DisplayPosition([float, float, float])
        C++: virtual void GetPoint1DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint1Representation(self):
        """
        V.GetPoint1Representation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetPoint1Representation()
        
        Set/Get the handle representations used for the
        vtkAngleRepresentation.
        """
        ...
    
    def GetPoint1WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint1WorldPosition([float, float, float])
        C++: virtual void GetPoint1WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint2DisplayPosition([float, float, float])
        C++: virtual void GetPoint2DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2Representation(self):
        """
        V.GetPoint2Representation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetPoint2Representation()
        
        Set/Get the handle representations used for the
        vtkAngleRepresentation.
        """
        ...
    
    def GetPoint2WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint2WorldPosition([float, float, float])
        C++: virtual void GetPoint2WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetRay1Visibility(self):
        """
        V.GetRay1Visibility() -> int
        C++: virtual vtkTypeBool GetRay1Visibility()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def GetRay2Visibility(self):
        """
        V.GetRay2Visibility() -> int
        C++: virtual vtkTypeBool GetRay2Visibility()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> int
        C++: virtual int GetTolerance()
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the end
        points of the representation to be active.
        """
        ...
    
    def GetToleranceMaxValue(self):
        """
        V.GetToleranceMaxValue() -> int
        C++: virtual int GetToleranceMaxValue()
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the end
        points of the representation to be active.
        """
        ...
    
    def GetToleranceMinValue(self):
        """
        V.GetToleranceMinValue() -> int
        C++: virtual int GetToleranceMinValue()
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the end
        points of the representation to be active.
        """
        ...
    
    def InstantiateHandleRepresentation(self):
        """
        V.InstantiateHandleRepresentation()
        C++: void InstantiateHandleRepresentation()
        
        This method is used to specify the type of handle representation
        to use for the three internal vtkHandleWidgets within
        vtkAngleRepresentation. To use this method, create a dummy
        vtkHandleRepresentation (or subclass), and then invoke this
        method with this dummy. Then the vtkAngleRepresentation uses this
        dummy to clone three vtkHandleRepresentations of the same type.
        Make sure you set the handle representation before the widget is
        enabled. (The method InstantiateHandleRepresentation() is invoked
        by the vtkAngle widget.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAngleRepresentation
        C++: vtkAngleRepresentation *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def Ray1VisibilityOff(self):
        """
        V.Ray1VisibilityOff()
        C++: virtual void Ray1VisibilityOff()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def Ray1VisibilityOn(self):
        """
        V.Ray1VisibilityOn()
        C++: virtual void Ray1VisibilityOn()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def Ray2VisibilityOff(self):
        """
        V.Ray2VisibilityOff()
        C++: virtual void Ray2VisibilityOff()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def Ray2VisibilityOn(self):
        """
        V.Ray2VisibilityOn()
        C++: virtual void Ray2VisibilityOn()
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAngleRepresentation
        C++: static vtkAngleRepresentation *SafeDownCast(vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetArcVisibility(self, p_int):
        """
        V.SetArcVisibility(int)
        C++: virtual void SetArcVisibility(vtkTypeBool _arg)
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def SetCenterDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetCenterDisplayPosition([float, float, float])
        C++: virtual void SetCenterDisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetHandleRepresentation(self, vtkHandleRepresentation):
        """
        V.SetHandleRepresentation(vtkHandleRepresentation)
        C++: void SetHandleRepresentation(vtkHandleRepresentation *handle)
        
        This method is used to specify the type of handle representation
        to use for the three internal vtkHandleWidgets within
        vtkAngleRepresentation. To use this method, create a dummy
        vtkHandleRepresentation (or subclass), and then invoke this
        method with this dummy. Then the vtkAngleRepresentation uses this
        dummy to clone three vtkHandleRepresentations of the same type.
        Make sure you set the handle representation before the widget is
        enabled. (The method InstantiateHandleRepresentation() is invoked
        by the vtkAngle widget.)
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Specify the format to use for labeling the angle. Note that an
        empty string results in no label, or a format string without a
        "%" character will not print the angle value.
        """
        ...
    
    def SetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1DisplayPosition([float, float, float])
        C++: virtual void SetPoint1DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2DisplayPosition([float, float, float])
        C++: virtual void SetPoint2DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the three points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetRay1Visibility(self, p_int):
        """
        V.SetRay1Visibility(int)
        C++: virtual void SetRay1Visibility(vtkTypeBool _arg)
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def SetRay2Visibility(self, p_int):
        """
        V.SetRay2Visibility(int)
        C++: virtual void SetRay2Visibility(vtkTypeBool _arg)
        
        Special methods for turning off the rays and arc that define the
        cone and arc of the angle.
        """
        ...
    
    def SetTolerance(self, p_int):
        """
        V.SetTolerance(int)
        C++: virtual void SetTolerance(int _arg)
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the end
        points of the representation to be active.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    NearCenter = ...
    NearP1 = ...
    NearP2 = ...
    Outside = ...
    __dict__ = ...
    __vtkname__ = ...


