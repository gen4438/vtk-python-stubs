"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkSeedWidget(vtkAbstractWidget):
    """
    vtkSeedWidget - place multiple seed points
    
    Superclass: vtkAbstractWidget
    
    The vtkSeedWidget is used to placed multiple seed points in the
    scene. The seed points can be used for operations like connectivity,
    segmentation, and region growing.
    
    To use this widget, specify an instance of vtkSeedWidget and a
    representation (a subclass of vtkSeedRepresentation). The widget is
    implemented using multiple instances of vtkHandleWidget which can be
    used to position the seed points (after they are initially placed).
    The representations for these handle widgets are provided by the
    vtkSeedRepresentation.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    
      LeftButtonPressEvent - add a point or select a handle (i.e., seed)
      RightButtonPressEvent - finish adding the seeds
      MouseMoveEvent - move a handle (i.e., seed)
      LeftButtonReleaseEvent - release the selected handle (seed) 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkSeedWidget's widget events:
    
    
      vtkWidgetEvent::AddPoint -- add one point; depending on the state
                                  it may the first or second point added.
    Or,
                                  if near handle, select handle.
      vtkWidgetEvent::Completed -- finished adding seeds.
      vtkWidgetEvent::Move -- move the second point or handle depending
    on the state.
      vtkWidgetEvent::EndSelect -- the handle manipulation process has
    completed. 
    
    @par Event Bindings: This widget invokes the following VTK events on
    itself (which observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (beginning to interact)
      vtkCommand::EndInteractionEvent (completing interaction)
      vtkCommand::InteractionEvent (moving after selecting something)
      vtkCommand::PlacePointEvent (after point is positioned;
                                   call data includes handle id (0,1))
      vtkCommand::DeletePointEvent (before point is deleted;
                                   call data includes handle id (0,1)) 
    
    @sa
    vtkHandleWidget vtkSeedRepresentation
    """
    def CompleteInteraction(self):
        """
        V.CompleteInteraction()
        C++: virtual void CompleteInteraction()
        
        Method to be called when the seed widget should stop responding
        to the place point interaction. The seed widget, when defined
        allows you place seeds by clicking on the render window. Use this
        method to indicate that you would like to stop placing seeds
        interactively. If you'd like the widget to stop responding to
        *any* user interaction simply disable event processing by the
        widget by calling widget->ProcessEventsOff()
        """
        ...
    
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def CreateNewHandle(self):
        """
        V.CreateNewHandle() -> vtkHandleWidget
        C++: virtual vtkHandleWidget *CreateNewHandle()
        
        Use this method to programmatically create a new handle. In
        interactive mode, (when the widget is in the PlacingSeeds state)
        this method is automatically invoked. The method returns the
        handle created. A valid seed representation must exist for the
        widget to create a new handle.
        """
        ...
    
    def DeleteSeed(self, p_int):
        """
        V.DeleteSeed(int)
        C++: void DeleteSeed(int n)
        
        Delete the nth seed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetSeed(self, p_int):
        """
        V.GetSeed(int) -> vtkHandleWidget
        C++: vtkHandleWidget *GetSeed(int n)
        
        Get the nth seed
        """
        ...
    
    def GetSeedRepresentation(self):
        """
        V.GetSeedRepresentation() -> vtkSeedRepresentation
        C++: vtkSeedRepresentation *GetSeedRepresentation()
        
        Return the representation as a vtkSeedRepresentation.
        """
        ...
    
    def GetWidgetState(self):
        """
        V.GetWidgetState() -> int
        C++: virtual int GetWidgetState()
        
        Get the widget state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSeedWidget
        C++: vtkSeedWidget *NewInstance()
        
        Standard methods for a VTK class.
        """
        ...
    
    def RestartInteraction(self):
        """
        V.RestartInteraction()
        C++: virtual void RestartInteraction()
        
        Method to be called when the seed widget should start responding
        to the interaction.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSeedWidget
        C++: static vtkSeedWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for a VTK class.
        """
        ...
    
    def SetCurrentRenderer(self, vtkRenderer):
        """
        V.SetCurrentRenderer(vtkRenderer)
        C++: void SetCurrentRenderer(vtkRenderer *) override;
        
        Set the current renderer. This method also propagates to all the
        child handle widgets, if any exist
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        The method for activating and deactivating this widget. This
        method must be overridden because it is a composite widget and
        does more than its superclasses' vtkAbstractWidget::SetEnabled()
        method.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *) override;
        
        Set the interactor. This method also propagates to all the child
        handle widgets, if any exist
        """
        ...
    
    def SetProcessEvents(self, p_int):
        """
        V.SetProcessEvents(int)
        C++: void SetProcessEvents(vtkTypeBool) override;
        
        Methods to change the whether the widget responds to interaction.
        Overridden to pass the state to component widgets.
        """
        ...
    
    def SetRepresentation(self, vtkSeedRepresentation):
        """
        V.SetRepresentation(vtkSeedRepresentation)
        C++: void SetRepresentation(vtkSeedRepresentation *rep)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    MovingSeed = ...
    PlacedSeeds = ...
    PlacingSeeds = ...
    Start = ...
    __dict__ = ...
    __vtkname__ = ...


