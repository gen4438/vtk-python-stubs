"""
This type stub file was generated by pyright.
"""

from .vtkBorderWidget import vtkBorderWidget

class vtkLogoWidget(vtkBorderWidget):
    """
    vtkLogoWidget - 2D widget for placing and manipulating a logo
    
    Superclass: vtkBorderWidget
    
    This class provides support for interactively displaying and
    manipulating a logo. Logos are defined by an image; this widget
    simply allows you to interactively place and resize the image logo.
    To use this widget, simply create a vtkLogoRepresentation (or
    subclass) and associate it with the vtkLogoWidget.
    
    @sa
    vtkBorderWidget
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK class methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK class methods.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK class methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK class methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLogoWidget
        C++: vtkLogoWidget *NewInstance()
        
        Standard VTK class methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLogoWidget
        C++: static vtkLogoWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard VTK class methods.
        """
        ...
    
    def SetRepresentation(self, vtkLogoRepresentation):
        """
        V.SetRepresentation(vtkLogoRepresentation)
        C++: void SetRepresentation(vtkLogoRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


