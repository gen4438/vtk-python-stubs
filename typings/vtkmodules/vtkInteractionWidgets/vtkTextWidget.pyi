"""
This type stub file was generated by pyright.
"""

from .vtkBorderWidget import vtkBorderWidget

class vtkTextWidget(vtkBorderWidget):
    """
    vtkTextWidget - widget for placing text on overlay plane
    
    Superclass: vtkBorderWidget
    
    This class provides support for interactively placing text on the 2D
    overlay plane. The text is defined by an instance of vtkTextActor. It
    uses the event bindings of its superclass (vtkBorderWidget). In
    addition, when the text is selected, the widget emits a
    WidgetActivateEvent that observers can watch for. This is useful for
    opening GUI dialogues to adjust font characteristics, etc. (Please
    see the superclass for a description of event bindings.)
    
    @sa
    vtkBorderWidget vtkCaptionWidget
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetTextActor(self):
        """
        V.GetTextActor() -> vtkTextActor
        C++: vtkTextActor *GetTextActor()
        
        Specify a vtkTextActor to manage. This is a convenient,
        alternative method to specify the representation for the widget
        (i.e., used instead of SetRepresentation()). It internally
        creates a vtkTextRepresentation and then invokes
        vtkTextRepresentation::SetTextActor().
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTextWidget
        C++: vtkTextWidget *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTextWidget
        C++: static vtkTextWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetRepresentation(self, vtkTextRepresentation):
        """
        V.SetRepresentation(vtkTextRepresentation)
        C++: void SetRepresentation(vtkTextRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def SetTextActor(self, vtkTextActor):
        """
        V.SetTextActor(vtkTextActor)
        C++: void SetTextActor(vtkTextActor *textActor)
        
        Specify a vtkTextActor to manage. This is a convenient,
        alternative method to specify the representation for the widget
        (i.e., used instead of SetRepresentation()). It internally
        creates a vtkTextRepresentation and then invokes
        vtkTextRepresentation::SetTextActor().
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


