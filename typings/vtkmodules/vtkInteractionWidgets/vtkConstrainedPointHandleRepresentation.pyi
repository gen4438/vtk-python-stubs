"""
This type stub file was generated by pyright.
"""

from .vtkHandleRepresentation import vtkHandleRepresentation

class vtkConstrainedPointHandleRepresentation(vtkHandleRepresentation):
    """
    vtkConstrainedPointHandleRepresentation - point representation
    constrained to a 2D plane
    
    Superclass: vtkHandleRepresentation
    
    This class is used to represent a vtkHandleWidget. It represents a
    position in 3D world coordinates that is constrained to a specified
    plane. The default look is to draw a white point when this widget is
    not selected or active, a thin green circle when it is highlighted,
    and a thicker cyan circle when it is active (being positioned).
    Defaults can be adjusted - but take care to define cursor geometry
    that makes sense for this widget. The geometry will be aligned on the
    constraining plane, with the plane normal aligned with the X axis of
    the geometry (similar behavior to vtkGlyph3D).
    
    TODO: still need to work on
    1) translation when mouse is outside bounding planes
    2) size of the widget
    
    @sa
    vtkHandleRepresentation vtkHandleWidget
    """
    def AddBoundingPlane(self, vtkPlane):
        """
        V.AddBoundingPlane(vtkPlane)
        C++: void AddBoundingPlane(vtkPlane *plane)
        
        A collection of plane equations used to bound the position of the
        point. This is in addition to confining the point to a plane -
        these constraints are meant to, for example, keep a point within
        the extent of an image. Using a set of plane equations allows for
        more complex bounds (such as bounding a point to an oblique
        reliced image that has hexagonal shape) than a simple extent.
        """
        ...
    
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Subclasses of vtkConstrainedPointHandleRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def CheckConstraint(self, vtkRenderer, p_float=..., p_float=...):
        """
        V.CheckConstraint(vtkRenderer, [float, float]) -> int
        C++: int CheckConstraint(vtkRenderer *renderer, double pos[2])
            override;
        
        Overridden from the base class. It converts the display
        co-ordinates to world co-ordinates. It returns 1 if the point
        lies within the constrained region, otherwise return 0
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify)
            override;
        
        Subclasses of vtkConstrainedPointHandleRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def GetActiveCursorShape(self):
        """
        V.GetActiveCursorShape() -> vtkPolyData
        C++: vtkPolyData *GetActiveCursorShape()
        
        Specify the shape of the cursor (handle) when it is active. This
        is the geometry that will be used when the mouse is close to the
        handle or if the user is manipulating the handle.
        """
        ...
    
    def GetActiveProperty(self):
        """
        V.GetActiveProperty() -> vtkProperty
        C++: virtual vtkProperty *GetActiveProperty()
        
        This is the property used when the user is interacting with the
        handle.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def GetBoundingPlanes(self):
        """
        V.GetBoundingPlanes() -> vtkPlaneCollection
        C++: virtual vtkPlaneCollection *GetBoundingPlanes()
        
        A collection of plane equations used to bound the position of the
        point. This is in addition to confining the point to a plane -
        these constraints are meant to, for example, keep a point within
        the extent of an image. Using a set of plane equations allows for
        more complex bounds (such as bounding a point to an oblique
        reliced image that has hexagonal shape) than a simple extent.
        """
        ...
    
    def GetCursorShape(self):
        """
        V.GetCursorShape() -> vtkPolyData
        C++: vtkPolyData *GetCursorShape()
        
        Specify the cursor shape. Keep in mind that the shape will be
        aligned with the constraining plane by orienting it such that the
        x axis of the geometry lies along the normal of the plane.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetObliquePlane(self):
        """
        V.GetObliquePlane() -> vtkPlane
        C++: virtual vtkPlane *GetObliquePlane()
        
        If the ProjectionNormal is set to Oblique, then this is the
        oblique plane used to constrain the handle position
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, ...)
        C++: double *GetPosition()
        V.GetPosition([float, float, float])
        C++: void GetPosition(double xyz[3])
        
        Set/Get the position of the point in display coordinates.  These
        are convenience methods that extend the superclasses'
        GetHandlePosition() method. Note that only the x-y coordinate
        values are used
        """
        ...
    
    def GetProjectionNormal(self):
        """
        V.GetProjectionNormal() -> int
        C++: virtual int GetProjectionNormal()
        
        Set the projection normal to lie along the x, y, or z axis, or to
        be oblique. If it is oblique, then the plane is defined in the
        ObliquePlane ivar.
        """
        ...
    
    def GetProjectionNormalMaxValue(self):
        """
        V.GetProjectionNormalMaxValue() -> int
        C++: virtual int GetProjectionNormalMaxValue()
        
        Set the projection normal to lie along the x, y, or z axis, or to
        be oblique. If it is oblique, then the plane is defined in the
        ObliquePlane ivar.
        """
        ...
    
    def GetProjectionNormalMinValue(self):
        """
        V.GetProjectionNormalMinValue() -> int
        C++: virtual int GetProjectionNormalMinValue()
        
        Set the projection normal to lie along the x, y, or z axis, or to
        be oblique. If it is oblique, then the plane is defined in the
        ObliquePlane ivar.
        """
        ...
    
    def GetProjectionPosition(self):
        """
        V.GetProjectionPosition() -> float
        C++: virtual double GetProjectionPosition()
        
        The position of the bounding plane from the origin along the
        normal. The origin and normal are defined in the oblique plane
        when the ProjectionNormal is Oblique. For the X, Y, and Z axes
        projection normals, the normal is the axis direction, and the
        origin is (0,0,0).
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        This is the property used when the handle is not active (the
        mouse is not near the handle)
        """
        ...
    
    def GetSelectedProperty(self):
        """
        V.GetSelectedProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedProperty()
        
        This is the property used when the mouse is near the handle (but
        the user is not yet interacting with it)
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def Highlight(self, p_int):
        """
        V.Highlight(int)
        C++: void Highlight(int highlight) override;
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkConstrainedPointHandleRepresentation
        C++: vtkConstrainedPointHandleRepresentation *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RemoveAllBoundingPlanes(self):
        """
        V.RemoveAllBoundingPlanes()
        C++: void RemoveAllBoundingPlanes()
        
        A collection of plane equations used to bound the position of the
        point. This is in addition to confining the point to a plane -
        these constraints are meant to, for example, keep a point within
        the extent of an image. Using a set of plane equations allows for
        more complex bounds (such as bounding a point to an oblique
        reliced image that has hexagonal shape) than a simple extent.
        """
        ...
    
    def RemoveBoundingPlane(self, vtkPlane):
        """
        V.RemoveBoundingPlane(vtkPlane)
        C++: void RemoveBoundingPlane(vtkPlane *plane)
        
        A collection of plane equations used to bound the position of the
        point. This is in addition to confining the point to a plane -
        these constraints are meant to, for example, keep a point within
        the extent of an image. Using a set of plane equations allows for
        more complex bounds (such as bounding a point to an oblique
        reliced image that has hexagonal shape) than a simple extent.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkConstrainedPointHandleRepresentation
        C++: static vtkConstrainedPointHandleRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetActiveCursorShape(self, vtkPolyData):
        """
        V.SetActiveCursorShape(vtkPolyData)
        C++: void SetActiveCursorShape(vtkPolyData *activeShape)
        
        Specify the shape of the cursor (handle) when it is active. This
        is the geometry that will be used when the mouse is close to the
        handle or if the user is manipulating the handle.
        """
        ...
    
    def SetBoundingPlanes(self, vtkPlaneCollection):
        """
        V.SetBoundingPlanes(vtkPlaneCollection)
        C++: virtual void SetBoundingPlanes(vtkPlaneCollection *)
        V.SetBoundingPlanes(vtkPlanes)
        C++: void SetBoundingPlanes(vtkPlanes *planes)
        
        A collection of plane equations used to bound the position of the
        point. This is in addition to confining the point to a plane -
        these constraints are meant to, for example, keep a point within
        the extent of an image. Using a set of plane equations allows for
        more complex bounds (such as bounding a point to an oblique
        reliced image that has hexagonal shape) than a simple extent.
        """
        ...
    
    def SetCursorShape(self, vtkPolyData):
        """
        V.SetCursorShape(vtkPolyData)
        C++: void SetCursorShape(vtkPolyData *cursorShape)
        
        Specify the cursor shape. Keep in mind that the shape will be
        aligned with the constraining plane by orienting it such that the
        x axis of the geometry lies along the normal of the plane.
        """
        ...
    
    def SetDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetDisplayPosition([float, float, float])
        C++: void SetDisplayPosition(double pos[3]) override;
        
        Method overridden from Superclass. computes the world
        co-ordinates using GetIntersectionPosition()
        """
        ...
    
    def SetObliquePlane(self, vtkPlane):
        """
        V.SetObliquePlane(vtkPlane)
        C++: void SetObliquePlane(vtkPlane *)
        
        If the ProjectionNormal is set to Oblique, then this is the
        oblique plane used to constrain the handle position
        """
        ...
    
    def SetPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetPosition(float, float, float)
        C++: void SetPosition(double x, double y, double z)
        V.SetPosition([float, float, float])
        C++: void SetPosition(double xyz[3])
        
        Set/Get the position of the point in display coordinates.  These
        are convenience methods that extend the superclasses'
        GetHandlePosition() method. Note that only the x-y coordinate
        values are used
        """
        ...
    
    def SetProjectionNormal(self, p_int):
        """
        V.SetProjectionNormal(int)
        C++: virtual void SetProjectionNormal(int _arg)
        
        Set the projection normal to lie along the x, y, or z axis, or to
        be oblique. If it is oblique, then the plane is defined in the
        ObliquePlane ivar.
        """
        ...
    
    def SetProjectionNormalToOblique(self):
        """
        V.SetProjectionNormalToOblique()
        C++: void SetProjectionNormalToOblique()
        """
        ...
    
    def SetProjectionNormalToXAxis(self):
        """
        V.SetProjectionNormalToXAxis()
        C++: void SetProjectionNormalToXAxis()
        """
        ...
    
    def SetProjectionNormalToYAxis(self):
        """
        V.SetProjectionNormalToYAxis()
        C++: void SetProjectionNormalToYAxis()
        """
        ...
    
    def SetProjectionNormalToZAxis(self):
        """
        V.SetProjectionNormalToZAxis()
        C++: void SetProjectionNormalToZAxis()
        """
        ...
    
    def SetProjectionPosition(self, p_float):
        """
        V.SetProjectionPosition(float)
        C++: void SetProjectionPosition(double position)
        
        The position of the bounding plane from the origin along the
        normal. The origin and normal are defined in the oblique plane
        when the ProjectionNormal is Oblique. For the X, Y, and Z axes
        projection normals, the normal is the axis direction, and the
        origin is (0,0,0).
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *ren) override;
        
        Subclasses of vtkConstrainedPointHandleRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double eventPos[2]) override;
        
        Subclasses of vtkConstrainedPointHandleRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def Translate(self, float_tuple, float_tuple_1):
        """
        V.Translate((float, ...), (float, ...))
        C++: virtual void Translate(const double *p1, const double *p2)
        
        Translates world position by vector p1p2 projected on the
        constraint axis if any.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double eventPos[2]) override;
        
        Subclasses of vtkConstrainedPointHandleRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Oblique = ...
    XAxis = ...
    YAxis = ...
    ZAxis = ...
    __dict__ = ...
    __vtkname__ = ...


