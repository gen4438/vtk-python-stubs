"""
This type stub file was generated by pyright.
"""

from .vtkButtonRepresentation import vtkButtonRepresentation

class vtkTexturedButtonRepresentation(vtkButtonRepresentation):
    """
    vtkTexturedButtonRepresentation - defines a representation for a
    vtkButtonWidget
    
    Superclass: vtkButtonRepresentation
    
    This class implements one type of vtkButtonRepresentation. It changes
    the appearance of a user-provided polydata by assigning textures
    according to the current button state. It also provides highlighting
    (when hovering and selecting the button) by fiddling with the actor's
    property.
    
    To use this representation, always begin by specifying the number of
    button states.  Then provide a polydata (the polydata should have
    associated texture coordinates), and a list of textures cooresponding
    to the button states. Optionally, the HoveringProperty and
    SelectionProperty can be adjusted to obtain the appropriate
    appearance.
    
    This widget representation has two placement methods. The
    conventional PlaceWidget() method is used to locate the textured
    button inside of a user-specified bounding box (note that the button
    geometry is uniformly scaled to fit, thus two of the three dimensions
    can be "large" and the third used to perform the scaling). However
    this PlaceWidget() method will align the geometry within x-y-z
    oriented bounds. To further control the placement, use the additional
    PlaceWidget(scale,point,normal) method. This scales the geometry,
    places its center at the specified point position, and orients the
    geometry's z-direction parallel to the specified normal. This can be
    used to attach "sticky notes" or "sticky buttons" to the surface of
    objects.
    
    @sa
    vtkButtonWidget vtkButtonRepresentation vtkButtonSource
    vtkEllipticalButtonSource vtkRectangularButtonSource
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Provide the necessary methods to satisfy the
        vtkWidgetRepresentation API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        Provide the necessary methods to satisfy the
        vtkWidgetRepresentation API.
        """
        ...
    
    def FollowCameraOff(self):
        """
        V.FollowCameraOff()
        C++: virtual void FollowCameraOff()
        
        Specify whether the button should always face the camera. If
        enabled, the button rotates as the camera moves.
        """
        ...
    
    def FollowCameraOn(self):
        """
        V.FollowCameraOn()
        C++: virtual void FollowCameraOn()
        
        Specify whether the button should always face the camera. If
        enabled, the button rotates as the camera moves.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *pc) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def GetButtonGeometry(self):
        """
        V.GetButtonGeometry() -> vtkPolyData
        C++: vtkPolyData *GetButtonGeometry()
        
        Set/Get the polydata which defines the button geometry.
        """
        ...
    
    def GetButtonTexture(self, p_int):
        """
        V.GetButtonTexture(int) -> vtkImageData
        C++: vtkImageData *GetButtonTexture(int i)
        
        Add the ith texture corresponding to the ith button state. The
        parameter i should be (0 <= i < NumberOfStates).
        """
        ...
    
    def GetFollowCamera(self):
        """
        V.GetFollowCamera() -> int
        C++: virtual vtkTypeBool GetFollowCamera()
        
        Specify whether the button should always face the camera. If
        enabled, the button rotates as the camera moves.
        """
        ...
    
    def GetHoveringProperty(self):
        """
        V.GetHoveringProperty() -> vtkProperty
        C++: virtual vtkProperty *GetHoveringProperty()
        
        Specify the property to use when the hovering over the button.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of the class.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        Specify the property to use when the button is to appear "normal"
        i.e., the mouse pointer is not hovering or selecting the button.
        """
        ...
    
    def GetSelectingProperty(self):
        """
        V.GetSelectingProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectingProperty()
        
        Specify the property to use when selecting the button.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def Highlight(self, p_int):
        """
        V.Highlight(int)
        C++: void Highlight(int state) override;
        
        Provide the necessary methods to satisfy the
        vtkWidgetRepresentation API.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of the class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of the class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTexturedButtonRepresentation
        C++: vtkTexturedButtonRepresentation *NewInstance()
        
        Standard methods for instances of the class.
        """
        ...
    
    def PlaceWidget(self, p_float, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.PlaceWidget(float, [float, float, float], [float, float, float])
        C++: virtual void PlaceWidget(double scale, double point[3],
            double normal[3])
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        
        Alternative method for placing a button at a given position
        (defined by point[3]); at a given orientation (normal[3], where
        the z-axis of the button geometry is parallel to the normal); and
        scaled by the scale parameter. This method can bs used to attach "sticky
        notes" or "sticky buttons" to objects. A great way to attach
        interactive meta-data to 3D actors.
        """
        ...
    
    def RegisterPickers(self):
        """
        V.RegisterPickers()
        C++: void RegisterPickers() override;
        
        Register internal Pickers in the Picking Manager. Must be
        reimplemented by concrete widget representations to register
        their pickers.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTexturedButtonRepresentation
        C++: static vtkTexturedButtonRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of the class.
        """
        ...
    
    def SetButtonGeometry(self, vtkPolyData):
        """
        V.SetButtonGeometry(vtkPolyData)
        C++: void SetButtonGeometry(vtkPolyData *pd)
        
        Set/Get the polydata which defines the button geometry.
        """
        ...
    
    def SetButtonGeometryConnection(self, vtkAlgorithmOutput):
        """
        V.SetButtonGeometryConnection(vtkAlgorithmOutput)
        C++: void SetButtonGeometryConnection(
            vtkAlgorithmOutput *algOutput)
        
        Set/Get the polydata which defines the button geometry.
        """
        ...
    
    def SetButtonTexture(self, p_int, vtkImageData):
        """
        V.SetButtonTexture(int, vtkImageData)
        C++: void SetButtonTexture(int i, vtkImageData *image)
        
        Add the ith texture corresponding to the ith button state. The
        parameter i should be (0 <= i < NumberOfStates).
        """
        ...
    
    def SetFollowCamera(self, p_int):
        """
        V.SetFollowCamera(int)
        C++: virtual void SetFollowCamera(vtkTypeBool _arg)
        
        Specify whether the button should always face the camera. If
        enabled, the button rotates as the camera moves.
        """
        ...
    
    def SetHoveringProperty(self, vtkProperty):
        """
        V.SetHoveringProperty(vtkProperty)
        C++: virtual void SetHoveringProperty(vtkProperty *p)
        
        Specify the property to use when the hovering over the button.
        """
        ...
    
    def SetProperty(self, vtkProperty):
        """
        V.SetProperty(vtkProperty)
        C++: virtual void SetProperty(vtkProperty *p)
        
        Specify the property to use when the button is to appear "normal"
        i.e., the mouse pointer is not hovering or selecting the button.
        """
        ...
    
    def SetSelectingProperty(self, vtkProperty):
        """
        V.SetSelectingProperty(vtkProperty)
        C++: virtual void SetSelectingProperty(vtkProperty *p)
        
        Specify the property to use when selecting the button.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


