"""
This type stub file was generated by pyright.
"""

from .vtkBiDimensionalRepresentation import vtkBiDimensionalRepresentation

class vtkBiDimensionalRepresentation2D(vtkBiDimensionalRepresentation):
    """
    vtkBiDimensionalRepresentation2D - represent the
    vtkBiDimensionalWidget
    
    Superclass: vtkBiDimensionalRepresentation
    
    The vtkBiDimensionalRepresentation2D is used to represent the
    bi-dimensional measure in a 2D (overlay) context. This representation
    consists of two perpendicular lines defined by four
    vtkHandleRepresentations. The four handles can be independently
    manipulated consistent with the orthogonal constraint on the lines.
    (Note: the four points are referred to as Point1, Point2, Point3 and
    Point4. Point1 and Point2 define the first line; and Point3 and
    Point4 define the second orthogonal line.)
    
    To create this widget, you click to place the first two points. The
    third point is mirrored with the fourth point; when you place the
    third point (which is orthogonal to the lined defined by the first
    two points), the fourth point is dropped as well. After definition,
    the four points can be moved (in constrained fashion, preserving
    orthogonality). Further, the entire widget can be translated by
    grabbing the center point of the widget; each line can be moved along
    the other line; and the entire widget can be rotated around its
    center point.
    
    @sa
    vtkAngleWidget vtkHandleRepresentation vtkBiDimensionalRepresentation
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def GetLabelPosition(self):
        """
        V.GetLabelPosition() -> (float, ...)
        C++: double *GetLabelPosition() override;
        V.GetLabelPosition([float, float, float])
        C++: void GetLabelPosition(double pos[3]) override;
        
        Get the position of the widget's label in display coordinates.
        """
        ...
    
    def GetLabelText(self):
        """
        V.GetLabelText() -> string
        C++: char *GetLabelText() override;
        
        Get the text shown in the widget's label.
        """
        ...
    
    def GetLineProperty(self):
        """
        V.GetLineProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetLineProperty()
        
        Retrieve the property used to control the appearance of the two
        orthogonal lines.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetSelectedLineProperty(self):
        """
        V.GetSelectedLineProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetSelectedLineProperty()
        
        Retrieve the property used to control the appearance of the two
        orthogonal lines.
        """
        ...
    
    def GetTextProperty(self):
        """
        V.GetTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperty()
        
        Retrieve the property used to control the appearance of the text
        labels.
        """
        ...
    
    def GetWorldLabelPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetWorldLabelPosition([float, float, float])
        C++: void GetWorldLabelPosition(double pos[3]) override;
        
        Get the position of the widget's label in display coordinates.
        """
        ...
    
    def Highlight(self, p_int):
        """
        V.Highlight(int)
        C++: void Highlight(int highlightOn) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBiDimensionalRepresentation2D
        C++: vtkBiDimensionalRepresentation2D *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def Point2WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.Point2WidgetInteraction([float, float])
        C++: void Point2WidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def Point3WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.Point3WidgetInteraction([float, float])
        C++: void Point3WidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBiDimensionalRepresentation2D
        C++: static vtkBiDimensionalRepresentation2D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def StartWidgetDefinition(self, p_float=..., p_float=...):
        """
        V.StartWidgetDefinition([float, float])
        C++: void StartWidgetDefinition(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def StartWidgetManipulation(self, p_float=..., p_float=...):
        """
        V.StartWidgetManipulation([float, float])
        C++: void StartWidgetManipulation(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    NearP1 = ...
    NearP2 = ...
    NearP3 = ...
    NearP4 = ...
    OnCenter = ...
    OnL1Inner = ...
    OnL1Outer = ...
    OnL2Inner = ...
    OnL2Outer = ...
    Outside = ...
    __dict__ = ...
    __vtkname__ = ...


