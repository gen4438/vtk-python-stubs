"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkContourRepresentation(vtkWidgetRepresentation):
    """
    vtkContourRepresentation - represent the vtkContourWidget
    
    Superclass: vtkWidgetRepresentation
    
    The vtkContourRepresentation is a superclass for various types of
    representations for vtkContourWidget.
    
    @par Managing contour points: The classes
    vtkContourRepresentationNode, vtkContourRepresentationInternals, and
    vtkContourRepresentationPoint manage the data structure used to
    represent nodes and points on a contour. A contour may contain
    several nodes and several additional points. Nodes are usually the
    result of user-clicked points on the contour. Additional points are
    created between nodes to generate a smooth curve using some
    Interpolator -- see the method SetLineInterpolator.
    
    @par Managing contour points:\par The data structure stores both the
    world and display positions for every point. (This may seem like a
    duplication.) The default behaviour of this class is to use the
    WorldPosition to do all the math. Typically a point is added at a
    given display position. Its corresponding world position is computed
    using the point placer, and stored. Any query of the display position
    of a stored point is done via the Renderer, which computes the
    display position given a world position.
    
    @par Managing contour points:\par So why maintain the display
    position? Consider drawing a contour on a volume widget. You might
    want the contour to be located at a certain world position in the
    volume or you might want to be overlaid over the window like an
    Actor2D. The default behaviour of this class is to provide the former
    behaviour.
    
    @par Managing contour points:\par To achieve the latter behaviour,
    override the methods that return the display position (to return the
    set display position instead of computing it from the world
    positions) and the method BuildLines() to interpolate lines using
    their display positions instead of world positions.
    
    @sa
    vtkContourWidget
    """
    def ActivateNode(self, p_float=..., p_float=...):
        """
        V.ActivateNode([float, float]) -> int
        C++: virtual int ActivateNode(double displayPos[2])
        V.ActivateNode([int, int]) -> int
        C++: virtual int ActivateNode(int displayPos[2])
        V.ActivateNode(int, int) -> int
        C++: virtual int ActivateNode(int X, int Y)
        
        Given a display position, activate a node. The closest node
        within tolerance will be activated. If a node is activated, 1
        will be returned, otherwise 0 will be returned.
        """
        ...
    
    def AddIntermediatePointWorldPosition(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.AddIntermediatePointWorldPosition(int, [float, float, float])
            -> int
        C++: virtual int AddIntermediatePointWorldPosition(int n,
            double point[3])
        V.AddIntermediatePointWorldPosition(int, [float, float, float],
            int) -> int
        C++: virtual int AddIntermediatePointWorldPosition(int n,
            double point[3], vtkIdType ptId)
        
        Add an intermediate point between node n and n+1 (or n and 0 if n
        is the last node and the loop is closed). Returns 1 on success or
        0 if n is out of range.
        """
        ...
    
    def AddNodeAtDisplayPosition(self, p_float=..., p_float=...):
        """
        V.AddNodeAtDisplayPosition([float, float]) -> int
        C++: virtual int AddNodeAtDisplayPosition(double displayPos[2])
        V.AddNodeAtDisplayPosition([int, int]) -> int
        C++: virtual int AddNodeAtDisplayPosition(int displayPos[2])
        V.AddNodeAtDisplayPosition(int, int) -> int
        C++: virtual int AddNodeAtDisplayPosition(int X, int Y)
        
        Add a node at a specific display position. This will be converted
        into a world position according to the current constraints of the
        point placer. Return 0 if a point could not be added, 1
        otherwise.
        """
        ...
    
    def AddNodeAtWorldPosition(self, p_float, p_float_1, p_float_2):
        """
        V.AddNodeAtWorldPosition(float, float, float) -> int
        C++: virtual int AddNodeAtWorldPosition(double x, double y,
            double z)
        V.AddNodeAtWorldPosition([float, float, float]) -> int
        C++: virtual int AddNodeAtWorldPosition(double worldPos[3])
        V.AddNodeAtWorldPosition([float, float, float], [float, float,
            float, float, float, float, float, float, float]) -> int
        C++: virtual int AddNodeAtWorldPosition(double worldPos[3],
            double worldOrient[9])
        
        Add a node at a specific world position. Returns 0 if the node
        could not be added, 1 otherwise.
        """
        ...
    
    def AddNodeOnContour(self, p_int, p_int_1):
        """
        V.AddNodeOnContour(int, int) -> int
        C++: virtual int AddNodeOnContour(int X, int Y)
        
        Given a specific X, Y pixel location, add a new node on the
        contour at this location.
        """
        ...
    
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override = 0;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ClearAllNodes(self):
        """
        V.ClearAllNodes()
        C++: virtual void ClearAllNodes()
        
        Delete all nodes.
        """
        ...
    
    def ClosedLoopOff(self):
        """
        V.ClosedLoopOff()
        C++: virtual void ClosedLoopOff()
        
        Set / Get the ClosedLoop value. This ivar indicates whether the
        contour forms a closed loop.
        """
        ...
    
    def ClosedLoopOn(self):
        """
        V.ClosedLoopOn()
        C++: virtual void ClosedLoopOn()
        
        Set / Get the ClosedLoop value. This ivar indicates whether the
        contour forms a closed loop.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modified=0)
            override = 0;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def DeleteActiveNode(self):
        """
        V.DeleteActiveNode() -> int
        C++: virtual int DeleteActiveNode()
        
        Delete the active node. Returns 1 on success or 0 if the active
        node did not indicate a valid node.
        """
        ...
    
    def DeleteLastNode(self):
        """
        V.DeleteLastNode() -> int
        C++: virtual int DeleteLastNode()
        
        Delete the last node. Returns 1 on success or 0 if there were not
        any nodes.
        """
        ...
    
    def DeleteNthNode(self, p_int):
        """
        V.DeleteNthNode(int) -> int
        C++: virtual int DeleteNthNode(int n)
        
        Delete the nth node. Return 1 on success or 0 if n is out of
        range.
        """
        ...
    
    def GetActiveNodeDisplayPosition(self, p_float=..., p_float=...):
        """
        V.GetActiveNodeDisplayPosition([float, float]) -> int
        C++: virtual int GetActiveNodeDisplayPosition(double pos[2])
        
        Get the display position of the active node. Will return 0 if
        there is no active node, or 1 otherwise.
        """
        ...
    
    def GetActiveNodeSelected(self):
        """
        V.GetActiveNodeSelected() -> int
        C++: virtual int GetActiveNodeSelected()
        
        Set/Get whether the active or nth node is selected.
        """
        ...
    
    def GetActiveNodeWorldOrientation(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetActiveNodeWorldOrientation([float, float, float, float,
            float, float, float, float, float]) -> int
        C++: virtual int GetActiveNodeWorldOrientation(double orient[9])
        
        Get the world orientation of the active node. Will return 0 if
        there is no active node, or 1 otherwise.
        """
        ...
    
    def GetActiveNodeWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetActiveNodeWorldPosition([float, float, float]) -> int
        C++: virtual int GetActiveNodeWorldPosition(double pos[3])
        
        Get the world position of the active node. Will return 0 if there
        is no active node, or 1 otherwise.
        """
        ...
    
    def GetClosedLoop(self):
        """
        V.GetClosedLoop() -> int
        C++: virtual vtkTypeBool GetClosedLoop()
        
        Set / Get the ClosedLoop value. This ivar indicates whether the
        contour forms a closed loop.
        """
        ...
    
    def GetContourRepresentationAsPolyData(self):
        """
        V.GetContourRepresentationAsPolyData() -> vtkPolyData
        C++: virtual vtkPolyData *GetContourRepresentationAsPolyData()
        
        Get the points in this contour as a vtkPolyData.
        """
        ...
    
    def GetCurrentOperation(self):
        """
        V.GetCurrentOperation() -> int
        C++: virtual int GetCurrentOperation()
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def GetCurrentOperationMaxValue(self):
        """
        V.GetCurrentOperationMaxValue() -> int
        C++: virtual int GetCurrentOperationMaxValue()
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def GetCurrentOperationMinValue(self):
        """
        V.GetCurrentOperationMinValue() -> int
        C++: virtual int GetCurrentOperationMinValue()
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def GetIntermediatePointWorldPosition(self, p_int, p_int_1, p_float=..., p_float=..., p_float=...):
        """
        V.GetIntermediatePointWorldPosition(int, int, [float, float,
            float]) -> int
        C++: virtual int GetIntermediatePointWorldPosition(int n, int idx,
             double point[3])
        
        Get the world position of the intermediate point at index idx
        between nodes n and (n+1) (or n and 0 if n is the last node and
        the loop is closed). Returns 1 on success or 0 if n or idx are
        out of range.
        """
        ...
    
    def GetLineInterpolator(self):
        """
        V.GetLineInterpolator() -> vtkContourLineInterpolator
        C++: virtual vtkContourLineInterpolator *GetLineInterpolator()
        
        Set / Get the Line Interpolator. The line interpolator is
        responsible for generating the line segments connecting nodes.
        """
        ...
    
    def GetNodePolyData(self, vtkPolyData):
        """
        V.GetNodePolyData(vtkPolyData)
        C++: void GetNodePolyData(vtkPolyData *poly)
        
        Get the nodes and not the intermediate points in this contour as
        a vtkPolyData.
        """
        ...
    
    def GetNthNodeDisplayPosition(self, p_int, p_float=..., p_float=...):
        """
        V.GetNthNodeDisplayPosition(int, [float, float]) -> int
        C++: virtual int GetNthNodeDisplayPosition(int n, double pos[2])
        
        Get the nth node's display position. Will return 1 on success, or
        0 if there are not at least (n+1) nodes (0 based counting).
        """
        ...
    
    def GetNthNodeSelected(self, p_int):
        """
        V.GetNthNodeSelected(int) -> int
        C++: virtual int GetNthNodeSelected(int)
        
        Set/Get whether the active or nth node is selected.
        """
        ...
    
    def GetNthNodeSlope(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.GetNthNodeSlope(int, [float, float, float]) -> int
        C++: virtual int GetNthNodeSlope(int idx, double slope[3])
        
        Get the nth node's slope. Will return 1 on success, or 0 if there
        are not at least (n+1) nodes (0 based counting).
        """
        ...
    
    def GetNthNodeWorldOrientation(self, p_int, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetNthNodeWorldOrientation(int, [float, float, float, float,
            float, float, float, float, float]) -> int
        C++: virtual int GetNthNodeWorldOrientation(int n,
            double orient[9])
        
        Get the nth node's world orientation. Will return 1 on success,
        or 0 if there are not at least (n+1) nodes (0 based counting).
        """
        ...
    
    def GetNthNodeWorldPosition(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.GetNthNodeWorldPosition(int, [float, float, float]) -> int
        C++: virtual int GetNthNodeWorldPosition(int n, double pos[3])
        
        Get the nth node's world position. Will return 1 on success, or 0
        if there are not at least (n+1) nodes (0 based counting).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfIntermediatePoints(self, p_int):
        """
        V.GetNumberOfIntermediatePoints(int) -> int
        C++: virtual int GetNumberOfIntermediatePoints(int n)
        
        For a given node n, get the number of intermediate points between
        this node and the node at (n+1). If n is the last node and the
        loop is closed, this is the number of intermediate points between
        node n and node 0. 0 is returned if n is out of range.
        """
        ...
    
    def GetNumberOfNodes(self):
        """
        V.GetNumberOfNodes() -> int
        C++: virtual int GetNumberOfNodes()
        
        Get the number of nodes.
        """
        ...
    
    def GetPixelTolerance(self):
        """
        V.GetPixelTolerance() -> int
        C++: virtual int GetPixelTolerance()
        
        The tolerance to use when calculations are performed in display
        coordinates
        """
        ...
    
    def GetPixelToleranceMaxValue(self):
        """
        V.GetPixelToleranceMaxValue() -> int
        C++: virtual int GetPixelToleranceMaxValue()
        
        The tolerance to use when calculations are performed in display
        coordinates
        """
        ...
    
    def GetPixelToleranceMinValue(self):
        """
        V.GetPixelToleranceMinValue() -> int
        C++: virtual int GetPixelToleranceMinValue()
        
        The tolerance to use when calculations are performed in display
        coordinates
        """
        ...
    
    def GetPointPlacer(self):
        """
        V.GetPointPlacer() -> vtkPointPlacer
        C++: virtual vtkPointPlacer *GetPointPlacer()
        
        Set / get the Point Placer. The point placer is responsible for
        converting display coordinates into world coordinates according
        to some constraints, and for validating world positions.
        """
        ...
    
    def GetShowSelectedNodes(self):
        """
        V.GetShowSelectedNodes() -> int
        C++: virtual vtkTypeBool GetShowSelectedNodes()
        
        A flag to indicate whether to show the Selected nodes Default is
        to set it to false.
        """
        ...
    
    def GetWorldTolerance(self):
        """
        V.GetWorldTolerance() -> float
        C++: virtual double GetWorldTolerance()
        
        The tolerance to use when calculations are performed in world
        coordinates
        """
        ...
    
    def GetWorldToleranceMaxValue(self):
        """
        V.GetWorldToleranceMaxValue() -> float
        C++: virtual double GetWorldToleranceMaxValue()
        
        The tolerance to use when calculations are performed in world
        coordinates
        """
        ...
    
    def GetWorldToleranceMinValue(self):
        """
        V.GetWorldToleranceMinValue() -> float
        C++: virtual double GetWorldToleranceMinValue()
        
        The tolerance to use when calculations are performed in world
        coordinates
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override = 0;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContourRepresentation
        C++: vtkContourRepresentation *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override = 0;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override = 0;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override = 0;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override = 0;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContourRepresentation
        C++: static vtkContourRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetActiveNodeToDisplayPosition(self, p_float=..., p_float=...):
        """
        V.SetActiveNodeToDisplayPosition([float, float]) -> int
        C++: virtual int SetActiveNodeToDisplayPosition(double pos[2])
        V.SetActiveNodeToDisplayPosition([int, int]) -> int
        C++: virtual int SetActiveNodeToDisplayPosition(int pos[2])
        V.SetActiveNodeToDisplayPosition(int, int) -> int
        C++: virtual int SetActiveNodeToDisplayPosition(int X, int Y)
        
        Move the active node based on a specified display position. The
        display position will be converted into a world position. If the
        new position is not valid or there is no active node, a 0 will be
        returned. Otherwise, on success a 1 will be returned.
        """
        ...
    
    def SetActiveNodeToWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetActiveNodeToWorldPosition([float, float, float]) -> int
        C++: virtual int SetActiveNodeToWorldPosition(double pos[3])
        V.SetActiveNodeToWorldPosition([float, float, float], [float,
            float, float, float, float, float, float, float, float])
            -> int
        C++: virtual int SetActiveNodeToWorldPosition(double pos[3],
            double orient[9])
        
        Move the active node to a specified world position. Will return 0
        if there is no active node or the node could not be moved to that
        position. 1 will be returned on success.
        """
        ...
    
    def SetClosedLoop(self, p_int):
        """
        V.SetClosedLoop(int)
        C++: void SetClosedLoop(vtkTypeBool val)
        
        Set / Get the ClosedLoop value. This ivar indicates whether the
        contour forms a closed loop.
        """
        ...
    
    def SetCurrentOperation(self, p_int):
        """
        V.SetCurrentOperation(int)
        C++: virtual void SetCurrentOperation(int _arg)
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def SetCurrentOperationToInactive(self):
        """
        V.SetCurrentOperationToInactive()
        C++: void SetCurrentOperationToInactive()
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def SetCurrentOperationToScale(self):
        """
        V.SetCurrentOperationToScale()
        C++: void SetCurrentOperationToScale()
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def SetCurrentOperationToShift(self):
        """
        V.SetCurrentOperationToShift()
        C++: void SetCurrentOperationToShift()
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def SetCurrentOperationToTranslate(self):
        """
        V.SetCurrentOperationToTranslate()
        C++: void SetCurrentOperationToTranslate()
        
        Set / get the current operation. The widget is either inactive,
        or it is being translated.
        """
        ...
    
    def SetLineInterpolator(self, vtkContourLineInterpolator):
        """
        V.SetLineInterpolator(vtkContourLineInterpolator)
        C++: void SetLineInterpolator(vtkContourLineInterpolator *)
        
        Set / Get the Line Interpolator. The line interpolator is
        responsible for generating the line segments connecting nodes.
        """
        ...
    
    def SetNthNodeDisplayPosition(self, p_int, p_int_1, p_int_2):
        """
        V.SetNthNodeDisplayPosition(int, int, int) -> int
        C++: virtual int SetNthNodeDisplayPosition(int n, int X, int Y)
        V.SetNthNodeDisplayPosition(int, [int, int]) -> int
        C++: virtual int SetNthNodeDisplayPosition(int n, int pos[2])
        V.SetNthNodeDisplayPosition(int, [float, float]) -> int
        C++: virtual int SetNthNodeDisplayPosition(int n, double pos[2])
        
        Set the nth node's display position. Display position will be
        converted into world position according to the constraints of the
        point placer. Will return 1 on success, or 0 if there are not at
        least (n+1) nodes (0 based counting) or the world position is not
        valid.
        """
        ...
    
    def SetNthNodeSelected(self, p_int):
        """
        V.SetNthNodeSelected(int) -> int
        C++: virtual int SetNthNodeSelected(int)
        
        Set/Get whether the active or nth node is selected.
        """
        ...
    
    def SetNthNodeWorldPosition(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.SetNthNodeWorldPosition(int, [float, float, float]) -> int
        C++: virtual int SetNthNodeWorldPosition(int n, double pos[3])
        V.SetNthNodeWorldPosition(int, [float, float, float], [float,
            float, float, float, float, float, float, float, float])
            -> int
        C++: virtual int SetNthNodeWorldPosition(int n, double pos[3],
            double orient[9])
        
        Set the nth node's world position. Will return 1 on success, or 0
        if there are not at least (n+1) nodes (0 based counting) or the
        world position is not valid according to the point placer.
        """
        ...
    
    def SetPixelTolerance(self, p_int):
        """
        V.SetPixelTolerance(int)
        C++: virtual void SetPixelTolerance(int _arg)
        
        The tolerance to use when calculations are performed in display
        coordinates
        """
        ...
    
    def SetPointPlacer(self, vtkPointPlacer):
        """
        V.SetPointPlacer(vtkPointPlacer)
        C++: void SetPointPlacer(vtkPointPlacer *)
        
        Set / get the Point Placer. The point placer is responsible for
        converting display coordinates into world coordinates according
        to some constraints, and for validating world positions.
        """
        ...
    
    def SetRebuildLocator(self, bool):
        """
        V.SetRebuildLocator(bool)
        C++: virtual void SetRebuildLocator(bool _arg)
        """
        ...
    
    def SetShowSelectedNodes(self, p_int):
        """
        V.SetShowSelectedNodes(int)
        C++: virtual void SetShowSelectedNodes(vtkTypeBool)
        
        A flag to indicate whether to show the Selected nodes Default is
        to set it to false.
        """
        ...
    
    def SetWorldTolerance(self, p_float):
        """
        V.SetWorldTolerance(float)
        C++: virtual void SetWorldTolerance(double _arg)
        
        The tolerance to use when calculations are performed in world
        coordinates
        """
        ...
    
    def ShowSelectedNodesOff(self):
        """
        V.ShowSelectedNodesOff()
        C++: virtual void ShowSelectedNodesOff()
        
        A flag to indicate whether to show the Selected nodes Default is
        to set it to false.
        """
        ...
    
    def ShowSelectedNodesOn(self):
        """
        V.ShowSelectedNodesOn()
        C++: virtual void ShowSelectedNodesOn()
        
        A flag to indicate whether to show the Selected nodes Default is
        to set it to false.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double e[2]) override = 0;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ToggleActiveNodeSelected(self):
        """
        V.ToggleActiveNodeSelected() -> int
        C++: virtual int ToggleActiveNodeSelected()
        
        Set/Get whether the active or nth node is selected.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double e[2]) override = 0;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Inactive = ...
    Nearby = ...
    Outside = ...
    Scale = ...
    Shift = ...
    Translate = ...
    __dict__ = ...
    __vtkname__ = ...


