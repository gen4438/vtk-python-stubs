"""
This type stub file was generated by pyright.
"""

from .vtkContourRepresentation import vtkContourRepresentation

class vtkFocalPlaneContourRepresentation(vtkContourRepresentation):
    """
    vtkFocalPlaneContourRepresentation - represent a contour drawn on the
    focal plane.
    
    Superclass: vtkContourRepresentation
    
    The contour will stay on the focal plane irrespective of camera
    position/orientation changes. The class was written in order to be
    able to draw contours on a volume widget and have the contours
    overlaid on the focal plane in order to do contour segmentation. The
    superclass, vtkContourRepresentation handles contours that are drawn
    in actual world position co-ordinates, so they would rotate with the
    camera position/ orientation changes
    
    @sa
    vtkContourWidget vtkHandleRepresentation vtkContourRepresentation
    """
    def GetIntermediatePointDisplayPosition(self, p_int, p_int_1, p_float=..., p_float=..., p_float=...):
        """
        V.GetIntermediatePointDisplayPosition(int, int, [float, float,
            float]) -> int
        C++: virtual int GetIntermediatePointDisplayPosition(int n,
            int idx, double point[3])
        
        Get the world position of the intermediate point at index idx
        between nodes n and (n+1) (or n and 0 if n is the last node and
        the loop is closed). Returns 1 on success or 0 if n or idx are
        out of range.
        """
        ...
    
    def GetIntermediatePointWorldPosition(self, p_int, p_int_1, p_float=..., p_float=..., p_float=...):
        """
        V.GetIntermediatePointWorldPosition(int, int, [float, float,
            float]) -> int
        C++: int GetIntermediatePointWorldPosition(int n, int idx,
            double point[3]) override;
        
        Get the world position of the intermediate point at index idx
        between nodes n and (n+1) (or n and 0 if n is the last node and
        the loop is closed). Returns 1 on success or 0 if n or idx are
        out of range.
        """
        ...
    
    def GetNthNodeDisplayPosition(self, p_int, p_float=..., p_float=...):
        """
        V.GetNthNodeDisplayPosition(int, [float, float]) -> int
        C++: int GetNthNodeDisplayPosition(int n, double pos[2]) override;
        
        Get the nth node's display position. Will return 1 on success, or
        0 if there are not at least (n+1) nodes (0 based counting).
        """
        ...
    
    def GetNthNodeWorldPosition(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.GetNthNodeWorldPosition(int, [float, float, float]) -> int
        C++: int GetNthNodeWorldPosition(int n, double pos[3]) override;
        
        Get the nth node's world position. Will return 1 on success, or 0
        if there are not at least (n+1) nodes (0 based counting).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFocalPlaneContourRepresentation
        C++: vtkFocalPlaneContourRepresentation *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkFocalPlaneContourRepresentation
        C++: static vtkFocalPlaneContourRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def UpdateContour(self):
        """
        V.UpdateContour() -> int
        C++: int UpdateContour() override;
        
        The method must be called whenever the contour needs to be
        updated, usually from RenderOpaqueGeometry()
        """
        ...
    
    def UpdateContourWorldPositionsBasedOnDisplayPositions(self):
        """
        V.UpdateContourWorldPositionsBasedOnDisplayPositions()
        C++: virtual void UpdateContourWorldPositionsBasedOnDisplayPositions(
            )
        
        The class maintains its true contour locations based on display
        co-ords This method syncs the world co-ords data structure with
        the display co-ords.
        """
        ...
    
    def UpdateLines(self, p_int):
        """
        V.UpdateLines(int)
        C++: void UpdateLines(int index) override;
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


