"""
This type stub file was generated by pyright.
"""

from .vtkSliderRepresentation import vtkSliderRepresentation

class vtkSliderRepresentation3D(vtkSliderRepresentation):
    """
    vtkSliderRepresentation3D - provide the representation for a
    vtkSliderWidget with a 3D skin
    
    Superclass: vtkSliderRepresentation
    
    This class is used to represent and render a vtkSliderWidget. To use
    this class, you must at a minimum specify the end points of the
    slider. Optional instance variable can be used to modify the
    appearance of the widget.
    
    @sa
    vtkSliderWidget
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Methods to interface with the vtkSliderWidget.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def GetCapProperty(self):
        """
        V.GetCapProperty() -> vtkProperty
        C++: virtual vtkProperty *GetCapProperty()
        
        Get the properties for the tube and end caps.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override GetMTime to include point coordinates
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def GetPoint1Coordinate(self):
        """
        V.GetPoint1Coordinate() -> vtkCoordinate
        C++: vtkCoordinate *GetPoint1Coordinate()
        
        Position the first end point of the slider. Note that this point
        is an instance of vtkCoordinate, meaning that Point 1 can be
        specified in a variety of coordinate systems, and can even be
        relative to another point. To set the point, you'll want to get
        the Point1Coordinate and then invoke the necessary methods to put
        it into the correct coordinate system and set the correct initial
        value.
        """
        ...
    
    def GetPoint2Coordinate(self):
        """
        V.GetPoint2Coordinate() -> vtkCoordinate
        C++: vtkCoordinate *GetPoint2Coordinate()
        
        Position the second end point of the slider. Note that this point
        is an instance of vtkCoordinate, meaning that Point 1 can be
        specified in a variety of coordinate systems, and can even be
        relative to another point. To set the point, you'll want to get
        the Point2Coordinate and then invoke the necessary methods to put
        it into the correct coordinate system and set the correct initial
        value.
        """
        ...
    
    def GetRotation(self):
        """
        V.GetRotation() -> float
        C++: virtual double GetRotation()
        
        Set the rotation of the slider widget around the axis of the
        widget. This is used to control which way the widget is initially
        oriented. (This is especially important for the label and title.)
        """
        ...
    
    def GetSelectedProperty(self):
        """
        V.GetSelectedProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedProperty()
        
        Get the selection property. This property is used to modify the
        appearance of selected objects (e.g., the slider).
        """
        ...
    
    def GetSliderProperty(self):
        """
        V.GetSliderProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSliderProperty()
        
        Get the slider properties. The properties of the slider when
        selected and unselected can be manipulated.
        """
        ...
    
    def GetSliderShape(self):
        """
        V.GetSliderShape() -> int
        C++: virtual int GetSliderShape()
        
        Specify whether to use a sphere or cylinder slider shape. By
        default, a sphere shape is used.
        """
        ...
    
    def GetSliderShapeMaxValue(self):
        """
        V.GetSliderShapeMaxValue() -> int
        C++: virtual int GetSliderShapeMaxValue()
        
        Specify whether to use a sphere or cylinder slider shape. By
        default, a sphere shape is used.
        """
        ...
    
    def GetSliderShapeMinValue(self):
        """
        V.GetSliderShapeMinValue() -> int
        C++: virtual int GetSliderShapeMinValue()
        
        Specify whether to use a sphere or cylinder slider shape. By
        default, a sphere shape is used.
        """
        ...
    
    def GetTitleText(self):
        """
        V.GetTitleText() -> string
        C++: const char *GetTitleText() override;
        
        Specify the title text for this widget. If the value is not set,
        or set to the empty string "", then the title text is not
        displayed.
        """
        ...
    
    def GetTubeProperty(self):
        """
        V.GetTubeProperty() -> vtkProperty
        C++: virtual vtkProperty *GetTubeProperty()
        
        Get the properties for the tube and end caps.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def Highlight(self, p_int):
        """
        V.Highlight(int)
        C++: void Highlight(int) override;
        
        Methods to interface with the vtkSliderWidget.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for the class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSliderRepresentation3D
        C++: vtkSliderRepresentation3D *NewInstance()
        
        Standard methods for the class.
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        
        Methods to interface with the vtkSliderWidget.
        """
        ...
    
    def RegisterPickers(self):
        """
        V.RegisterPickers()
        C++: void RegisterPickers() override;
        
        Register internal Pickers in the Picking Manager. Must be
        reimplemented by concrete widget representations to register
        their pickers.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSliderRepresentation3D
        C++: static vtkSliderRepresentation3D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for the class.
        """
        ...
    
    def SetPoint1InWorldCoordinates(self, p_float, p_float_1, p_float_2):
        """
        V.SetPoint1InWorldCoordinates(float, float, float)
        C++: void SetPoint1InWorldCoordinates(double x, double y,
            double z)
        
        Position the first end point of the slider. Note that this point
        is an instance of vtkCoordinate, meaning that Point 1 can be
        specified in a variety of coordinate systems, and can even be
        relative to another point. To set the point, you'll want to get
        the Point1Coordinate and then invoke the necessary methods to put
        it into the correct coordinate system and set the correct initial
        value.
        """
        ...
    
    def SetPoint2InWorldCoordinates(self, p_float, p_float_1, p_float_2):
        """
        V.SetPoint2InWorldCoordinates(float, float, float)
        C++: void SetPoint2InWorldCoordinates(double x, double y,
            double z)
        
        Position the second end point of the slider. Note that this point
        is an instance of vtkCoordinate, meaning that Point 1 can be
        specified in a variety of coordinate systems, and can even be
        relative to another point. To set the point, you'll want to get
        the Point2Coordinate and then invoke the necessary methods to put
        it into the correct coordinate system and set the correct initial
        value.
        """
        ...
    
    def SetRotation(self, p_float):
        """
        V.SetRotation(float)
        C++: virtual void SetRotation(double _arg)
        
        Set the rotation of the slider widget around the axis of the
        widget. This is used to control which way the widget is initially
        oriented. (This is especially important for the label and title.)
        """
        ...
    
    def SetSliderShape(self, p_int):
        """
        V.SetSliderShape(int)
        C++: virtual void SetSliderShape(int _arg)
        
        Specify whether to use a sphere or cylinder slider shape. By
        default, a sphere shape is used.
        """
        ...
    
    def SetSliderShapeToCylinder(self):
        """
        V.SetSliderShapeToCylinder()
        C++: void SetSliderShapeToCylinder()
        
        Specify whether to use a sphere or cylinder slider shape. By
        default, a sphere shape is used.
        """
        ...
    
    def SetSliderShapeToSphere(self):
        """
        V.SetSliderShapeToSphere()
        C++: void SetSliderShapeToSphere()
        
        Specify whether to use a sphere or cylinder slider shape. By
        default, a sphere shape is used.
        """
        ...
    
    def SetTitleText(self, string):
        """
        V.SetTitleText(string)
        C++: void SetTitleText(const char *) override;
        
        Specify the title text for this widget. If the value is not set,
        or set to the empty string "", then the title text is not
        displayed.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double eventPos[2]) override;
        
        Methods to interface with the vtkSliderWidget.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double newEventPos[2]) override;
        
        Methods to interface with the vtkSliderWidget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


