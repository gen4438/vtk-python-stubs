"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkSliderWidget(vtkAbstractWidget):
    """
    vtkSliderWidget - set a value by manipulating a slider
    
    Superclass: vtkAbstractWidget
    
    The vtkSliderWidget is used to set a scalar value in an application. 
    This class assumes that a slider is moved along a 1D parameter space
    (e.g., a spherical bead that can be moved along a tube).  Moving the
    slider modifies the value of the widget, which can be used to set
    parameters on other objects. Note that the actual appearance of the
    widget depends on the specific representation for the widget.
    
    To use this widget, set the widget representation. The representation
    is assumed to consist of a tube, two end caps, and a slider (the
    details may vary depending on the particulars of the representation).
    Then in the representation you will typically set minimum and maximum
    value, as well as the current value. The position of the slider must
    also be set, as well as various properties.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    If the slider bead is selected:
      LeftButtonPressEvent - select slider (if on slider)
      LeftButtonReleaseEvent - release slider (if selected)
      MouseMoveEvent - move slider If the end caps or slider tube are
    selected:
      LeftButtonPressEvent - move (or animate) to cap or point on tube; 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkSliderWidget's widget events:
    
    
      vtkWidgetEvent::Select -- some part of the widget has been selected
      vtkWidgetEvent::EndSelect -- the selection process has completed
      vtkWidgetEvent::Move -- a request for slider motion has been
    invoked 
    
    @par Event Bindings: In turn, when these widget events are processed,
    the vtkSliderWidget invokes the following VTK events on itself (which
    observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (on vtkWidgetEvent::Select)
      vtkCommand::EndInteractionEvent (on vtkWidgetEvent::EndSelect)
      vtkCommand::InteractionEvent (on vtkWidgetEvent::Move)
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetAnimationMode(self):
        """
        V.GetAnimationMode() -> int
        C++: virtual int GetAnimationMode()
        
        Control the behavior of the slider when selecting the tube or
        caps. If Jump, then selecting the tube, left cap, or right cap
        causes the slider to jump to the selection point. If the mode is
        Animate, the slider moves towards the selection point in
        NumberOfAnimationSteps number of steps. If Off, then the slider
        does not move.
        """
        ...
    
    def GetAnimationModeMaxValue(self):
        """
        V.GetAnimationModeMaxValue() -> int
        C++: virtual int GetAnimationModeMaxValue()
        
        Control the behavior of the slider when selecting the tube or
        caps. If Jump, then selecting the tube, left cap, or right cap
        causes the slider to jump to the selection point. If the mode is
        Animate, the slider moves towards the selection point in
        NumberOfAnimationSteps number of steps. If Off, then the slider
        does not move.
        """
        ...
    
    def GetAnimationModeMinValue(self):
        """
        V.GetAnimationModeMinValue() -> int
        C++: virtual int GetAnimationModeMinValue()
        
        Control the behavior of the slider when selecting the tube or
        caps. If Jump, then selecting the tube, left cap, or right cap
        causes the slider to jump to the selection point. If the mode is
        Animate, the slider moves towards the selection point in
        NumberOfAnimationSteps number of steps. If Off, then the slider
        does not move.
        """
        ...
    
    def GetNumberOfAnimationSteps(self):
        """
        V.GetNumberOfAnimationSteps() -> int
        C++: virtual int GetNumberOfAnimationSteps()
        
        Specify the number of animation steps to take if the animation
        mode is set to animate.
        """
        ...
    
    def GetNumberOfAnimationStepsMaxValue(self):
        """
        V.GetNumberOfAnimationStepsMaxValue() -> int
        C++: virtual int GetNumberOfAnimationStepsMaxValue()
        
        Specify the number of animation steps to take if the animation
        mode is set to animate.
        """
        ...
    
    def GetNumberOfAnimationStepsMinValue(self):
        """
        V.GetNumberOfAnimationStepsMinValue() -> int
        C++: virtual int GetNumberOfAnimationStepsMinValue()
        
        Specify the number of animation steps to take if the animation
        mode is set to animate.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard macros.
        """
        ...
    
    def GetSliderRepresentation(self):
        """
        V.GetSliderRepresentation() -> vtkSliderRepresentation
        C++: vtkSliderRepresentation *GetSliderRepresentation()
        
        Return the representation as a vtkSliderRepresentation.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard macros.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSliderWidget
        C++: vtkSliderWidget *NewInstance()
        
        Standard macros.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSliderWidget
        C++: static vtkSliderWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard macros.
        """
        ...
    
    def SetAnimationMode(self, p_int):
        """
        V.SetAnimationMode(int)
        C++: virtual void SetAnimationMode(int _arg)
        
        Control the behavior of the slider when selecting the tube or
        caps. If Jump, then selecting the tube, left cap, or right cap
        causes the slider to jump to the selection point. If the mode is
        Animate, the slider moves towards the selection point in
        NumberOfAnimationSteps number of steps. If Off, then the slider
        does not move.
        """
        ...
    
    def SetAnimationModeToAnimate(self):
        """
        V.SetAnimationModeToAnimate()
        C++: void SetAnimationModeToAnimate()
        
        Control the behavior of the slider when selecting the tube or
        caps. If Jump, then selecting the tube, left cap, or right cap
        causes the slider to jump to the selection point. If the mode is
        Animate, the slider moves towards the selection point in
        NumberOfAnimationSteps number of steps. If Off, then the slider
        does not move.
        """
        ...
    
    def SetAnimationModeToJump(self):
        """
        V.SetAnimationModeToJump()
        C++: void SetAnimationModeToJump()
        
        Control the behavior of the slider when selecting the tube or
        caps. If Jump, then selecting the tube, left cap, or right cap
        causes the slider to jump to the selection point. If the mode is
        Animate, the slider moves towards the selection point in
        NumberOfAnimationSteps number of steps. If Off, then the slider
        does not move.
        """
        ...
    
    def SetAnimationModeToOff(self):
        """
        V.SetAnimationModeToOff()
        C++: void SetAnimationModeToOff()
        
        Control the behavior of the slider when selecting the tube or
        caps. If Jump, then selecting the tube, left cap, or right cap
        causes the slider to jump to the selection point. If the mode is
        Animate, the slider moves towards the selection point in
        NumberOfAnimationSteps number of steps. If Off, then the slider
        does not move.
        """
        ...
    
    def SetNumberOfAnimationSteps(self, p_int):
        """
        V.SetNumberOfAnimationSteps(int)
        C++: virtual void SetNumberOfAnimationSteps(int _arg)
        
        Specify the number of animation steps to take if the animation
        mode is set to animate.
        """
        ...
    
    def SetRepresentation(self, vtkSliderRepresentation):
        """
        V.SetRepresentation(vtkSliderRepresentation)
        C++: void SetRepresentation(vtkSliderRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


