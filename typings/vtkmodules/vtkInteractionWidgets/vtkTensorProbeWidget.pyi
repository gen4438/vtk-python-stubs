"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkTensorProbeWidget(vtkAbstractWidget):
    """
    vtkTensorProbeWidget - a widget to probe tensors on a polyline
    
    Superclass: vtkAbstractWidget
    
    The class is used to probe tensors on a trajectory. The
    representation (vtkTensorProbeRepresentation) is free to choose its
    own method of rendering the tensors. For instance
    vtkEllipsoidTensorProbeRepresentation renders the tensors as
    ellipsoids. The interactions of the widget are controlled by the left
    mouse button. A left click on the tensor selects it. It can dragged
    around the trajectory to probe the tensors on it.
    
    For instance dragging the ellipsoid around with
    vtkEllipsoidTensorProbeRepresentation will manifest itself with the
    ellipsoid shape changing as needed along the trajectory.
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        See vtkWidgetRepresentation for details.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK class macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK class macros.
        """
        ...
    
    def GetTensorProbeRepresentation(self):
        """
        V.GetTensorProbeRepresentation() -> vtkTensorProbeRepresentation
        C++: vtkTensorProbeRepresentation *GetTensorProbeRepresentation()
        
        Return the representation as a vtkTensorProbeRepresentation.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK class macros.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK class macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTensorProbeWidget
        C++: vtkTensorProbeWidget *NewInstance()
        
        Standard VTK class macros.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTensorProbeWidget
        C++: static vtkTensorProbeWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard VTK class macros.
        """
        ...
    
    def SetRepresentation(self, vtkTensorProbeRepresentation):
        """
        V.SetRepresentation(vtkTensorProbeRepresentation)
        C++: void SetRepresentation(vtkTensorProbeRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


