"""
This type stub file was generated by pyright.
"""

from .vtkPolygonalHandleRepresentation3D import vtkPolygonalHandleRepresentation3D

class vtkFixedSizeHandleRepresentation3D(vtkPolygonalHandleRepresentation3D):
    """
    vtkFixedSizeHandleRepresentation3D - no description provided.
    
    Superclass: vtkPolygonalHandleRepresentation3D
    """
    def GetHandleSizeInPixels(self):
        """
        V.GetHandleSizeInPixels() -> float
        C++: virtual double GetHandleSizeInPixels()
        
        Set/Get the required handle size in pixels. Defaults to a width
        of 10 pixels.
        """
        ...
    
    def GetHandleSizeToleranceInPixels(self):
        """
        V.GetHandleSizeToleranceInPixels() -> float
        C++: virtual double GetHandleSizeToleranceInPixels()
        
        Specify the acceptable handle size tolerance. During each render,
        the handle 3D source will be updated to automatically match a
        display size as specified by HandleSizeInPixels. This update will
        be done if the handle size is larger than a tolerance. Default
        value of this tolerance is half a pixel.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard vtk methods
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard vtk methods
        """
        ...
    
    def GetSphereSource(self):
        """
        V.GetSphereSource() -> vtkSphereSource
        C++: virtual vtkSphereSource *GetSphereSource()
        
        Get the object used to render the spherical handle marker
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard vtk methods
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard vtk methods
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFixedSizeHandleRepresentation3D
        C++: vtkFixedSizeHandleRepresentation3D *NewInstance()
        
        Standard vtk methods
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkFixedSizeHandleRepresentation3D
        C++: static vtkFixedSizeHandleRepresentation3D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard vtk methods
        """
        ...
    
    def SetHandleSizeInPixels(self, p_float):
        """
        V.SetHandleSizeInPixels(float)
        C++: virtual void SetHandleSizeInPixels(double _arg)
        
        Set/Get the required handle size in pixels. Defaults to a width
        of 10 pixels.
        """
        ...
    
    def SetHandleSizeToleranceInPixels(self, p_float):
        """
        V.SetHandleSizeToleranceInPixels(float)
        C++: virtual void SetHandleSizeToleranceInPixels(double _arg)
        
        Specify the acceptable handle size tolerance. During each render,
        the handle 3D source will be updated to automatically match a
        display size as specified by HandleSizeInPixels. This update will
        be done if the handle size is larger than a tolerance. Default
        value of this tolerance is half a pixel.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


