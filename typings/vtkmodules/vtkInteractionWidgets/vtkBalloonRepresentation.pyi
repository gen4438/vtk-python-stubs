"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkBalloonRepresentation(vtkWidgetRepresentation):
    """
    vtkBalloonRepresentation - represent the vtkBalloonWidget
    
    Superclass: vtkWidgetRepresentation
    
    The vtkBalloonRepresentation is used to represent the
    vtkBalloonWidget. This representation is defined by two items: a text
    string and an image. At least one of these two items must be defined,
    but it is allowable to specify both, or just an image or just text.
    If both the text and image are specified, then methods are available
    for positioning the text and image with respect to each other.
    
    The balloon representation consists of three parts: text, a
    rectangular frame behind the text, and an image placed next to the
    frame and sized to match the frame.
    
    The size of the balloon is ultimately controlled by the text
    properties (i.e., font size). This representation uses a layout
    policy as follows.
    
    If there is just text and no image, then the text properties and
    padding are used to control the size of the balloon.
    
    If there is just an image and no text, then the ImageSize[2] member
    is used to control the image size. (The image will fit into this
    rectangle, but will not necessarily fill the whole rectangle, i.e.,
    the image is not stretched).
    
    If there is text and an image, the following approach ia used. First,
    based on the font size and other related properties (e.g., padding),
    determine the size of the frame. Second, depending on the layout of
    the image and text frame, control the size of the neighboring image
    (since the frame and image share a common edge). However, if this
    results in an image that is smaller than ImageSize[2], then the image
    size will be set to ImageSize[2] and the frame will be adjusted
    accordingly. The text is always placed in the center of the frame if
    the frame is resized.
    
    @sa
    vtkBalloonWidget
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def EndWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.EndWidgetInteraction([float, float])
        C++: void EndWidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def GetBalloonImage(self):
        """
        V.GetBalloonImage() -> vtkImageData
        C++: virtual vtkImageData *GetBalloonImage()
        
        Specify/retrieve the image to display in the balloon.
        """
        ...
    
    def GetBalloonLayout(self):
        """
        V.GetBalloonLayout() -> int
        C++: virtual int GetBalloonLayout()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def GetBalloonText(self):
        """
        V.GetBalloonText() -> string
        C++: virtual char *GetBalloonText()
        
        Specify/retrieve the text to display in the balloon.
        """
        ...
    
    def GetFrameProperty(self):
        """
        V.GetFrameProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetFrameProperty()
        
        Set/get the frame property (relevant only if text is shown). The
        frame lies behind the text.
        """
        ...
    
    def GetImageProperty(self):
        """
        V.GetImageProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetImageProperty()
        
        Set/get the image property (relevant only if an image is shown).
        """
        ...
    
    def GetImageSize(self):
        """
        V.GetImageSize() -> (int, int)
        C++: virtual int *GetImageSize()
        
        Specify the minimum size for the image. Note that this is a
        bounding rectangle, the image will fit inside of it. However, if
        the balloon consists of text plus an image, then the image may be
        bigger than ImageSize[2] to fit into the balloon frame.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetOffset(self):
        """
        V.GetOffset() -> (int, int)
        C++: virtual int *GetOffset()
        
        Set/Get the offset from the mouse pointer from which to place the
        balloon. The representation will try and honor this offset unless
        there is a collision with the side of the renderer, in which case
        the balloon will be repositioned to lie within the rendering
        window.
        """
        ...
    
    def GetPadding(self):
        """
        V.GetPadding() -> int
        C++: virtual int GetPadding()
        
        Set/Get the padding (in pixels) that is used between the text and
        the frame.
        """
        ...
    
    def GetPaddingMaxValue(self):
        """
        V.GetPaddingMaxValue() -> int
        C++: virtual int GetPaddingMaxValue()
        
        Set/Get the padding (in pixels) that is used between the text and
        the frame.
        """
        ...
    
    def GetPaddingMinValue(self):
        """
        V.GetPaddingMinValue() -> int
        C++: virtual int GetPaddingMinValue()
        
        Set/Get the padding (in pixels) that is used between the text and
        the frame.
        """
        ...
    
    def GetTextProperty(self):
        """
        V.GetTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperty()
        
        Set/get the text property (relevant only if text is shown).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBalloonRepresentation
        C++: vtkBalloonRepresentation *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBalloonRepresentation
        C++: static vtkBalloonRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetBalloonImage(self, vtkImageData):
        """
        V.SetBalloonImage(vtkImageData)
        C++: virtual void SetBalloonImage(vtkImageData *img)
        
        Specify/retrieve the image to display in the balloon.
        """
        ...
    
    def SetBalloonLayout(self, p_int):
        """
        V.SetBalloonLayout(int)
        C++: virtual void SetBalloonLayout(int _arg)
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToImageBottom(self):
        """
        V.SetBalloonLayoutToImageBottom()
        C++: void SetBalloonLayoutToImageBottom()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToImageLeft(self):
        """
        V.SetBalloonLayoutToImageLeft()
        C++: void SetBalloonLayoutToImageLeft()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToImageRight(self):
        """
        V.SetBalloonLayoutToImageRight()
        C++: void SetBalloonLayoutToImageRight()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToImageTop(self):
        """
        V.SetBalloonLayoutToImageTop()
        C++: void SetBalloonLayoutToImageTop()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToTextBottom(self):
        """
        V.SetBalloonLayoutToTextBottom()
        C++: void SetBalloonLayoutToTextBottom()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToTextLeft(self):
        """
        V.SetBalloonLayoutToTextLeft()
        C++: void SetBalloonLayoutToTextLeft()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToTextRight(self):
        """
        V.SetBalloonLayoutToTextRight()
        C++: void SetBalloonLayoutToTextRight()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonLayoutToTextTop(self):
        """
        V.SetBalloonLayoutToTextTop()
        C++: void SetBalloonLayoutToTextTop()
        
        Specify the layout of the image and text within the balloon. Note
        that there are reduncies in these methods, for example
        SetBalloonLayoutToImageLeft() results in the same effect as
        SetBalloonLayoutToTextRight(). If only text is specified, or only
        an image is specified, then it doesn't matter how the layout is
        specified.
        """
        ...
    
    def SetBalloonText(self, string):
        """
        V.SetBalloonText(string)
        C++: virtual void SetBalloonText(const char *_arg)
        
        Specify/retrieve the text to display in the balloon.
        """
        ...
    
    def SetFrameProperty(self, vtkProperty2D):
        """
        V.SetFrameProperty(vtkProperty2D)
        C++: virtual void SetFrameProperty(vtkProperty2D *p)
        
        Set/get the frame property (relevant only if text is shown). The
        frame lies behind the text.
        """
        ...
    
    def SetImageProperty(self, vtkProperty2D):
        """
        V.SetImageProperty(vtkProperty2D)
        C++: virtual void SetImageProperty(vtkProperty2D *p)
        
        Set/get the image property (relevant only if an image is shown).
        """
        ...
    
    def SetImageSize(self, p_int, p_int_1):
        """
        V.SetImageSize(int, int)
        C++: virtual void SetImageSize(int _arg1, int _arg2)
        V.SetImageSize((int, int))
        C++: void SetImageSize(const int _arg[2])
        
        Specify the minimum size for the image. Note that this is a
        bounding rectangle, the image will fit inside of it. However, if
        the balloon consists of text plus an image, then the image may be
        bigger than ImageSize[2] to fit into the balloon frame.
        """
        ...
    
    def SetOffset(self, p_int, p_int_1):
        """
        V.SetOffset(int, int)
        C++: virtual void SetOffset(int _arg1, int _arg2)
        V.SetOffset((int, int))
        C++: void SetOffset(const int _arg[2])
        
        Set/Get the offset from the mouse pointer from which to place the
        balloon. The representation will try and honor this offset unless
        there is a collision with the side of the renderer, in which case
        the balloon will be repositioned to lie within the rendering
        window.
        """
        ...
    
    def SetPadding(self, p_int):
        """
        V.SetPadding(int)
        C++: virtual void SetPadding(int _arg)
        
        Set/Get the padding (in pixels) that is used between the text and
        the frame.
        """
        ...
    
    def SetTextProperty(self, vtkTextProperty):
        """
        V.SetTextProperty(vtkTextProperty)
        C++: virtual void SetTextProperty(vtkTextProperty *p)
        
        Set/get the text property (relevant only if text is shown).
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ImageBottom = ...
    ImageLeft = ...
    ImageRight = ...
    ImageTop = ...
    OnImage = ...
    OnText = ...
    Outside = ...
    _InteractionState = ...
    __dict__ = ...
    __vtkname__ = ...


