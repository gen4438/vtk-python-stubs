"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkWidgetSet(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkWidgetSet - Synchronize a collection on vtkWidgets drawn on
    different renderwindows using the
    
    Superclass: vtkObject
    
    Callback - Dispatch Action mechanism.
    
    The class synchronizes a set of vtkAbstractWidget(s). Widgets
    typically invoke "Actions" that drive the geometry/behaviour of their
    representations in response to interactor events. Interactor
    interactions on a render window are mapped into "Callbacks" by the
    widget, from which "Actions" are dispatched to the entire set. This
    architecture allows us to tie widgets existing in different render
    windows together. For instance a HandleWidget might exist on the
    sagittal view. Moving it around should update the representations of
    the corresponding handle widget that lies on the axial and coronal
    and volume views as well.
    
    @par User API: A user would use this class as follows.vtkWidgetSet
    *set = vtkWidgetSet::New();
    vtkParallelopipedWidget *w1 = vtkParallelopipedWidget::New();
    set->AddWidget(w1);
    w1->SetInteractor(axialRenderWindow->GetInteractor());
    vtkParallelopipedWidget *w2 = vtkParallelopipedWidget::New();
    set->AddWidget(w2);
    w2->SetInteractor(coronalRenderWindow->GetInteractor());
    vtkParallelopipedWidget *w3 = vtkParallelopipedWidget::New();
    set->AddWidget(w3);
    w3->SetInteractor(sagittalRenderWindow->GetInteractor());
    set->SetEnabled(1);
    
    @par Motivation: The motivation for this class is really to provide a
    usable API to tie together multiple widgets of the same kind. To
    enable this, subclasses of vtkAbstractWidget, must be written as
    follows:
      They will generally have callback methods mapped to some user
    interaction such
    as:this->CallbackMapper->SetCallbackMethod(vtkCommand::LeftButtonPress
    Event,
                            vtkEvent::NoModifier, 0, 0, nullptr,
                            vtkPaintbrushWidget::BeginDrawStrokeEvent,
                            this,
    vtkPaintbrushWidget::BeginDrawCallback);
    
      The callback invoked when the left button is pressed looks
    like:void vtkPaintbrushWidget::BeginDrawCallback(vtkAbstractWidget
    *w)
    {
      vtkPaintbrushWidget *self = vtkPaintbrushWidget::SafeDownCast(w);
      self->WidgetSet->DispatchAction(self,
    &vtkPaintbrushWidget::BeginDrawAction);
    }
    
      The actual code for handling the drawing is written in the
    BeginDrawAction method.void vtkPaintbrushWidget::BeginDrawAction(
    vtkPaintbrushWidget *dispatcher)
    {
    // Do stuff to draw...
    // Here dispatcher is the widget that was interacted with, the one
    that
    // dispatched an action to all the other widgets in its group. You
    may, if
    // necessary find it helpful to get parameters from it.
    //   For instance for a ResizeAction:
    //     if (this != dispatcher)
    //       {
    //       double *newsize =
    dispatcher->GetRepresentation()->GetSize();
    //       this->WidgetRep->SetSize(newsize);
    //       }
    //     else
    //       {
    //       this->WidgetRep->IncrementSizeByDelta();
    //       }
    }
    
    @warning
    Actions are always dispatched first to the activeWidget, the one
    calling the set, and then to the other widgets in the set.
    """
    def AddWidget(self, vtkAbstractWidget):
        """
        V.AddWidget(vtkAbstractWidget)
        C++: void AddWidget(vtkAbstractWidget *)
        
        Add a widget to the set.
        """
        ...
    
    def EnabledOff(self):
        """
        V.EnabledOff()
        C++: virtual void EnabledOff()
        
        Method for activating and deactivating all widgets in the group.
        """
        ...
    
    def EnabledOn(self):
        """
        V.EnabledOn()
        C++: virtual void EnabledOn()
        
        Method for activating and deactivating all widgets in the group.
        """
        ...
    
    def GetNthWidget(self, p_int):
        """
        V.GetNthWidget(int) -> vtkAbstractWidget
        C++: vtkAbstractWidget *GetNthWidget(unsigned int)
        
        Get the Nth widget in the set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetNumberOfWidgets(self):
        """
        V.GetNumberOfWidgets() -> int
        C++: unsigned int GetNumberOfWidgets()
        
        Get number of widgets in the set.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWidgetSet
        C++: vtkWidgetSet *NewInstance()
        
        Standard methods for a VTK class.
        """
        ...
    
    def RemoveWidget(self, vtkAbstractWidget):
        """
        V.RemoveWidget(vtkAbstractWidget)
        C++: void RemoveWidget(vtkAbstractWidget *)
        
        Remove a widget from the set
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWidgetSet
        C++: static vtkWidgetSet *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for a VTK class.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: virtual void SetEnabled(vtkTypeBool)
        
        Method for activating and deactivating all widgets in the group.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


