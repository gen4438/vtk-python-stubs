"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkLineRepresentation(vtkWidgetRepresentation):
    """
    vtkLineRepresentation - a class defining the representation for a
    vtkLineWidget2
    
    Superclass: vtkWidgetRepresentation
    
    This class is a concrete representation for the vtkLineWidget2. It
    represents a straight line with three handles: one at the beginning
    and ending of the line, and one used to translate the line. Through
    interaction with the widget, the line representation can be
    arbitrarily placed in the 3D space.
    
    To use this representation, you normally specify the position of the
    two end points (either in world or display coordinates). The
    PlaceWidget() method is also used to initially position the
    representation.
    
    @warning
    This class, and vtkLineWidget2, are next generation VTK widgets. An
    earlier version of this functionality was defined in the class
    vtkLineWidget.
    
    @sa
    vtkLineWidget2 vtkLineWidget
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def DirectionalLineOff(self):
        """
        V.DirectionalLineOff()
        C++: virtual void DirectionalLineOff()
        
        Sets the representation to be a directional line with point 1
        represented as a cone.
        """
        ...
    
    def DirectionalLineOn(self):
        """
        V.DirectionalLineOn()
        C++: virtual void DirectionalLineOn()
        
        Sets the representation to be a directional line with point 1
        represented as a cone.
        """
        ...
    
    def DistanceAnnotationVisibilityOff(self):
        """
        V.DistanceAnnotationVisibilityOff()
        C++: virtual void DistanceAnnotationVisibilityOff()
        
        Show the distance between the points.
        """
        ...
    
    def DistanceAnnotationVisibilityOn(self):
        """
        V.DistanceAnnotationVisibilityOn()
        C++: virtual void DistanceAnnotationVisibilityOn()
        
        Show the distance between the points.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *pc) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def GetDirectionalLine(self):
        """
        V.GetDirectionalLine() -> bool
        C++: virtual bool GetDirectionalLine()
        
        Sets the representation to be a directional line with point 1
        represented as a cone.
        """
        ...
    
    def GetDistance(self):
        """
        V.GetDistance() -> float
        C++: double GetDistance()
        
        Get the distance between the points.
        """
        ...
    
    def GetDistanceAnnotationFormat(self):
        """
        V.GetDistanceAnnotationFormat() -> string
        C++: virtual char *GetDistanceAnnotationFormat()
        
        Specify the format to use for labelling the line. Note that an
        empty string results in no label, or a format string without a
        "%" character will not print the angle value.
        """
        ...
    
    def GetDistanceAnnotationProperty(self):
        """
        V.GetDistanceAnnotationProperty() -> vtkProperty
        C++: virtual vtkProperty *GetDistanceAnnotationProperty()
        
        Get the distance annotation property
        """
        ...
    
    def GetDistanceAnnotationScale(self):
        """
        V.GetDistanceAnnotationScale() -> (float, float, float)
        C++: virtual double *GetDistanceAnnotationScale()
        
        Scale text (font size along each dimension).
        """
        ...
    
    def GetDistanceAnnotationVisibility(self):
        """
        V.GetDistanceAnnotationVisibility() -> int
        C++: virtual vtkTypeBool GetDistanceAnnotationVisibility()
        
        Show the distance between the points.
        """
        ...
    
    def GetEndPoint2Property(self):
        """
        V.GetEndPoint2Property() -> vtkProperty
        C++: virtual vtkProperty *GetEndPoint2Property()
        
        Get the end-point (sphere) properties. The properties of the
        end-points when selected and unselected can be manipulated.
        """
        ...
    
    def GetEndPointProperty(self):
        """
        V.GetEndPointProperty() -> vtkProperty
        C++: virtual vtkProperty *GetEndPointProperty()
        
        Get the end-point (sphere) properties. The properties of the
        end-points when selected and unselected can be manipulated.
        """
        ...
    
    def GetInteractionStateMaxValue(self):
        """
        V.GetInteractionStateMaxValue() -> int
        C++: virtual int GetInteractionStateMaxValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkLineWidget2) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetInteractionStateMinValue(self):
        """
        V.GetInteractionStateMinValue() -> int
        C++: virtual int GetInteractionStateMinValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkLineWidget2) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetLineHandleRepresentation(self):
        """
        V.GetLineHandleRepresentation() -> vtkPointHandleRepresentation3D
        C++: virtual vtkPointHandleRepresentation3D *GetLineHandleRepresentation(
            )
        
        Get the three handle representations used for the vtkLineWidget2.
        """
        ...
    
    def GetLineProperty(self):
        """
        V.GetLineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetLineProperty()
        
        Get the line properties. The properties of the line when selected
        and unselected can be manipulated.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overload the superclasses' GetMTime() because internal classes
        are used to keep the state of the representation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def GetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint1DisplayPosition([float, float, float])
        C++: void GetPoint1DisplayPosition(double pos[3])
        V.GetPoint1DisplayPosition() -> (float, float, float)
        C++: double *GetPoint1DisplayPosition()
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint1Representation(self):
        """
        V.GetPoint1Representation() -> vtkPointHandleRepresentation3D
        C++: virtual vtkPointHandleRepresentation3D *GetPoint1Representation(
            )
        
        Get the three handle representations used for the vtkLineWidget2.
        """
        ...
    
    def GetPoint1WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint1WorldPosition([float, float, float])
        C++: void GetPoint1WorldPosition(double pos[3])
        V.GetPoint1WorldPosition() -> (float, float, float)
        C++: double *GetPoint1WorldPosition()
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint2DisplayPosition([float, float, float])
        C++: void GetPoint2DisplayPosition(double pos[3])
        V.GetPoint2DisplayPosition() -> (float, float, float)
        C++: double *GetPoint2DisplayPosition()
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2Representation(self):
        """
        V.GetPoint2Representation() -> vtkPointHandleRepresentation3D
        C++: virtual vtkPointHandleRepresentation3D *GetPoint2Representation(
            )
        
        Get the three handle representations used for the vtkLineWidget2.
        """
        ...
    
    def GetPoint2WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint2WorldPosition([float, float, float])
        C++: void GetPoint2WorldPosition(double pos[3])
        V.GetPoint2WorldPosition() -> (float, float, float)
        C++: double *GetPoint2WorldPosition()
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPolyData(self, vtkPolyData):
        """
        V.GetPolyData(vtkPolyData)
        C++: void GetPolyData(vtkPolyData *pd)
        
        Retrieve the polydata (including points) that defines the line. 
        The polydata consists of n+1 points, where n is the resolution of
        the line. These point values are guaranteed to be up-to-date
        whenever any one of the three handles are moved. To use this
        method, the user provides the vtkPolyData as an input argument,
        and the points and polyline are copied into it.
        """
        ...
    
    def GetRepresentationState(self):
        """
        V.GetRepresentationState() -> int
        C++: virtual int GetRepresentationState()
        
        Sets the visual appearance of the representation based on the
        state it is in. This state is usually the same as
        InteractionState.
        """
        ...
    
    def GetResolution(self):
        """
        V.GetResolution() -> int
        C++: int GetResolution()
        
        Set/Get the resolution (number of subdivisions) of the line. A
        line with resolution greater than one is useful when points along
        the line are desired; e.g., generating a rake of streamlines.
        """
        ...
    
    def GetSelectedEndPoint2Property(self):
        """
        V.GetSelectedEndPoint2Property() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedEndPoint2Property()
        
        Get the end-point (sphere) properties. The properties of the
        end-points when selected and unselected can be manipulated.
        """
        ...
    
    def GetSelectedEndPointProperty(self):
        """
        V.GetSelectedEndPointProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedEndPointProperty()
        
        Get the end-point (sphere) properties. The properties of the
        end-points when selected and unselected can be manipulated.
        """
        ...
    
    def GetSelectedLineProperty(self):
        """
        V.GetSelectedLineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedLineProperty()
        
        Get the line properties. The properties of the line when selected
        and unselected can be manipulated.
        """
        ...
    
    def GetTextActor(self):
        """
        V.GetTextActor() -> vtkFollower
        C++: virtual vtkFollower *GetTextActor()
        
        Get the text actor
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> int
        C++: virtual int GetTolerance()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the line or end
        point to be active.
        """
        ...
    
    def GetToleranceMaxValue(self):
        """
        V.GetToleranceMaxValue() -> int
        C++: virtual int GetToleranceMaxValue()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the line or end
        point to be active.
        """
        ...
    
    def GetToleranceMinValue(self):
        """
        V.GetToleranceMinValue() -> int
        C++: virtual int GetToleranceMinValue()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the line or end
        point to be active.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def InstantiateHandleRepresentation(self):
        """
        V.InstantiateHandleRepresentation()
        C++: void InstantiateHandleRepresentation()
        
        This method is used to specify the type of handle representation
        to use for the three internal vtkHandleWidgets within
        vtkLineWidget2. To use this method, create a dummy
        vtkHandleWidget (or subclass), and then invoke this method with
        this dummy. Then the vtkLineRepresentation uses this dummy to
        clone three vtkHandleWidgets of the same type. Make sure you set
        the handle representation before the widget is enabled. (The
        method InstantiateHandleRepresentation() is invoked by the
        vtkLineWidget2.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for the class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLineRepresentation
        C++: vtkLineRepresentation *NewInstance()
        
        Standard methods for the class.
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLineRepresentation
        C++: static vtkLineRepresentation *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for the class.
        """
        ...
    
    def SetDirectionalLine(self, bool):
        """
        V.SetDirectionalLine(bool)
        C++: void SetDirectionalLine(bool val)
        
        Sets the representation to be a directional line with point 1
        represented as a cone.
        """
        ...
    
    def SetDistanceAnnotationFormat(self, string):
        """
        V.SetDistanceAnnotationFormat(string)
        C++: virtual void SetDistanceAnnotationFormat(const char *_arg)
        
        Specify the format to use for labelling the line. Note that an
        empty string results in no label, or a format string without a
        "%" character will not print the angle value.
        """
        ...
    
    def SetDistanceAnnotationScale(self, p_float, p_float_1, p_float_2):
        """
        V.SetDistanceAnnotationScale(float, float, float)
        C++: void SetDistanceAnnotationScale(double x, double y, double z)
        V.SetDistanceAnnotationScale([float, float, float])
        C++: virtual void SetDistanceAnnotationScale(double scale[3])
        
        Scale text (font size along each dimension).
        """
        ...
    
    def SetDistanceAnnotationVisibility(self, p_int):
        """
        V.SetDistanceAnnotationVisibility(int)
        C++: virtual void SetDistanceAnnotationVisibility(
            vtkTypeBool _arg)
        
        Show the distance between the points.
        """
        ...
    
    def SetHandleRepresentation(self, vtkPointHandleRepresentation3D):
        """
        V.SetHandleRepresentation(vtkPointHandleRepresentation3D)
        C++: void SetHandleRepresentation(
            vtkPointHandleRepresentation3D *handle)
        
        This method is used to specify the type of handle representation
        to use for the three internal vtkHandleWidgets within
        vtkLineWidget2. To use this method, create a dummy
        vtkHandleWidget (or subclass), and then invoke this method with
        this dummy. Then the vtkLineRepresentation uses this dummy to
        clone three vtkHandleWidgets of the same type. Make sure you set
        the handle representation before the widget is enabled. (The
        method InstantiateHandleRepresentation() is invoked by the
        vtkLineWidget2.)
        """
        ...
    
    def SetInteractionState(self, p_int):
        """
        V.SetInteractionState(int)
        C++: virtual void SetInteractionState(int _arg)
        
        The interaction state may be set from a widget (e.g.,
        vtkLineWidget2) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def SetLineColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetLineColor(float, float, float)
        C++: void SetLineColor(double r, double g, double b)
        
        Convenience method to set the line color. Ideally one should use
        GetLineProperty()->SetColor().
        """
        ...
    
    def SetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1DisplayPosition([float, float, float])
        C++: void SetPoint1DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint1WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1WorldPosition([float, float, float])
        C++: void SetPoint1WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2DisplayPosition([float, float, float])
        C++: void SetPoint2DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint2WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2WorldPosition([float, float, float])
        C++: void SetPoint2WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *ren) override;
        
        Overridden to set the rendererer on the internal representations.
        """
        ...
    
    def SetRepresentationState(self, p_int):
        """
        V.SetRepresentationState(int)
        C++: virtual void SetRepresentationState(int)
        
        Sets the visual appearance of the representation based on the
        state it is in. This state is usually the same as
        InteractionState.
        """
        ...
    
    def SetResolution(self, p_int):
        """
        V.SetResolution(int)
        C++: void SetResolution(int res)
        
        Set/Get the resolution (number of subdivisions) of the line. A
        line with resolution greater than one is useful when points along
        the line are desired; e.g., generating a rake of streamlines.
        """
        ...
    
    def SetRestrictFlag(self, p_int):
        """
        V.SetRestrictFlag(int)
        C++: void SetRestrictFlag(int restrict_flag)
        
        Set if translations should be restricted to one of the axes
        (disabled if RestrictNone is specified).
        """
        ...
    
    def SetTolerance(self, p_int):
        """
        V.SetTolerance(int)
        C++: virtual void SetTolerance(int _arg)
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the line or end
        point to be active.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    OnLine = ...
    OnP1 = ...
    OnP2 = ...
    Outside = ...
    RestrictNone = ...
    RestrictToX = ...
    RestrictToY = ...
    RestrictToZ = ...
    Scaling = ...
    TranslatingP1 = ...
    TranslatingP2 = ...
    __dict__ = ...
    __vtkname__ = ...


