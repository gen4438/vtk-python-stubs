"""
This type stub file was generated by pyright.
"""

from .vtkAbstractPolygonalHandleRepresentation3D import vtkAbstractPolygonalHandleRepresentation3D

class vtkPolygonalHandleRepresentation3D(vtkAbstractPolygonalHandleRepresentation3D):
    """
    vtkPolygonalHandleRepresentation3D - represent a user defined handle
    geometry in 3D space
    
    Superclass: vtkAbstractPolygonalHandleRepresentation3D
    
    This class serves as the geometrical representation of a
    vtkHandleWidget. The handle can be represented by an arbitrary
    polygonal data (vtkPolyData), set via SetHandle(vtkPolyData *). The
    actual position of the handle will be initially assumed to be
    (0,0,0). You can specify an offset from this position if desired.
    @sa
    vtkPointHandleRepresentation3D vtkHandleRepresentation
    vtkHandleWidget
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetOffset(self):
        """
        V.GetOffset() -> (float, float, float)
        C++: virtual double *GetOffset()
        
        Set/get the offset of the handle position with respect to the
        handle center, assumed to be the origin.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolygonalHandleRepresentation3D
        C++: vtkPolygonalHandleRepresentation3D *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkPolygonalHandleRepresentation3D
        C++: static vtkPolygonalHandleRepresentation3D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetOffset(self, p_float, p_float_1, p_float_2):
        """
        V.SetOffset(float, float, float)
        C++: virtual void SetOffset(double _arg1, double _arg2,
            double _arg3)
        V.SetOffset((float, float, float))
        C++: virtual void SetOffset(const double _arg[3])
        
        Set/get the offset of the handle position with respect to the
        handle center, assumed to be the origin.
        """
        ...
    
    def SetWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetWorldPosition([float, float, float])
        C++: void SetWorldPosition(double p[3]) override;
        
        Set the position of the point in world and display coordinates.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


