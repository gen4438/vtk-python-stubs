"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkHandleWidget(vtkAbstractWidget):
    """
    vtkHandleWidget - a general widget for moving handles
    
    Superclass: vtkAbstractWidget
    
    The vtkHandleWidget is used to position a handle.  A handle is a
    widget with a position (in display and world space). Various
    appearances are available depending on its associated representation.
    The widget provides methods for translation, including constrained
    translation along coordinate axes. To use this widget, create and
    associate a representation with the widget.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    
      LeftButtonPressEvent - select focal point of widget
      LeftButtonReleaseEvent - end selection
      MiddleButtonPressEvent - translate widget
      MiddleButtonReleaseEvent - end translation
      RightButtonPressEvent - scale widget
      RightButtonReleaseEvent - end scaling
      MouseMoveEvent - interactive movement across widget 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkHandleWidget's widget events:
    
    
      vtkWidgetEvent::Select -- focal point is being selected
      vtkWidgetEvent::EndSelect -- the selection process has completed
      vtkWidgetEvent::Translate -- translate the widget
      vtkWidgetEvent::EndTranslate -- end widget translation
      vtkWidgetEvent::Scale -- scale the widget
      vtkWidgetEvent::EndScale -- end scaling the widget
      vtkWidgetEvent::Move -- a request for widget motion 
    
    @par Event Bindings: In turn, when these widget events are processed,
    the vtkHandleWidget invokes the following VTK events on itself (which
    observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (on vtkWidgetEvent::Select)
      vtkCommand::EndInteractionEvent (on vtkWidgetEvent::EndSelect)
      vtkCommand::InteractionEvent (on vtkWidgetEvent::Move)
    """
    def AllowHandleResizeOff(self):
        """
        V.AllowHandleResizeOff()
        C++: virtual void AllowHandleResizeOff()
        
        Allow resizing of handles ? By default the right mouse button
        scales the handle size.
        """
        ...
    
    def AllowHandleResizeOn(self):
        """
        V.AllowHandleResizeOn()
        C++: virtual void AllowHandleResizeOn()
        
        Allow resizing of handles ? By default the right mouse button
        scales the handle size.
        """
        ...
    
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set. By
        default an instance of vtkPointHandleRepresentation3D is created.
        """
        ...
    
    def EnableAxisConstraintOff(self):
        """
        V.EnableAxisConstraintOff()
        C++: virtual void EnableAxisConstraintOff()
        
        Enable / disable axis constrained motion of the handles. By
        default the widget responds to the shift modifier to constrain
        the handle along the axis closest aligned with the motion vector.
        """
        ...
    
    def EnableAxisConstraintOn(self):
        """
        V.EnableAxisConstraintOn()
        C++: virtual void EnableAxisConstraintOn()
        
        Enable / disable axis constrained motion of the handles. By
        default the widget responds to the shift modifier to constrain
        the handle along the axis closest aligned with the motion vector.
        """
        ...
    
    def EnableTranslationOff(self):
        """
        V.EnableTranslationOff()
        C++: virtual void EnableTranslationOff()
        
        Enable moving of handles. By default, the handle can be moved.
        """
        ...
    
    def EnableTranslationOn(self):
        """
        V.EnableTranslationOn()
        C++: virtual void EnableTranslationOn()
        
        Enable moving of handles. By default, the handle can be moved.
        """
        ...
    
    def GetAllowHandleResize(self):
        """
        V.GetAllowHandleResize() -> int
        C++: virtual vtkTypeBool GetAllowHandleResize()
        
        Allow resizing of handles ? By default the right mouse button
        scales the handle size.
        """
        ...
    
    def GetEnableAxisConstraint(self):
        """
        V.GetEnableAxisConstraint() -> int
        C++: virtual vtkTypeBool GetEnableAxisConstraint()
        
        Enable / disable axis constrained motion of the handles. By
        default the widget responds to the shift modifier to constrain
        the handle along the axis closest aligned with the motion vector.
        """
        ...
    
    def GetEnableTranslation(self):
        """
        V.GetEnableTranslation() -> int
        C++: virtual vtkTypeBool GetEnableTranslation()
        
        Enable moving of handles. By default, the handle can be moved.
        """
        ...
    
    def GetHandleRepresentation(self):
        """
        V.GetHandleRepresentation() -> vtkHandleRepresentation
        C++: vtkHandleRepresentation *GetHandleRepresentation()
        
        Return the representation as a vtkHandleRepresentation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK class macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK class macros.
        """
        ...
    
    def GetShowInactive(self):
        """
        V.GetShowInactive() -> int
        C++: virtual vtkTypeBool GetShowInactive()
        
        Allow the widget to be visible as an inactive representation when
        disabled. By default, this is false i.e. the representation is
        not visible when the widget is disabled.
        """
        ...
    
    def GetWidgetState(self):
        """
        V.GetWidgetState() -> int
        C++: virtual int GetWidgetState()
        
        Get the widget state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK class macros.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK class macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHandleWidget
        C++: vtkHandleWidget *NewInstance()
        
        Standard VTK class macros.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHandleWidget
        C++: static vtkHandleWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard VTK class macros.
        """
        ...
    
    def SetAllowHandleResize(self, p_int):
        """
        V.SetAllowHandleResize(int)
        C++: virtual void SetAllowHandleResize(vtkTypeBool _arg)
        
        Allow resizing of handles ? By default the right mouse button
        scales the handle size.
        """
        ...
    
    def SetEnableAxisConstraint(self, p_int):
        """
        V.SetEnableAxisConstraint(int)
        C++: virtual void SetEnableAxisConstraint(vtkTypeBool _arg)
        
        Enable / disable axis constrained motion of the handles. By
        default the widget responds to the shift modifier to constrain
        the handle along the axis closest aligned with the motion vector.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int enabling) override;
        
        Enable/disable widget. Custom override for the SetEnabled method
        to allow for the inactive state.
        """
        ...
    
    def SetEnableTranslation(self, p_int):
        """
        V.SetEnableTranslation(int)
        C++: virtual void SetEnableTranslation(vtkTypeBool _arg)
        
        Enable moving of handles. By default, the handle can be moved.
        """
        ...
    
    def SetRepresentation(self, vtkHandleRepresentation):
        """
        V.SetRepresentation(vtkHandleRepresentation)
        C++: void SetRepresentation(vtkHandleRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def SetShowInactive(self, p_int):
        """
        V.SetShowInactive(int)
        C++: virtual void SetShowInactive(vtkTypeBool _arg)
        
        Allow the widget to be visible as an inactive representation when
        disabled. By default, this is false i.e. the representation is
        not visible when the widget is disabled.
        """
        ...
    
    def ShowInactiveOff(self):
        """
        V.ShowInactiveOff()
        C++: virtual void ShowInactiveOff()
        
        Allow the widget to be visible as an inactive representation when
        disabled. By default, this is false i.e. the representation is
        not visible when the widget is disabled.
        """
        ...
    
    def ShowInactiveOn(self):
        """
        V.ShowInactiveOn()
        C++: virtual void ShowInactiveOn()
        
        Allow the widget to be visible as an inactive representation when
        disabled. By default, this is false i.e. the representation is
        not visible when the widget is disabled.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Active = ...
    Inactive = ...
    Start = ...
    _WidgetState = ...
    __dict__ = ...
    __vtkname__ = ...


