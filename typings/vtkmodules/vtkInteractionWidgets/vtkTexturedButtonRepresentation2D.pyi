"""
This type stub file was generated by pyright.
"""

from .vtkButtonRepresentation import vtkButtonRepresentation

class vtkTexturedButtonRepresentation2D(vtkButtonRepresentation):
    """
    vtkTexturedButtonRepresentation2D - defines a representation for a
    vtkButtonWidget
    
    Superclass: vtkButtonRepresentation
    
    This class implements one type of vtkButtonRepresentation. It changes
    the appearance of a user-provided polydata by assigning textures
    according to the current button state. It also provides highlighting
    (when hovering and selecting the button) by fiddling with the actor's
    property. Since this is a 2D version, the button is rendered in the
    overlay plane. Typically it is positioned in display coordinates, but
    it can be anchored to a world position so it will appear to move as
    the camera moves.
    
    To use this representation, always begin by specifying the number of
    button states.  Then provide a polydata (the polydata should have
    associated texture coordinates), and a list of textures cooresponding
    to the button states. Optionally, the HoveringProperty and
    SelectionProperty can be adjusted to obtain the appropriate
    appearance.
    
    @warning
    There are two variants of the PlaceWidget() method. The first
    PlaceWidget(bds[6]) allows the widget to be placed in the display
    coordinates fixed to the overlay plane. The second
    PlaceWidget(anchor[3],size[2]) places the widget in world space;
    hence it will appear to move as the camera moves around the scene.
    
    @sa
    vtkButtonWidget vtkButtonRepresentation
    vtkTexturedButtonRepresentation vtkProp3DButtonRepresentation
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Provide the necessary methods to satisfy the
        vtkWidgetRepresentation API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        Provide the necessary methods to satisfy the
        vtkWidgetRepresentation API.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *pc) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def GetBalloon(self):
        """
        V.GetBalloon() -> vtkBalloonRepresentation
        C++: vtkBalloonRepresentation *GetBalloon()
        
        Grab the underlying vtkBalloonRepresentation used to position and
        display the button texture.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def GetButtonTexture(self, p_int):
        """
        V.GetButtonTexture(int) -> vtkImageData
        C++: vtkImageData *GetButtonTexture(int i)
        
        Add the ith texture corresponding to the ith button state. The
        parameter i should be 0<=i<NumberOfStates.
        """
        ...
    
    def GetHoveringProperty(self):
        """
        V.GetHoveringProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetHoveringProperty()
        
        Specify the property to use when the hovering over the button.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetProperty()
        
        Specify the property to use when the button is to appear "normal"
        i.e., the mouse pointer is not hovering or selecting the button.
        """
        ...
    
    def GetSelectingProperty(self):
        """
        V.GetSelectingProperty() -> vtkProperty2D
        C++: virtual vtkProperty2D *GetSelectingProperty()
        
        Specify the property to use when selecting the button.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def Highlight(self, p_int):
        """
        V.Highlight(int)
        C++: void Highlight(int state) override;
        
        Provide the necessary methods to satisfy the
        vtkWidgetRepresentation API.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for the class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTexturedButtonRepresentation2D
        C++: vtkTexturedButtonRepresentation2D *NewInstance()
        
        Standard methods for the class.
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        V.PlaceWidget([float, float, float], [int, int])
        C++: virtual void PlaceWidget(double anchor[3], int size[2])
        
        Conventional PlaceWidget() method to satisfy the
        vtkWidgetRepresentation API. In this version, bounds[6] specifies
        a rectangle in *display* coordinates in which to place the
        button. The values for bounds[4] and bounds[5] can be set to
        zero. Note that PlaceWidget() is typically called at the end of
        configuring the button representation.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTexturedButtonRepresentation2D
        C++: static vtkTexturedButtonRepresentation2D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for the class.
        """
        ...
    
    def SetButtonTexture(self, p_int, vtkImageData):
        """
        V.SetButtonTexture(int, vtkImageData)
        C++: void SetButtonTexture(int i, vtkImageData *image)
        
        Add the ith texture corresponding to the ith button state. The
        parameter i should be 0<=i<NumberOfStates.
        """
        ...
    
    def SetHoveringProperty(self, vtkProperty2D):
        """
        V.SetHoveringProperty(vtkProperty2D)
        C++: virtual void SetHoveringProperty(vtkProperty2D *p)
        
        Specify the property to use when the hovering over the button.
        """
        ...
    
    def SetProperty(self, vtkProperty2D):
        """
        V.SetProperty(vtkProperty2D)
        C++: virtual void SetProperty(vtkProperty2D *p)
        
        Specify the property to use when the button is to appear "normal"
        i.e., the mouse pointer is not hovering or selecting the button.
        """
        ...
    
    def SetSelectingProperty(self, vtkProperty2D):
        """
        V.SetSelectingProperty(vtkProperty2D)
        C++: virtual void SetSelectingProperty(vtkProperty2D *p)
        
        Specify the property to use when selecting the button.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Provide the necessary methods to satisfy the rendering API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


