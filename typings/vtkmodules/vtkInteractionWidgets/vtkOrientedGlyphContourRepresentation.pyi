"""
This type stub file was generated by pyright.
"""

from .vtkContourRepresentation import vtkContourRepresentation

class vtkOrientedGlyphContourRepresentation(vtkContourRepresentation):
    """
    vtkOrientedGlyphContourRepresentation - Default representation for
    the contour widget
    
    Superclass: vtkContourRepresentation
    
    This class provides the default concrete representation for the
    vtkContourWidget. It works in conjunction with the
    vtkContourLineInterpolator and vtkPointPlacer. See vtkContourWidget
    for details.
    @sa
    vtkContourRepresentation vtkContourWidget vtkPointPlacer
    vtkContourLineInterpolator
    """
    def AlwaysOnTopOff(self):
        """
        V.AlwaysOnTopOff()
        C++: virtual void AlwaysOnTopOff()
        
        Controls whether the contour widget should always appear on top
        of other actors in the scene. (In effect, this will disable
        OpenGL Depth buffer tests while rendering the contour). Default
        is to set it to false.
        """
        ...
    
    def AlwaysOnTopOn(self):
        """
        V.AlwaysOnTopOn()
        C++: virtual void AlwaysOnTopOn()
        
        Controls whether the contour widget should always appear on top
        of other actors in the scene. (In effect, this will disable
        OpenGL Depth buffer tests while rendering the contour). Default
        is to set it to false.
        """
        ...
    
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Subclasses of vtkOrientedGlyphContourRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modified=0)
            override;
        
        Subclasses of vtkOrientedGlyphContourRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def GetActiveCursorShape(self):
        """
        V.GetActiveCursorShape() -> vtkPolyData
        C++: vtkPolyData *GetActiveCursorShape()
        
        Specify the shape of the cursor (handle) when it is active. This
        is the geometry that will be used when the mouse is close to the
        handle or if the user is manipulating the handle.
        """
        ...
    
    def GetActiveProperty(self):
        """
        V.GetActiveProperty() -> vtkProperty
        C++: virtual vtkProperty *GetActiveProperty()
        
        This is the property used when the user is interacting with the
        handle.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def GetAlwaysOnTop(self):
        """
        V.GetAlwaysOnTop() -> int
        C++: virtual vtkTypeBool GetAlwaysOnTop()
        
        Controls whether the contour widget should always appear on top
        of other actors in the scene. (In effect, this will disable
        OpenGL Depth buffer tests while rendering the contour). Default
        is to set it to false.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Return the bounds of the representation
        """
        ...
    
    def GetContourRepresentationAsPolyData(self):
        """
        V.GetContourRepresentationAsPolyData() -> vtkPolyData
        C++: vtkPolyData *GetContourRepresentationAsPolyData() override;
        
        Get the points in this contour as a vtkPolyData.
        """
        ...
    
    def GetCursorShape(self):
        """
        V.GetCursorShape() -> vtkPolyData
        C++: vtkPolyData *GetCursorShape()
        
        Specify the cursor shape. Keep in mind that the shape will be
        aligned with the constraining plane by orienting it such that the
        x axis of the geometry lies along the normal of the plane.
        """
        ...
    
    def GetLinesProperty(self):
        """
        V.GetLinesProperty() -> vtkProperty
        C++: virtual vtkProperty *GetLinesProperty()
        
        This is the property used by the lines.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        This is the property used when the handle is not active (the
        mouse is not near the handle)
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOrientedGlyphContourRepresentation
        C++: vtkOrientedGlyphContourRepresentation *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkOrientedGlyphContourRepresentation
        C++: static vtkOrientedGlyphContourRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetActiveCursorShape(self, vtkPolyData):
        """
        V.SetActiveCursorShape(vtkPolyData)
        C++: void SetActiveCursorShape(vtkPolyData *activeShape)
        
        Specify the shape of the cursor (handle) when it is active. This
        is the geometry that will be used when the mouse is close to the
        handle or if the user is manipulating the handle.
        """
        ...
    
    def SetAlwaysOnTop(self, p_int):
        """
        V.SetAlwaysOnTop(int)
        C++: virtual void SetAlwaysOnTop(vtkTypeBool _arg)
        
        Controls whether the contour widget should always appear on top
        of other actors in the scene. (In effect, this will disable
        OpenGL Depth buffer tests while rendering the contour). Default
        is to set it to false.
        """
        ...
    
    def SetCursorShape(self, vtkPolyData):
        """
        V.SetCursorShape(vtkPolyData)
        C++: void SetCursorShape(vtkPolyData *cursorShape)
        
        Specify the cursor shape. Keep in mind that the shape will be
        aligned with the constraining plane by orienting it such that the
        x axis of the geometry lies along the normal of the plane.
        """
        ...
    
    def SetLineColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetLineColor(float, float, float)
        C++: void SetLineColor(double r, double g, double b)
        
        Convenience method to set the line color. Ideally one should use
        GetLinesProperty()->SetColor().
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *ren) override;
        
        Subclasses of vtkOrientedGlyphContourRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def SetShowSelectedNodes(self, p_int):
        """
        V.SetShowSelectedNodes(int)
        C++: void SetShowSelectedNodes(vtkTypeBool) override;
        
        A flag to indicate whether to show the Selected nodes Default is
        to set it to false.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double eventPos[2]) override;
        
        Subclasses of vtkOrientedGlyphContourRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double eventPos[2]) override;
        
        Subclasses of vtkOrientedGlyphContourRepresentation must
        implement these methods. These are the methods that the widget
        and its representation use to communicate with each other.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


