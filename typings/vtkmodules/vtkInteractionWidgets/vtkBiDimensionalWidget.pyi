"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkBiDimensionalWidget(vtkAbstractWidget):
    """
    vtkBiDimensionalWidget - measure the bi-dimensional lengths of an
    object
    
    Superclass: vtkAbstractWidget
    
    The vtkBiDimensionalWidget is used to measure the bi-dimensional
    length of an object. The bi-dimensional measure is defined by two
    finite, orthogonal lines that intersect within the finite extent of
    both lines. The lengths of these two lines gives the bi-dimensional
    measure. Each line is defined by two handle widgets at the end points
    of each line.
    
    The orthogonal constraint on the two lines limits how the four end
    points can be positioned. The first two points can be placed
    arbitrarily to define the first line (similar to vtkDistanceWidget).
    The placement of the third point is limited by the finite extent of
    the first line. As the third point is placed, the fourth point is
    placed on the opposite side of the first line. Once the third point
    is placed, the second line is defined since the fourth point is
    defined at the same time, but the fourth point can be moved along the
    second line (i.e., maintaining the orthogonal relationship between
    the two lines). Once defined, any of the four points can be moved
    along their constraint lines. Also, each line can be translated along
    the other line (in an orthogonal direction), and the whole
    bi-dimensional widget can be rotated about its center point (see the
    description of the event bindings). Finally, selecting the point
    where the two orthogonal axes intersect, the entire widget can be
    translated in any direction.
    
    Placement of any point results in a special PlacePointEvent
    invocation so that special operations may be performed to reposition
    the point. Motion of any point, moving the lines, or rotating the
    widget cause InteractionEvents to be invoked. Note that the widget
    has two fundamental modes: a define mode (when initially placing the
    points) and a manipulate mode (after the points are placed). Line
    translation and rotation are only possible in manipulate mode.
    
    To use this widget, specify an instance of vtkBiDimensionalWidget and
    a representation (e.g., vtkBiDimensionalRepresentation2D). The widget
    is implemented using four instances of vtkHandleWidget which are used
    to position the end points of the two intersecting lines. The
    representations for these handle widgets are provided by the
    vtkBiDimensionalRepresentation class.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    
      LeftButtonPressEvent - define a point or manipulate a handle, line,
                             perform rotation or translate the widget.
      MouseMoveEvent - position the points, move a line, rotate or
    translate the widget
      LeftButtonReleaseEvent - release the selected handle and end
    interaction 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkBiDimensionalWidget's widget
    events:
    
    
      vtkWidgetEvent::AddPoint -- (In Define mode:) Add one point;
    depending on the
                                  state it may the first, second, third
    or fourth
                                  point added. (In Manipulate mode:) If
    near a handle,
                                  select the handle. Or if near a line,
    select the line.
      vtkWidgetEvent::Move -- (In Define mode:) Position the second,
    third or fourth
                              point. (In Manipulate mode:) Move the
    handle, line or widget.
      vtkWidgetEvent::EndSelect -- the manipulation process has
    completed. 
    
    @par Event Bindings: This widget invokes the following VTK events on
    itself (which observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (beginning to interact)
      vtkCommand::EndInteractionEvent (completing interaction)
      vtkCommand::InteractionEvent (moving a handle, line or performing
    rotation)
      vtkCommand::PlacePointEvent (after a point is positioned;
                                   call data includes handle id
    (0,1,2,4)) 
    
    @sa
    vtkHandleWidget vtkDistanceWidget
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetBiDimensionalRepresentation(self):
        """
        V.GetBiDimensionalRepresentation()
            -> vtkBiDimensionalRepresentation
        C++: vtkBiDimensionalRepresentation *GetBiDimensionalRepresentation(
            )
        
        Return the representation as a vtkBiDimensionalRepresentation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetWidgetState(self):
        """
        V.GetWidgetState() -> int
        C++: virtual int GetWidgetState()
        
        Return the current widget state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def IsMeasureValid(self):
        """
        V.IsMeasureValid() -> int
        C++: int IsMeasureValid()
        
        A flag indicates whether the bi-dimensional measure is valid. The
        widget becomes valid after two of the four points are placed.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBiDimensionalWidget
        C++: vtkBiDimensionalWidget *NewInstance()
        
        Standard methods for a VTK class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBiDimensionalWidget
        C++: static vtkBiDimensionalWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for a VTK class.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        The method for activating and deactivating this widget. This
        method must be overridden because it is a composite widget and
        does more than its superclasses' vtkAbstractWidget::SetEnabled()
        method.
        """
        ...
    
    def SetProcessEvents(self, p_int):
        """
        V.SetProcessEvents(int)
        C++: void SetProcessEvents(vtkTypeBool) override;
        
        Methods to change the whether the widget responds to interaction.
        Overridden to pass the state to component widgets.
        """
        ...
    
    def SetRepresentation(self, vtkBiDimensionalRepresentation):
        """
        V.SetRepresentation(vtkBiDimensionalRepresentation)
        C++: void SetRepresentation(vtkBiDimensionalRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def SetWidgetStateToManipulate(self):
        """
        V.SetWidgetStateToManipulate()
        C++: virtual void SetWidgetStateToManipulate()
        
        Set the state of the widget. If the state is set to "Manipulate"
        then it is assumed that the widget and its representation will be
        initialized programmatically and is not interactively placed.
        Initially the widget state is set to "Start" which means nothing
        will appear and the user must interactively place the widget with
        repeated mouse selections. Set the state to "Start" if you want
        interactive placement. Generally state changes must be followed
        by a Render() for things to visually take effect.
        """
        ...
    
    def SetWidgetStateToStart(self):
        """
        V.SetWidgetStateToStart()
        C++: virtual void SetWidgetStateToStart()
        
        Set the state of the widget. If the state is set to "Manipulate"
        then it is assumed that the widget and its representation will be
        initialized programmatically and is not interactively placed.
        Initially the widget state is set to "Start" which means nothing
        will appear and the user must interactively place the widget with
        repeated mouse selections. Set the state to "Start" if you want
        interactive placement. Generally state changes must be followed
        by a Render() for things to visually take effect.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Define = ...
    EndWidgetSelectEvent = ...
    Manipulate = ...
    Start = ...
    __dict__ = ...
    __vtkname__ = ...


