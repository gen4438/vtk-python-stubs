"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkResliceCursorPicker(__vtkmodules_vtkRenderingCore.vtkPicker):
    """
    vtkResliceCursorPicker - ray-cast cell picker for the reslice cursor
    
    Superclass: vtkPicker
    
    This class is used by the vtkResliceCursorWidget to pick reslice axes
    drawn by a vtkResliceCursorActor. The class returns the axes picked
    if any, whether one has picked the center. It takes as input an
    instance of vtkResliceCursorPolyDataAlgorithm. This is all done
    internally by vtkResliceCursorWidget and as such users are not
    expected to use this class directly, unless they are overriding the
    behaviour of vtkResliceCursorWidget.
    @sa
    vtkResliceCursor vtkResliceCursorWidget
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPickedAxis1(self):
        """
        V.GetPickedAxis1() -> int
        C++: virtual int GetPickedAxis1()
        
        Get the picked axis
        """
        ...
    
    def GetPickedAxis2(self):
        """
        V.GetPickedAxis2() -> int
        C++: virtual int GetPickedAxis2()
        
        Get the picked axis
        """
        ...
    
    def GetPickedCenter(self):
        """
        V.GetPickedCenter() -> int
        C++: virtual int GetPickedCenter()
        
        Get the picked axis
        """
        ...
    
    def GetResliceCursorAlgorithm(self):
        """
        V.GetResliceCursorAlgorithm() -> vtkResliceCursorPolyDataAlgorithm
        C++: virtual vtkResliceCursorPolyDataAlgorithm *GetResliceCursorAlgorithm(
            )
        
        Set the reslice cursor algorithm. One must be set
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkResliceCursorPicker
        C++: vtkResliceCursorPicker *NewInstance()
        """
        ...
    
    def Pick(self, p_float, p_float_1, p_float_2, vtkRenderer):
        """
        V.Pick(float, float, float, vtkRenderer) -> int
        C++: int Pick(double selectionX, double selectionY,
            double selectionZ, vtkRenderer *renderer) override;
        V.Pick([float, float], [float, float, float], vtkRenderer)
        C++: void Pick(double displayPos[2], double world[3],
            vtkRenderer *ren)
        
        Perform pick operation with selection point provided. Normally
        the first two values are the (x,y) pixel coordinates for the
        pick, and the third value is z=0. The return value will be
        non-zero if something was successfully picked.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkResliceCursorPicker
        C++: static vtkResliceCursorPicker *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetResliceCursorAlgorithm(self, vtkResliceCursorPolyDataAlgorithm):
        """
        V.SetResliceCursorAlgorithm(vtkResliceCursorPolyDataAlgorithm)
        C++: virtual void SetResliceCursorAlgorithm(
            vtkResliceCursorPolyDataAlgorithm *)
        
        Set the reslice cursor algorithm. One must be set
        """
        ...
    
    def SetTransformMatrix(self, vtkMatrix4x4):
        """
        V.SetTransformMatrix(vtkMatrix4x4)
        C++: virtual void SetTransformMatrix(vtkMatrix4x4 *)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


