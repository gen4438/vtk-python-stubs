"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkLightRepresentation(vtkWidgetRepresentation):
    """
    vtkLightRepresentation - represent a vtkLight
    
    Superclass: vtkWidgetRepresentation
    
    The vtkLightRepresentation is a representation for the vtkLight. This
    representation consists of a LightPosition sphere with an
    automatically resized radius so it is always visible, a line between
    the LightPosition and the FocalPoint and a cone of angle ConeAngle
    when using Positional.
    
    @sa
    vtkLightWidget vtkSphereWidget vtkSphereRepresentation
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def GetConeAngle(self):
        """
        V.GetConeAngle() -> float
        C++: virtual double GetConeAngle()
        
        Set/Get the cone angle, in degrees, for the light. Used only when
        positional.
        """
        ...
    
    def GetFocalPoint(self):
        """
        V.GetFocalPoint() -> (float, float, float)
        C++: virtual double *GetFocalPoint()
        
        Set/Get the coordinates of the focal point of the light
        representation.
        """
        ...
    
    def GetInteractionStateMaxValue(self):
        """
        V.GetInteractionStateMaxValue() -> int
        C++: virtual int GetInteractionStateMaxValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkLightWidget) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetInteractionStateMinValue(self):
        """
        V.GetInteractionStateMinValue() -> int
        C++: virtual int GetInteractionStateMinValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkLightWidget) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetLightColor(self):
        """
        V.GetLightColor() -> (float, float, float)
        C++: double *GetLightColor()
        
        Set/Get the light color.
        """
        ...
    
    def GetLightPosition(self):
        """
        V.GetLightPosition() -> (float, float, float)
        C++: virtual double *GetLightPosition()
        
        Set/Get the coordinates of the position of the light
        representation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetPositional(self):
        """
        V.GetPositional() -> bool
        C++: virtual bool GetPositional()
        
        Set/Get the positional flag. When set to on, a cone will be
        visible.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        Get the property used for all the actors
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLightRepresentation
        C++: vtkLightRepresentation *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def PositionalOff(self):
        """
        V.PositionalOff()
        C++: virtual void PositionalOff()
        
        Set/Get the positional flag. When set to on, a cone will be
        visible.
        """
        ...
    
    def PositionalOn(self):
        """
        V.PositionalOn()
        C++: virtual void PositionalOn()
        
        Set/Get the positional flag. When set to on, a cone will be
        visible.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLightRepresentation
        C++: static vtkLightRepresentation *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetConeAngle(self, p_float):
        """
        V.SetConeAngle(float)
        C++: void SetConeAngle(double angle)
        
        Set/Get the cone angle, in degrees, for the light. Used only when
        positional.
        """
        ...
    
    def SetFocalPoint(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetFocalPoint([float, float, float])
        C++: void SetFocalPoint(double pos[3])
        
        Set/Get the coordinates of the focal point of the light
        representation.
        """
        ...
    
    def SetInteractionState(self, p_int):
        """
        V.SetInteractionState(int)
        C++: virtual void SetInteractionState(int _arg)
        
        The interaction state may be set from a widget (e.g.,
        vtkLightWidget) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def SetLightColor(self, *float):
        """
        V.SetLightColor([float, ...])
        C++: void SetLightColor(double *color)
        
        Set/Get the light color.
        """
        ...
    
    def SetLightPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetLightPosition([float, float, float])
        C++: void SetLightPosition(double pos[3])
        
        Set/Get the coordinates of the position of the light
        representation.
        """
        ...
    
    def SetPositional(self, bool):
        """
        V.SetPositional(bool)
        C++: virtual void SetPositional(bool _arg)
        
        Set/Get the positional flag. When set to on, a cone will be
        visible.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double eventPosition[2])
            override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double eventPosition[2]) override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    MovingFocalPoint = ...
    MovingLight = ...
    MovingPositionalFocalPoint = ...
    Outside = ...
    ScalingConeAngle = ...
    __dict__ = ...
    __vtkname__ = ...


