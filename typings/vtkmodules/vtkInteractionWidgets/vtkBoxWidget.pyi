"""
This type stub file was generated by pyright.
"""

from .vtk3DWidget import vtk3DWidget

class vtkBoxWidget(vtk3DWidget):
    """
    vtkBoxWidget - orthogonal hexahedron 3D widget
    
    Superclass: vtk3DWidget
    
    This 3D widget defines a region of interest that is represented by an
    arbitrarily oriented hexahedron with interior face angles of 90
    degrees (orthogonal faces). The object creates 7 handles that can be
    moused on and manipulated. The first six correspond to the six faces,
    the seventh is in the center of the hexahedron. In addition, a
    bounding box outline is shown, the "faces" of which can be selected
    for object rotation or scaling. A nice feature of the object is that
    the vtkBoxWidget, like any 3D widget, will work with the current
    interactor style. That is, if vtkBoxWidget does not handle an event,
    then all other registered observers (including the interactor style)
    have an opportunity to process the event. Otherwise, the vtkBoxWidget
    will terminate the processing of the event that it handles.
    
    To use this object, just invoke SetInteractor() with the argument of
    the method a vtkRenderWindowInteractor.  You may also wish to invoke
    "PlaceWidget()" to initially position the widget. The interactor will
    act normally until the "i" key (for "interactor") is pressed, at
    which point the vtkBoxWidget will appear. (See superclass
    documentation for information about changing this behavior.) By
    grabbing the six face handles (use the left mouse button), faces can
    be moved. By grabbing the center handle (with the left mouse button),
    the entire hexahedron can be translated. (Translation can also be
    employed by using the "shift-left-mouse-button" combination inside of
    the widget.) Scaling is achieved by using the right mouse button "up"
    the render window (makes the widget bigger) or "down" the render
    window (makes the widget smaller). To rotate vtkBoxWidget, pick a
    face (but not a face handle) and move the left mouse. (Note: the
    mouse button must be held down during manipulation.) Events that
    occur outside of the widget (i.e., no part of the widget is picked)
    are propagated to any other registered obsevers (such as the
    interaction style).  Turn off the widget by pressing the "i" key
    again. (See the superclass documentation on key press activiation.)
    
    The vtkBoxWidget is very flexible. It can be used to select, cut,
    clip, or perform any other operation that depends on an implicit
    function (use the GetPlanes() method); or it can be used to transform
    objects using a linear transformation (use the GetTransform()
    method). Typical usage of the widget is to make use of the
    StartInteractionEvent, InteractionEvent, and EndInteractionEvent
    events. The InteractionEvent is called on mouse motion; the other two
    events are called on button down and button up (either left or right
    button).
    
    Some additional features of this class include the ability to control
    the rendered properties of the widget. You can set the properties of
    the selected and unselected representations of the parts of the
    widget. For example, you can set the property for the handles, faces,
    and outline in their normal and selected states.
    
    The box widget can be oriented by specifying a transformation matrix.
    This transformation is applied to the initial bounding box as defined
    by the PlaceWidget() method. DO NOT ASSUME that the transformation is
    applied to a unit box centered at the origin; this is wrong!
    
    @sa
    vtk3DWidget vtkPointWidget vtkLineWidget vtkPlaneWidget
    vtkImplicitPlaneWidget vtkImagePlaneWidget
    """
    def GetFaceProperty(self):
        """
        V.GetFaceProperty() -> vtkProperty
        C++: virtual vtkProperty *GetFaceProperty()
        
        Get the face properties (the faces of the box). The properties of
        the face when selected and normal can be set.
        """
        ...
    
    def GetHandleProperty(self):
        """
        V.GetHandleProperty() -> vtkProperty
        C++: virtual vtkProperty *GetHandleProperty()
        
        Get the handle properties (the little balls are the handles). The
        properties of the handles when selected and normal can be set.
        """
        ...
    
    def GetInsideOut(self):
        """
        V.GetInsideOut() -> int
        C++: virtual vtkTypeBool GetInsideOut()
        
        Set/Get the InsideOut flag. When off, the normals point out of
        the box. When on, the normals point into the hexahedron. 
        InsideOut is off by default.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutlineCursorWires(self):
        """
        V.GetOutlineCursorWires() -> int
        C++: virtual int GetOutlineCursorWires()
        
        Control the representation of the outline. This flag enables the
        cursor lines running between the handles. By default cursor wires
        are on.
        """
        ...
    
    def GetOutlineFaceWires(self):
        """
        V.GetOutlineFaceWires() -> int
        C++: virtual int GetOutlineFaceWires()
        
        Control the representation of the outline. This flag enables face
        wires. By default face wires are off.
        """
        ...
    
    def GetOutlineProperty(self):
        """
        V.GetOutlineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetOutlineProperty()
        
        Get the outline properties (the outline of the box). The
        properties of the outline when selected and normal can be set.
        """
        ...
    
    def GetPlanes(self, vtkPlanes):
        """
        V.GetPlanes(vtkPlanes)
        C++: void GetPlanes(vtkPlanes *planes)
        
        Get the planes describing the implicit function defined by the
        box widget. The user must provide the instance of the class
        vtkPlanes. Note that vtkPlanes is a subclass of
        vtkImplicitFunction, meaning that it can be used by a variety of
        filters to perform clipping, cutting, and selection of data. 
        (The direction of the normals of the planes can be reversed
        enabling the InsideOut flag.)
        """
        ...
    
    def GetPolyData(self, vtkPolyData):
        """
        V.GetPolyData(vtkPolyData)
        C++: void GetPolyData(vtkPolyData *pd)
        
        Grab the polydata (including points) that define the box widget.
        The polydata consists of 6 quadrilateral faces and 15 points. The
        first eight points define the eight corner vertices; the next six
        define the
        -x,+x, -y,+y, -z,+z face points; and the final point (the 15th
            out of 15 points) defines the center of the hexahedron. These
        point values are guaranteed to be up-to-date when either the
            InteractionEvent or EndInteractionEvent events are invoked.
            The user provides the vtkPolyData and the points and cells
            are added to it.
        """
        ...
    
    def GetRotationEnabled(self):
        """
        V.GetRotationEnabled() -> int
        C++: virtual vtkTypeBool GetRotationEnabled()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def GetScalingEnabled(self):
        """
        V.GetScalingEnabled() -> int
        C++: virtual vtkTypeBool GetScalingEnabled()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def GetSelectedFaceProperty(self):
        """
        V.GetSelectedFaceProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedFaceProperty()
        
        Get the face properties (the faces of the box). The properties of
        the face when selected and normal can be set.
        """
        ...
    
    def GetSelectedHandleProperty(self):
        """
        V.GetSelectedHandleProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedHandleProperty()
        
        Get the handle properties (the little balls are the handles). The
        properties of the handles when selected and normal can be set.
        """
        ...
    
    def GetSelectedOutlineProperty(self):
        """
        V.GetSelectedOutlineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedOutlineProperty()
        
        Get the outline properties (the outline of the box). The
        properties of the outline when selected and normal can be set.
        """
        ...
    
    def GetTransform(self, vtkTransform):
        """
        V.GetTransform(vtkTransform)
        C++: virtual void GetTransform(vtkTransform *t)
        
        Retrieve a linear transform characterizing the transformation of
        the box. Note that the transformation is relative to where
        PlaceWidget was initially called. This method modifies the
        transform provided. The transform can be used to control the
        position of vtkProp3D's, as well as other transformation
        operations (e.g., vtkTransformPolyData).
        """
        ...
    
    def GetTranslationEnabled(self):
        """
        V.GetTranslationEnabled() -> int
        C++: virtual vtkTypeBool GetTranslationEnabled()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def HandlesOff(self):
        """
        V.HandlesOff()
        C++: void HandlesOff()
        
        Switches handles (the spheres) on or off by manipulating the
        actor visibility.
        """
        ...
    
    def HandlesOn(self):
        """
        V.HandlesOn()
        C++: void HandlesOn()
        
        Switches handles (the spheres) on or off by manipulating the
        actor visibility.
        """
        ...
    
    def InsideOutOff(self):
        """
        V.InsideOutOff()
        C++: virtual void InsideOutOff()
        
        Set/Get the InsideOut flag. When off, the normals point out of
        the box. When on, the normals point into the hexahedron. 
        InsideOut is off by default.
        """
        ...
    
    def InsideOutOn(self):
        """
        V.InsideOutOn()
        C++: virtual void InsideOutOn()
        
        Set/Get the InsideOut flag. When off, the normals point out of
        the box. When on, the normals point into the hexahedron. 
        InsideOut is off by default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBoxWidget
        C++: vtkBoxWidget *NewInstance()
        """
        ...
    
    def OutlineCursorWiresOff(self):
        """
        V.OutlineCursorWiresOff()
        C++: void OutlineCursorWiresOff()
        
        Control the representation of the outline. This flag enables the
        cursor lines running between the handles. By default cursor wires
        are on.
        """
        ...
    
    def OutlineCursorWiresOn(self):
        """
        V.OutlineCursorWiresOn()
        C++: void OutlineCursorWiresOn()
        
        Control the representation of the outline. This flag enables the
        cursor lines running between the handles. By default cursor wires
        are on.
        """
        ...
    
    def OutlineFaceWiresOff(self):
        """
        V.OutlineFaceWiresOff()
        C++: void OutlineFaceWiresOff()
        
        Control the representation of the outline. This flag enables face
        wires. By default face wires are off.
        """
        ...
    
    def OutlineFaceWiresOn(self):
        """
        V.OutlineFaceWiresOn()
        C++: void OutlineFaceWiresOn()
        
        Control the representation of the outline. This flag enables face
        wires. By default face wires are off.
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        V.PlaceWidget()
        C++: void PlaceWidget() override;
        V.PlaceWidget(float, float, float, float, float, float)
        C++: void PlaceWidget(double xmin, double xmax, double ymin,
            double ymax, double zmin, double zmax) override;
        
        Methods that satisfy the superclass' API.
        """
        ...
    
    def RotationEnabledOff(self):
        """
        V.RotationEnabledOff()
        C++: virtual void RotationEnabledOff()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def RotationEnabledOn(self):
        """
        V.RotationEnabledOn()
        C++: virtual void RotationEnabledOn()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBoxWidget
        C++: static vtkBoxWidget *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalingEnabledOff(self):
        """
        V.ScalingEnabledOff()
        C++: virtual void ScalingEnabledOff()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def ScalingEnabledOn(self):
        """
        V.ScalingEnabledOn()
        C++: virtual void ScalingEnabledOn()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        Methods that satisfy the superclass' API.
        """
        ...
    
    def SetInsideOut(self, p_int):
        """
        V.SetInsideOut(int)
        C++: virtual void SetInsideOut(vtkTypeBool _arg)
        
        Set/Get the InsideOut flag. When off, the normals point out of
        the box. When on, the normals point into the hexahedron. 
        InsideOut is off by default.
        """
        ...
    
    def SetOutlineCursorWires(self, p_int):
        """
        V.SetOutlineCursorWires(int)
        C++: void SetOutlineCursorWires(int)
        
        Control the representation of the outline. This flag enables the
        cursor lines running between the handles. By default cursor wires
        are on.
        """
        ...
    
    def SetOutlineFaceWires(self, p_int):
        """
        V.SetOutlineFaceWires(int)
        C++: void SetOutlineFaceWires(int)
        
        Control the representation of the outline. This flag enables face
        wires. By default face wires are off.
        """
        ...
    
    def SetRotationEnabled(self, p_int):
        """
        V.SetRotationEnabled(int)
        C++: virtual void SetRotationEnabled(vtkTypeBool _arg)
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def SetScalingEnabled(self, p_int):
        """
        V.SetScalingEnabled(int)
        C++: virtual void SetScalingEnabled(vtkTypeBool _arg)
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def SetTransform(self, vtkTransform):
        """
        V.SetTransform(vtkTransform)
        C++: virtual void SetTransform(vtkTransform *t)
        
        Set the position, scale and orientation of the box widget using
        the transform specified. Note that the transformation is relative
        to where PlaceWidget was initially called (i.e., the original
        bounding box).
        """
        ...
    
    def SetTranslationEnabled(self, p_int):
        """
        V.SetTranslationEnabled(int)
        C++: virtual void SetTranslationEnabled(vtkTypeBool _arg)
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def TranslationEnabledOff(self):
        """
        V.TranslationEnabledOff()
        C++: virtual void TranslationEnabledOff()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def TranslationEnabledOn(self):
        """
        V.TranslationEnabledOn()
        C++: virtual void TranslationEnabledOn()
        
        Control the behavior of the widget. Translation, rotation, and
        scaling can all be enabled and disabled.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


