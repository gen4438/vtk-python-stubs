"""
This type stub file was generated by pyright.
"""

from .vtkPointPlacer import vtkPointPlacer

class vtkTerrainDataPointPlacer(vtkPointPlacer):
    """
    vtkTerrainDataPointPlacer - Place points on terrain data
    
    Superclass: vtkPointPlacer
    
    vtkTerrainDataPointPlacer dictates the placement of points on height
    field data. The class takes as input the list of props that represent
    the terrain in a rendered scene. A height offset can be specified to
    dicatate the placement of points at a certain height above the
    surface.
    
    @par Usage: A typical usage of this class is as
    follows:pointPlacer->AddProp(demActor);    // the actor(s) containing
    the terrain.
    rep->SetPointPlacer(pointPlacer);
    pointPlacer->SetHeightOffset( 100 );
    
    @sa
    vtkPointPlacer vtkTerrainContourLineInterpolator
    """
    def AddProp(self, vtkProp):
        """
        V.AddProp(vtkProp)
        C++: virtual void AddProp(vtkProp *)
        """
        ...
    
    def ComputeWorldPosition(self, vtkRenderer, p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float, float,
             float], [float, float, float, float, float, float, float,
            float, float]) -> int
        C++: int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double worldPos[3],
            double worldOrient[9]) override;
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float, float,
             float], [float, float, float], [float, float, float, float,
            float, float, float, float, float]) -> int
        C++: int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double refWorldPos[3],
            double worldPos[3], double worldOrient[9]) override;
        
        Given a renderer and a display position in pixel coordinates,
        compute the world position and orientation where this point will
        be placed. This method is typically used by the representation to
        place the point initially. For the Terrain point placer this
        computes world points that lie at the specified height above the
        terrain.
        """
        ...
    
    def GetHeightOffset(self):
        """
        V.GetHeightOffset() -> float
        C++: virtual double GetHeightOffset()
        
        This is the height above (or below) the terrain that the dictated
        point should be placed. Positive values indicate distances above
        the terrain; negative values indicate distances below the
        terrain. The default is 0.0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetPropPicker(self):
        """
        V.GetPropPicker() -> vtkPropPicker
        C++: virtual vtkPropPicker *GetPropPicker()
        
        Get the Prop picker.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTerrainDataPointPlacer
        C++: vtkTerrainDataPointPlacer *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def RemoveAllProps(self):
        """
        V.RemoveAllProps()
        C++: virtual void RemoveAllProps()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTerrainDataPointPlacer
        C++: static vtkTerrainDataPointPlacer *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetHeightOffset(self, p_float):
        """
        V.SetHeightOffset(float)
        C++: virtual void SetHeightOffset(double _arg)
        
        This is the height above (or below) the terrain that the dictated
        point should be placed. Positive values indicate distances above
        the terrain; negative values indicate distances below the
        terrain. The default is 0.0.
        """
        ...
    
    def ValidateDisplayPosition(self, vtkRenderer, p_float=..., p_float=...):
        """
        V.ValidateDisplayPosition(vtkRenderer, [float, float]) -> int
        C++: int ValidateDisplayPosition(vtkRenderer *,
            double displayPos[2]) override;
        
        Given a display position, check the validity of this position.
        """
        ...
    
    def ValidateWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.ValidateWorldPosition([float, float, float]) -> int
        C++: int ValidateWorldPosition(double worldPos[3]) override;
        V.ValidateWorldPosition([float, float, float], [float, float,
            float, float, float, float, float, float, float]) -> int
        C++: int ValidateWorldPosition(double worldPos[3],
            double worldOrient[9]) override;
        
        Given a world position check the validity of this position
        according to the constraints of the placer
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


