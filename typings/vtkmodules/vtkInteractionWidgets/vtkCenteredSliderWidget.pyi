"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkCenteredSliderWidget(vtkAbstractWidget):
    """
    vtkCenteredSliderWidget - set a value by manipulating a slider
    
    Superclass: vtkAbstractWidget
    
    The vtkCenteredSliderWidget is used to adjust a scalar value in an
    application. This class measures deviations form the center point on
    the slider. Moving the slider modifies the value of the widget, which
    can be used to set parameters on other objects. Note that the actual
    appearance of the widget depends on the specific representation for
    the widget.
    
    To use this widget, set the widget representation. The representation
    is assumed to consist of a tube, two end caps, and a slider (the
    details may vary depending on the particulars of the representation).
    Then in the representation you will typically set minimum and maximum
    value, as well as the current value. The position of the slider must
    also be set, as well as various properties.
    
    Note that the value should be obtain from the widget, not from the
    representation. Also note that Minimum and Maximum values are in
    terms of value per second. The value you get from this widget's
    GetValue method is multiplied by time.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    If the slider bead is selected:
      LeftButtonPressEvent - select slider (if on slider)
      LeftButtonReleaseEvent - release slider (if selected)
      MouseMoveEvent - move slider If the end caps or slider tube are
    selected:
      LeftButtonPressEvent - move (or animate) to cap or point on tube; 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkCenteredSliderWidget's widget
    events:
    
    
      vtkWidgetEvent::Select -- some part of the widget has been selected
      vtkWidgetEvent::EndSelect -- the selection process has completed
      vtkWidgetEvent::Move -- a request for slider motion has been
    invoked 
    
    @par Event Bindings: In turn, when these widget events are processed,
    the vtkCenteredSliderWidget invokes the following VTK events on
    itself (which observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (on vtkWidgetEvent::Select)
      vtkCommand::EndInteractionEvent (on vtkWidgetEvent::EndSelect)
      vtkCommand::InteractionEvent (on vtkWidgetEvent::Move)
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard macros.
        """
        ...
    
    def GetSliderRepresentation(self):
        """
        V.GetSliderRepresentation() -> vtkSliderRepresentation
        C++: vtkSliderRepresentation *GetSliderRepresentation()
        
        Return the representation as a vtkSliderRepresentation.
        """
        ...
    
    def GetValue(self):
        """
        V.GetValue() -> float
        C++: double GetValue()
        
        Get the value fo this widget.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard macros.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCenteredSliderWidget
        C++: vtkCenteredSliderWidget *NewInstance()
        
        Standard macros.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCenteredSliderWidget
        C++: static vtkCenteredSliderWidget *SafeDownCast(
            vtkObjectBase *o)
        
        Standard macros.
        """
        ...
    
    def SetRepresentation(self, vtkSliderRepresentation):
        """
        V.SetRepresentation(vtkSliderRepresentation)
        C++: void SetRepresentation(vtkSliderRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


