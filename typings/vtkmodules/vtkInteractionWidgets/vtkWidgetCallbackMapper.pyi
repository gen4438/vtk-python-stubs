"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkWidgetCallbackMapper(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkWidgetCallbackMapper - map widget events into callbacks
    
    Superclass: vtkObject
    
    vtkWidgetCallbackMapper maps widget events (defined in
    vtkWidgetEvent.h) into static class methods, and provides facilities
    to invoke the methods. This class is templated and meant to be used
    as an internal helper class by the widget classes. The class works in
    combination with the class vtkWidgetEventTranslator, which translates
    VTK events into widget events.
    
    @sa
    vtkWidgetEvent vtkWidgetEventTranslator
    """
    def GetEventTranslator(self):
        """
        V.GetEventTranslator() -> vtkWidgetEventTranslator
        C++: virtual vtkWidgetEventTranslator *GetEventTranslator()
        
        Specify the vtkWidgetEventTranslator to coordinate with.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard macros.
        """
        ...
    
    def InvokeCallback(self, p_int):
        """
        V.InvokeCallback(int)
        C++: void InvokeCallback(unsigned long widgetEvent)
        
        This method invokes the callback given a widget event. A non-zero
        value is returned if the listed event is registered.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard macros.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWidgetCallbackMapper
        C++: vtkWidgetCallbackMapper *NewInstance()
        
        Standard macros.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWidgetCallbackMapper
        C++: static vtkWidgetCallbackMapper *SafeDownCast(
            vtkObjectBase *o)
        
        Standard macros.
        """
        ...
    
    def SetEventTranslator(self, vtkWidgetEventTranslator):
        """
        V.SetEventTranslator(vtkWidgetEventTranslator)
        C++: void SetEventTranslator(vtkWidgetEventTranslator *t)
        
        Specify the vtkWidgetEventTranslator to coordinate with.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


