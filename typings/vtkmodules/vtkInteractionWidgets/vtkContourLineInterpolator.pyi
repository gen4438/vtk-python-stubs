"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkContourLineInterpolator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkContourLineInterpolator - Defines API for interpolating/modifying
    nodes from a vtkContourRepresentation
    
    Superclass: vtkObject
    
    vtkContourLineInterpolator is an abstract base class for
    interpolators that are used by the vtkContourRepresentation class to
    interpolate and/or modify nodes in a contour. Subclasses must
    override the virtual method InterpolateLine. This is used by the
    contour representation to give the interpolator a chance to define an
    interpolation scheme between nodes. See
    vtkBezierContourLineInterpolator for a concrete implementation.
    Subclasses may also override UpdateNode. This provides a way for the
    representation to give the interpolator a chance to modify the nodes,
    as the user constructs the contours. For instance, a sticky contour
    widget may be implemented that moves nodes to nearby regions of high
    gradient, to be used in contour-guided segmentation.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetSpan(self, p_int, vtkIntArray, vtkContourRepresentation):
        """
        V.GetSpan(int, vtkIntArray, vtkContourRepresentation)
        C++: virtual void GetSpan(int nodeIndex, vtkIntArray *nodeIndices,
             vtkContourRepresentation *rep)
        
        Span of the interpolator. ie. the number of control points its
        supposed to interpolate given a node.
        
        * The first argument is the current nodeIndex.
        * ie, you'd be trying to interpolate between nodes "nodeIndex"
          and
        * "nodeIndex-1", unless you're closing the contour in which case,
          you're
        * trying to interpolate "nodeIndex" and "Node=0".
        
        * The node span is returned in a vtkIntArray. The default node
          span is 1
        * (ie. nodeIndices is a 2 tuple (nodeIndex, nodeIndex-1)).
          However, it
        * need not always be 1. For instance, cubic spline interpolators,
        which
        * have a span of 3 control points, it can be larger. See
        * vtkBezierContourLineInterpolator for instance.
        """
        ...
    
    def InterpolateLine(self, vtkRenderer, vtkContourRepresentation, p_int, p_int_1):
        """
        V.InterpolateLine(vtkRenderer, vtkContourRepresentation, int, int)
             -> int
        C++: virtual int InterpolateLine(vtkRenderer *ren,
            vtkContourRepresentation *rep, int idx1, int idx2)
        
        Subclasses that wish to interpolate a line segment must implement
        this. For instance vtkBezierContourLineInterpolator adds nodes
        between idx1 and idx2, that allow the contour to adhere to a
        bezier curve.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContourLineInterpolator
        C++: vtkContourLineInterpolator *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContourLineInterpolator
        C++: static vtkContourLineInterpolator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def UpdateNode(self, vtkRenderer, vtkContourRepresentation, *float, **kwargs):
        """
        V.UpdateNode(vtkRenderer, vtkContourRepresentation, [float, ...],
            int) -> int
        C++: virtual int UpdateNode(vtkRenderer *,
            vtkContourRepresentation *, double *node, int idx)
        
        The interpolator is given a chance to update the node. For
        instance, the vtkImageContourLineInterpolator updates the idx'th
        node in the contour, so it automatically sticks to edges in the
        vicinity as the user constructs the contour. Returns 0 if the
        node (world position) is unchanged.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


