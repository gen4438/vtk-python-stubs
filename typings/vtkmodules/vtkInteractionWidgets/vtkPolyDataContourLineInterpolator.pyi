"""
This type stub file was generated by pyright.
"""

from .vtkContourLineInterpolator import vtkContourLineInterpolator

class vtkPolyDataContourLineInterpolator(vtkContourLineInterpolator):
    """
    vtkPolyDataContourLineInterpolator - Contour interpolator for
    polygonal data
    
    Superclass: vtkContourLineInterpolator
    
    vtkPolyDataContourLineInterpolator is an abstract base class for
    contour line interpolators that interpolate on polygonal data.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetPolys(self):
        """
        V.GetPolys() -> vtkPolyDataCollection
        C++: virtual vtkPolyDataCollection *GetPolys()
        
        Be sure to add polydata on which you wish to place points to this
        list or they will not be considered for placement.
        """
        ...
    
    def InterpolateLine(self, vtkRenderer, vtkContourRepresentation, p_int, p_int_1):
        """
        V.InterpolateLine(vtkRenderer, vtkContourRepresentation, int, int)
             -> int
        C++: int InterpolateLine(vtkRenderer *ren,
            vtkContourRepresentation *rep, int idx1, int idx2)
            override = 0;
        
        Subclasses that wish to interpolate a line segment must implement
        this. For instance vtkBezierContourLineInterpolator adds nodes
        between idx1 and idx2, that allow the contour to adhere to a
        bezier curve.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataContourLineInterpolator
        C++: vtkPolyDataContourLineInterpolator *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkPolyDataContourLineInterpolator
        C++: static vtkPolyDataContourLineInterpolator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def UpdateNode(self, vtkRenderer, vtkContourRepresentation, *float, **kwargs):
        """
        V.UpdateNode(vtkRenderer, vtkContourRepresentation, [float, ...],
            int) -> int
        C++: int UpdateNode(vtkRenderer *, vtkContourRepresentation *,
            double *node, int idx) override = 0;
        
        The interpolator is given a chance to update the node.
        vtkImageContourLineInterpolator updates the idx'th node in the
        contour, so it automatically sticks to edges in the vicinity as
        the user constructs the contour. Returns 0 if the node (world
        position) is unchanged.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


