"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkSphereRepresentation(vtkWidgetRepresentation):
    """
    vtkSphereRepresentation - a class defining the representation for the
    vtkSphereWidget2
    
    Superclass: vtkWidgetRepresentation
    
    This class is a concrete representation for the vtkSphereWidget2. It
    represents a sphere with an optional handle.  Through interaction
    with the widget, the sphere can be arbitrarily positioned and scaled
    in 3D space; and the handle can be moved on the surface of the
    sphere. Typically the vtkSphereWidget2/vtkSphereRepresentation are
    used to position a sphere for the purpose of extracting, cutting or
    clipping data; or the handle is moved on the sphere to position a
    light or camera.
    
    To use this representation, you normally use the PlaceWidget() method
    to position the widget at a specified region in space. It is also
    possible to set the center of the sphere, a radius, and/or a handle
    position.
    
    @warning
    Note that the representation is overconstrained in that the center
    and radius of the sphere can be defined, this information plus the
    handle direction defines the geometry of the representation.
    Alternatively, the user may specify the center of the sphere plus the
    handle position.
    
    @warning
    This class, and vtkSphereWidget2, are second generation VTK widgets.
    An earlier version of this functionality was defined in the class
    vtkSphereWidget.
    
    @sa
    vtkSphereWidget2 vtkSphereWidget
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        Note that a version of place widget is available where the center
        and handle position are specified.
        """
        ...
    
    def CenterCursorOff(self):
        """
        V.CenterCursorOff()
        C++: virtual void CenterCursorOff()
        
        Enable/disable a center cursor Default is disabled
        """
        ...
    
    def CenterCursorOn(self):
        """
        V.CenterCursorOn()
        C++: virtual void CenterCursorOn()
        
        Enable/disable a center cursor Default is disabled
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        Note that a version of place widget is available where the center
        and handle position are specified.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        Note that a version of place widget is available where the center
        and handle position are specified.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: double *GetCenter()
        V.GetCenter([float, float, float])
        C++: void GetCenter(double xyz[3])
        """
        ...
    
    def GetCenterCursor(self):
        """
        V.GetCenterCursor() -> bool
        C++: virtual bool GetCenterCursor()
        
        Enable/disable a center cursor Default is disabled
        """
        ...
    
    def GetHandleDirection(self):
        """
        V.GetHandleDirection() -> (float, float, float)
        C++: virtual double *GetHandleDirection()
        
        Set/Get the direction vector of the handle relative to the center
        of the sphere. Setting the direction may affect the position of
        the handle but will not affect the radius or position of the
        sphere.
        """
        ...
    
    def GetHandlePosition(self):
        """
        V.GetHandlePosition() -> (float, float, float)
        C++: virtual double *GetHandlePosition()
        
        Set/Get the position of the handle. Note that this may adjust the
        radius of the sphere and the handle direction.
        """
        ...
    
    def GetHandleProperty(self):
        """
        V.GetHandleProperty() -> vtkProperty
        C++: virtual vtkProperty *GetHandleProperty()
        
        Get the handle properties (the little ball on the sphere is the
        handle). The properties of the handle when selected and
        unselected can be manipulated.
        """
        ...
    
    def GetHandleText(self):
        """
        V.GetHandleText() -> int
        C++: virtual vtkTypeBool GetHandleText()
        
        Enable/disable a label that displays the location of the handle
        in spherical coordinates (radius,theta,phi). The two angles,
        theta and phi, are displayed in degrees. Note that phi is
        measured from the north pole down towards the equator; and theta
        is the angle around the north/south axis.
        """
        ...
    
    def GetHandleTextProperty(self):
        """
        V.GetHandleTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetHandleTextProperty()
        
        Get the handle text property. This can be used to control the
        appearance of the handle text.
        """
        ...
    
    def GetHandleVisibility(self):
        """
        V.GetHandleVisibility() -> int
        C++: virtual vtkTypeBool GetHandleVisibility()
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type information and to print out the
        contents of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type information and to print out the
        contents of the class.
        """
        ...
    
    def GetPhiResolution(self):
        """
        V.GetPhiResolution() -> int
        C++: int GetPhiResolution()
        """
        ...
    
    def GetPolyData(self, vtkPolyData):
        """
        V.GetPolyData(vtkPolyData)
        C++: void GetPolyData(vtkPolyData *pd)
        
        Grab the polydata (including points) that defines the sphere. 
        The polydata consists of n+1 points, where n is the resolution of
        the sphere. These point values are guaranteed to be up-to-date
        when either the InteractionEvent or EndInteraction events are
        invoked. The user provides the vtkPolyData and the points and
        polysphere are added to it.
        """
        ...
    
    def GetRadialLine(self):
        """
        V.GetRadialLine() -> int
        C++: virtual vtkTypeBool GetRadialLine()
        
        Enable/disable a radial line segment that joins the center of the
        outer sphere and the handle.
        """
        ...
    
    def GetRadialLineProperty(self):
        """
        V.GetRadialLineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetRadialLineProperty()
        
        Get the property of the radial line. This can be used to control
        the appearance of the optional line connecting the center to the
        handle.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: double GetRadius()
        """
        ...
    
    def GetRepresentation(self):
        """
        V.GetRepresentation() -> int
        C++: virtual int GetRepresentation()
        
        Set the representation (i.e., appearance) of the sphere.
        Different representations are useful depending on the
        application.
        """
        ...
    
    def GetRepresentationMaxValue(self):
        """
        V.GetRepresentationMaxValue() -> int
        C++: virtual int GetRepresentationMaxValue()
        
        Set the representation (i.e., appearance) of the sphere.
        Different representations are useful depending on the
        application.
        """
        ...
    
    def GetRepresentationMinValue(self):
        """
        V.GetRepresentationMinValue() -> int
        C++: virtual int GetRepresentationMinValue()
        
        Set the representation (i.e., appearance) of the sphere.
        Different representations are useful depending on the
        application.
        """
        ...
    
    def GetSelectedHandleProperty(self):
        """
        V.GetSelectedHandleProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedHandleProperty()
        
        Get the handle properties (the little ball on the sphere is the
        handle). The properties of the handle when selected and
        unselected can be manipulated.
        """
        ...
    
    def GetSelectedSphereProperty(self):
        """
        V.GetSelectedSphereProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedSphereProperty()
        
        Get the sphere properties. The properties of the sphere when
        selected and unselected can be manipulated.
        """
        ...
    
    def GetSphere(self, vtkSphere):
        """
        V.GetSphere(vtkSphere)
        C++: void GetSphere(vtkSphere *sphere)
        
        Get the spherical implicit function defined by this widget.  Note
        that vtkSphere is a subclass of vtkImplicitFunction, meaning that
        it can be used by a variety of filters to perform clipping,
        cutting, and selection of data.
        """
        ...
    
    def GetSphereProperty(self):
        """
        V.GetSphereProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSphereProperty()
        
        Get the sphere properties. The properties of the sphere when
        selected and unselected can be manipulated.
        """
        ...
    
    def GetThetaResolution(self):
        """
        V.GetThetaResolution() -> int
        C++: int GetThetaResolution()
        """
        ...
    
    def GetTranslationAxis(self):
        """
        V.GetTranslationAxis() -> int
        C++: virtual int GetTranslationAxis()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTranslationAxisMaxValue(self):
        """
        V.GetTranslationAxisMaxValue() -> int
        C++: virtual int GetTranslationAxisMaxValue()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTranslationAxisMinValue(self):
        """
        V.GetTranslationAxisMinValue() -> int
        C++: virtual int GetTranslationAxisMinValue()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def HandleTextOff(self):
        """
        V.HandleTextOff()
        C++: virtual void HandleTextOff()
        
        Enable/disable a label that displays the location of the handle
        in spherical coordinates (radius,theta,phi). The two angles,
        theta and phi, are displayed in degrees. Note that phi is
        measured from the north pole down towards the equator; and theta
        is the angle around the north/south axis.
        """
        ...
    
    def HandleTextOn(self):
        """
        V.HandleTextOn()
        C++: virtual void HandleTextOn()
        
        Enable/disable a label that displays the location of the handle
        in spherical coordinates (radius,theta,phi). The two angles,
        theta and phi, are displayed in degrees. Note that phi is
        measured from the north pole down towards the equator; and theta
        is the angle around the north/south axis.
        """
        ...
    
    def HandleVisibilityOff(self):
        """
        V.HandleVisibilityOff()
        C++: virtual void HandleVisibilityOff()
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def HandleVisibilityOn(self):
        """
        V.HandleVisibilityOn()
        C++: virtual void HandleVisibilityOn()
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Methods supporting, and required by, the rendering process.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type information and to print out the
        contents of the class.
        """
        ...
    
    def IsTranslationConstrained(self):
        """
        V.IsTranslationConstrained() -> bool
        C++: bool IsTranslationConstrained()
        
        Returns true if ContrainedAxis
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type information and to print out the
        contents of the class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSphereRepresentation
        C++: vtkSphereRepresentation *NewInstance()
        
        Standard methods for type information and to print out the
        contents of the class.
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        V.PlaceWidget([float, float, float], [float, float, float])
        C++: virtual void PlaceWidget(double center[3],
            double handlePosition[3])
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        Note that a version of place widget is available where the center
        and handle position are specified.
        """
        ...
    
    def RadialLineOff(self):
        """
        V.RadialLineOff()
        C++: virtual void RadialLineOff()
        
        Enable/disable a radial line segment that joins the center of the
        outer sphere and the handle.
        """
        ...
    
    def RadialLineOn(self):
        """
        V.RadialLineOn()
        C++: virtual void RadialLineOn()
        
        Enable/disable a radial line segment that joins the center of the
        outer sphere and the handle.
        """
        ...
    
    def RegisterPickers(self):
        """
        V.RegisterPickers()
        C++: void RegisterPickers() override;
        
        Register internal Pickers in the Picking Manager. Must be
        reimplemented by concrete widget representations to register
        their pickers.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Methods supporting, and required by, the rendering process.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Methods supporting, and required by, the rendering process.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *) override;
        
        Methods supporting, and required by, the rendering process.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Methods supporting, and required by, the rendering process.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSphereRepresentation
        C++: static vtkSphereRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for type information and to print out the
        contents of the class.
        """
        ...
    
    def SetCenter(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetCenter([float, float, float])
        C++: void SetCenter(double c[3])
        V.SetCenter(float, float, float)
        C++: void SetCenter(double x, double y, double z)
        
        Set/Get the center position of the sphere. Note that this may
        adjust the direction from the handle to the center, as well as
        the radius of the sphere.
        """
        ...
    
    def SetCenterCursor(self, bool):
        """
        V.SetCenterCursor(bool)
        C++: virtual void SetCenterCursor(bool _arg)
        
        Enable/disable a center cursor Default is disabled
        """
        ...
    
    def SetHandleDirection(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetHandleDirection([float, float, float])
        C++: void SetHandleDirection(double dir[3])
        V.SetHandleDirection(float, float, float)
        C++: void SetHandleDirection(double dx, double dy, double dz)
        
        Set/Get the direction vector of the handle relative to the center
        of the sphere. Setting the direction may affect the position of
        the handle but will not affect the radius or position of the
        sphere.
        """
        ...
    
    def SetHandlePosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetHandlePosition([float, float, float])
        C++: void SetHandlePosition(double handle[3])
        V.SetHandlePosition(float, float, float)
        C++: void SetHandlePosition(double x, double y, double z)
        
        Set/Get the position of the handle. Note that this may adjust the
        radius of the sphere and the handle direction.
        """
        ...
    
    def SetHandleText(self, p_int):
        """
        V.SetHandleText(int)
        C++: virtual void SetHandleText(vtkTypeBool _arg)
        
        Enable/disable a label that displays the location of the handle
        in spherical coordinates (radius,theta,phi). The two angles,
        theta and phi, are displayed in degrees. Note that phi is
        measured from the north pole down towards the equator; and theta
        is the angle around the north/south axis.
        """
        ...
    
    def SetHandleVisibility(self, p_int):
        """
        V.SetHandleVisibility(int)
        C++: virtual void SetHandleVisibility(vtkTypeBool _arg)
        
        The handle sits on the surface of the sphere and may be moved
        around the surface by picking (left mouse) and then moving. The
        position of the handle can be retrieved, this is useful for
        positioning cameras and lights. By default, the handle is turned
        off.
        """
        ...
    
    def SetInteractionState(self, p_int):
        """
        V.SetInteractionState(int)
        C++: void SetInteractionState(int state)
        
        The interaction state may be set from a widget (e.g.,
        vtkSphereWidget2) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def SetPhiResolution(self, p_int):
        """
        V.SetPhiResolution(int)
        C++: void SetPhiResolution(int r)
        
        Set/Get the resolution of the sphere in the phi direction.
        """
        ...
    
    def SetRadialLine(self, p_int):
        """
        V.SetRadialLine(int)
        C++: virtual void SetRadialLine(vtkTypeBool _arg)
        
        Enable/disable a radial line segment that joins the center of the
        outer sphere and the handle.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: void SetRadius(double r)
        
        Set/Get the radius of sphere. Default is 0.5. Note that this may
        modify the position of the handle based on the handle direction.
        """
        ...
    
    def SetRepresentation(self, p_int):
        """
        V.SetRepresentation(int)
        C++: virtual void SetRepresentation(int _arg)
        
        Set the representation (i.e., appearance) of the sphere.
        Different representations are useful depending on the
        application.
        """
        ...
    
    def SetRepresentationToOff(self):
        """
        V.SetRepresentationToOff()
        C++: void SetRepresentationToOff()
        
        Set the representation (i.e., appearance) of the sphere.
        Different representations are useful depending on the
        application.
        """
        ...
    
    def SetRepresentationToSurface(self):
        """
        V.SetRepresentationToSurface()
        C++: void SetRepresentationToSurface()
        
        Set the representation (i.e., appearance) of the sphere.
        Different representations are useful depending on the
        application.
        """
        ...
    
    def SetRepresentationToWireframe(self):
        """
        V.SetRepresentationToWireframe()
        C++: void SetRepresentationToWireframe()
        
        Set the representation (i.e., appearance) of the sphere.
        Different representations are useful depending on the
        application.
        """
        ...
    
    def SetThetaResolution(self, p_int):
        """
        V.SetThetaResolution(int)
        C++: void SetThetaResolution(int r)
        
        Set/Get the resolution of the sphere in the theta direction.
        """
        ...
    
    def SetTranslationAxis(self, p_int):
        """
        V.SetTranslationAxis(int)
        C++: virtual void SetTranslationAxis(int _arg)
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def SetTranslationAxisOff(self):
        """
        V.SetTranslationAxisOff()
        C++: void SetTranslationAxisOff()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetXTranslationAxisOn(self):
        """
        V.SetXTranslationAxisOn()
        C++: void SetXTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetYTranslationAxisOn(self):
        """
        V.SetYTranslationAxisOn()
        C++: void SetYTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetZTranslationAxisOn(self):
        """
        V.SetZTranslationAxisOn()
        C++: void SetZTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        Note that a version of place widget is available where the center
        and handle position are specified.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double e[2]) override;
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        Note that a version of place widget is available where the center
        and handle position are specified.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    MovingHandle = ...
    OnSphere = ...
    Outside = ...
    Scaling = ...
    Translating = ...
    __dict__ = ...
    __vtkname__ = ...


