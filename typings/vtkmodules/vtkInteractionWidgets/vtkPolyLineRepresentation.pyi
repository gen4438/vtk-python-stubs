"""
This type stub file was generated by pyright.
"""

from .vtkCurveRepresentation import vtkCurveRepresentation

class vtkPolyLineRepresentation(vtkCurveRepresentation):
    """
    vtkPolyLineRepresentation - vtkWidgetRepresentation for a poly line.
    
    Superclass: vtkCurveRepresentation
    
    vtkPolyLineRepresentation is a vtkCurveRepresentation for a poly
    line. This 3D widget defines a poly line that can be interactively
    placed in a scene. The poly line has handles, the number of which can
    be changed, plus the widget can be picked on the poly line itself to
    translate or rotate it in the scene. Based on vtkCurveRepresentation
    @sa
    vtkSplineRepresentation
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Build the representation for the poly line.
        """
        ...
    
    def GetHandlePositions(self):
        """
        V.GetHandlePositions() -> vtkDoubleArray
        C++: vtkDoubleArray *GetHandlePositions() override;
        
        Get the positions of the handles.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetPolyData(self, vtkPolyData):
        """
        V.GetPolyData(vtkPolyData)
        C++: void GetPolyData(vtkPolyData *pd) override;
        
        Grab the polydata (including points) that defines the poly line.
        polydata consists of points and line segments between consecutive
        points. Points are guaranteed to be up-to-date when either the
        InteractionEvent or EndInteraction events are invoked. The user
        provides the vtkPolyData and the points and polyline are added to
        it.
        """
        ...
    
    def GetSummedLength(self):
        """
        V.GetSummedLength() -> float
        C++: double GetSummedLength() override;
        
        Get the true length of the poly line. Calculated as the summed
        lengths of the individual straight line segments.
        """
        ...
    
    def InitializeHandles(self, vtkPoints):
        """
        V.InitializeHandles(vtkPoints)
        C++: void InitializeHandles(vtkPoints *points) override;
        
        Convenience method to allocate and set the handles from a
        vtkPoints instance.  If the first and last points are the same,
        the poly line sets Closed to on and disregards the last point,
        otherwise Closed remains unchanged.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyLineRepresentation
        C++: vtkPolyLineRepresentation *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyLineRepresentation
        C++: static vtkPolyLineRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetNumberOfHandles(self, p_int):
        """
        V.SetNumberOfHandles(int)
        C++: void SetNumberOfHandles(int npts) override;
        
        Set the number of handles for this widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


