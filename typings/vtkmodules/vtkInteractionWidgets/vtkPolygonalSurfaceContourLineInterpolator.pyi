"""
This type stub file was generated by pyright.
"""

from .vtkPolyDataContourLineInterpolator import vtkPolyDataContourLineInterpolator

class vtkPolygonalSurfaceContourLineInterpolator(vtkPolyDataContourLineInterpolator):
    """
    vtkPolygonalSurfaceContourLineInterpolator - Contour interpolator for
    to place points on polygonal surfaces.
    
    Superclass: vtkPolyDataContourLineInterpolator
    
    vtkPolygonalSurfaceContourLineInterpolator interpolates and places
    contour points on polygonal surfaces. The class interpolates nodes by
    computing a graph geodesic laying on the polygonal data. By \em graph
    Geodesic, we mean that the line interpolating the two end points
    traverses along on the mesh edges so as to form the shortest path. A
    Dijkstra algorithm is used to compute the path. See
    vtkDijkstraGraphGeodesicPath.
    
    The class is mean to be used in conjunction with
    vtkPolygonalSurfacePointPlacer. The reason for this weak coupling is
    a performance issue, both classes need to perform a cell pick, and
    coupling avoids multiple cell picks (cell picks are slow).
    
    @warning
    You should have computed cell normals for the input polydata.
    
    @sa
    vtkDijkstraGraphGeodesicPath, vtkPolyDataNormals
    """
    def GetContourPointIds(self, vtkContourRepresentation, vtkIdList):
        """
        V.GetContourPointIds(vtkContourRepresentation, vtkIdList)
        C++: void GetContourPointIds(vtkContourRepresentation *rep,
            vtkIdList *idList)
        
        Get the contour point ids. These point ids correspond to those on
        the polygonal surface
        """
        ...
    
    def GetDistanceOffset(self):
        """
        V.GetDistanceOffset() -> float
        C++: virtual double GetDistanceOffset()
        
        Height offset at which points may be placed on the polygonal
        surface. If you specify a non-zero value here, be sure to have
        computed vertex normals on your input polygonal data. (easily
        done with vtkPolyDataNormals).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def InterpolateLine(self, vtkRenderer, vtkContourRepresentation, p_int, p_int_1):
        """
        V.InterpolateLine(vtkRenderer, vtkContourRepresentation, int, int)
             -> int
        C++: int InterpolateLine(vtkRenderer *ren,
            vtkContourRepresentation *rep, int idx1, int idx2) override;
        
        Subclasses that wish to interpolate a line segment must implement
        this. For instance vtkBezierContourLineInterpolator adds nodes
        between idx1 and idx2, that allow the contour to adhere to a
        bezier curve.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolygonalSurfaceContourLineInterpolator
        C++: vtkPolygonalSurfaceContourLineInterpolator *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkPolygonalSurfaceContourLineInterpolator
        C++: static vtkPolygonalSurfaceContourLineInterpolator *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetDistanceOffset(self, p_float):
        """
        V.SetDistanceOffset(float)
        C++: virtual void SetDistanceOffset(double _arg)
        
        Height offset at which points may be placed on the polygonal
        surface. If you specify a non-zero value here, be sure to have
        computed vertex normals on your input polygonal data. (easily
        done with vtkPolyDataNormals).
        """
        ...
    
    def UpdateNode(self, vtkRenderer, vtkContourRepresentation, *float, **kwargs):
        """
        V.UpdateNode(vtkRenderer, vtkContourRepresentation, [float, ...],
            int) -> int
        C++: int UpdateNode(vtkRenderer *, vtkContourRepresentation *,
            double *node, int idx) override;
        
        The interpolator is given a chance to update the node.
        vtkImageContourLineInterpolator updates the idx'th node in the
        contour, so it automatically sticks to edges in the vicinity as
        the user constructs the contour. Returns 0 if the node (world
        position) is unchanged.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


