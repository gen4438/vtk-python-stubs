"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkResliceCursor(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkResliceCursor - Geometry for a reslice cursor
    
    Superclass: vtkObject
    
    This class represents a reslice cursor. It consists of two cross
    sectional hairs, with an optional thickness. The crosshairs hairs may
    have a hole in the center. These may be translated or rotated
    independent of each other in the view. The result is used to reslice
    the data along these cross sections. This allows the user to perform
    multi-planar thin or thick reformat of the data on an image view,
    rather than a 3D view.
    @sa
    vtkResliceCursorWidget vtkResliceCursor
    vtkResliceCursorPolyDataAlgorithm vtkResliceCursorRepresentation
    vtkResliceCursorThickLineRepresentation vtkResliceCursorActor
    vtkImagePlaneWidget
    """
    def GetAxis(self, p_int):
        """
        V.GetAxis(int) -> (float, ...)
        C++: virtual double *GetAxis(int i)
        
        Get the computed axes directions
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set/Get the cente of the reslice cursor.
        """
        ...
    
    def GetCenterlineAxisPolyData(self, p_int):
        """
        V.GetCenterlineAxisPolyData(int) -> vtkPolyData
        C++: virtual vtkPolyData *GetCenterlineAxisPolyData(int axis)
        
        Get the slab and centerline polydata along an axis
        """
        ...
    
    def GetHole(self):
        """
        V.GetHole() -> int
        C++: virtual int GetHole()
        
        Show a hole in the center of the cursor, so its easy to see the
        pixels within the hole. ON by default
        """
        ...
    
    def GetHoleWidth(self):
        """
        V.GetHoleWidth() -> float
        C++: virtual double GetHoleWidth()
        
        Set the width of the hole in mm
        """
        ...
    
    def GetHoleWidthInPixels(self):
        """
        V.GetHoleWidthInPixels() -> float
        C++: virtual double GetHoleWidthInPixels()
        
        Set the width of the hole in pixels. If set, this will override
        the hole with in mm.
        """
        ...
    
    def GetImage(self):
        """
        V.GetImage() -> vtkImageData
        C++: virtual vtkImageData *GetImage()
        
        Set the image (3D) that we are slicing
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the MTime. Check the MTime of the internal planes as well.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlane(self, p_int):
        """
        V.GetPlane(int) -> vtkPlane
        C++: virtual vtkPlane *GetPlane(int n)
        
        Get the planes that represent normals along the X, Y and Z. The
        argument passed to this method must be an integer in the range
        0-2 (corresponding to the X, Y and Z axes.
        """
        ...
    
    def GetPolyData(self):
        """
        V.GetPolyData() -> vtkPolyData
        C++: virtual vtkPolyData *GetPolyData()
        
        Get the 3D PolyData representation
        """
        ...
    
    def GetThickMode(self):
        """
        V.GetThickMode() -> int
        C++: virtual vtkTypeBool GetThickMode()
        
        Enable disable thick mode. Default is to enable it.
        """
        ...
    
    def GetThickness(self):
        """
        V.GetThickness() -> (float, float, float)
        C++: virtual double *GetThickness()
        
        Set/Get the thickness of the cursor
        """
        ...
    
    def GetXAxis(self):
        """
        V.GetXAxis() -> (float, float, float)
        C++: virtual double *GetXAxis()
        
        Get the computed axes directions
        """
        ...
    
    def GetYAxis(self):
        """
        V.GetYAxis() -> (float, float, float)
        C++: virtual double *GetYAxis()
        
        Get the computed axes directions
        """
        ...
    
    def GetZAxis(self):
        """
        V.GetZAxis() -> (float, float, float)
        C++: virtual double *GetZAxis()
        
        Get the computed axes directions
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkResliceCursor
        C++: vtkResliceCursor *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: virtual void Reset()
        
        Reset the cursor to the default position, ie with the axes,
        normal to each other and axis aligned and with the cursor pointed
        at the center of the image.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkResliceCursor
        C++: static vtkResliceCursor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double, double, double)
        V.SetCenter([float, float, float])
        C++: virtual void SetCenter(double center[3])
        
        Set/Get the cente of the reslice cursor.
        """
        ...
    
    def SetHole(self, p_int):
        """
        V.SetHole(int)
        C++: virtual void SetHole(int _arg)
        
        Show a hole in the center of the cursor, so its easy to see the
        pixels within the hole. ON by default
        """
        ...
    
    def SetHoleWidth(self, p_float):
        """
        V.SetHoleWidth(float)
        C++: virtual void SetHoleWidth(double _arg)
        
        Set the width of the hole in mm
        """
        ...
    
    def SetHoleWidthInPixels(self, p_float):
        """
        V.SetHoleWidthInPixels(float)
        C++: virtual void SetHoleWidthInPixels(double _arg)
        
        Set the width of the hole in pixels. If set, this will override
        the hole with in mm.
        """
        ...
    
    def SetImage(self, vtkImageData):
        """
        V.SetImage(vtkImageData)
        C++: virtual void SetImage(vtkImageData *)
        
        Set the image (3D) that we are slicing
        """
        ...
    
    def SetThickMode(self, p_int):
        """
        V.SetThickMode(int)
        C++: virtual void SetThickMode(vtkTypeBool _arg)
        
        Enable disable thick mode. Default is to enable it.
        """
        ...
    
    def SetThickness(self, p_float, p_float_1, p_float_2):
        """
        V.SetThickness(float, float, float)
        C++: virtual void SetThickness(double _arg1, double _arg2,
            double _arg3)
        V.SetThickness((float, float, float))
        C++: virtual void SetThickness(const double _arg[3])
        
        Set/Get the thickness of the cursor
        """
        ...
    
    def SetXAxis(self, p_float, p_float_1, p_float_2):
        """
        V.SetXAxis(float, float, float)
        C++: virtual void SetXAxis(double _arg1, double _arg2,
            double _arg3)
        V.SetXAxis((float, float, float))
        C++: virtual void SetXAxis(const double _arg[3])
        
        Get the computed axes directions
        """
        ...
    
    def SetYAxis(self, p_float, p_float_1, p_float_2):
        """
        V.SetYAxis(float, float, float)
        C++: virtual void SetYAxis(double _arg1, double _arg2,
            double _arg3)
        V.SetYAxis((float, float, float))
        C++: virtual void SetYAxis(const double _arg[3])
        
        Get the computed axes directions
        """
        ...
    
    def SetZAxis(self, p_float, p_float_1, p_float_2):
        """
        V.SetZAxis(float, float, float)
        C++: virtual void SetZAxis(double _arg1, double _arg2,
            double _arg3)
        V.SetZAxis((float, float, float))
        C++: virtual void SetZAxis(const double _arg[3])
        
        Get the computed axes directions
        """
        ...
    
    def ThickModeOff(self):
        """
        V.ThickModeOff()
        C++: virtual void ThickModeOff()
        
        Enable disable thick mode. Default is to enable it.
        """
        ...
    
    def ThickModeOn(self):
        """
        V.ThickModeOn()
        C++: virtual void ThickModeOn()
        
        Enable disable thick mode. Default is to enable it.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: virtual void Update()
        
        Build the polydata
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


