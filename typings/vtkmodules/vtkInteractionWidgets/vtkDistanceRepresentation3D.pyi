"""
This type stub file was generated by pyright.
"""

from .vtkDistanceRepresentation import vtkDistanceRepresentation

class vtkDistanceRepresentation3D(vtkDistanceRepresentation):
    """
    vtkDistanceRepresentation3D - represent the vtkDistanceWidget
    
    Superclass: vtkDistanceRepresentation
    
    The vtkDistanceRepresentation3D is a representation for the
    vtkDistanceWidget. This representation consists of a measuring line
    (axis) and two vtkHandleWidgets to place the end points of the line.
    Note that this particular widget draws its representation in 3D
    space, so the widget can be occluded.
    
    @sa
    vtkDistanceWidget vtkDistanceRepresentation
    vtkDistanceRepresentation2D
    """
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Method to satisfy superclasses' API.
        """
        ...
    
    def GetDistance(self):
        """
        V.GetDistance() -> float
        C++: double GetDistance() override;
        
        Satisfy the superclasses API.
        """
        ...
    
    def GetGlyphActor(self):
        """
        V.GetGlyphActor() -> vtkActor
        C++: virtual vtkActor *GetGlyphActor()
        
        Convenience method to get the glyph actor. Using this it is
        possible to control the appearance of the glyphs.
        """
        ...
    
    def GetGlyphScale(self):
        """
        V.GetGlyphScale() -> float
        C++: virtual double GetGlyphScale()
        
        Scale the glyphs used as tick marks. By default it is 1/40th of
        the length.
        """
        ...
    
    def GetLabelActor(self):
        """
        V.GetLabelActor() -> vtkFollower
        C++: virtual vtkFollower *GetLabelActor()
        
        Convenience method Get the label actor. It is possible to control
        the appearance of the label.
        """
        ...
    
    def GetLabelPosition(self):
        """
        V.GetLabelPosition() -> float
        C++: virtual double GetLabelPosition()
        
        Set/Get position of the label title in normalized coordinates
        [0,1]. 0 is at the start of the line whereas 1 is at the end.
        """
        ...
    
    def GetLabelProperty(self):
        """
        V.GetLabelProperty() -> vtkProperty
        C++: virtual vtkProperty *GetLabelProperty()
        
        Get the distance annotation property
        """
        ...
    
    def GetLabelScale(self):
        """
        V.GetLabelScale() -> (float, ...)
        C++: virtual double *GetLabelScale()
        
        Scale text (font size along each dimension). This helps control
        the appearance of the 3D text.
        """
        ...
    
    def GetLineProperty(self):
        """
        V.GetLineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetLineProperty()
        
        Convenience method to get the line actor property.
        """
        ...
    
    def GetMaximumNumberOfRulerTicks(self):
        """
        V.GetMaximumNumberOfRulerTicks() -> int
        C++: virtual int GetMaximumNumberOfRulerTicks()
        
        Set/Get the maximum number of ticks in ruler mode.
        """
        ...
    
    def GetMaximumNumberOfRulerTicksMaxValue(self):
        """
        V.GetMaximumNumberOfRulerTicksMaxValue() -> int
        C++: virtual int GetMaximumNumberOfRulerTicksMaxValue()
        
        Set/Get the maximum number of ticks in ruler mode.
        """
        ...
    
    def GetMaximumNumberOfRulerTicksMinValue(self):
        """
        V.GetMaximumNumberOfRulerTicksMinValue() -> int
        C++: virtual int GetMaximumNumberOfRulerTicksMinValue()
        
        Set/Get the maximum number of ticks in ruler mode.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint1DisplayPosition([float, float, float])
        C++: void GetPoint1DisplayPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint1WorldPosition(self):
        """
        V.GetPoint1WorldPosition() -> (float, float, float)
        C++: double *GetPoint1WorldPosition() override;
        V.GetPoint1WorldPosition([float, float, float])
        C++: void GetPoint1WorldPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint2DisplayPosition([float, float, float])
        C++: void GetPoint2DisplayPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2WorldPosition(self):
        """
        V.GetPoint2WorldPosition() -> (float, float, float)
        C++: double *GetPoint2WorldPosition() override;
        V.GetPoint2WorldPosition([float, float, float])
        C++: void GetPoint2WorldPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDistanceRepresentation3D
        C++: vtkDistanceRepresentation3D *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Methods required by vtkProp superclass.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDistanceRepresentation3D
        C++: static vtkDistanceRepresentation3D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetGlyphScale(self, p_float):
        """
        V.SetGlyphScale(float)
        C++: void SetGlyphScale(double scale)
        
        Scale the glyphs used as tick marks. By default it is 1/40th of
        the length.
        """
        ...
    
    def SetLabelActor(self, vtkFollower):
        """
        V.SetLabelActor(vtkFollower)
        C++: virtual void SetLabelActor(vtkFollower *)
        
        Convenience method Get the label actor. It is possible to control
        the appearance of the label.
        """
        ...
    
    def SetLabelPosition(self, p_float):
        """
        V.SetLabelPosition(float)
        C++: void SetLabelPosition(double labelPosition)
        
        Set/Get position of the label title in normalized coordinates
        [0,1]. 0 is at the start of the line whereas 1 is at the end.
        """
        ...
    
    def SetLabelScale(self, p_float, p_float_1, p_float_2):
        """
        V.SetLabelScale(float, float, float)
        C++: void SetLabelScale(double x, double y, double z)
        V.SetLabelScale([float, float, float])
        C++: virtual void SetLabelScale(double scale[3])
        
        Scale text (font size along each dimension). This helps control
        the appearance of the 3D text.
        """
        ...
    
    def SetMaximumNumberOfRulerTicks(self, p_int):
        """
        V.SetMaximumNumberOfRulerTicks(int)
        C++: virtual void SetMaximumNumberOfRulerTicks(int _arg)
        
        Set/Get the maximum number of ticks in ruler mode.
        """
        ...
    
    def SetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1DisplayPosition([float, float, float])
        C++: void SetPoint1DisplayPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint1WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1WorldPosition([float, float, float])
        C++: void SetPoint1WorldPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2DisplayPosition([float, float, float])
        C++: void SetPoint2DisplayPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint2WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2WorldPosition([float, float, float])
        C++: void SetPoint2WorldPosition(double pos[3]) override;
        
        Methods to Set/Get the coordinates of the two points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


