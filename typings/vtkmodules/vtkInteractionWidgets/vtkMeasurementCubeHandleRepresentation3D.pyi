"""
This type stub file was generated by pyright.
"""

from .vtkHandleRepresentation import vtkHandleRepresentation

class vtkMeasurementCubeHandleRepresentation3D(vtkHandleRepresentation):
    """
    vtkMeasurementCubeHandleRepresentation3D - represent a unit cube for
    measuring/comparing to data.
    
    Superclass: vtkHandleRepresentation
    
    @sa
    vtkPolygonalHandleRepresentation3D vtkHandleRepresentation
    vtkHandleWidget
    """
    def AdaptiveScalingOff(self):
        """
        V.AdaptiveScalingOff()
        C++: virtual void AdaptiveScalingOff()
        
        Turn on/off adaptive scaling for the cube.
        """
        ...
    
    def AdaptiveScalingOn(self):
        """
        V.AdaptiveScalingOn()
        C++: virtual void AdaptiveScalingOn()
        
        Turn on/off adaptive scaling for the cube.
        """
        ...
    
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Methods to make this class properly act like a
        vtkWidgetRepresentation.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        Methods to make this class properly act like a
        vtkWidgetRepresentation.
        """
        ...
    
    def DeepCopy(self, vtkProp):
        """
        V.DeepCopy(vtkProp)
        C++: void DeepCopy(vtkProp *prop) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def GetAdaptiveScaling(self):
        """
        V.GetAdaptiveScaling() -> int
        C++: virtual vtkTypeBool GetAdaptiveScaling()
        
        Turn on/off adaptive scaling for the cube.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def GetHandle(self):
        """
        V.GetHandle() -> vtkPolyData
        C++: vtkPolyData *GetHandle()
        
        Get the handle polydata.
        """
        ...
    
    def GetHandleVisibility(self):
        """
        V.GetHandleVisibility() -> int
        C++: virtual vtkTypeBool GetHandleVisibility()
        
        Toggle the visibility of the handle on and off
        """
        ...
    
    def GetLabelText(self):
        """
        V.GetLabelText() -> vtkBillboardTextActor3D
        C++: virtual vtkBillboardTextActor3D *GetLabelText()
        
        Get the label text actor
        """
        ...
    
    def GetLabelTextInput(self):
        """
        V.GetLabelTextInput() -> string
        C++: virtual char *GetLabelTextInput()
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> int
        C++: virtual vtkTypeBool GetLabelVisibility()
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def GetLengthUnit(self):
        """
        V.GetLengthUnit() -> string
        C++: virtual char *GetLengthUnit()
        
        Set the label for the unit of length of a side of the cube.
        """
        ...
    
    def GetMaxRelativeCubeScreenArea(self):
        """
        V.GetMaxRelativeCubeScreenArea() -> float
        C++: virtual double GetMaxRelativeCubeScreenArea()
        
        Set the min/max cube representational area relative to the render
        window area. If adaptive scaling is on and the cube's image is
        outside of these bounds, the cube is adaptively scaled. The max
        and min relative cube sizes are clamped between 1. and 1.e-6, and
        MaxRelativeubeSize must be more than greater than
        MinRelativeCubeScreenArea.
        """
        ...
    
    def GetMinRelativeCubeScreenArea(self):
        """
        V.GetMinRelativeCubeScreenArea() -> float
        C++: virtual double GetMinRelativeCubeScreenArea()
        
        Set the min/max cube representational area relative to the render
        window area. If adaptive scaling is on and the cube's image is
        outside of these bounds, the cube is adaptively scaled. The max
        and min relative cube sizes are clamped between 1. and 1.e-6, and
        MaxRelativeubeSize must be more than greater than
        MinRelativeCubeScreenArea.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        Set/Get the handle properties when unselected and selected.
        """
        ...
    
    def GetRescaleFactor(self):
        """
        V.GetRescaleFactor() -> float
        C++: virtual double GetRescaleFactor()
        
        Set/Get the rescaling increment for the cube. This value is
        applied to each dimension, so volume scaling =
        std::pow(RescaleFactor, 3).
        """
        ...
    
    def GetRescaleFactorMaxValue(self):
        """
        V.GetRescaleFactorMaxValue() -> float
        C++: virtual double GetRescaleFactorMaxValue()
        
        Set/Get the rescaling increment for the cube. This value is
        applied to each dimension, so volume scaling =
        std::pow(RescaleFactor, 3).
        """
        ...
    
    def GetRescaleFactorMinValue(self):
        """
        V.GetRescaleFactorMinValue() -> float
        C++: virtual double GetRescaleFactorMinValue()
        
        Set/Get the rescaling increment for the cube. This value is
        applied to each dimension, so volume scaling =
        std::pow(RescaleFactor, 3).
        """
        ...
    
    def GetSelectedLabelVisibility(self):
        """
        V.GetSelectedLabelVisibility() -> int
        C++: virtual vtkTypeBool GetSelectedLabelVisibility()
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def GetSelectedProperty(self):
        """
        V.GetSelectedProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedProperty()
        
        Set/Get the handle properties when unselected and selected.
        """
        ...
    
    def GetSideLength(self):
        """
        V.GetSideLength() -> float
        C++: virtual double GetSideLength()
        
        Set the length of a side of the cube (default is 1).
        """
        ...
    
    def GetSmoothMotion(self):
        """
        V.GetSmoothMotion() -> int
        C++: virtual vtkTypeBool GetSmoothMotion()
        
        Turn on/off smooth motion of the handle. See the documentation of
        MoveFocusRequest for details. By default, SmoothMotion is ON.
        However, in certain applications the user may want to turn it
        off. For instance when using certain specific PointPlacer's with
        the representation such as the vtkCellCentersPointPlacer, which
        causes the representation to snap to the center of cells. In such
        cases, inherent restrictions on handle placement might conflict
        with a request for smooth motion of the handles.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkAbstractTransform
        C++: virtual vtkAbstractTransform *GetTransform()
        
        Get the transform used to transform the generic handle polydata
        before placing it in the render window
        """
        ...
    
    def HandleVisibilityOff(self):
        """
        V.HandleVisibilityOff()
        C++: virtual void HandleVisibilityOff()
        
        Toggle the visibility of the handle on and off
        """
        ...
    
    def HandleVisibilityOn(self):
        """
        V.HandleVisibilityOn()
        C++: virtual void HandleVisibilityOn()
        
        Toggle the visibility of the handle on and off
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def Highlight(self, p_int):
        """
        V.Highlight(int)
        C++: void Highlight(int highlight) override;
        
        Toggle highlighting (used when the cube is selected).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMeasurementCubeHandleRepresentation3D
        C++: vtkMeasurementCubeHandleRepresentation3D *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def RegisterPickers(self):
        """
        V.RegisterPickers()
        C++: void RegisterPickers() override;
        
        Register internal Pickers in the Picking Manager. Must be
        reimplemented by concrete widget representations to register
        their pickers.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *viewport)
             override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkMeasurementCubeHandleRepresentation3D
        C++: static vtkMeasurementCubeHandleRepresentation3D *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SelectedLabelVisibilityOff(self):
        """
        V.SelectedLabelVisibilityOff()
        C++: virtual void SelectedLabelVisibilityOff()
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def SelectedLabelVisibilityOn(self):
        """
        V.SelectedLabelVisibilityOn()
        C++: virtual void SelectedLabelVisibilityOn()
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def SetAdaptiveScaling(self, p_int):
        """
        V.SetAdaptiveScaling(int)
        C++: virtual void SetAdaptiveScaling(vtkTypeBool _arg)
        
        Turn on/off adaptive scaling for the cube.
        """
        ...
    
    def SetDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetDisplayPosition([float, float, float])
        C++: void SetDisplayPosition(double p[3]) override;
        
        Set the position of the point in world and display coordinates.
        """
        ...
    
    def SetHandleVisibility(self, p_int):
        """
        V.SetHandleVisibility(int)
        C++: virtual void SetHandleVisibility(vtkTypeBool _arg)
        
        Toggle the visibility of the handle on and off
        """
        ...
    
    def SetLabelTextInput(self, string):
        """
        V.SetLabelTextInput(string)
        C++: virtual void SetLabelTextInput(const char *label)
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def SetLabelVisibility(self, p_int):
        """
        V.SetLabelVisibility(int)
        C++: virtual void SetLabelVisibility(vtkTypeBool _arg)
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def SetLengthUnit(self, string):
        """
        V.SetLengthUnit(string)
        C++: virtual void SetLengthUnit(const char *_arg)
        
        Set the label for the unit of length of a side of the cube.
        """
        ...
    
    def SetMaxRelativeCubeScreenArea(self, p_float):
        """
        V.SetMaxRelativeCubeScreenArea(float)
        C++: void SetMaxRelativeCubeScreenArea(double)
        
        Set the min/max cube representational area relative to the render
        window area. If adaptive scaling is on and the cube's image is
        outside of these bounds, the cube is adaptively scaled. The max
        and min relative cube sizes are clamped between 1. and 1.e-6, and
        MaxRelativeubeSize must be more than greater than
        MinRelativeCubeScreenArea.
        """
        ...
    
    def SetMinRelativeCubeScreenArea(self, p_float):
        """
        V.SetMinRelativeCubeScreenArea(float)
        C++: void SetMinRelativeCubeScreenArea(double)
        
        Set the min/max cube representational area relative to the render
        window area. If adaptive scaling is on and the cube's image is
        outside of these bounds, the cube is adaptively scaled. The max
        and min relative cube sizes are clamped between 1. and 1.e-6, and
        MaxRelativeubeSize must be more than greater than
        MinRelativeCubeScreenArea.
        """
        ...
    
    def SetProperty(self, vtkProperty):
        """
        V.SetProperty(vtkProperty)
        C++: void SetProperty(vtkProperty *)
        
        Set/Get the handle properties when unselected and selected.
        """
        ...
    
    def SetRescaleFactor(self, p_float):
        """
        V.SetRescaleFactor(float)
        C++: virtual void SetRescaleFactor(double _arg)
        
        Set/Get the rescaling increment for the cube. This value is
        applied to each dimension, so volume scaling =
        std::pow(RescaleFactor, 3).
        """
        ...
    
    def SetSelectedLabelVisibility(self, p_int):
        """
        V.SetSelectedLabelVisibility(int)
        C++: virtual void SetSelectedLabelVisibility(vtkTypeBool _arg)
        
        A label may be associated with the cube. The string can be set
        via SetLabelText. The visibility of the label can be turned on /
        off.
        """
        ...
    
    def SetSelectedProperty(self, vtkProperty):
        """
        V.SetSelectedProperty(vtkProperty)
        C++: void SetSelectedProperty(vtkProperty *)
        
        Set/Get the handle properties when unselected and selected.
        """
        ...
    
    def SetSideLength(self, p_float):
        """
        V.SetSideLength(float)
        C++: void SetSideLength(double)
        
        Set the length of a side of the cube (default is 1).
        """
        ...
    
    def SetSmoothMotion(self, p_int):
        """
        V.SetSmoothMotion(int)
        C++: virtual void SetSmoothMotion(vtkTypeBool _arg)
        
        Turn on/off smooth motion of the handle. See the documentation of
        MoveFocusRequest for details. By default, SmoothMotion is ON.
        However, in certain applications the user may want to turn it
        off. For instance when using certain specific PointPlacer's with
        the representation such as the vtkCellCentersPointPlacer, which
        causes the representation to snap to the center of cells. In such
        cases, inherent restrictions on handle placement might conflict
        with a request for smooth motion of the handles.
        """
        ...
    
    def SetWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetWorldPosition([float, float, float])
        C++: void SetWorldPosition(double p[3]) override;
        
        Set the position of the point in world and display coordinates.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Methods to make this class behave as a vtkProp.
        """
        ...
    
    def SmoothMotionOff(self):
        """
        V.SmoothMotionOff()
        C++: virtual void SmoothMotionOff()
        
        Turn on/off smooth motion of the handle. See the documentation of
        MoveFocusRequest for details. By default, SmoothMotion is ON.
        However, in certain applications the user may want to turn it
        off. For instance when using certain specific PointPlacer's with
        the representation such as the vtkCellCentersPointPlacer, which
        causes the representation to snap to the center of cells. In such
        cases, inherent restrictions on handle placement might conflict
        with a request for smooth motion of the handles.
        """
        ...
    
    def SmoothMotionOn(self):
        """
        V.SmoothMotionOn()
        C++: virtual void SmoothMotionOn()
        
        Turn on/off smooth motion of the handle. See the documentation of
        MoveFocusRequest for details. By default, SmoothMotion is ON.
        However, in certain applications the user may want to turn it
        off. For instance when using certain specific PointPlacer's with
        the representation such as the vtkCellCentersPointPlacer, which
        causes the representation to snap to the center of cells. In such
        cases, inherent restrictions on handle placement might conflict
        with a request for smooth motion of the handles.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double eventPos[2]) override;
        
        Methods to make this class properly act like a
        vtkWidgetRepresentation.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double eventPos[2]) override;
        
        Methods to make this class properly act like a
        vtkWidgetRepresentation.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


