"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkImplicitCylinderRepresentation(vtkWidgetRepresentation):
    """
    vtkImplicitCylinderRepresentation - defining the representation for a
    vtkImplicitCylinderWidget
    
    Superclass: vtkWidgetRepresentation
    
    This class is a concrete representation for the
    vtkImplicitCylinderWidget. It represents an infinite cylinder defined
    by a radius, a center, and an axis. The cylinder is placed within its
    associated bounding box and the intersection of the cylinder with the
    bounding box is shown to visually indicate the orientation and
    position of the representation. This cylinder representation can be
    manipulated by using the vtkImplicitCylinderWidget to adjust the
    cylinder radius, axis, and/or center point. (Note that the bounding
    box is defined during invocation of the superclass' PlaceWidget()
    method.)
    
    To use this representation, you normally specify a radius, center,
    and axis. Optionally you can specify a minimum and maximum radius,
    and a resolution for the cylinder. Finally, place the widget and its
    representation in the scene using PlaceWidget().
    
    @sa
    vtkImplicitCylinderWidget vtkImplicitPlaneWidget
    vtkImplicitPlaneWidget
    """
    def AlongXAxisOff(self):
        """
        V.AlongXAxisOff()
        C++: virtual void AlongXAxisOff()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def AlongXAxisOn(self):
        """
        V.AlongXAxisOn()
        C++: virtual void AlongXAxisOn()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def AlongYAxisOff(self):
        """
        V.AlongYAxisOff()
        C++: virtual void AlongYAxisOff()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def AlongYAxisOn(self):
        """
        V.AlongYAxisOn()
        C++: virtual void AlongYAxisOn()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def AlongZAxisOff(self):
        """
        V.AlongZAxisOff()
        C++: virtual void AlongZAxisOff()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def AlongZAxisOn(self):
        """
        V.AlongZAxisOn()
        C++: virtual void AlongZAxisOn()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def BuildRepresentation(self):
        """
        V.BuildRepresentation()
        C++: void BuildRepresentation() override;
        
        Methods to interface with the vtkImplicitCylinderWidget.
        """
        ...
    
    def BumpCylinder(self, p_int, p_float):
        """
        V.BumpCylinder(int, float)
        C++: void BumpCylinder(int dir, double factor)
        
        Translate the cylinder in the direction of the view vector by the
        specified BumpDistance. The dir parameter controls which
        direction the pushing occurs, either in the same direction as the
        view vector, or when negative, in the opposite direction.  The
        factor controls what percentage of the bump is used.
        """
        ...
    
    def ComputeInteractionState(self, p_int, p_int_1, p_int_2):
        """
        V.ComputeInteractionState(int, int, int) -> int
        C++: int ComputeInteractionState(int X, int Y, int modify=0)
            override;
        
        Methods to interface with the vtkImplicitCylinderWidget.
        """
        ...
    
    def ConstrainToWidgetBoundsOff(self):
        """
        V.ConstrainToWidgetBoundsOff()
        C++: virtual void ConstrainToWidgetBoundsOff()
        
        Turn on/off whether the cylinder should be constrained to the
        widget bounds. If on, the center will not be allowed to move
        outside the set widget bounds and the radius will be limited by
        MinRadius and MaxRadius. This is the default behaviour. If off,
        the center can be freely moved and the radius can be set to
        arbitrary values. The widget outline will change accordingly.
        """
        ...
    
    def ConstrainToWidgetBoundsOn(self):
        """
        V.ConstrainToWidgetBoundsOn()
        C++: virtual void ConstrainToWidgetBoundsOn()
        
        Turn on/off whether the cylinder should be constrained to the
        widget bounds. If on, the center will not be allowed to move
        outside the set widget bounds and the radius will be limited by
        MinRadius and MaxRadius. This is the default behaviour. If off,
        the center can be freely moved and the radius can be set to
        arbitrary values. The widget outline will change accordingly.
        """
        ...
    
    def DrawCylinderOff(self):
        """
        V.DrawCylinderOff()
        C++: virtual void DrawCylinderOff()
        
        Enable/disable the drawing of the cylinder. In some cases the
        cylinder interferes with the object that it is operating on
        (e.g., the cylinder interferes with the cut surface it produces
        resulting in z-buffer artifacts.) By default it is off.
        """
        ...
    
    def DrawCylinderOn(self):
        """
        V.DrawCylinderOn()
        C++: virtual void DrawCylinderOn()
        
        Enable/disable the drawing of the cylinder. In some cases the
        cylinder interferes with the object that it is operating on
        (e.g., the cylinder interferes with the cut surface it produces
        resulting in z-buffer artifacts.) By default it is off.
        """
        ...
    
    def EndWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.EndWidgetInteraction([float, float])
        C++: void EndWidgetInteraction(double newEventPos[2]) override;
        
        Methods to interface with the vtkImplicitCylinderWidget.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *pc) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def GetAlongXAxis(self):
        """
        V.GetAlongXAxis() -> int
        C++: virtual vtkTypeBool GetAlongXAxis()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def GetAlongYAxis(self):
        """
        V.GetAlongYAxis() -> int
        C++: virtual vtkTypeBool GetAlongYAxis()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def GetAlongZAxis(self):
        """
        V.GetAlongZAxis() -> int
        C++: virtual vtkTypeBool GetAlongZAxis()
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def GetAxis(self):
        """
        V.GetAxis() -> (float, float, float)
        C++: double *GetAxis()
        V.GetAxis([float, float, float])
        C++: void GetAxis(double a[3])
        
        Set/Get the axis of rotation for the cylinder. If the axis is not
        specified as a unit vector, it will be normalized.
        """
        ...
    
    def GetAxisProperty(self):
        """
        V.GetAxisProperty() -> vtkProperty
        C++: virtual vtkProperty *GetAxisProperty()
        
        Get the properties on the axis (line and cone).
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def GetBumpDistance(self):
        """
        V.GetBumpDistance() -> float
        C++: virtual double GetBumpDistance()
        
        Specify a translation distance used by the BumpCylinder() method.
        Note that the distance is normalized; it is the fraction of the
        length of the bounding box of the wire outline.
        """
        ...
    
    def GetBumpDistanceMaxValue(self):
        """
        V.GetBumpDistanceMaxValue() -> float
        C++: virtual double GetBumpDistanceMaxValue()
        
        Specify a translation distance used by the BumpCylinder() method.
        Note that the distance is normalized; it is the fraction of the
        length of the bounding box of the wire outline.
        """
        ...
    
    def GetBumpDistanceMinValue(self):
        """
        V.GetBumpDistanceMinValue() -> float
        C++: virtual double GetBumpDistanceMinValue()
        
        Specify a translation distance used by the BumpCylinder() method.
        Note that the distance is normalized; it is the fraction of the
        length of the bounding box of the wire outline.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: double *GetCenter()
        V.GetCenter([float, float, float])
        C++: void GetCenter(double xyz[3])
        
        Get the center of the cylinder. The center is located along the
        cylinder axis.
        """
        ...
    
    def GetConstrainToWidgetBounds(self):
        """
        V.GetConstrainToWidgetBounds() -> int
        C++: virtual vtkTypeBool GetConstrainToWidgetBounds()
        
        Turn on/off whether the cylinder should be constrained to the
        widget bounds. If on, the center will not be allowed to move
        outside the set widget bounds and the radius will be limited by
        MinRadius and MaxRadius. This is the default behaviour. If off,
        the center can be freely moved and the radius can be set to
        arbitrary values. The widget outline will change accordingly.
        """
        ...
    
    def GetCylinder(self, vtkCylinder):
        """
        V.GetCylinder(vtkCylinder)
        C++: void GetCylinder(vtkCylinder *cyl)
        
        Get the implicit function for the cylinder. The user must provide
        the instance of the class vtkCylinder. Note that vtkCylinder is a
        subclass of vtkImplicitFunction, meaning that it can be used by a
        variety of filters to perform clipping, cutting, and selection of
        data.
        """
        ...
    
    def GetCylinderProperty(self):
        """
        V.GetCylinderProperty() -> vtkProperty
        C++: virtual vtkProperty *GetCylinderProperty()
        
        Get the cylinder properties. The properties of the cylinder when
        selected and unselected can be manipulated.
        """
        ...
    
    def GetDrawCylinder(self):
        """
        V.GetDrawCylinder() -> int
        C++: virtual vtkTypeBool GetDrawCylinder()
        
        Enable/disable the drawing of the cylinder. In some cases the
        cylinder interferes with the object that it is operating on
        (e.g., the cylinder interferes with the cut surface it produces
        resulting in z-buffer artifacts.) By default it is off.
        """
        ...
    
    def GetEdgesProperty(self):
        """
        V.GetEdgesProperty() -> vtkProperty
        C++: virtual vtkProperty *GetEdgesProperty()
        
        Get the property of the intersection edges. (This property also
        applies to the edges when tubed.)
        """
        ...
    
    def GetInteractionStateMaxValue(self):
        """
        V.GetInteractionStateMaxValue() -> int
        C++: virtual int GetInteractionStateMaxValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkImplicitCylinderWidget) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetInteractionStateMinValue(self):
        """
        V.GetInteractionStateMinValue() -> int
        C++: virtual int GetInteractionStateMinValue()
        
        The interaction state may be set from a widget (e.g.,
        vtkImplicitCylinderWidget) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetMaxRadius(self):
        """
        V.GetMaxRadius() -> float
        C++: virtual double GetMaxRadius()
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def GetMaxRadiusMaxValue(self):
        """
        V.GetMaxRadiusMaxValue() -> float
        C++: virtual double GetMaxRadiusMaxValue()
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def GetMaxRadiusMinValue(self):
        """
        V.GetMaxRadiusMinValue() -> float
        C++: virtual double GetMaxRadiusMinValue()
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def GetMinRadius(self):
        """
        V.GetMinRadius() -> float
        C++: virtual double GetMinRadius()
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def GetMinRadiusMaxValue(self):
        """
        V.GetMinRadiusMaxValue() -> float
        C++: virtual double GetMinRadiusMaxValue()
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def GetMinRadiusMinValue(self):
        """
        V.GetMinRadiusMinValue() -> float
        C++: virtual double GetMinRadiusMinValue()
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def GetOutlineProperty(self):
        """
        V.GetOutlineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetOutlineProperty()
        
        Get the property of the outline.
        """
        ...
    
    def GetOutlineTranslation(self):
        """
        V.GetOutlineTranslation() -> int
        C++: virtual vtkTypeBool GetOutlineTranslation()
        
        Turn on/off the ability to translate the bounding box by moving
        it with the mouse.
        """
        ...
    
    def GetOutsideBounds(self):
        """
        V.GetOutsideBounds() -> int
        C++: virtual vtkTypeBool GetOutsideBounds()
        
        Turn on/off the ability to move the widget outside of the bounds
        specified in the PlaceWidget() invocation.
        """
        ...
    
    def GetPolyData(self, vtkPolyData):
        """
        V.GetPolyData(vtkPolyData)
        C++: void GetPolyData(vtkPolyData *pd)
        
        Grab the polydata that defines the cylinder. The polydata
        contains polygons that are clipped by the bounding box.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: double GetRadius()
        
        Set/Get the radius of the cylinder. Note that if the radius is
        too big the cylinder will be outside of the bounding box.
        """
        ...
    
    def GetRepresentationState(self):
        """
        V.GetRepresentationState() -> int
        C++: virtual int GetRepresentationState()
        
        Sets the visual appearance of the representation based on the
        state it is in. This state is usually the same as
        InteractionState.
        """
        ...
    
    def GetResolution(self):
        """
        V.GetResolution() -> int
        C++: virtual int GetResolution()
        
        Set/Get the resolution of the cylinder. This is the number of
        polygonal facets used to approximate the curved cylindrical
        surface (for rendering purposes). An vtkCylinder is used under
        the hood to provide an exact surface representation.
        """
        ...
    
    def GetResolutionMaxValue(self):
        """
        V.GetResolutionMaxValue() -> int
        C++: virtual int GetResolutionMaxValue()
        
        Set/Get the resolution of the cylinder. This is the number of
        polygonal facets used to approximate the curved cylindrical
        surface (for rendering purposes). An vtkCylinder is used under
        the hood to provide an exact surface representation.
        """
        ...
    
    def GetResolutionMinValue(self):
        """
        V.GetResolutionMinValue() -> int
        C++: virtual int GetResolutionMinValue()
        
        Set/Get the resolution of the cylinder. This is the number of
        polygonal facets used to approximate the curved cylindrical
        surface (for rendering purposes). An vtkCylinder is used under
        the hood to provide an exact surface representation.
        """
        ...
    
    def GetScaleEnabled(self):
        """
        V.GetScaleEnabled() -> int
        C++: virtual vtkTypeBool GetScaleEnabled()
        
        Turn on/off the ability to scale the widget with the mouse.
        """
        ...
    
    def GetSelectedAxisProperty(self):
        """
        V.GetSelectedAxisProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedAxisProperty()
        
        Get the properties on the axis (line and cone).
        """
        ...
    
    def GetSelectedCylinderProperty(self):
        """
        V.GetSelectedCylinderProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedCylinderProperty()
        
        Get the cylinder properties. The properties of the cylinder when
        selected and unselected can be manipulated.
        """
        ...
    
    def GetSelectedOutlineProperty(self):
        """
        V.GetSelectedOutlineProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedOutlineProperty()
        
        Get the property of the outline.
        """
        ...
    
    def GetTranslationAxis(self):
        """
        V.GetTranslationAxis() -> int
        C++: virtual int GetTranslationAxis()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTranslationAxisMaxValue(self):
        """
        V.GetTranslationAxisMaxValue() -> int
        C++: virtual int GetTranslationAxisMaxValue()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTranslationAxisMinValue(self):
        """
        V.GetTranslationAxisMinValue() -> int
        C++: virtual int GetTranslationAxisMinValue()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTubing(self):
        """
        V.GetTubing() -> int
        C++: virtual vtkTypeBool GetTubing()
        
        Turn on/off tubing of the wire outline of the cylinder
        intersection (against the bounding box). The tube thickens the
        line by wrapping with a vtkTubeFilter.
        """
        ...
    
    def GetWidgetBounds(self):
        """
        V.GetWidgetBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetWidgetBounds()
        
        Set/Get the bounds of the widget representation. PlaceWidget can
        also be used to set the bounds of the widget but it may also have
        other effects on the internal state of the representation. Use
        this function when only the widget bounds are needs to be
        modified.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for the class.
        """
        ...
    
    def IsTranslationConstrained(self):
        """
        V.IsTranslationConstrained() -> bool
        C++: bool IsTranslationConstrained()
        
        Returns true if ContrainedAxis
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for the class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImplicitCylinderRepresentation
        C++: vtkImplicitCylinderRepresentation *NewInstance()
        
        Standard methods for the class.
        """
        ...
    
    def OutlineTranslationOff(self):
        """
        V.OutlineTranslationOff()
        C++: virtual void OutlineTranslationOff()
        
        Turn on/off the ability to translate the bounding box by moving
        it with the mouse.
        """
        ...
    
    def OutlineTranslationOn(self):
        """
        V.OutlineTranslationOn()
        C++: virtual void OutlineTranslationOn()
        
        Turn on/off the ability to translate the bounding box by moving
        it with the mouse.
        """
        ...
    
    def OutsideBoundsOff(self):
        """
        V.OutsideBoundsOff()
        C++: virtual void OutsideBoundsOff()
        
        Turn on/off the ability to move the widget outside of the bounds
        specified in the PlaceWidget() invocation.
        """
        ...
    
    def OutsideBoundsOn(self):
        """
        V.OutsideBoundsOn()
        C++: virtual void OutsideBoundsOn()
        
        Turn on/off the ability to move the widget outside of the bounds
        specified in the PlaceWidget() invocation.
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        
        Methods to interface with the vtkImplicitCylinderWidget.
        """
        ...
    
    def PushCylinder(self, p_float):
        """
        V.PushCylinder(float)
        C++: void PushCylinder(double distance)
        
        Push the cylinder the distance specified along the view vector.
        Positive values are in the direction of the view vector; negative
        values are in the opposite direction. The distance value is
        expressed in world coordinates.
        """
        ...
    
    def RegisterPickers(self):
        """
        V.RegisterPickers()
        C++: void RegisterPickers() override;
        
        Register internal Pickers in the Picking Manager. Must be
        reimplemented by concrete widget representations to register
        their pickers.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *) override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *)
            override;
        
        Methods supporting the rendering process.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImplicitCylinderRepresentation
        C++: static vtkImplicitCylinderRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for the class.
        """
        ...
    
    def ScaleEnabledOff(self):
        """
        V.ScaleEnabledOff()
        C++: virtual void ScaleEnabledOff()
        
        Turn on/off the ability to scale the widget with the mouse.
        """
        ...
    
    def ScaleEnabledOn(self):
        """
        V.ScaleEnabledOn()
        C++: virtual void ScaleEnabledOn()
        
        Turn on/off the ability to scale the widget with the mouse.
        """
        ...
    
    def SetAlongXAxis(self, p_int):
        """
        V.SetAlongXAxis(int)
        C++: void SetAlongXAxis(vtkTypeBool)
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def SetAlongYAxis(self, p_int):
        """
        V.SetAlongYAxis(int)
        C++: void SetAlongYAxis(vtkTypeBool)
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def SetAlongZAxis(self, p_int):
        """
        V.SetAlongZAxis(int)
        C++: void SetAlongZAxis(vtkTypeBool)
        
        Force the cylinder widget to be aligned with one of the x-y-z
        axes. If one axis is set on, the other two will be set off.
        Remember that when the state changes, a ModifiedEvent is invoked.
        This can be used to snap the cylinder to the axes if it is
        originally not aligned.
        """
        ...
    
    def SetAxis(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxis(float, float, float)
        C++: void SetAxis(double x, double y, double z)
        V.SetAxis([float, float, float])
        C++: void SetAxis(double a[3])
        
        Set/Get the axis of rotation for the cylinder. If the axis is not
        specified as a unit vector, it will be normalized.
        """
        ...
    
    def SetBumpDistance(self, p_float):
        """
        V.SetBumpDistance(float)
        C++: virtual void SetBumpDistance(double _arg)
        
        Specify a translation distance used by the BumpCylinder() method.
        Note that the distance is normalized; it is the fraction of the
        length of the bounding box of the wire outline.
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: void SetCenter(double x, double y, double z)
        V.SetCenter([float, float, float])
        C++: void SetCenter(double x[3])
        
        Get the center of the cylinder. The center is located along the
        cylinder axis.
        """
        ...
    
    def SetConstrainToWidgetBounds(self, p_int):
        """
        V.SetConstrainToWidgetBounds(int)
        C++: virtual void SetConstrainToWidgetBounds(vtkTypeBool _arg)
        
        Turn on/off whether the cylinder should be constrained to the
        widget bounds. If on, the center will not be allowed to move
        outside the set widget bounds and the radius will be limited by
        MinRadius and MaxRadius. This is the default behaviour. If off,
        the center can be freely moved and the radius can be set to
        arbitrary values. The widget outline will change accordingly.
        """
        ...
    
    def SetDrawCylinder(self, p_int):
        """
        V.SetDrawCylinder(int)
        C++: void SetDrawCylinder(vtkTypeBool drawCyl)
        
        Enable/disable the drawing of the cylinder. In some cases the
        cylinder interferes with the object that it is operating on
        (e.g., the cylinder interferes with the cut surface it produces
        resulting in z-buffer artifacts.) By default it is off.
        """
        ...
    
    def SetEdgeColor(self, vtkLookupTable):
        """
        V.SetEdgeColor(vtkLookupTable)
        C++: void SetEdgeColor(vtkLookupTable *)
        V.SetEdgeColor(float, float, float)
        C++: void SetEdgeColor(double, double, double)
        V.SetEdgeColor([float, float, float])
        C++: void SetEdgeColor(double x[3])
        
        Set color to the edge
        """
        ...
    
    def SetInteractionState(self, p_int):
        """
        V.SetInteractionState(int)
        C++: virtual void SetInteractionState(int _arg)
        
        The interaction state may be set from a widget (e.g.,
        vtkImplicitCylinderWidget) or other object. This controls how the
        interaction with the widget proceeds. Normally this method is
        used as part of a handshaking process with the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def SetMaxRadius(self, p_float):
        """
        V.SetMaxRadius(float)
        C++: virtual void SetMaxRadius(double _arg)
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def SetMinRadius(self, p_float):
        """
        V.SetMinRadius(float)
        C++: virtual void SetMinRadius(double _arg)
        
        Set/Get the minimum and maximum radius of the cylinder. This
        helps prevent the cylinder from "disappearing" during
        interaction.  Note that the minimum and maximum radius is
        specified as a fraction of the diagonal length of the widget
        bounding box.
        """
        ...
    
    def SetOutlineTranslation(self, p_int):
        """
        V.SetOutlineTranslation(int)
        C++: virtual void SetOutlineTranslation(vtkTypeBool _arg)
        
        Turn on/off the ability to translate the bounding box by moving
        it with the mouse.
        """
        ...
    
    def SetOutsideBounds(self, p_int):
        """
        V.SetOutsideBounds(int)
        C++: virtual void SetOutsideBounds(vtkTypeBool _arg)
        
        Turn on/off the ability to move the widget outside of the bounds
        specified in the PlaceWidget() invocation.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: void SetRadius(double r)
        
        Set/Get the radius of the cylinder. Note that if the radius is
        too big the cylinder will be outside of the bounding box.
        """
        ...
    
    def SetRepresentationState(self, p_int):
        """
        V.SetRepresentationState(int)
        C++: virtual void SetRepresentationState(int)
        
        Sets the visual appearance of the representation based on the
        state it is in. This state is usually the same as
        InteractionState.
        """
        ...
    
    def SetResolution(self, p_int):
        """
        V.SetResolution(int)
        C++: virtual void SetResolution(int _arg)
        
        Set/Get the resolution of the cylinder. This is the number of
        polygonal facets used to approximate the curved cylindrical
        surface (for rendering purposes). An vtkCylinder is used under
        the hood to provide an exact surface representation.
        """
        ...
    
    def SetScaleEnabled(self, p_int):
        """
        V.SetScaleEnabled(int)
        C++: virtual void SetScaleEnabled(vtkTypeBool _arg)
        
        Turn on/off the ability to scale the widget with the mouse.
        """
        ...
    
    def SetTranslationAxis(self, p_int):
        """
        V.SetTranslationAxis(int)
        C++: virtual void SetTranslationAxis(int _arg)
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def SetTranslationAxisOff(self):
        """
        V.SetTranslationAxisOff()
        C++: void SetTranslationAxisOff()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetTubing(self, p_int):
        """
        V.SetTubing(int)
        C++: virtual void SetTubing(vtkTypeBool _arg)
        
        Turn on/off tubing of the wire outline of the cylinder
        intersection (against the bounding box). The tube thickens the
        line by wrapping with a vtkTubeFilter.
        """
        ...
    
    def SetWidgetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetWidgetBounds(float, float, float, float, float, float)
        C++: virtual void SetWidgetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetWidgetBounds((float, float, float, float, float, float))
        C++: virtual void SetWidgetBounds(const double _arg[6])
        
        Set/Get the bounds of the widget representation. PlaceWidget can
        also be used to set the bounds of the widget but it may also have
        other effects on the internal state of the representation. Use
        this function when only the widget bounds are needs to be
        modified.
        """
        ...
    
    def SetXTranslationAxisOn(self):
        """
        V.SetXTranslationAxisOn()
        C++: void SetXTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetYTranslationAxisOn(self):
        """
        V.SetYTranslationAxisOn()
        C++: void SetYTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetZTranslationAxisOn(self):
        """
        V.SetZTranslationAxisOn()
        C++: void SetZTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def StartWidgetInteraction(self, p_float=..., p_float=...):
        """
        V.StartWidgetInteraction([float, float])
        C++: void StartWidgetInteraction(double eventPos[2]) override;
        
        Methods to interface with the vtkImplicitCylinderWidget.
        """
        ...
    
    def TubingOff(self):
        """
        V.TubingOff()
        C++: virtual void TubingOff()
        
        Turn on/off tubing of the wire outline of the cylinder
        intersection (against the bounding box). The tube thickens the
        line by wrapping with a vtkTubeFilter.
        """
        ...
    
    def TubingOn(self):
        """
        V.TubingOn()
        C++: virtual void TubingOn()
        
        Turn on/off tubing of the wire outline of the cylinder
        intersection (against the bounding box). The tube thickens the
        line by wrapping with a vtkTubeFilter.
        """
        ...
    
    def UpdatePlacement(self):
        """
        V.UpdatePlacement()
        C++: void UpdatePlacement(void)
        
        Satisfies the superclass API.  This will change the state of the
        widget to match changes that have been made to the underlying
        PolyDataSource.
        """
        ...
    
    def WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.WidgetInteraction([float, float])
        C++: void WidgetInteraction(double newEventPos[2]) override;
        
        Methods to interface with the vtkImplicitCylinderWidget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AdjustingRadius = ...
    Moving = ...
    MovingCenter = ...
    MovingOutline = ...
    Outside = ...
    RotatingAxis = ...
    Scaling = ...
    TranslatingCenter = ...
    _InteractionState = ...
    __dict__ = ...
    __vtkname__ = ...


