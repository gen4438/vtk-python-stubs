"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkBiDimensionalRepresentation(vtkWidgetRepresentation):
    """
    vtkBiDimensionalRepresentation - represent the vtkBiDimensionalWidget
    
    Superclass: vtkWidgetRepresentation
    
    The vtkBiDimensionalRepresentation is used to represent the
    bi-dimensional measure of an object. This representation consists of
    two perpendicular lines defined by four vtkHandleRepresentations. The
    four handles can be independently manipulated consistent with the
    orthogonal constraint on the lines. (Note: the four points are
    referred to as Point1, Point2, Point3 and Point4. Point1 and Point2
    define the first line; and Point3 and Point4 define the second
    orthogonal line.) This particular class is an abstract class,
    contrete subclasses (e.g., vtkBiDimensionalRepresentation2D) actual
    implement the widget.
    
    To create this widget, you click to place the first two points. The
    third point is mirrored with the fourth point; when you place the
    third point (which is orthogonal to the lined defined by the first
    two points), the fourth point is dropped as well. After definition,
    the four points can be moved (in constrained fashion, preserving
    orthogonality). Further, the entire widget can be translated by
    grabbing the center point of the widget; each line can be moved along
    the other line; and the entire widget can be rotated around its
    center point.
    
    @sa
    vtkAngleWidget vtkHandleRepresentation
    vtkBiDimensionalRepresentation2D
    """
    def GetID(self):
        """
        V.GetID() -> int
        C++: virtual vtkIdType GetID()
        
        Set/get the id to display in the label.
        """
        ...
    
    def GetLabelFormat(self):
        """
        V.GetLabelFormat() -> string
        C++: virtual char *GetLabelFormat()
        
        Specify the format to use for labelling the distance. Note that
        an empty string results in no label, or a format string without a
        "%" character will not print the distance value.
        """
        ...
    
    def GetLabelPosition(self):
        """
        V.GetLabelPosition() -> (float, ...)
        C++: virtual double *GetLabelPosition()
        V.GetLabelPosition([float, float, float])
        C++: virtual void GetLabelPosition(double pos[3])
        
        Get the position of the widget's label in display coordinates.
        """
        ...
    
    def GetLabelText(self):
        """
        V.GetLabelText() -> string
        C++: virtual char *GetLabelText()
        
        Get the text shown in the widget's label.
        """
        ...
    
    def GetLength1(self):
        """
        V.GetLength1() -> float
        C++: virtual double GetLength1()
        
        Return the length of the line defined by (Point1,Point2). This is
        the distance in the world coordinate system.
        """
        ...
    
    def GetLength2(self):
        """
        V.GetLength2() -> float
        C++: virtual double GetLength2()
        
        Return the length of the line defined by (Point3,Point4). This is
        the distance in the world coordinate system.
        """
        ...
    
    def GetLine1Visibility(self):
        """
        V.GetLine1Visibility() -> int
        C++: virtual vtkTypeBool GetLine1Visibility()
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def GetLine2Visibility(self):
        """
        V.GetLine2Visibility() -> int
        C++: virtual vtkTypeBool GetLine2Visibility()
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def GetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint1DisplayPosition([float, float, float])
        C++: virtual void GetPoint1DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint1Representation(self):
        """
        V.GetPoint1Representation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetPoint1Representation()
        
        Set/Get the handle representations used within the
        vtkBiDimensionalRepresentation2D. (Note: properties can be set by
        grabbing these representations and setting the properties
        appropriately.)
        """
        ...
    
    def GetPoint1WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint1WorldPosition([float, float, float])
        C++: virtual void GetPoint1WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint2DisplayPosition([float, float, float])
        C++: virtual void GetPoint2DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint2Representation(self):
        """
        V.GetPoint2Representation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetPoint2Representation()
        
        Set/Get the handle representations used within the
        vtkBiDimensionalRepresentation2D. (Note: properties can be set by
        grabbing these representations and setting the properties
        appropriately.)
        """
        ...
    
    def GetPoint2WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint2WorldPosition([float, float, float])
        C++: virtual void GetPoint2WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint3DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint3DisplayPosition([float, float, float])
        C++: virtual void GetPoint3DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint3Representation(self):
        """
        V.GetPoint3Representation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetPoint3Representation()
        
        Set/Get the handle representations used within the
        vtkBiDimensionalRepresentation2D. (Note: properties can be set by
        grabbing these representations and setting the properties
        appropriately.)
        """
        ...
    
    def GetPoint3WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint3WorldPosition([float, float, float])
        C++: virtual void GetPoint3WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint4DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint4DisplayPosition([float, float, float])
        C++: virtual void GetPoint4DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetPoint4Representation(self):
        """
        V.GetPoint4Representation() -> vtkHandleRepresentation
        C++: virtual vtkHandleRepresentation *GetPoint4Representation()
        
        Set/Get the handle representations used within the
        vtkBiDimensionalRepresentation2D. (Note: properties can be set by
        grabbing these representations and setting the properties
        appropriately.)
        """
        ...
    
    def GetPoint4WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetPoint4WorldPosition([float, float, float])
        C++: virtual void GetPoint4WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def GetShowLabelAboveWidget(self):
        """
        V.GetShowLabelAboveWidget() -> int
        C++: virtual vtkTypeBool GetShowLabelAboveWidget()
        
        Toggle whether to display the label above or below the widget.
        Defaults to 1.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> int
        C++: virtual int GetTolerance()
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the
        representation to be active.
        """
        ...
    
    def GetToleranceMaxValue(self):
        """
        V.GetToleranceMaxValue() -> int
        C++: virtual int GetToleranceMaxValue()
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the
        representation to be active.
        """
        ...
    
    def GetToleranceMinValue(self):
        """
        V.GetToleranceMinValue() -> int
        C++: virtual int GetToleranceMinValue()
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the
        representation to be active.
        """
        ...
    
    def GetWorldLabelPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetWorldLabelPosition([float, float, float])
        C++: virtual void GetWorldLabelPosition(double pos[3])
        
        Get the position of the widget's label in display coordinates.
        """
        ...
    
    def InstantiateHandleRepresentation(self):
        """
        V.InstantiateHandleRepresentation()
        C++: virtual void InstantiateHandleRepresentation()
        
        This method is used to specify the type of handle representation
        to use for the four internal vtkHandleRepresentations within
        vtkBiDimensionalRepresentation.  To use this method, create a
        dummy vtkHandleRepresentation (or subclass), and then invoke this
        method with this dummy. Then the vtkBiDimensionalRepresentation
        uses this dummy to clone four vtkHandleRepresentations of the
        same type. Make sure you set the handle representation before the
        widget is enabled. (The method InstantiateHandleRepresentation()
        is invoked by the vtkBiDimensionalWidget for the purposes of
        cloning.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard VTK methods.
        """
        ...
    
    def Line1VisibilityOff(self):
        """
        V.Line1VisibilityOff()
        C++: virtual void Line1VisibilityOff()
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def Line1VisibilityOn(self):
        """
        V.Line1VisibilityOn()
        C++: virtual void Line1VisibilityOn()
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def Line2VisibilityOff(self):
        """
        V.Line2VisibilityOff()
        C++: virtual void Line2VisibilityOff()
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def Line2VisibilityOn(self):
        """
        V.Line2VisibilityOn()
        C++: virtual void Line2VisibilityOn()
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBiDimensionalRepresentation
        C++: vtkBiDimensionalRepresentation *NewInstance()
        
        Standard VTK methods.
        """
        ...
    
    def Point2WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.Point2WidgetInteraction([float, float])
        C++: virtual void Point2WidgetInteraction(double e[2])
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def Point3WidgetInteraction(self, p_float=..., p_float=...):
        """
        V.Point3WidgetInteraction([float, float])
        C++: virtual void Point3WidgetInteraction(double e[2])
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBiDimensionalRepresentation
        C++: static vtkBiDimensionalRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard VTK methods.
        """
        ...
    
    def SetHandleRepresentation(self, vtkHandleRepresentation):
        """
        V.SetHandleRepresentation(vtkHandleRepresentation)
        C++: void SetHandleRepresentation(vtkHandleRepresentation *handle)
        
        This method is used to specify the type of handle representation
        to use for the four internal vtkHandleRepresentations within
        vtkBiDimensionalRepresentation.  To use this method, create a
        dummy vtkHandleRepresentation (or subclass), and then invoke this
        method with this dummy. Then the vtkBiDimensionalRepresentation
        uses this dummy to clone four vtkHandleRepresentations of the
        same type. Make sure you set the handle representation before the
        widget is enabled. (The method InstantiateHandleRepresentation()
        is invoked by the vtkBiDimensionalWidget for the purposes of
        cloning.)
        """
        ...
    
    def SetID(self, p_int):
        """
        V.SetID(int)
        C++: void SetID(vtkIdType id)
        
        Set/get the id to display in the label.
        """
        ...
    
    def SetLabelFormat(self, string):
        """
        V.SetLabelFormat(string)
        C++: virtual void SetLabelFormat(const char *_arg)
        
        Specify the format to use for labelling the distance. Note that
        an empty string results in no label, or a format string without a
        "%" character will not print the distance value.
        """
        ...
    
    def SetLine1Visibility(self, p_int):
        """
        V.SetLine1Visibility(int)
        C++: virtual void SetLine1Visibility(vtkTypeBool _arg)
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def SetLine2Visibility(self, p_int):
        """
        V.SetLine2Visibility(int)
        C++: virtual void SetLine2Visibility(vtkTypeBool _arg)
        
        Special methods for turning off the lines that define the
        bi-dimensional measure. Generally these methods are used by the
        vtkBiDimensionalWidget to control the appearance of the widget.
        Note: turning off Line1 actually turns off Line1 and Line2.
        """
        ...
    
    def SetPoint1DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1DisplayPosition([float, float, float])
        C++: virtual void SetPoint1DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint1WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint1WorldPosition([float, float, float])
        C++: virtual void SetPoint1WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint2DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2DisplayPosition([float, float, float])
        C++: virtual void SetPoint2DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint2WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint2WorldPosition([float, float, float])
        C++: virtual void SetPoint2WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint3DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint3DisplayPosition([float, float, float])
        C++: virtual void SetPoint3DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint3WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint3WorldPosition([float, float, float])
        C++: virtual void SetPoint3WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint4DisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint4DisplayPosition([float, float, float])
        C++: virtual void SetPoint4DisplayPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetPoint4WorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetPoint4WorldPosition([float, float, float])
        C++: virtual void SetPoint4WorldPosition(double pos[3])
        
        Methods to Set/Get the coordinates of the four points defining
        this representation. Note that methods are available for both
        display and world coordinates.
        """
        ...
    
    def SetShowLabelAboveWidget(self, p_int):
        """
        V.SetShowLabelAboveWidget(int)
        C++: virtual void SetShowLabelAboveWidget(vtkTypeBool _arg)
        
        Toggle whether to display the label above or below the widget.
        Defaults to 1.
        """
        ...
    
    def SetTolerance(self, p_int):
        """
        V.SetTolerance(int)
        C++: virtual void SetTolerance(int _arg)
        
        The tolerance representing the distance to the representation (in
        pixels) in which the cursor is considered near enough to the
        representation to be active.
        """
        ...
    
    def ShowLabelAboveWidgetOff(self):
        """
        V.ShowLabelAboveWidgetOff()
        C++: virtual void ShowLabelAboveWidgetOff()
        
        Toggle whether to display the label above or below the widget.
        Defaults to 1.
        """
        ...
    
    def ShowLabelAboveWidgetOn(self):
        """
        V.ShowLabelAboveWidgetOn()
        C++: virtual void ShowLabelAboveWidgetOn()
        
        Toggle whether to display the label above or below the widget.
        Defaults to 1.
        """
        ...
    
    def StartWidgetDefinition(self, p_float=..., p_float=...):
        """
        V.StartWidgetDefinition([float, float])
        C++: virtual void StartWidgetDefinition(double e[2])
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def StartWidgetManipulation(self, p_float=..., p_float=...):
        """
        V.StartWidgetManipulation([float, float])
        C++: virtual void StartWidgetManipulation(double e[2])
        
        These are methods that satisfy vtkWidgetRepresentation's API.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    NearP1 = ...
    NearP2 = ...
    NearP3 = ...
    NearP4 = ...
    OnCenter = ...
    OnL1Inner = ...
    OnL1Outer = ...
    OnL2Inner = ...
    OnL2Outer = ...
    Outside = ...
    __dict__ = ...
    __vtkname__ = ...


