"""
This type stub file was generated by pyright.
"""

from .vtk3DWidget import vtk3DWidget

class vtkPointWidget(vtk3DWidget):
    """
    vtkPointWidget - position a point in 3D space
    
    Superclass: vtk3DWidget
    
    This 3D widget allows the user to position a point in 3D space using
    a 3D cursor. The cursor has an outline bounding box, axes-aligned
    cross-hairs, and axes shadows. (The outline and shadows can be turned
    off.) Any of these can be turned off. A nice feature of the object is
    that the vtkPointWidget, like any 3D widget, will work with the
    current interactor style. That is, if vtkPointWidget does not handle
    an event, then all other registered observers (including the
    interactor style) have an opportunity to process the event.
    Otherwise, the vtkPointWidget will terminate the processing of the
    event that it handles.
    
    To use this object, just invoke SetInteractor() with the argument of
    the method a vtkRenderWindowInteractor.  You may also wish to invoke
    "PlaceWidget()" to initially position the widget. The interactor will
    act normally until the "i" key (for "interactor") is pressed, at
    which point the vtkPointWidget will appear. (See superclass
    documentation for information about changing this behavior.) To move
    the point, the user can grab (left mouse) on any widget line and
    "slide" the point into position. Scaling is achieved by using the
    right mouse button "up" the render window (makes the widget bigger)
    or "down" the render window (makes the widget smaller). To translate
    the widget use the middle mouse button. (Note: all of the translation
    interactions can be constrained to one of the x-y-z axes by using the
    "shift" key.) The vtkPointWidget produces as output a polydata with a
    single point and a vertex cell.
    
    Some additional features of this class include the ability to control
    the rendered properties of the widget. You can set the properties of
    the selected and unselected representations of the parts of the
    widget. For example, you can set the property of the 3D cursor in its
    normal and selected states.
    
    The constrained translation/sliding action (i.e., when the "shift"
    key is depressed) along the axes is based on a combination of a "hot"
    spot around the cursor focus plus the initial mouse motion after
    selection. That is, if the user selects an axis outside of the hot
    spot, then the motion is constrained along that axis. If the user
    selects the point widget near the focus (within the hot spot), the
    initial motion defines a vector which is compared to the x-y-z axes.
    The motion is constrained to the axis that is most parallel to the
    initial motion vector.
    
    @sa
    vtk3DWidget vtkLineWidget vtkBoxWidget vtkPlaneWidget
    """
    def AllOff(self):
        """
        V.AllOff()
        C++: void AllOff()
        
        Convenience methods to turn outline and shadows on and off.
        """
        ...
    
    def AllOn(self):
        """
        V.AllOn()
        C++: void AllOn()
        
        Convenience methods to turn outline and shadows on and off.
        """
        ...
    
    def GetHotSpotSize(self):
        """
        V.GetHotSpotSize() -> float
        C++: virtual double GetHotSpotSize()
        
        Set the "hot spot" size; i.e., the region around the focus, in
        which the motion vector is used to control the constrained
        sliding action. Note the size is specified as a fraction of the
        length of the diagonal of the point widget's bounding box.
        """
        ...
    
    def GetHotSpotSizeMaxValue(self):
        """
        V.GetHotSpotSizeMaxValue() -> float
        C++: virtual double GetHotSpotSizeMaxValue()
        
        Set the "hot spot" size; i.e., the region around the focus, in
        which the motion vector is used to control the constrained
        sliding action. Note the size is specified as a fraction of the
        length of the diagonal of the point widget's bounding box.
        """
        ...
    
    def GetHotSpotSizeMinValue(self):
        """
        V.GetHotSpotSizeMinValue() -> float
        C++: virtual double GetHotSpotSizeMinValue()
        
        Set the "hot spot" size; i.e., the region around the focus, in
        which the motion vector is used to control the constrained
        sliding action. Note the size is specified as a fraction of the
        length of the diagonal of the point widget's bounding box.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutline(self):
        """
        V.GetOutline() -> int
        C++: int GetOutline()
        """
        ...
    
    def GetPolyData(self, vtkPolyData):
        """
        V.GetPolyData(vtkPolyData)
        C++: void GetPolyData(vtkPolyData *pd)
        
        Grab the polydata (including points) that defines the point. A
        single point and a vertex compose the vtkPolyData.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float, float)
        C++: double *GetPosition()
        V.GetPosition([float, float, float])
        C++: void GetPosition(double xyz[3])
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        Get the handle properties (the little balls are the handles). The
        properties of the handles when selected and normal can be set.
        """
        ...
    
    def GetSelectedProperty(self):
        """
        V.GetSelectedProperty() -> vtkProperty
        C++: virtual vtkProperty *GetSelectedProperty()
        
        Get the handle properties (the little balls are the handles). The
        properties of the handles when selected and normal can be set.
        """
        ...
    
    def GetTranslationMode(self):
        """
        V.GetTranslationMode() -> int
        C++: int GetTranslationMode()
        """
        ...
    
    def GetXShadows(self):
        """
        V.GetXShadows() -> int
        C++: int GetXShadows()
        """
        ...
    
    def GetYShadows(self):
        """
        V.GetYShadows() -> int
        C++: int GetYShadows()
        """
        ...
    
    def GetZShadows(self):
        """
        V.GetZShadows() -> int
        C++: int GetZShadows()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointWidget
        C++: vtkPointWidget *NewInstance()
        """
        ...
    
    def OutlineOff(self):
        """
        V.OutlineOff()
        C++: void OutlineOff()
        """
        ...
    
    def OutlineOn(self):
        """
        V.OutlineOn()
        C++: void OutlineOn()
        """
        ...
    
    def PlaceWidget(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.PlaceWidget([float, float, float, float, float, float])
        C++: void PlaceWidget(double bounds[6]) override;
        V.PlaceWidget()
        C++: void PlaceWidget() override;
        V.PlaceWidget(float, float, float, float, float, float)
        C++: void PlaceWidget(double xmin, double xmax, double ymin,
            double ymax, double zmin, double zmax) override;
        
        Methods that satisfy the superclass' API.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointWidget
        C++: static vtkPointWidget *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        Methods that satisfy the superclass' API.
        """
        ...
    
    def SetHotSpotSize(self, p_float):
        """
        V.SetHotSpotSize(float)
        C++: virtual void SetHotSpotSize(double _arg)
        
        Set the "hot spot" size; i.e., the region around the focus, in
        which the motion vector is used to control the constrained
        sliding action. Note the size is specified as a fraction of the
        length of the diagonal of the point widget's bounding box.
        """
        ...
    
    def SetOutline(self, p_int):
        """
        V.SetOutline(int)
        C++: void SetOutline(int o)
        
        Turn on/off the wireframe bounding box.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetPosition(float, float, float)
        C++: void SetPosition(double x, double y, double z)
        V.SetPosition([float, float, float])
        C++: void SetPosition(double x[3])
        
        Set/Get the position of the point. Note that if the position is
        set outside of the bounding box, it will be clamped to the
        boundary of the bounding box.
        """
        ...
    
    def SetTranslationMode(self, p_int):
        """
        V.SetTranslationMode(int)
        C++: void SetTranslationMode(int mode)
        
        If translation mode is on, as the widget is moved the bounding
        box, shadows, and cursor are all translated simultaneously as the
        point moves.
        """
        ...
    
    def SetXShadows(self, p_int):
        """
        V.SetXShadows(int)
        C++: void SetXShadows(int o)
        
        Turn on/off the wireframe x-shadows.
        """
        ...
    
    def SetYShadows(self, p_int):
        """
        V.SetYShadows(int)
        C++: void SetYShadows(int o)
        
        Turn on/off the wireframe y-shadows.
        """
        ...
    
    def SetZShadows(self, p_int):
        """
        V.SetZShadows(int)
        C++: void SetZShadows(int o)
        
        Turn on/off the wireframe z-shadows.
        """
        ...
    
    def TranslationModeOff(self):
        """
        V.TranslationModeOff()
        C++: void TranslationModeOff()
        """
        ...
    
    def TranslationModeOn(self):
        """
        V.TranslationModeOn()
        C++: void TranslationModeOn()
        """
        ...
    
    def XShadowsOff(self):
        """
        V.XShadowsOff()
        C++: void XShadowsOff()
        """
        ...
    
    def XShadowsOn(self):
        """
        V.XShadowsOn()
        C++: void XShadowsOn()
        """
        ...
    
    def YShadowsOff(self):
        """
        V.YShadowsOff()
        C++: void YShadowsOff()
        """
        ...
    
    def YShadowsOn(self):
        """
        V.YShadowsOn()
        C++: void YShadowsOn()
        """
        ...
    
    def ZShadowsOff(self):
        """
        V.ZShadowsOff()
        C++: void ZShadowsOff()
        """
        ...
    
    def ZShadowsOn(self):
        """
        V.ZShadowsOn()
        C++: void ZShadowsOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


