"""
This type stub file was generated by pyright.
"""

from .vtkPointPlacer import vtkPointPlacer

class vtkImageActorPointPlacer(vtkPointPlacer):
    """
    vtkImageActorPointPlacer - Converts 2D display positions to world
    positions such that they lie on an ImageActor
    
    Superclass: vtkPointPlacer
    
    This PointPlacer is used to constrain the placement of points on the
    supplied image actor. Additionally, you may set bounds to restrict
    the placement of the points. The placement of points will then be
    constrained to lie not only on the ImageActor but also within the
    bounds specified. If no bounds are specified, they may lie anywhere
    on the supplied ImageActor.
    """
    def ComputeWorldPosition(self, vtkRenderer, p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float, float,
             float], [float, float, float, float, float, float, float,
            float, float]) -> int
        C++: int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double worldPos[3],
            double worldOrient[9]) override;
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float,
            float], [float, float, float], [float, float, float, float,
            float, float, float, float, float]) -> int
        C++: int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double refWorldPos[2],
            double worldPos[3], double worldOrient[9]) override;
        
        Given and renderer and a display position in pixels, find a world
        position and orientation. In this class an internal
        vtkBoundedPlanePointPlacer is used to compute the world position
        and orientation. The internal placer is set to use the plane of
        the image actor and the bounds of the image actor as the
        constraints for placing points.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetBounds()
        
        Optionally, you may set bounds to restrict the placement of the
        points. The placement of points will then be constrained to lie
        not only on the ImageActor but also within the bounds specified.
        If no bounds are specified, they may lie anywhere on the supplied
        ImageActor.
        """
        ...
    
    def GetImageActor(self):
        """
        V.GetImageActor() -> vtkImageActor
        C++: virtual vtkImageActor *GetImageActor()
        
        Set / get the reference vtkImageActor used to place the points.
        An image actor must be set for this placer to work. An internal
        bounded plane point placer is created and set to match the bounds
        of the displayed image.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageActorPointPlacer
        C++: vtkImageActorPointPlacer *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageActorPointPlacer
        C++: static vtkImageActorPointPlacer *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Optionally, you may set bounds to restrict the placement of the
        points. The placement of points will then be constrained to lie
        not only on the ImageActor but also within the bounds specified.
        If no bounds are specified, they may lie anywhere on the supplied
        ImageActor.
        """
        ...
    
    def SetImageActor(self, vtkImageActor):
        """
        V.SetImageActor(vtkImageActor)
        C++: void SetImageActor(vtkImageActor *)
        
        Set / get the reference vtkImageActor used to place the points.
        An image actor must be set for this placer to work. An internal
        bounded plane point placer is created and set to match the bounds
        of the displayed image.
        """
        ...
    
    def SetWorldTolerance(self, p_float):
        """
        V.SetWorldTolerance(float)
        C++: void SetWorldTolerance(double s) override;
        
        Set the world tolerance. This propagates it to the internal
        BoundedPlanePointPlacer.
        """
        ...
    
    def UpdateInternalState(self):
        """
        V.UpdateInternalState() -> int
        C++: int UpdateInternalState() override;
        
        A method for configuring the internal placer according to the
        constraints of the image actor. Called by the representation to
        give the placer a chance to update itself, which may cause the
        MTime to change, which would then cause the representation to
        update all of its points
        """
        ...
    
    def UpdateWorldPosition(self, vtkRenderer, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.UpdateWorldPosition(vtkRenderer, [float, float, float], [float,
            float, float, float, float, float, float, float, float])
            -> int
        C++: int UpdateWorldPosition(vtkRenderer *ren, double worldPos[3],
             double worldOrient[9]) override;
        
        Update the world position and orientation according the the
        current constraints of the placer. Will be called by the
        representation when it notices that this placer has been
        modified.
        """
        ...
    
    def ValidateWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.ValidateWorldPosition([float, float, float]) -> int
        C++: int ValidateWorldPosition(double worldPos[3]) override;
        V.ValidateWorldPosition([float, float, float], [float, float,
            float, float, float, float, float, float, float]) -> int
        C++: int ValidateWorldPosition(double worldPos[3],
            double worldOrient[9]) override;
        
        This method validates a world position by checking to see if the
        world position is valid according to the constraints of the
        internal placer (essentially - is this world position on the
        image?)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


