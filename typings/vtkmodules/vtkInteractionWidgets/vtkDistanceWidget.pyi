"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkDistanceWidget(vtkAbstractWidget):
    """
    vtkDistanceWidget - measure the distance between two points
    
    Superclass: vtkAbstractWidget
    
    The vtkDistanceWidget is used to measure the distance between two
    points. The two end points can be positioned independently, and when
    they are released, a special PlacePointEvent is invoked so that
    special operations may be take to reposition the point (snap to grid,
    etc.) The widget has two different modes of interaction: when
    initially defined (i.e., placing the two points) and then a
    manipulate mode (adjusting the position of the two points).
    
    To use this widget, specify an instance of vtkDistanceWidget and a
    representation (a subclass of vtkDistanceRepresentation). The widget
    is implemented using two instances of vtkHandleWidget which are used
    to position the end points of the line. The representations for these
    two handle widgets are provided by the vtkDistanceRepresentation.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    
      LeftButtonPressEvent - add a point or select a handle
      MouseMoveEvent - position the second point or move a handle
      LeftButtonReleaseEvent - release the handle 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkDistanceWidget's widget events:
    
    
      vtkWidgetEvent::AddPoint -- add one point; depending on the state
                                  it may the first or second point added.
    Or,
                                  if near a handle, select the handle.
      vtkWidgetEvent::Move -- move the second point or handle depending
    on the state.
      vtkWidgetEvent::EndSelect -- the handle manipulation process has
    completed. 
    
    @par Event Bindings: This widget invokes the following VTK events on
    itself (which observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (beginning to interact)
      vtkCommand::EndInteractionEvent (completing interaction)
      vtkCommand::InteractionEvent (moving after selecting something)
      vtkCommand::PlacePointEvent (after point is positioned;
                                   call data includes handle id (0,1)) 
    
    @sa
    vtkHandleWidget
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetDistanceRepresentation(self):
        """
        V.GetDistanceRepresentation() -> vtkDistanceRepresentation
        C++: vtkDistanceRepresentation *GetDistanceRepresentation()
        
        Return the representation as a vtkDistanceRepresentation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def GetWidgetState(self):
        """
        V.GetWidgetState() -> int
        C++: virtual int GetWidgetState()
        
        Return the current widget state.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for a VTK class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for a VTK class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDistanceWidget
        C++: vtkDistanceWidget *NewInstance()
        
        Standard methods for a VTK class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDistanceWidget
        C++: static vtkDistanceWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for a VTK class.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        The method for activating and deactivating this widget. This
        method must be overridden because it is a composite widget and
        does more than its superclasses' vtkAbstractWidget::SetEnabled()
        method.
        """
        ...
    
    def SetProcessEvents(self, p_int):
        """
        V.SetProcessEvents(int)
        C++: void SetProcessEvents(vtkTypeBool) override;
        
        Methods to change the whether the widget responds to interaction.
        Overridden to pass the state to component widgets.
        """
        ...
    
    def SetRepresentation(self, vtkDistanceRepresentation):
        """
        V.SetRepresentation(vtkDistanceRepresentation)
        C++: void SetRepresentation(vtkDistanceRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def SetWidgetStateToManipulate(self):
        """
        V.SetWidgetStateToManipulate()
        C++: virtual void SetWidgetStateToManipulate()
        
        Set the state of the widget. If the state is set to "Manipulate"
        then it is assumed that the widget and its representation will be
        initialized programmatically and is not interactively placed.
        Initially the widget state is set to "Start" which means nothing
        will appear and the user must interactively place the widget with
        repeated mouse selections. Set the state to "Start" if you want
        interactive placement. Generally state changes must be followed
        by a Render() for things to visually take effect.
        """
        ...
    
    def SetWidgetStateToStart(self):
        """
        V.SetWidgetStateToStart()
        C++: virtual void SetWidgetStateToStart()
        
        Set the state of the widget. If the state is set to "Manipulate"
        then it is assumed that the widget and its representation will be
        initialized programmatically and is not interactively placed.
        Initially the widget state is set to "Start" which means nothing
        will appear and the user must interactively place the widget with
        repeated mouse selections. Set the state to "Start" if you want
        interactive placement. Generally state changes must be followed
        by a Render() for things to visually take effect.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Define = ...
    Manipulate = ...
    Start = ...
    __dict__ = ...
    __vtkname__ = ...


