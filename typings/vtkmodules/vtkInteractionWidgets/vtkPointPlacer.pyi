"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkPointPlacer(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkPointPlacer - Abstract interface to translate 2D display positions
    to world coordinates
    
    Superclass: vtkObject
    
    Most widgets in VTK have a need to translate of 2D display
    coordinates (as reported by the RenderWindowInteractor) to 3D world
    coordinates. This class is an abstraction of this functionality. A
    few subclasses are listed below:
    
    1) vtkFocalPlanePointPlacer: This class converts 2D display positions
    to world positions such that they lie on the focal plane.
    
    2) vtkPolygonalSurfacePointPlacer: Converts 2D display positions to
    world positions such that they lie on the surface of one or more
    specified polydatas.
    
    3) vtkImageActorPointPlacer: Converts 2D display positions to world
    positions such that they lie on an ImageActor
    
    4) vtkBoundedPlanePointPlacer: Converts 2D display positions to world
    positions such that they lie within a set of specified bounding
    planes.
    
    5) vtkTerrainDataPointPlacer: Converts 2D display positions to world
    positions such that they lie on a height field.
    
    Point placers provide an extensible framework to specify constraints
    on points. The methods ComputeWorldPosition, ValidateDisplayPosition
    and ValidateWorldPosition may be overridden to dictate whether a
    world or display position is allowed. These classes are currently
    used by the HandleWidget and the ContourWidget to allow various
    constraints to be enforced on the placement of their handles.
    """
    def ComputeWorldPosition(self, vtkRenderer, p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float, float,
             float], [float, float, float, float, float, float, float,
            float, float]) -> int
        C++: virtual int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double worldPos[3],
            double worldOrient[9])
        V.ComputeWorldPosition(vtkRenderer, [float, float], [float, float,
             float], [float, float, float], [float, float, float, float,
            float, float, float, float, float]) -> int
        C++: virtual int ComputeWorldPosition(vtkRenderer *ren,
            double displayPos[2], double refWorldPos[3],
            double worldPos[3], double worldOrient[9])
        
        Given a renderer and a display position in pixel coordinates,
        compute the world position and orientation where this point will
        be placed. This method is typically used by the representation to
        place the point initially. A return value of 1 indicates that
        constraints of the placer are met.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetPixelTolerance(self):
        """
        V.GetPixelTolerance() -> int
        C++: virtual int GetPixelTolerance()
        
        Set/get the tolerance used when performing computations in
        display coordinates.
        """
        ...
    
    def GetPixelToleranceMaxValue(self):
        """
        V.GetPixelToleranceMaxValue() -> int
        C++: virtual int GetPixelToleranceMaxValue()
        
        Set/get the tolerance used when performing computations in
        display coordinates.
        """
        ...
    
    def GetPixelToleranceMinValue(self):
        """
        V.GetPixelToleranceMinValue() -> int
        C++: virtual int GetPixelToleranceMinValue()
        
        Set/get the tolerance used when performing computations in
        display coordinates.
        """
        ...
    
    def GetWorldTolerance(self):
        """
        V.GetWorldTolerance() -> float
        C++: virtual double GetWorldTolerance()
        
        Set/get the tolerance used when performing computations in world
        coordinates.
        """
        ...
    
    def GetWorldToleranceMaxValue(self):
        """
        V.GetWorldToleranceMaxValue() -> float
        C++: virtual double GetWorldToleranceMaxValue()
        
        Set/get the tolerance used when performing computations in world
        coordinates.
        """
        ...
    
    def GetWorldToleranceMinValue(self):
        """
        V.GetWorldToleranceMinValue() -> float
        C++: virtual double GetWorldToleranceMinValue()
        
        Set/get the tolerance used when performing computations in world
        coordinates.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointPlacer
        C++: vtkPointPlacer *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointPlacer
        C++: static vtkPointPlacer *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetPixelTolerance(self, p_int):
        """
        V.SetPixelTolerance(int)
        C++: virtual void SetPixelTolerance(int _arg)
        
        Set/get the tolerance used when performing computations in
        display coordinates.
        """
        ...
    
    def SetWorldTolerance(self, p_float):
        """
        V.SetWorldTolerance(float)
        C++: virtual void SetWorldTolerance(double _arg)
        
        Set/get the tolerance used when performing computations in world
        coordinates.
        """
        ...
    
    def UpdateInternalState(self):
        """
        V.UpdateInternalState() -> int
        C++: virtual int UpdateInternalState()
        
        Called by the representation to give the placer a chance to
        update itself.
        """
        ...
    
    def UpdateNodeWorldPosition(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.UpdateNodeWorldPosition([float, float, float], int) -> int
        C++: virtual int UpdateNodeWorldPosition(double worldPos[3],
            vtkIdType nodePointId)
        
        Give the placer a chance to update the node information, if any.
        Most placers do not maintain any cached node information.
        vtkPolygonalSurfacePointPlacer is one that does. It stores the
        point id (id on the surface mesh) on which its drawn. The second
        argument may be used to pass that in. Update world position
        """
        ...
    
    def UpdateWorldPosition(self, vtkRenderer, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.UpdateWorldPosition(vtkRenderer, [float, float, float], [float,
            float, float, float, float, float, float, float, float])
            -> int
        C++: virtual int UpdateWorldPosition(vtkRenderer *ren,
            double worldPos[3], double worldOrient[9])
        
        Given a current renderer, world position and orientation, update
        them according to the constraints of the placer. This method is
        typically used when UpdateContour is called on the
        representation, which must be called after changes are made to
        the constraints in the placer. A return value of 1 indicates that
        the point has been updated. A return value of 0 indicates that
        the point could not be updated and was left alone. By default
        this is a no-op - leaving the point as is.
        """
        ...
    
    def ValidateDisplayPosition(self, vtkRenderer, p_float=..., p_float=...):
        """
        V.ValidateDisplayPosition(vtkRenderer, [float, float]) -> int
        C++: virtual int ValidateDisplayPosition(vtkRenderer *,
            double displayPos[2])
        
        Given a display position, check the validity of this position.
        """
        ...
    
    def ValidateWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.ValidateWorldPosition([float, float, float]) -> int
        C++: virtual int ValidateWorldPosition(double worldPos[3])
        V.ValidateWorldPosition([float, float, float], [float, float,
            float, float, float, float, float, float, float]) -> int
        C++: virtual int ValidateWorldPosition(double worldPos[3],
            double worldOrient[9])
        
        Given a world position check the validity of this position
        according to the constraints of the placer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


