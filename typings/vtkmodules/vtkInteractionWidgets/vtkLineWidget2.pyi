"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkLineWidget2(vtkAbstractWidget):
    """
    vtkLineWidget2 - 3D widget for manipulating a finite, straight line
    
    Superclass: vtkAbstractWidget
    
    This 3D widget defines a straight line that can be interactively
    placed in a scene. The widget is assumed to consist of two parts: 1)
    two end points and 2) a straight line connecting the two points. (The
    representation paired with this widget determines the actual geometry
    of the widget.) The positioning of the two end points is facilitated
    by using vtkHandleWidgets to position the points.
    
    To use this widget, you generally pair it with a
    vtkLineRepresentation (or a subclass). Various options are available
    in the representation for controlling how the widget appears, and how
    the widget functions.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    If one of the two end points are selected:
      LeftButtonPressEvent - activate the associated handle widget
      LeftButtonReleaseEvent - release the handle widget associated with
    the point
      MouseMoveEvent - move the point If the line is selected:
      LeftButtonPressEvent - activate a handle widget accociated with the
    line
      LeftButtonReleaseEvent - release the handle widget associated with
    the line
      MouseMoveEvent - translate the line In all the cases, independent
    of what is picked, the widget responds to the following VTK events:
      MiddleButtonPressEvent - translate the widget
      MiddleButtonReleaseEvent - release the widget
      RightButtonPressEvent - scale the widget's representation
      RightButtonReleaseEvent - stop scaling the widget
      MouseMoveEvent - scale (if right button) or move (if middle button)
    the widget 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkLineWidget2's widget events:
    
    
      vtkWidgetEvent::Select -- some part of the widget has been selected
      vtkWidgetEvent::EndSelect -- the selection process has completed
      vtkWidgetEvent::Move -- a request for slider motion has been
    invoked 
    
    @par Event Bindings: In turn, when these widget events are processed,
    the vtkLineWidget2 invokes the following VTK events on itself (which
    observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (on vtkWidgetEvent::Select)
      vtkCommand::EndInteractionEvent (on vtkWidgetEvent::EndSelect)
      vtkCommand::InteractionEvent (on vtkWidgetEvent::Move) 
    
    @par Event Bindings: This class, and vtkLineRepresentation, are next
    generation VTK widgets. An earlier version of this functionality was
    defined in the class vtkLineWidget.
    
    @sa
    vtkLineRepresentation vtkLineWidget vtk3DWidget
    vtkImplicitPlaneWidget vtkImplicitPlaneWidget2
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetLineRepresentation(self):
        """
        V.GetLineRepresentation() -> vtkLineRepresentation
        C++: vtkLineRepresentation *GetLineRepresentation()
        
        Return the representation as a vtkLineRepresentation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard vtkObject methods
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard vtkObject methods
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard vtkObject methods
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard vtkObject methods
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLineWidget2
        C++: vtkLineWidget2 *NewInstance()
        
        Standard vtkObject methods
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLineWidget2
        C++: static vtkLineWidget2 *SafeDownCast(vtkObjectBase *o)
        
        Standard vtkObject methods
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int enabling) override;
        
        Override superclasses' SetEnabled() method because the line
        widget must enable its internal handle widgets.
        """
        ...
    
    def SetProcessEvents(self, p_int):
        """
        V.SetProcessEvents(int)
        C++: void SetProcessEvents(vtkTypeBool) override;
        
        Methods to change the whether the widget responds to interaction.
        Overridden to pass the state to component widgets.
        """
        ...
    
    def SetRepresentation(self, vtkLineRepresentation):
        """
        V.SetRepresentation(vtkLineRepresentation)
        C++: void SetRepresentation(vtkLineRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


