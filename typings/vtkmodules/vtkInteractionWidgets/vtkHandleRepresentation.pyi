"""
This type stub file was generated by pyright.
"""

from .vtkWidgetRepresentation import vtkWidgetRepresentation

class vtkHandleRepresentation(vtkWidgetRepresentation):
    """
    vtkHandleRepresentation - abstract class for representing widget
    handles
    
    Superclass: vtkWidgetRepresentation
    
    This class defines an API for widget handle representations. These
    representations interact with vtkHandleWidget. Various
    representations can be used depending on the nature of the handle.
    The basic functionality of the handle representation is to maintain a
    position. The position is represented via a vtkCoordinate, meaning
    that the position can be easily obtained in a variety of coordinate
    systems.
    
    Optional features for this representation include an active mode (the
    widget appears only when the mouse pointer is close to it). The
    active distance is expressed in pixels and represents a circle in
    display space.
    
    The class may be subclassed so that alternative representations can
    be created.  The class defines an API and a default implementation
    that the vtkHandleWidget interacts with to render itself in the
    scene.
    
    @warning
    The separation of the widget event handling and representation
    enables users and developers to create new appearances for the
    widget. It also facilitates parallel processing, where the client
    application handles events, and remote representations of the widget
    are slaves to the client (and do not handle events).
    
    @sa
    vtkRectilinearWipeWidget vtkWidgetRepresentation vtkAbstractWidget
    """
    def ActiveRepresentationOff(self):
        """
        V.ActiveRepresentationOff()
        C++: virtual void ActiveRepresentationOff()
        
        Flag controls whether the widget becomes visible when the mouse
        pointer moves close to it (i.e., the widget becomes active). By
        default, ActiveRepresentation is off and the representation is
        always visible.
        """
        ...
    
    def ActiveRepresentationOn(self):
        """
        V.ActiveRepresentationOn()
        C++: virtual void ActiveRepresentationOn()
        
        Flag controls whether the widget becomes visible when the mouse
        pointer moves close to it (i.e., the widget becomes active). By
        default, ActiveRepresentation is off and the representation is
        always visible.
        """
        ...
    
    def CheckConstraint(self, vtkRenderer, p_float=..., p_float=...):
        """
        V.CheckConstraint(vtkRenderer, [float, float]) -> int
        C++: virtual int CheckConstraint(vtkRenderer *renderer,
            double pos[2])
        
        Method has to be overridden in the subclasses which has
        constraints on placing the handle (Ex.
        vtkConstrainedPointHandleRepresentation). It should return 1 if
        the position is within the constraint, else it should return
        0. By default it returns 1.
        """
        ...
    
    def ConstrainedOff(self):
        """
        V.ConstrainedOff()
        C++: virtual void ConstrainedOff()
        
        Specify whether any motions (such as scale, translate, etc.) are
        constrained in some way (along an axis, etc.) Widgets can use
        this to control the resulting motion.
        """
        ...
    
    def ConstrainedOn(self):
        """
        V.ConstrainedOn()
        C++: virtual void ConstrainedOn()
        
        Specify whether any motions (such as scale, translate, etc.) are
        constrained in some way (along an axis, etc.) Widgets can use
        this to control the resulting motion.
        """
        ...
    
    def DeepCopy(self, vtkProp):
        """
        V.DeepCopy(vtkProp)
        C++: virtual void DeepCopy(vtkProp *prop)
        
        Methods to make this class properly act like a
        vtkWidgetRepresentation.
        """
        ...
    
    def GetActiveRepresentation(self):
        """
        V.GetActiveRepresentation() -> int
        C++: virtual vtkTypeBool GetActiveRepresentation()
        
        Flag controls whether the widget becomes visible when the mouse
        pointer moves close to it (i.e., the widget becomes active). By
        default, ActiveRepresentation is off and the representation is
        always visible.
        """
        ...
    
    def GetConstrained(self):
        """
        V.GetConstrained() -> int
        C++: virtual vtkTypeBool GetConstrained()
        
        Specify whether any motions (such as scale, translate, etc.) are
        constrained in some way (along an axis, etc.) Widgets can use
        this to control the resulting motion.
        """
        ...
    
    def GetDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetDisplayPosition([float, float, float])
        C++: virtual void GetDisplayPosition(double pos[3])
        V.GetDisplayPosition() -> (float, float, float)
        C++: virtual double *GetDisplayPosition()
        
        Handles usually have their coordinates set in display coordinates
        (generally by an associated widget) and internally maintain the
        position in world coordinates. (Using world coordinates insures
        that handles are rendered in the right position when the camera
        view changes.) These methods are often subclassed because special
        constraint operations can be used to control the actual
        positioning.
        """
        ...
    
    def GetInteractionStateMaxValue(self):
        """
        V.GetInteractionStateMaxValue() -> int
        C++: virtual int GetInteractionStateMaxValue()
        
        The interaction state may be set from a widget (e.g.,
        HandleWidget) or other object. This controls how the interaction
        with the widget proceeds. Normally this method is used as part of
        a handshaking processwith the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetInteractionStateMinValue(self):
        """
        V.GetInteractionStateMinValue() -> int
        C++: virtual int GetInteractionStateMinValue()
        
        The interaction state may be set from a widget (e.g.,
        HandleWidget) or other object. This controls how the interaction
        with the widget proceeds. Normally this method is used as part of
        a handshaking processwith the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overload the superclasses' GetMTime() because the internal
        vtkCoordinates are used to keep the state of the representation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def GetPointPlacer(self):
        """
        V.GetPointPlacer() -> vtkPointPlacer
        C++: virtual vtkPointPlacer *GetPointPlacer()
        
        Set/Get the point placer. Point placers can be used to dictate
        constraints on the placement of handles. As an example, see
        vtkBoundedPlanePointPlacer (constrains the placement of handles
        to a set of bounded planes) vtkFocalPlanePointPlacer (constrains
        placement on the focal plane) etc. The default point placer is
        vtkPointPlacer (which does not apply any constraints, so the
        handles are free to move anywhere).
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> int
        C++: virtual int GetTolerance()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the widget to be
        active.
        """
        ...
    
    def GetToleranceMaxValue(self):
        """
        V.GetToleranceMaxValue() -> int
        C++: virtual int GetToleranceMaxValue()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the widget to be
        active.
        """
        ...
    
    def GetToleranceMinValue(self):
        """
        V.GetToleranceMinValue() -> int
        C++: virtual int GetToleranceMinValue()
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the widget to be
        active.
        """
        ...
    
    def GetTranslationAxis(self):
        """
        V.GetTranslationAxis() -> int
        C++: virtual int GetTranslationAxis()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTranslationAxisMaxValue(self):
        """
        V.GetTranslationAxisMaxValue() -> int
        C++: virtual int GetTranslationAxisMaxValue()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTranslationAxisMinValue(self):
        """
        V.GetTranslationAxisMinValue() -> int
        C++: virtual int GetTranslationAxisMinValue()
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def GetTranslationVector(self, float_tuple, float_tuple_1, *float):
        """
        V.GetTranslationVector((float, ...), (float, ...), [float, ...])
        C++: virtual void GetTranslationVector(const double *p1,
            const double *p2, double *v)
        
        Gets the translation vector
        """
        ...
    
    def GetWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetWorldPosition([float, float, float])
        C++: virtual void GetWorldPosition(double pos[3])
        V.GetWorldPosition() -> (float, float, float)
        C++: virtual double *GetWorldPosition()
        
        Handles usually have their coordinates set in display coordinates
        (generally by an associated widget) and internally maintain the
        position in world coordinates. (Using world coordinates insures
        that handles are rendered in the right position when the camera
        view changes.) These methods are often subclassed because special
        constraint operations can be used to control the actual
        positioning.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instances of this class.
        """
        ...
    
    def IsTranslationConstrained(self):
        """
        V.IsTranslationConstrained() -> bool
        C++: bool IsTranslationConstrained()
        
        Returns true if ContrainedAxis
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instances of this class.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHandleRepresentation
        C++: vtkHandleRepresentation *NewInstance()
        
        Standard methods for instances of this class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHandleRepresentation
        C++: static vtkHandleRepresentation *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instances of this class.
        """
        ...
    
    def SetActiveRepresentation(self, p_int):
        """
        V.SetActiveRepresentation(int)
        C++: virtual void SetActiveRepresentation(vtkTypeBool _arg)
        
        Flag controls whether the widget becomes visible when the mouse
        pointer moves close to it (i.e., the widget becomes active). By
        default, ActiveRepresentation is off and the representation is
        always visible.
        """
        ...
    
    def SetConstrained(self, p_int):
        """
        V.SetConstrained(int)
        C++: virtual void SetConstrained(vtkTypeBool _arg)
        
        Specify whether any motions (such as scale, translate, etc.) are
        constrained in some way (along an axis, etc.) Widgets can use
        this to control the resulting motion.
        """
        ...
    
    def SetDisplayPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetDisplayPosition([float, float, float])
        C++: virtual void SetDisplayPosition(double pos[3])
        
        Handles usually have their coordinates set in display coordinates
        (generally by an associated widget) and internally maintain the
        position in world coordinates. (Using world coordinates insures
        that handles are rendered in the right position when the camera
        view changes.) These methods are often subclassed because special
        constraint operations can be used to control the actual
        positioning.
        """
        ...
    
    def SetInteractionState(self, p_int):
        """
        V.SetInteractionState(int)
        C++: virtual void SetInteractionState(int _arg)
        
        The interaction state may be set from a widget (e.g.,
        HandleWidget) or other object. This controls how the interaction
        with the widget proceeds. Normally this method is used as part of
        a handshaking processwith the widget: First
        ComputeInteractionState() is invoked that returns a state based
        on geometric considerations (i.e., cursor near a widget feature),
        then based on events, the widget may modify this further.
        """
        ...
    
    def SetPointPlacer(self, vtkPointPlacer):
        """
        V.SetPointPlacer(vtkPointPlacer)
        C++: virtual void SetPointPlacer(vtkPointPlacer *)
        
        Set/Get the point placer. Point placers can be used to dictate
        constraints on the placement of handles. As an example, see
        vtkBoundedPlanePointPlacer (constrains the placement of handles
        to a set of bounded planes) vtkFocalPlanePointPlacer (constrains
        placement on the focal plane) etc. The default point placer is
        vtkPointPlacer (which does not apply any constraints, so the
        handles are free to move anywhere).
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *ren) override;
        
        Methods to make this class properly act like a
        vtkWidgetRepresentation.
        """
        ...
    
    def SetTolerance(self, p_int):
        """
        V.SetTolerance(int)
        C++: virtual void SetTolerance(int _arg)
        
        The tolerance representing the distance to the widget (in pixels)
        in which the cursor is considered near enough to the widget to be
        active.
        """
        ...
    
    def SetTranslationAxis(self, p_int):
        """
        V.SetTranslationAxis(int)
        C++: virtual void SetTranslationAxis(int _arg)
        
        Gets/Sets the constraint axis for translations. Returns
        Axis::NONE if none.
        """
        ...
    
    def SetTranslationAxisOff(self):
        """
        V.SetTranslationAxisOff()
        C++: void SetTranslationAxisOff()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetWorldPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetWorldPosition([float, float, float])
        C++: virtual void SetWorldPosition(double pos[3])
        
        Handles usually have their coordinates set in display coordinates
        (generally by an associated widget) and internally maintain the
        position in world coordinates. (Using world coordinates insures
        that handles are rendered in the right position when the camera
        view changes.) These methods are often subclassed because special
        constraint operations can be used to control the actual
        positioning.
        """
        ...
    
    def SetXTranslationAxisOn(self):
        """
        V.SetXTranslationAxisOn()
        C++: void SetXTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetYTranslationAxisOn(self):
        """
        V.SetYTranslationAxisOn()
        C++: void SetYTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def SetZTranslationAxisOn(self):
        """
        V.SetZTranslationAxisOn()
        C++: void SetZTranslationAxisOn()
        
        Toggles constraint translation axis on/off.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Methods to make this class properly act like a
        vtkWidgetRepresentation.
        """
        ...
    
    def Translate(self, float_tuple, float_tuple_1):
        """
        V.Translate((float, ...), (float, ...))
        C++: virtual void Translate(const double *p1, const double *p2)
        V.Translate((float, ...))
        C++: virtual void Translate(const double *v)
        
        Translates world position by vector p1p2 projected on the
        constraint axis if any.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Nearby = ...
    Outside = ...
    Scaling = ...
    Selecting = ...
    Translating = ...
    _InteractionState = ...
    __dict__ = ...
    __vtkname__ = ...


