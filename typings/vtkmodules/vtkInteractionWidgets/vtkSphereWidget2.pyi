"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkSphereWidget2(vtkAbstractWidget):
    """
    vtkSphereWidget2 - 3D widget for manipulating a point on a sphere
    
    Superclass: vtkAbstractWidget
    
    This 3D widget interacts with a vtkSphereRepresentation class (i.e.,
    it handles the events that drive its corresponding representation).
    It can be used to position a point on a sphere (for example, to place
    a light or camera), or to position a sphere in a scene, including
    translating and scaling the sphere.
    
    A nice feature of vtkSphereWidget2, like any 3D widget, is that it
    will work in combination with the current interactor style (or any
    other interactor observer). That is, if vtkSphereWidget2 does not
    handle an event, then all other registered observers (including the
    interactor style) have an opportunity to process the event.
    Otherwise, the vtkSphereWidget2 will terminate the processing of the
    event that it handles.
    
    To use this widget, you generally pair it with a
    vtkSphereRepresentation (or a subclass). Various options are
    available in the representation for controlling how the widget
    appears, and how the widget functions.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    If the handle or sphere are selected:
      LeftButtonPressEvent - select the handle or sphere
      LeftButtonReleaseEvent - release the handle to sphere
      MouseMoveEvent - move the handle or translate the sphere In all the
    cases, independent of what is picked, the widget responds to the
    following VTK events:
      MiddleButtonPressEvent - translate the representation
      MiddleButtonReleaseEvent - stop translating the representation
      RightButtonPressEvent - scale the widget's representation
      RightButtonReleaseEvent - stop scaling the representation
      MouseMoveEvent - scale (if right button) or move (if middle button)
    the widget 
    
    @par Event Bindings: Note that the event bindings described above can
    be changed using this class's vtkWidgetEventTranslator. This class
    translates VTK events into the vtkSphereWidget2's widget events:
    
    
      vtkWidgetEvent::Select -- some part of the widget has been selected
      vtkWidgetEvent::EndSelect -- the selection process has completed
      vtkWidgetEvent::Scale -- some part of the widget has been selected
      vtkWidgetEvent::EndScale -- the selection process has completed
      vtkWidgetEvent::Translate -- some part of the widget has been
    selected
      vtkWidgetEvent::EndTranslate -- the selection process has completed
      vtkWidgetEvent::Move -- a request for motion has been invoked 
    
    @par Event Bindings: In turn, when these widget events are processed,
    the vtkSphereWidget2 invokes the following VTK events on itself
    (which observers can listen for):
    
    
      vtkCommand::StartInteractionEvent (on vtkWidgetEvent::Select)
      vtkCommand::EndInteractionEvent (on vtkWidgetEvent::EndSelect)
      vtkCommand::InteractionEvent (on vtkWidgetEvent::Move) 
    
    @par Event Bindings: This class, and the affiliated
    vtkSphereRepresentation, are second generation VTK widgets. An
    earlier version of this functionality was defined in the class
    vtkSphereWidget.
    
    @sa
    vtkSphereRepresentation vtkSphereWidget
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set. By
        default, this is an instance of the vtkSphereRepresentation
        class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard class methods for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard class methods for type information and printing.
        """
        ...
    
    def GetScalingEnabled(self):
        """
        V.GetScalingEnabled() -> int
        C++: virtual vtkTypeBool GetScalingEnabled()
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def GetTranslationEnabled(self):
        """
        V.GetTranslationEnabled() -> int
        C++: virtual vtkTypeBool GetTranslationEnabled()
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard class methods for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard class methods for type information and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSphereWidget2
        C++: vtkSphereWidget2 *NewInstance()
        
        Standard class methods for type information and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSphereWidget2
        C++: static vtkSphereWidget2 *SafeDownCast(vtkObjectBase *o)
        
        Standard class methods for type information and printing.
        """
        ...
    
    def ScalingEnabledOff(self):
        """
        V.ScalingEnabledOff()
        C++: virtual void ScalingEnabledOff()
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def ScalingEnabledOn(self):
        """
        V.ScalingEnabledOn()
        C++: virtual void ScalingEnabledOn()
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int enabling) override;
        
        Override superclasses' SetEnabled() method because the line
        widget must enable its internal handle widgets.
        """
        ...
    
    def SetRepresentation(self, vtkSphereRepresentation):
        """
        V.SetRepresentation(vtkSphereRepresentation)
        C++: void SetRepresentation(vtkSphereRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def SetScalingEnabled(self, p_int):
        """
        V.SetScalingEnabled(int)
        C++: virtual void SetScalingEnabled(vtkTypeBool _arg)
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def SetTranslationEnabled(self, p_int):
        """
        V.SetTranslationEnabled(int)
        C++: virtual void SetTranslationEnabled(vtkTypeBool _arg)
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def TranslationEnabledOff(self):
        """
        V.TranslationEnabledOff()
        C++: virtual void TranslationEnabledOff()
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def TranslationEnabledOn(self):
        """
        V.TranslationEnabledOn()
        C++: virtual void TranslationEnabledOn()
        
        Control the behavior of the widget (i.e., how it processes
        events). Translation, and scaling can all be enabled and
        disabled.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


