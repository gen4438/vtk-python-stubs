"""
This type stub file was generated by pyright.
"""

from .vtkAbstractWidget import vtkAbstractWidget

class vtkLightWidget(vtkAbstractWidget):
    """
    vtkLightWidget - 3D widget for showing a LightRepresentation
    
    Superclass: vtkAbstractWidget
    
    To use this widget, one generally pairs it with a
    vtkLightRepresentation. Various options are available in the
    representation for controlling how the widget appears, and how it
    functions.
    
    @par Event Bindings: By default, the widget responds to the following
    VTK events (i.e., it watches the vtkRenderWindowInteractor for these
    events):
    
    Select and move the sphere to change the light position. Select and
    move the cone or the line to change the focal point. Right-Click and
    scale on the cone to change the cone angle. 
    
    @warning
    Note that the widget can be picked even when it is "behind" other
    actors.  This is an intended feature and not a bug.
    
    @warning
    This class, and vtkLightRepresentation, are second generation VTK
    widgets.
    
    @sa
    vtkLightRepresentation vtkSphereWidget
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: void CreateDefaultRepresentation() override;
        
        Create the default widget representation if one is not set.
        """
        ...
    
    def GetLightRepresentation(self):
        """
        V.GetLightRepresentation() -> vtkLightRepresentation
        C++: vtkLightRepresentation *GetLightRepresentation()
        
        Return the representation as a vtkLightRepresentation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLightWidget
        C++: vtkLightWidget *NewInstance()
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLightWidget
        C++: static vtkLightWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def SetRepresentation(self, vtkLightRepresentation):
        """
        V.SetRepresentation(vtkLightRepresentation)
        C++: void SetRepresentation(vtkLightRepresentation *r)
        
        Specify an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


