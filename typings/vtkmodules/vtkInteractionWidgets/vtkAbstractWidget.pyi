"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkAbstractWidget(__vtkmodules_vtkRenderingCore.vtkInteractorObserver):
    """
    vtkAbstractWidget - define the API for widget / widget representation
    
    Superclass: vtkInteractorObserver
    
    The vtkAbstractWidget defines an API and implements methods common to
    all widgets using the interaction/representation design. In this
    design, the term interaction means that part of the widget that
    performs event handling, while the representation corresponds to a
    vtkProp (or the subclass vtkWidgetRepresentation) used to represent
    the widget. vtkAbstractWidget also implements some methods common to
    all subclasses.
    
    Note that vtkAbstractWidget provides access to the
    vtkWidgetEventTranslator.  This class is responsible for translating
    VTK events (defined in vtkCommand.h) into widget events (defined in
    vtkWidgetEvent.h). This class can be manipulated so that different
    VTK events can be mapped into widget events, thereby allowing the
    modification of event bindings. Each subclass of vtkAbstractWidget
    defines the events to which it responds.
    
    @warning
    Note that the pair ( vtkAbstractWidget / vtkWidgetRepresentation ) is
    an implementation of the second generation VTK Widgets design. In the
    first generation design, widgets were implemented in a single
    monolithic class. This design was problematic because in
    client-server application it was difficult to manage widgets
    properly. Also, new "representations" or look-and-feel, for a widget
    required a whole new class, with a lot of redundant code. The
    separation of the widget event handling and representation enables
    users and developers to create new appearances for the widget. It
    also facilitates parallel processing, where the client application
    handles events, and remote representations of the widget are slaves
    to the client (and do not handle events).
    
    @sa
    vtkWidgetRepresentation vtkWidgetEventTranslator
    vtkWidgetCallbackMapper
    """
    def CreateDefaultRepresentation(self):
        """
        V.CreateDefaultRepresentation()
        C++: virtual void CreateDefaultRepresentation()
        
        Create the default widget representation if one is not set. The
        representation defines the geometry of the widget (i.e., how it
        appears) as well as providing special methods for manipulting the
        state and appearance of the widget.
        """
        ...
    
    def GetEventTranslator(self):
        """
        V.GetEventTranslator() -> vtkWidgetEventTranslator
        C++: vtkWidgetEventTranslator *GetEventTranslator()
        
        Get the event translator. Careful manipulation of this class
        enables the user to override the default event bindings.
        """
        ...
    
    def GetManagesCursor(self):
        """
        V.GetManagesCursor() -> int
        C++: virtual vtkTypeBool GetManagesCursor()
        
        Turn on or off the management of the cursor. Cursor management is
        typically disabled for subclasses when composite widgets are
        created. For example, vtkHandleWidgets are often used to create
        composite widgets, and the parent widget takes over the cursor
        management.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def GetParent(self):
        """
        V.GetParent() -> vtkAbstractWidget
        C++: virtual vtkAbstractWidget *GetParent()
        """
        ...
    
    def GetProcessEvents(self):
        """
        V.GetProcessEvents() -> int
        C++: virtual vtkTypeBool GetProcessEvents()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def GetProcessEventsMaxValue(self):
        """
        V.GetProcessEventsMaxValue() -> int
        C++: virtual vtkTypeBool GetProcessEventsMaxValue()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def GetProcessEventsMinValue(self):
        """
        V.GetProcessEventsMinValue() -> int
        C++: virtual vtkTypeBool GetProcessEventsMinValue()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def GetRepresentation(self):
        """
        V.GetRepresentation() -> vtkWidgetRepresentation
        C++: vtkWidgetRepresentation *GetRepresentation()
        
        Return an instance of vtkWidgetRepresentation used to represent
        this widget in the scene. Note that the representation is a
        subclass of vtkProp (typically a subclass of
        vtkWidgetRepresentation) so it can be added to the renderer
        independent of the widget.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def ManagesCursorOff(self):
        """
        V.ManagesCursorOff()
        C++: virtual void ManagesCursorOff()
        
        Turn on or off the management of the cursor. Cursor management is
        typically disabled for subclasses when composite widgets are
        created. For example, vtkHandleWidgets are often used to create
        composite widgets, and the parent widget takes over the cursor
        management.
        """
        ...
    
    def ManagesCursorOn(self):
        """
        V.ManagesCursorOn()
        C++: virtual void ManagesCursorOn()
        
        Turn on or off the management of the cursor. Cursor management is
        typically disabled for subclasses when composite widgets are
        created. For example, vtkHandleWidgets are often used to create
        composite widgets, and the parent widget takes over the cursor
        management.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractWidget
        C++: vtkAbstractWidget *NewInstance()
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def ProcessEventsOff(self):
        """
        V.ProcessEventsOff()
        C++: virtual void ProcessEventsOff()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def ProcessEventsOn(self):
        """
        V.ProcessEventsOn()
        C++: virtual void ProcessEventsOn()
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: void Render()
        
        This method is called by subclasses when a render method is to be
        invoked on the vtkRenderWindowInteractor. This method should be
        called (instead of vtkRenderWindow::Render() because it has built
        into it optimizations for minimizing renders and/or speeding
        renders.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractWidget
        C++: static vtkAbstractWidget *SafeDownCast(vtkObjectBase *o)
        
        Standard macros implementing standard VTK methods.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        Methods for activating this widget. Note that the widget
        representation must be specified or the widget will not appear.
        ProcessEvents (On by default) must be On for Enabled widget to
        respond to interaction. If ProcessEvents is Off,
        enabling/disabling a widget merely affects the visibility of the
        representation.
        """
        ...
    
    def SetManagesCursor(self, p_int):
        """
        V.SetManagesCursor(int)
        C++: virtual void SetManagesCursor(vtkTypeBool _arg)
        
        Turn on or off the management of the cursor. Cursor management is
        typically disabled for subclasses when composite widgets are
        created. For example, vtkHandleWidgets are often used to create
        composite widgets, and the parent widget takes over the cursor
        management.
        """
        ...
    
    def SetParent(self, vtkAbstractWidget):
        """
        V.SetParent(vtkAbstractWidget)
        C++: void SetParent(vtkAbstractWidget *parent)
        
        Specifying a parent to this widget is used when creating
        composite widgets. It is an internal method not meant to be used
        by the public. When a widget has a parent, it defers the
        rendering to the parent. It may also defer managing the cursor
        (see ManagesCursor ivar).
        """
        ...
    
    def SetPriority(self, p_float):
        """
        V.SetPriority(float)
        C++: void SetPriority(float) override;
        
        Override the superclass method. This will automatically change
        the priority of the widget. Unlike the superclass documentation,
        no methods such as SetInteractor to null and reset it etc. are
        necessary
        """
        ...
    
    def SetProcessEvents(self, p_int):
        """
        V.SetProcessEvents(int)
        C++: virtual void SetProcessEvents(vtkTypeBool _arg)
        
        Methods to change whether the widget responds to interaction. Set
        this to Off to disable interaction. On by default. Subclasses
        must override SetProcessEvents() to make sure that they pass on
        the flag to all component widgets.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


