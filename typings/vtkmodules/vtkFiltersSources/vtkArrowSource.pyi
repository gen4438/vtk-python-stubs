"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkArrowSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkArrowSource - Appends a cylinder to a cone to form an arrow.
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkArrowSource was intended to be used as the source for a glyph. The
    shaft base is always at (0,0,0). The arrow tip is always at (1,0,0).
    If "Invert" is true, then the ends are flipped i.e. tip is at (0,0,0)
    while base is at (1, 0, 0). The resolution of the cone and shaft can
    be set and default to 6. The radius of the cone and shaft can be set
    and default to 0.03 and 0.1. The length of the tip can also be set,
    and defaults to 0.35.
    """
    def GetInvert(self):
        """
        V.GetInvert() -> bool
        C++: virtual bool GetInvert()
        
        Inverts the arrow direction. When set to true, base is at (1, 0,
        0) while the tip is at (0, 0, 0). The default is false, i.e. base
        at (0, 0, 0) and the tip at (1, 0, 0).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShaftRadius(self):
        """
        V.GetShaftRadius() -> float
        C++: virtual double GetShaftRadius()
        
        Set the radius of the shaft.  Defaults to 0.03.
        """
        ...
    
    def GetShaftRadiusMaxValue(self):
        """
        V.GetShaftRadiusMaxValue() -> float
        C++: virtual double GetShaftRadiusMaxValue()
        
        Set the radius of the shaft.  Defaults to 0.03.
        """
        ...
    
    def GetShaftRadiusMinValue(self):
        """
        V.GetShaftRadiusMinValue() -> float
        C++: virtual double GetShaftRadiusMinValue()
        
        Set the radius of the shaft.  Defaults to 0.03.
        """
        ...
    
    def GetShaftResolution(self):
        """
        V.GetShaftResolution() -> int
        C++: virtual int GetShaftResolution()
        
        Set the resolution of the shaft.  2 gives a rectangle. I would
        like to extend the cone to produce a line, but this is not an
        option now.
        """
        ...
    
    def GetShaftResolutionMaxValue(self):
        """
        V.GetShaftResolutionMaxValue() -> int
        C++: virtual int GetShaftResolutionMaxValue()
        
        Set the resolution of the shaft.  2 gives a rectangle. I would
        like to extend the cone to produce a line, but this is not an
        option now.
        """
        ...
    
    def GetShaftResolutionMinValue(self):
        """
        V.GetShaftResolutionMinValue() -> int
        C++: virtual int GetShaftResolutionMinValue()
        
        Set the resolution of the shaft.  2 gives a rectangle. I would
        like to extend the cone to produce a line, but this is not an
        option now.
        """
        ...
    
    def GetTipLength(self):
        """
        V.GetTipLength() -> float
        C++: virtual double GetTipLength()
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def GetTipLengthMaxValue(self):
        """
        V.GetTipLengthMaxValue() -> float
        C++: virtual double GetTipLengthMaxValue()
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def GetTipLengthMinValue(self):
        """
        V.GetTipLengthMinValue() -> float
        C++: virtual double GetTipLengthMinValue()
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def GetTipRadius(self):
        """
        V.GetTipRadius() -> float
        C++: virtual double GetTipRadius()
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def GetTipRadiusMaxValue(self):
        """
        V.GetTipRadiusMaxValue() -> float
        C++: virtual double GetTipRadiusMaxValue()
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def GetTipRadiusMinValue(self):
        """
        V.GetTipRadiusMinValue() -> float
        C++: virtual double GetTipRadiusMinValue()
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def GetTipResolution(self):
        """
        V.GetTipResolution() -> int
        C++: virtual int GetTipResolution()
        
        Set the resolution of the tip.  The tip behaves the same as a
        cone. Resoultion 1 gives a single triangle, 2 gives two crossed
        triangles.
        """
        ...
    
    def GetTipResolutionMaxValue(self):
        """
        V.GetTipResolutionMaxValue() -> int
        C++: virtual int GetTipResolutionMaxValue()
        
        Set the resolution of the tip.  The tip behaves the same as a
        cone. Resoultion 1 gives a single triangle, 2 gives two crossed
        triangles.
        """
        ...
    
    def GetTipResolutionMinValue(self):
        """
        V.GetTipResolutionMinValue() -> int
        C++: virtual int GetTipResolutionMinValue()
        
        Set the resolution of the tip.  The tip behaves the same as a
        cone. Resoultion 1 gives a single triangle, 2 gives two crossed
        triangles.
        """
        ...
    
    def InvertOff(self):
        """
        V.InvertOff()
        C++: virtual void InvertOff()
        
        Inverts the arrow direction. When set to true, base is at (1, 0,
        0) while the tip is at (0, 0, 0). The default is false, i.e. base
        at (0, 0, 0) and the tip at (1, 0, 0).
        """
        ...
    
    def InvertOn(self):
        """
        V.InvertOn()
        C++: virtual void InvertOn()
        
        Inverts the arrow direction. When set to true, base is at (1, 0,
        0) while the tip is at (0, 0, 0). The default is false, i.e. base
        at (0, 0, 0) and the tip at (1, 0, 0).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArrowSource
        C++: vtkArrowSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArrowSource
        C++: static vtkArrowSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInvert(self, bool):
        """
        V.SetInvert(bool)
        C++: virtual void SetInvert(bool _arg)
        
        Inverts the arrow direction. When set to true, base is at (1, 0,
        0) while the tip is at (0, 0, 0). The default is false, i.e. base
        at (0, 0, 0) and the tip at (1, 0, 0).
        """
        ...
    
    def SetShaftRadius(self, p_float):
        """
        V.SetShaftRadius(float)
        C++: virtual void SetShaftRadius(double _arg)
        
        Set the radius of the shaft.  Defaults to 0.03.
        """
        ...
    
    def SetShaftResolution(self, p_int):
        """
        V.SetShaftResolution(int)
        C++: virtual void SetShaftResolution(int _arg)
        
        Set the resolution of the shaft.  2 gives a rectangle. I would
        like to extend the cone to produce a line, but this is not an
        option now.
        """
        ...
    
    def SetTipLength(self, p_float):
        """
        V.SetTipLength(float)
        C++: virtual void SetTipLength(double _arg)
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def SetTipRadius(self, p_float):
        """
        V.SetTipRadius(float)
        C++: virtual void SetTipRadius(double _arg)
        
        Set the length, and radius of the tip.  They default to 0.35 and
        0.1
        """
        ...
    
    def SetTipResolution(self, p_int):
        """
        V.SetTipResolution(int)
        C++: virtual void SetTipResolution(int _arg)
        
        Set the resolution of the tip.  The tip behaves the same as a
        cone. Resoultion 1 gives a single triangle, 2 gives two crossed
        triangles.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


