"""
This type stub file was generated by pyright.
"""

from .vtkPolyPointSource import vtkPolyPointSource

class vtkPolyLineSource(vtkPolyPointSource):
    """
    vtkPolyLineSource - create a poly line from a list of input points
    
    Superclass: vtkPolyPointSource
    
    vtkPolyLineSource is a source object that creates a poly line from
    user-specified points. The output is a vtkPolyLine.
    """
    def ClosedOff(self):
        """
        V.ClosedOff()
        C++: virtual void ClosedOff()
        
        Set whether to close the poly line by connecting the last and
        first points.
        """
        ...
    
    def ClosedOn(self):
        """
        V.ClosedOn()
        C++: virtual void ClosedOn()
        
        Set whether to close the poly line by connecting the last and
        first points.
        """
        ...
    
    def GetClosed(self):
        """
        V.GetClosed() -> int
        C++: virtual vtkTypeBool GetClosed()
        
        Set whether to close the poly line by connecting the last and
        first points.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyLineSource
        C++: vtkPolyLineSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyLineSource
        C++: static vtkPolyLineSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClosed(self, p_int):
        """
        V.SetClosed(int)
        C++: virtual void SetClosed(vtkTypeBool _arg)
        
        Set whether to close the poly line by connecting the last and
        first points.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


