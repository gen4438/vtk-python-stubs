"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkGraphToPolyData(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkGraphToPolyData - convert a vtkGraph to vtkPolyData
    
    Superclass: vtkPolyDataAlgorithm
    
    Converts a vtkGraph to a vtkPolyData.  This assumes that the points
    of the graph have already been filled (perhaps by vtkGraphLayout),
    and coverts all the edge of the graph into lines in the polydata. The
    vertex data is passed along to the point data, and the edge data is
    passed along to the cell data.
    
    Only the owned graph edges (i.e. edges with ghost level 0) are copied
    into the vtkPolyData.
    """
    def EdgeGlyphOutputOff(self):
        """
        V.EdgeGlyphOutputOff()
        C++: virtual void EdgeGlyphOutputOff()
        
        Create a second output containing points and orientation vectors
        for drawing arrows or other glyphs on edges.  This output should
        be set as the first input to vtkGlyph3D to place glyphs on the
        edges. vtkGlyphSource2D's VTK_EDGEARROW_GLYPH provides a good
        glyph for drawing arrows. Default value is off.
        """
        ...
    
    def EdgeGlyphOutputOn(self):
        """
        V.EdgeGlyphOutputOn()
        C++: virtual void EdgeGlyphOutputOn()
        
        Create a second output containing points and orientation vectors
        for drawing arrows or other glyphs on edges.  This output should
        be set as the first input to vtkGlyph3D to place glyphs on the
        edges. vtkGlyphSource2D's VTK_EDGEARROW_GLYPH provides a good
        glyph for drawing arrows. Default value is off.
        """
        ...
    
    def GetEdgeGlyphOutput(self):
        """
        V.GetEdgeGlyphOutput() -> bool
        C++: virtual bool GetEdgeGlyphOutput()
        
        Create a second output containing points and orientation vectors
        for drawing arrows or other glyphs on edges.  This output should
        be set as the first input to vtkGlyph3D to place glyphs on the
        edges. vtkGlyphSource2D's VTK_EDGEARROW_GLYPH provides a good
        glyph for drawing arrows. Default value is off.
        """
        ...
    
    def GetEdgeGlyphPosition(self):
        """
        V.GetEdgeGlyphPosition() -> float
        C++: virtual double GetEdgeGlyphPosition()
        
        The position of the glyph point along the edge. 0 puts a glyph
        point at the source of each edge. 1 puts a glyph point at the
        target of each edge. An intermediate value will place the glyph
        point between the source and target. The default value is 1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphToPolyData
        C++: vtkGraphToPolyData *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphToPolyData
        C++: static vtkGraphToPolyData *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEdgeGlyphOutput(self, bool):
        """
        V.SetEdgeGlyphOutput(bool)
        C++: virtual void SetEdgeGlyphOutput(bool _arg)
        
        Create a second output containing points and orientation vectors
        for drawing arrows or other glyphs on edges.  This output should
        be set as the first input to vtkGlyph3D to place glyphs on the
        edges. vtkGlyphSource2D's VTK_EDGEARROW_GLYPH provides a good
        glyph for drawing arrows. Default value is off.
        """
        ...
    
    def SetEdgeGlyphPosition(self, p_float):
        """
        V.SetEdgeGlyphPosition(float)
        C++: virtual void SetEdgeGlyphPosition(double _arg)
        
        The position of the glyph point along the edge. 0 puts a glyph
        point at the source of each edge. 1 puts a glyph point at the
        target of each edge. An intermediate value will place the glyph
        point between the source and target. The default value is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


