"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPlatonicSolidSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkPlatonicSolidSource - produce polygonal Platonic solids
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkPlatonicSolidSource can generate each of the five Platonic solids:
    tetrahedron, cube, octahedron, icosahedron, and dodecahedron. Each of
    the solids is placed inside a sphere centered at the origin with
    radius 1.0. To use this class, simply specify the solid to create.
    Note that this source object creates cell scalars that are (integral
    value) face numbers.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetSolidType(self):
        """
        V.GetSolidType() -> int
        C++: virtual int GetSolidType()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def GetSolidTypeMaxValue(self):
        """
        V.GetSolidTypeMaxValue() -> int
        C++: virtual int GetSolidTypeMaxValue()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def GetSolidTypeMinValue(self):
        """
        V.GetSolidTypeMinValue() -> int
        C++: virtual int GetSolidTypeMinValue()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlatonicSolidSource
        C++: vtkPlatonicSolidSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlatonicSolidSource
        C++: static vtkPlatonicSolidSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetSolidType(self, p_int):
        """
        V.SetSolidType(int)
        C++: virtual void SetSolidType(int _arg)
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def SetSolidTypeToCube(self):
        """
        V.SetSolidTypeToCube()
        C++: void SetSolidTypeToCube()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def SetSolidTypeToDodecahedron(self):
        """
        V.SetSolidTypeToDodecahedron()
        C++: void SetSolidTypeToDodecahedron()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def SetSolidTypeToIcosahedron(self):
        """
        V.SetSolidTypeToIcosahedron()
        C++: void SetSolidTypeToIcosahedron()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def SetSolidTypeToOctahedron(self):
        """
        V.SetSolidTypeToOctahedron()
        C++: void SetSolidTypeToOctahedron()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def SetSolidTypeToTetrahedron(self):
        """
        V.SetSolidTypeToTetrahedron()
        C++: void SetSolidTypeToTetrahedron()
        
        Specify the type of PlatonicSolid solid to create.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


