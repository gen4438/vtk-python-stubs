"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkButtonSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkButtonSource - abstract class for creating various button types
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkButtonSource is an abstract class that defines an API for creating
    "button-like" objects in VTK. A button is a geometry with a
    rectangular region that can be textured. The button is divided into
    two regions: the texture region and the shoulder region. The points
    in both regions are assigned texture coordinates. The texture region
    has texture coordinates consistent with the image to be placed on it.
     All points in the shoulder regions are assigned a texture coordinate
    specified by the user.  In this way the shoulder region can be
    colored by the texture.
    
    Creating a vtkButtonSource requires specifying its center point.
    (Subclasses have other attributes that must be set to control the
    shape of the button.) You must also specify how to control the shape
    of the texture region; i.e., whether to size the texture region
    proportional to the texture dimensions or whether to size the texture
    region proportional to the button. Also, buttons can be created
    single sided are mirrored to create two-sided buttons.
    
    @sa
    vtkEllipticalButtonSource vtkRectangularButtonSource
    
    @warning
    The button is defined in the x-y plane. Use
    vtkTransformPolyDataFilter or vtkGlyph3D to orient the button in a
    different direction.
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Specify a point defining the origin (center) of the button.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShoulderTextureCoordinate(self):
        """
        V.GetShoulderTextureCoordinate() -> (float, float)
        C++: virtual double *GetShoulderTextureCoordinate()
        
        Set/Get the default texture coordinate to set the shoulder region
        to.
        """
        ...
    
    def GetTextureDimensions(self):
        """
        V.GetTextureDimensions() -> (int, int)
        C++: virtual int *GetTextureDimensions()
        
        Set/get the texture dimension. This needs to be set if the
        texture style is set to fit the image.
        """
        ...
    
    def GetTextureStyle(self):
        """
        V.GetTextureStyle() -> int
        C++: virtual int GetTextureStyle()
        
        Set/Get the style of the texture region: whether to size it
        according to the x-y dimensions of the texture, or whether to
        make the texture region proportional to the width/height of the
        button.
        """
        ...
    
    def GetTextureStyleMaxValue(self):
        """
        V.GetTextureStyleMaxValue() -> int
        C++: virtual int GetTextureStyleMaxValue()
        
        Set/Get the style of the texture region: whether to size it
        according to the x-y dimensions of the texture, or whether to
        make the texture region proportional to the width/height of the
        button.
        """
        ...
    
    def GetTextureStyleMinValue(self):
        """
        V.GetTextureStyleMinValue() -> int
        C++: virtual int GetTextureStyleMinValue()
        
        Set/Get the style of the texture region: whether to size it
        according to the x-y dimensions of the texture, or whether to
        make the texture region proportional to the width/height of the
        button.
        """
        ...
    
    def GetTwoSided(self):
        """
        V.GetTwoSided() -> int
        C++: virtual vtkTypeBool GetTwoSided()
        
        Indicate whether the button is single or double sided. A double
        sided button can be viewed from two sides...it looks sort of like
        a "pill." A single-sided button is meant to viewed from a single
        side; it looks like a "clam-shell."
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkButtonSource
        C++: vtkButtonSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkButtonSource
        C++: static vtkButtonSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Specify a point defining the origin (center) of the button.
        """
        ...
    
    def SetShoulderTextureCoordinate(self, p_float, p_float_1):
        """
        V.SetShoulderTextureCoordinate(float, float)
        C++: virtual void SetShoulderTextureCoordinate(double _arg1,
            double _arg2)
        V.SetShoulderTextureCoordinate((float, float))
        C++: void SetShoulderTextureCoordinate(const double _arg[2])
        
        Set/Get the default texture coordinate to set the shoulder region
        to.
        """
        ...
    
    def SetTextureDimensions(self, p_int, p_int_1):
        """
        V.SetTextureDimensions(int, int)
        C++: virtual void SetTextureDimensions(int _arg1, int _arg2)
        V.SetTextureDimensions((int, int))
        C++: void SetTextureDimensions(const int _arg[2])
        
        Set/get the texture dimension. This needs to be set if the
        texture style is set to fit the image.
        """
        ...
    
    def SetTextureStyle(self, p_int):
        """
        V.SetTextureStyle(int)
        C++: virtual void SetTextureStyle(int _arg)
        
        Set/Get the style of the texture region: whether to size it
        according to the x-y dimensions of the texture, or whether to
        make the texture region proportional to the width/height of the
        button.
        """
        ...
    
    def SetTextureStyleToFitImage(self):
        """
        V.SetTextureStyleToFitImage()
        C++: void SetTextureStyleToFitImage()
        
        Set/Get the style of the texture region: whether to size it
        according to the x-y dimensions of the texture, or whether to
        make the texture region proportional to the width/height of the
        button.
        """
        ...
    
    def SetTextureStyleToProportional(self):
        """
        V.SetTextureStyleToProportional()
        C++: void SetTextureStyleToProportional()
        
        Set/Get the style of the texture region: whether to size it
        according to the x-y dimensions of the texture, or whether to
        make the texture region proportional to the width/height of the
        button.
        """
        ...
    
    def SetTwoSided(self, p_int):
        """
        V.SetTwoSided(int)
        C++: virtual void SetTwoSided(vtkTypeBool _arg)
        
        Indicate whether the button is single or double sided. A double
        sided button can be viewed from two sides...it looks sort of like
        a "pill." A single-sided button is meant to viewed from a single
        side; it looks like a "clam-shell."
        """
        ...
    
    def TwoSidedOff(self):
        """
        V.TwoSidedOff()
        C++: virtual void TwoSidedOff()
        
        Indicate whether the button is single or double sided. A double
        sided button can be viewed from two sides...it looks sort of like
        a "pill." A single-sided button is meant to viewed from a single
        side; it looks like a "clam-shell."
        """
        ...
    
    def TwoSidedOn(self):
        """
        V.TwoSidedOn()
        C++: virtual void TwoSidedOn()
        
        Indicate whether the button is single or double sided. A double
        sided button can be viewed from two sides...it looks sort of like
        a "pill." A single-sided button is meant to viewed from a single
        side; it looks like a "clam-shell."
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


