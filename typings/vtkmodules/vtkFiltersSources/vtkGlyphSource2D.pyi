"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkGlyphSource2D(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkGlyphSource2D - create 2D glyphs represented by vtkPolyData
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkGlyphSource2D can generate a family of 2D glyphs each of which
    lies in the x-y plane (i.e., the z-coordinate is zero). The class is
    a helper class to be used with vtkGlyph2D and vtkXYPlotActor.
    
    To use this class, specify the glyph type to use and its attributes.
    Attributes include its position (i.e., center point), scale, color,
    and whether the symbol is filled or not (a polygon or closed line
    sequence). You can also put a short line through the glyph running
    from -x to +x (the glyph looks like it's on a line), or a cross.
    """
    def CrossOff(self):
        """
        V.CrossOff()
        C++: virtual void CrossOff()
        
        Specify whether a cross is drawn as part of the glyph. (This is
        in addition to the glyph. If the glyph type is set to "Cross"
        there is no need to enable this flag.)
        """
        ...
    
    def CrossOn(self):
        """
        V.CrossOn()
        C++: virtual void CrossOn()
        
        Specify whether a cross is drawn as part of the glyph. (This is
        in addition to the glyph. If the glyph type is set to "Cross"
        there is no need to enable this flag.)
        """
        ...
    
    def DashOff(self):
        """
        V.DashOff()
        C++: virtual void DashOff()
        
        Specify whether a short line segment is drawn through the glyph.
        (This is in addition to the glyph. If the glyph type is set to
        "Dash" there is no need to enable this flag.)
        """
        ...
    
    def DashOn(self):
        """
        V.DashOn()
        C++: virtual void DashOn()
        
        Specify whether a short line segment is drawn through the glyph.
        (This is in addition to the glyph. If the glyph type is set to
        "Dash" there is no need to enable this flag.)
        """
        ...
    
    def FilledOff(self):
        """
        V.FilledOff()
        C++: virtual void FilledOff()
        
        Specify whether the glyph is filled (a polygon) or not (a closed
        polygon defined by line segments). This only applies to 2D closed
        glyphs.
        """
        ...
    
    def FilledOn(self):
        """
        V.FilledOn()
        C++: virtual void FilledOn()
        
        Specify whether the glyph is filled (a polygon) or not (a closed
        polygon defined by line segments). This only applies to 2D closed
        glyphs.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set the center of the glyph. By default the center is (0,0,0).
        """
        ...
    
    def GetColor(self):
        """
        V.GetColor() -> (float, float, float)
        C++: virtual double *GetColor()
        
        Set the color of the glyph. The default color is white.
        """
        ...
    
    def GetCross(self):
        """
        V.GetCross() -> int
        C++: virtual vtkTypeBool GetCross()
        
        Specify whether a cross is drawn as part of the glyph. (This is
        in addition to the glyph. If the glyph type is set to "Cross"
        there is no need to enable this flag.)
        """
        ...
    
    def GetDash(self):
        """
        V.GetDash() -> int
        C++: virtual vtkTypeBool GetDash()
        
        Specify whether a short line segment is drawn through the glyph.
        (This is in addition to the glyph. If the glyph type is set to
        "Dash" there is no need to enable this flag.)
        """
        ...
    
    def GetFilled(self):
        """
        V.GetFilled() -> int
        C++: virtual vtkTypeBool GetFilled()
        
        Specify whether the glyph is filled (a polygon) or not (a closed
        polygon defined by line segments). This only applies to 2D closed
        glyphs.
        """
        ...
    
    def GetGlyphType(self):
        """
        V.GetGlyphType() -> int
        C++: virtual int GetGlyphType()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def GetGlyphTypeMaxValue(self):
        """
        V.GetGlyphTypeMaxValue() -> int
        C++: virtual int GetGlyphTypeMaxValue()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def GetGlyphTypeMinValue(self):
        """
        V.GetGlyphTypeMinValue() -> int
        C++: virtual int GetGlyphTypeMinValue()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetResolution(self):
        """
        V.GetResolution() -> int
        C++: virtual int GetResolution()
        
        Specify the number of points that form the circular glyph.
        """
        ...
    
    def GetResolutionMaxValue(self):
        """
        V.GetResolutionMaxValue() -> int
        C++: virtual int GetResolutionMaxValue()
        
        Specify the number of points that form the circular glyph.
        """
        ...
    
    def GetResolutionMinValue(self):
        """
        V.GetResolutionMinValue() -> int
        C++: virtual int GetResolutionMinValue()
        
        Specify the number of points that form the circular glyph.
        """
        ...
    
    def GetRotationAngle(self):
        """
        V.GetRotationAngle() -> float
        C++: virtual double GetRotationAngle()
        
        Specify an angle (in degrees) to rotate the glyph around the
        z-axis. Using this ivar, it is possible to generate rotated
        glyphs (e.g., crosses, arrows, etc.)
        """
        ...
    
    def GetScale(self):
        """
        V.GetScale() -> float
        C++: virtual double GetScale()
        
        Set the scale of the glyph. Note that the glyphs are designed to
        fit in the (1,1) rectangle.
        """
        ...
    
    def GetScale2(self):
        """
        V.GetScale2() -> float
        C++: virtual double GetScale2()
        
        Set the scale of optional portions of the glyph (e.g., the dash
        and cross is DashOn() and CrossOn()).
        """
        ...
    
    def GetScale2MaxValue(self):
        """
        V.GetScale2MaxValue() -> float
        C++: virtual double GetScale2MaxValue()
        
        Set the scale of optional portions of the glyph (e.g., the dash
        and cross is DashOn() and CrossOn()).
        """
        ...
    
    def GetScale2MinValue(self):
        """
        V.GetScale2MinValue() -> float
        C++: virtual double GetScale2MinValue()
        
        Set the scale of optional portions of the glyph (e.g., the dash
        and cross is DashOn() and CrossOn()).
        """
        ...
    
    def GetScaleMaxValue(self):
        """
        V.GetScaleMaxValue() -> float
        C++: virtual double GetScaleMaxValue()
        
        Set the scale of the glyph. Note that the glyphs are designed to
        fit in the (1,1) rectangle.
        """
        ...
    
    def GetScaleMinValue(self):
        """
        V.GetScaleMinValue() -> float
        C++: virtual double GetScaleMinValue()
        
        Set the scale of the glyph. Note that the glyphs are designed to
        fit in the (1,1) rectangle.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGlyphSource2D
        C++: vtkGlyphSource2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGlyphSource2D
        C++: static vtkGlyphSource2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set the center of the glyph. By default the center is (0,0,0).
        """
        ...
    
    def SetColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetColor(float, float, float)
        C++: virtual void SetColor(double _arg1, double _arg2,
            double _arg3)
        V.SetColor((float, float, float))
        C++: virtual void SetColor(const double _arg[3])
        
        Set the color of the glyph. The default color is white.
        """
        ...
    
    def SetCross(self, p_int):
        """
        V.SetCross(int)
        C++: virtual void SetCross(vtkTypeBool _arg)
        
        Specify whether a cross is drawn as part of the glyph. (This is
        in addition to the glyph. If the glyph type is set to "Cross"
        there is no need to enable this flag.)
        """
        ...
    
    def SetDash(self, p_int):
        """
        V.SetDash(int)
        C++: virtual void SetDash(vtkTypeBool _arg)
        
        Specify whether a short line segment is drawn through the glyph.
        (This is in addition to the glyph. If the glyph type is set to
        "Dash" there is no need to enable this flag.)
        """
        ...
    
    def SetFilled(self, p_int):
        """
        V.SetFilled(int)
        C++: virtual void SetFilled(vtkTypeBool _arg)
        
        Specify whether the glyph is filled (a polygon) or not (a closed
        polygon defined by line segments). This only applies to 2D closed
        glyphs.
        """
        ...
    
    def SetGlyphType(self, p_int):
        """
        V.SetGlyphType(int)
        C++: virtual void SetGlyphType(int _arg)
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToArrow(self):
        """
        V.SetGlyphTypeToArrow()
        C++: void SetGlyphTypeToArrow()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToCircle(self):
        """
        V.SetGlyphTypeToCircle()
        C++: void SetGlyphTypeToCircle()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToCross(self):
        """
        V.SetGlyphTypeToCross()
        C++: void SetGlyphTypeToCross()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToDash(self):
        """
        V.SetGlyphTypeToDash()
        C++: void SetGlyphTypeToDash()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToDiamond(self):
        """
        V.SetGlyphTypeToDiamond()
        C++: void SetGlyphTypeToDiamond()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToEdgeArrow(self):
        """
        V.SetGlyphTypeToEdgeArrow()
        C++: void SetGlyphTypeToEdgeArrow()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToHookedArrow(self):
        """
        V.SetGlyphTypeToHookedArrow()
        C++: void SetGlyphTypeToHookedArrow()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToNone(self):
        """
        V.SetGlyphTypeToNone()
        C++: void SetGlyphTypeToNone()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToSquare(self):
        """
        V.SetGlyphTypeToSquare()
        C++: void SetGlyphTypeToSquare()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToThickArrow(self):
        """
        V.SetGlyphTypeToThickArrow()
        C++: void SetGlyphTypeToThickArrow()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToThickCross(self):
        """
        V.SetGlyphTypeToThickCross()
        C++: void SetGlyphTypeToThickCross()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToTriangle(self):
        """
        V.SetGlyphTypeToTriangle()
        C++: void SetGlyphTypeToTriangle()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetGlyphTypeToVertex(self):
        """
        V.SetGlyphTypeToVertex()
        C++: void SetGlyphTypeToVertex()
        
        Specify the type of glyph to generate.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetResolution(self, p_int):
        """
        V.SetResolution(int)
        C++: virtual void SetResolution(int _arg)
        
        Specify the number of points that form the circular glyph.
        """
        ...
    
    def SetRotationAngle(self, p_float):
        """
        V.SetRotationAngle(float)
        C++: virtual void SetRotationAngle(double _arg)
        
        Specify an angle (in degrees) to rotate the glyph around the
        z-axis. Using this ivar, it is possible to generate rotated
        glyphs (e.g., crosses, arrows, etc.)
        """
        ...
    
    def SetScale(self, p_float):
        """
        V.SetScale(float)
        C++: virtual void SetScale(double _arg)
        
        Set the scale of the glyph. Note that the glyphs are designed to
        fit in the (1,1) rectangle.
        """
        ...
    
    def SetScale2(self, p_float):
        """
        V.SetScale2(float)
        C++: virtual void SetScale2(double _arg)
        
        Set the scale of optional portions of the glyph (e.g., the dash
        and cross is DashOn() and CrossOn()).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


