"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSphereSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSphereSource - create a polygonal sphere centered at the origin
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSphereSource creates a sphere (represented by polygons) of
    specified radius centered at the origin. The resolution (polygonal
    discretization) in both the latitude (phi) and longitude (theta)
    directions can be specified. It also is possible to create partial
    spheres by specifying maximum phi and theta angles. By default, the
    surface tessellation of the sphere uses triangles; however you can
    set LatLongTessellation to produce a tessellation using
    quadrilaterals.
    @warning
    Resolution means the number of latitude or longitude lines for a
    complete sphere. If you create partial spheres the number of
    latitude/longitude lines may be off by one.
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set the center of the sphere. Default is 0,0,0.
        """
        ...
    
    def GetEndPhi(self):
        """
        V.GetEndPhi() -> float
        C++: virtual double GetEndPhi()
        
        Set the ending latitude angle. By default EndPhi=180 degrees.
        """
        ...
    
    def GetEndPhiMaxValue(self):
        """
        V.GetEndPhiMaxValue() -> float
        C++: virtual double GetEndPhiMaxValue()
        
        Set the ending latitude angle. By default EndPhi=180 degrees.
        """
        ...
    
    def GetEndPhiMinValue(self):
        """
        V.GetEndPhiMinValue() -> float
        C++: virtual double GetEndPhiMinValue()
        
        Set the ending latitude angle. By default EndPhi=180 degrees.
        """
        ...
    
    def GetEndTheta(self):
        """
        V.GetEndTheta() -> float
        C++: virtual double GetEndTheta()
        
        Set the ending longitude angle. By default EndTheta=360 degrees.
        """
        ...
    
    def GetEndThetaMaxValue(self):
        """
        V.GetEndThetaMaxValue() -> float
        C++: virtual double GetEndThetaMaxValue()
        
        Set the ending longitude angle. By default EndTheta=360 degrees.
        """
        ...
    
    def GetEndThetaMinValue(self):
        """
        V.GetEndThetaMinValue() -> float
        C++: virtual double GetEndThetaMinValue()
        
        Set the ending longitude angle. By default EndTheta=360 degrees.
        """
        ...
    
    def GetLatLongTessellation(self):
        """
        V.GetLatLongTessellation() -> int
        C++: virtual vtkTypeBool GetLatLongTessellation()
        
        Cause the sphere to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        a wireframe sphere with natural latitude and longitude lines.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetPhiResolution(self):
        """
        V.GetPhiResolution() -> int
        C++: virtual int GetPhiResolution()
        
        Set the number of points in the latitude direction (ranging from
        StartPhi to EndPhi).
        """
        ...
    
    def GetPhiResolutionMaxValue(self):
        """
        V.GetPhiResolutionMaxValue() -> int
        C++: virtual int GetPhiResolutionMaxValue()
        
        Set the number of points in the latitude direction (ranging from
        StartPhi to EndPhi).
        """
        ...
    
    def GetPhiResolutionMinValue(self):
        """
        V.GetPhiResolutionMinValue() -> int
        C++: virtual int GetPhiResolutionMinValue()
        
        Set the number of points in the latitude direction (ranging from
        StartPhi to EndPhi).
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set radius of sphere. Default is .5.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set radius of sphere. Default is .5.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set radius of sphere. Default is .5.
        """
        ...
    
    def GetStartPhi(self):
        """
        V.GetStartPhi() -> float
        C++: virtual double GetStartPhi()
        
        Set the starting latitude angle (0 is at north pole). By default
        StartPhi=0 degrees.
        """
        ...
    
    def GetStartPhiMaxValue(self):
        """
        V.GetStartPhiMaxValue() -> float
        C++: virtual double GetStartPhiMaxValue()
        
        Set the starting latitude angle (0 is at north pole). By default
        StartPhi=0 degrees.
        """
        ...
    
    def GetStartPhiMinValue(self):
        """
        V.GetStartPhiMinValue() -> float
        C++: virtual double GetStartPhiMinValue()
        
        Set the starting latitude angle (0 is at north pole). By default
        StartPhi=0 degrees.
        """
        ...
    
    def GetStartTheta(self):
        """
        V.GetStartTheta() -> float
        C++: virtual double GetStartTheta()
        
        Set the starting longitude angle. By default StartTheta=0
        degrees.
        """
        ...
    
    def GetStartThetaMaxValue(self):
        """
        V.GetStartThetaMaxValue() -> float
        C++: virtual double GetStartThetaMaxValue()
        
        Set the starting longitude angle. By default StartTheta=0
        degrees.
        """
        ...
    
    def GetStartThetaMinValue(self):
        """
        V.GetStartThetaMinValue() -> float
        C++: virtual double GetStartThetaMinValue()
        
        Set the starting longitude angle. By default StartTheta=0
        degrees.
        """
        ...
    
    def GetThetaResolution(self):
        """
        V.GetThetaResolution() -> int
        C++: virtual int GetThetaResolution()
        
        Set the number of points in the longitude direction (ranging from
        StartTheta to EndTheta).
        """
        ...
    
    def GetThetaResolutionMaxValue(self):
        """
        V.GetThetaResolutionMaxValue() -> int
        C++: virtual int GetThetaResolutionMaxValue()
        
        Set the number of points in the longitude direction (ranging from
        StartTheta to EndTheta).
        """
        ...
    
    def GetThetaResolutionMinValue(self):
        """
        V.GetThetaResolutionMinValue() -> int
        C++: virtual int GetThetaResolutionMinValue()
        
        Set the number of points in the longitude direction (ranging from
        StartTheta to EndTheta).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LatLongTessellationOff(self):
        """
        V.LatLongTessellationOff()
        C++: virtual void LatLongTessellationOff()
        
        Cause the sphere to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        a wireframe sphere with natural latitude and longitude lines.
        """
        ...
    
    def LatLongTessellationOn(self):
        """
        V.LatLongTessellationOn()
        C++: virtual void LatLongTessellationOn()
        
        Cause the sphere to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        a wireframe sphere with natural latitude and longitude lines.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSphereSource
        C++: vtkSphereSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSphereSource
        C++: static vtkSphereSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set the center of the sphere. Default is 0,0,0.
        """
        ...
    
    def SetEndPhi(self, p_float):
        """
        V.SetEndPhi(float)
        C++: virtual void SetEndPhi(double _arg)
        
        Set the ending latitude angle. By default EndPhi=180 degrees.
        """
        ...
    
    def SetEndTheta(self, p_float):
        """
        V.SetEndTheta(float)
        C++: virtual void SetEndTheta(double _arg)
        
        Set the ending longitude angle. By default EndTheta=360 degrees.
        """
        ...
    
    def SetLatLongTessellation(self, p_int):
        """
        V.SetLatLongTessellation(int)
        C++: virtual void SetLatLongTessellation(vtkTypeBool _arg)
        
        Cause the sphere to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        a wireframe sphere with natural latitude and longitude lines.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetPhiResolution(self, p_int):
        """
        V.SetPhiResolution(int)
        C++: virtual void SetPhiResolution(int _arg)
        
        Set the number of points in the latitude direction (ranging from
        StartPhi to EndPhi).
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set radius of sphere. Default is .5.
        """
        ...
    
    def SetStartPhi(self, p_float):
        """
        V.SetStartPhi(float)
        C++: virtual void SetStartPhi(double _arg)
        
        Set the starting latitude angle (0 is at north pole). By default
        StartPhi=0 degrees.
        """
        ...
    
    def SetStartTheta(self, p_float):
        """
        V.SetStartTheta(float)
        C++: virtual void SetStartTheta(double _arg)
        
        Set the starting longitude angle. By default StartTheta=0
        degrees.
        """
        ...
    
    def SetThetaResolution(self, p_int):
        """
        V.SetThetaResolution(int)
        C++: virtual void SetThetaResolution(int _arg)
        
        Set the number of points in the longitude direction (ranging from
        StartTheta to EndTheta).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


