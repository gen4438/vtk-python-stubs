"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkParametricFunctionSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkParametricFunctionSource - tessellate parametric functions
    
    Superclass: vtkPolyDataAlgorithm
    
    This class tessellates parametric functions. The user must specify
    how many points in the parametric coordinate directions are required
    (i.e., the resolution), and the mode to use to generate scalars.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    
    @sa
    vtkParametricFunction
    
    @sa
    Implementation of parametrics for 1D lines: vtkParametricSpline
    
    @sa
    Subclasses of vtkParametricFunction implementing non-orentable
    surfaces: vtkParametricBoy vtkParametricCrossCap
    vtkParametricFigure8Klein vtkParametricKlein vtkParametricMobius
    vtkParametricRoman
    
    @sa
    Subclasses of vtkParametricFunction implementing orientable surfaces:
    vtkParametricConicSpiral vtkParametricDini vtkParametricEllipsoid
    vtkParametricEnneper vtkParametricRandomHills
    vtkParametricSuperEllipsoid vtkParametricSuperToroid
    vtkParametricTorus
    """
    def GenerateNormalsOff(self):
        """
        V.GenerateNormalsOff()
        C++: virtual void GenerateNormalsOff()
        
        Set/Get the generation of normals. This is on by default. Note
        that this is only applicable to parametric surfaces whose
        parametric dimension is 2.
        """
        ...
    
    def GenerateNormalsOn(self):
        """
        V.GenerateNormalsOn()
        C++: virtual void GenerateNormalsOn()
        
        Set/Get the generation of normals. This is on by default. Note
        that this is only applicable to parametric surfaces whose
        parametric dimension is 2.
        """
        ...
    
    def GenerateTextureCoordinatesOff(self):
        """
        V.GenerateTextureCoordinatesOff()
        C++: virtual void GenerateTextureCoordinatesOff()
        
        Set/Get the generation of texture coordinates. This is off by
        default. Note that this is only applicable to parametric surfaces
        whose parametric dimension is 2. Note that texturing may fail in
        some cases.
        """
        ...
    
    def GenerateTextureCoordinatesOn(self):
        """
        V.GenerateTextureCoordinatesOn()
        C++: virtual void GenerateTextureCoordinatesOn()
        
        Set/Get the generation of texture coordinates. This is off by
        default. Note that this is only applicable to parametric surfaces
        whose parametric dimension is 2. Note that texturing may fail in
        some cases.
        """
        ...
    
    def GetGenerateNormals(self):
        """
        V.GetGenerateNormals() -> int
        C++: virtual vtkTypeBool GetGenerateNormals()
        
        Set/Get the generation of normals. This is on by default. Note
        that this is only applicable to parametric surfaces whose
        parametric dimension is 2.
        """
        ...
    
    def GetGenerateNormalsMaxValue(self):
        """
        V.GetGenerateNormalsMaxValue() -> int
        C++: virtual vtkTypeBool GetGenerateNormalsMaxValue()
        
        Set/Get the generation of normals. This is on by default. Note
        that this is only applicable to parametric surfaces whose
        parametric dimension is 2.
        """
        ...
    
    def GetGenerateNormalsMinValue(self):
        """
        V.GetGenerateNormalsMinValue() -> int
        C++: virtual vtkTypeBool GetGenerateNormalsMinValue()
        
        Set/Get the generation of normals. This is on by default. Note
        that this is only applicable to parametric surfaces whose
        parametric dimension is 2.
        """
        ...
    
    def GetGenerateTextureCoordinates(self):
        """
        V.GetGenerateTextureCoordinates() -> int
        C++: virtual vtkTypeBool GetGenerateTextureCoordinates()
        
        Set/Get the generation of texture coordinates. This is off by
        default. Note that this is only applicable to parametric surfaces
        whose parametric dimension is 2. Note that texturing may fail in
        some cases.
        """
        ...
    
    def GetGenerateTextureCoordinatesMaxValue(self):
        """
        V.GetGenerateTextureCoordinatesMaxValue() -> int
        C++: virtual vtkTypeBool GetGenerateTextureCoordinatesMaxValue()
        
        Set/Get the generation of texture coordinates. This is off by
        default. Note that this is only applicable to parametric surfaces
        whose parametric dimension is 2. Note that texturing may fail in
        some cases.
        """
        ...
    
    def GetGenerateTextureCoordinatesMinValue(self):
        """
        V.GetGenerateTextureCoordinatesMinValue() -> int
        C++: virtual vtkTypeBool GetGenerateTextureCoordinatesMinValue()
        
        Set/Get the generation of texture coordinates. This is off by
        default. Note that this is only applicable to parametric surfaces
        whose parametric dimension is 2. Note that texturing may fail in
        some cases.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the parametric function.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points. See the
        documentation for the vtkAlgorithm::Precision enum for an
        explanation of the available precision settings.
        """
        ...
    
    def GetParametricFunction(self):
        """
        V.GetParametricFunction() -> vtkParametricFunction
        C++: virtual vtkParametricFunction *GetParametricFunction()
        
        Specify the parametric function to use to generate the
        tessellation.
        """
        ...
    
    def GetScalarMode(self):
        """
        V.GetScalarMode() -> int
        C++: virtual int GetScalarMode()
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def GetScalarModeMaxValue(self):
        """
        V.GetScalarModeMaxValue() -> int
        C++: virtual int GetScalarModeMaxValue()
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def GetScalarModeMinValue(self):
        """
        V.GetScalarModeMinValue() -> int
        C++: virtual int GetScalarModeMinValue()
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def GetUResolution(self):
        """
        V.GetUResolution() -> int
        C++: virtual int GetUResolution()
        
        Set/Get the number of subdivisions / tessellations in the u
        parametric direction. Note that the number of tessellant points
        in the u direction is the UResolution + 1.
        """
        ...
    
    def GetUResolutionMaxValue(self):
        """
        V.GetUResolutionMaxValue() -> int
        C++: virtual int GetUResolutionMaxValue()
        
        Set/Get the number of subdivisions / tessellations in the u
        parametric direction. Note that the number of tessellant points
        in the u direction is the UResolution + 1.
        """
        ...
    
    def GetUResolutionMinValue(self):
        """
        V.GetUResolutionMinValue() -> int
        C++: virtual int GetUResolutionMinValue()
        
        Set/Get the number of subdivisions / tessellations in the u
        parametric direction. Note that the number of tessellant points
        in the u direction is the UResolution + 1.
        """
        ...
    
    def GetVResolution(self):
        """
        V.GetVResolution() -> int
        C++: virtual int GetVResolution()
        
        Set/Get the number of subdivisions / tessellations in the v
        parametric direction. Note that the number of tessellant points
        in the v direction is the VResolution + 1.
        """
        ...
    
    def GetVResolutionMaxValue(self):
        """
        V.GetVResolutionMaxValue() -> int
        C++: virtual int GetVResolutionMaxValue()
        
        Set/Get the number of subdivisions / tessellations in the v
        parametric direction. Note that the number of tessellant points
        in the v direction is the VResolution + 1.
        """
        ...
    
    def GetVResolutionMinValue(self):
        """
        V.GetVResolutionMinValue() -> int
        C++: virtual int GetVResolutionMinValue()
        
        Set/Get the number of subdivisions / tessellations in the v
        parametric direction. Note that the number of tessellant points
        in the v direction is the VResolution + 1.
        """
        ...
    
    def GetWResolution(self):
        """
        V.GetWResolution() -> int
        C++: virtual int GetWResolution()
        
        Set/Get the number of subdivisions / tessellations in the w
        parametric direction. Note that the number of tessellant points
        in the w direction is the WResolution + 1.
        """
        ...
    
    def GetWResolutionMaxValue(self):
        """
        V.GetWResolutionMaxValue() -> int
        C++: virtual int GetWResolutionMaxValue()
        
        Set/Get the number of subdivisions / tessellations in the w
        parametric direction. Note that the number of tessellant points
        in the w direction is the WResolution + 1.
        """
        ...
    
    def GetWResolutionMinValue(self):
        """
        V.GetWResolutionMinValue() -> int
        C++: virtual int GetWResolutionMinValue()
        
        Set/Get the number of subdivisions / tessellations in the w
        parametric direction. Note that the number of tessellant points
        in the w direction is the WResolution + 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricFunctionSource
        C++: vtkParametricFunctionSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricFunctionSource
        C++: static vtkParametricFunctionSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetGenerateNormals(self, p_int):
        """
        V.SetGenerateNormals(int)
        C++: virtual void SetGenerateNormals(vtkTypeBool _arg)
        
        Set/Get the generation of normals. This is on by default. Note
        that this is only applicable to parametric surfaces whose
        parametric dimension is 2.
        """
        ...
    
    def SetGenerateTextureCoordinates(self, p_int):
        """
        V.SetGenerateTextureCoordinates(int)
        C++: virtual void SetGenerateTextureCoordinates(vtkTypeBool _arg)
        
        Set/Get the generation of texture coordinates. This is off by
        default. Note that this is only applicable to parametric surfaces
        whose parametric dimension is 2. Note that texturing may fail in
        some cases.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points. See the
        documentation for the vtkAlgorithm::Precision enum for an
        explanation of the available precision settings.
        """
        ...
    
    def SetParametricFunction(self, vtkParametricFunction):
        """
        V.SetParametricFunction(vtkParametricFunction)
        C++: virtual void SetParametricFunction(vtkParametricFunction *)
        
        Specify the parametric function to use to generate the
        tessellation.
        """
        ...
    
    def SetScalarMode(self, p_int):
        """
        V.SetScalarMode(int)
        C++: virtual void SetScalarMode(int _arg)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToDistance(self):
        """
        V.SetScalarModeToDistance()
        C++: void SetScalarModeToDistance(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToFunctionDefined(self):
        """
        V.SetScalarModeToFunctionDefined()
        C++: void SetScalarModeToFunctionDefined(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToModulus(self):
        """
        V.SetScalarModeToModulus()
        C++: void SetScalarModeToModulus(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToNone(self):
        """
        V.SetScalarModeToNone()
        C++: void SetScalarModeToNone(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToPhase(self):
        """
        V.SetScalarModeToPhase()
        C++: void SetScalarModeToPhase(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToQuadrant(self):
        """
        V.SetScalarModeToQuadrant()
        C++: void SetScalarModeToQuadrant(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToU(self):
        """
        V.SetScalarModeToU()
        C++: void SetScalarModeToU(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToU0(self):
        """
        V.SetScalarModeToU0()
        C++: void SetScalarModeToU0(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToU0V0(self):
        """
        V.SetScalarModeToU0V0()
        C++: void SetScalarModeToU0V0(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToV(self):
        """
        V.SetScalarModeToV()
        C++: void SetScalarModeToV(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToV0(self):
        """
        V.SetScalarModeToV0()
        C++: void SetScalarModeToV0(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToX(self):
        """
        V.SetScalarModeToX()
        C++: void SetScalarModeToX(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToY(self):
        """
        V.SetScalarModeToY()
        C++: void SetScalarModeToY(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetScalarModeToZ(self):
        """
        V.SetScalarModeToZ()
        C++: void SetScalarModeToZ(void)
        
        Get/Set the mode used for the scalar data. See SCALAR_MODE for a
        description of the types of scalars generated.
        """
        ...
    
    def SetUResolution(self, p_int):
        """
        V.SetUResolution(int)
        C++: virtual void SetUResolution(int _arg)
        
        Set/Get the number of subdivisions / tessellations in the u
        parametric direction. Note that the number of tessellant points
        in the u direction is the UResolution + 1.
        """
        ...
    
    def SetVResolution(self, p_int):
        """
        V.SetVResolution(int)
        C++: virtual void SetVResolution(int _arg)
        
        Set/Get the number of subdivisions / tessellations in the v
        parametric direction. Note that the number of tessellant points
        in the v direction is the VResolution + 1.
        """
        ...
    
    def SetWResolution(self, p_int):
        """
        V.SetWResolution(int)
        C++: virtual void SetWResolution(int _arg)
        
        Set/Get the number of subdivisions / tessellations in the w
        parametric direction. Note that the number of tessellant points
        in the w direction is the WResolution + 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    SCALAR_DISTANCE = ...
    SCALAR_FUNCTION_DEFINED = ...
    SCALAR_MODE = ...
    SCALAR_MODULUS = ...
    SCALAR_NONE = ...
    SCALAR_PHASE = ...
    SCALAR_QUADRANT = ...
    SCALAR_U = ...
    SCALAR_U0 = ...
    SCALAR_U0V0 = ...
    SCALAR_V = ...
    SCALAR_V0 = ...
    SCALAR_X = ...
    SCALAR_Y = ...
    SCALAR_Z = ...
    __dict__ = ...
    __vtkname__ = ...


