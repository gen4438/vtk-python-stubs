"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkRandomHyperTreeGridSource(__vtkmodules_vtkCommonExecutionModel.vtkHyperTreeGridAlgorithm):
    """
    vtkRandomHyperTreeGridSource - Builds a randomized but reproducible
    vtkHyperTreeGrid.
    
    Superclass: vtkHyperTreeGridAlgorithm
    """
    def GetDimensions(self):
        """
        V.GetDimensions() -> (int, int, int)
        C++: virtual unsigned int *GetDimensions()
        """
        ...
    
    def GetMaxDepth(self):
        """
        V.GetMaxDepth() -> int
        C++: virtual vtkIdType GetMaxDepth()
        """
        ...
    
    def GetMaxDepthMaxValue(self):
        """
        V.GetMaxDepthMaxValue() -> int
        C++: virtual vtkIdType GetMaxDepthMaxValue()
        """
        ...
    
    def GetMaxDepthMinValue(self):
        """
        V.GetMaxDepthMinValue() -> int
        C++: virtual vtkIdType GetMaxDepthMinValue()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputBounds(self):
        """
        V.GetOutputBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetOutputBounds()
        
        The bounds of the output vtkHyperTreeGrid. The default is {-10,
        10, -10, 10, -10, 10}.
        """
        ...
    
    def GetSeed(self):
        """
        V.GetSeed() -> int
        C++: virtual vtkTypeUInt32 GetSeed()
        """
        ...
    
    def GetSplitFraction(self):
        """
        V.GetSplitFraction() -> float
        C++: virtual double GetSplitFraction()
        """
        ...
    
    def GetSplitFractionMaxValue(self):
        """
        V.GetSplitFractionMaxValue() -> float
        C++: virtual double GetSplitFractionMaxValue()
        """
        ...
    
    def GetSplitFractionMinValue(self):
        """
        V.GetSplitFractionMinValue() -> float
        C++: virtual double GetSplitFractionMinValue()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRandomHyperTreeGridSource
        C++: vtkRandomHyperTreeGridSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRandomHyperTreeGridSource
        C++: static vtkRandomHyperTreeGridSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetDimensions(int, int, int)
        C++: virtual void SetDimensions(unsigned int _arg1,
            unsigned int _arg2, unsigned int _arg3)
        V.SetDimensions((int, int, int))
        C++: virtual void SetDimensions(const unsigned int _arg[3])
        """
        ...
    
    def SetMaxDepth(self, p_int):
        """
        V.SetMaxDepth(int)
        C++: virtual void SetMaxDepth(vtkIdType _arg)
        """
        ...
    
    def SetOutputBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetOutputBounds(float, float, float, float, float, float)
        C++: virtual void SetOutputBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetOutputBounds((float, float, float, float, float, float))
        C++: virtual void SetOutputBounds(const double _arg[6])
        """
        ...
    
    def SetSeed(self, p_int):
        """
        V.SetSeed(int)
        C++: virtual void SetSeed(vtkTypeUInt32 _arg)
        """
        ...
    
    def SetSplitFraction(self, p_float):
        """
        V.SetSplitFraction(float)
        C++: virtual void SetSplitFraction(double _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


