"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTessellatedBoxSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkTessellatedBoxSource - Create a polygonal representation of a box
    with a given level of subdivision.
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkTessellatedBoxSource creates a axis-aligned box defined by its
    bounds and a level of subdivision. Connectivity is strong: points of
    the vertices and inside the edges are shared between faces. In other
    words, faces are connected. Each face looks like a grid of quads,
    each quad is composed of 2 triangles. Given a level of subdivision `l', each edge has
    `l'+2 points, `l' of them are internal edge points, the 2 other ones
    are the vertices. Each face has a total of (`l'+2)*(`l'+2) points, 4
    of them are vertices, 4*`l' are internal edge points, it remains
    `l'^2 internal face points.
    
    This source only generate geometry, no DataArrays like normals or
    texture coordinates.
    """
    def DuplicateSharedPointsOff(self):
        """
        V.DuplicateSharedPointsOff()
        C++: virtual void DuplicateSharedPointsOff()
        
        Flag to tell the source to duplicate points shared between faces
        (vertices of the box and internal edge points). Initial value is
        false. Implementation note: duplicating points is an easier
        method to implement than a minimal number of points.
        """
        ...
    
    def DuplicateSharedPointsOn(self):
        """
        V.DuplicateSharedPointsOn()
        C++: virtual void DuplicateSharedPointsOn()
        
        Flag to tell the source to duplicate points shared between faces
        (vertices of the box and internal edge points). Initial value is
        false. Implementation note: duplicating points is an easier
        method to implement than a minimal number of points.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetBounds()
        
        Bounds of the box in world coordinates. This a 6-uple of
        xmin,xmax,ymin, ymax,zmin and zmax. Initial value is
        (-0.5,0.5,-0.5,0.5,-0.5,0.5), bounds of a cube of length 1
        centered at (0,0,0). Bounds are defined such that xmin<=xmax,
        ymin<=ymax and zmin<zmax.
        \post xmin<=xmax && ymin<=ymax && zmin<zmax
        """
        ...
    
    def GetDuplicateSharedPoints(self):
        """
        V.GetDuplicateSharedPoints() -> int
        C++: virtual vtkTypeBool GetDuplicateSharedPoints()
        
        Flag to tell the source to duplicate points shared between faces
        (vertices of the box and internal edge points). Initial value is
        false. Implementation note: duplicating points is an easier
        method to implement than a minimal number of points.
        """
        ...
    
    def GetLevel(self):
        """
        V.GetLevel() -> int
        C++: virtual int GetLevel()
        
        Level of subdivision of the faces. Initial value is 0.
        \post positive_level: level>=0
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetQuads(self):
        """
        V.GetQuads() -> int
        C++: virtual vtkTypeBool GetQuads()
        
        Flag to tell the source to generate either a quad or two triangle
        for a set of four points. Initial value is false (generate
        triangles).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTessellatedBoxSource
        C++: vtkTessellatedBoxSource *NewInstance()
        """
        ...
    
    def QuadsOff(self):
        """
        V.QuadsOff()
        C++: virtual void QuadsOff()
        
        Flag to tell the source to generate either a quad or two triangle
        for a set of four points. Initial value is false (generate
        triangles).
        """
        ...
    
    def QuadsOn(self):
        """
        V.QuadsOn()
        C++: virtual void QuadsOn()
        
        Flag to tell the source to generate either a quad or two triangle
        for a set of four points. Initial value is false (generate
        triangles).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTessellatedBoxSource
        C++: static vtkTessellatedBoxSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Set the bounds of the box. See GetBounds() for a detail
        description.
        \pre xmin<=xmax && ymin<=ymax && zmin<zmax
        """
        ...
    
    def SetDuplicateSharedPoints(self, p_int):
        """
        V.SetDuplicateSharedPoints(int)
        C++: virtual void SetDuplicateSharedPoints(vtkTypeBool _arg)
        
        Flag to tell the source to duplicate points shared between faces
        (vertices of the box and internal edge points). Initial value is
        false. Implementation note: duplicating points is an easier
        method to implement than a minimal number of points.
        """
        ...
    
    def SetLevel(self, p_int):
        """
        V.SetLevel(int)
        C++: virtual void SetLevel(int _arg)
        
        Set the level of subdivision of the faces.
        \pre positive_level: level>=0
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetQuads(self, p_int):
        """
        V.SetQuads(int)
        C++: virtual void SetQuads(vtkTypeBool _arg)
        
        Flag to tell the source to generate either a quad or two triangle
        for a set of four points. Initial value is false (generate
        triangles).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


