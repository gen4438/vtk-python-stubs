"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCubeSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkCubeSource - create a polygonal representation of a cube
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkCubeSource creates a cube centered at origin. The cube is
    represented with four-sided polygons. It is possible to specify the
    length, width, and height of the cube independently.
    """
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Convenience methods allows creation of cube by specifying
        bounding box.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set the center of the cube.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetXLength(self):
        """
        V.GetXLength() -> float
        C++: virtual double GetXLength()
        
        Set the length of the cube in the x-direction.
        """
        ...
    
    def GetXLengthMaxValue(self):
        """
        V.GetXLengthMaxValue() -> float
        C++: virtual double GetXLengthMaxValue()
        
        Set the length of the cube in the x-direction.
        """
        ...
    
    def GetXLengthMinValue(self):
        """
        V.GetXLengthMinValue() -> float
        C++: virtual double GetXLengthMinValue()
        
        Set the length of the cube in the x-direction.
        """
        ...
    
    def GetYLength(self):
        """
        V.GetYLength() -> float
        C++: virtual double GetYLength()
        
        Set the length of the cube in the y-direction.
        """
        ...
    
    def GetYLengthMaxValue(self):
        """
        V.GetYLengthMaxValue() -> float
        C++: virtual double GetYLengthMaxValue()
        
        Set the length of the cube in the y-direction.
        """
        ...
    
    def GetYLengthMinValue(self):
        """
        V.GetYLengthMinValue() -> float
        C++: virtual double GetYLengthMinValue()
        
        Set the length of the cube in the y-direction.
        """
        ...
    
    def GetZLength(self):
        """
        V.GetZLength() -> float
        C++: virtual double GetZLength()
        
        Set the length of the cube in the z-direction.
        """
        ...
    
    def GetZLengthMaxValue(self):
        """
        V.GetZLengthMaxValue() -> float
        C++: virtual double GetZLengthMaxValue()
        
        Set the length of the cube in the z-direction.
        """
        ...
    
    def GetZLengthMinValue(self):
        """
        V.GetZLengthMinValue() -> float
        C++: virtual double GetZLengthMinValue()
        
        Set the length of the cube in the z-direction.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCubeSource
        C++: vtkCubeSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCubeSource
        C++: static vtkCubeSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: void SetBounds(double xMin, double xMax, double yMin,
            double yMax, double zMin, double zMax)
        V.SetBounds((float, float, float, float, float, float))
        C++: void SetBounds(const double bounds[6])
        
        Convenience methods allows creation of cube by specifying
        bounding box.
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set the center of the cube.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetXLength(self, p_float):
        """
        V.SetXLength(float)
        C++: virtual void SetXLength(double _arg)
        
        Set the length of the cube in the x-direction.
        """
        ...
    
    def SetYLength(self, p_float):
        """
        V.SetYLength(float)
        C++: virtual void SetYLength(double _arg)
        
        Set the length of the cube in the y-direction.
        """
        ...
    
    def SetZLength(self, p_float):
        """
        V.SetZLength(float)
        C++: virtual void SetZLength(double _arg)
        
        Set the length of the cube in the z-direction.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


