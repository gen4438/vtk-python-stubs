"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPlaneSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkPlaneSource - create an array of quadrilaterals located in a plane
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkPlaneSource creates an m x n array of quadrilaterals arranged as a
    regular tiling in a plane. The plane is defined by specifying an
    origin point, and then two other points that, together with the
    origin, define two axes for the plane. These axes do not have to be
    orthogonal - so you can create a parallelogram. (The axes must not be
    parallel.) The resolution of the plane (i.e., number of subdivisions)
    is controlled by the ivars XResolution and YResolution.
    
    By default, the plane is centered at the origin and perpendicular to
    the z-axis, with width and height of length 1 and resolutions set to
    1.
    
    There are three convenience methods that allow you to easily move the
    plane.  The first, SetNormal(), allows you to specify the plane
    normal. The effect of this method is to rotate the plane around the
    center of the plane, aligning the plane normal with the specified
    normal. The rotation is about the axis defined by the cross product
    of the current normal with the new normal. The second, SetCenter(),
    translates the center of the plane to the specified center point. The
    third method, Push(), allows you to translate the plane along the
    plane normal by the distance specified. (Negative Push values
    translate the plane in the negative normal direction.)  Note that the
    SetNormal(), SetCenter() and Push() methods modify the Origin,
    Point1, and/or Point2 instance variables.
    
    @warning
    The normal to the plane will point in the direction of the cross
    product of the first axis (Origin->Point1) with the second
    (Origin->Point2). This also affects the normals to the generated
    polygons.
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set/Get the center of the plane. Works in conjunction with the
        plane normal to position the plane. Don't use this method to
        define the plane. Instead, use it to move the plane to a new
        center point.
        """
        ...
    
    def GetNormal(self):
        """
        V.GetNormal() -> (float, float, float)
        C++: virtual double *GetNormal()
        
        Set/Get the plane normal. Works in conjunction with the plane
        center to orient the plane. Don't use this method to define the
        plane. Instead, use it to rotate the plane around the current
        center point.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrigin(self):
        """
        V.GetOrigin() -> (float, float, float)
        C++: virtual double *GetOrigin()
        
        Specify a point defining the origin of the plane.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetPoint1(self):
        """
        V.GetPoint1() -> (float, float, float)
        C++: virtual double *GetPoint1()
        
        Specify a point defining the first axis of the plane.
        """
        ...
    
    def GetPoint2(self):
        """
        V.GetPoint2() -> (float, float, float)
        C++: virtual double *GetPoint2()
        
        Specify a point defining the second axis of the plane.
        """
        ...
    
    def GetResolution(self, p_int, p_int_1):
        """
        V.GetResolution(int, int)
        C++: void GetResolution(int &xR, int &yR)
        
        Set the number of x-y subdivisions in the plane.
        """
        ...
    
    def GetXResolution(self):
        """
        V.GetXResolution() -> int
        C++: virtual int GetXResolution()
        
        Specify the resolution of the plane along the first axes.
        """
        ...
    
    def GetYResolution(self):
        """
        V.GetYResolution() -> int
        C++: virtual int GetYResolution()
        
        Specify the resolution of the plane along the second axes.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPlaneSource
        C++: vtkPlaneSource *NewInstance()
        """
        ...
    
    def Push(self, p_float):
        """
        V.Push(float)
        C++: void Push(double distance)
        
        Translate the plane in the direction of the normal by the
        distance specified.  Negative values move the plane in the
        opposite direction.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPlaneSource
        C++: static vtkPlaneSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: void SetCenter(double x, double y, double z)
        V.SetCenter([float, float, float])
        C++: void SetCenter(double center[3])
        
        Set/Get the center of the plane. Works in conjunction with the
        plane normal to position the plane. Don't use this method to
        define the plane. Instead, use it to move the plane to a new
        center point.
        """
        ...
    
    def SetNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetNormal(float, float, float)
        C++: void SetNormal(double nx, double ny, double nz)
        V.SetNormal([float, float, float])
        C++: void SetNormal(double n[3])
        
        Set/Get the plane normal. Works in conjunction with the plane
        center to orient the plane. Don't use this method to define the
        plane. Instead, use it to rotate the plane around the current
        center point.
        """
        ...
    
    def SetOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetOrigin(float, float, float)
        C++: virtual void SetOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetOrigin((float, float, float))
        C++: virtual void SetOrigin(const double _arg[3])
        
        Specify a point defining the origin of the plane.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetPoint1(self, p_float, p_float_1, p_float_2):
        """
        V.SetPoint1(float, float, float)
        C++: void SetPoint1(double x, double y, double z)
        V.SetPoint1([float, float, float])
        C++: void SetPoint1(double pnt[3])
        
        Specify a point defining the first axis of the plane.
        """
        ...
    
    def SetPoint2(self, p_float, p_float_1, p_float_2):
        """
        V.SetPoint2(float, float, float)
        C++: void SetPoint2(double x, double y, double z)
        V.SetPoint2([float, float, float])
        C++: void SetPoint2(double pnt[3])
        
        Specify a point defining the second axis of the plane.
        """
        ...
    
    def SetResolution(self, p_int, p_int_1):
        """
        V.SetResolution(int, int)
        C++: void SetResolution(const int xR, const int yR)
        
        Set the number of x-y subdivisions in the plane.
        """
        ...
    
    def SetXResolution(self, p_int):
        """
        V.SetXResolution(int)
        C++: virtual void SetXResolution(int _arg)
        
        Specify the resolution of the plane along the first axes.
        """
        ...
    
    def SetYResolution(self, p_int):
        """
        V.SetYResolution(int)
        C++: virtual void SetYResolution(int _arg)
        
        Specify the resolution of the plane along the second axes.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


