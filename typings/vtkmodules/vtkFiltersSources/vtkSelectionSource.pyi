"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSelectionSource(__vtkmodules_vtkCommonExecutionModel.vtkSelectionAlgorithm):
    """
    vtkSelectionSource - Generate selection from given set of ids
    vtkSelectionSource generates a vtkSelection from a set of (piece id,
    cell id) pairs.
    
    Superclass: vtkSelectionAlgorithm
    
    It will only generate the selection values that match
    UPDATE_PIECE_NUMBER (i.e. piece == UPDATE_PIECE_NUMBER).
    
    User-supplied, application-specific selections (with a ContentType of
    vtkSelectionNode::USER) are not supported.
    """
    def AddBlock(self, p_int):
        """
        V.AddBlock(int)
        C++: void AddBlock(vtkIdType blockno)
        
        Add the flat-index/composite index for a block.
        """
        ...
    
    def AddID(self, p_int, p_int_1):
        """
        V.AddID(int, int)
        C++: void AddID(vtkIdType piece, vtkIdType id)
        
        Add a (piece, id) to the selection set. The source will generate
        only the ids for which piece == UPDATE_PIECE_NUMBER. If piece ==
        -1, the id applies to all pieces.
        """
        ...
    
    def AddLocation(self, p_float, p_float_1, p_float_2):
        """
        V.AddLocation(float, float, float)
        C++: void AddLocation(double x, double y, double z)
        
        Add a point in world space to probe at.
        """
        ...
    
    def AddStringID(self, p_int, string):
        """
        V.AddStringID(int, string)
        C++: void AddStringID(vtkIdType piece, const char *id)
        
        Add a (piece, id) to the selection set. The source will generate
        only the ids for which piece == UPDATE_PIECE_NUMBER. If piece ==
        -1, the id applies to all pieces.
        """
        ...
    
    def AddThreshold(self, p_float, p_float_1):
        """
        V.AddThreshold(float, float)
        C++: void AddThreshold(double min, double max)
        
        Add a value range to threshold within.
        """
        ...
    
    def GetArrayComponent(self):
        """
        V.GetArrayComponent() -> int
        C++: virtual int GetArrayComponent()
        
        Access to the component number for the array specified by
        ArrayName. Default is component 0. Use -1 for magnitude.
        """
        ...
    
    def GetArrayName(self):
        """
        V.GetArrayName() -> string
        C++: virtual char *GetArrayName()
        
        Access to the name of the selection's subset description array.
        """
        ...
    
    def GetCompositeIndex(self):
        """
        V.GetCompositeIndex() -> int
        C++: virtual int GetCompositeIndex()
        
        If CompositeIndex < 0 then COMPOSITE_INDEX() is not added to the
        output.
        """
        ...
    
    def GetContainingCells(self):
        """
        V.GetContainingCells() -> int
        C++: virtual int GetContainingCells()
        
        When extracting by points, extract the cells that contain the
        passing points.
        """
        ...
    
    def GetContentType(self):
        """
        V.GetContentType() -> int
        C++: virtual int GetContentType()
        
        Set the content type for the generated selection. Possible values
        are as defined by vtkSelection::SelectionContent.
        """
        ...
    
    def GetFieldType(self):
        """
        V.GetFieldType() -> int
        C++: virtual int GetFieldType()
        
        Set the field type for the generated selection. Possible values
        are as defined by vtkSelection::SelectionField.
        """
        ...
    
    def GetHierarchicalIndex(self):
        """
        V.GetHierarchicalIndex() -> int
        C++: virtual int GetHierarchicalIndex()
        
        If HierarchicalLevel or HierarchicalIndex < 0 , then
        HIERARCHICAL_LEVEL() and HIERARCHICAL_INDEX() keys are not added
        to the output.
        """
        ...
    
    def GetHierarchicalLevel(self):
        """
        V.GetHierarchicalLevel() -> int
        C++: virtual int GetHierarchicalLevel()
        
        If HierarchicalLevel or HierarchicalIndex < 0 , then
        HIERARCHICAL_LEVEL() and HIERARCHICAL_INDEX() keys are not added
        to the output.
        """
        ...
    
    def GetInverse(self):
        """
        V.GetInverse() -> int
        C++: virtual int GetInverse()
        
        Determines whether the selection describes what to include or
        exclude. Default is 0, meaning include.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLayers(self):
        """
        V.GetNumberOfLayers() -> int
        C++: virtual int GetNumberOfLayers()
        
        Specify number of layers to extract connected to the selected
        elements.
        """
        ...
    
    def GetNumberOfLayersMaxValue(self):
        """
        V.GetNumberOfLayersMaxValue() -> int
        C++: virtual int GetNumberOfLayersMaxValue()
        
        Specify number of layers to extract connected to the selected
        elements.
        """
        ...
    
    def GetNumberOfLayersMinValue(self):
        """
        V.GetNumberOfLayersMinValue() -> int
        C++: virtual int GetNumberOfLayersMinValue()
        
        Specify number of layers to extract connected to the selected
        elements.
        """
        ...
    
    def GetQueryString(self):
        """
        V.GetQueryString() -> string
        C++: virtual char *GetQueryString()
        
        Set/Get the query expression string.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSelectionSource
        C++: vtkSelectionSource *NewInstance()
        """
        ...
    
    def RemoveAllBlocks(self):
        """
        V.RemoveAllBlocks()
        C++: void RemoveAllBlocks()
        
        Remove all blocks added with AddBlock.
        """
        ...
    
    def RemoveAllIDs(self):
        """
        V.RemoveAllIDs()
        C++: void RemoveAllIDs()
        
        Removes all IDs.
        """
        ...
    
    def RemoveAllLocations(self):
        """
        V.RemoveAllLocations()
        C++: void RemoveAllLocations()
        
        Remove all locations added with AddLocation.
        """
        ...
    
    def RemoveAllStringIDs(self):
        """
        V.RemoveAllStringIDs()
        C++: void RemoveAllStringIDs()
        
        Removes all IDs.
        """
        ...
    
    def RemoveAllThresholds(self):
        """
        V.RemoveAllThresholds()
        C++: void RemoveAllThresholds()
        
        Remove all thresholds added with AddThreshold.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSelectionSource
        C++: static vtkSelectionSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetArrayComponent(self, p_int):
        """
        V.SetArrayComponent(int)
        C++: virtual void SetArrayComponent(int _arg)
        
        Access to the component number for the array specified by
        ArrayName. Default is component 0. Use -1 for magnitude.
        """
        ...
    
    def SetArrayName(self, string):
        """
        V.SetArrayName(string)
        C++: virtual void SetArrayName(const char *_arg)
        
        Access to the name of the selection's subset description array.
        """
        ...
    
    def SetCompositeIndex(self, p_int):
        """
        V.SetCompositeIndex(int)
        C++: virtual void SetCompositeIndex(int _arg)
        
        If CompositeIndex < 0 then COMPOSITE_INDEX() is not added to the
        output.
        """
        ...
    
    def SetContainingCells(self, p_int):
        """
        V.SetContainingCells(int)
        C++: virtual void SetContainingCells(int _arg)
        
        When extracting by points, extract the cells that contain the
        passing points.
        """
        ...
    
    def SetContentType(self, p_int):
        """
        V.SetContentType(int)
        C++: virtual void SetContentType(int _arg)
        
        Set the content type for the generated selection. Possible values
        are as defined by vtkSelection::SelectionContent.
        """
        ...
    
    def SetFieldType(self, p_int):
        """
        V.SetFieldType(int)
        C++: virtual void SetFieldType(int _arg)
        
        Set the field type for the generated selection. Possible values
        are as defined by vtkSelection::SelectionField.
        """
        ...
    
    def SetFrustum(self, *float):
        """
        V.SetFrustum([float, ...])
        C++: void SetFrustum(double *vertices)
        
        Set a frustum to choose within.
        """
        ...
    
    def SetHierarchicalIndex(self, p_int):
        """
        V.SetHierarchicalIndex(int)
        C++: virtual void SetHierarchicalIndex(int _arg)
        
        If HierarchicalLevel or HierarchicalIndex < 0 , then
        HIERARCHICAL_LEVEL() and HIERARCHICAL_INDEX() keys are not added
        to the output.
        """
        ...
    
    def SetHierarchicalLevel(self, p_int):
        """
        V.SetHierarchicalLevel(int)
        C++: virtual void SetHierarchicalLevel(int _arg)
        
        If HierarchicalLevel or HierarchicalIndex < 0 , then
        HIERARCHICAL_LEVEL() and HIERARCHICAL_INDEX() keys are not added
        to the output.
        """
        ...
    
    def SetInverse(self, p_int):
        """
        V.SetInverse(int)
        C++: virtual void SetInverse(int _arg)
        
        Determines whether the selection describes what to include or
        exclude. Default is 0, meaning include.
        """
        ...
    
    def SetNumberOfLayers(self, p_int):
        """
        V.SetNumberOfLayers(int)
        C++: virtual void SetNumberOfLayers(int _arg)
        
        Specify number of layers to extract connected to the selected
        elements.
        """
        ...
    
    def SetQueryString(self, string):
        """
        V.SetQueryString(string)
        C++: virtual void SetQueryString(const char *_arg)
        
        Set/Get the query expression string.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


