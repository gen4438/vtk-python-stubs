"""
This type stub file was generated by pyright.
"""

from .vtkButtonSource import vtkButtonSource

class vtkRectangularButtonSource(vtkButtonSource):
    """
    vtkRectangularButtonSource - create a rectangular button
    
    Superclass: vtkButtonSource
    
    vtkRectangularButtonSource creates a rectangular shaped button with
    texture coordinates suitable for application of a texture map. This
    provides a way to make nice looking 3D buttons. The buttons are
    represented as vtkPolyData that includes texture coordinates and
    normals. The button lies in the x-y plane.
    
    To use this class you must define its width, height and length. These
    measurements are all taken with respect to the shoulder of the
    button. The shoulder is defined as follows. Imagine a box sitting on
    the floor. The distance from the floor to the top of the box is the
    depth; the other directions are the length (x-direction) and height
    (y-direction). In this particular widget the box can have a smaller
    bottom than top. The ratio in size between bottom and top is called
    the box ratio (by default=1.0). The ratio of the texture region to
    the shoulder region is the texture ratio. And finally the texture
    region may be out of plane compared to the shoulder. The texture
    height ratio controls this.
    
    @sa
    vtkButtonSource vtkEllipticalButtonSource
    
    @warning
    The button is defined in the x-y plane. Use
    vtkTransformPolyDataFilter or vtkGlyph3D to orient the button in a
    different direction.
    """
    def GetBoxRatio(self):
        """
        V.GetBoxRatio() -> float
        C++: virtual double GetBoxRatio()
        
        Set/Get the ratio of the bottom of the button with the shoulder
        region. Numbers greater than one produce buttons with a wider
        bottom than shoulder; ratios less than one produce buttons that
        have a wider shoulder than bottom.
        """
        ...
    
    def GetBoxRatioMaxValue(self):
        """
        V.GetBoxRatioMaxValue() -> float
        C++: virtual double GetBoxRatioMaxValue()
        
        Set/Get the ratio of the bottom of the button with the shoulder
        region. Numbers greater than one produce buttons with a wider
        bottom than shoulder; ratios less than one produce buttons that
        have a wider shoulder than bottom.
        """
        ...
    
    def GetBoxRatioMinValue(self):
        """
        V.GetBoxRatioMinValue() -> float
        C++: virtual double GetBoxRatioMinValue()
        
        Set/Get the ratio of the bottom of the button with the shoulder
        region. Numbers greater than one produce buttons with a wider
        bottom than shoulder; ratios less than one produce buttons that
        have a wider shoulder than bottom.
        """
        ...
    
    def GetDepth(self):
        """
        V.GetDepth() -> float
        C++: virtual double GetDepth()
        
        Set/Get the depth of the button (the z-eliipsoid axis length).
        """
        ...
    
    def GetDepthMaxValue(self):
        """
        V.GetDepthMaxValue() -> float
        C++: virtual double GetDepthMaxValue()
        
        Set/Get the depth of the button (the z-eliipsoid axis length).
        """
        ...
    
    def GetDepthMinValue(self):
        """
        V.GetDepthMinValue() -> float
        C++: virtual double GetDepthMinValue()
        
        Set/Get the depth of the button (the z-eliipsoid axis length).
        """
        ...
    
    def GetHeight(self):
        """
        V.GetHeight() -> float
        C++: virtual double GetHeight()
        
        Set/Get the height of the button.
        """
        ...
    
    def GetHeightMaxValue(self):
        """
        V.GetHeightMaxValue() -> float
        C++: virtual double GetHeightMaxValue()
        
        Set/Get the height of the button.
        """
        ...
    
    def GetHeightMinValue(self):
        """
        V.GetHeightMinValue() -> float
        C++: virtual double GetHeightMinValue()
        
        Set/Get the height of the button.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetTextureHeightRatio(self):
        """
        V.GetTextureHeightRatio() -> float
        C++: virtual double GetTextureHeightRatio()
        
        Set/Get the ratio of the height of the texture region to the
        shoulder height. Values greater than 1.0 yield convex buttons
        with the texture region raised above the shoulder. Values less
        than 1.0 yield concave buttons with the texture region below the
        shoulder.
        """
        ...
    
    def GetTextureHeightRatioMaxValue(self):
        """
        V.GetTextureHeightRatioMaxValue() -> float
        C++: virtual double GetTextureHeightRatioMaxValue()
        
        Set/Get the ratio of the height of the texture region to the
        shoulder height. Values greater than 1.0 yield convex buttons
        with the texture region raised above the shoulder. Values less
        than 1.0 yield concave buttons with the texture region below the
        shoulder.
        """
        ...
    
    def GetTextureHeightRatioMinValue(self):
        """
        V.GetTextureHeightRatioMinValue() -> float
        C++: virtual double GetTextureHeightRatioMinValue()
        
        Set/Get the ratio of the height of the texture region to the
        shoulder height. Values greater than 1.0 yield convex buttons
        with the texture region raised above the shoulder. Values less
        than 1.0 yield concave buttons with the texture region below the
        shoulder.
        """
        ...
    
    def GetTextureRatio(self):
        """
        V.GetTextureRatio() -> float
        C++: virtual double GetTextureRatio()
        
        Set/Get the ratio of the texture region to the shoulder region.
        This number must be 0<=tr<=1. If the texture style is to fit the
        image, then satisfying the texture ratio may only be possible in
        one of the two directions (length or width) depending on the
        dimensions of the texture.
        """
        ...
    
    def GetTextureRatioMaxValue(self):
        """
        V.GetTextureRatioMaxValue() -> float
        C++: virtual double GetTextureRatioMaxValue()
        
        Set/Get the ratio of the texture region to the shoulder region.
        This number must be 0<=tr<=1. If the texture style is to fit the
        image, then satisfying the texture ratio may only be possible in
        one of the two directions (length or width) depending on the
        dimensions of the texture.
        """
        ...
    
    def GetTextureRatioMinValue(self):
        """
        V.GetTextureRatioMinValue() -> float
        C++: virtual double GetTextureRatioMinValue()
        
        Set/Get the ratio of the texture region to the shoulder region.
        This number must be 0<=tr<=1. If the texture style is to fit the
        image, then satisfying the texture ratio may only be possible in
        one of the two directions (length or width) depending on the
        dimensions of the texture.
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> float
        C++: virtual double GetWidth()
        
        Set/Get the width of the button.
        """
        ...
    
    def GetWidthMaxValue(self):
        """
        V.GetWidthMaxValue() -> float
        C++: virtual double GetWidthMaxValue()
        
        Set/Get the width of the button.
        """
        ...
    
    def GetWidthMinValue(self):
        """
        V.GetWidthMinValue() -> float
        C++: virtual double GetWidthMinValue()
        
        Set/Get the width of the button.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRectangularButtonSource
        C++: vtkRectangularButtonSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRectangularButtonSource
        C++: static vtkRectangularButtonSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBoxRatio(self, p_float):
        """
        V.SetBoxRatio(float)
        C++: virtual void SetBoxRatio(double _arg)
        
        Set/Get the ratio of the bottom of the button with the shoulder
        region. Numbers greater than one produce buttons with a wider
        bottom than shoulder; ratios less than one produce buttons that
        have a wider shoulder than bottom.
        """
        ...
    
    def SetDepth(self, p_float):
        """
        V.SetDepth(float)
        C++: virtual void SetDepth(double _arg)
        
        Set/Get the depth of the button (the z-eliipsoid axis length).
        """
        ...
    
    def SetHeight(self, p_float):
        """
        V.SetHeight(float)
        C++: virtual void SetHeight(double _arg)
        
        Set/Get the height of the button.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetTextureHeightRatio(self, p_float):
        """
        V.SetTextureHeightRatio(float)
        C++: virtual void SetTextureHeightRatio(double _arg)
        
        Set/Get the ratio of the height of the texture region to the
        shoulder height. Values greater than 1.0 yield convex buttons
        with the texture region raised above the shoulder. Values less
        than 1.0 yield concave buttons with the texture region below the
        shoulder.
        """
        ...
    
    def SetTextureRatio(self, p_float):
        """
        V.SetTextureRatio(float)
        C++: virtual void SetTextureRatio(double _arg)
        
        Set/Get the ratio of the texture region to the shoulder region.
        This number must be 0<=tr<=1. If the texture style is to fit the
        image, then satisfying the texture ratio may only be possible in
        one of the two directions (length or width) depending on the
        dimensions of the texture.
        """
        ...
    
    def SetWidth(self, p_float):
        """
        V.SetWidth(float)
        C++: virtual void SetWidth(double _arg)
        
        Set/Get the width of the button.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


