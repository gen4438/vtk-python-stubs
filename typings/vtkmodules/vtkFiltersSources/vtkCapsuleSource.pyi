"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCapsuleSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkCapsuleSource - Generate a capsule centered at the origin
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkCapsuleSource creates a capsule (represented by polygons) of
    specified radius centered at the origin. The resolution (polygonal
    discretization) in both the latitude (phi) and longitude (theta)
    directions can be specified as well as the length of the capsule
    cylinder (CylinderLength). By default, the surface tessellation of
    the sphere uses triangles; however you can set LatLongTessellation to
    produce a tessellation using quadrilaterals (except at the poles of
    the capsule).
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set/get the center of the capsule. The initial value is (0.0,
        0.0, 0.0).
        """
        ...
    
    def GetCylinderLength(self):
        """
        V.GetCylinderLength() -> float
        C++: virtual double GetCylinderLength()
        
        Set/get the length of the cylinder. The initial value is 1.0.
        """
        ...
    
    def GetCylinderLengthMaxValue(self):
        """
        V.GetCylinderLengthMaxValue() -> float
        C++: virtual double GetCylinderLengthMaxValue()
        
        Set/get the length of the cylinder. The initial value is 1.0.
        """
        ...
    
    def GetCylinderLengthMinValue(self):
        """
        V.GetCylinderLengthMinValue() -> float
        C++: virtual double GetCylinderLengthMinValue()
        
        Set/get the length of the cylinder. The initial value is 1.0.
        """
        ...
    
    def GetLatLongTessellation(self):
        """
        V.GetLatLongTessellation() -> int
        C++: virtual int GetLatLongTessellation()
        
        Cause the spheres to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        wireframe spheres with natural latitude and longitude lines.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetPhiResolution(self):
        """
        V.GetPhiResolution() -> int
        C++: virtual int GetPhiResolution()
        
        Set/get the number of points in the latitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def GetPhiResolutionMaxValue(self):
        """
        V.GetPhiResolutionMaxValue() -> int
        C++: virtual int GetPhiResolutionMaxValue()
        
        Set/get the number of points in the latitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def GetPhiResolutionMinValue(self):
        """
        V.GetPhiResolutionMinValue() -> int
        C++: virtual int GetPhiResolutionMinValue()
        
        Set/get the number of points in the latitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set/get the radius of the capsule. The initial value is 0.5.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set/get the radius of the capsule. The initial value is 0.5.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set/get the radius of the capsule. The initial value is 0.5.
        """
        ...
    
    def GetThetaResolution(self):
        """
        V.GetThetaResolution() -> int
        C++: virtual int GetThetaResolution()
        
        Set/get the number of points in the longitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def GetThetaResolutionMaxValue(self):
        """
        V.GetThetaResolutionMaxValue() -> int
        C++: virtual int GetThetaResolutionMaxValue()
        
        Set/get the number of points in the longitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def GetThetaResolutionMinValue(self):
        """
        V.GetThetaResolutionMinValue() -> int
        C++: virtual int GetThetaResolutionMinValue()
        
        Set/get the number of points in the longitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LatLongTessellationOff(self):
        """
        V.LatLongTessellationOff()
        C++: virtual void LatLongTessellationOff()
        
        Cause the spheres to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        wireframe spheres with natural latitude and longitude lines.
        """
        ...
    
    def LatLongTessellationOn(self):
        """
        V.LatLongTessellationOn()
        C++: virtual void LatLongTessellationOn()
        
        Cause the spheres to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        wireframe spheres with natural latitude and longitude lines.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCapsuleSource
        C++: vtkCapsuleSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCapsuleSource
        C++: static vtkCapsuleSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set/get the center of the capsule. The initial value is (0.0,
        0.0, 0.0).
        """
        ...
    
    def SetCylinderLength(self, p_float):
        """
        V.SetCylinderLength(float)
        C++: virtual void SetCylinderLength(double _arg)
        
        Set/get the length of the cylinder. The initial value is 1.0.
        """
        ...
    
    def SetLatLongTessellation(self, p_int):
        """
        V.SetLatLongTessellation(int)
        C++: virtual void SetLatLongTessellation(int _arg)
        
        Cause the spheres to be tessellated with edges along the latitude
        and longitude lines. If off, triangles are generated at non-polar
        regions, which results in edges that are not parallel to latitude
        and longitude lines. If on, quadrilaterals are generated
        everywhere except at the poles. This can be useful for generating
        wireframe spheres with natural latitude and longitude lines.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetPhiResolution(self, p_int):
        """
        V.SetPhiResolution(int)
        C++: virtual void SetPhiResolution(int _arg)
        
        Set/get the number of points in the latitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set/get the radius of the capsule. The initial value is 0.5.
        """
        ...
    
    def SetThetaResolution(self, p_int):
        """
        V.SetThetaResolution(int)
        C++: virtual void SetThetaResolution(int _arg)
        
        Set/get the number of points in the longitude direction for the
        spheres. The initial value is 8.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


