"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCellTypeSource(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkCellTypeSource - Create cells of a given type
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkCellTypeSource is a source object that creates cells of the given
    input type. BlocksDimensions specifies the number of cell "blocks" in
    each direction. A cell block may be divided into multiple cells based
    on the chosen cell type (e.g. 6 pyramid cells make up a single cell
    block). If a 1D cell is selected then only the first dimension is
    used to specify how many cells are generated. If a 2D cell is
    selected then only the first and second dimensions are used to
    determine how many cells are created. The source respects pieces.
    """
    def CompleteQuadraticSimplicialElementsOff(self):
        """
        V.CompleteQuadraticSimplicialElementsOff()
        C++: virtual void CompleteQuadraticSimplicialElementsOff()
        
        Set/Get whether quadratic cells with simplicial shapes should be
        "completed".
        
        By default, quadratic Lagrange cells with simplicial shapes do
        not completely span the basis of all polynomial of the maximal
        degree. This can be corrected by adding mid-face and
        body-centered nodes. Setting this option to true will generate
        cells with these additional nodes.
        
        This is only used when (1) the cell type is a Lagrange triangle,
        tetrahedron, or wedge; and (2) CellOrder is set to 2 (quadratic
        elements). The default is false.
        
        When true, generated (1) triangles will have 7 nodes instead of
        6; (2) tetrahedra will have 15 nodes instead of 10; (3) wedges
        will have 21 nodes instead of 18.
        """
        ...
    
    def CompleteQuadraticSimplicialElementsOn(self):
        """
        V.CompleteQuadraticSimplicialElementsOn()
        C++: virtual void CompleteQuadraticSimplicialElementsOn()
        
        Set/Get whether quadratic cells with simplicial shapes should be
        "completed".
        
        By default, quadratic Lagrange cells with simplicial shapes do
        not completely span the basis of all polynomial of the maximal
        degree. This can be corrected by adding mid-face and
        body-centered nodes. Setting this option to true will generate
        cells with these additional nodes.
        
        This is only used when (1) the cell type is a Lagrange triangle,
        tetrahedron, or wedge; and (2) CellOrder is set to 2 (quadratic
        elements). The default is false.
        
        When true, generated (1) triangles will have 7 nodes instead of
        6; (2) tetrahedra will have 15 nodes instead of 10; (3) wedges
        will have 21 nodes instead of 18.
        """
        ...
    
    def GetBlocksDimensions(self):
        """
        V.GetBlocksDimensions() -> (int, int, int)
        C++: virtual int *GetBlocksDimensions()
        
        Set the number of cells in each direction. If a 1D cell type is
        selected then only the first dimension is used and if a 2D cell
        type is selected then the first and second dimensions are used.
        Default is (1, 1, 1), which results in a single block of cells.
        """
        ...
    
    def GetCellDimension(self):
        """
        V.GetCellDimension() -> int
        C++: int GetCellDimension()
        
        Get the dimension of the cell blocks to be generated
        """
        ...
    
    def GetCellOrder(self):
        """
        V.GetCellOrder() -> int
        C++: virtual int GetCellOrder()
        
        Set/Get the order of Lagrange interpolation to be used.
        
        This is only used when the cell type is a Lagrange element. The
        default is cubic (order 3). Lagrange elements are the same order
        along all axes (i.e., you cannot specify a different
        interpolation order for the i, j, and k axes of a hexahedron).
        """
        ...
    
    def GetCellType(self):
        """
        V.GetCellType() -> int
        C++: virtual int GetCellType()
        
        Set/Get the type of cells to be generated.
        """
        ...
    
    def GetCompleteQuadraticSimplicialElements(self):
        """
        V.GetCompleteQuadraticSimplicialElements() -> bool
        C++: virtual bool GetCompleteQuadraticSimplicialElements()
        
        Set/Get whether quadratic cells with simplicial shapes should be
        "completed".
        
        By default, quadratic Lagrange cells with simplicial shapes do
        not completely span the basis of all polynomial of the maximal
        degree. This can be corrected by adding mid-face and
        body-centered nodes. Setting this option to true will generate
        cells with these additional nodes.
        
        This is only used when (1) the cell type is a Lagrange triangle,
        tetrahedron, or wedge; and (2) CellOrder is set to 2 (quadratic
        elements). The default is false.
        
        When true, generated (1) triangles will have 7 nodes instead of
        6; (2) tetrahedra will have 15 nodes instead of 10; (3) wedges
        will have 21 nodes instead of 18.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, obtaining type and printing
        instance values.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, obtaining type and printing
        instance values.
        """
        ...
    
    def GetOutputPrecision(self):
        """
        V.GetOutputPrecision() -> int
        C++: virtual int GetOutputPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION (0) - Output single-precision
        floating point. vtkAlgorithm::DOUBLE_PRECISION (1) - Output
        double-precision floating point.
        """
        ...
    
    def GetOutputPrecisionMaxValue(self):
        """
        V.GetOutputPrecisionMaxValue() -> int
        C++: virtual int GetOutputPrecisionMaxValue()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION (0) - Output single-precision
        floating point. vtkAlgorithm::DOUBLE_PRECISION (1) - Output
        double-precision floating point.
        """
        ...
    
    def GetOutputPrecisionMinValue(self):
        """
        V.GetOutputPrecisionMinValue() -> int
        C++: virtual int GetOutputPrecisionMinValue()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION (0) - Output single-precision
        floating point. vtkAlgorithm::DOUBLE_PRECISION (1) - Output
        double-precision floating point.
        """
        ...
    
    def GetPolynomialFieldOrder(self):
        """
        V.GetPolynomialFieldOrder() -> int
        C++: virtual int GetPolynomialFieldOrder()
        
        Set/Get the polynomial order of the "Polynomial" point field. The
        default is 1.
        """
        ...
    
    def GetPolynomialFieldOrderMaxValue(self):
        """
        V.GetPolynomialFieldOrderMaxValue() -> int
        C++: virtual int GetPolynomialFieldOrderMaxValue()
        
        Set/Get the polynomial order of the "Polynomial" point field. The
        default is 1.
        """
        ...
    
    def GetPolynomialFieldOrderMinValue(self):
        """
        V.GetPolynomialFieldOrderMinValue() -> int
        C++: virtual int GetPolynomialFieldOrderMinValue()
        
        Set/Get the polynomial order of the "Polynomial" point field. The
        default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, obtaining type and printing
        instance values.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, obtaining type and printing
        instance values.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellTypeSource
        C++: vtkCellTypeSource *NewInstance()
        
        Standard methods for instantiation, obtaining type and printing
        instance values.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellTypeSource
        C++: static vtkCellTypeSource *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiation, obtaining type and printing
        instance values.
        """
        ...
    
    def SetBlocksDimensions(self, *int):
        """
        V.SetBlocksDimensions([int, ...])
        C++: void SetBlocksDimensions(int *)
        V.SetBlocksDimensions(int, int, int)
        C++: void SetBlocksDimensions(int, int, int)
        
        Set the number of cells in each direction. If a 1D cell type is
        selected then only the first dimension is used and if a 2D cell
        type is selected then the first and second dimensions are used.
        Default is (1, 1, 1), which results in a single block of cells.
        """
        ...
    
    def SetCellOrder(self, p_int):
        """
        V.SetCellOrder(int)
        C++: virtual void SetCellOrder(int _arg)
        
        Set/Get the order of Lagrange interpolation to be used.
        
        This is only used when the cell type is a Lagrange element. The
        default is cubic (order 3). Lagrange elements are the same order
        along all axes (i.e., you cannot specify a different
        interpolation order for the i, j, and k axes of a hexahedron).
        """
        ...
    
    def SetCellType(self, p_int):
        """
        V.SetCellType(int)
        C++: void SetCellType(int cellType)
        
        Set/Get the type of cells to be generated.
        """
        ...
    
    def SetCompleteQuadraticSimplicialElements(self, bool):
        """
        V.SetCompleteQuadraticSimplicialElements(bool)
        C++: virtual void SetCompleteQuadraticSimplicialElements(
            bool _arg)
        
        Set/Get whether quadratic cells with simplicial shapes should be
        "completed".
        
        By default, quadratic Lagrange cells with simplicial shapes do
        not completely span the basis of all polynomial of the maximal
        degree. This can be corrected by adding mid-face and
        body-centered nodes. Setting this option to true will generate
        cells with these additional nodes.
        
        This is only used when (1) the cell type is a Lagrange triangle,
        tetrahedron, or wedge; and (2) CellOrder is set to 2 (quadratic
        elements). The default is false.
        
        When true, generated (1) triangles will have 7 nodes instead of
        6; (2) tetrahedra will have 15 nodes instead of 10; (3) wedges
        will have 21 nodes instead of 18.
        """
        ...
    
    def SetOutputPrecision(self, p_int):
        """
        V.SetOutputPrecision(int)
        C++: virtual void SetOutputPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION (0) - Output single-precision
        floating point. vtkAlgorithm::DOUBLE_PRECISION (1) - Output
        double-precision floating point.
        """
        ...
    
    def SetPolynomialFieldOrder(self, p_int):
        """
        V.SetPolynomialFieldOrder(int)
        C++: virtual void SetPolynomialFieldOrder(int _arg)
        
        Set/Get the polynomial order of the "Polynomial" point field. The
        default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


