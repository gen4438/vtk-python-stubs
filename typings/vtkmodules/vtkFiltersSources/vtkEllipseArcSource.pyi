"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkEllipseArcSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkEllipseArcSource - create an elliptical arc
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkEllipseArcSource is a source object that creates an elliptical arc
    defined by a normal, a center and the major radius vector. You can
    define an angle to draw only a section of the ellipse. The number of
    segments composing the polyline is controlled by setting the object
    resolution.
    
    @sa
    vtkArcSource
    """
    def CloseOff(self):
        """
        V.CloseOff()
        C++: virtual void CloseOff()
        
        Set/get whether to close the arc with a final line segment
        connecting the first and last points in the arc. Off by default
        """
        ...
    
    def CloseOn(self):
        """
        V.CloseOn()
        C++: virtual void CloseOn()
        
        Set/get whether to close the arc with a final line segment
        connecting the first and last points in the arc. Off by default
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set position of the center of the ellipse that define the arc.
        Default is 0, 0, 0.
        """
        ...
    
    def GetClose(self):
        """
        V.GetClose() -> bool
        C++: virtual bool GetClose()
        
        Set/get whether to close the arc with a final line segment
        connecting the first and last points in the arc. Off by default
        """
        ...
    
    def GetMajorRadiusVector(self):
        """
        V.GetMajorRadiusVector() -> (float, float, float)
        C++: virtual double *GetMajorRadiusVector()
        
        Set Major Radius Vector. It defines the origin of polar angle and
        the major radius size. Default is 1, 0, 0.
        """
        ...
    
    def GetNormal(self):
        """
        V.GetNormal() -> (float, float, float)
        C++: virtual double *GetNormal()
        
        Set normal vector. Represents the plane in which the ellipse will
        be drawn. Default 0, 0, 1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point, This is the default. vtkAlgorithm::DOUBLE_PRECISION -
        Output double-precision floating point.
        """
        ...
    
    def GetRatio(self):
        """
        V.GetRatio() -> float
        C++: virtual double GetRatio()
        
        Set the ratio of the ellipse, i.e. the ratio b/a _ b: minor
        radius; a: major radius default is 1.
        """
        ...
    
    def GetRatioMaxValue(self):
        """
        V.GetRatioMaxValue() -> float
        C++: virtual double GetRatioMaxValue()
        
        Set the ratio of the ellipse, i.e. the ratio b/a _ b: minor
        radius; a: major radius default is 1.
        """
        ...
    
    def GetRatioMinValue(self):
        """
        V.GetRatioMinValue() -> float
        C++: virtual double GetRatioMinValue()
        
        Set the ratio of the ellipse, i.e. the ratio b/a _ b: minor
        radius; a: major radius default is 1.
        """
        ...
    
    def GetResolution(self):
        """
        V.GetResolution() -> int
        C++: virtual int GetResolution()
        
        Divide line into resolution number of pieces. Note: if Resolution
        is set to 1 the arc is a straight line. Default is 100.
        """
        ...
    
    def GetResolutionMaxValue(self):
        """
        V.GetResolutionMaxValue() -> int
        C++: virtual int GetResolutionMaxValue()
        
        Divide line into resolution number of pieces. Note: if Resolution
        is set to 1 the arc is a straight line. Default is 100.
        """
        ...
    
    def GetResolutionMinValue(self):
        """
        V.GetResolutionMinValue() -> int
        C++: virtual int GetResolutionMinValue()
        
        Divide line into resolution number of pieces. Note: if Resolution
        is set to 1 the arc is a straight line. Default is 100.
        """
        ...
    
    def GetSegmentAngle(self):
        """
        V.GetSegmentAngle() -> float
        C++: virtual double GetSegmentAngle()
        
        Angular sector occupied by the arc, beginning at Start Angle
        Default is 90.
        """
        ...
    
    def GetSegmentAngleMaxValue(self):
        """
        V.GetSegmentAngleMaxValue() -> float
        C++: virtual double GetSegmentAngleMaxValue()
        
        Angular sector occupied by the arc, beginning at Start Angle
        Default is 90.
        """
        ...
    
    def GetSegmentAngleMinValue(self):
        """
        V.GetSegmentAngleMinValue() -> float
        C++: virtual double GetSegmentAngleMinValue()
        
        Angular sector occupied by the arc, beginning at Start Angle
        Default is 90.
        """
        ...
    
    def GetStartAngle(self):
        """
        V.GetStartAngle() -> float
        C++: virtual double GetStartAngle()
        
        Set the start angle. The angle where the plot begins. Default is
        0.
        """
        ...
    
    def GetStartAngleMaxValue(self):
        """
        V.GetStartAngleMaxValue() -> float
        C++: virtual double GetStartAngleMaxValue()
        
        Set the start angle. The angle where the plot begins. Default is
        0.
        """
        ...
    
    def GetStartAngleMinValue(self):
        """
        V.GetStartAngleMinValue() -> float
        C++: virtual double GetStartAngleMinValue()
        
        Set the start angle. The angle where the plot begins. Default is
        0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEllipseArcSource
        C++: vtkEllipseArcSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEllipseArcSource
        C++: static vtkEllipseArcSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set position of the center of the ellipse that define the arc.
        Default is 0, 0, 0.
        """
        ...
    
    def SetClose(self, bool):
        """
        V.SetClose(bool)
        C++: virtual void SetClose(bool _arg)
        
        Set/get whether to close the arc with a final line segment
        connecting the first and last points in the arc. Off by default
        """
        ...
    
    def SetMajorRadiusVector(self, p_float, p_float_1, p_float_2):
        """
        V.SetMajorRadiusVector(float, float, float)
        C++: virtual void SetMajorRadiusVector(double _arg1, double _arg2,
             double _arg3)
        V.SetMajorRadiusVector((float, float, float))
        C++: virtual void SetMajorRadiusVector(const double _arg[3])
        
        Set Major Radius Vector. It defines the origin of polar angle and
        the major radius size. Default is 1, 0, 0.
        """
        ...
    
    def SetNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetNormal(float, float, float)
        C++: virtual void SetNormal(double _arg1, double _arg2,
            double _arg3)
        V.SetNormal((float, float, float))
        C++: virtual void SetNormal(const double _arg[3])
        
        Set normal vector. Represents the plane in which the ellipse will
        be drawn. Default 0, 0, 1.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point, This is the default. vtkAlgorithm::DOUBLE_PRECISION -
        Output double-precision floating point.
        """
        ...
    
    def SetRatio(self, p_float):
        """
        V.SetRatio(float)
        C++: virtual void SetRatio(double _arg)
        
        Set the ratio of the ellipse, i.e. the ratio b/a _ b: minor
        radius; a: major radius default is 1.
        """
        ...
    
    def SetResolution(self, p_int):
        """
        V.SetResolution(int)
        C++: virtual void SetResolution(int _arg)
        
        Divide line into resolution number of pieces. Note: if Resolution
        is set to 1 the arc is a straight line. Default is 100.
        """
        ...
    
    def SetSegmentAngle(self, p_float):
        """
        V.SetSegmentAngle(float)
        C++: virtual void SetSegmentAngle(double _arg)
        
        Angular sector occupied by the arc, beginning at Start Angle
        Default is 90.
        """
        ...
    
    def SetStartAngle(self, p_float):
        """
        V.SetStartAngle(float)
        C++: virtual void SetStartAngle(double _arg)
        
        Set the start angle. The angle where the plot begins. Default is
        0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


