"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTexturedSphereSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkTexturedSphereSource - create a sphere centered at the origin
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkTexturedSphereSource creates a polygonal sphere of specified
    radius centered at the origin. The resolution (polygonal
    discretization) in both the latitude (phi) and longitude (theta)
    directions can be specified. It also is possible to create partial
    sphere by specifying maximum phi and theta angles.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetPhi(self):
        """
        V.GetPhi() -> float
        C++: virtual double GetPhi()
        
        Set the maximum latitude angle (0 is at north pole).
        """
        ...
    
    def GetPhiMaxValue(self):
        """
        V.GetPhiMaxValue() -> float
        C++: virtual double GetPhiMaxValue()
        
        Set the maximum latitude angle (0 is at north pole).
        """
        ...
    
    def GetPhiMinValue(self):
        """
        V.GetPhiMinValue() -> float
        C++: virtual double GetPhiMinValue()
        
        Set the maximum latitude angle (0 is at north pole).
        """
        ...
    
    def GetPhiResolution(self):
        """
        V.GetPhiResolution() -> int
        C++: virtual int GetPhiResolution()
        
        Set the number of points in the latitude direction.
        """
        ...
    
    def GetPhiResolutionMaxValue(self):
        """
        V.GetPhiResolutionMaxValue() -> int
        C++: virtual int GetPhiResolutionMaxValue()
        
        Set the number of points in the latitude direction.
        """
        ...
    
    def GetPhiResolutionMinValue(self):
        """
        V.GetPhiResolutionMinValue() -> int
        C++: virtual int GetPhiResolutionMinValue()
        
        Set the number of points in the latitude direction.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set radius of sphere.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set radius of sphere.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set radius of sphere.
        """
        ...
    
    def GetTheta(self):
        """
        V.GetTheta() -> float
        C++: virtual double GetTheta()
        
        Set the maximum longitude angle.
        """
        ...
    
    def GetThetaMaxValue(self):
        """
        V.GetThetaMaxValue() -> float
        C++: virtual double GetThetaMaxValue()
        
        Set the maximum longitude angle.
        """
        ...
    
    def GetThetaMinValue(self):
        """
        V.GetThetaMinValue() -> float
        C++: virtual double GetThetaMinValue()
        
        Set the maximum longitude angle.
        """
        ...
    
    def GetThetaResolution(self):
        """
        V.GetThetaResolution() -> int
        C++: virtual int GetThetaResolution()
        
        Set the number of points in the longitude direction.
        """
        ...
    
    def GetThetaResolutionMaxValue(self):
        """
        V.GetThetaResolutionMaxValue() -> int
        C++: virtual int GetThetaResolutionMaxValue()
        
        Set the number of points in the longitude direction.
        """
        ...
    
    def GetThetaResolutionMinValue(self):
        """
        V.GetThetaResolutionMinValue() -> int
        C++: virtual int GetThetaResolutionMinValue()
        
        Set the number of points in the longitude direction.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTexturedSphereSource
        C++: vtkTexturedSphereSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTexturedSphereSource
        C++: static vtkTexturedSphereSource *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetPhi(self, p_float):
        """
        V.SetPhi(float)
        C++: virtual void SetPhi(double _arg)
        
        Set the maximum latitude angle (0 is at north pole).
        """
        ...
    
    def SetPhiResolution(self, p_int):
        """
        V.SetPhiResolution(int)
        C++: virtual void SetPhiResolution(int _arg)
        
        Set the number of points in the latitude direction.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set radius of sphere.
        """
        ...
    
    def SetTheta(self, p_float):
        """
        V.SetTheta(float)
        C++: virtual void SetTheta(double _arg)
        
        Set the maximum longitude angle.
        """
        ...
    
    def SetThetaResolution(self, p_int):
        """
        V.SetThetaResolution(int)
        C++: virtual void SetThetaResolution(int _arg)
        
        Set the number of points in the longitude direction.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


