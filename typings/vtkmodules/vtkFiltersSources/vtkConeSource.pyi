"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkConeSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkConeSource - generate polygonal cone
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkConeSource creates a cone centered at a specified point and
    pointing in a specified direction. (By default, the center is the
    origin and the direction is the x-axis.) Depending upon the
    resolution of this object, different representations are created. If
    resolution=0 a line is created; if resolution=1, a single triangle is
    created; if resolution=2, two crossed triangles are created. For
    resolution > 2, a 3D cone (with resolution number of sides) is
    created. It also is possible to control whether the bottom of the
    cone is capped with a (resolution-sided) polygon, and to specify the
    height and radius of the cone.
    """
    def CappingOff(self):
        """
        V.CappingOff()
        C++: virtual void CappingOff()
        
        Turn on/off whether to cap the base of the cone with a polygon.
        """
        ...
    
    def CappingOn(self):
        """
        V.CappingOn()
        C++: virtual void CappingOn()
        
        Turn on/off whether to cap the base of the cone with a polygon.
        """
        ...
    
    def GetAngle(self):
        """
        V.GetAngle() -> float
        C++: double GetAngle()
        
        Set the angle of the cone. This is the angle between the axis of
        the cone and a generatrix. Warning: this is not the aperture! The
        aperture is twice this angle. As a side effect, the angle plus
        height sets the base radius of the cone. Angle is expressed in
        degrees.
        """
        ...
    
    def GetCapping(self):
        """
        V.GetCapping() -> int
        C++: virtual vtkTypeBool GetCapping()
        
        Turn on/off whether to cap the base of the cone with a polygon.
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set the center of the cone. It is located at the middle of the
        axis of the cone. Warning: this is not the center of the base of
        the cone! The default is 0,0,0.
        """
        ...
    
    def GetDirection(self):
        """
        V.GetDirection() -> (float, float, float)
        C++: virtual double *GetDirection()
        
        Set the orientation vector of the cone. The vector does not have
        to be normalized. The direction goes from the center of the base
        toward the apex. The default is (1,0,0).
        """
        ...
    
    def GetHeight(self):
        """
        V.GetHeight() -> float
        C++: virtual double GetHeight()
        
        Set the height of the cone. This is the height along the cone in
        its specified direction.
        """
        ...
    
    def GetHeightMaxValue(self):
        """
        V.GetHeightMaxValue() -> float
        C++: virtual double GetHeightMaxValue()
        
        Set the height of the cone. This is the height along the cone in
        its specified direction.
        """
        ...
    
    def GetHeightMinValue(self):
        """
        V.GetHeightMinValue() -> float
        C++: virtual double GetHeightMinValue()
        
        Set the height of the cone. This is the height along the cone in
        its specified direction.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set the base radius of the cone.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set the base radius of the cone.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set the base radius of the cone.
        """
        ...
    
    def GetResolution(self):
        """
        V.GetResolution() -> int
        C++: virtual int GetResolution()
        
        Set the number of facets used to represent the cone.
        """
        ...
    
    def GetResolutionMaxValue(self):
        """
        V.GetResolutionMaxValue() -> int
        C++: virtual int GetResolutionMaxValue()
        
        Set the number of facets used to represent the cone.
        """
        ...
    
    def GetResolutionMinValue(self):
        """
        V.GetResolutionMinValue() -> int
        C++: virtual int GetResolutionMinValue()
        
        Set the number of facets used to represent the cone.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkConeSource
        C++: vtkConeSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkConeSource
        C++: static vtkConeSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAngle(self, p_float):
        """
        V.SetAngle(float)
        C++: void SetAngle(double angle)
        
        Set the angle of the cone. This is the angle between the axis of
        the cone and a generatrix. Warning: this is not the aperture! The
        aperture is twice this angle. As a side effect, the angle plus
        height sets the base radius of the cone. Angle is expressed in
        degrees.
        """
        ...
    
    def SetCapping(self, p_int):
        """
        V.SetCapping(int)
        C++: virtual void SetCapping(vtkTypeBool _arg)
        
        Turn on/off whether to cap the base of the cone with a polygon.
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set the center of the cone. It is located at the middle of the
        axis of the cone. Warning: this is not the center of the base of
        the cone! The default is 0,0,0.
        """
        ...
    
    def SetDirection(self, p_float, p_float_1, p_float_2):
        """
        V.SetDirection(float, float, float)
        C++: virtual void SetDirection(double _arg1, double _arg2,
            double _arg3)
        V.SetDirection((float, float, float))
        C++: virtual void SetDirection(const double _arg[3])
        
        Set the orientation vector of the cone. The vector does not have
        to be normalized. The direction goes from the center of the base
        toward the apex. The default is (1,0,0).
        """
        ...
    
    def SetHeight(self, p_float):
        """
        V.SetHeight(float)
        C++: virtual void SetHeight(double _arg)
        
        Set the height of the cone. This is the height along the cone in
        its specified direction.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set the base radius of the cone.
        """
        ...
    
    def SetResolution(self, p_int):
        """
        V.SetResolution(int)
        C++: virtual void SetResolution(int _arg)
        
        Set the number of facets used to represent the cone.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


