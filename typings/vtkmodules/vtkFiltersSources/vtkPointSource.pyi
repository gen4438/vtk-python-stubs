"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkPointSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkPointSource - create a random cloud of points
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkPointSource is a source object that creates a user-specified
    number of points within a specified radius about a specified center
    point. By default location of the points is random within the sphere.
    It is also possible to generate random points only on the surface of
    the sphere. The output PolyData has the specified number of points
    and 1 cell - a vtkPolyVertex containing all of the points.
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set the center of the point cloud.
        """
        ...
    
    def GetDistribution(self):
        """
        V.GetDistribution() -> int
        C++: virtual int GetDistribution()
        
        Specify the distribution to use.  The default is a uniform
        distribution.  The shell distribution produces random points on
        the surface of the sphere, none in the interior.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPoints(self):
        """
        V.GetNumberOfPoints() -> int
        C++: virtual vtkIdType GetNumberOfPoints()
        
        Set the number of points to generate.
        """
        ...
    
    def GetNumberOfPointsMaxValue(self):
        """
        V.GetNumberOfPointsMaxValue() -> int
        C++: virtual vtkIdType GetNumberOfPointsMaxValue()
        
        Set the number of points to generate.
        """
        ...
    
    def GetNumberOfPointsMinValue(self):
        """
        V.GetNumberOfPointsMinValue() -> int
        C++: virtual vtkIdType GetNumberOfPointsMinValue()
        
        Set the number of points to generate.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set the radius of the point cloud.  If you are generating a
        Gaussian distribution, then this is the standard deviation for
        each of x, y, and z.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set the radius of the point cloud.  If you are generating a
        Gaussian distribution, then this is the standard deviation for
        each of x, y, and z.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set the radius of the point cloud.  If you are generating a
        Gaussian distribution, then this is the standard deviation for
        each of x, y, and z.
        """
        ...
    
    def GetRandomSequence(self):
        """
        V.GetRandomSequence() -> vtkRandomSequence
        C++: virtual vtkRandomSequence *GetRandomSequence()
        
        Set/Get a random sequence generator. By default, the generator in
        vtkMath is used to maintain backwards compatibility.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPointSource
        C++: vtkPointSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPointSource
        C++: static vtkPointSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set the center of the point cloud.
        """
        ...
    
    def SetDistribution(self, p_int):
        """
        V.SetDistribution(int)
        C++: virtual void SetDistribution(int _arg)
        
        Specify the distribution to use.  The default is a uniform
        distribution.  The shell distribution produces random points on
        the surface of the sphere, none in the interior.
        """
        ...
    
    def SetDistributionToShell(self):
        """
        V.SetDistributionToShell()
        C++: void SetDistributionToShell()
        
        Specify the distribution to use.  The default is a uniform
        distribution.  The shell distribution produces random points on
        the surface of the sphere, none in the interior.
        """
        ...
    
    def SetDistributionToUniform(self):
        """
        V.SetDistributionToUniform()
        C++: void SetDistributionToUniform()
        
        Specify the distribution to use.  The default is a uniform
        distribution.  The shell distribution produces random points on
        the surface of the sphere, none in the interior.
        """
        ...
    
    def SetNumberOfPoints(self, p_int):
        """
        V.SetNumberOfPoints(int)
        C++: virtual void SetNumberOfPoints(vtkIdType _arg)
        
        Set the number of points to generate.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set the radius of the point cloud.  If you are generating a
        Gaussian distribution, then this is the standard deviation for
        each of x, y, and z.
        """
        ...
    
    def SetRandomSequence(self, vtkRandomSequence):
        """
        V.SetRandomSequence(vtkRandomSequence)
        C++: virtual void SetRandomSequence(
            vtkRandomSequence *randomSequence)
        
        Set/Get a random sequence generator. By default, the generator in
        vtkMath is used to maintain backwards compatibility.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


