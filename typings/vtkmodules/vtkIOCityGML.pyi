"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCityGMLReader(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkCityGMLReader - reads CityGML files
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkCityGMLReader is a reader for CityGML .gml files. The output is a
    multiblock dataset. We read objects at level of detail (LOD)
    specified (default is 3).
    
    * The leafs of the multiblock dataset (which are polygonal datasets)
    * have a field array with one element called "gml_id" which
    * corresponds to the gml:id for gml:TriangulatedSurface,
    * gml:MultiSurface or gml:CompositeSurface in the CityGML file. If
    * the poly dataset has a texture, we specify this with a point array
    * called "tcoords" and a field array with one element called
    * "texture_uri" containing the path to the texture file. If the poly
    * dataset has a app::X3DMaterial we store two fields arrays with 3
    * components and 1 tuple: "diffuse_color" and "specular_color" and
    * one field array with 1 component and 1 tuple: "transparency".
    
    * Top level children of the multiblock dataset have a field array
    * with one element called "element" which contains the CityGML
    * element name for example: dem:ReliefFeature, wtr:WaterBody,
    * grp::CityObjectGroup (forest), veg:SolitaryVegetationObject,
    * brid:Bridge, run:Tunel, tran:Railway, tran:Road, bldg:Building,
    * gen:GenericCityObject, luse:LandUse. These nodes also have a gml_id
    field array.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of the CityGML data file to read.
        """
        ...
    
    def GetLOD(self):
        """
        V.GetLOD() -> int
        C++: virtual int GetLOD()
        
        Specify the level of detail (LOD) to read. Valid values are from
        0 (least detailed) through 4 (most detailed), default value is 3.
        """
        ...
    
    def GetLODMaxValue(self):
        """
        V.GetLODMaxValue() -> int
        C++: virtual int GetLODMaxValue()
        
        Specify the level of detail (LOD) to read. Valid values are from
        0 (least detailed) through 4 (most detailed), default value is 3.
        """
        ...
    
    def GetLODMinValue(self):
        """
        V.GetLODMinValue() -> int
        C++: virtual int GetLODMinValue()
        
        Specify the level of detail (LOD) to read. Valid values are from
        0 (least detailed) through 4 (most detailed), default value is 3.
        """
        ...
    
    def GetNumberOfBuildings(self):
        """
        V.GetNumberOfBuildings() -> int
        C++: virtual int GetNumberOfBuildings()
        
        Number of buildings read from the file. Default is
        numeric_limits::max().
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseTransparencyAsOpacity(self):
        """
        V.GetUseTransparencyAsOpacity() -> int
        C++: virtual int GetUseTransparencyAsOpacity()
        
        Certain input files use app:transparency as opacity. Set this
        field true to show that correctly. The default is false.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCityGMLReader
        C++: vtkCityGMLReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCityGMLReader
        C++: static vtkCityGMLReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of the CityGML data file to read.
        """
        ...
    
    def SetLOD(self, p_int):
        """
        V.SetLOD(int)
        C++: virtual void SetLOD(int _arg)
        
        Specify the level of detail (LOD) to read. Valid values are from
        0 (least detailed) through 4 (most detailed), default value is 3.
        """
        ...
    
    def SetNumberOfBuildings(self, p_int):
        """
        V.SetNumberOfBuildings(int)
        C++: virtual void SetNumberOfBuildings(int _arg)
        
        Number of buildings read from the file. Default is
        numeric_limits::max().
        """
        ...
    
    def SetUseTransparencyAsOpacity(self, p_int):
        """
        V.SetUseTransparencyAsOpacity(int)
        C++: virtual void SetUseTransparencyAsOpacity(int _arg)
        
        Certain input files use app:transparency as opacity. Set this
        field true to show that correctly. The default is false.
        """
        ...
    
    def UseTransparencyAsOpacityOff(self):
        """
        V.UseTransparencyAsOpacityOff()
        C++: virtual void UseTransparencyAsOpacityOff()
        
        Certain input files use app:transparency as opacity. Set this
        field true to show that correctly. The default is false.
        """
        ...
    
    def UseTransparencyAsOpacityOn(self):
        """
        V.UseTransparencyAsOpacityOn()
        C++: virtual void UseTransparencyAsOpacityOn()
        
        Certain input files use app:transparency as opacity. Set this
        field true to show that correctly. The default is false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
