"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkInteractionStyle as __vtkmodules_vtkInteractionStyle
import vtkmodules.vtkRenderingContext2D as __vtkmodules_vtkRenderingContext2D
import vtkmodules.vtkViewsCore as __vtkmodules_vtkViewsCore

class vtkApplyColors(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkApplyColors - apply colors to a data set.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkApplyColors performs a coloring of the dataset using default
    colors, lookup tables, annotations, and/or a selection. The output is
    a four-component vtkUnsignedCharArray containing RGBA tuples for each
    element in the dataset. The first input is the dataset to be colored,
    which may be a vtkTable, vtkGraph subclass, or vtkDataSet subclass.
    The API of this algorithm refers to "points" and "cells". For
    vtkGraph, the "points" refer to the graph vertices and "cells" refer
    to graph edges. For vtkTable, "points" refer to table rows. For
    vtkDataSet subclasses, the meaning is obvious.
    
    The second (optional) input is a vtkAnnotationLayers object, which
    stores a list of annotation layers, with each layer holding a list of
    vtkAnnotation objects. The annotation specifies a subset of data
    along with other properties, including color. For annotations with
    color properties, this algorithm will use the color to color
    elements, using a "top one wins" strategy.
    
    The third (optional) input is a vtkSelection object, meant for
    specifying the current selection. You can control the color of the
    selection.
    
    The algorithm takes two input arrays, specified with
    SetInputArrayToProcess(0, 0, 0,
    vtkDataObject::FIELD_ASSOCIATION_POINTS, name) and
    SetInputArrayToProcess(1, 0, 0,
    vtkDataObject::FIELD_ASSOCIATION_CELLS, name). These set the point
    and cell data arrays to use to color the data with the associated
    lookup table. For vtkGraph, vtkTable inputs, you would use
    FIELD_ASSOCIATION_VERTICES, FIELD_ASSOCIATION_EDGES, or
    FIELD_ASSOCIATION_ROWS as appropriate.
    
    To use the color array generated here, you should do the following:
    
    
     mapper->SetScalarModeToUseCellFieldData();
     mapper->SelectColorArray("vtkApplyColors color");
     mapper->SetScalarVisibility(true);
    
    Colors are assigned with the following priorities:  If an item is
    part of the selection, it is colored with that color. Otherwise, if
    the item is part of an annotation, it is colored
         with the color of the final (top) annotation in the set of
    layers. Otherwise, if the lookup table is used, it is colored using
    the
         lookup table color for the data value of the element. Otherwise
    it will be colored with the default color. 
    
    Note: The opacity of an unselected item is defined by the
    multiplication of default opacity, lookup table opacity, and
    annotation opacity, where opacity is taken as a number from 0 to 1.
    So items will never be more opaque than any of these three opacities.
    Selected items are always given the selection opacity directly.
    """
    def GetCellColorOutputArrayName(self):
        """
        V.GetCellColorOutputArrayName() -> string
        C++: virtual char *GetCellColorOutputArrayName()
        
        The output array name for the cell color RGBA array. Default is "vtkApplyColors
        color".
        """
        ...
    
    def GetCellLookupTable(self):
        """
        V.GetCellLookupTable() -> vtkScalarsToColors
        C++: virtual vtkScalarsToColors *GetCellLookupTable()
        
        The lookup table to use for cell colors. This is only used if
        input array 1 is set and UseCellLookupTable is on.
        """
        ...
    
    def GetDefaultCellColor(self):
        """
        V.GetDefaultCellColor() -> (float, float, float)
        C++: virtual double *GetDefaultCellColor()
        
        The default cell color for all unannotated, unselected elements
        of the data. This is used if UseCellLookupTable is off.
        """
        ...
    
    def GetDefaultCellOpacity(self):
        """
        V.GetDefaultCellOpacity() -> float
        C++: virtual double GetDefaultCellOpacity()
        
        The default cell opacity for all unannotated, unselected elements
        of the data. This is used if UseCellLookupTable is off.
        """
        ...
    
    def GetDefaultPointColor(self):
        """
        V.GetDefaultPointColor() -> (float, float, float)
        C++: virtual double *GetDefaultPointColor()
        
        The default point color for all unannotated, unselected elements
        of the data. This is used if UsePointLookupTable is off.
        """
        ...
    
    def GetDefaultPointOpacity(self):
        """
        V.GetDefaultPointOpacity() -> float
        C++: virtual double GetDefaultPointOpacity()
        
        The default point opacity for all unannotated, unselected
        elements of the data. This is used if UsePointLookupTable is off.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Retrieve the modified time for this filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPointColorOutputArrayName(self):
        """
        V.GetPointColorOutputArrayName() -> string
        C++: virtual char *GetPointColorOutputArrayName()
        
        The output array name for the point color RGBA array. Default is "vtkApplyColors
        color".
        """
        ...
    
    def GetPointLookupTable(self):
        """
        V.GetPointLookupTable() -> vtkScalarsToColors
        C++: virtual vtkScalarsToColors *GetPointLookupTable()
        
        The lookup table to use for point colors. This is only used if
        input array 0 is set and UsePointLookupTable is on.
        """
        ...
    
    def GetScaleCellLookupTable(self):
        """
        V.GetScaleCellLookupTable() -> bool
        C++: virtual bool GetScaleCellLookupTable()
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def GetScalePointLookupTable(self):
        """
        V.GetScalePointLookupTable() -> bool
        C++: virtual bool GetScalePointLookupTable()
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def GetSelectedCellColor(self):
        """
        V.GetSelectedCellColor() -> (float, float, float)
        C++: virtual double *GetSelectedCellColor()
        
        The cell color for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def GetSelectedCellOpacity(self):
        """
        V.GetSelectedCellOpacity() -> float
        C++: virtual double GetSelectedCellOpacity()
        
        The cell opacity for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def GetSelectedPointColor(self):
        """
        V.GetSelectedPointColor() -> (float, float, float)
        C++: virtual double *GetSelectedPointColor()
        
        The point color for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def GetSelectedPointOpacity(self):
        """
        V.GetSelectedPointOpacity() -> float
        C++: virtual double GetSelectedPointOpacity()
        
        The point opacity for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def GetUseCellLookupTable(self):
        """
        V.GetUseCellLookupTable() -> bool
        C++: virtual bool GetUseCellLookupTable()
        
        If on, uses the cell lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def GetUseCurrentAnnotationColor(self):
        """
        V.GetUseCurrentAnnotationColor() -> bool
        C++: virtual bool GetUseCurrentAnnotationColor()
        
        Use the annotation to color the current annotation (i.e. the
        current selection). Otherwise use the selection color attributes
        of this filter.
        """
        ...
    
    def GetUsePointLookupTable(self):
        """
        V.GetUsePointLookupTable() -> bool
        C++: virtual bool GetUsePointLookupTable()
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkApplyColors
        C++: vtkApplyColors *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkApplyColors
        C++: static vtkApplyColors *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScaleCellLookupTableOff(self):
        """
        V.ScaleCellLookupTableOff()
        C++: virtual void ScaleCellLookupTableOff()
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def ScaleCellLookupTableOn(self):
        """
        V.ScaleCellLookupTableOn()
        C++: virtual void ScaleCellLookupTableOn()
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def ScalePointLookupTableOff(self):
        """
        V.ScalePointLookupTableOff()
        C++: virtual void ScalePointLookupTableOff()
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def ScalePointLookupTableOn(self):
        """
        V.ScalePointLookupTableOn()
        C++: virtual void ScalePointLookupTableOn()
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def SetCellColorOutputArrayName(self, string):
        """
        V.SetCellColorOutputArrayName(string)
        C++: virtual void SetCellColorOutputArrayName(const char *_arg)
        
        The output array name for the cell color RGBA array. Default is "vtkApplyColors
        color".
        """
        ...
    
    def SetCellLookupTable(self, vtkScalarsToColors):
        """
        V.SetCellLookupTable(vtkScalarsToColors)
        C++: virtual void SetCellLookupTable(vtkScalarsToColors *lut)
        
        The lookup table to use for cell colors. This is only used if
        input array 1 is set and UseCellLookupTable is on.
        """
        ...
    
    def SetDefaultCellColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetDefaultCellColor(float, float, float)
        C++: virtual void SetDefaultCellColor(double _arg1, double _arg2,
            double _arg3)
        V.SetDefaultCellColor((float, float, float))
        C++: virtual void SetDefaultCellColor(const double _arg[3])
        
        The default cell color for all unannotated, unselected elements
        of the data. This is used if UseCellLookupTable is off.
        """
        ...
    
    def SetDefaultCellOpacity(self, p_float):
        """
        V.SetDefaultCellOpacity(float)
        C++: virtual void SetDefaultCellOpacity(double _arg)
        
        The default cell opacity for all unannotated, unselected elements
        of the data. This is used if UseCellLookupTable is off.
        """
        ...
    
    def SetDefaultPointColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetDefaultPointColor(float, float, float)
        C++: virtual void SetDefaultPointColor(double _arg1, double _arg2,
             double _arg3)
        V.SetDefaultPointColor((float, float, float))
        C++: virtual void SetDefaultPointColor(const double _arg[3])
        
        The default point color for all unannotated, unselected elements
        of the data. This is used if UsePointLookupTable is off.
        """
        ...
    
    def SetDefaultPointOpacity(self, p_float):
        """
        V.SetDefaultPointOpacity(float)
        C++: virtual void SetDefaultPointOpacity(double _arg)
        
        The default point opacity for all unannotated, unselected
        elements of the data. This is used if UsePointLookupTable is off.
        """
        ...
    
    def SetPointColorOutputArrayName(self, string):
        """
        V.SetPointColorOutputArrayName(string)
        C++: virtual void SetPointColorOutputArrayName(const char *_arg)
        
        The output array name for the point color RGBA array. Default is "vtkApplyColors
        color".
        """
        ...
    
    def SetPointLookupTable(self, vtkScalarsToColors):
        """
        V.SetPointLookupTable(vtkScalarsToColors)
        C++: virtual void SetPointLookupTable(vtkScalarsToColors *lut)
        
        The lookup table to use for point colors. This is only used if
        input array 0 is set and UsePointLookupTable is on.
        """
        ...
    
    def SetScaleCellLookupTable(self, bool):
        """
        V.SetScaleCellLookupTable(bool)
        C++: virtual void SetScaleCellLookupTable(bool _arg)
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def SetScalePointLookupTable(self, bool):
        """
        V.SetScalePointLookupTable(bool)
        C++: virtual void SetScalePointLookupTable(bool _arg)
        
        If on, uses the range of the data to scale the lookup table
        range. Otherwise, uses the range defined in the lookup table.
        """
        ...
    
    def SetSelectedCellColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetSelectedCellColor(float, float, float)
        C++: virtual void SetSelectedCellColor(double _arg1, double _arg2,
             double _arg3)
        V.SetSelectedCellColor((float, float, float))
        C++: virtual void SetSelectedCellColor(const double _arg[3])
        
        The cell color for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def SetSelectedCellOpacity(self, p_float):
        """
        V.SetSelectedCellOpacity(float)
        C++: virtual void SetSelectedCellOpacity(double _arg)
        
        The cell opacity for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def SetSelectedPointColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetSelectedPointColor(float, float, float)
        C++: virtual void SetSelectedPointColor(double _arg1,
            double _arg2, double _arg3)
        V.SetSelectedPointColor((float, float, float))
        C++: virtual void SetSelectedPointColor(const double _arg[3])
        
        The point color for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def SetSelectedPointOpacity(self, p_float):
        """
        V.SetSelectedPointOpacity(float)
        C++: virtual void SetSelectedPointOpacity(double _arg)
        
        The point opacity for all selected elements of the data. This is
        used if the selection input is available.
        """
        ...
    
    def SetUseCellLookupTable(self, bool):
        """
        V.SetUseCellLookupTable(bool)
        C++: virtual void SetUseCellLookupTable(bool _arg)
        
        If on, uses the cell lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def SetUseCurrentAnnotationColor(self, bool):
        """
        V.SetUseCurrentAnnotationColor(bool)
        C++: virtual void SetUseCurrentAnnotationColor(bool _arg)
        
        Use the annotation to color the current annotation (i.e. the
        current selection). Otherwise use the selection color attributes
        of this filter.
        """
        ...
    
    def SetUsePointLookupTable(self, bool):
        """
        V.SetUsePointLookupTable(bool)
        C++: virtual void SetUsePointLookupTable(bool _arg)
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def UseCellLookupTableOff(self):
        """
        V.UseCellLookupTableOff()
        C++: virtual void UseCellLookupTableOff()
        
        If on, uses the cell lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def UseCellLookupTableOn(self):
        """
        V.UseCellLookupTableOn()
        C++: virtual void UseCellLookupTableOn()
        
        If on, uses the cell lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def UseCurrentAnnotationColorOff(self):
        """
        V.UseCurrentAnnotationColorOff()
        C++: virtual void UseCurrentAnnotationColorOff()
        
        Use the annotation to color the current annotation (i.e. the
        current selection). Otherwise use the selection color attributes
        of this filter.
        """
        ...
    
    def UseCurrentAnnotationColorOn(self):
        """
        V.UseCurrentAnnotationColorOn()
        C++: virtual void UseCurrentAnnotationColorOn()
        
        Use the annotation to color the current annotation (i.e. the
        current selection). Otherwise use the selection color attributes
        of this filter.
        """
        ...
    
    def UsePointLookupTableOff(self):
        """
        V.UsePointLookupTableOff()
        C++: virtual void UsePointLookupTableOff()
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def UsePointLookupTableOn(self):
        """
        V.UsePointLookupTableOn()
        C++: virtual void UsePointLookupTableOn()
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkApplyIcons(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkApplyIcons - apply icons to a data set.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkApplyIcons performs a iconing of the dataset using default icons,
    lookup tables, annotations, and/or a selection. The output is a
    vtkIntArray containing the icon index for each element in the
    dataset. The first input is the dataset to be iconed, which may be a
    vtkTable, vtkGraph subclass, or vtkDataSet subclass.
    
    The second (optional) input is a vtkAnnotationLayers object, which
    stores a list of annotation layers, with each layer holding a list of
    vtkAnnotation objects. The annotation specifies a subset of data
    along with other properties, including icon. For annotations with
    icon properties, this algorithm will use the icon index of annotated
    elements, using a "top one wins" strategy.
    
    The third (optional) input is a vtkSelection object, meant for
    specifying the current selection. You can control the icon of the
    selection, or whether there is a set of selected icons at a
    particular offset in the icon sheet.
    
    The algorithm takes an input array, specified with
    SetInputArrayToProcess(0, 0, 0,
    vtkDataObject::FIELD_ASSOCIATION_POINTS, name) This sets data arrays
    to use to icon the data with the associated lookup table. For
    vtkGraph and vtkTable inputs, you would use
    FIELD_ASSOCIATION_VERTICES, FIELD_ASSOCIATION_EDGES, or
    FIELD_ASSOCIATION_ROWS as appropriate. The icon array will be added
    to the same set of attributes that the input array came from. If
    there is no input array, the icon array will be applied to the
    attributes associated with the AttributeType parameter.
    
    Icons are assigned with the following priorities:  If an item is part
    of the selection, it is glyphed with that icon. Otherwise, if the
    item is part of an annotation, it is glyphed
         with the icon of the final (top) annotation in the set of
    layers. Otherwise, if a lookup table is used, it is glyphed using the
         lookup table icon for the data value of the element. Otherwise
    it will be glyphed with the default icon.
    """
    def ClearAllIconTypes(self):
        """
        V.ClearAllIconTypes()
        C++: void ClearAllIconTypes()
        
        Edits the lookup table to use for point icons. This is only used
        if input array 0 is set and UsePointLookupTable is on.
        """
        ...
    
    def GetAttributeType(self):
        """
        V.GetAttributeType() -> int
        C++: virtual int GetAttributeType()
        
        The attribute type to append the icon array to, used only if the
        input array is not specified or does not exist. This is set to
        one of the AttributeTypes enum in vtkDataObject (e.g. POINT,
        CELL, VERTEX EDGE, FIELD).
        """
        ...
    
    def GetDefaultIcon(self):
        """
        V.GetDefaultIcon() -> int
        C++: virtual int GetDefaultIcon()
        
        The default point icon for all unannotated, unselected elements
        of the data. This is used if UsePointLookupTable is off.
        """
        ...
    
    def GetIconOutputArrayName(self):
        """
        V.GetIconOutputArrayName() -> string
        C++: virtual char *GetIconOutputArrayName()
        
        The output array name for the point icon index array. Default is "vtkApplyIcons
        icon".
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSelectedIcon(self):
        """
        V.GetSelectedIcon() -> int
        C++: virtual int GetSelectedIcon()
        
        The point icon for all selected elements of the data. This is
        used if the annotation input has a current selection.
        """
        ...
    
    def GetSelectionMode(self):
        """
        V.GetSelectionMode() -> int
        C++: virtual int GetSelectionMode()
        
        Changes the behavior of the icon to use for selected items. 
        SELECTED_ICON uses SelectedIcon as the icon for all selected
        elements. SELECTED_OFFSET uses SelectedIcon as an offset to add
        to all selected elements. ANNOTATION_ICON uses the ICON_INDEX()
        property of the current annotation. IGNORE_SELECTION does not
        change the icon based on the current selection.  The default is
        IGNORE_SELECTION.
        """
        ...
    
    def GetUseLookupTable(self):
        """
        V.GetUseLookupTable() -> bool
        C++: virtual bool GetUseLookupTable()
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkApplyIcons
        C++: vtkApplyIcons *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkApplyIcons
        C++: static vtkApplyIcons *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAttributeType(self, p_int):
        """
        V.SetAttributeType(int)
        C++: virtual void SetAttributeType(int _arg)
        
        The attribute type to append the icon array to, used only if the
        input array is not specified or does not exist. This is set to
        one of the AttributeTypes enum in vtkDataObject (e.g. POINT,
        CELL, VERTEX EDGE, FIELD).
        """
        ...
    
    def SetDefaultIcon(self, p_int):
        """
        V.SetDefaultIcon(int)
        C++: virtual void SetDefaultIcon(int _arg)
        
        The default point icon for all unannotated, unselected elements
        of the data. This is used if UsePointLookupTable is off.
        """
        ...
    
    def SetIconOutputArrayName(self, string):
        """
        V.SetIconOutputArrayName(string)
        C++: virtual void SetIconOutputArrayName(const char *_arg)
        
        The output array name for the point icon index array. Default is "vtkApplyIcons
        icon".
        """
        ...
    
    def SetIconType(self, vtkVariant, p_int):
        """
        V.SetIconType(vtkVariant, int)
        C++: void SetIconType(vtkVariant v, int icon)
        V.SetIconType(float, int)
        C++: void SetIconType(double v, int icon)
        V.SetIconType(string, int)
        C++: void SetIconType(const char *v, int icon)
        
        Edits the lookup table to use for point icons. This is only used
        if input array 0 is set and UsePointLookupTable is on.
        """
        ...
    
    def SetSelectedIcon(self, p_int):
        """
        V.SetSelectedIcon(int)
        C++: virtual void SetSelectedIcon(int _arg)
        
        The point icon for all selected elements of the data. This is
        used if the annotation input has a current selection.
        """
        ...
    
    def SetSelectionMode(self, p_int):
        """
        V.SetSelectionMode(int)
        C++: virtual void SetSelectionMode(int _arg)
        
        Changes the behavior of the icon to use for selected items. 
        SELECTED_ICON uses SelectedIcon as the icon for all selected
        elements. SELECTED_OFFSET uses SelectedIcon as an offset to add
        to all selected elements. ANNOTATION_ICON uses the ICON_INDEX()
        property of the current annotation. IGNORE_SELECTION does not
        change the icon based on the current selection.  The default is
        IGNORE_SELECTION.
        """
        ...
    
    def SetSelectionModeToAnnotationIcon(self):
        """
        V.SetSelectionModeToAnnotationIcon()
        C++: virtual void SetSelectionModeToAnnotationIcon()
        
        Changes the behavior of the icon to use for selected items. 
        SELECTED_ICON uses SelectedIcon as the icon for all selected
        elements. SELECTED_OFFSET uses SelectedIcon as an offset to add
        to all selected elements. ANNOTATION_ICON uses the ICON_INDEX()
        property of the current annotation. IGNORE_SELECTION does not
        change the icon based on the current selection.  The default is
        IGNORE_SELECTION.
        """
        ...
    
    def SetSelectionModeToIgnoreSelection(self):
        """
        V.SetSelectionModeToIgnoreSelection()
        C++: virtual void SetSelectionModeToIgnoreSelection()
        
        Changes the behavior of the icon to use for selected items. 
        SELECTED_ICON uses SelectedIcon as the icon for all selected
        elements. SELECTED_OFFSET uses SelectedIcon as an offset to add
        to all selected elements. ANNOTATION_ICON uses the ICON_INDEX()
        property of the current annotation. IGNORE_SELECTION does not
        change the icon based on the current selection.  The default is
        IGNORE_SELECTION.
        """
        ...
    
    def SetSelectionModeToSelectedIcon(self):
        """
        V.SetSelectionModeToSelectedIcon()
        C++: virtual void SetSelectionModeToSelectedIcon()
        
        Changes the behavior of the icon to use for selected items. 
        SELECTED_ICON uses SelectedIcon as the icon for all selected
        elements. SELECTED_OFFSET uses SelectedIcon as an offset to add
        to all selected elements. ANNOTATION_ICON uses the ICON_INDEX()
        property of the current annotation. IGNORE_SELECTION does not
        change the icon based on the current selection.  The default is
        IGNORE_SELECTION.
        """
        ...
    
    def SetSelectionModeToSelectedOffset(self):
        """
        V.SetSelectionModeToSelectedOffset()
        C++: virtual void SetSelectionModeToSelectedOffset()
        
        Changes the behavior of the icon to use for selected items. 
        SELECTED_ICON uses SelectedIcon as the icon for all selected
        elements. SELECTED_OFFSET uses SelectedIcon as an offset to add
        to all selected elements. ANNOTATION_ICON uses the ICON_INDEX()
        property of the current annotation. IGNORE_SELECTION does not
        change the icon based on the current selection.  The default is
        IGNORE_SELECTION.
        """
        ...
    
    def SetUseLookupTable(self, bool):
        """
        V.SetUseLookupTable(bool)
        C++: virtual void SetUseLookupTable(bool _arg)
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def UseLookupTableOff(self):
        """
        V.UseLookupTableOff()
        C++: virtual void UseLookupTableOff()
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def UseLookupTableOn(self):
        """
        V.UseLookupTableOn()
        C++: virtual void UseLookupTableOn()
        
        If on, uses the point lookup table to set the colors of
        unannotated, unselected elements of the data.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ANNOTATION_ICON = ...
    IGNORE_SELECTION = ...
    SELECTED_ICON = ...
    SELECTED_OFFSET = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDendrogramItem(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkDendrogramItem - A 2D graphics item for rendering a tree as a
    dendrogram
    
    Superclass: vtkContextItem
    
    Draw a tree as a dendrogram The input tree's vertex data must contain
    at least two arrays. The first required array is a vtkStringArray
    called "node name". This array is used to label the leaf nodes of the
    tree. The second required array is a scalar array called "node
    weight". This array is used by vtkTreeLayoutStrategy to set any
    particular node's distance from the root of the tree.
    
    The vtkNewickTreeReader automatically initializes both of these
    required arrays in its output tree.
    
    .SEE ALSO vtkTree vtkNewickTreeReader
    """
    def CollapseToNumberOfLeafNodes(self, p_int):
        """
        V.CollapseToNumberOfLeafNodes(int)
        C++: void CollapseToNumberOfLeafNodes(unsigned int n)
        
        Collapse subtrees until there are only n leaf nodes left in the
        tree. The leaf nodes that remain are those that are closest to
        the root. Any subtrees that were collapsed prior to this function
        being called may be re-expanded.
        """
        ...
    
    def ComputeLabelWidth(self, vtkContext2D):
        """
        V.ComputeLabelWidth(vtkContext2D)
        C++: void ComputeLabelWidth(vtkContext2D *painter)
        
        Compute the width of the longest leaf node label.
        """
        ...
    
    def DisplayNumberOfCollapsedLeafNodesOff(self):
        """
        V.DisplayNumberOfCollapsedLeafNodesOff()
        C++: virtual void DisplayNumberOfCollapsedLeafNodesOff()
        
        Get/set whether or not the number of collapsed leaf nodes should
        be written inside the triangle representing a collapsed subtree. 
        Default is true.
        """
        ...
    
    def DisplayNumberOfCollapsedLeafNodesOn(self):
        """
        V.DisplayNumberOfCollapsedLeafNodesOn()
        C++: virtual void DisplayNumberOfCollapsedLeafNodesOn()
        
        Get/set whether or not the number of collapsed leaf nodes should
        be written inside the triangle representing a collapsed subtree. 
        Default is true.
        """
        ...
    
    def DrawLabelsOff(self):
        """
        V.DrawLabelsOff()
        C++: virtual void DrawLabelsOff()
        
        Get/Set whether or not leaf nodes should be labeled by this
        class. Default is true.
        """
        ...
    
    def DrawLabelsOn(self):
        """
        V.DrawLabelsOn()
        C++: virtual void DrawLabelsOn()
        
        Get/Set whether or not leaf nodes should be labeled by this
        class. Default is true.
        """
        ...
    
    def ExtendLeafNodesOff(self):
        """
        V.ExtendLeafNodesOff()
        C++: virtual void ExtendLeafNodesOff()
        
        Get/set whether or not leaf nodes should be extended so that they
        all line up vertically.  The default is to NOT extend leaf nodes.
         When extending leaf nodes, the extra length is drawn in grey so
        as to distinguish it from the actual length of the leaf node.
        """
        ...
    
    def ExtendLeafNodesOn(self):
        """
        V.ExtendLeafNodesOn()
        C++: virtual void ExtendLeafNodesOn()
        
        Get/set whether or not leaf nodes should be extended so that they
        all line up vertically.  The default is to NOT extend leaf nodes.
         When extending leaf nodes, the extra length is drawn in grey so
        as to distinguish it from the actual length of the leaf node.
        """
        ...
    
    def GetAngleForOrientation(self, p_int):
        """
        V.GetAngleForOrientation(int) -> float
        C++: double GetAngleForOrientation(int orientation)
        
        Get the rotation angle (in degrees) that corresponds to the given
        tree orientation.  For the default orientation (LEFT_TO_RIGHT),
        this is 90 degrees.
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: virtual void GetBounds(double bounds[4])
        
        Get the bounds for this item as (Xmin,Xmax,Ymin,Ymax). These
        bounds are only guaranteed to be accurate after Paint() or
        PrepareToPaint() has been called.
        """
        ...
    
    def GetDisplayNumberOfCollapsedLeafNodes(self):
        """
        V.GetDisplayNumberOfCollapsedLeafNodes() -> bool
        C++: virtual bool GetDisplayNumberOfCollapsedLeafNodes()
        
        Get/set whether or not the number of collapsed leaf nodes should
        be written inside the triangle representing a collapsed subtree. 
        Default is true.
        """
        ...
    
    def GetDistanceArrayName(self):
        """
        V.GetDistanceArrayName() -> string
        C++: virtual vtkStdString GetDistanceArrayName()
        
        Get/Set the name of the array that specifies the distance of each
        vertex from the root (NOT the vertex's parent).  This array
        should be a part of the input tree's VertexData.  By default,
        this value is "node weight", which is the name of the array
        created by vtkNewickTreeReader.
        """
        ...
    
    def GetDrawLabels(self):
        """
        V.GetDrawLabels() -> bool
        C++: virtual bool GetDrawLabels()
        
        Get/Set whether or not leaf nodes should be labeled by this
        class. Default is true.
        """
        ...
    
    def GetExtendLeafNodes(self):
        """
        V.GetExtendLeafNodes() -> bool
        C++: virtual bool GetExtendLeafNodes()
        
        Get/set whether or not leaf nodes should be extended so that they
        all line up vertically.  The default is to NOT extend leaf nodes.
         When extending leaf nodes, the extra length is drawn in grey so
        as to distinguish it from the actual length of the leaf node.
        """
        ...
    
    def GetLabelWidth(self):
        """
        V.GetLabelWidth() -> float
        C++: float GetLabelWidth()
        
        Get the width of the longest leaf node label.
        """
        ...
    
    def GetLeafSpacing(self):
        """
        V.GetLeafSpacing() -> float
        C++: virtual double GetLeafSpacing()
        
        Get/Set the spacing between the leaf nodes in our dendrogram.
        Default is 18 pixels.
        """
        ...
    
    def GetLineWidth(self):
        """
        V.GetLineWidth() -> float
        C++: virtual float GetLineWidth()
        
        Get/Set how wide the edges of this dendrogram should be.  Default
        is one pixel.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: int GetOrientation()
        
        Get the current tree orientation.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float)
        C++: virtual float *GetPosition()
        
        Get position of the dendrogram.
        """
        ...
    
    def GetPositionOfVertex(self, string, p_float=..., p_float=...):
        """
        V.GetPositionOfVertex(string, [float, float]) -> bool
        C++: bool GetPositionOfVertex(const std::string &vertexName,
            double position[2])
        
        Find the position of the vertex with the specified name.  Store
        this information in the passed array.  Returns true if the vertex
        was found, false otherwise.
        """
        ...
    
    def GetPositionVector(self):
        """
        V.GetPositionVector() -> vtkVector2f
        C++: vtkVector2f GetPositionVector()
        
        Get position of the dendrogram.
        """
        ...
    
    def GetPrunedTree(self):
        """
        V.GetPrunedTree() -> vtkTree
        C++: vtkTree *GetPrunedTree()
        
        Get the collapsed tree
        """
        ...
    
    def GetTextAngleForOrientation(self, p_int):
        """
        V.GetTextAngleForOrientation(int) -> float
        C++: double GetTextAngleForOrientation(int orientation)
        
        Get the angle that vertex labels should be rotated for the
        corresponding tree orientation.  For the default orientation
        (LEFT_TO_RIGHT), this is 0 degrees.
        """
        ...
    
    def GetTree(self):
        """
        V.GetTree() -> vtkTree
        C++: vtkTree *GetTree()
        
        Get the tree that this item draws.
        """
        ...
    
    def GetVertexNameArrayName(self):
        """
        V.GetVertexNameArrayName() -> string
        C++: virtual vtkStdString GetVertexNameArrayName()
        
        Get/Set the name of a vtkStringArray that specifies the names of
        the vertices of the input tree.  This array should be a part of
        the input tree's VertexData.  By default, this value is "node
        name", which is the name of the array created by
        vtkNewickTreeReader.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the transform is interactive, false otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseDoubleClickEvent(self, vtkContextMouseEvent):
        """
        V.MouseDoubleClickEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseDoubleClickEvent(const vtkContextMouseEvent &event)
             override;
        
        Collapse or expand a subtree when the user double clicks on an
        internal node.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDendrogramItem
        C++: vtkDendrogramItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paints the input tree as a dendrogram.
        """
        ...
    
    def PrepareToPaint(self, vtkContext2D):
        """
        V.PrepareToPaint(vtkContext2D)
        C++: void PrepareToPaint(vtkContext2D *painter)
        
        This function calls RebuildBuffers() if necessary. Once
        PrepareToPaint() has been called, GetBounds() is guaranteed to
        provide useful information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDendrogramItem
        C++: static vtkDendrogramItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColorArray(self, string):
        """
        V.SetColorArray(string)
        C++: void SetColorArray(const char *arrayName)
        
        Indicate which array within the Tree's VertexData should be used
        to color the tree.  The specified array must be a vtkDoubleArray.
        By default, the tree will be drawn in black.
        """
        ...
    
    def SetDisplayNumberOfCollapsedLeafNodes(self, bool):
        """
        V.SetDisplayNumberOfCollapsedLeafNodes(bool)
        C++: virtual void SetDisplayNumberOfCollapsedLeafNodes(bool _arg)
        
        Get/set whether or not the number of collapsed leaf nodes should
        be written inside the triangle representing a collapsed subtree. 
        Default is true.
        """
        ...
    
    def SetDistanceArrayName(self, string):
        """
        V.SetDistanceArrayName(string)
        C++: virtual void SetDistanceArrayName(vtkStdString _arg)
        
        Get/Set the name of the array that specifies the distance of each
        vertex from the root (NOT the vertex's parent).  This array
        should be a part of the input tree's VertexData.  By default,
        this value is "node weight", which is the name of the array
        created by vtkNewickTreeReader.
        """
        ...
    
    def SetDrawLabels(self, bool):
        """
        V.SetDrawLabels(bool)
        C++: virtual void SetDrawLabels(bool _arg)
        
        Get/Set whether or not leaf nodes should be labeled by this
        class. Default is true.
        """
        ...
    
    def SetExtendLeafNodes(self, bool):
        """
        V.SetExtendLeafNodes(bool)
        C++: virtual void SetExtendLeafNodes(bool _arg)
        
        Get/set whether or not leaf nodes should be extended so that they
        all line up vertically.  The default is to NOT extend leaf nodes.
         When extending leaf nodes, the extra length is drawn in grey so
        as to distinguish it from the actual length of the leaf node.
        """
        ...
    
    def SetLeafSpacing(self, p_float):
        """
        V.SetLeafSpacing(float)
        C++: virtual void SetLeafSpacing(double _arg)
        
        Get/Set the spacing between the leaf nodes in our dendrogram.
        Default is 18 pixels.
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: virtual void SetLineWidth(float _arg)
        
        Get/Set how wide the edges of this dendrogram should be.  Default
        is one pixel.
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: void SetOrientation(int orientation)
        
        Set which way the tree should face within the visualization.  The
        default is for the tree to be drawn left to right.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1):
        """
        V.SetPosition(float, float)
        C++: virtual void SetPosition(float _arg1, float _arg2)
        V.SetPosition((float, float))
        C++: void SetPosition(const float _arg[2])
        V.SetPosition(vtkVector2f)
        C++: void SetPosition(const vtkVector2f &pos)
        
        Set the position of the dendrogram.
        """
        ...
    
    def SetTree(self, vtkTree):
        """
        V.SetTree(vtkTree)
        C++: virtual void SetTree(vtkTree *tree)
        
        Set the tree that this item draws.  Note that this tree's vertex
        data must contain a vtkStringArray called "node name".  The
        vtkNewickTreeReader automatically creates this required array for
        you.
        """
        ...
    
    def SetVertexNameArrayName(self, string):
        """
        V.SetVertexNameArrayName(string)
        C++: virtual void SetVertexNameArrayName(vtkStdString _arg)
        
        Get/Set the name of a vtkStringArray that specifies the names of
        the vertices of the input tree.  This array should be a part of
        the input tree's VertexData.  By default, this value is "node
        name", which is the name of the array created by
        vtkNewickTreeReader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DOWN_TO_UP = ...
    LEFT_TO_RIGHT = ...
    RIGHT_TO_LEFT = ...
    UP_TO_DOWN = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGraphItem(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkGraphItem - A 2D graphics item for rendering a graph.
    
    Superclass: vtkContextItem
    
    This item draws a graph as a part of a vtkContextScene. This simple
    class has minimal state and delegates the determination of visual
    vertex and edge properties like color, size, width, etc. to a set of
    virtual functions. To influence the rendering of the graph, subclass
    this item and override the property functions you wish to customize.
    """
    def GetGraph(self):
        """
        V.GetGraph() -> vtkGraph
        C++: virtual vtkGraph *GetGraph()
        
        The graph that this item draws.
        """
        ...
    
    def GetLayout(self):
        """
        V.GetLayout() -> vtkIncrementalForceLayout
        C++: virtual vtkIncrementalForceLayout *GetLayout()
        
        Exposes the incremental graph layout for updating parameters.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphItem
        C++: vtkGraphItem *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphItem
        C++: static vtkGraphItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGraph(self, vtkGraph):
        """
        V.SetGraph(vtkGraph)
        C++: virtual void SetGraph(vtkGraph *graph)
        
        The graph that this item draws.
        """
        ...
    
    def StartLayoutAnimation(self, vtkRenderWindowInteractor):
        """
        V.StartLayoutAnimation(vtkRenderWindowInteractor)
        C++: virtual void StartLayoutAnimation(
            vtkRenderWindowInteractor *interactor)
        
        Begins or ends the layout animation.
        """
        ...
    
    def StopLayoutAnimation(self):
        """
        V.StopLayoutAnimation()
        C++: virtual void StopLayoutAnimation()
        
        Begins or ends the layout animation.
        """
        ...
    
    def UpdateLayout(self):
        """
        V.UpdateLayout()
        C++: virtual void UpdateLayout()
        
        Incrementally updates the graph layout.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRenderView(__vtkmodules_vtkViewsCore.vtkRenderViewBase):
    """
    vtkRenderView - A view containing a renderer.
    
    Superclass: vtkRenderViewBase
    
    vtkRenderView is a view which contains a vtkRenderer.  You may add
    vtkActors directly to the renderer, or add certain
    vtkDataRepresentation subclasses to the renderer.  The render view
    supports drag selection with the mouse to select cells.
    
    This class is also the parent class for any more specialized view
    which uses a renderer.
    """
    def AddLabels(self, vtkAlgorithmOutput):
        """
        V.AddLabels(vtkAlgorithmOutput)
        C++: virtual void AddLabels(vtkAlgorithmOutput *conn)
        
        Add labels from an input connection with an associated text
        property. The output must be a vtkLabelHierarchy (normally the
        output of vtkPointSetToLabelHierarchy).
        """
        ...
    
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: void ApplyViewTheme(vtkViewTheme *theme) override;
        
        Applies a view theme to this view.
        """
        ...
    
    def DisplayHoverTextOff(self):
        """
        V.DisplayHoverTextOff()
        C++: virtual void DisplayHoverTextOff()
        
        Whether the view should display hover text.
        """
        ...
    
    def DisplayHoverTextOn(self):
        """
        V.DisplayHoverTextOn()
        C++: virtual void DisplayHoverTextOn()
        
        Whether the view should display hover text.
        """
        ...
    
    def GetDisplayHoverText(self):
        """
        V.GetDisplayHoverText() -> bool
        C++: virtual bool GetDisplayHoverText()
        
        Whether the view should display hover text.
        """
        ...
    
    def GetDisplaySize(self):
        """
        V.GetDisplaySize() -> (int, ...)
        C++: int *GetDisplaySize()
        V.GetDisplaySize(int, int)
        C++: void GetDisplaySize(int &dsx, int &dsy)
        
        Set the display size of the icon (which may be different from the
        icon size). By default, if this value is not set, the IconSize is
        used.
        """
        ...
    
    def GetIconSize(self):
        """
        V.GetIconSize() -> (int, int)
        C++: virtual int *GetIconSize()
        
        Set the size of each icon in the icon texture.
        """
        ...
    
    def GetIconTexture(self):
        """
        V.GetIconTexture() -> vtkTexture
        C++: virtual vtkTexture *GetIconTexture()
        
        Set the icon sheet to use for rendering icons.
        """
        ...
    
    def GetInteractionMode(self):
        """
        V.GetInteractionMode() -> int
        C++: virtual int GetInteractionMode()
        """
        ...
    
    def GetInteractorStyle(self):
        """
        V.GetInteractorStyle() -> vtkInteractorObserver
        C++: virtual vtkInteractorObserver *GetInteractorStyle()
        
        Get the interactor style associated with the render view.
        """
        ...
    
    def GetLabelPlacementMode(self):
        """
        V.GetLabelPlacementMode() -> int
        C++: virtual int GetLabelPlacementMode()
        
        Label placement mode. NO_OVERLAP uses vtkLabelPlacementMapper,
        which has a faster startup time and works with 2D or 3D labels.
        ALL displays all labels (Warning: This may cause incredibly slow
        render times on datasets with more than a few hundred labels).
        """
        ...
    
    def GetLabelRenderMode(self):
        """
        V.GetLabelRenderMode() -> int
        C++: virtual int GetLabelRenderMode()
        
        Label render mode. FREETYPE uses the freetype label rendering. QT
        uses more advanced Qt-based label rendering.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderOnMouseMove(self):
        """
        V.GetRenderOnMouseMove() -> bool
        C++: virtual bool GetRenderOnMouseMove()
        
        Whether to render on every mouse move.
        """
        ...
    
    def GetSelectionMode(self):
        """
        V.GetSelectionMode() -> int
        C++: virtual int GetSelectionMode()
        
        Sets the selection mode for the render view. SURFACE selection
        uses vtkHardwareSelector to perform a selection of visible cells.
        FRUSTUM selection just creates a view frustum selection, which
        will select everything in the frustum.
        """
        ...
    
    def GetSelectionModeMaxValue(self):
        """
        V.GetSelectionModeMaxValue() -> int
        C++: virtual int GetSelectionModeMaxValue()
        
        Sets the selection mode for the render view. SURFACE selection
        uses vtkHardwareSelector to perform a selection of visible cells.
        FRUSTUM selection just creates a view frustum selection, which
        will select everything in the frustum.
        """
        ...
    
    def GetSelectionModeMinValue(self):
        """
        V.GetSelectionModeMinValue() -> int
        C++: virtual int GetSelectionModeMinValue()
        
        Sets the selection mode for the render view. SURFACE selection
        uses vtkHardwareSelector to perform a selection of visible cells.
        FRUSTUM selection just creates a view frustum selection, which
        will select everything in the frustum.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkAbstractTransform
        C++: virtual vtkAbstractTransform *GetTransform()
        
        Set the view's transform. All vtkRenderedRepresentations added to
        this view should use this transform.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderView
        C++: vtkRenderView *NewInstance()
        """
        ...
    
    def RemoveLabels(self, vtkAlgorithmOutput):
        """
        V.RemoveLabels(vtkAlgorithmOutput)
        C++: virtual void RemoveLabels(vtkAlgorithmOutput *conn)
        
        Remove labels from an input connection.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: void Render() override;
        
        Updates the representations, then calls Render() on the render
        window associated with this view.
        """
        ...
    
    def RenderOnMouseMoveOff(self):
        """
        V.RenderOnMouseMoveOff()
        C++: virtual void RenderOnMouseMoveOff()
        
        Whether to render on every mouse move.
        """
        ...
    
    def RenderOnMouseMoveOn(self):
        """
        V.RenderOnMouseMoveOn()
        C++: virtual void RenderOnMouseMoveOn()
        
        Whether to render on every mouse move.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderView
        C++: static vtkRenderView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDisplayHoverText(self, bool):
        """
        V.SetDisplayHoverText(bool)
        C++: virtual void SetDisplayHoverText(bool b)
        
        Whether the view should display hover text.
        """
        ...
    
    def SetDisplaySize(self, p_int, p_int_1):
        """
        V.SetDisplaySize(int, int)
        C++: virtual void SetDisplaySize(int _arg1, int _arg2)
        V.SetDisplaySize((int, int))
        C++: void SetDisplaySize(const int _arg[2])
        
        Set the display size of the icon (which may be different from the
        icon size). By default, if this value is not set, the IconSize is
        used.
        """
        ...
    
    def SetIconSize(self, p_int, p_int_1):
        """
        V.SetIconSize(int, int)
        C++: virtual void SetIconSize(int _arg1, int _arg2)
        V.SetIconSize((int, int))
        C++: void SetIconSize(const int _arg[2])
        
        Set the size of each icon in the icon texture.
        """
        ...
    
    def SetIconTexture(self, vtkTexture):
        """
        V.SetIconTexture(vtkTexture)
        C++: virtual void SetIconTexture(vtkTexture *texture)
        
        Set the icon sheet to use for rendering icons.
        """
        ...
    
    def SetInteractionMode(self, p_int):
        """
        V.SetInteractionMode(int)
        C++: void SetInteractionMode(int mode)
        """
        ...
    
    def SetInteractionModeTo2D(self):
        """
        V.SetInteractionModeTo2D()
        C++: virtual void SetInteractionModeTo2D()
        
        Set the interaction mode for the view. Choices are:
        vtkRenderView::INTERACTION_MODE_2D - 2D interactor
        vtkRenderView::INTERACTION_MODE_3D - 3D interactor
        """
        ...
    
    def SetInteractionModeTo3D(self):
        """
        V.SetInteractionModeTo3D()
        C++: virtual void SetInteractionModeTo3D()
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *interactor)
            override;
        
        The render window interactor. Note that this requires special
        handling in order to do correctly - see the notes in the detailed
        description of vtkRenderViewBase.
        """
        ...
    
    def SetInteractorStyle(self, vtkInteractorObserver):
        """
        V.SetInteractorStyle(vtkInteractorObserver)
        C++: virtual void SetInteractorStyle(vtkInteractorObserver *style)
        
        The interactor style associated with the render view.
        """
        ...
    
    def SetLabelPlacementMode(self, p_int):
        """
        V.SetLabelPlacementMode(int)
        C++: virtual void SetLabelPlacementMode(int mode)
        
        Label placement mode. NO_OVERLAP uses vtkLabelPlacementMapper,
        which has a faster startup time and works with 2D or 3D labels.
        ALL displays all labels (Warning: This may cause incredibly slow
        render times on datasets with more than a few hundred labels).
        """
        ...
    
    def SetLabelPlacementModeToAll(self):
        """
        V.SetLabelPlacementModeToAll()
        C++: virtual void SetLabelPlacementModeToAll()
        
        Label placement mode. NO_OVERLAP uses vtkLabelPlacementMapper,
        which has a faster startup time and works with 2D or 3D labels.
        ALL displays all labels (Warning: This may cause incredibly slow
        render times on datasets with more than a few hundred labels).
        """
        ...
    
    def SetLabelPlacementModeToNoOverlap(self):
        """
        V.SetLabelPlacementModeToNoOverlap()
        C++: virtual void SetLabelPlacementModeToNoOverlap()
        
        Label placement mode. NO_OVERLAP uses vtkLabelPlacementMapper,
        which has a faster startup time and works with 2D or 3D labels.
        ALL displays all labels (Warning: This may cause incredibly slow
        render times on datasets with more than a few hundred labels).
        """
        ...
    
    def SetLabelRenderMode(self, p_int):
        """
        V.SetLabelRenderMode(int)
        C++: virtual void SetLabelRenderMode(int mode)
        
        Label render mode. FREETYPE uses the freetype label rendering. QT
        uses more advanced Qt-based label rendering.
        """
        ...
    
    def SetLabelRenderModeToFreetype(self):
        """
        V.SetLabelRenderModeToFreetype()
        C++: virtual void SetLabelRenderModeToFreetype()
        
        Label render mode. FREETYPE uses the freetype label rendering. QT
        uses more advanced Qt-based label rendering.
        """
        ...
    
    def SetLabelRenderModeToQt(self):
        """
        V.SetLabelRenderModeToQt()
        C++: virtual void SetLabelRenderModeToQt()
        
        Label render mode. FREETYPE uses the freetype label rendering. QT
        uses more advanced Qt-based label rendering.
        """
        ...
    
    def SetRenderOnMouseMove(self, bool):
        """
        V.SetRenderOnMouseMove(bool)
        C++: void SetRenderOnMouseMove(bool b)
        
        Whether to render on every mouse move.
        """
        ...
    
    def SetRenderWindow(self, vtkRenderWindow):
        """
        V.SetRenderWindow(vtkRenderWindow)
        C++: void SetRenderWindow(vtkRenderWindow *win) override;
        
        Set the render window for this view. Note that this requires
        special handling in order to do correctly - see the notes in the
        detailed description of vtkRenderViewBase.
        """
        ...
    
    def SetSelectionMode(self, p_int):
        """
        V.SetSelectionMode(int)
        C++: virtual void SetSelectionMode(int _arg)
        
        Sets the selection mode for the render view. SURFACE selection
        uses vtkHardwareSelector to perform a selection of visible cells.
        FRUSTUM selection just creates a view frustum selection, which
        will select everything in the frustum.
        """
        ...
    
    def SetSelectionModeToFrustum(self):
        """
        V.SetSelectionModeToFrustum()
        C++: void SetSelectionModeToFrustum()
        
        Sets the selection mode for the render view. SURFACE selection
        uses vtkHardwareSelector to perform a selection of visible cells.
        FRUSTUM selection just creates a view frustum selection, which
        will select everything in the frustum.
        """
        ...
    
    def SetSelectionModeToSurface(self):
        """
        V.SetSelectionModeToSurface()
        C++: void SetSelectionModeToSurface()
        
        Sets the selection mode for the render view. SURFACE selection
        uses vtkHardwareSelector to perform a selection of visible cells.
        FRUSTUM selection just creates a view frustum selection, which
        will select everything in the frustum.
        """
        ...
    
    def SetTransform(self, vtkAbstractTransform):
        """
        V.SetTransform(vtkAbstractTransform)
        C++: virtual void SetTransform(vtkAbstractTransform *transform)
        
        Set the view's transform. All vtkRenderedRepresentations added to
        this view should use this transform.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ALL = ...
    FREETYPE = ...
    FRUSTUM = ...
    INTERACTION_MODE_2D = ...
    INTERACTION_MODE_3D = ...
    INTERACTION_MODE_UNKNOWN = ...
    NO_OVERLAP = ...
    QT = ...
    SURFACE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGraphLayoutView(vtkRenderView):
    """
    vtkGraphLayoutView - Lays out and displays a graph
    
    Superclass: vtkRenderView
    
    vtkGraphLayoutView performs graph layout and displays a vtkGraph. You
    may color and label the vertices and edges using fields in the graph.
    If coordinates are already assigned to the graph vertices in your
    graph, set the layout strategy to PassThrough in this view. The
    default layout is Fast2D which is fast but not that good, for better
    layout set the layout to Simple2D or ForceDirected. There are also
    tree and circle layout strategies. :)
    
    .SEE ALSO vtkFast2DLayoutStrategy vtkSimple2DLayoutStrategy
    vtkForceDirectedLayoutStrategy
    
    @par Thanks: Thanks a bunch to the holographic unfolding pattern.
    """
    def AddIconType(self, string, p_int):
        """
        V.AddIconType(string, int)
        C++: void AddIconType(const char *type, int index)
        
        Associate the icon at index "index" in the vtkTexture to all
        vertices containing "type" as a value in the vertex attribute
        array specified by IconArrayName.
        """
        ...
    
    def ClearIconTypes(self):
        """
        V.ClearIconTypes()
        C++: void ClearIconTypes()
        
        Clear all icon mappings.
        """
        ...
    
    def ColorEdgesOff(self):
        """
        V.ColorEdgesOff()
        C++: virtual void ColorEdgesOff()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def ColorEdgesOn(self):
        """
        V.ColorEdgesOn()
        C++: virtual void ColorEdgesOn()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def ColorVerticesOff(self):
        """
        V.ColorVerticesOff()
        C++: virtual void ColorVerticesOff()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def ColorVerticesOn(self):
        """
        V.ColorVerticesOn()
        C++: virtual void ColorVerticesOn()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def EdgeLabelVisibilityOff(self):
        """
        V.EdgeLabelVisibilityOff()
        C++: virtual void EdgeLabelVisibilityOff()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def EdgeLabelVisibilityOn(self):
        """
        V.EdgeLabelVisibilityOn()
        C++: virtual void EdgeLabelVisibilityOn()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def EdgeSelectionOff(self):
        """
        V.EdgeSelectionOff()
        C++: virtual void EdgeSelectionOff()
        
        Whether edges are selectable. Default is on.
        """
        ...
    
    def EdgeSelectionOn(self):
        """
        V.EdgeSelectionOn()
        C++: virtual void EdgeSelectionOn()
        
        Whether edges are selectable. Default is on.
        """
        ...
    
    def EdgeVisibilityOff(self):
        """
        V.EdgeVisibilityOff()
        C++: virtual void EdgeVisibilityOff()
        
        Whether to show the edges at all. Default is on
        """
        ...
    
    def EdgeVisibilityOn(self):
        """
        V.EdgeVisibilityOn()
        C++: virtual void EdgeVisibilityOn()
        
        Whether to show the edges at all. Default is on
        """
        ...
    
    def GetColorEdges(self):
        """
        V.GetColorEdges() -> bool
        C++: bool GetColorEdges()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetColorVertices(self):
        """
        V.GetColorVertices() -> bool
        C++: bool GetColorVertices()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def GetEdgeColorArrayName(self):
        """
        V.GetEdgeColorArrayName() -> string
        C++: const char *GetEdgeColorArrayName()
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def GetEdgeLabelArrayName(self):
        """
        V.GetEdgeLabelArrayName() -> string
        C++: const char *GetEdgeLabelArrayName()
        
        The array to use for edge labeling.  Default is "LabelText".
        """
        ...
    
    def GetEdgeLabelFontSize(self):
        """
        V.GetEdgeLabelFontSize() -> int
        C++: virtual int GetEdgeLabelFontSize()
        
        The size of the font used for edge labeling
        """
        ...
    
    def GetEdgeLabelVisibility(self):
        """
        V.GetEdgeLabelVisibility() -> bool
        C++: bool GetEdgeLabelVisibility()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GetEdgeLayoutStrategy(self):
        """
        V.GetEdgeLayoutStrategy() -> vtkEdgeLayoutStrategy
        C++: vtkEdgeLayoutStrategy *GetEdgeLayoutStrategy()
        
        The layout strategy to use when performing the edge layout. This
        signature allows an application to create a layout object
        directly and simply set the pointer through this method.
        """
        ...
    
    def GetEdgeLayoutStrategyName(self):
        """
        V.GetEdgeLayoutStrategyName() -> string
        C++: const char *GetEdgeLayoutStrategyName()
        
        The layout strategy to use when performing the edge layout. The
        possible strings are: "Arc Parallel"   - Arc parallel edges and
        self loops. "Pass Through"   - Use edge routes assigned to the
        input. Default is "Arc Parallel".
        """
        ...
    
    def GetEdgeScalarBarVisibility(self):
        """
        V.GetEdgeScalarBarVisibility() -> bool
        C++: bool GetEdgeScalarBarVisibility()
        
        Whether the scalar bar for edges is visible.  Default is off.
        """
        ...
    
    def GetEdgeSelection(self):
        """
        V.GetEdgeSelection() -> bool
        C++: bool GetEdgeSelection()
        
        Whether edges are selectable. Default is on.
        """
        ...
    
    def GetEdgeVisibility(self):
        """
        V.GetEdgeVisibility() -> bool
        C++: bool GetEdgeVisibility()
        
        Whether to show the edges at all. Default is on
        """
        ...
    
    def GetEnabledEdgesArrayName(self):
        """
        V.GetEnabledEdgesArrayName() -> string
        C++: const char *GetEnabledEdgesArrayName()
        
        The array to use for coloring edges.
        """
        ...
    
    def GetEnabledVerticesArrayName(self):
        """
        V.GetEnabledVerticesArrayName() -> string
        C++: const char *GetEnabledVerticesArrayName()
        
        The array to use for coloring vertices.
        """
        ...
    
    def GetEnableEdgesByArray(self):
        """
        V.GetEnableEdgesByArray() -> int
        C++: int GetEnableEdgesByArray()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetEnableVerticesByArray(self):
        """
        V.GetEnableVerticesByArray() -> int
        C++: int GetEnableVerticesByArray()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def GetGlyphType(self):
        """
        V.GetGlyphType() -> int
        C++: int GetGlyphType()
        
        The type of glyph to use for the vertices
        """
        ...
    
    def GetHideEdgeLabelsOnInteraction(self):
        """
        V.GetHideEdgeLabelsOnInteraction() -> bool
        C++: bool GetHideEdgeLabelsOnInteraction()
        
        Whether to hide edge labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def GetHideVertexLabelsOnInteraction(self):
        """
        V.GetHideVertexLabelsOnInteraction() -> bool
        C++: bool GetHideVertexLabelsOnInteraction()
        
        Whether to hide vertex labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def GetIconArrayName(self):
        """
        V.GetIconArrayName() -> string
        C++: const char *GetIconArrayName()
        
        The array used for assigning icons
        """
        ...
    
    def GetIconVisibility(self):
        """
        V.GetIconVisibility() -> bool
        C++: bool GetIconVisibility()
        
        Whether icons are visible (default off).
        """
        ...
    
    def GetLayoutStrategy(self):
        """
        V.GetLayoutStrategy() -> vtkGraphLayoutStrategy
        C++: vtkGraphLayoutStrategy *GetLayoutStrategy()
        
        The layout strategy to use when performing the graph layout. This
        signature allows an application to create a layout object
        directly and simply set the pointer through this method.
        """
        ...
    
    def GetLayoutStrategyName(self):
        """
        V.GetLayoutStrategyName() -> string
        C++: const char *GetLayoutStrategyName()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaledGlyphs(self):
        """
        V.GetScaledGlyphs() -> bool
        C++: bool GetScaledGlyphs()
        
        Whether to use scaled glyphs or not.  Default is off.
        """
        ...
    
    def GetScalingArrayName(self):
        """
        V.GetScalingArrayName() -> string
        C++: const char *GetScalingArrayName()
        
        The array used for scaling (if ScaledGlyphs is ON)
        """
        ...
    
    def GetVertexColorArrayName(self):
        """
        V.GetVertexColorArrayName() -> string
        C++: const char *GetVertexColorArrayName()
        
        The array to use for coloring vertices.  The default behavior is
        to color by vertex degree.
        """
        ...
    
    def GetVertexLabelArrayName(self):
        """
        V.GetVertexLabelArrayName() -> string
        C++: const char *GetVertexLabelArrayName()
        
        The array to use for vertex labeling.  Default is "VertexDegree".
        """
        ...
    
    def GetVertexLabelFontSize(self):
        """
        V.GetVertexLabelFontSize() -> int
        C++: virtual int GetVertexLabelFontSize()
        
        The size of the font used for vertex labeling
        """
        ...
    
    def GetVertexLabelVisibility(self):
        """
        V.GetVertexLabelVisibility() -> bool
        C++: bool GetVertexLabelVisibility()
        
        Whether to show vertex labels.  Default is off.
        """
        ...
    
    def GetVertexScalarBarVisibility(self):
        """
        V.GetVertexScalarBarVisibility() -> bool
        C++: bool GetVertexScalarBarVisibility()
        
        Whether the scalar bar for vertices is visible.  Default is off.
        """
        ...
    
    def HideEdgeLabelsOnInteractionOff(self):
        """
        V.HideEdgeLabelsOnInteractionOff()
        C++: virtual void HideEdgeLabelsOnInteractionOff()
        
        Whether to hide edge labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def HideEdgeLabelsOnInteractionOn(self):
        """
        V.HideEdgeLabelsOnInteractionOn()
        C++: virtual void HideEdgeLabelsOnInteractionOn()
        
        Whether to hide edge labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def HideVertexLabelsOnInteractionOff(self):
        """
        V.HideVertexLabelsOnInteractionOff()
        C++: virtual void HideVertexLabelsOnInteractionOff()
        
        Whether to hide vertex labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def HideVertexLabelsOnInteractionOn(self):
        """
        V.HideVertexLabelsOnInteractionOn()
        C++: virtual void HideVertexLabelsOnInteractionOn()
        
        Whether to hide vertex labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def IconVisibilityOff(self):
        """
        V.IconVisibilityOff()
        C++: virtual void IconVisibilityOff()
        
        Whether icons are visible (default off).
        """
        ...
    
    def IconVisibilityOn(self):
        """
        V.IconVisibilityOn()
        C++: virtual void IconVisibilityOn()
        
        Whether icons are visible (default off).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsLayoutComplete(self):
        """
        V.IsLayoutComplete() -> int
        C++: virtual int IsLayoutComplete()
        
        Is the graph layout complete? This method is useful for when the
        strategy is iterative and the application wants to show the
        iterative progress of the graph layout See Also: UpdateLayout();
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphLayoutView
        C++: vtkGraphLayoutView *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphLayoutView
        C++: static vtkGraphLayoutView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScaledGlyphsOff(self):
        """
        V.ScaledGlyphsOff()
        C++: virtual void ScaledGlyphsOff()
        
        Whether to use scaled glyphs or not.  Default is off.
        """
        ...
    
    def ScaledGlyphsOn(self):
        """
        V.ScaledGlyphsOn()
        C++: virtual void ScaledGlyphsOn()
        
        Whether to use scaled glyphs or not.  Default is off.
        """
        ...
    
    def SetColorEdges(self, bool):
        """
        V.SetColorEdges(bool)
        C++: void SetColorEdges(bool vis)
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def SetColorVertices(self, bool):
        """
        V.SetColorVertices(bool)
        C++: void SetColorVertices(bool vis)
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def SetEdgeColorArrayName(self, string):
        """
        V.SetEdgeColorArrayName(string)
        C++: void SetEdgeColorArrayName(const char *name)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def SetEdgeLabelArrayName(self, string):
        """
        V.SetEdgeLabelArrayName(string)
        C++: void SetEdgeLabelArrayName(const char *name)
        
        The array to use for edge labeling.  Default is "LabelText".
        """
        ...
    
    def SetEdgeLabelFontSize(self, p_int):
        """
        V.SetEdgeLabelFontSize(int)
        C++: virtual void SetEdgeLabelFontSize(const int size)
        
        The size of the font used for edge labeling
        """
        ...
    
    def SetEdgeLabelVisibility(self, bool):
        """
        V.SetEdgeLabelVisibility(bool)
        C++: void SetEdgeLabelVisibility(bool vis)
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def SetEdgeLayoutStrategy(self, string):
        """
        V.SetEdgeLayoutStrategy(string)
        C++: void SetEdgeLayoutStrategy(const char *name)
        V.SetEdgeLayoutStrategy(vtkEdgeLayoutStrategy)
        C++: void SetEdgeLayoutStrategy(vtkEdgeLayoutStrategy *s)
        
        The layout strategy to use when performing the edge layout. The
        possible strings are: "Arc Parallel"   - Arc parallel edges and
        self loops. "Pass Through"   - Use edge routes assigned to the
        input. Default is "Arc Parallel".
        """
        ...
    
    def SetEdgeLayoutStrategyToArcParallel(self):
        """
        V.SetEdgeLayoutStrategyToArcParallel()
        C++: void SetEdgeLayoutStrategyToArcParallel()
        
        The layout strategy to use when performing the edge layout. The
        possible strings are: "Arc Parallel"   - Arc parallel edges and
        self loops. "Pass Through"   - Use edge routes assigned to the
        input. Default is "Arc Parallel".
        """
        ...
    
    def SetEdgeLayoutStrategyToPassThrough(self):
        """
        V.SetEdgeLayoutStrategyToPassThrough()
        C++: void SetEdgeLayoutStrategyToPassThrough()
        
        The layout strategy to use when performing the edge layout. The
        possible strings are: "Arc Parallel"   - Arc parallel edges and
        self loops. "Pass Through"   - Use edge routes assigned to the
        input. Default is "Arc Parallel".
        """
        ...
    
    def SetEdgeScalarBarVisibility(self, bool):
        """
        V.SetEdgeScalarBarVisibility(bool)
        C++: void SetEdgeScalarBarVisibility(bool vis)
        
        Whether the scalar bar for edges is visible.  Default is off.
        """
        ...
    
    def SetEdgeSelection(self, bool):
        """
        V.SetEdgeSelection(bool)
        C++: void SetEdgeSelection(bool vis)
        
        Whether edges are selectable. Default is on.
        """
        ...
    
    def SetEdgeVisibility(self, bool):
        """
        V.SetEdgeVisibility(bool)
        C++: void SetEdgeVisibility(bool vis)
        
        Whether to show the edges at all. Default is on
        """
        ...
    
    def SetEnabledEdgesArrayName(self, string):
        """
        V.SetEnabledEdgesArrayName(string)
        C++: void SetEnabledEdgesArrayName(const char *name)
        
        The array to use for coloring edges.
        """
        ...
    
    def SetEnabledVerticesArrayName(self, string):
        """
        V.SetEnabledVerticesArrayName(string)
        C++: void SetEnabledVerticesArrayName(const char *name)
        
        The array to use for coloring vertices.
        """
        ...
    
    def SetEnableEdgesByArray(self, bool):
        """
        V.SetEnableEdgesByArray(bool)
        C++: void SetEnableEdgesByArray(bool vis)
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def SetEnableVerticesByArray(self, bool):
        """
        V.SetEnableVerticesByArray(bool)
        C++: void SetEnableVerticesByArray(bool vis)
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def SetGlyphType(self, p_int):
        """
        V.SetGlyphType(int)
        C++: void SetGlyphType(int type)
        
        The type of glyph to use for the vertices
        """
        ...
    
    def SetHideEdgeLabelsOnInteraction(self, bool):
        """
        V.SetHideEdgeLabelsOnInteraction(bool)
        C++: void SetHideEdgeLabelsOnInteraction(bool vis)
        
        Whether to hide edge labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def SetHideVertexLabelsOnInteraction(self, bool):
        """
        V.SetHideVertexLabelsOnInteraction(bool)
        C++: void SetHideVertexLabelsOnInteraction(bool vis)
        
        Whether to hide vertex labels during mouse interactions.  Default
        is off.
        """
        ...
    
    def SetIconAlignment(self, p_int):
        """
        V.SetIconAlignment(int)
        C++: void SetIconAlignment(int alignment)
        
        Specify where the icons should be placed in relation to the
        vertex. See vtkIconGlyphFilter.h for possible values.
        """
        ...
    
    def SetIconArrayName(self, string):
        """
        V.SetIconArrayName(string)
        C++: void SetIconArrayName(const char *name)
        
        The array used for assigning icons
        """
        ...
    
    def SetIconVisibility(self, bool):
        """
        V.SetIconVisibility(bool)
        C++: void SetIconVisibility(bool b)
        
        Whether icons are visible (default off).
        """
        ...
    
    def SetLayoutStrategy(self, string):
        """
        V.SetLayoutStrategy(string)
        C++: void SetLayoutStrategy(const char *name)
        V.SetLayoutStrategy(vtkGraphLayoutStrategy)
        C++: void SetLayoutStrategy(vtkGraphLayoutStrategy *s)
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToCircular(self):
        """
        V.SetLayoutStrategyToCircular()
        C++: void SetLayoutStrategyToCircular()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToClustering2D(self):
        """
        V.SetLayoutStrategyToClustering2D()
        C++: void SetLayoutStrategyToClustering2D()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToCommunity2D(self):
        """
        V.SetLayoutStrategyToCommunity2D()
        C++: void SetLayoutStrategyToCommunity2D()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToCone(self):
        """
        V.SetLayoutStrategyToCone()
        C++: void SetLayoutStrategyToCone()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToCosmicTree(self):
        """
        V.SetLayoutStrategyToCosmicTree()
        C++: void SetLayoutStrategyToCosmicTree()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToFast2D(self):
        """
        V.SetLayoutStrategyToFast2D()
        C++: void SetLayoutStrategyToFast2D()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToForceDirected(self):
        """
        V.SetLayoutStrategyToForceDirected()
        C++: void SetLayoutStrategyToForceDirected()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToPassThrough(self):
        """
        V.SetLayoutStrategyToPassThrough()
        C++: void SetLayoutStrategyToPassThrough()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToRandom(self):
        """
        V.SetLayoutStrategyToRandom()
        C++: void SetLayoutStrategyToRandom()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToSimple2D(self):
        """
        V.SetLayoutStrategyToSimple2D()
        C++: void SetLayoutStrategyToSimple2D()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToSpanTree(self):
        """
        V.SetLayoutStrategyToSpanTree()
        C++: void SetLayoutStrategyToSpanTree()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetLayoutStrategyToTree(self):
        """
        V.SetLayoutStrategyToTree()
        C++: void SetLayoutStrategyToTree()
        
        The layout strategy to use when performing the graph layout. The
        possible strings are:
        - "Random"         Randomly places vertices in a box.
        - "Force Directed" A layout in 3D or 2D simulating forces on
          edges.
        - "Simple 2D"      A simple 2D force directed layout.
        - "Clustering 2D"  A 2D force directed layout that's just like
          simple 2D but uses some techniques to cluster better.
        - "Community 2D"   A linear-time 2D layout that's just like Fast
          2D but looks for and uses a community array to 'accentuate'
          clusters.
        - "Fast 2D"       A linear-time 2D layout.
        - "Pass Through"  Use locations assigned to the input.
        - "Circular"      Places vertices uniformly on a circle.
        - "Cone"          Cone tree layout.
        - "Span Tree"     Span Tree Layout. Default is "Simple 2D".
        """
        ...
    
    def SetScaledGlyphs(self, bool):
        """
        V.SetScaledGlyphs(bool)
        C++: void SetScaledGlyphs(bool arg)
        
        Whether to use scaled glyphs or not.  Default is off.
        """
        ...
    
    def SetScalingArrayName(self, string):
        """
        V.SetScalingArrayName(string)
        C++: void SetScalingArrayName(const char *name)
        
        The array used for scaling (if ScaledGlyphs is ON)
        """
        ...
    
    def SetVertexColorArrayName(self, string):
        """
        V.SetVertexColorArrayName(string)
        C++: void SetVertexColorArrayName(const char *name)
        
        The array to use for coloring vertices.  The default behavior is
        to color by vertex degree.
        """
        ...
    
    def SetVertexLabelArrayName(self, string):
        """
        V.SetVertexLabelArrayName(string)
        C++: void SetVertexLabelArrayName(const char *name)
        
        The array to use for vertex labeling.  Default is "VertexDegree".
        """
        ...
    
    def SetVertexLabelFontSize(self, p_int):
        """
        V.SetVertexLabelFontSize(int)
        C++: virtual void SetVertexLabelFontSize(const int size)
        
        The size of the font used for vertex labeling
        """
        ...
    
    def SetVertexLabelVisibility(self, bool):
        """
        V.SetVertexLabelVisibility(bool)
        C++: void SetVertexLabelVisibility(bool vis)
        
        Whether to show vertex labels.  Default is off.
        """
        ...
    
    def SetVertexScalarBarVisibility(self, bool):
        """
        V.SetVertexScalarBarVisibility(bool)
        C++: void SetVertexScalarBarVisibility(bool vis)
        
        Whether the scalar bar for vertices is visible.  Default is off.
        """
        ...
    
    def UpdateLayout(self):
        """
        V.UpdateLayout()
        C++: virtual void UpdateLayout()
        
        This method is useful for when the strategy is iterative and the
        application wants to show the iterative progress of the graph
        layout. The application would have something like
        while(!IsLayoutComplete()) { UpdateLayout(); } See Also:
        IsLayoutComplete();
        """
        ...
    
    def VertexLabelVisibilityOff(self):
        """
        V.VertexLabelVisibilityOff()
        C++: virtual void VertexLabelVisibilityOff()
        
        Whether to show vertex labels.  Default is off.
        """
        ...
    
    def VertexLabelVisibilityOn(self):
        """
        V.VertexLabelVisibilityOn()
        C++: virtual void VertexLabelVisibilityOn()
        
        Whether to show vertex labels.  Default is off.
        """
        ...
    
    def ZoomToSelection(self):
        """
        V.ZoomToSelection()
        C++: void ZoomToSelection()
        
        Reset the camera based on the bounds of the selected region.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHeatmapItem(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkHeatmapItem - A 2D graphics item for rendering a heatmap
    
    Superclass: vtkContextItem
    
    This item draws a heatmap as a part of a vtkContextScene.
    
    .SEE ALSO vtkTable
    """
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: virtual void GetBounds(double bounds[4])
        
        Get the bounds for this item as (Xmin,Xmax,Ymin,Ymax).
        """
        ...
    
    def GetCellHeight(self):
        """
        V.GetCellHeight() -> float
        C++: virtual double GetCellHeight()
        
        Get/Set the height of the cells in our heatmap. Default is 18
        pixels.
        """
        ...
    
    def GetCellWidth(self):
        """
        V.GetCellWidth() -> float
        C++: virtual double GetCellWidth()
        
        Get/Set the width of the cells in our heatmap. Default is 36
        pixels.
        """
        ...
    
    def GetColumnLabelWidth(self):
        """
        V.GetColumnLabelWidth() -> float
        C++: virtual float GetColumnLabelWidth()
        
        Get the width of the largest row or column label drawn by this
        heatmap.
        """
        ...
    
    def GetNameColumn(self):
        """
        V.GetNameColumn() -> string
        C++: virtual vtkStdString GetNameColumn()
        
        Get/Set the name of the column that specifies the name of this
        table's rows.  By default, we assume this column will be named
        "name".  If no such column can be found, we then assume that the
        1st column in the table names the rows.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: int GetOrientation()
        
        Get the current heatmap orientation.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float)
        C++: virtual float *GetPosition()
        
        Get position of the heatmap.
        """
        ...
    
    def GetPositionVector(self):
        """
        V.GetPositionVector() -> vtkVector2f
        C++: vtkVector2f GetPositionVector()
        
        Get position of the heatmap.
        """
        ...
    
    def GetRowLabelWidth(self):
        """
        V.GetRowLabelWidth() -> float
        C++: virtual float GetRowLabelWidth()
        
        Get the width of the largest row or column label drawn by this
        heatmap.
        """
        ...
    
    def GetRowNames(self):
        """
        V.GetRowNames() -> vtkStringArray
        C++: vtkStringArray *GetRowNames()
        
        Get the table that this item draws.
        """
        ...
    
    def GetTable(self):
        """
        V.GetTable() -> vtkTable
        C++: vtkTable *GetTable()
        
        Get the table that this item draws.
        """
        ...
    
    def GetTextAngleForOrientation(self, p_int):
        """
        V.GetTextAngleForOrientation(int) -> float
        C++: double GetTextAngleForOrientation(int orientation)
        
        Get the angle that row labels should be rotated for the
        corresponding heatmap orientation.  For the default orientation
        (LEFT_TO_RIGHT), this is 0 degrees.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the transform is interactive, false otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MarkRowAsBlank(self, string):
        """
        V.MarkRowAsBlank(string)
        C++: void MarkRowAsBlank(const std::string &rowName)
        
        Mark a row as blank, meaning that no cells will be drawn for it.
        Used by vtkTreeHeatmapItem to represent missing data.
        """
        ...
    
    def MouseDoubleClickEvent(self, vtkContextMouseEvent):
        """
        V.MouseDoubleClickEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseDoubleClickEvent(const vtkContextMouseEvent &event)
             override;
        
        Display a legend for a column of data.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &event)
            override;
        
        Display a tooltip when the user mouses over a cell in the
        heatmap.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHeatmapItem
        C++: vtkHeatmapItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paints the table as a heatmap.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHeatmapItem
        C++: static vtkHeatmapItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellHeight(self, p_float):
        """
        V.SetCellHeight(float)
        C++: virtual void SetCellHeight(double _arg)
        
        Get/Set the height of the cells in our heatmap. Default is 18
        pixels.
        """
        ...
    
    def SetCellWidth(self, p_float):
        """
        V.SetCellWidth(float)
        C++: virtual void SetCellWidth(double _arg)
        
        Get/Set the width of the cells in our heatmap. Default is 36
        pixels.
        """
        ...
    
    def SetNameColumn(self, string):
        """
        V.SetNameColumn(string)
        C++: virtual void SetNameColumn(vtkStdString _arg)
        
        Get/Set the name of the column that specifies the name of this
        table's rows.  By default, we assume this column will be named
        "name".  If no such column can be found, we then assume that the
        1st column in the table names the rows.
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: void SetOrientation(int orientation)
        
        Set which way the table should face within the visualization.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1):
        """
        V.SetPosition(float, float)
        C++: virtual void SetPosition(float _arg1, float _arg2)
        V.SetPosition((float, float))
        C++: void SetPosition(const float _arg[2])
        V.SetPosition(vtkVector2f)
        C++: void SetPosition(const vtkVector2f &pos)
        
        Set the position of the heatmap.
        """
        ...
    
    def SetTable(self, vtkTable):
        """
        V.SetTable(vtkTable)
        C++: virtual void SetTable(vtkTable *table)
        
        Set the table that this item draws.  The first column of the
        table must contain the names of the rows.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DOWN_TO_UP = ...
    LEFT_TO_RIGHT = ...
    RIGHT_TO_LEFT = ...
    UP_TO_DOWN = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHierarchicalGraphPipeline(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkHierarchicalGraphPipeline - helper class for rendering graphs
    superimposed on a tree.
    
    Superclass: vtkObject
    
    vtkHierarchicalGraphPipeline renders bundled edges that are meant to
    be viewed as an overlay on a tree. This class is not for general use,
    but is used in the internals of vtkRenderedHierarchyRepresentation
    and vtkRenderedTreeAreaRepresentation.
    """
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: virtual void ApplyViewTheme(vtkViewTheme *theme)
        
        Applies the view theme to this graph.
        """
        ...
    
    def ColorEdgesByArrayOff(self):
        """
        V.ColorEdgesByArrayOff()
        C++: virtual void ColorEdgesByArrayOff()
        
        Whether to color the edges by an array.
        """
        ...
    
    def ColorEdgesByArrayOn(self):
        """
        V.ColorEdgesByArrayOn()
        C++: virtual void ColorEdgesByArrayOn()
        
        Whether to color the edges by an array.
        """
        ...
    
    def ConvertSelection(self, vtkDataRepresentation, vtkSelection):
        """
        V.ConvertSelection(vtkDataRepresentation, vtkSelection)
            -> vtkSelection
        C++: virtual vtkSelection *ConvertSelection(
            vtkDataRepresentation *rep, vtkSelection *sel)
        
        Returns a new selection relevant to this graph based on an input
        selection and the view that this graph is contained in.
        """
        ...
    
    def GetActor(self):
        """
        V.GetActor() -> vtkActor
        C++: virtual vtkActor *GetActor()
        
        The actor associated with the hierarchical graph.
        """
        ...
    
    def GetBundlingStrength(self):
        """
        V.GetBundlingStrength() -> float
        C++: virtual double GetBundlingStrength()
        
        The bundling strength for the bundled edges.
        """
        ...
    
    def GetColorArrayName(self):
        """
        V.GetColorArrayName() -> string
        C++: virtual const char *GetColorArrayName()
        
        The edge color array.
        """
        ...
    
    def GetColorEdgesByArray(self):
        """
        V.GetColorEdgesByArray() -> bool
        C++: virtual bool GetColorEdgesByArray()
        
        Whether to color the edges by an array.
        """
        ...
    
    def GetHoverArrayName(self):
        """
        V.GetHoverArrayName() -> string
        C++: virtual char *GetHoverArrayName()
        
        The array to use while hovering over an edge.
        """
        ...
    
    def GetLabelActor(self):
        """
        V.GetLabelActor() -> vtkActor2D
        C++: virtual vtkActor2D *GetLabelActor()
        
        The actor associated with the hierarchical graph.
        """
        ...
    
    def GetLabelArrayName(self):
        """
        V.GetLabelArrayName() -> string
        C++: virtual const char *GetLabelArrayName()
        
        The edge label array name.
        """
        ...
    
    def GetLabelTextProperty(self):
        """
        V.GetLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetLabelTextProperty()
        
        The edge label text property.
        """
        ...
    
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> bool
        C++: virtual bool GetLabelVisibility()
        
        The edge label visibility.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSplineType(self):
        """
        V.GetSplineType() -> int
        C++: virtual int GetSplineType()
        
        The spline mode to use in vtkSplineGraphEdges.
        vtkSplineGraphEdges::CUSTOM uses a vtkCardinalSpline.
        vtkSplineGraphEdges::BSPLINE uses a b-spline. The default is
        BSPLINE.
        """
        ...
    
    def GetVisibility(self):
        """
        V.GetVisibility() -> bool
        C++: virtual bool GetVisibility()
        
        The visibility of this graph.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        
        The edge label visibility.
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        
        The edge label visibility.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHierarchicalGraphPipeline
        C++: vtkHierarchicalGraphPipeline *NewInstance()
        """
        ...
    
    def PrepareInputConnections(self, vtkAlgorithmOutput, vtkAlgorithmOutput_1, vtkAlgorithmOutput_2):
        """
        V.PrepareInputConnections(vtkAlgorithmOutput, vtkAlgorithmOutput,
            vtkAlgorithmOutput)
        C++: virtual void PrepareInputConnections(
            vtkAlgorithmOutput *graphConn, vtkAlgorithmOutput *treeConn,
            vtkAlgorithmOutput *annConn)
        
        Sets the input connections for this graph. graphConn is the input
        graph connection. treeConn is the input tree connection. annConn
        is the annotation link connection.
        """
        ...
    
    def RegisterProgress(self, vtkRenderView):
        """
        V.RegisterProgress(vtkRenderView)
        C++: void RegisterProgress(vtkRenderView *view)
        
        Register progress with a view.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHierarchicalGraphPipeline
        C++: static vtkHierarchicalGraphPipeline *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBundlingStrength(self, p_float):
        """
        V.SetBundlingStrength(float)
        C++: virtual void SetBundlingStrength(double strength)
        
        The bundling strength for the bundled edges.
        """
        ...
    
    def SetColorArrayName(self, string):
        """
        V.SetColorArrayName(string)
        C++: virtual void SetColorArrayName(const char *name)
        
        The edge color array.
        """
        ...
    
    def SetColorEdgesByArray(self, bool):
        """
        V.SetColorEdgesByArray(bool)
        C++: virtual void SetColorEdgesByArray(bool vis)
        
        Whether to color the edges by an array.
        """
        ...
    
    def SetHoverArrayName(self, string):
        """
        V.SetHoverArrayName(string)
        C++: virtual void SetHoverArrayName(const char *_arg)
        
        The array to use while hovering over an edge.
        """
        ...
    
    def SetLabelArrayName(self, string):
        """
        V.SetLabelArrayName(string)
        C++: virtual void SetLabelArrayName(const char *name)
        
        The edge label array name.
        """
        ...
    
    def SetLabelTextProperty(self, vtkTextProperty):
        """
        V.SetLabelTextProperty(vtkTextProperty)
        C++: virtual void SetLabelTextProperty(vtkTextProperty *prop)
        
        The edge label text property.
        """
        ...
    
    def SetLabelVisibility(self, bool):
        """
        V.SetLabelVisibility(bool)
        C++: virtual void SetLabelVisibility(bool vis)
        
        The edge label visibility.
        """
        ...
    
    def SetSplineType(self, p_int):
        """
        V.SetSplineType(int)
        C++: virtual void SetSplineType(int type)
        
        The spline mode to use in vtkSplineGraphEdges.
        vtkSplineGraphEdges::CUSTOM uses a vtkCardinalSpline.
        vtkSplineGraphEdges::BSPLINE uses a b-spline. The default is
        BSPLINE.
        """
        ...
    
    def SetVisibility(self, bool):
        """
        V.SetVisibility(bool)
        C++: virtual void SetVisibility(bool vis)
        
        The visibility of this graph.
        """
        ...
    
    def VisibilityOff(self):
        """
        V.VisibilityOff()
        C++: virtual void VisibilityOff()
        
        The visibility of this graph.
        """
        ...
    
    def VisibilityOn(self):
        """
        V.VisibilityOn()
        C++: virtual void VisibilityOn()
        
        The visibility of this graph.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHierarchicalGraphView(vtkGraphLayoutView):
    """
    vtkHierarchicalGraphView - Accepts a graph and a hierarchy -
    currently a tree - and provides a hierarchy-aware display.
    
    Superclass: vtkGraphLayoutView
    
    Currently, this means displaying the hierarchy using a tree layout,
    then rendering the graph vertices as leaves of the tree with curved
    graph edges between leaves.
    
    Takes a graph and a hierarchy (currently a tree) and lays out the
    graph vertices based on their categorization within the hierarchy.
    
    .SEE ALSO vtkGraphLayoutView
    
    @par Thanks: Thanks to the turtle with jets for feet, without you
    this class wouldn't have been possible.
    """
    def ColorGraphEdgesByArrayOff(self):
        """
        V.ColorGraphEdgesByArrayOff()
        C++: virtual void ColorGraphEdgesByArrayOff()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def ColorGraphEdgesByArrayOn(self):
        """
        V.ColorGraphEdgesByArrayOn()
        C++: virtual void ColorGraphEdgesByArrayOn()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetBundlingStrength(self):
        """
        V.GetBundlingStrength() -> float
        C++: virtual double GetBundlingStrength()
        
        Set the bundling strength.
        """
        ...
    
    def GetColorGraphEdgesByArray(self):
        """
        V.GetColorGraphEdgesByArray() -> bool
        C++: virtual bool GetColorGraphEdgesByArray()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetGraphEdgeColorArrayName(self):
        """
        V.GetGraphEdgeColorArrayName() -> string
        C++: virtual const char *GetGraphEdgeColorArrayName()
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def GetGraphEdgeLabelArrayName(self):
        """
        V.GetGraphEdgeLabelArrayName() -> string
        C++: virtual const char *GetGraphEdgeLabelArrayName()
        
        The array to use for edge labeling.  Default is "label".
        """
        ...
    
    def GetGraphEdgeLabelFontSize(self):
        """
        V.GetGraphEdgeLabelFontSize() -> int
        C++: virtual int GetGraphEdgeLabelFontSize()
        
        The size of the font used for edge labeling
        """
        ...
    
    def GetGraphEdgeLabelVisibility(self):
        """
        V.GetGraphEdgeLabelVisibility() -> bool
        C++: virtual bool GetGraphEdgeLabelVisibility()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GetGraphVisibility(self):
        """
        V.GetGraphVisibility() -> bool
        C++: virtual bool GetGraphVisibility()
        
        Whether the graph edges are visible (default off).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GraphEdgeLabelVisibilityOff(self):
        """
        V.GraphEdgeLabelVisibilityOff()
        C++: virtual void GraphEdgeLabelVisibilityOff()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GraphEdgeLabelVisibilityOn(self):
        """
        V.GraphEdgeLabelVisibilityOn()
        C++: virtual void GraphEdgeLabelVisibilityOn()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GraphVisibilityOff(self):
        """
        V.GraphVisibilityOff()
        C++: virtual void GraphVisibilityOff()
        
        Whether the graph edges are visible (default off).
        """
        ...
    
    def GraphVisibilityOn(self):
        """
        V.GraphVisibilityOn()
        C++: virtual void GraphVisibilityOn()
        
        Whether the graph edges are visible (default off).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHierarchicalGraphView
        C++: vtkHierarchicalGraphView *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHierarchicalGraphView
        C++: static vtkHierarchicalGraphView *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBundlingStrength(self, p_float):
        """
        V.SetBundlingStrength(float)
        C++: virtual void SetBundlingStrength(double strength)
        
        Set the bundling strength.
        """
        ...
    
    def SetColorGraphEdgesByArray(self, bool):
        """
        V.SetColorGraphEdgesByArray(bool)
        C++: virtual void SetColorGraphEdgesByArray(bool vis)
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def SetGraphEdgeColorArrayName(self, string):
        """
        V.SetGraphEdgeColorArrayName(string)
        C++: virtual void SetGraphEdgeColorArrayName(const char *name)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def SetGraphEdgeColorToSplineFraction(self):
        """
        V.SetGraphEdgeColorToSplineFraction()
        C++: virtual void SetGraphEdgeColorToSplineFraction()
        
        Set the color to be the spline fraction
        """
        ...
    
    def SetGraphEdgeLabelArrayName(self, string):
        """
        V.SetGraphEdgeLabelArrayName(string)
        C++: virtual void SetGraphEdgeLabelArrayName(const char *name)
        
        The array to use for edge labeling.  Default is "label".
        """
        ...
    
    def SetGraphEdgeLabelFontSize(self, p_int):
        """
        V.SetGraphEdgeLabelFontSize(int)
        C++: virtual void SetGraphEdgeLabelFontSize(const int size)
        
        The size of the font used for edge labeling
        """
        ...
    
    def SetGraphEdgeLabelVisibility(self, bool):
        """
        V.SetGraphEdgeLabelVisibility(bool)
        C++: virtual void SetGraphEdgeLabelVisibility(bool vis)
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def SetGraphFromInput(self, vtkDataObject):
        """
        V.SetGraphFromInput(vtkDataObject) -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetGraphFromInput(
            vtkDataObject *input)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def SetGraphFromInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetGraphFromInputConnection(vtkAlgorithmOutput)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetGraphFromInputConnection(
            vtkAlgorithmOutput *conn)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def SetGraphVisibility(self, bool):
        """
        V.SetGraphVisibility(bool)
        C++: virtual void SetGraphVisibility(bool b)
        
        Whether the graph edges are visible (default off).
        """
        ...
    
    def SetHierarchyFromInput(self, vtkDataObject):
        """
        V.SetHierarchyFromInput(vtkDataObject) -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetHierarchyFromInput(
            vtkDataObject *input)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def SetHierarchyFromInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetHierarchyFromInputConnection(vtkAlgorithmOutput)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetHierarchyFromInputConnection(
            vtkAlgorithmOutput *conn)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTreeAreaView(vtkRenderView):
    """
    vtkTreeAreaView - Accepts a graph and a hierarchy - currently a tree
    - and provides a hierarchy-aware display.
    
    Superclass: vtkRenderView
    
    Currently, this means displaying the hierarchy using a tree ring
    layout, then rendering the graph vertices as leaves of the tree with
    curved graph edges between leaves.
    
    Takes a graph and a hierarchy (currently a tree) and lays out the
    graph vertices based on their categorization within the hierarchy.
    
    .SEE ALSO vtkGraphLayoutView
    
    @par Thanks: Thanks to Jason Shepherd for implementing this class
    """
    def AreaLabelVisibilityOff(self):
        """
        V.AreaLabelVisibilityOff()
        C++: virtual void AreaLabelVisibilityOff()
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def AreaLabelVisibilityOn(self):
        """
        V.AreaLabelVisibilityOn()
        C++: virtual void AreaLabelVisibilityOn()
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def ColorAreasOff(self):
        """
        V.ColorAreasOff()
        C++: virtual void ColorAreasOff()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def ColorAreasOn(self):
        """
        V.ColorAreasOn()
        C++: virtual void ColorAreasOn()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def ColorEdgesOff(self):
        """
        V.ColorEdgesOff()
        C++: virtual void ColorEdgesOff()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def ColorEdgesOn(self):
        """
        V.ColorEdgesOn()
        C++: virtual void ColorEdgesOn()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def EdgeLabelVisibilityOff(self):
        """
        V.EdgeLabelVisibilityOff()
        C++: virtual void EdgeLabelVisibilityOff()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def EdgeLabelVisibilityOn(self):
        """
        V.EdgeLabelVisibilityOn()
        C++: virtual void EdgeLabelVisibilityOn()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GetAreaColorArrayName(self):
        """
        V.GetAreaColorArrayName() -> string
        C++: const char *GetAreaColorArrayName()
        
        The array to use for coloring vertices.  Default is "color".
        """
        ...
    
    def GetAreaHoverArrayName(self):
        """
        V.GetAreaHoverArrayName() -> string
        C++: const char *GetAreaHoverArrayName()
        
        The name of the array whose value appears when the mouse hovers
        over a rectangle in the treemap. This must be a string array.
        """
        ...
    
    def GetAreaLabelArrayName(self):
        """
        V.GetAreaLabelArrayName() -> string
        C++: const char *GetAreaLabelArrayName()
        
        The array to use for area labeling.  Default is "label".
        """
        ...
    
    def GetAreaLabelFontSize(self):
        """
        V.GetAreaLabelFontSize() -> int
        C++: virtual int GetAreaLabelFontSize()
        
        The size of the font used for area labeling
        """
        ...
    
    def GetAreaLabelVisibility(self):
        """
        V.GetAreaLabelVisibility() -> bool
        C++: bool GetAreaLabelVisibility()
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def GetAreaSizeArrayName(self):
        """
        V.GetAreaSizeArrayName() -> string
        C++: const char *GetAreaSizeArrayName()
        
        The array to use for area sizes. Default is "size".
        """
        ...
    
    def GetBundlingStrength(self):
        """
        V.GetBundlingStrength() -> float
        C++: double GetBundlingStrength()
        
        Set the bundling strength.
        """
        ...
    
    def GetColorAreas(self):
        """
        V.GetColorAreas() -> bool
        C++: bool GetColorAreas()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def GetColorEdges(self):
        """
        V.GetColorEdges() -> bool
        C++: bool GetColorEdges()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetEdgeColorArrayName(self):
        """
        V.GetEdgeColorArrayName() -> string
        C++: const char *GetEdgeColorArrayName()
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def GetEdgeLabelArrayName(self):
        """
        V.GetEdgeLabelArrayName() -> string
        C++: const char *GetEdgeLabelArrayName()
        
        The array to use for edge labeling.  Default is "label".
        """
        ...
    
    def GetEdgeLabelFontSize(self):
        """
        V.GetEdgeLabelFontSize() -> int
        C++: virtual int GetEdgeLabelFontSize()
        
        The size of the font used for edge labeling
        """
        ...
    
    def GetEdgeLabelVisibility(self):
        """
        V.GetEdgeLabelVisibility() -> bool
        C++: bool GetEdgeLabelVisibility()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GetEdgeScalarBarVisibility(self):
        """
        V.GetEdgeScalarBarVisibility() -> bool
        C++: virtual bool GetEdgeScalarBarVisibility()
        
        Visibility of scalar bar actor for edges.
        """
        ...
    
    def GetLabelPriorityArrayName(self):
        """
        V.GetLabelPriorityArrayName() -> string
        C++: const char *GetLabelPriorityArrayName()
        
        The array to use for area labeling priority. Default is
        "GraphVertexDegree".
        """
        ...
    
    def GetLayoutStrategy(self):
        """
        V.GetLayoutStrategy() -> vtkAreaLayoutStrategy
        C++: virtual vtkAreaLayoutStrategy *GetLayoutStrategy()
        
        The layout strategy for producing spatial regions for the tree.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShrinkPercentage(self):
        """
        V.GetShrinkPercentage() -> float
        C++: double GetShrinkPercentage()
        
        Set the region shrink percentage between 0.0 and 1.0.
        """
        ...
    
    def GetUseRectangularCoordinates(self):
        """
        V.GetUseRectangularCoordinates() -> bool
        C++: virtual bool GetUseRectangularCoordinates()
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeAreaView
        C++: vtkTreeAreaView *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeAreaView
        C++: static vtkTreeAreaView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAreaColorArrayName(self, string):
        """
        V.SetAreaColorArrayName(string)
        C++: void SetAreaColorArrayName(const char *name)
        
        The array to use for coloring vertices.  Default is "color".
        """
        ...
    
    def SetAreaHoverArrayName(self, string):
        """
        V.SetAreaHoverArrayName(string)
        C++: void SetAreaHoverArrayName(const char *name)
        
        The name of the array whose value appears when the mouse hovers
        over a rectangle in the treemap. This must be a string array.
        """
        ...
    
    def SetAreaLabelArrayName(self, string):
        """
        V.SetAreaLabelArrayName(string)
        C++: void SetAreaLabelArrayName(const char *name)
        
        The array to use for area labeling.  Default is "label".
        """
        ...
    
    def SetAreaLabelFontSize(self, p_int):
        """
        V.SetAreaLabelFontSize(int)
        C++: virtual void SetAreaLabelFontSize(const int size)
        
        The size of the font used for area labeling
        """
        ...
    
    def SetAreaLabelVisibility(self, bool):
        """
        V.SetAreaLabelVisibility(bool)
        C++: void SetAreaLabelVisibility(bool vis)
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def SetAreaSizeArrayName(self, string):
        """
        V.SetAreaSizeArrayName(string)
        C++: void SetAreaSizeArrayName(const char *name)
        
        The array to use for area sizes. Default is "size".
        """
        ...
    
    def SetBundlingStrength(self, p_float):
        """
        V.SetBundlingStrength(float)
        C++: void SetBundlingStrength(double strength)
        
        Set the bundling strength.
        """
        ...
    
    def SetColorAreas(self, bool):
        """
        V.SetColorAreas(bool)
        C++: void SetColorAreas(bool vis)
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def SetColorEdges(self, bool):
        """
        V.SetColorEdges(bool)
        C++: void SetColorEdges(bool vis)
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def SetEdgeColorArrayName(self, string):
        """
        V.SetEdgeColorArrayName(string)
        C++: void SetEdgeColorArrayName(const char *name)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def SetEdgeColorToSplineFraction(self):
        """
        V.SetEdgeColorToSplineFraction()
        C++: void SetEdgeColorToSplineFraction()
        
        Set the color to be the spline fraction
        """
        ...
    
    def SetEdgeLabelArrayName(self, string):
        """
        V.SetEdgeLabelArrayName(string)
        C++: void SetEdgeLabelArrayName(const char *name)
        
        The array to use for edge labeling.  Default is "label".
        """
        ...
    
    def SetEdgeLabelFontSize(self, p_int):
        """
        V.SetEdgeLabelFontSize(int)
        C++: virtual void SetEdgeLabelFontSize(const int size)
        
        The size of the font used for edge labeling
        """
        ...
    
    def SetEdgeLabelVisibility(self, bool):
        """
        V.SetEdgeLabelVisibility(bool)
        C++: void SetEdgeLabelVisibility(bool vis)
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def SetEdgeScalarBarVisibility(self, bool):
        """
        V.SetEdgeScalarBarVisibility(bool)
        C++: virtual void SetEdgeScalarBarVisibility(bool b)
        
        Visibility of scalar bar actor for edges.
        """
        ...
    
    def SetGraphFromInput(self, vtkGraph):
        """
        V.SetGraphFromInput(vtkGraph) -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetGraphFromInput(vtkGraph *input)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def SetGraphFromInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetGraphFromInputConnection(vtkAlgorithmOutput)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetGraphFromInputConnection(
            vtkAlgorithmOutput *conn)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def SetLabelPriorityArrayName(self, string):
        """
        V.SetLabelPriorityArrayName(string)
        C++: void SetLabelPriorityArrayName(const char *name)
        
        The array to use for area labeling priority. Default is
        "GraphVertexDegree".
        """
        ...
    
    def SetLayoutStrategy(self, vtkAreaLayoutStrategy):
        """
        V.SetLayoutStrategy(vtkAreaLayoutStrategy)
        C++: virtual void SetLayoutStrategy(
            vtkAreaLayoutStrategy *strategy)
        
        The layout strategy for producing spatial regions for the tree.
        """
        ...
    
    def SetShrinkPercentage(self, p_float):
        """
        V.SetShrinkPercentage(float)
        C++: void SetShrinkPercentage(double value)
        
        Set the region shrink percentage between 0.0 and 1.0.
        """
        ...
    
    def SetTreeFromInput(self, vtkTree):
        """
        V.SetTreeFromInput(vtkTree) -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetTreeFromInput(vtkTree *input)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def SetTreeFromInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetTreeFromInputConnection(vtkAlgorithmOutput)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetTreeFromInputConnection(
            vtkAlgorithmOutput *conn)
        
        Set the tree and graph representations to the appropriate input
        ports.
        """
        ...
    
    def SetUseRectangularCoordinates(self, bool):
        """
        V.SetUseRectangularCoordinates(bool)
        C++: virtual void SetUseRectangularCoordinates(bool rect)
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def UseRectangularCoordinatesOff(self):
        """
        V.UseRectangularCoordinatesOff()
        C++: virtual void UseRectangularCoordinatesOff()
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def UseRectangularCoordinatesOn(self):
        """
        V.UseRectangularCoordinatesOn()
        C++: virtual void UseRectangularCoordinatesOn()
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkIcicleView(vtkTreeAreaView):
    """
    vtkIcicleView - Displays a tree in a stacked "icicle" view
    
    Superclass: vtkTreeAreaView
    
    vtkIcicleView shows a vtkTree in horizontal layers where each vertex
    in the tree is represented by a bar. Child sectors are below (or
    above) parent sectors, and may be colored and sized by various
    parameters.
    """
    def GetLayerThickness(self):
        """
        V.GetLayerThickness() -> float
        C++: virtual double GetLayerThickness()
        
        Set the thickness of each layer
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRootWidth(self):
        """
        V.GetRootWidth() -> float
        C++: virtual double GetRootWidth()
        
        Set the width of the root node
        """
        ...
    
    def GetTopToBottom(self):
        """
        V.GetTopToBottom() -> bool
        C++: virtual bool GetTopToBottom()
        
        Sets whether the stacks go from top to bottom or bottom to top.
        """
        ...
    
    def GetUseGradientColoring(self):
        """
        V.GetUseGradientColoring() -> bool
        C++: virtual bool GetUseGradientColoring()
        
        Turn on/off gradient coloring.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkIcicleView
        C++: vtkIcicleView *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkIcicleView
        C++: static vtkIcicleView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLayerThickness(self, p_float):
        """
        V.SetLayerThickness(float)
        C++: virtual void SetLayerThickness(double thickness)
        
        Set the thickness of each layer
        """
        ...
    
    def SetRootWidth(self, p_float):
        """
        V.SetRootWidth(float)
        C++: virtual void SetRootWidth(double width)
        
        Set the width of the root node
        """
        ...
    
    def SetTopToBottom(self, bool):
        """
        V.SetTopToBottom(bool)
        C++: virtual void SetTopToBottom(bool value)
        
        Sets whether the stacks go from top to bottom or bottom to top.
        """
        ...
    
    def SetUseGradientColoring(self, bool):
        """
        V.SetUseGradientColoring(bool)
        C++: virtual void SetUseGradientColoring(bool value)
        
        Turn on/off gradient coloring.
        """
        ...
    
    def TopToBottomOff(self):
        """
        V.TopToBottomOff()
        C++: virtual void TopToBottomOff()
        
        Sets whether the stacks go from top to bottom or bottom to top.
        """
        ...
    
    def TopToBottomOn(self):
        """
        V.TopToBottomOn()
        C++: virtual void TopToBottomOn()
        
        Sets whether the stacks go from top to bottom or bottom to top.
        """
        ...
    
    def UseGradientColoringOff(self):
        """
        V.UseGradientColoringOff()
        C++: virtual void UseGradientColoringOff()
        
        Turn on/off gradient coloring.
        """
        ...
    
    def UseGradientColoringOn(self):
        """
        V.UseGradientColoringOn()
        C++: virtual void UseGradientColoringOn()
        
        Turn on/off gradient coloring.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkInteractorStyleAreaSelectHover(__vtkmodules_vtkInteractionStyle.vtkInteractorStyleRubberBand2D):
    """
    vtkInteractorStyleAreaSelectHover - An interactor style for an area
    tree view
    
    Superclass: vtkInteractorStyleRubberBand2D
    
    The vtkInteractorStyleAreaSelectHover specifically works with
    pipelines that create a hierarchical tree.  Such pipelines will have
    a vtkAreaLayout filter which must be passed to this interactor style
    for it to function correctly. This interactor style allows only 2D
    panning and zooming, rubber band selection and provides a balloon
    containing the name of the vertex hovered over.
    """
    def GetHighLightWidth(self):
        """
        V.GetHighLightWidth() -> float
        C++: double GetHighLightWidth()
        
        The width of the line around the hovered vertex.
        """
        ...
    
    def GetIdAtPos(self, p_int, p_int_1):
        """
        V.GetIdAtPos(int, int) -> int
        C++: vtkIdType GetIdAtPos(int x, int y)
        
        Obtain the tree vertex id at the position specified.
        """
        ...
    
    def GetLabelField(self):
        """
        V.GetLabelField() -> string
        C++: virtual char *GetLabelField()
        
        The name of the field to use when displaying text in the hover
        balloon.
        """
        ...
    
    def GetLayout(self):
        """
        V.GetLayout() -> vtkAreaLayout
        C++: virtual vtkAreaLayout *GetLayout()
        
        Must be set to the vtkAreaLayout used to compute the bounds of
        each vertex.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUseRectangularCoordinates(self):
        """
        V.GetUseRectangularCoordinates() -> bool
        C++: virtual bool GetUseRectangularCoordinates()
        
        Determine whether or not to use rectangular coordinates instead
        of polar coordinates.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInteractorStyleAreaSelectHover
        C++: vtkInteractorStyleAreaSelectHover *NewInstance()
        """
        ...
    
    def OnMouseMove(self):
        """
        V.OnMouseMove()
        C++: void OnMouseMove() override;
        
        Overridden from vtkInteractorStyleImage to provide the desired
        interaction behavior.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInteractorStyleAreaSelectHover
        C++: static vtkInteractorStyleAreaSelectHover *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetHighLightColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetHighLightColor(float, float, float)
        C++: void SetHighLightColor(double r, double g, double b)
        
        Set the color used to highlight the hovered vertex.
        """
        ...
    
    def SetHighLightWidth(self, p_float):
        """
        V.SetHighLightWidth(float)
        C++: void SetHighLightWidth(double lw)
        
        The width of the line around the hovered vertex.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *rwi) override;
        
        Set the interactor that this interactor style works with.
        """
        ...
    
    def SetLabelField(self, string):
        """
        V.SetLabelField(string)
        C++: virtual void SetLabelField(const char *_arg)
        
        The name of the field to use when displaying text in the hover
        balloon.
        """
        ...
    
    def SetLayout(self, vtkAreaLayout):
        """
        V.SetLayout(vtkAreaLayout)
        C++: void SetLayout(vtkAreaLayout *layout)
        
        Must be set to the vtkAreaLayout used to compute the bounds of
        each vertex.
        """
        ...
    
    def SetUseRectangularCoordinates(self, bool):
        """
        V.SetUseRectangularCoordinates(bool)
        C++: virtual void SetUseRectangularCoordinates(bool _arg)
        
        Determine whether or not to use rectangular coordinates instead
        of polar coordinates.
        """
        ...
    
    def UseRectangularCoordinatesOff(self):
        """
        V.UseRectangularCoordinatesOff()
        C++: virtual void UseRectangularCoordinatesOff()
        
        Determine whether or not to use rectangular coordinates instead
        of polar coordinates.
        """
        ...
    
    def UseRectangularCoordinatesOn(self):
        """
        V.UseRectangularCoordinatesOn()
        C++: virtual void UseRectangularCoordinatesOn()
        
        Determine whether or not to use rectangular coordinates instead
        of polar coordinates.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkInteractorStyleTreeMapHover(__vtkmodules_vtkInteractionStyle.vtkInteractorStyleImage):
    """
    vtkInteractorStyleTreeMapHover - An interactor style for a tree map
    view
    
    Superclass: vtkInteractorStyleImage
    
    The vtkInteractorStyleTreeMapHover specifically works with pipelines
    that create a tree map.  Such pipelines will have a vtkTreeMapLayout
    filter and a vtkTreeMapToPolyData filter, both of which must be
    passed to this interactor style for it to function correctly. This
    interactor style allows only 2D panning and zooming, and additionally
    provides a balloon containing the name of the vertex hovered over,
    and allows the user to highlight a vertex by clicking on it.
    """
    def GetHighLightWidth(self):
        """
        V.GetHighLightWidth() -> float
        C++: double GetHighLightWidth()
        
        The width of the line around the hovered vertex.
        """
        ...
    
    def GetLabelField(self):
        """
        V.GetLabelField() -> string
        C++: virtual char *GetLabelField()
        
        The name of the field to use when displaying text in the hover
        balloon.
        """
        ...
    
    def GetLayout(self):
        """
        V.GetLayout() -> vtkTreeMapLayout
        C++: virtual vtkTreeMapLayout *GetLayout()
        
        Must be set to the vtkTreeMapLayout used to compute the bounds of
        each vertex for the tree map.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSelectionWidth(self):
        """
        V.GetSelectionWidth() -> float
        C++: double GetSelectionWidth()
        
        The width of the line around the selected vertex.
        """
        ...
    
    def GetTreeMapToPolyData(self):
        """
        V.GetTreeMapToPolyData() -> vtkTreeMapToPolyData
        C++: virtual vtkTreeMapToPolyData *GetTreeMapToPolyData()
        
        Must be set to the vtkTreeMapToPolyData used to convert the tree
        map into polydata.
        """
        ...
    
    def HighLightCurrentSelectedItem(self):
        """
        V.HighLightCurrentSelectedItem()
        C++: void HighLightCurrentSelectedItem()
        
        Highlights a specific vertex.
        """
        ...
    
    def HighLightItem(self, p_int):
        """
        V.HighLightItem(int)
        C++: void HighLightItem(vtkIdType id)
        
        Highlights a specific vertex.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInteractorStyleTreeMapHover
        C++: vtkInteractorStyleTreeMapHover *NewInstance()
        """
        ...
    
    def OnLeftButtonUp(self):
        """
        V.OnLeftButtonUp()
        C++: void OnLeftButtonUp() override;
        
        Overridden from vtkInteractorStyleImage to provide the desired
        interaction behavior.
        """
        ...
    
    def OnMouseMove(self):
        """
        V.OnMouseMove()
        C++: void OnMouseMove() override;
        
        Overridden from vtkInteractorStyleImage to provide the desired
        interaction behavior.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInteractorStyleTreeMapHover
        C++: static vtkInteractorStyleTreeMapHover *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetHighLightColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetHighLightColor(float, float, float)
        C++: void SetHighLightColor(double r, double g, double b)
        
        Set the color used to highlight the hovered vertex.
        """
        ...
    
    def SetHighLightWidth(self, p_float):
        """
        V.SetHighLightWidth(float)
        C++: void SetHighLightWidth(double lw)
        
        The width of the line around the hovered vertex.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *rwi) override;
        
        Set/Get the Interactor wrapper being controlled by this object.
        (Satisfy superclass API.)
        """
        ...
    
    def SetLabelField(self, string):
        """
        V.SetLabelField(string)
        C++: virtual void SetLabelField(const char *_arg)
        
        The name of the field to use when displaying text in the hover
        balloon.
        """
        ...
    
    def SetLayout(self, vtkTreeMapLayout):
        """
        V.SetLayout(vtkTreeMapLayout)
        C++: void SetLayout(vtkTreeMapLayout *layout)
        
        Must be set to the vtkTreeMapLayout used to compute the bounds of
        each vertex for the tree map.
        """
        ...
    
    def SetSelectionLightColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetSelectionLightColor(float, float, float)
        C++: void SetSelectionLightColor(double r, double g, double b)
        
        Set the color used to highlight the selected vertex.
        """
        ...
    
    def SetSelectionWidth(self, p_float):
        """
        V.SetSelectionWidth(float)
        C++: void SetSelectionWidth(double lw)
        
        The width of the line around the selected vertex.
        """
        ...
    
    def SetTreeMapToPolyData(self, vtkTreeMapToPolyData):
        """
        V.SetTreeMapToPolyData(vtkTreeMapToPolyData)
        C++: void SetTreeMapToPolyData(vtkTreeMapToPolyData *filter)
        
        Must be set to the vtkTreeMapToPolyData used to convert the tree
        map into polydata.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRenderedRepresentation(__vtkmodules_vtkViewsCore.vtkDataRepresentation):
    """
    vtkRenderedRepresentation - 
    
    Superclass: vtkDataRepresentation
    """
    def GetLabelRenderMode(self):
        """
        V.GetLabelRenderMode() -> int
        C++: virtual int GetLabelRenderMode()
        
        Set the label render mode. vtkRenderView::QT - Use Qt-based
        labeler with fitted labeling and unicode support. Requires
        VTK_USE_QT to be on. vtkRenderView::FREETYPE - Use standard
        freetype text rendering.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderedRepresentation
        C++: vtkRenderedRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderedRepresentation
        C++: static vtkRenderedRepresentation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetLabelRenderMode(self, p_int):
        """
        V.SetLabelRenderMode(int)
        C++: virtual void SetLabelRenderMode(int _arg)
        
        Set the label render mode. vtkRenderView::QT - Use Qt-based
        labeler with fitted labeling and unicode support. Requires
        VTK_USE_QT to be on. vtkRenderView::FREETYPE - Use standard
        freetype text rendering.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParallelCoordinatesRepresentation(vtkRenderedRepresentation):
    """
    vtkParallelCoordinatesRepresentation - Data representation that
     takes generic multivariate data and produces a parallel coordinates
    plot.
    
    Superclass: vtkRenderedRepresentation
    
    A parallel coordinates plot represents each variable in a
    multivariate
     data set as a separate axis.  Individual samples of that data set
    are
     represented as a polyline that pass through each variable axis at
     positions that correspond to data values. 
    vtkParallelCoordinatesRepresentation
     generates this plot when added to a vtkParallelCoordinatesView,
    which handles
     interaction and highlighting.  Sample polylines can alternatively
     be represented as s-curves by enabling the UseCurves flag.
    
    
     There are three selection modes: lasso, angle, and function. Lasso
    selection
     picks sample lines that pass through a polyline.  Angle selection
    picks sample
     lines that have similar slope to a line segment.  Function selection
    picks
     sample lines that are near a linear function defined on two
    variables.  This
     function specified by passing two (x,y) variable value pairs.
    
    
     All primitives are plotted in normalized view coordinates [0,1].
    
    @sa
     vtkParallelCoordinatesView
    vtkParallelCoordinatesHistogramRepresentation
     vtkSCurveSpline
    
    @par Thanks:
     Developed by David Feng at Sandia National Laboratories
    """
    def AngleSelect(self, p_int, p_int_1, *float, **kwargs):
        """
        V.AngleSelect(int, int, [float, ...], [float, ...])
        C++: virtual void AngleSelect(int brushClass, int brushOperator,
            double *p1, double *p2)
        
        Do a selection of the lines.  See the main description for how to
        use these functions. RangeSelect is currently stubbed out.
        """
        ...
    
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: void ApplyViewTheme(vtkViewTheme *theme) override;
        
        Apply the theme to this view.  CellColor is used for line
        coloring and titles.  EdgeLabelColor is used for axis color.
        CellOpacity is used for line opacity.
        """
        ...
    
    def FunctionSelect(self, p_int, p_int_1, *float, **kwargs):
        """
        V.FunctionSelect(int, int, [float, ...], [float, ...], [float,
            ...], [float, ...])
        C++: virtual void FunctionSelect(int brushClass,
            int brushOperator, double *p1, double *p2, double *q1,
            double *q2)
        
        Do a selection of the lines.  See the main description for how to
        use these functions. RangeSelect is currently stubbed out.
        """
        ...
    
    def GetAngleBrushThreshold(self):
        """
        V.GetAngleBrushThreshold() -> float
        C++: virtual double GetAngleBrushThreshold()
        
        Maximum angle difference (in degrees) of selection using
        angle/function brushes
        """
        ...
    
    def GetAxisColor(self):
        """
        V.GetAxisColor() -> (float, float, float)
        C++: virtual double *GetAxisColor()
        
        Access plot properties
        """
        ...
    
    def GetAxisLabelColor(self):
        """
        V.GetAxisLabelColor() -> (float, float, float)
        C++: virtual double *GetAxisLabelColor()
        
        Access plot properties
        """
        ...
    
    def GetCurveResolution(self):
        """
        V.GetCurveResolution() -> int
        C++: virtual int GetCurveResolution()
        
        Resolution of the curves displayed, enabled by setting UseCurves
        """
        ...
    
    def GetFontSize(self):
        """
        V.GetFontSize() -> float
        C++: virtual double GetFontSize()
        
        Access plot properties
        """
        ...
    
    def GetFunctionBrushThreshold(self):
        """
        V.GetFunctionBrushThreshold() -> float
        C++: virtual double GetFunctionBrushThreshold()
        
        Maximum angle difference (in degrees) of selection using
        angle/function brushes
        """
        ...
    
    def GetHoverText(self, vtkView, p_int, p_int_1):
        """
        V.GetHoverText(vtkView, int, int) -> string
        C++: virtual const char *GetHoverText(vtkView *view, int x, int y)
        
        Returns the hover text at an x,y location.
        """
        ...
    
    def GetLineColor(self):
        """
        V.GetLineColor() -> (float, float, float)
        C++: virtual double *GetLineColor()
        
        Access plot properties
        """
        ...
    
    def GetLineOpacity(self):
        """
        V.GetLineOpacity() -> float
        C++: virtual double GetLineOpacity()
        
        Access plot properties
        """
        ...
    
    def GetNumberOfAxes(self):
        """
        V.GetNumberOfAxes() -> int
        C++: virtual int GetNumberOfAxes()
        
        Get the number of axes in the plot
        """
        ...
    
    def GetNumberOfAxisLabels(self):
        """
        V.GetNumberOfAxisLabels() -> int
        C++: virtual int GetNumberOfAxisLabels()
        
        Set/Get the number of labels to display on each axis
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfSamples(self):
        """
        V.GetNumberOfSamples() -> int
        C++: virtual int GetNumberOfSamples()
        
        Get the number of samples in the plot
        """
        ...
    
    def GetPositionAndSize(self, *float, **kwargs):
        """
        V.GetPositionAndSize([float, ...], [float, ...]) -> int
        C++: int GetPositionAndSize(double *position, double *size)
        
        Change the position of the plot
        """
        ...
    
    def GetPositionNearXCoordinate(self, p_float):
        """
        V.GetPositionNearXCoordinate(float) -> int
        C++: int GetPositionNearXCoordinate(double xcoord)
        
        Move an axis to a particular screen position.  Using these
        methods requires an Update() before they will work properly.
        """
        ...
    
    def GetRangeAtPosition(self, p_int, p_float=..., p_float=...):
        """
        V.GetRangeAtPosition(int, [float, float]) -> int
        C++: int GetRangeAtPosition(int position, double range[2])
        
        Set/get the value range of the axis at a particular screen
        position
        """
        ...
    
    def GetUseCurves(self):
        """
        V.GetUseCurves() -> int
        C++: virtual vtkTypeBool GetUseCurves()
        
        Whether or not to display using curves
        """
        ...
    
    def GetXCoordinateOfPosition(self, p_int):
        """
        V.GetXCoordinateOfPosition(int) -> float
        C++: double GetXCoordinateOfPosition(int axis)
        
        Move an axis to a particular screen position.  Using these
        methods requires an Update() before they will work properly.
        """
        ...
    
    def GetXCoordinatesOfPositions(self, *float):
        """
        V.GetXCoordinatesOfPositions([float, ...])
        C++: void GetXCoordinatesOfPositions(double *coords)
        
        Move an axis to a particular screen position.  Using these
        methods requires an Update() before they will work properly.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LassoSelect(self, p_int, p_int_1, vtkPoints):
        """
        V.LassoSelect(int, int, vtkPoints)
        C++: virtual void LassoSelect(int brushClass, int brushOperator,
            vtkPoints *brushPoints)
        
        Do a selection of the lines.  See the main description for how to
        use these functions. RangeSelect is currently stubbed out.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParallelCoordinatesRepresentation
        C++: vtkParallelCoordinatesRepresentation *NewInstance()
        """
        ...
    
    def RangeSelect(self, p_int, p_int_1, *float, **kwargs):
        """
        V.RangeSelect(int, int, [float, ...], [float, ...])
        C++: virtual void RangeSelect(int brushClass, int brushOperator,
            double *p1, double *p2)
        
        Do a selection of the lines.  See the main description for how to
        use these functions. RangeSelect is currently stubbed out.
        """
        ...
    
    def ResetAxes(self):
        """
        V.ResetAxes()
        C++: void ResetAxes()
        
        Reset the axes to their default positions and orders
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkParallelCoordinatesRepresentation
        C++: static vtkParallelCoordinatesRepresentation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAngleBrushThreshold(self, p_float):
        """
        V.SetAngleBrushThreshold(float)
        C++: virtual void SetAngleBrushThreshold(double _arg)
        
        Maximum angle difference (in degrees) of selection using
        angle/function brushes
        """
        ...
    
    def SetAxisColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisColor(float, float, float)
        C++: virtual void SetAxisColor(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisColor((float, float, float))
        C++: virtual void SetAxisColor(const double _arg[3])
        
        Access plot properties
        """
        ...
    
    def SetAxisLabelColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetAxisLabelColor(float, float, float)
        C++: virtual void SetAxisLabelColor(double _arg1, double _arg2,
            double _arg3)
        V.SetAxisLabelColor((float, float, float))
        C++: virtual void SetAxisLabelColor(const double _arg[3])
        
        Access plot properties
        """
        ...
    
    def SetAxisTitles(self, vtkStringArray):
        """
        V.SetAxisTitles(vtkStringArray)
        C++: void SetAxisTitles(vtkStringArray *)
        V.SetAxisTitles(vtkAlgorithmOutput)
        C++: void SetAxisTitles(vtkAlgorithmOutput *)
        
        Set/Get the axis titles
        """
        ...
    
    def SetCurveResolution(self, p_int):
        """
        V.SetCurveResolution(int)
        C++: virtual void SetCurveResolution(int _arg)
        
        Resolution of the curves displayed, enabled by setting UseCurves
        """
        ...
    
    def SetFontSize(self, p_float):
        """
        V.SetFontSize(float)
        C++: virtual void SetFontSize(double _arg)
        
        Access plot properties
        """
        ...
    
    def SetFunctionBrushThreshold(self, p_float):
        """
        V.SetFunctionBrushThreshold(float)
        C++: virtual void SetFunctionBrushThreshold(double _arg)
        
        Maximum angle difference (in degrees) of selection using
        angle/function brushes
        """
        ...
    
    def SetLineColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetLineColor(float, float, float)
        C++: virtual void SetLineColor(double _arg1, double _arg2,
            double _arg3)
        V.SetLineColor((float, float, float))
        C++: virtual void SetLineColor(const double _arg[3])
        
        Access plot properties
        """
        ...
    
    def SetLineOpacity(self, p_float):
        """
        V.SetLineOpacity(float)
        C++: virtual void SetLineOpacity(double _arg)
        
        Access plot properties
        """
        ...
    
    def SetNumberOfAxisLabels(self, p_int):
        """
        V.SetNumberOfAxisLabels(int)
        C++: void SetNumberOfAxisLabels(int num)
        
        Set/Get the number of labels to display on each axis
        """
        ...
    
    def SetPlotTitle(self, string):
        """
        V.SetPlotTitle(string)
        C++: void SetPlotTitle(const char *)
        
        Set the title for the entire plot
        """
        ...
    
    def SetPositionAndSize(self, *float, **kwargs):
        """
        V.SetPositionAndSize([float, ...], [float, ...]) -> int
        C++: int SetPositionAndSize(double *position, double *size)
        
        Change the position of the plot
        """
        ...
    
    def SetRangeAtPosition(self, p_int, p_float=..., p_float=...):
        """
        V.SetRangeAtPosition(int, [float, float]) -> int
        C++: virtual int SetRangeAtPosition(int position, double range[2])
        
        Set/get the value range of the axis at a particular screen
        position
        """
        ...
    
    def SetUseCurves(self, p_int):
        """
        V.SetUseCurves(int)
        C++: virtual void SetUseCurves(vtkTypeBool _arg)
        
        Whether or not to display using curves
        """
        ...
    
    def SetXCoordinateOfPosition(self, p_int, p_float):
        """
        V.SetXCoordinateOfPosition(int, float) -> int
        C++: int SetXCoordinateOfPosition(int position, double xcoord)
        
        Move an axis to a particular screen position.  Using these
        methods requires an Update() before they will work properly.
        """
        ...
    
    def SwapAxisPositions(self, p_int, p_int_1):
        """
        V.SwapAxisPositions(int, int) -> int
        C++: virtual int SwapAxisPositions(int position1, int position2)
        
        Move an axis to a particular screen position.  Using these
        methods requires an Update() before they will work properly.
        """
        ...
    
    def UseCurvesOff(self):
        """
        V.UseCurvesOff()
        C++: virtual void UseCurvesOff()
        
        Whether or not to display using curves
        """
        ...
    
    def UseCurvesOn(self):
        """
        V.UseCurvesOn()
        C++: virtual void UseCurvesOn()
        
        Whether or not to display using curves
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    InputPorts = ...
    INPUT_DATA = ...
    INPUT_TITLES = ...
    NUM_INPUT_PORTS = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParallelCoordinatesHistogramRepresentation(vtkParallelCoordinatesRepresentation):
    """
    vtkParallelCoordinatesHistogramRepresentation - Data representation
     that takes generic multivariate data and produces a parallel
    coordinates plot.
    
    Superclass: vtkParallelCoordinatesRepresentation
    
    This plot optionally can draw a histogram-based plot summary.
    
    
     A parallel coordinates plot represents each variable in a
    multivariate
     data set as a separate axis.  Individual samples of that data set
    are
     represented as a polyline that pass through each variable axis at
     positions that correspond to data values.  This class can generate
     parallel coordinates plots identical to its superclass
     (vtkParallelCoordinatesRepresentation) and has the same interaction
     styles.
    
    
     In addition to the standard parallel coordinates plot, this class
    also
     can draw a histogram summary of the parallel coordinates plot.
     Rather than draw every row in an input data set, first it computes
     a 2D histogram for all neighboring variable axes, then it draws
     bar (thickness corresponds to bin size) for each bin the histogram
     with opacity weighted by the number of rows contained in the bin.
     The result is essentially a density map.
    
    
     Because this emphasizes dense regions over sparse outliers, this
    class
     also uses a vtkComputeHistogram2DOutliers instance to identify
    outlier
     table rows and draws those as standard parallel coordinates lines.
    
    @sa
     vtkParallelCoordinatesView vtkParallelCoordinatesRepresentation
     vtkExtractHistogram2D vtkComputeHistogram2DOutliers
    
    @par Thanks:
     Developed by David Feng at Sandia National Laboratories
    """
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: void ApplyViewTheme(vtkViewTheme *theme) override;
        
        Apply the theme to this view.
        """
        ...
    
    def GetHistogramLookupTableRange(self):
        """
        V.GetHistogramLookupTableRange() -> (float, float)
        C++: virtual double *GetHistogramLookupTableRange()
        
        Control over the range of the lookup table used to draw the
        histogram quads.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfHistogramBins(self):
        """
        V.GetNumberOfHistogramBins() -> (int, int)
        C++: virtual int *GetNumberOfHistogramBins()
        
        The number of histogram bins on either side of each pair of axes.
        """
        ...
    
    def GetPreferredNumberOfOutliers(self):
        """
        V.GetPreferredNumberOfOutliers() -> int
        C++: virtual int GetPreferredNumberOfOutliers()
        
        Target maximum number of outliers to be drawn, although not
        guaranteed.
        """
        ...
    
    def GetShowOutliers(self):
        """
        V.GetShowOutliers() -> int
        C++: virtual vtkTypeBool GetShowOutliers()
        
        Whether to compute and show outlier lines
        """
        ...
    
    def GetUseHistograms(self):
        """
        V.GetUseHistograms() -> int
        C++: virtual vtkTypeBool GetUseHistograms()
        
        Whether to use the histogram rendering mode or the superclass's
        line rendering mode
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParallelCoordinatesHistogramRepresentation
        C++: vtkParallelCoordinatesHistogramRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkParallelCoordinatesHistogramRepresentation
        C++: static vtkParallelCoordinatesHistogramRepresentation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetHistogramLookupTableRange(self, p_float, p_float_1):
        """
        V.SetHistogramLookupTableRange(float, float)
        C++: virtual void SetHistogramLookupTableRange(double _arg1,
            double _arg2)
        V.SetHistogramLookupTableRange((float, float))
        C++: void SetHistogramLookupTableRange(const double _arg[2])
        
        Control over the range of the lookup table used to draw the
        histogram quads.
        """
        ...
    
    def SetNumberOfHistogramBins(self, p_int, p_int_1):
        """
        V.SetNumberOfHistogramBins(int, int)
        C++: void SetNumberOfHistogramBins(int, int)
        V.SetNumberOfHistogramBins([int, ...])
        C++: void SetNumberOfHistogramBins(int *)
        
        The number of histogram bins on either side of each pair of axes.
        """
        ...
    
    def SetPreferredNumberOfOutliers(self, p_int):
        """
        V.SetPreferredNumberOfOutliers(int)
        C++: void SetPreferredNumberOfOutliers(int)
        
        Target maximum number of outliers to be drawn, although not
        guaranteed.
        """
        ...
    
    def SetRangeAtPosition(self, p_int, p_float=..., p_float=...):
        """
        V.SetRangeAtPosition(int, [float, float]) -> int
        C++: int SetRangeAtPosition(int position, double range[2])
            override;
        
        Calls the superclass method, and assures that only the two
        histograms affect by this call get recomputed.
        """
        ...
    
    def SetShowOutliers(self, p_int):
        """
        V.SetShowOutliers(int)
        C++: virtual void SetShowOutliers(vtkTypeBool)
        
        Whether to compute and show outlier lines
        """
        ...
    
    def SetUseHistograms(self, p_int):
        """
        V.SetUseHistograms(int)
        C++: virtual void SetUseHistograms(vtkTypeBool)
        
        Whether to use the histogram rendering mode or the superclass's
        line rendering mode
        """
        ...
    
    def ShowOutliersOff(self):
        """
        V.ShowOutliersOff()
        C++: virtual void ShowOutliersOff()
        
        Whether to compute and show outlier lines
        """
        ...
    
    def ShowOutliersOn(self):
        """
        V.ShowOutliersOn()
        C++: virtual void ShowOutliersOn()
        
        Whether to compute and show outlier lines
        """
        ...
    
    def SwapAxisPositions(self, p_int, p_int_1):
        """
        V.SwapAxisPositions(int, int) -> int
        C++: int SwapAxisPositions(int position1, int position2) override;
        
        Calls superclass swap, and assures that only histograms affected
        by the swap get recomputed.
        """
        ...
    
    def UseHistogramsOff(self):
        """
        V.UseHistogramsOff()
        C++: virtual void UseHistogramsOff()
        
        Whether to use the histogram rendering mode or the superclass's
        line rendering mode
        """
        ...
    
    def UseHistogramsOn(self):
        """
        V.UseHistogramsOn()
        C++: virtual void UseHistogramsOn()
        
        Whether to use the histogram rendering mode or the superclass's
        line rendering mode
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParallelCoordinatesView(vtkRenderView):
    """
    vtkParallelCoordinatesView - view to be used with
    vtkParallelCoordinatesRepresentation
    
    Superclass: vtkRenderView
    
    This class manages interaction with the
    vtkParallelCoordinatesRepresentation.  There are two inspection
    modes: axis manipulation and line selection.  In axis manipulation
    mode, PC axes can be dragged and reordered with the LMB, axis ranges
    can be increased/decreased by dragging up/down with the LMB, and RMB
    controls zoom and pan.
    
    In line selection mode, there are three subclasses of selections:
    lasso, angle, and function selection.  Lasso selection lets the user
    brush a line and select all PC lines that pass nearby.  Angle
    selection lets the user draw a representative line between axes and
    select all lines that have similar orientation.  Function selection
    lets the user draw two representative lines between a pair of axes
    and select all lines that match the linear interpolation of those
    lines.
    
    There are several self-explanatory operators for combining
    selections: ADD, SUBTRACT REPLACE, and INTERSECT.
    """
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: void ApplyViewTheme(vtkViewTheme *theme) override;
        
        Applies a view theme to this view.
        """
        ...
    
    def GetBrushMode(self):
        """
        V.GetBrushMode() -> int
        C++: virtual int GetBrushMode()
        """
        ...
    
    def GetBrushOperator(self):
        """
        V.GetBrushOperator() -> int
        C++: virtual int GetBrushOperator()
        """
        ...
    
    def GetCurrentBrushClass(self):
        """
        V.GetCurrentBrushClass() -> int
        C++: virtual int GetCurrentBrushClass()
        """
        ...
    
    def GetInspectMode(self):
        """
        V.GetInspectMode() -> int
        C++: virtual int GetInspectMode()
        """
        ...
    
    def GetMaximumNumberOfBrushPoints(self):
        """
        V.GetMaximumNumberOfBrushPoints() -> int
        C++: virtual int GetMaximumNumberOfBrushPoints()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParallelCoordinatesView
        C++: vtkParallelCoordinatesView *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParallelCoordinatesView
        C++: static vtkParallelCoordinatesView *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBrushMode(self, p_int):
        """
        V.SetBrushMode(int)
        C++: void SetBrushMode(int)
        """
        ...
    
    def SetBrushModeToAngle(self):
        """
        V.SetBrushModeToAngle()
        C++: void SetBrushModeToAngle()
        """
        ...
    
    def SetBrushModeToAxisThreshold(self):
        """
        V.SetBrushModeToAxisThreshold()
        C++: void SetBrushModeToAxisThreshold()
        """
        ...
    
    def SetBrushModeToFunction(self):
        """
        V.SetBrushModeToFunction()
        C++: void SetBrushModeToFunction()
        """
        ...
    
    def SetBrushModeToLasso(self):
        """
        V.SetBrushModeToLasso()
        C++: void SetBrushModeToLasso()
        """
        ...
    
    def SetBrushOperator(self, p_int):
        """
        V.SetBrushOperator(int)
        C++: void SetBrushOperator(int)
        """
        ...
    
    def SetBrushOperatorToAdd(self):
        """
        V.SetBrushOperatorToAdd()
        C++: void SetBrushOperatorToAdd()
        """
        ...
    
    def SetBrushOperatorToIntersect(self):
        """
        V.SetBrushOperatorToIntersect()
        C++: void SetBrushOperatorToIntersect()
        """
        ...
    
    def SetBrushOperatorToReplace(self):
        """
        V.SetBrushOperatorToReplace()
        C++: void SetBrushOperatorToReplace()
        """
        ...
    
    def SetBrushOperatorToSubtract(self):
        """
        V.SetBrushOperatorToSubtract()
        C++: void SetBrushOperatorToSubtract()
        """
        ...
    
    def SetCurrentBrushClass(self, p_int):
        """
        V.SetCurrentBrushClass(int)
        C++: virtual void SetCurrentBrushClass(int _arg)
        """
        ...
    
    def SetInpsectModeToSelectData(self):
        """
        V.SetInpsectModeToSelectData()
        C++: void SetInpsectModeToSelectData()
        """
        ...
    
    def SetInspectMode(self, p_int):
        """
        V.SetInspectMode(int)
        C++: void SetInspectMode(int)
        """
        ...
    
    def SetInspectModeToManipulateAxes(self):
        """
        V.SetInspectModeToManipulateAxes()
        C++: void SetInspectModeToManipulateAxes()
        """
        ...
    
    def SetMaximumNumberOfBrushPoints(self, p_int):
        """
        V.SetMaximumNumberOfBrushPoints(int)
        C++: void SetMaximumNumberOfBrushPoints(int)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    VTK_BRUSHOPERATOR_ADD = ...
    VTK_BRUSHOPERATOR_INTERSECT = ...
    VTK_BRUSHOPERATOR_MODECOUNT = ...
    VTK_BRUSHOPERATOR_REPLACE = ...
    VTK_BRUSHOPERATOR_SUBTRACT = ...
    VTK_BRUSH_ANGLE = ...
    VTK_BRUSH_AXISTHRESHOLD = ...
    VTK_BRUSH_FUNCTION = ...
    VTK_BRUSH_LASSO = ...
    VTK_BRUSH_MODECOUNT = ...
    VTK_INSPECT_MANIPULATE_AXES = ...
    VTK_INSPECT_MODECOUNT = ...
    VTK_INSPECT_SELECT_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRenderedGraphRepresentation(vtkRenderedRepresentation):
    """
    vtkRenderedGraphRepresentation - 
    
    Superclass: vtkRenderedRepresentation
    """
    def AddEdgeIconType(self, string, p_int):
        """
        V.AddEdgeIconType(string, int)
        C++: virtual void AddEdgeIconType(const char *name, int type)
        """
        ...
    
    def AddVertexIconType(self, string, p_int):
        """
        V.AddVertexIconType(string, int)
        C++: virtual void AddVertexIconType(const char *name, int type)
        """
        ...
    
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: void ApplyViewTheme(vtkViewTheme *theme) override;
        
        Apply a theme to this representation.
        """
        ...
    
    def ClearEdgeIconTypes(self):
        """
        V.ClearEdgeIconTypes()
        C++: virtual void ClearEdgeIconTypes()
        """
        ...
    
    def ClearVertexIconTypes(self):
        """
        V.ClearVertexIconTypes()
        C++: virtual void ClearVertexIconTypes()
        """
        ...
    
    def ColorEdgesByArrayOff(self):
        """
        V.ColorEdgesByArrayOff()
        C++: virtual void ColorEdgesByArrayOff()
        """
        ...
    
    def ColorEdgesByArrayOn(self):
        """
        V.ColorEdgesByArrayOn()
        C++: virtual void ColorEdgesByArrayOn()
        """
        ...
    
    def ColorVerticesByArrayOff(self):
        """
        V.ColorVerticesByArrayOff()
        C++: virtual void ColorVerticesByArrayOff()
        """
        ...
    
    def ColorVerticesByArrayOn(self):
        """
        V.ColorVerticesByArrayOn()
        C++: virtual void ColorVerticesByArrayOn()
        """
        ...
    
    def ComputeSelectedGraphBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeSelectedGraphBounds([float, float, float, float, float,
            float])
        C++: void ComputeSelectedGraphBounds(double bounds[6])
        
        Compute the bounding box of the selected subgraph.
        """
        ...
    
    def EdgeIconVisibilityOff(self):
        """
        V.EdgeIconVisibilityOff()
        C++: virtual void EdgeIconVisibilityOff()
        """
        ...
    
    def EdgeIconVisibilityOn(self):
        """
        V.EdgeIconVisibilityOn()
        C++: virtual void EdgeIconVisibilityOn()
        """
        ...
    
    def EdgeLabelVisibilityOff(self):
        """
        V.EdgeLabelVisibilityOff()
        C++: virtual void EdgeLabelVisibilityOff()
        """
        ...
    
    def EdgeLabelVisibilityOn(self):
        """
        V.EdgeLabelVisibilityOn()
        C++: virtual void EdgeLabelVisibilityOn()
        """
        ...
    
    def EdgeVisibilityOff(self):
        """
        V.EdgeVisibilityOff()
        C++: virtual void EdgeVisibilityOff()
        """
        ...
    
    def EdgeVisibilityOn(self):
        """
        V.EdgeVisibilityOn()
        C++: virtual void EdgeVisibilityOn()
        """
        ...
    
    def EnableEdgesByArrayOff(self):
        """
        V.EnableEdgesByArrayOff()
        C++: virtual void EnableEdgesByArrayOff()
        """
        ...
    
    def EnableEdgesByArrayOn(self):
        """
        V.EnableEdgesByArrayOn()
        C++: virtual void EnableEdgesByArrayOn()
        """
        ...
    
    def EnableVerticesByArrayOff(self):
        """
        V.EnableVerticesByArrayOff()
        C++: virtual void EnableVerticesByArrayOff()
        """
        ...
    
    def EnableVerticesByArrayOn(self):
        """
        V.EnableVerticesByArrayOn()
        C++: virtual void EnableVerticesByArrayOn()
        """
        ...
    
    def GetColorEdgesByArray(self):
        """
        V.GetColorEdgesByArray() -> bool
        C++: virtual bool GetColorEdgesByArray()
        """
        ...
    
    def GetColorVerticesByArray(self):
        """
        V.GetColorVerticesByArray() -> bool
        C++: virtual bool GetColorVerticesByArray()
        """
        ...
    
    def GetEdgeColorArrayName(self):
        """
        V.GetEdgeColorArrayName() -> string
        C++: virtual const char *GetEdgeColorArrayName()
        """
        ...
    
    def GetEdgeHoverArrayName(self):
        """
        V.GetEdgeHoverArrayName() -> string
        C++: virtual char *GetEdgeHoverArrayName()
        """
        ...
    
    def GetEdgeIconAlignment(self):
        """
        V.GetEdgeIconAlignment() -> int
        C++: virtual int GetEdgeIconAlignment()
        """
        ...
    
    def GetEdgeIconArrayName(self):
        """
        V.GetEdgeIconArrayName() -> string
        C++: virtual const char *GetEdgeIconArrayName()
        """
        ...
    
    def GetEdgeIconPriorityArrayName(self):
        """
        V.GetEdgeIconPriorityArrayName() -> string
        C++: virtual const char *GetEdgeIconPriorityArrayName()
        """
        ...
    
    def GetEdgeIconVisibility(self):
        """
        V.GetEdgeIconVisibility() -> bool
        C++: virtual bool GetEdgeIconVisibility()
        """
        ...
    
    def GetEdgeLabelArrayName(self):
        """
        V.GetEdgeLabelArrayName() -> string
        C++: virtual const char *GetEdgeLabelArrayName()
        """
        ...
    
    def GetEdgeLabelPriorityArrayName(self):
        """
        V.GetEdgeLabelPriorityArrayName() -> string
        C++: virtual const char *GetEdgeLabelPriorityArrayName()
        """
        ...
    
    def GetEdgeLabelTextProperty(self):
        """
        V.GetEdgeLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetEdgeLabelTextProperty()
        """
        ...
    
    def GetEdgeLabelVisibility(self):
        """
        V.GetEdgeLabelVisibility() -> bool
        C++: virtual bool GetEdgeLabelVisibility()
        """
        ...
    
    def GetEdgeLayoutStrategy(self):
        """
        V.GetEdgeLayoutStrategy() -> vtkEdgeLayoutStrategy
        C++: virtual vtkEdgeLayoutStrategy *GetEdgeLayoutStrategy()
        
        Set/get the graph layout strategy.
        """
        ...
    
    def GetEdgeLayoutStrategyName(self):
        """
        V.GetEdgeLayoutStrategyName() -> string
        C++: virtual char *GetEdgeLayoutStrategyName()
        
        Set the edge layout strategy by name.
        """
        ...
    
    def GetEdgeScalarBar(self):
        """
        V.GetEdgeScalarBar() -> vtkScalarBarWidget
        C++: virtual vtkScalarBarWidget *GetEdgeScalarBar()
        
        Obtain the scalar bar widget used to draw a legend for the
        vertices/edges.
        """
        ...
    
    def GetEdgeScalarBarVisibility(self):
        """
        V.GetEdgeScalarBarVisibility() -> bool
        C++: virtual bool GetEdgeScalarBarVisibility()
        
        Vertex/edge scalar bar visibility.
        """
        ...
    
    def GetEdgeSelection(self):
        """
        V.GetEdgeSelection() -> bool
        C++: bool GetEdgeSelection()
        """
        ...
    
    def GetEdgeVisibility(self):
        """
        V.GetEdgeVisibility() -> bool
        C++: virtual bool GetEdgeVisibility()
        """
        ...
    
    def GetEnabledEdgesArrayName(self):
        """
        V.GetEnabledEdgesArrayName() -> string
        C++: virtual const char *GetEnabledEdgesArrayName()
        """
        ...
    
    def GetEnabledVerticesArrayName(self):
        """
        V.GetEnabledVerticesArrayName() -> string
        C++: virtual const char *GetEnabledVerticesArrayName()
        """
        ...
    
    def GetEnableEdgesByArray(self):
        """
        V.GetEnableEdgesByArray() -> bool
        C++: virtual bool GetEnableEdgesByArray()
        """
        ...
    
    def GetEnableVerticesByArray(self):
        """
        V.GetEnableVerticesByArray() -> bool
        C++: virtual bool GetEnableVerticesByArray()
        """
        ...
    
    def GetGlyphType(self):
        """
        V.GetGlyphType() -> int
        C++: virtual int GetGlyphType()
        
        Set the graph vertex glyph type.
        """
        ...
    
    def GetHideEdgeLabelsOnInteraction(self):
        """
        V.GetHideEdgeLabelsOnInteraction() -> bool
        C++: virtual bool GetHideEdgeLabelsOnInteraction()
        
        Whether to hide the display of edge labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def GetHideVertexLabelsOnInteraction(self):
        """
        V.GetHideVertexLabelsOnInteraction() -> bool
        C++: virtual bool GetHideVertexLabelsOnInteraction()
        
        Whether to hide the display of vertex labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def GetLayoutStrategy(self):
        """
        V.GetLayoutStrategy() -> vtkGraphLayoutStrategy
        C++: virtual vtkGraphLayoutStrategy *GetLayoutStrategy()
        
        Set/get the graph layout strategy.
        """
        ...
    
    def GetLayoutStrategyName(self):
        """
        V.GetLayoutStrategyName() -> string
        C++: virtual char *GetLayoutStrategyName()
        
        Get/set the layout strategy by name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaling(self):
        """
        V.GetScaling() -> bool
        C++: virtual bool GetScaling()
        
        Set whether to scale vertex glyphs.
        """
        ...
    
    def GetScalingArrayName(self):
        """
        V.GetScalingArrayName() -> string
        C++: virtual const char *GetScalingArrayName()
        
        Set the glyph scaling array name.
        """
        ...
    
    def GetUseEdgeIconTypeMap(self):
        """
        V.GetUseEdgeIconTypeMap() -> bool
        C++: virtual bool GetUseEdgeIconTypeMap()
        """
        ...
    
    def GetUseVertexIconTypeMap(self):
        """
        V.GetUseVertexIconTypeMap() -> bool
        C++: virtual bool GetUseVertexIconTypeMap()
        """
        ...
    
    def GetVertexColorArrayName(self):
        """
        V.GetVertexColorArrayName() -> string
        C++: virtual const char *GetVertexColorArrayName()
        """
        ...
    
    def GetVertexDefaultIcon(self):
        """
        V.GetVertexDefaultIcon() -> int
        C++: virtual int GetVertexDefaultIcon()
        """
        ...
    
    def GetVertexHoverArrayName(self):
        """
        V.GetVertexHoverArrayName() -> string
        C++: virtual char *GetVertexHoverArrayName()
        """
        ...
    
    def GetVertexIconAlignment(self):
        """
        V.GetVertexIconAlignment() -> int
        C++: virtual int GetVertexIconAlignment()
        """
        ...
    
    def GetVertexIconArrayName(self):
        """
        V.GetVertexIconArrayName() -> string
        C++: virtual const char *GetVertexIconArrayName()
        """
        ...
    
    def GetVertexIconPriorityArrayName(self):
        """
        V.GetVertexIconPriorityArrayName() -> string
        C++: virtual const char *GetVertexIconPriorityArrayName()
        """
        ...
    
    def GetVertexIconSelectionMode(self):
        """
        V.GetVertexIconSelectionMode() -> int
        C++: virtual int GetVertexIconSelectionMode()
        
        Set the mode to one of  vtkApplyIcons::SELECTED_ICON - use
        VertexSelectedIcon vtkApplyIcons::SELECTED_OFFSET - use
        VertexSelectedIcon as offset vtkApplyIcons::ANNOTATION_ICON - use
        current annotation icon vtkApplyIcons::IGNORE_SELECTION - ignore
        selected elements  The default is IGNORE_SELECTION.
        """
        ...
    
    def GetVertexIconVisibility(self):
        """
        V.GetVertexIconVisibility() -> bool
        C++: virtual bool GetVertexIconVisibility()
        """
        ...
    
    def GetVertexLabelArrayName(self):
        """
        V.GetVertexLabelArrayName() -> string
        C++: virtual const char *GetVertexLabelArrayName()
        """
        ...
    
    def GetVertexLabelPriorityArrayName(self):
        """
        V.GetVertexLabelPriorityArrayName() -> string
        C++: virtual const char *GetVertexLabelPriorityArrayName()
        """
        ...
    
    def GetVertexLabelTextProperty(self):
        """
        V.GetVertexLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetVertexLabelTextProperty()
        """
        ...
    
    def GetVertexLabelVisibility(self):
        """
        V.GetVertexLabelVisibility() -> bool
        C++: virtual bool GetVertexLabelVisibility()
        """
        ...
    
    def GetVertexScalarBar(self):
        """
        V.GetVertexScalarBar() -> vtkScalarBarWidget
        C++: virtual vtkScalarBarWidget *GetVertexScalarBar()
        
        Obtain the scalar bar widget used to draw a legend for the
        vertices/edges.
        """
        ...
    
    def GetVertexScalarBarVisibility(self):
        """
        V.GetVertexScalarBarVisibility() -> bool
        C++: virtual bool GetVertexScalarBarVisibility()
        
        Vertex/edge scalar bar visibility.
        """
        ...
    
    def GetVertexSelectedIcon(self):
        """
        V.GetVertexSelectedIcon() -> int
        C++: virtual int GetVertexSelectedIcon()
        """
        ...
    
    def HideEdgeLabelsOnInteractionOff(self):
        """
        V.HideEdgeLabelsOnInteractionOff()
        C++: virtual void HideEdgeLabelsOnInteractionOff()
        
        Whether to hide the display of edge labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def HideEdgeLabelsOnInteractionOn(self):
        """
        V.HideEdgeLabelsOnInteractionOn()
        C++: virtual void HideEdgeLabelsOnInteractionOn()
        
        Whether to hide the display of edge labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def HideVertexLabelsOnInteractionOff(self):
        """
        V.HideVertexLabelsOnInteractionOff()
        C++: virtual void HideVertexLabelsOnInteractionOff()
        
        Whether to hide the display of vertex labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def HideVertexLabelsOnInteractionOn(self):
        """
        V.HideVertexLabelsOnInteractionOn()
        C++: virtual void HideVertexLabelsOnInteractionOn()
        
        Whether to hide the display of vertex labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsLayoutComplete(self):
        """
        V.IsLayoutComplete() -> bool
        C++: virtual bool IsLayoutComplete()
        
        Whether the current graph layout is complete.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderedGraphRepresentation
        C++: vtkRenderedGraphRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderedGraphRepresentation
        C++: static vtkRenderedGraphRepresentation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def ScalingOff(self):
        """
        V.ScalingOff()
        C++: virtual void ScalingOff()
        
        Set whether to scale vertex glyphs.
        """
        ...
    
    def ScalingOn(self):
        """
        V.ScalingOn()
        C++: virtual void ScalingOn()
        
        Set whether to scale vertex glyphs.
        """
        ...
    
    def SetColorEdgesByArray(self, bool):
        """
        V.SetColorEdgesByArray(bool)
        C++: virtual void SetColorEdgesByArray(bool b)
        """
        ...
    
    def SetColorVerticesByArray(self, bool):
        """
        V.SetColorVerticesByArray(bool)
        C++: virtual void SetColorVerticesByArray(bool b)
        """
        ...
    
    def SetEdgeColorArrayName(self, string):
        """
        V.SetEdgeColorArrayName(string)
        C++: virtual void SetEdgeColorArrayName(const char *name)
        """
        ...
    
    def SetEdgeHoverArrayName(self, string):
        """
        V.SetEdgeHoverArrayName(string)
        C++: virtual void SetEdgeHoverArrayName(const char *_arg)
        """
        ...
    
    def SetEdgeIconAlignment(self, p_int):
        """
        V.SetEdgeIconAlignment(int)
        C++: virtual void SetEdgeIconAlignment(int align)
        """
        ...
    
    def SetEdgeIconArrayName(self, string):
        """
        V.SetEdgeIconArrayName(string)
        C++: virtual void SetEdgeIconArrayName(const char *name)
        """
        ...
    
    def SetEdgeIconPriorityArrayName(self, string):
        """
        V.SetEdgeIconPriorityArrayName(string)
        C++: virtual void SetEdgeIconPriorityArrayName(const char *name)
        """
        ...
    
    def SetEdgeIconVisibility(self, bool):
        """
        V.SetEdgeIconVisibility(bool)
        C++: virtual void SetEdgeIconVisibility(bool b)
        """
        ...
    
    def SetEdgeLabelArrayName(self, string):
        """
        V.SetEdgeLabelArrayName(string)
        C++: virtual void SetEdgeLabelArrayName(const char *name)
        """
        ...
    
    def SetEdgeLabelPriorityArrayName(self, string):
        """
        V.SetEdgeLabelPriorityArrayName(string)
        C++: virtual void SetEdgeLabelPriorityArrayName(const char *name)
        """
        ...
    
    def SetEdgeLabelTextProperty(self, vtkTextProperty):
        """
        V.SetEdgeLabelTextProperty(vtkTextProperty)
        C++: virtual void SetEdgeLabelTextProperty(vtkTextProperty *p)
        """
        ...
    
    def SetEdgeLabelVisibility(self, bool):
        """
        V.SetEdgeLabelVisibility(bool)
        C++: virtual void SetEdgeLabelVisibility(bool b)
        """
        ...
    
    def SetEdgeLayoutStrategy(self, vtkEdgeLayoutStrategy):
        """
        V.SetEdgeLayoutStrategy(vtkEdgeLayoutStrategy)
        C++: virtual void SetEdgeLayoutStrategy(
            vtkEdgeLayoutStrategy *strategy)
        V.SetEdgeLayoutStrategy(string)
        C++: virtual void SetEdgeLayoutStrategy(const char *name)
        
        Set/get the graph layout strategy.
        """
        ...
    
    def SetEdgeLayoutStrategyToArcParallel(self):
        """
        V.SetEdgeLayoutStrategyToArcParallel()
        C++: void SetEdgeLayoutStrategyToArcParallel()
        
        Set/get the graph layout strategy.
        """
        ...
    
    def SetEdgeLayoutStrategyToGeo(self, p_float):
        """
        V.SetEdgeLayoutStrategyToGeo(float)
        C++: virtual void SetEdgeLayoutStrategyToGeo(
            double explodeFactor=0.2)
        
        Set the edge layout strategy to a geospatial arced strategy
        appropriate for vtkGeoView.
        """
        ...
    
    def SetEdgeLayoutStrategyToPassThrough(self):
        """
        V.SetEdgeLayoutStrategyToPassThrough()
        C++: void SetEdgeLayoutStrategyToPassThrough()
        
        Set/get the graph layout strategy.
        """
        ...
    
    def SetEdgeScalarBarVisibility(self, bool):
        """
        V.SetEdgeScalarBarVisibility(bool)
        C++: virtual void SetEdgeScalarBarVisibility(bool b)
        
        Vertex/edge scalar bar visibility.
        """
        ...
    
    def SetEdgeSelection(self, bool):
        """
        V.SetEdgeSelection(bool)
        C++: void SetEdgeSelection(bool b)
        """
        ...
    
    def SetEdgeVisibility(self, bool):
        """
        V.SetEdgeVisibility(bool)
        C++: virtual void SetEdgeVisibility(bool b)
        """
        ...
    
    def SetEnabledEdgesArrayName(self, string):
        """
        V.SetEnabledEdgesArrayName(string)
        C++: virtual void SetEnabledEdgesArrayName(const char *name)
        """
        ...
    
    def SetEnabledVerticesArrayName(self, string):
        """
        V.SetEnabledVerticesArrayName(string)
        C++: virtual void SetEnabledVerticesArrayName(const char *name)
        """
        ...
    
    def SetEnableEdgesByArray(self, bool):
        """
        V.SetEnableEdgesByArray(bool)
        C++: virtual void SetEnableEdgesByArray(bool b)
        """
        ...
    
    def SetEnableVerticesByArray(self, bool):
        """
        V.SetEnableVerticesByArray(bool)
        C++: virtual void SetEnableVerticesByArray(bool b)
        """
        ...
    
    def SetGlyphType(self, p_int):
        """
        V.SetGlyphType(int)
        C++: virtual void SetGlyphType(int type)
        
        Set the graph vertex glyph type.
        """
        ...
    
    def SetHideEdgeLabelsOnInteraction(self, bool):
        """
        V.SetHideEdgeLabelsOnInteraction(bool)
        C++: virtual void SetHideEdgeLabelsOnInteraction(bool _arg)
        
        Whether to hide the display of edge labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def SetHideVertexLabelsOnInteraction(self, bool):
        """
        V.SetHideVertexLabelsOnInteraction(bool)
        C++: virtual void SetHideVertexLabelsOnInteraction(bool _arg)
        
        Whether to hide the display of vertex labels during mouse
        interaction.  Default is off.
        """
        ...
    
    def SetLayoutStrategy(self, vtkGraphLayoutStrategy):
        """
        V.SetLayoutStrategy(vtkGraphLayoutStrategy)
        C++: virtual void SetLayoutStrategy(
            vtkGraphLayoutStrategy *strategy)
        V.SetLayoutStrategy(string)
        C++: virtual void SetLayoutStrategy(const char *name)
        
        Set/get the graph layout strategy.
        """
        ...
    
    def SetLayoutStrategyToAssignCoordinates(self, string, string_1, string_2):
        """
        V.SetLayoutStrategyToAssignCoordinates(string, string, string)
        C++: virtual void SetLayoutStrategyToAssignCoordinates(
            const char *xarr, const char *yarr=nullptr,
            const char *zarr=nullptr)
        
        Set the layout strategy to use coordinates from arrays. The x
        array must be specified. The y and z arrays are optional.
        """
        ...
    
    def SetLayoutStrategyToCircular(self):
        """
        V.SetLayoutStrategyToCircular()
        C++: void SetLayoutStrategyToCircular()
        """
        ...
    
    def SetLayoutStrategyToClustering2D(self):
        """
        V.SetLayoutStrategyToClustering2D()
        C++: void SetLayoutStrategyToClustering2D()
        """
        ...
    
    def SetLayoutStrategyToCommunity2D(self):
        """
        V.SetLayoutStrategyToCommunity2D()
        C++: void SetLayoutStrategyToCommunity2D()
        """
        ...
    
    def SetLayoutStrategyToCone(self):
        """
        V.SetLayoutStrategyToCone()
        C++: void SetLayoutStrategyToCone()
        """
        ...
    
    def SetLayoutStrategyToCosmicTree(self):
        """
        V.SetLayoutStrategyToCosmicTree()
        C++: void SetLayoutStrategyToCosmicTree()
        V.SetLayoutStrategyToCosmicTree(string, bool, int, int)
        C++: virtual void SetLayoutStrategyToCosmicTree(
            const char *nodeSizeArrayName, bool sizeLeafNodesOnly=true,
            int layoutDepth=0, vtkIdType layoutRoot=-1)
        """
        ...
    
    def SetLayoutStrategyToFast2D(self):
        """
        V.SetLayoutStrategyToFast2D()
        C++: void SetLayoutStrategyToFast2D()
        """
        ...
    
    def SetLayoutStrategyToForceDirected(self):
        """
        V.SetLayoutStrategyToForceDirected()
        C++: void SetLayoutStrategyToForceDirected()
        """
        ...
    
    def SetLayoutStrategyToPassThrough(self):
        """
        V.SetLayoutStrategyToPassThrough()
        C++: void SetLayoutStrategyToPassThrough()
        """
        ...
    
    def SetLayoutStrategyToRandom(self):
        """
        V.SetLayoutStrategyToRandom()
        C++: void SetLayoutStrategyToRandom()
        
        Set predefined layout strategies.
        """
        ...
    
    def SetLayoutStrategyToSimple2D(self):
        """
        V.SetLayoutStrategyToSimple2D()
        C++: void SetLayoutStrategyToSimple2D()
        """
        ...
    
    def SetLayoutStrategyToSpanTree(self):
        """
        V.SetLayoutStrategyToSpanTree()
        C++: void SetLayoutStrategyToSpanTree()
        """
        ...
    
    def SetLayoutStrategyToTree(self):
        """
        V.SetLayoutStrategyToTree()
        C++: void SetLayoutStrategyToTree()
        V.SetLayoutStrategyToTree(bool, float, float, float)
        C++: virtual void SetLayoutStrategyToTree(bool radial,
            double angle=90, double leafSpacing=0.9,
            double logSpacing=1.0)
        """
        ...
    
    def SetScaling(self, bool):
        """
        V.SetScaling(bool)
        C++: virtual void SetScaling(bool b)
        
        Set whether to scale vertex glyphs.
        """
        ...
    
    def SetScalingArrayName(self, string):
        """
        V.SetScalingArrayName(string)
        C++: virtual void SetScalingArrayName(const char *name)
        
        Set the glyph scaling array name.
        """
        ...
    
    def SetUseEdgeIconTypeMap(self, bool):
        """
        V.SetUseEdgeIconTypeMap(bool)
        C++: virtual void SetUseEdgeIconTypeMap(bool b)
        """
        ...
    
    def SetUseVertexIconTypeMap(self, bool):
        """
        V.SetUseVertexIconTypeMap(bool)
        C++: virtual void SetUseVertexIconTypeMap(bool b)
        """
        ...
    
    def SetVertexColorArrayName(self, string):
        """
        V.SetVertexColorArrayName(string)
        C++: virtual void SetVertexColorArrayName(const char *name)
        """
        ...
    
    def SetVertexDefaultIcon(self, p_int):
        """
        V.SetVertexDefaultIcon(int)
        C++: virtual void SetVertexDefaultIcon(int icon)
        """
        ...
    
    def SetVertexHoverArrayName(self, string):
        """
        V.SetVertexHoverArrayName(string)
        C++: virtual void SetVertexHoverArrayName(const char *_arg)
        """
        ...
    
    def SetVertexIconAlignment(self, p_int):
        """
        V.SetVertexIconAlignment(int)
        C++: virtual void SetVertexIconAlignment(int align)
        """
        ...
    
    def SetVertexIconArrayName(self, string):
        """
        V.SetVertexIconArrayName(string)
        C++: virtual void SetVertexIconArrayName(const char *name)
        """
        ...
    
    def SetVertexIconPriorityArrayName(self, string):
        """
        V.SetVertexIconPriorityArrayName(string)
        C++: virtual void SetVertexIconPriorityArrayName(const char *name)
        """
        ...
    
    def SetVertexIconSelectionMode(self, p_int):
        """
        V.SetVertexIconSelectionMode(int)
        C++: virtual void SetVertexIconSelectionMode(int mode)
        
        Set the mode to one of  vtkApplyIcons::SELECTED_ICON - use
        VertexSelectedIcon vtkApplyIcons::SELECTED_OFFSET - use
        VertexSelectedIcon as offset vtkApplyIcons::ANNOTATION_ICON - use
        current annotation icon vtkApplyIcons::IGNORE_SELECTION - ignore
        selected elements  The default is IGNORE_SELECTION.
        """
        ...
    
    def SetVertexIconSelectionModeToAnnotationIcon(self):
        """
        V.SetVertexIconSelectionModeToAnnotationIcon()
        C++: virtual void SetVertexIconSelectionModeToAnnotationIcon()
        
        Set the mode to one of  vtkApplyIcons::SELECTED_ICON - use
        VertexSelectedIcon vtkApplyIcons::SELECTED_OFFSET - use
        VertexSelectedIcon as offset vtkApplyIcons::ANNOTATION_ICON - use
        current annotation icon vtkApplyIcons::IGNORE_SELECTION - ignore
        selected elements  The default is IGNORE_SELECTION.
        """
        ...
    
    def SetVertexIconSelectionModeToIgnoreSelection(self):
        """
        V.SetVertexIconSelectionModeToIgnoreSelection()
        C++: virtual void SetVertexIconSelectionModeToIgnoreSelection()
        
        Set the mode to one of  vtkApplyIcons::SELECTED_ICON - use
        VertexSelectedIcon vtkApplyIcons::SELECTED_OFFSET - use
        VertexSelectedIcon as offset vtkApplyIcons::ANNOTATION_ICON - use
        current annotation icon vtkApplyIcons::IGNORE_SELECTION - ignore
        selected elements  The default is IGNORE_SELECTION.
        """
        ...
    
    def SetVertexIconSelectionModeToSelectedIcon(self):
        """
        V.SetVertexIconSelectionModeToSelectedIcon()
        C++: virtual void SetVertexIconSelectionModeToSelectedIcon()
        
        Set the mode to one of  vtkApplyIcons::SELECTED_ICON - use
        VertexSelectedIcon vtkApplyIcons::SELECTED_OFFSET - use
        VertexSelectedIcon as offset vtkApplyIcons::ANNOTATION_ICON - use
        current annotation icon vtkApplyIcons::IGNORE_SELECTION - ignore
        selected elements  The default is IGNORE_SELECTION.
        """
        ...
    
    def SetVertexIconSelectionModeToSelectedOffset(self):
        """
        V.SetVertexIconSelectionModeToSelectedOffset()
        C++: virtual void SetVertexIconSelectionModeToSelectedOffset()
        
        Set the mode to one of  vtkApplyIcons::SELECTED_ICON - use
        VertexSelectedIcon vtkApplyIcons::SELECTED_OFFSET - use
        VertexSelectedIcon as offset vtkApplyIcons::ANNOTATION_ICON - use
        current annotation icon vtkApplyIcons::IGNORE_SELECTION - ignore
        selected elements  The default is IGNORE_SELECTION.
        """
        ...
    
    def SetVertexIconVisibility(self, bool):
        """
        V.SetVertexIconVisibility(bool)
        C++: virtual void SetVertexIconVisibility(bool b)
        """
        ...
    
    def SetVertexLabelArrayName(self, string):
        """
        V.SetVertexLabelArrayName(string)
        C++: virtual void SetVertexLabelArrayName(const char *name)
        """
        ...
    
    def SetVertexLabelPriorityArrayName(self, string):
        """
        V.SetVertexLabelPriorityArrayName(string)
        C++: virtual void SetVertexLabelPriorityArrayName(
            const char *name)
        """
        ...
    
    def SetVertexLabelTextProperty(self, vtkTextProperty):
        """
        V.SetVertexLabelTextProperty(vtkTextProperty)
        C++: virtual void SetVertexLabelTextProperty(vtkTextProperty *p)
        """
        ...
    
    def SetVertexLabelVisibility(self, bool):
        """
        V.SetVertexLabelVisibility(bool)
        C++: virtual void SetVertexLabelVisibility(bool b)
        """
        ...
    
    def SetVertexScalarBarVisibility(self, bool):
        """
        V.SetVertexScalarBarVisibility(bool)
        C++: virtual void SetVertexScalarBarVisibility(bool b)
        
        Vertex/edge scalar bar visibility.
        """
        ...
    
    def SetVertexSelectedIcon(self, p_int):
        """
        V.SetVertexSelectedIcon(int)
        C++: virtual void SetVertexSelectedIcon(int icon)
        """
        ...
    
    def UpdateLayout(self):
        """
        V.UpdateLayout()
        C++: virtual void UpdateLayout()
        
        Performs another iteration on the graph layout.
        """
        ...
    
    def UseEdgeIconTypeMapOff(self):
        """
        V.UseEdgeIconTypeMapOff()
        C++: virtual void UseEdgeIconTypeMapOff()
        """
        ...
    
    def UseEdgeIconTypeMapOn(self):
        """
        V.UseEdgeIconTypeMapOn()
        C++: virtual void UseEdgeIconTypeMapOn()
        """
        ...
    
    def UseVertexIconTypeMapOff(self):
        """
        V.UseVertexIconTypeMapOff()
        C++: virtual void UseVertexIconTypeMapOff()
        """
        ...
    
    def UseVertexIconTypeMapOn(self):
        """
        V.UseVertexIconTypeMapOn()
        C++: virtual void UseVertexIconTypeMapOn()
        """
        ...
    
    def VertexIconVisibilityOff(self):
        """
        V.VertexIconVisibilityOff()
        C++: virtual void VertexIconVisibilityOff()
        """
        ...
    
    def VertexIconVisibilityOn(self):
        """
        V.VertexIconVisibilityOn()
        C++: virtual void VertexIconVisibilityOn()
        """
        ...
    
    def VertexLabelVisibilityOff(self):
        """
        V.VertexLabelVisibilityOff()
        C++: virtual void VertexLabelVisibilityOff()
        """
        ...
    
    def VertexLabelVisibilityOn(self):
        """
        V.VertexLabelVisibilityOn()
        C++: virtual void VertexLabelVisibilityOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRenderedHierarchyRepresentation(vtkRenderedGraphRepresentation):
    """
    vtkRenderedHierarchyRepresentation - 
    
    Superclass: vtkRenderedGraphRepresentation
    """
    def ColorGraphEdgesByArrayOff(self):
        """
        V.ColorGraphEdgesByArrayOff()
        C++: virtual void ColorGraphEdgesByArrayOff()
        """
        ...
    
    def ColorGraphEdgesByArrayOn(self):
        """
        V.ColorGraphEdgesByArrayOn()
        C++: virtual void ColorGraphEdgesByArrayOn()
        """
        ...
    
    def GetBundlingStrength(self):
        """
        V.GetBundlingStrength() -> float
        C++: virtual double GetBundlingStrength()
        V.GetBundlingStrength(int) -> float
        C++: virtual double GetBundlingStrength(int idx)
        """
        ...
    
    def GetColorGraphEdgesByArray(self):
        """
        V.GetColorGraphEdgesByArray() -> bool
        C++: virtual bool GetColorGraphEdgesByArray()
        V.GetColorGraphEdgesByArray(int) -> bool
        C++: virtual bool GetColorGraphEdgesByArray(int idx)
        """
        ...
    
    def GetGraphEdgeColorArrayName(self):
        """
        V.GetGraphEdgeColorArrayName() -> string
        C++: virtual const char *GetGraphEdgeColorArrayName()
        V.GetGraphEdgeColorArrayName(int) -> string
        C++: virtual const char *GetGraphEdgeColorArrayName(int idx)
        """
        ...
    
    def GetGraphEdgeLabelArrayName(self):
        """
        V.GetGraphEdgeLabelArrayName() -> string
        C++: virtual const char *GetGraphEdgeLabelArrayName()
        V.GetGraphEdgeLabelArrayName(int) -> string
        C++: virtual const char *GetGraphEdgeLabelArrayName(int idx)
        """
        ...
    
    def GetGraphEdgeLabelFontSize(self):
        """
        V.GetGraphEdgeLabelFontSize() -> int
        C++: virtual int GetGraphEdgeLabelFontSize()
        V.GetGraphEdgeLabelFontSize(int) -> int
        C++: virtual int GetGraphEdgeLabelFontSize(int idx)
        """
        ...
    
    def GetGraphEdgeLabelVisibility(self):
        """
        V.GetGraphEdgeLabelVisibility() -> bool
        C++: virtual bool GetGraphEdgeLabelVisibility()
        V.GetGraphEdgeLabelVisibility(int) -> bool
        C++: virtual bool GetGraphEdgeLabelVisibility(int idx)
        """
        ...
    
    def GetGraphSplineType(self, p_int):
        """
        V.GetGraphSplineType(int) -> int
        C++: virtual int GetGraphSplineType(int idx)
        
        Sets the spline type for the graph edges.
        vtkSplineGraphEdges::CUSTOM uses a vtkCardinalSpline.
        vtkSplineGraphEdges::BSPLINE uses a b-spline. The default is
        BSPLINE.
        """
        ...
    
    def GetGraphVisibility(self):
        """
        V.GetGraphVisibility() -> bool
        C++: virtual bool GetGraphVisibility()
        V.GetGraphVisibility(int) -> bool
        C++: virtual bool GetGraphVisibility(int idx)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GraphEdgeLabelVisibilityOff(self):
        """
        V.GraphEdgeLabelVisibilityOff()
        C++: virtual void GraphEdgeLabelVisibilityOff()
        """
        ...
    
    def GraphEdgeLabelVisibilityOn(self):
        """
        V.GraphEdgeLabelVisibilityOn()
        C++: virtual void GraphEdgeLabelVisibilityOn()
        """
        ...
    
    def GraphVisibilityOff(self):
        """
        V.GraphVisibilityOff()
        C++: virtual void GraphVisibilityOff()
        """
        ...
    
    def GraphVisibilityOn(self):
        """
        V.GraphVisibilityOn()
        C++: virtual void GraphVisibilityOn()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderedHierarchyRepresentation
        C++: vtkRenderedHierarchyRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkRenderedHierarchyRepresentation
        C++: static vtkRenderedHierarchyRepresentation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBundlingStrength(self, p_float):
        """
        V.SetBundlingStrength(float)
        C++: virtual void SetBundlingStrength(double strength)
        V.SetBundlingStrength(float, int)
        C++: virtual void SetBundlingStrength(double strength, int idx)
        """
        ...
    
    def SetColorGraphEdgesByArray(self, bool):
        """
        V.SetColorGraphEdgesByArray(bool)
        C++: virtual void SetColorGraphEdgesByArray(bool vis)
        V.SetColorGraphEdgesByArray(bool, int)
        C++: virtual void SetColorGraphEdgesByArray(bool vis, int idx)
        """
        ...
    
    def SetGraphEdgeColorArrayName(self, string):
        """
        V.SetGraphEdgeColorArrayName(string)
        C++: virtual void SetGraphEdgeColorArrayName(const char *name)
        V.SetGraphEdgeColorArrayName(string, int)
        C++: virtual void SetGraphEdgeColorArrayName(const char *name,
            int idx)
        """
        ...
    
    def SetGraphEdgeColorToSplineFraction(self):
        """
        V.SetGraphEdgeColorToSplineFraction()
        C++: virtual void SetGraphEdgeColorToSplineFraction()
        V.SetGraphEdgeColorToSplineFraction(int)
        C++: virtual void SetGraphEdgeColorToSplineFraction(int idx)
        """
        ...
    
    def SetGraphEdgeLabelArrayName(self, string):
        """
        V.SetGraphEdgeLabelArrayName(string)
        C++: virtual void SetGraphEdgeLabelArrayName(const char *name)
        V.SetGraphEdgeLabelArrayName(string, int)
        C++: virtual void SetGraphEdgeLabelArrayName(const char *name,
            int idx)
        """
        ...
    
    def SetGraphEdgeLabelFontSize(self, p_int):
        """
        V.SetGraphEdgeLabelFontSize(int)
        C++: virtual void SetGraphEdgeLabelFontSize(int size)
        V.SetGraphEdgeLabelFontSize(int, int)
        C++: virtual void SetGraphEdgeLabelFontSize(int size, int idx)
        """
        ...
    
    def SetGraphEdgeLabelVisibility(self, bool):
        """
        V.SetGraphEdgeLabelVisibility(bool)
        C++: virtual void SetGraphEdgeLabelVisibility(bool vis)
        V.SetGraphEdgeLabelVisibility(bool, int)
        C++: virtual void SetGraphEdgeLabelVisibility(bool vis, int idx)
        """
        ...
    
    def SetGraphSplineType(self, p_int, p_int_1):
        """
        V.SetGraphSplineType(int, int)
        C++: virtual void SetGraphSplineType(int type, int idx)
        
        Sets the spline type for the graph edges.
        vtkSplineGraphEdges::CUSTOM uses a vtkCardinalSpline.
        vtkSplineGraphEdges::BSPLINE uses a b-spline. The default is
        BSPLINE.
        """
        ...
    
    def SetGraphVisibility(self, bool):
        """
        V.SetGraphVisibility(bool)
        C++: virtual void SetGraphVisibility(bool vis)
        V.SetGraphVisibility(bool, int)
        C++: virtual void SetGraphVisibility(bool vis, int idx)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRenderedSurfaceRepresentation(vtkRenderedRepresentation):
    """
    vtkRenderedSurfaceRepresentation - Displays a geometric dataset as a
    surface.
    
    Superclass: vtkRenderedRepresentation
    
    vtkRenderedSurfaceRepresentation is used to show a geometric dataset
    in a view. The representation uses a vtkGeometryFilter to convert the
    dataset to polygonal data (e.g. volumetric data is converted to its
    external surface). The representation may then be added to
    vtkRenderView.
    """
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: void ApplyViewTheme(vtkViewTheme *theme) override;
        
        Apply a theme to this representation.
        """
        ...
    
    def GetCellColorArrayName(self):
        """
        V.GetCellColorArrayName() -> string
        C++: virtual const char *GetCellColorArrayName()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderedSurfaceRepresentation
        C++: vtkRenderedSurfaceRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderedSurfaceRepresentation
        C++: static vtkRenderedSurfaceRepresentation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCellColorArrayName(self, string):
        """
        V.SetCellColorArrayName(string)
        C++: virtual void SetCellColorArrayName(const char *arrayName)
        
        Sets the color array name
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRenderedTreeAreaRepresentation(vtkRenderedRepresentation):
    """
    vtkRenderedTreeAreaRepresentation - 
    
    Superclass: vtkRenderedRepresentation
    """
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: void ApplyViewTheme(vtkViewTheme *theme) override;
        
        Apply the theme to this view.
        """
        ...
    
    def AreaLabelVisibilityOff(self):
        """
        V.AreaLabelVisibilityOff()
        C++: virtual void AreaLabelVisibilityOff()
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def AreaLabelVisibilityOn(self):
        """
        V.AreaLabelVisibilityOn()
        C++: virtual void AreaLabelVisibilityOn()
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def ColorAreasByArrayOff(self):
        """
        V.ColorAreasByArrayOff()
        C++: virtual void ColorAreasByArrayOff()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def ColorAreasByArrayOn(self):
        """
        V.ColorAreasByArrayOn()
        C++: virtual void ColorAreasByArrayOn()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def ColorGraphEdgesByArrayOff(self):
        """
        V.ColorGraphEdgesByArrayOff()
        C++: virtual void ColorGraphEdgesByArrayOff()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def ColorGraphEdgesByArrayOn(self):
        """
        V.ColorGraphEdgesByArrayOn()
        C++: virtual void ColorGraphEdgesByArrayOn()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetAreaColorArrayName(self):
        """
        V.GetAreaColorArrayName() -> string
        C++: const char *GetAreaColorArrayName()
        
        The array to use for coloring vertices.  Default is "color".
        """
        ...
    
    def GetAreaHoverArrayName(self):
        """
        V.GetAreaHoverArrayName() -> string
        C++: virtual char *GetAreaHoverArrayName()
        
        The name of the array whose value appears when the mouse hovers
        over a rectangle in the treemap.
        """
        ...
    
    def GetAreaLabelArrayName(self):
        """
        V.GetAreaLabelArrayName() -> string
        C++: virtual const char *GetAreaLabelArrayName()
        
        The array to use for area labeling.  Default is "label".
        """
        ...
    
    def GetAreaLabelMapper(self):
        """
        V.GetAreaLabelMapper() -> vtkLabeledDataMapper
        C++: virtual vtkLabeledDataMapper *GetAreaLabelMapper()
        
        The mapper for rendering labels on areas. This may e.g. be
        vtkDynamic2DLabelMapper or vtkTreeMapLabelMapper.
        """
        ...
    
    def GetAreaLabelPriorityArrayName(self):
        """
        V.GetAreaLabelPriorityArrayName() -> string
        C++: virtual const char *GetAreaLabelPriorityArrayName()
        
        The array to use for area labeling priority. Default is
        "GraphVertexDegree".
        """
        ...
    
    def GetAreaLabelTextProperty(self):
        """
        V.GetAreaLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetAreaLabelTextProperty()
        
        The text property for the area labels.
        """
        ...
    
    def GetAreaLabelVisibility(self):
        """
        V.GetAreaLabelVisibility() -> bool
        C++: virtual bool GetAreaLabelVisibility()
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def GetAreaLayoutStrategy(self):
        """
        V.GetAreaLayoutStrategy() -> vtkAreaLayoutStrategy
        C++: virtual vtkAreaLayoutStrategy *GetAreaLayoutStrategy()
        
        The layout strategy for producing spatial regions for the tree.
        """
        ...
    
    def GetAreaSizeArrayName(self):
        """
        V.GetAreaSizeArrayName() -> string
        C++: virtual const char *GetAreaSizeArrayName()
        
        The array to use for area sizes. Default is "size".
        """
        ...
    
    def GetAreaToPolyData(self):
        """
        V.GetAreaToPolyData() -> vtkPolyDataAlgorithm
        C++: virtual vtkPolyDataAlgorithm *GetAreaToPolyData()
        
        The filter for converting areas to polydata. This may e.g. be
        vtkTreeMapToPolyData or vtkTreeRingToPolyData. The filter must
        take a vtkTree as input and produce vtkPolyData.
        """
        ...
    
    def GetColorAreasByArray(self):
        """
        V.GetColorAreasByArray() -> bool
        C++: virtual bool GetColorAreasByArray()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def GetColorGraphEdgesByArray(self):
        """
        V.GetColorGraphEdgesByArray() -> bool
        C++: virtual bool GetColorGraphEdgesByArray()
        V.GetColorGraphEdgesByArray(int) -> bool
        C++: virtual bool GetColorGraphEdgesByArray(int idx)
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetEdgeScalarBarVisibility(self):
        """
        V.GetEdgeScalarBarVisibility() -> bool
        C++: virtual bool GetEdgeScalarBarVisibility()
        
        Visibility of scalar bar actor for edges.
        """
        ...
    
    def GetGraphBundlingStrength(self):
        """
        V.GetGraphBundlingStrength() -> float
        C++: virtual double GetGraphBundlingStrength()
        V.GetGraphBundlingStrength(int) -> float
        C++: virtual double GetGraphBundlingStrength(int idx)
        
        Set the bundling strength.
        """
        ...
    
    def GetGraphEdgeColorArrayName(self):
        """
        V.GetGraphEdgeColorArrayName() -> string
        C++: virtual const char *GetGraphEdgeColorArrayName()
        V.GetGraphEdgeColorArrayName(int) -> string
        C++: virtual const char *GetGraphEdgeColorArrayName(int idx)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def GetGraphEdgeLabelArrayName(self):
        """
        V.GetGraphEdgeLabelArrayName() -> string
        C++: virtual const char *GetGraphEdgeLabelArrayName()
        V.GetGraphEdgeLabelArrayName(int) -> string
        C++: virtual const char *GetGraphEdgeLabelArrayName(int idx)
        
        The array to use for edge labeling.  Default is "label".
        """
        ...
    
    def GetGraphEdgeLabelTextProperty(self):
        """
        V.GetGraphEdgeLabelTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetGraphEdgeLabelTextProperty()
        V.GetGraphEdgeLabelTextProperty(int) -> vtkTextProperty
        C++: virtual vtkTextProperty *GetGraphEdgeLabelTextProperty(
            int idx)
        
        The text property for the graph edge labels.
        """
        ...
    
    def GetGraphEdgeLabelVisibility(self):
        """
        V.GetGraphEdgeLabelVisibility() -> bool
        C++: virtual bool GetGraphEdgeLabelVisibility()
        V.GetGraphEdgeLabelVisibility(int) -> bool
        C++: virtual bool GetGraphEdgeLabelVisibility(int idx)
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GetGraphHoverArrayName(self):
        """
        V.GetGraphHoverArrayName() -> string
        C++: virtual const char *GetGraphHoverArrayName()
        V.GetGraphHoverArrayName(int) -> string
        C++: virtual const char *GetGraphHoverArrayName(int idx)
        
        The name of the array whose value appears when the mouse hovers
        over a graph edge.
        """
        ...
    
    def GetGraphSplineType(self, p_int):
        """
        V.GetGraphSplineType(int) -> int
        C++: virtual int GetGraphSplineType(int idx)
        
        Sets the spline type for the graph edges.
        vtkSplineGraphEdges::CUSTOM uses a vtkCardinalSpline.
        vtkSplineGraphEdges::BSPLINE uses a b-spline. The default is
        BSPLINE.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShrinkPercentage(self):
        """
        V.GetShrinkPercentage() -> float
        C++: virtual double GetShrinkPercentage()
        
        Set the region shrink percentage between 0.0 and 1.0.
        """
        ...
    
    def GetUseRectangularCoordinates(self):
        """
        V.GetUseRectangularCoordinates() -> bool
        C++: virtual bool GetUseRectangularCoordinates()
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def GraphEdgeLabelVisibilityOff(self):
        """
        V.GraphEdgeLabelVisibilityOff()
        C++: virtual void GraphEdgeLabelVisibilityOff()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def GraphEdgeLabelVisibilityOn(self):
        """
        V.GraphEdgeLabelVisibilityOn()
        C++: virtual void GraphEdgeLabelVisibilityOn()
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderedTreeAreaRepresentation
        C++: vtkRenderedTreeAreaRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderedTreeAreaRepresentation
        C++: static vtkRenderedTreeAreaRepresentation *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAreaColorArrayName(self, string):
        """
        V.SetAreaColorArrayName(string)
        C++: void SetAreaColorArrayName(const char *name)
        
        The array to use for coloring vertices.  Default is "color".
        """
        ...
    
    def SetAreaHoverArrayName(self, string):
        """
        V.SetAreaHoverArrayName(string)
        C++: virtual void SetAreaHoverArrayName(const char *_arg)
        
        The name of the array whose value appears when the mouse hovers
        over a rectangle in the treemap.
        """
        ...
    
    def SetAreaLabelArrayName(self, string):
        """
        V.SetAreaLabelArrayName(string)
        C++: virtual void SetAreaLabelArrayName(const char *name)
        
        The array to use for area labeling.  Default is "label".
        """
        ...
    
    def SetAreaLabelMapper(self, vtkLabeledDataMapper):
        """
        V.SetAreaLabelMapper(vtkLabeledDataMapper)
        C++: virtual void SetAreaLabelMapper(vtkLabeledDataMapper *mapper)
        
        The mapper for rendering labels on areas. This may e.g. be
        vtkDynamic2DLabelMapper or vtkTreeMapLabelMapper.
        """
        ...
    
    def SetAreaLabelPriorityArrayName(self, string):
        """
        V.SetAreaLabelPriorityArrayName(string)
        C++: virtual void SetAreaLabelPriorityArrayName(const char *name)
        
        The array to use for area labeling priority. Default is
        "GraphVertexDegree".
        """
        ...
    
    def SetAreaLabelTextProperty(self, vtkTextProperty):
        """
        V.SetAreaLabelTextProperty(vtkTextProperty)
        C++: virtual void SetAreaLabelTextProperty(vtkTextProperty *tp)
        
        The text property for the area labels.
        """
        ...
    
    def SetAreaLabelVisibility(self, bool):
        """
        V.SetAreaLabelVisibility(bool)
        C++: virtual void SetAreaLabelVisibility(bool vis)
        
        Whether to show area labels.  Default is off.
        """
        ...
    
    def SetAreaLayoutStrategy(self, vtkAreaLayoutStrategy):
        """
        V.SetAreaLayoutStrategy(vtkAreaLayoutStrategy)
        C++: virtual void SetAreaLayoutStrategy(
            vtkAreaLayoutStrategy *strategy)
        
        The layout strategy for producing spatial regions for the tree.
        """
        ...
    
    def SetAreaSizeArrayName(self, string):
        """
        V.SetAreaSizeArrayName(string)
        C++: virtual void SetAreaSizeArrayName(const char *name)
        
        The array to use for area sizes. Default is "size".
        """
        ...
    
    def SetAreaToPolyData(self, vtkPolyDataAlgorithm):
        """
        V.SetAreaToPolyData(vtkPolyDataAlgorithm)
        C++: virtual void SetAreaToPolyData(
            vtkPolyDataAlgorithm *areaToPoly)
        
        The filter for converting areas to polydata. This may e.g. be
        vtkTreeMapToPolyData or vtkTreeRingToPolyData. The filter must
        take a vtkTree as input and produce vtkPolyData.
        """
        ...
    
    def SetColorAreasByArray(self, bool):
        """
        V.SetColorAreasByArray(bool)
        C++: virtual void SetColorAreasByArray(bool vis)
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def SetColorGraphEdgesByArray(self, bool):
        """
        V.SetColorGraphEdgesByArray(bool)
        C++: virtual void SetColorGraphEdgesByArray(bool vis)
        V.SetColorGraphEdgesByArray(bool, int)
        C++: virtual void SetColorGraphEdgesByArray(bool vis, int idx)
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def SetEdgeScalarBarVisibility(self, bool):
        """
        V.SetEdgeScalarBarVisibility(bool)
        C++: virtual void SetEdgeScalarBarVisibility(bool b)
        
        Visibility of scalar bar actor for edges.
        """
        ...
    
    def SetGraphBundlingStrength(self, p_float):
        """
        V.SetGraphBundlingStrength(float)
        C++: virtual void SetGraphBundlingStrength(double strength)
        V.SetGraphBundlingStrength(float, int)
        C++: virtual void SetGraphBundlingStrength(double strength,
            int idx)
        
        Set the bundling strength.
        """
        ...
    
    def SetGraphEdgeColorArrayName(self, string):
        """
        V.SetGraphEdgeColorArrayName(string)
        C++: virtual void SetGraphEdgeColorArrayName(const char *name)
        V.SetGraphEdgeColorArrayName(string, int)
        C++: virtual void SetGraphEdgeColorArrayName(const char *name,
            int idx)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def SetGraphEdgeColorToSplineFraction(self):
        """
        V.SetGraphEdgeColorToSplineFraction()
        C++: virtual void SetGraphEdgeColorToSplineFraction()
        V.SetGraphEdgeColorToSplineFraction(int)
        C++: virtual void SetGraphEdgeColorToSplineFraction(int idx)
        
        Set the color to be the spline fraction
        """
        ...
    
    def SetGraphEdgeLabelArrayName(self, string):
        """
        V.SetGraphEdgeLabelArrayName(string)
        C++: virtual void SetGraphEdgeLabelArrayName(const char *name)
        V.SetGraphEdgeLabelArrayName(string, int)
        C++: virtual void SetGraphEdgeLabelArrayName(const char *name,
            int idx)
        
        The array to use for edge labeling.  Default is "label".
        """
        ...
    
    def SetGraphEdgeLabelTextProperty(self, vtkTextProperty):
        """
        V.SetGraphEdgeLabelTextProperty(vtkTextProperty)
        C++: virtual void SetGraphEdgeLabelTextProperty(
            vtkTextProperty *tp)
        V.SetGraphEdgeLabelTextProperty(vtkTextProperty, int)
        C++: virtual void SetGraphEdgeLabelTextProperty(
            vtkTextProperty *tp, int idx)
        
        The text property for the graph edge labels.
        """
        ...
    
    def SetGraphEdgeLabelVisibility(self, bool):
        """
        V.SetGraphEdgeLabelVisibility(bool)
        C++: virtual void SetGraphEdgeLabelVisibility(bool vis)
        V.SetGraphEdgeLabelVisibility(bool, int)
        C++: virtual void SetGraphEdgeLabelVisibility(bool vis, int idx)
        
        Whether to show edge labels.  Default is off.
        """
        ...
    
    def SetGraphHoverArrayName(self, string):
        """
        V.SetGraphHoverArrayName(string)
        C++: virtual void SetGraphHoverArrayName(const char *name)
        V.SetGraphHoverArrayName(string, int)
        C++: virtual void SetGraphHoverArrayName(const char *name,
            int idx)
        
        The name of the array whose value appears when the mouse hovers
        over a graph edge.
        """
        ...
    
    def SetGraphSplineType(self, p_int, p_int_1):
        """
        V.SetGraphSplineType(int, int)
        C++: virtual void SetGraphSplineType(int type, int idx)
        
        Sets the spline type for the graph edges.
        vtkSplineGraphEdges::CUSTOM uses a vtkCardinalSpline.
        vtkSplineGraphEdges::BSPLINE uses a b-spline. The default is
        BSPLINE.
        """
        ...
    
    def SetLabelRenderMode(self, p_int):
        """
        V.SetLabelRenderMode(int)
        C++: void SetLabelRenderMode(int mode) override;
        
        Set the label render mode. QT - Use vtkQtTreeRingLabeler with
        fitted labeling and unicode support. Requires VTK_USE_QT to be
        on. FREETYPE - Use standard freetype text rendering.
        """
        ...
    
    def SetShrinkPercentage(self, p_float):
        """
        V.SetShrinkPercentage(float)
        C++: virtual void SetShrinkPercentage(double value)
        
        Set the region shrink percentage between 0.0 and 1.0.
        """
        ...
    
    def SetUseRectangularCoordinates(self, bool):
        """
        V.SetUseRectangularCoordinates(bool)
        C++: virtual void SetUseRectangularCoordinates(bool _arg)
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def UseRectangularCoordinatesOff(self):
        """
        V.UseRectangularCoordinatesOff()
        C++: virtual void UseRectangularCoordinatesOff()
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def UseRectangularCoordinatesOn(self):
        """
        V.UseRectangularCoordinatesOn()
        C++: virtual void UseRectangularCoordinatesOn()
        
        Whether the area represents radial or rectangular coordinates.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSCurveSpline(__vtkmodules_vtkCommonDataModel.vtkSpline):
    """
    vtkSCurveSpline - computes an interpolating spline using a a SCurve
    basis.
    
    Superclass: vtkSpline
    
    vtkSCurveSpline is a concrete implementation of vtkSpline using a
    SCurve basis.
    
    @sa
    vtkSpline vtkKochanekSpline
    """
    def Compute(self):
        """
        V.Compute()
        C++: void Compute() override;
        
        Compute SCurve Splines for each dependent variable
        """
        ...
    
    def DeepCopy(self, vtkSpline):
        """
        V.DeepCopy(vtkSpline)
        C++: void DeepCopy(vtkSpline *s) override;
        
        Deep copy of SCurve spline data.
        """
        ...
    
    def Evaluate(self, p_float):
        """
        V.Evaluate(float) -> float
        C++: double Evaluate(double t) override;
        
        Evaluate a 1D SCurve spline.
        """
        ...
    
    def GetNodeWeight(self):
        """
        V.GetNodeWeight() -> float
        C++: virtual double GetNodeWeight()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSCurveSpline
        C++: vtkSCurveSpline *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSCurveSpline
        C++: static vtkSCurveSpline *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNodeWeight(self, p_float):
        """
        V.SetNodeWeight(float)
        C++: virtual void SetNodeWeight(double _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTanglegramItem(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkTanglegramItem - Display two related trees
    
    Superclass: vtkContextItem
    
    This item draws two trees with connections between their leaf nodes.
    Use SetTable() to specify what leaf nodes correspond to one another
    between the two trees.  See the documentation for this function for
    more details on how this table should be formatted.
    
    .SEE ALSO vtkTree vtkTable vtkDendrogramItem vtkNewickTreeReader
    """
    def GetCorrespondenceLineWidth(self):
        """
        V.GetCorrespondenceLineWidth() -> float
        C++: virtual float GetCorrespondenceLineWidth()
        
        Get/Set how wide the correspondence lines should be.  Default is
        two pixels.
        """
        ...
    
    def GetLabelSizeDifference(self):
        """
        V.GetLabelSizeDifference() -> int
        C++: virtual int GetLabelSizeDifference()
        
        Get/Set how much larger the dendrogram labels should be compared
        to the vertex labels.  Because the vertex labels automatically
        resize based on zoom levels, this is a relative (not absolute)
        size.  Default value is 4 pts larger than the vertex labels.
        """
        ...
    
    def GetMinimumVisibleFontSize(self):
        """
        V.GetMinimumVisibleFontSize() -> int
        C++: virtual int GetMinimumVisibleFontSize()
        
        Get/Set the smallest font size that is still considered legible.
        If the current zoom level requires our vertex labels to be
        smaller than this size the labels will not be drawn at all. 
        Default value is 8 pt.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: int GetOrientation()
        
        Get the current orientation.
        """
        ...
    
    def GetTable(self):
        """
        V.GetTable() -> vtkTable
        C++: vtkTable *GetTable()
        
        Get/Set the table that describes the correspondences between the
        two trees.  The first column should contain the names of the leaf
        nodes from tree #1.  The columns of this table should be named
        after the leaf nodes of tree #2.  A non-zero cell should be used
        to create a connection between the two trees.  Different numbers
        in the table will result in connections being drawn in different
        colors.
        """
        ...
    
    def GetTree1Label(self):
        """
        V.GetTree1Label() -> string
        C++: virtual char *GetTree1Label()
        
        Get/Set the label for tree #1.
        """
        ...
    
    def GetTree2Label(self):
        """
        V.GetTree2Label() -> string
        C++: virtual char *GetTree2Label()
        
        Get/Set the label for tree #2.
        """
        ...
    
    def GetTreeLineWidth(self):
        """
        V.GetTreeLineWidth() -> float
        C++: float GetTreeLineWidth()
        
        Get/Set how wide the edges of the trees should be.  Default is
        one pixel.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the transform is interactive, false otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseDoubleClickEvent(self, vtkContextMouseEvent):
        """
        V.MouseDoubleClickEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseDoubleClickEvent(const vtkContextMouseEvent &event)
             override;
        
        Propagate any double click onto the dendrograms to check if any
        subtrees should be collapsed or expanded.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTanglegramItem
        C++: vtkTanglegramItem *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTanglegramItem
        C++: static vtkTanglegramItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCorrespondenceLineWidth(self, p_float):
        """
        V.SetCorrespondenceLineWidth(float)
        C++: virtual void SetCorrespondenceLineWidth(float _arg)
        
        Get/Set how wide the correspondence lines should be.  Default is
        two pixels.
        """
        ...
    
    def SetLabelSizeDifference(self, p_int):
        """
        V.SetLabelSizeDifference(int)
        C++: virtual void SetLabelSizeDifference(int _arg)
        
        Get/Set how much larger the dendrogram labels should be compared
        to the vertex labels.  Because the vertex labels automatically
        resize based on zoom levels, this is a relative (not absolute)
        size.  Default value is 4 pts larger than the vertex labels.
        """
        ...
    
    def SetMinimumVisibleFontSize(self, p_int):
        """
        V.SetMinimumVisibleFontSize(int)
        C++: virtual void SetMinimumVisibleFontSize(int _arg)
        
        Get/Set the smallest font size that is still considered legible.
        If the current zoom level requires our vertex labels to be
        smaller than this size the labels will not be drawn at all. 
        Default value is 8 pt.
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: void SetOrientation(int orientation)
        
        Set which way the tanglegram should face within the
        visualization. The default is for tree #1 to be drawn left to
        right.
        """
        ...
    
    def SetTable(self, vtkTable):
        """
        V.SetTable(vtkTable)
        C++: void SetTable(vtkTable *table)
        
        Get/Set the table that describes the correspondences between the
        two trees.  The first column should contain the names of the leaf
        nodes from tree #1.  The columns of this table should be named
        after the leaf nodes of tree #2.  A non-zero cell should be used
        to create a connection between the two trees.  Different numbers
        in the table will result in connections being drawn in different
        colors.
        """
        ...
    
    def SetTree1(self, vtkTree):
        """
        V.SetTree1(vtkTree)
        C++: virtual void SetTree1(vtkTree *tree)
        
        Set the first tree
        """
        ...
    
    def SetTree1Label(self, string):
        """
        V.SetTree1Label(string)
        C++: virtual void SetTree1Label(const char *_arg)
        
        Get/Set the label for tree #1.
        """
        ...
    
    def SetTree2(self, vtkTree):
        """
        V.SetTree2(vtkTree)
        C++: virtual void SetTree2(vtkTree *tree)
        
        Set the second tree
        """
        ...
    
    def SetTree2Label(self, string):
        """
        V.SetTree2Label(string)
        C++: virtual void SetTree2Label(const char *_arg)
        
        Get/Set the label for tree #2.
        """
        ...
    
    def SetTreeLineWidth(self, p_float):
        """
        V.SetTreeLineWidth(float)
        C++: void SetTreeLineWidth(float width)
        
        Get/Set how wide the edges of the trees should be.  Default is
        one pixel.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTreeHeatmapItem(__vtkmodules_vtkRenderingContext2D.vtkContextItem):
    """
    vtkTreeHeatmapItem - A 2D graphics item for rendering a tree and an
    associated heatmap.
    
    Superclass: vtkContextItem
    
    This item draws a tree and a heatmap as a part of a vtkContextScene.
    The input tree's vertex data must contain at least two arrays. The
    first required array is a vtkStringArray called "node name". This
    array corresponds to the first column of the input table. The second
    required array is a scalar array called "node weight". This array is
    used by vtkTreeLayoutStrategy to set any particular node's distance
    from the root of the tree.
    
    The vtkNewickTreeReader automatically initializes both of these
    required arrays in its output tree.
    
    .SEE ALSO vtkDendrogramItem vtkHeatmapItem vtkTree vtkTable
    vtkNewickTreeReader
    """
    def CollapseToNumberOfLeafNodes(self, p_int):
        """
        V.CollapseToNumberOfLeafNodes(int)
        C++: void CollapseToNumberOfLeafNodes(unsigned int n)
        
        Collapse subtrees until there are only n leaf nodes left in the
        tree. The leaf nodes that remain are those that are closest to
        the root. Any subtrees that were collapsed prior to this function
        being called may be re-expanded.  Use this function instead of
        this->GetDendrogram->CollapseToNumberOfLeafNodes(), as this
        function also handles the hiding of heatmap rows that correspond
        to newly collapsed subtrees.
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float])
        C++: void GetBounds(double bounds[4])
        
        Get the bounds of this item (xMin, xMax, yMin, Max) in pixel
        coordinates.
        """
        ...
    
    def GetCenter(self, p_float=..., p_float=...):
        """
        V.GetCenter([float, float])
        C++: void GetCenter(double center[2])
        
        Get the center point of this item in pixel coordinates.
        """
        ...
    
    def GetColumnTree(self):
        """
        V.GetColumnTree() -> vtkTree
        C++: vtkTree *GetColumnTree()
        
        Get the tree that represents the columns of the heatmap (if one
        has been set).
        """
        ...
    
    def GetDendrogram(self):
        """
        V.GetDendrogram() -> vtkDendrogramItem
        C++: vtkDendrogramItem *GetDendrogram()
        
        Get/Set the dendrogram contained by this item.
        """
        ...
    
    def GetHeatmap(self):
        """
        V.GetHeatmap() -> vtkHeatmapItem
        C++: vtkHeatmapItem *GetHeatmap()
        
        Get/Set the heatmap contained by this item.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: int GetOrientation()
        
        Get the current orientation.
        """
        ...
    
    def GetPrunedTree(self):
        """
        V.GetPrunedTree() -> vtkTree
        C++: vtkTree *GetPrunedTree()
        
        Deprecated.  Use this->GetDendrogram()->GetPrunedTree() instead.
        """
        ...
    
    def GetSize(self, p_float=..., p_float=...):
        """
        V.GetSize([float, float])
        C++: void GetSize(double size[2])
        
        Get the size of this item in pixel coordinates.
        """
        ...
    
    def GetTable(self):
        """
        V.GetTable() -> vtkTable
        C++: vtkTable *GetTable()
        
        Get the table that this item draws.
        """
        ...
    
    def GetTree(self):
        """
        V.GetTree() -> vtkTree
        C++: vtkTree *GetTree()
        
        Get the tree that this item draws.
        """
        ...
    
    def GetTreeLineWidth(self):
        """
        V.GetTreeLineWidth() -> float
        C++: float GetTreeLineWidth()
        
        Get/Set how wide the edges of the trees should be.  Default is
        one pixel.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the transform is interactive, false otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseDoubleClickEvent(self, vtkContextMouseEvent):
        """
        V.MouseDoubleClickEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseDoubleClickEvent(const vtkContextMouseEvent &event)
             override;
        
        Propagate any double click onto the dendrogram to check if any
        subtrees should be collapsed or expanded.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeHeatmapItem
        C++: vtkTreeHeatmapItem *NewInstance()
        """
        ...
    
    def ReorderTable(self):
        """
        V.ReorderTable()
        C++: void ReorderTable()
        
        Reorder the rows in the table so they match the order of the leaf
        nodes in our tree.
        """
        ...
    
    def ReverseTableColumns(self):
        """
        V.ReverseTableColumns()
        C++: void ReverseTableColumns()
        
        Reverse the order of the rows in our input table.  This is used
        to simplify the table layout for DOWN_TO_UP and UP_TO_DOWN
        orientations.
        """
        ...
    
    def ReverseTableRows(self):
        """
        V.ReverseTableRows()
        C++: void ReverseTableRows()
        
        Reverse the order of the rows in our input table.  This is used
        to simplify the table layout for DOWN_TO_UP and RIGHT_TO_LEFT
        orientations.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeHeatmapItem
        C++: static vtkTreeHeatmapItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColumnTree(self, vtkTree):
        """
        V.SetColumnTree(vtkTree)
        C++: virtual void SetColumnTree(vtkTree *tree)
        
        Set a tree to be drawn for the columns of the heatmap.  This
        tree's vertex data must contain a vtkStringArray called "node
        name" that corresponds to the names of the columns in the
        heatmap.
        """
        ...
    
    def SetDendrogram(self, vtkDendrogramItem):
        """
        V.SetDendrogram(vtkDendrogramItem)
        C++: void SetDendrogram(vtkDendrogramItem *dendrogram)
        
        Get/Set the dendrogram contained by this item.
        """
        ...
    
    def SetHeatmap(self, vtkHeatmapItem):
        """
        V.SetHeatmap(vtkHeatmapItem)
        C++: void SetHeatmap(vtkHeatmapItem *heatmap)
        
        Get/Set the heatmap contained by this item.
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: void SetOrientation(int orientation)
        
        Set which way the tree / heatmap should face within the
        visualization. The default is for both components to be drawn
        left to right.
        """
        ...
    
    def SetTable(self, vtkTable):
        """
        V.SetTable(vtkTable)
        C++: virtual void SetTable(vtkTable *table)
        
        Set the table that this item draws.  The first column of the
        table must contain the names of the rows.  These names, in turn,
        must correspond with the nodes names in the input tree.  See
        SetTree for more information.
        """
        ...
    
    def SetTree(self, vtkTree):
        """
        V.SetTree(vtkTree)
        C++: virtual void SetTree(vtkTree *tree)
        
        Set the tree that this item draws.  Note that this tree's vertex
        data must contain a vtkStringArray called "node name". 
        Additionally, this array must contain the same values as the
        first column of the input table.  See SetTable for more
        information.  The vtkNewickTreeReader automatically creates this
        required array for you.
        """
        ...
    
    def SetTreeColorArray(self, string):
        """
        V.SetTreeColorArray(string)
        C++: void SetTreeColorArray(const char *arrayName)
        
        Deprecated.  Use this->GetDendrogram()->SetColorArray(const char
        *arrayName) instead.
        """
        ...
    
    def SetTreeLineWidth(self, p_float):
        """
        V.SetTreeLineWidth(float)
        C++: void SetTreeLineWidth(float width)
        
        Get/Set how wide the edges of the trees should be.  Default is
        one pixel.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTreeMapView(vtkTreeAreaView):
    """
    vtkTreeMapView - Displays a tree as a tree map.
    
    Superclass: vtkTreeAreaView
    
    vtkTreeMapView shows a vtkTree in a tree map, where each vertex in
    the tree is represented by a box.  Child boxes are contained within
    the parent box, and may be colored and sized by various parameters.
    """
    def GetFontSizeRange(self, p_int=..., p_int=..., p_int=...):
        """
        V.GetFontSizeRange([int, int, int])
        C++: virtual void GetFontSizeRange(int range[3])
        
        The sizes of the fonts used for labeling.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeMapView
        C++: vtkTreeMapView *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeMapView
        C++: static vtkTreeMapView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFontSizeRange(self, p_int, p_int_1, p_int_2):
        """
        V.SetFontSizeRange(int, int, int)
        C++: virtual void SetFontSizeRange(const int maxSize,
            const int minSize, const int delta=4)
        
        The sizes of the fonts used for labeling.
        """
        ...
    
    def SetLayoutStrategy(self, vtkAreaLayoutStrategy):
        """
        V.SetLayoutStrategy(vtkAreaLayoutStrategy)
        C++: void SetLayoutStrategy(vtkAreaLayoutStrategy *s) override;
        V.SetLayoutStrategy(string)
        C++: virtual void SetLayoutStrategy(const char *name)
        
        Sets the treemap layout strategy
        """
        ...
    
    def SetLayoutStrategyToBox(self):
        """
        V.SetLayoutStrategyToBox()
        C++: virtual void SetLayoutStrategyToBox()
        
        Sets the treemap layout strategy
        """
        ...
    
    def SetLayoutStrategyToSliceAndDice(self):
        """
        V.SetLayoutStrategyToSliceAndDice()
        C++: virtual void SetLayoutStrategyToSliceAndDice()
        
        Sets the treemap layout strategy
        """
        ...
    
    def SetLayoutStrategyToSquarify(self):
        """
        V.SetLayoutStrategyToSquarify()
        C++: virtual void SetLayoutStrategyToSquarify()
        
        Sets the treemap layout strategy
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTreeRingView(vtkTreeAreaView):
    """
    vtkTreeRingView - Displays a tree in concentric rings.
    
    Superclass: vtkTreeAreaView
    
    Accepts a graph and a hierarchy - currently a tree - and provides a
    hierarchy-aware display.  Currently, this means displaying the
    hierarchy using a tree ring layout, then rendering the graph vertices
    as leaves of the tree with curved graph edges between leaves.
    
    .SEE ALSO vtkGraphLayoutView
    
    @par Thanks: Thanks to Jason Shepherd for implementing this class
    """
    def GetInteriorLogSpacingValue(self):
        """
        V.GetInteriorLogSpacingValue() -> float
        C++: virtual double GetInteriorLogSpacingValue()
        
        Set the log spacing factor for the invisible interior tree used
        for routing edges of the overlaid graph.
        """
        ...
    
    def GetInteriorRadius(self):
        """
        V.GetInteriorRadius() -> float
        C++: virtual double GetInteriorRadius()
        
        Set the interior radius of the tree (i.e. the size of the "hole"
        in the center).
        """
        ...
    
    def GetLayerThickness(self):
        """
        V.GetLayerThickness() -> float
        C++: virtual double GetLayerThickness()
        
        Set the thickness of each layer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRootAtCenter(self):
        """
        V.GetRootAtCenter() -> bool
        C++: virtual bool GetRootAtCenter()
        
        Sets whether the root is at the center or around the outside.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeRingView
        C++: vtkTreeRingView *NewInstance()
        """
        ...
    
    def RootAtCenterOff(self):
        """
        V.RootAtCenterOff()
        C++: virtual void RootAtCenterOff()
        
        Sets whether the root is at the center or around the outside.
        """
        ...
    
    def RootAtCenterOn(self):
        """
        V.RootAtCenterOn()
        C++: virtual void RootAtCenterOn()
        
        Sets whether the root is at the center or around the outside.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeRingView
        C++: static vtkTreeRingView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInteriorLogSpacingValue(self, p_float):
        """
        V.SetInteriorLogSpacingValue(float)
        C++: virtual void SetInteriorLogSpacingValue(double thickness)
        
        Set the log spacing factor for the invisible interior tree used
        for routing edges of the overlaid graph.
        """
        ...
    
    def SetInteriorRadius(self, p_float):
        """
        V.SetInteriorRadius(float)
        C++: virtual void SetInteriorRadius(double thickness)
        
        Set the interior radius of the tree (i.e. the size of the "hole"
        in the center).
        """
        ...
    
    def SetLayerThickness(self, p_float):
        """
        V.SetLayerThickness(float)
        C++: virtual void SetLayerThickness(double thickness)
        
        Set the thickness of each layer.
        """
        ...
    
    def SetRootAngles(self, p_float, p_float_1):
        """
        V.SetRootAngles(float, float)
        C++: void SetRootAngles(double start, double end)
        
        Set the root angles for laying out the hierarchy.
        """
        ...
    
    def SetRootAtCenter(self, bool):
        """
        V.SetRootAtCenter(bool)
        C++: virtual void SetRootAtCenter(bool value)
        
        Sets whether the root is at the center or around the outside.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkViewUpdater(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkViewUpdater - Updates views automatically
    
    Superclass: vtkObject
    
    vtkViewUpdater registers with annotation change events for a set of
    annotation links, and updates all views when an annotation link fires
    an annotation changed event. This is often needed when multiple views
    share a selection with vtkAnnotationLink.
    """
    def AddAnnotationLink(self, vtkAnnotationLink):
        """
        V.AddAnnotationLink(vtkAnnotationLink)
        C++: void AddAnnotationLink(vtkAnnotationLink *link)
        """
        ...
    
    def AddView(self, vtkView):
        """
        V.AddView(vtkView)
        C++: void AddView(vtkView *view)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkViewUpdater
        C++: vtkViewUpdater *NewInstance()
        """
        ...
    
    def RemoveView(self, vtkView):
        """
        V.RemoveView(vtkView)
        C++: void RemoveView(vtkView *view)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkViewUpdater
        C++: static vtkViewUpdater *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
