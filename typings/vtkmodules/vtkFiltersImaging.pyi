"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkFiltersStatistics as __vtkmodules_vtkFiltersStatistics

class vtkComputeHistogram2DOutliers(__vtkmodules_vtkCommonExecutionModel.vtkSelectionAlgorithm):
    """
    vtkComputeHistogram2DOutliers - compute the outliers in a set
     of 2D histograms and extract the corresponding row data.
    
    Superclass: vtkSelectionAlgorithm
    
    This class takes a table and one or more vtkImageData histograms as
    input
     and computes the outliers in that data.  In general it does so by
     identifying histogram bins that are removed by a median (salt and
    pepper)
     filter and below a threshold.  This threshold is automatically
    identified
     to retrieve a number of outliers close to a user-determined value. 
    This
     value is set by calling SetPreferredNumberOfOutliers(int).
    
    
     The image data input can come either as a multiple vtkImageData via
    the
     repeatable INPUT_HISTOGRAM_IMAGE_DATA port, or as a single
     vtkMultiBlockDataSet containing vtkImageData objects as blocks.  One
     or the other must be set, not both (or neither).
    
    
     The output can be retrieved as a set of row ids in a vtkSelection or
     as a vtkTable containing the actual outlier row data.
    
    @sa
     vtkExtractHistogram2D vtkPComputeHistogram2DOutliers
    
    @par Thanks:
     Developed by David Feng at Sandia National Laboratories
    ----------------------------------------------------------------------
        --------
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputTable(self):
        """
        V.GetOutputTable() -> vtkTable
        C++: vtkTable *GetOutputTable()
        """
        ...
    
    def GetPreferredNumberOfOutliers(self):
        """
        V.GetPreferredNumberOfOutliers() -> int
        C++: virtual int GetPreferredNumberOfOutliers()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkComputeHistogram2DOutliers
        C++: vtkComputeHistogram2DOutliers *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkComputeHistogram2DOutliers
        C++: static vtkComputeHistogram2DOutliers *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInputHistogramImageDataConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputHistogramImageDataConnection(vtkAlgorithmOutput)
        C++: void SetInputHistogramImageDataConnection(
            vtkAlgorithmOutput *cxn)
        
        Set the input histogram data as a (repeatable) vtkImageData
        """
        ...
    
    def SetInputHistogramMultiBlockConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputHistogramMultiBlockConnection(vtkAlgorithmOutput)
        C++: void SetInputHistogramMultiBlockConnection(
            vtkAlgorithmOutput *cxn)
        
        Set the input histogram data as a vtkMultiBlockData set
        containing multiple vtkImageData objects.
        """
        ...
    
    def SetInputTableConnection(self, vtkAlgorithmOutput):
        """
        V.SetInputTableConnection(vtkAlgorithmOutput)
        C++: void SetInputTableConnection(vtkAlgorithmOutput *cxn)
        
        Set the source table data, from which data will be filtered.
        """
        ...
    
    def SetPreferredNumberOfOutliers(self, p_int):
        """
        V.SetPreferredNumberOfOutliers(int)
        C++: virtual void SetPreferredNumberOfOutliers(int _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    InputPorts = ...
    INPUT_HISTOGRAMS_IMAGE_DATA = ...
    INPUT_HISTOGRAMS_MULTIBLOCK = ...
    INPUT_TABLE_DATA = ...
    OutputPorts = ...
    OUTPUT_SELECTED_ROWS = ...
    OUTPUT_SELECTED_TABLE_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkExtractHistogram2D(__vtkmodules_vtkFiltersStatistics.vtkStatisticsAlgorithm):
    """
    vtkExtractHistogram2D - compute a 2D histogram between two columns
     of an input vtkTable.
    
    Superclass: vtkStatisticsAlgorithm
    
    This class computes a 2D histogram between two columns of an input
     vtkTable. Just as with a 1D histogram, a 2D histogram breaks
     up the input domain into bins, and each pair of values (row in
     the table) fits into a single bin and increments a row counter
     for that bin.
    
    
     To use this class, set the input with a table and call
    AddColumnPair(nameX,nameY),
     where nameX and nameY are the names of the two columns to be used.
    
    
     In addition to the number of bins (in X and Y), the domain of
     the histogram can be customized by toggling the
    UseCustomHistogramExtents
     flag and setting the CustomHistogramExtents variable to the
     desired value.
    
    @sa
     vtkPExtractHistogram2D
    
    @par Thanks:
     Developed by David Feng and Philippe Pebay at Sandia National
    Laboratories
    ----------------------------------------------------------------------
        --------
    """
    def Aggregate(self, vtkDataObjectCollection, vtkMultiBlockDataSet):
        """
        V.Aggregate(vtkDataObjectCollection, vtkMultiBlockDataSet)
        C++: void Aggregate(vtkDataObjectCollection *,
            vtkMultiBlockDataSet *) override;
        
        Given a collection of models, calculate aggregate model. Not
        used.
        """
        ...
    
    def GetBinRange(self, p_int, p_int_1, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBinRange(int, int, [float, float, float, float]) -> int
        C++: int GetBinRange(vtkIdType binX, vtkIdType binY,
            double range[4])
        V.GetBinRange(int, [float, float, float, float]) -> int
        C++: int GetBinRange(vtkIdType bin, double range[4])
        
        Compute the range of the bin located at position (binX,binY) in
        the 2D histogram.
        """
        ...
    
    def GetBinWidth(self, p_float=..., p_float=...):
        """
        V.GetBinWidth([float, float])
        C++: void GetBinWidth(double bw[2])
        
        Get the width of all of the bins. Also stored in the spacing ivar
        of the histogram image output.
        """
        ...
    
    def GetComponentsToProcess(self):
        """
        V.GetComponentsToProcess() -> (int, int)
        C++: virtual int *GetComponentsToProcess()
        
        Set/get the components of the arrays in the two input columns to
        be used during histogram computation.  Defaults to component 0.
        """
        ...
    
    def GetCustomHistogramExtents(self):
        """
        V.GetCustomHistogramExtents() -> (float, float, float, float)
        C++: virtual double *GetCustomHistogramExtents()
        
        Set/get a custom domain for histogram computation. 
        UseCustomHistogramExtents must be called for these to actually be
        used.
        """
        ...
    
    def GetHistogramExtents(self):
        """
        V.GetHistogramExtents() -> (float, ...)
        C++: double *GetHistogramExtents()
        
        Get the histogram extents currently in use, either computed or
        set by the user.
        """
        ...
    
    def GetMaximumBinCount(self):
        """
        V.GetMaximumBinCount() -> float
        C++: virtual double GetMaximumBinCount()
        
        Access the count of the histogram bin containing the largest
        number of input rows.
        """
        ...
    
    def GetNumberOfBins(self):
        """
        V.GetNumberOfBins() -> (int, int)
        C++: virtual int *GetNumberOfBins()
        
        Set/get the number of bins to be used per dimension (x,y)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputHistogramImage(self):
        """
        V.GetOutputHistogramImage() -> vtkImageData
        C++: vtkImageData *GetOutputHistogramImage()
        
        Gets the data object at the histogram image output port and casts
        it to a vtkImageData.
        """
        ...
    
    def GetRowMask(self):
        """
        V.GetRowMask() -> vtkDataArray
        C++: virtual vtkDataArray *GetRowMask()
        
        Get/Set an optional mask that can ignore rows of the table
        """
        ...
    
    def GetScalarType(self):
        """
        V.GetScalarType() -> int
        C++: virtual int GetScalarType()
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def GetSwapColumns(self):
        """
        V.GetSwapColumns() -> int
        C++: virtual vtkTypeBool GetSwapColumns()
        """
        ...
    
    def GetUseCustomHistogramExtents(self):
        """
        V.GetUseCustomHistogramExtents() -> int
        C++: virtual vtkTypeBool GetUseCustomHistogramExtents()
        
        Use the extents in CustomHistogramExtents when computing the
        histogram, rather than the simple range of the input columns.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractHistogram2D
        C++: vtkExtractHistogram2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractHistogram2D
        C++: static vtkExtractHistogram2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComponentsToProcess(self, p_int, p_int_1):
        """
        V.SetComponentsToProcess(int, int)
        C++: virtual void SetComponentsToProcess(int _arg1, int _arg2)
        V.SetComponentsToProcess((int, int))
        C++: void SetComponentsToProcess(const int _arg[2])
        
        Set/get the components of the arrays in the two input columns to
        be used during histogram computation.  Defaults to component 0.
        """
        ...
    
    def SetCustomHistogramExtents(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetCustomHistogramExtents(float, float, float, float)
        C++: virtual void SetCustomHistogramExtents(double _arg1,
            double _arg2, double _arg3, double _arg4)
        V.SetCustomHistogramExtents((float, float, float, float))
        C++: virtual void SetCustomHistogramExtents(const double _arg[4])
        
        Set/get a custom domain for histogram computation. 
        UseCustomHistogramExtents must be called for these to actually be
        used.
        """
        ...
    
    def SetNumberOfBins(self, p_int, p_int_1):
        """
        V.SetNumberOfBins(int, int)
        C++: virtual void SetNumberOfBins(int _arg1, int _arg2)
        V.SetNumberOfBins((int, int))
        C++: void SetNumberOfBins(const int _arg[2])
        
        Set/get the number of bins to be used per dimension (x,y)
        """
        ...
    
    def SetRowMask(self, vtkDataArray):
        """
        V.SetRowMask(vtkDataArray)
        C++: virtual void SetRowMask(vtkDataArray *)
        
        Get/Set an optional mask that can ignore rows of the table
        """
        ...
    
    def SetScalarType(self, p_int):
        """
        V.SetScalarType(int)
        C++: virtual void SetScalarType(int _arg)
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def SetScalarTypeToDouble(self):
        """
        V.SetScalarTypeToDouble()
        C++: void SetScalarTypeToDouble()
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def SetScalarTypeToFloat(self):
        """
        V.SetScalarTypeToFloat()
        C++: void SetScalarTypeToFloat()
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def SetScalarTypeToUnsignedChar(self):
        """
        V.SetScalarTypeToUnsignedChar()
        C++: void SetScalarTypeToUnsignedChar()
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def SetScalarTypeToUnsignedInt(self):
        """
        V.SetScalarTypeToUnsignedInt()
        C++: void SetScalarTypeToUnsignedInt()
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def SetScalarTypeToUnsignedLong(self):
        """
        V.SetScalarTypeToUnsignedLong()
        C++: void SetScalarTypeToUnsignedLong()
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def SetScalarTypeToUnsignedShort(self):
        """
        V.SetScalarTypeToUnsignedShort()
        C++: void SetScalarTypeToUnsignedShort()
        
        Control the scalar type of the output histogram.  If the input is
        relatively small, you can save space by using a smaller data
        type.  Defaults to unsigned integer.
        """
        ...
    
    def SetSwapColumns(self, p_int):
        """
        V.SetSwapColumns(int)
        C++: virtual void SetSwapColumns(vtkTypeBool _arg)
        """
        ...
    
    def SetUseCustomHistogramExtents(self, p_int):
        """
        V.SetUseCustomHistogramExtents(int)
        C++: virtual void SetUseCustomHistogramExtents(vtkTypeBool _arg)
        
        Use the extents in CustomHistogramExtents when computing the
        histogram, rather than the simple range of the input columns.
        """
        ...
    
    def SwapColumnsOff(self):
        """
        V.SwapColumnsOff()
        C++: virtual void SwapColumnsOff()
        """
        ...
    
    def SwapColumnsOn(self):
        """
        V.SwapColumnsOn()
        C++: virtual void SwapColumnsOn()
        """
        ...
    
    def UseCustomHistogramExtentsOff(self):
        """
        V.UseCustomHistogramExtentsOff()
        C++: virtual void UseCustomHistogramExtentsOff()
        
        Use the extents in CustomHistogramExtents when computing the
        histogram, rather than the simple range of the input columns.
        """
        ...
    
    def UseCustomHistogramExtentsOn(self):
        """
        V.UseCustomHistogramExtentsOn()
        C++: virtual void UseCustomHistogramExtentsOn()
        
        Use the extents in CustomHistogramExtents when computing the
        histogram, rather than the simple range of the input columns.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    HISTOGRAM_IMAGE = ...
    OutputIndices = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPairwiseExtractHistogram2D(__vtkmodules_vtkFiltersStatistics.vtkStatisticsAlgorithm):
    """
    vtkPairwiseExtractHistogram2D - compute a 2D histogram between
     all adjacent columns of an input vtkTable.
    
    Superclass: vtkStatisticsAlgorithm
    
    This class computes a 2D histogram between all adjacent pairs of
    columns
     of an input vtkTable. Internally it creates multiple
    vtkExtractHistogram2D
     instances (one for each pair of adjacent table columns).  It also
     manages updating histogram computations intelligently, only
    recomputing
     those histograms for whom a relevant property has been altered.
    
    
     Note that there are two different outputs from this filter.  One is
    a
     table for which each column contains a flattened 2D histogram array.
     The other is a vtkMultiBlockDataSet for which each block is a
     vtkImageData representation of the 2D histogram.
    
    @sa
     vtkExtractHistogram2D vtkPPairwiseExtractHistogram2D
    
    @par Thanks:
     Developed by David Feng and Philippe Pebay at Sandia National
    Laboratories
    ----------------------------------------------------------------------
        --------
    """
    def Aggregate(self, vtkDataObjectCollection, vtkMultiBlockDataSet):
        """
        V.Aggregate(vtkDataObjectCollection, vtkMultiBlockDataSet)
        C++: void Aggregate(vtkDataObjectCollection *,
            vtkMultiBlockDataSet *) override;
        
        Given a collection of models, calculate aggregate model.  Not
        used
        """
        ...
    
    def GetBinRange(self, p_int, p_int_1, p_int_2, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBinRange(int, int, int, [float, float, float, float]) -> int
        C++: int GetBinRange(int idx, vtkIdType binX, vtkIdType binY,
            double range[4])
        V.GetBinRange(int, int, [float, float, float, float]) -> int
        C++: int GetBinRange(int idx, vtkIdType bin, double range[4])
        
        Compute the range of the bin located at position (binX,binY) in
        the 2D histogram at idx.
        """
        ...
    
    def GetBinWidth(self, p_int, p_float=..., p_float=...):
        """
        V.GetBinWidth(int, [float, float])
        C++: void GetBinWidth(int idx, double bw[2])
        
        Get the width of all of the bins. Also stored in the spacing ivar
        of the histogram image output at idx.
        """
        ...
    
    def GetHistogramExtents(self, p_int):
        """
        V.GetHistogramExtents(int) -> (float, ...)
        C++: double *GetHistogramExtents(int idx)
        
        Get the histogram extents currently in use, either computed or
        set by the user for the idx'th histogram.
        """
        ...
    
    def GetHistogramFilter(self, p_int):
        """
        V.GetHistogramFilter(int) -> vtkExtractHistogram2D
        C++: vtkExtractHistogram2D *GetHistogramFilter(int idx)
        
        Get a pointer to the idx'th histogram filter.
        """
        ...
    
    def GetMaximumBinCount(self, p_int):
        """
        V.GetMaximumBinCount(int) -> float
        C++: double GetMaximumBinCount(int idx)
        V.GetMaximumBinCount() -> float
        C++: double GetMaximumBinCount()
        
        Get the maximum bin count for a single histogram
        """
        ...
    
    def GetNumberOfBins(self):
        """
        V.GetNumberOfBins() -> (int, int)
        C++: virtual int *GetNumberOfBins()
        
        Set/get the bin dimensions of the histograms to compute
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputHistogramImage(self, p_int):
        """
        V.GetOutputHistogramImage(int) -> vtkImageData
        C++: vtkImageData *GetOutputHistogramImage(int idx)
        
        Get the vtkImageData output of the idx'th histogram filter
        """
        ...
    
    def GetScalarType(self):
        """
        V.GetScalarType() -> int
        C++: virtual int GetScalarType()
        
        Set the scalar type for each of the computed histograms.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPairwiseExtractHistogram2D
        C++: vtkPairwiseExtractHistogram2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPairwiseExtractHistogram2D
        C++: static vtkPairwiseExtractHistogram2D *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCustomColumnRange(self, p_int, p_float=..., p_float=...):
        """
        V.SetCustomColumnRange(int, [float, float])
        C++: void SetCustomColumnRange(int col, double range[2])
        V.SetCustomColumnRange(int, float, float)
        C++: void SetCustomColumnRange(int col, double rmin, double rmax)
        
        More standard way to set the custom range for a particular
        column. This makes sure that only the affected histograms know
        that they need to be updated.
        """
        ...
    
    def SetCustomColumnRangeByIndex(self, p_float, p_float_1):
        """
        V.SetCustomColumnRangeByIndex(float, float)
        C++: void SetCustomColumnRangeByIndex(double, double)
        
        Strange method for setting an index to be used for setting custom
        column range. This was (probably) necessary to get this class to
        interact with the ParaView client/server message passing
        interface.
        """
        ...
    
    def SetCustomColumnRangeIndex(self, p_int):
        """
        V.SetCustomColumnRangeIndex(int)
        C++: virtual void SetCustomColumnRangeIndex(int _arg)
        
        Strange method for setting an index to be used for setting custom
        column range. This was (probably) necessary to get this class to
        interact with the ParaView client/server message passing
        interface.
        """
        ...
    
    def SetNumberOfBins(self, p_int, p_int_1):
        """
        V.SetNumberOfBins(int, int)
        C++: virtual void SetNumberOfBins(int _arg1, int _arg2)
        V.SetNumberOfBins((int, int))
        C++: void SetNumberOfBins(const int _arg[2])
        
        Set/get the bin dimensions of the histograms to compute
        """
        ...
    
    def SetScalarType(self, p_int):
        """
        V.SetScalarType(int)
        C++: virtual void SetScalarType(int _arg)
        
        Set the scalar type for each of the computed histograms.
        """
        ...
    
    def SetScalarTypeToUnsignedChar(self):
        """
        V.SetScalarTypeToUnsignedChar()
        C++: void SetScalarTypeToUnsignedChar()
        
        Set the scalar type for each of the computed histograms.
        """
        ...
    
    def SetScalarTypeToUnsignedInt(self):
        """
        V.SetScalarTypeToUnsignedInt()
        C++: void SetScalarTypeToUnsignedInt()
        
        Set the scalar type for each of the computed histograms.
        """
        ...
    
    def SetScalarTypeToUnsignedLong(self):
        """
        V.SetScalarTypeToUnsignedLong()
        C++: void SetScalarTypeToUnsignedLong()
        
        Set the scalar type for each of the computed histograms.
        """
        ...
    
    def SetScalarTypeToUnsignedShort(self):
        """
        V.SetScalarTypeToUnsignedShort()
        C++: void SetScalarTypeToUnsignedShort()
        
        Set the scalar type for each of the computed histograms.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    HISTOGRAM_IMAGE = ...
    OutputIndices = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
