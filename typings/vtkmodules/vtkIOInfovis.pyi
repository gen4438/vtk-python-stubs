"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOLegacy as __vtkmodules_vtkIOLegacy
import vtkmodules.vtkIOXML as __vtkmodules_vtkIOXML

class vtkBiomTableReader(__vtkmodules_vtkIOLegacy.vtkTableReader):
    """
    vtkBiomTableReader - read vtkTable from a .biom input file
    
    Superclass: vtkTableReader
    
    vtkBiomTableReader is a source object that reads ASCII biom data
    files. The output of this reader is a single vtkTable data object.
    @sa
    vtkTable vtkTableReader vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkTable
        C++: vtkTable *GetOutput()
        V.GetOutput(int) -> vtkTable
        C++: vtkTable *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBiomTableReader
        C++: vtkBiomTableReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBiomTableReader
        C++: static vtkBiomTableReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkTable):
        """
        V.SetOutput(vtkTable)
        C++: void SetOutput(vtkTable *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkChacoGraphReader(__vtkmodules_vtkCommonExecutionModel.vtkUndirectedGraphAlgorithm):
    """
    vtkChacoGraphReader - Reads chaco graph files.
    
    Superclass: vtkUndirectedGraphAlgorithm
    
    vtkChacoGraphReader reads in files in the Chaco format into a
    vtkGraph. An example is the following  10 13 2 6 10 1 3 2 4 8 3 5 4 6
    10 1 5 7 6 8 3 7 9 8 10 1 5 9  The first line specifies the number of
    vertices and edges in the graph. Each additional line contains the
    vertices adjacent to a particular vertex.  In this example, vertex 1
    is adjacent to 2, 6 and 10, vertex 2 is adjacent to 1 and 3, etc. 
    Since Chaco ids start at 1 and VTK ids start at 0, the vertex ids in
    the vtkGraph will be 1 less than the Chaco ids.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The Chaco file name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkChacoGraphReader
        C++: vtkChacoGraphReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkChacoGraphReader
        C++: static vtkChacoGraphReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The Chaco file name.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDelimitedTextReader(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkDelimitedTextReader - reads in delimited ascii or unicode text
    files and outputs a vtkTable data structure.
    
    Superclass: vtkTableAlgorithm
    
    vtkDelimitedTextReader is an interface for pulling in data from a
    flat, delimited ascii or unicode text file (delimiter can be any
    character).
    
    The behavior of the reader with respect to ascii or unicode input is
    controlled by the SetUnicodeCharacterSet() method.  By default
    (without calling SetUnicodeCharacterSet()), the reader will expect to
    read ascii text and will output vtkStdString columns.  Use the Set
    and Get methods to set delimiters that do not contain UTF8 in the
    name when operating the reader in default ascii mode.  If the
    SetUnicodeCharacterSet() method is called, the reader will output
    vtkUnicodeString columns in the output table.  In addition, it is
    necessary to use the Set and Get methods that contain UTF8 in the
    name to specify delimiters when operating in unicode mode.
    
    There is also a special character set US-ASCII-WITH-FALLBACK that
    will treat the input text as ASCII no matter what.  If and when it
    encounters a character with its 8th bit set it will replace that
    character with the code point ReplacementCharacter.  You may use this
    if you have text that belongs to a code page like LATIN9 or
    ISO-8859-1 or friends: mostly ASCII but not entirely.  Eventually
    this class will acquire the ability to read gracefully text from any
    code page, making this option obsolete.
    
    This class emits ProgressEvent for every 100 lines it reads.
    
    @par Thanks: Thanks to Andy Wilson, Brian Wylie, Tim Shead, and
    Thomas Otahal from Sandia National Laboratories for implementing this
    class.
    
    @warning
    This reader assumes that the first line in the file (whether that's
    headers or the first document) contains at least as many fields as
    any other line in the file.
    """
    def AddTabFieldDelimiterOff(self):
        """
        V.AddTabFieldDelimiterOff()
        C++: virtual void AddTabFieldDelimiterOff()
        
        If on, also add in the tab (i.e. '\t') character as a field
        delimiter. We add this specially since applications may have a
        more difficult time doing this. Defaults to off.
        """
        ...
    
    def AddTabFieldDelimiterOn(self):
        """
        V.AddTabFieldDelimiterOn()
        C++: virtual void AddTabFieldDelimiterOn()
        
        If on, also add in the tab (i.e. '\t') character as a field
        delimiter. We add this specially since applications may have a
        more difficult time doing this. Defaults to off.
        """
        ...
    
    def DetectNumericColumnsOff(self):
        """
        V.DetectNumericColumnsOff()
        C++: virtual void DetectNumericColumnsOff()
        
        When set to true, the reader will detect numeric columns and
        create vtkDoubleArray or vtkIntArray for those instead of
        vtkStringArray. Default is off.
        """
        ...
    
    def DetectNumericColumnsOn(self):
        """
        V.DetectNumericColumnsOn()
        C++: virtual void DetectNumericColumnsOn()
        
        When set to true, the reader will detect numeric columns and
        create vtkDoubleArray or vtkIntArray for those instead of
        vtkStringArray. Default is off.
        """
        ...
    
    def ForceDoubleOff(self):
        """
        V.ForceDoubleOff()
        C++: virtual void ForceDoubleOff()
        
        When set to true and DetectNumericColumns is also true, forces
        all numeric columns to vtkDoubleArray even if they contain only
        integer values. Default is off.
        """
        ...
    
    def ForceDoubleOn(self):
        """
        V.ForceDoubleOn()
        C++: virtual void ForceDoubleOn()
        
        When set to true and DetectNumericColumns is also true, forces
        all numeric columns to vtkDoubleArray even if they contain only
        integer values. Default is off.
        """
        ...
    
    def GeneratePedigreeIdsOff(self):
        """
        V.GeneratePedigreeIdsOff()
        C++: virtual void GeneratePedigreeIdsOff()
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def GeneratePedigreeIdsOn(self):
        """
        V.GeneratePedigreeIdsOn()
        C++: virtual void GeneratePedigreeIdsOn()
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def GetAddTabFieldDelimiter(self):
        """
        V.GetAddTabFieldDelimiter() -> bool
        C++: virtual bool GetAddTabFieldDelimiter()
        
        If on, also add in the tab (i.e. '\t') character as a field
        delimiter. We add this specially since applications may have a
        more difficult time doing this. Defaults to off.
        """
        ...
    
    def GetDefaultDoubleValue(self):
        """
        V.GetDefaultDoubleValue() -> float
        C++: virtual double GetDefaultDoubleValue()
        
        When DetectNumericColumns is set to true, the reader use this
        value to populate the vtkDoubleArray where empty strings are
        found. Default is 0.0
        """
        ...
    
    def GetDefaultIntegerValue(self):
        """
        V.GetDefaultIntegerValue() -> int
        C++: virtual int GetDefaultIntegerValue()
        
        When DetectNumericColumns is set to true, the reader use this
        value to populate the vtkIntArray where empty strings are found.
        Default is 0.
        """
        ...
    
    def GetDetectNumericColumns(self):
        """
        V.GetDetectNumericColumns() -> bool
        C++: virtual bool GetDetectNumericColumns()
        
        When set to true, the reader will detect numeric columns and
        create vtkDoubleArray or vtkIntArray for those instead of
        vtkStringArray. Default is off.
        """
        ...
    
    def GetFieldDelimiterCharacters(self):
        """
        V.GetFieldDelimiterCharacters() -> string
        C++: virtual char *GetFieldDelimiterCharacters()
        
        Specify the character(s) that will be used to separate fields. 
        For example, set this to "," for a comma-separated value file. 
        Set it to ".:;" for a file where columns can be separated by a
        period, colon or semicolon.  The order of the characters in the
        string does not matter.  Defaults to a comma.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specifies the delimited text file to be loaded.
        """
        ...
    
    def GetForceDouble(self):
        """
        V.GetForceDouble() -> bool
        C++: virtual bool GetForceDouble()
        
        When set to true and DetectNumericColumns is also true, forces
        all numeric columns to vtkDoubleArray even if they contain only
        integer values. Default is off.
        """
        ...
    
    def GetGeneratePedigreeIds(self):
        """
        V.GetGeneratePedigreeIds() -> bool
        C++: virtual bool GetGeneratePedigreeIds()
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def GetHaveHeaders(self):
        """
        V.GetHaveHeaders() -> bool
        C++: virtual bool GetHaveHeaders()
        
        Set/get whether to treat the first line of the file as headers.
        The default is false (no headers).
        """
        ...
    
    def GetInputString(self):
        """
        V.GetInputString() -> string
        C++: virtual char *GetInputString()
        
        Specify the InputString for use when reading from a character
        array. Optionally include the length for binary strings. Note
        that a copy of the string is made and stored. If this causes
        exceedingly large memory consumption, consider using InputArray
        instead.
        """
        ...
    
    def GetInputStringLength(self):
        """
        V.GetInputStringLength() -> int
        C++: virtual int GetInputStringLength()
        
        Specify the InputString for use when reading from a character
        array. Optionally include the length for binary strings. Note
        that a copy of the string is made and stored. If this causes
        exceedingly large memory consumption, consider using InputArray
        instead.
        """
        ...
    
    def GetLastError(self):
        """
        V.GetLastError() -> string
        C++: vtkStdString GetLastError()
        
        Returns a human-readable description of the most recent error, if
        any. Otherwise, returns an empty string.  Note that the result is
        only valid after calling Update().
        """
        ...
    
    def GetMaxRecords(self):
        """
        V.GetMaxRecords() -> int
        C++: virtual vtkIdType GetMaxRecords()
        
        Specifies the maximum number of records to read from the file. 
        Limiting the number of records to read is useful for previewing
        the contents of a file.
        """
        ...
    
    def GetMergeConsecutiveDelimiters(self):
        """
        V.GetMergeConsecutiveDelimiters() -> bool
        C++: virtual bool GetMergeConsecutiveDelimiters()
        
        Set/get whether to merge successive delimiters.  Use this if (for
        example) your fields are separated by spaces but you don't know
        exactly how many.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPedigreeIds(self):
        """
        V.GetOutputPedigreeIds() -> bool
        C++: virtual bool GetOutputPedigreeIds()
        
        If on, assigns pedigree ids to output. Defaults to off.
        """
        ...
    
    def GetPedigreeIdArrayName(self):
        """
        V.GetPedigreeIdArrayName() -> string
        C++: virtual char *GetPedigreeIdArrayName()
        
        The name of the array for generating or assigning pedigree ids
        (default "id").
        """
        ...
    
    def GetReadFromInputString(self):
        """
        V.GetReadFromInputString() -> int
        C++: virtual vtkTypeBool GetReadFromInputString()
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def GetReplacementCharacter(self):
        """
        V.GetReplacementCharacter() -> int
        C++: virtual vtkTypeUInt32 GetReplacementCharacter()
        
        Fallback character for use in the US-ASCII-WITH-FALLBACK
        character set.  Any characters that have their 8th bit set will
        be replaced with this code point.  Defaults to 'x'.
        """
        ...
    
    def GetStringDelimiter(self):
        """
        V.GetStringDelimiter() -> char
        C++: virtual char GetStringDelimiter()
        
        Get/set the character that will begin and end strings.  Microsoft
        Excel, for example, will export the following format:
        
        * "First Field","Second Field","Field, With, Commas","Fourth
          Field"
        
        * The third field has a comma in it.  By using a string
          delimiter,
        * this will be correctly read.  The delimiter defaults to '"'.
        """
        ...
    
    def GetTrimWhitespacePriorToNumericConversion(self):
        """
        V.GetTrimWhitespacePriorToNumericConversion() -> bool
        C++: virtual bool GetTrimWhitespacePriorToNumericConversion()
        
        When DetectNumericColumns is set to true, whether to trim
        whitespace from strings prior to conversion to a numeric. Default
        is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def GetUnicodeCharacterSet(self):
        """
        V.GetUnicodeCharacterSet() -> string
        C++: virtual char *GetUnicodeCharacterSet()
        
        Specifies the character set used in the input file.  Valid
        character set names will be drawn from the list maintained by the
        Internet Assigned Name Authority at
        
        * http://www.iana.org/assignments/character-sets
        
        * Where multiple aliases are provided for a character set, the
          preferred MIME name
        * will be used.  vtkUnicodeDelimitedTextReader currently supports
        "US-ASCII", "UTF-8",
        * "UTF-16", "UTF-16BE", and "UTF-16LE" character sets.
        """
        ...
    
    def GetUnicodeFieldDelimiters(self):
        """
        V.GetUnicodeFieldDelimiters() -> unicode
        C++: vtkUnicodeString GetUnicodeFieldDelimiters()
        """
        ...
    
    def GetUnicodeRecordDelimiters(self):
        """
        V.GetUnicodeRecordDelimiters() -> unicode
        C++: vtkUnicodeString GetUnicodeRecordDelimiters()
        
        Specify the character(s) that will be used to separate records.
        The order of characters in the string does not matter.  Defaults
        to "\r\n".
        """
        ...
    
    def GetUnicodeStringDelimiters(self):
        """
        V.GetUnicodeStringDelimiters() -> unicode
        C++: vtkUnicodeString GetUnicodeStringDelimiters()
        """
        ...
    
    def GetUseStringDelimiter(self):
        """
        V.GetUseStringDelimiter() -> bool
        C++: virtual bool GetUseStringDelimiter()
        
        Set/get whether to use the string delimiter.  Defaults to on.
        """
        ...
    
    def GetUTF8FieldDelimiters(self):
        """
        V.GetUTF8FieldDelimiters() -> string
        C++: const char *GetUTF8FieldDelimiters()
        """
        ...
    
    def GetUTF8RecordDelimiters(self):
        """
        V.GetUTF8RecordDelimiters() -> string
        C++: const char *GetUTF8RecordDelimiters()
        
        Specify the character(s) that will be used to separate records.
        The order of characters in the string does not matter.  Defaults
        to "\r\n".
        """
        ...
    
    def GetUTF8StringDelimiters(self):
        """
        V.GetUTF8StringDelimiters() -> string
        C++: const char *GetUTF8StringDelimiters()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergeConsecutiveDelimitersOff(self):
        """
        V.MergeConsecutiveDelimitersOff()
        C++: virtual void MergeConsecutiveDelimitersOff()
        
        Set/get whether to merge successive delimiters.  Use this if (for
        example) your fields are separated by spaces but you don't know
        exactly how many.
        """
        ...
    
    def MergeConsecutiveDelimitersOn(self):
        """
        V.MergeConsecutiveDelimitersOn()
        C++: virtual void MergeConsecutiveDelimitersOn()
        
        Set/get whether to merge successive delimiters.  Use this if (for
        example) your fields are separated by spaces but you don't know
        exactly how many.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDelimitedTextReader
        C++: vtkDelimitedTextReader *NewInstance()
        """
        ...
    
    def OutputPedigreeIdsOff(self):
        """
        V.OutputPedigreeIdsOff()
        C++: virtual void OutputPedigreeIdsOff()
        
        If on, assigns pedigree ids to output. Defaults to off.
        """
        ...
    
    def OutputPedigreeIdsOn(self):
        """
        V.OutputPedigreeIdsOn()
        C++: virtual void OutputPedigreeIdsOn()
        
        If on, assigns pedigree ids to output. Defaults to off.
        """
        ...
    
    def ReadFromInputStringOff(self):
        """
        V.ReadFromInputStringOff()
        C++: virtual void ReadFromInputStringOff()
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def ReadFromInputStringOn(self):
        """
        V.ReadFromInputStringOn()
        C++: virtual void ReadFromInputStringOn()
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDelimitedTextReader
        C++: static vtkDelimitedTextReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAddTabFieldDelimiter(self, bool):
        """
        V.SetAddTabFieldDelimiter(bool)
        C++: virtual void SetAddTabFieldDelimiter(bool _arg)
        
        If on, also add in the tab (i.e. '\t') character as a field
        delimiter. We add this specially since applications may have a
        more difficult time doing this. Defaults to off.
        """
        ...
    
    def SetDefaultDoubleValue(self, p_float):
        """
        V.SetDefaultDoubleValue(float)
        C++: virtual void SetDefaultDoubleValue(double _arg)
        
        When DetectNumericColumns is set to true, the reader use this
        value to populate the vtkDoubleArray where empty strings are
        found. Default is 0.0
        """
        ...
    
    def SetDefaultIntegerValue(self, p_int):
        """
        V.SetDefaultIntegerValue(int)
        C++: virtual void SetDefaultIntegerValue(int _arg)
        
        When DetectNumericColumns is set to true, the reader use this
        value to populate the vtkIntArray where empty strings are found.
        Default is 0.
        """
        ...
    
    def SetDetectNumericColumns(self, bool):
        """
        V.SetDetectNumericColumns(bool)
        C++: virtual void SetDetectNumericColumns(bool _arg)
        
        When set to true, the reader will detect numeric columns and
        create vtkDoubleArray or vtkIntArray for those instead of
        vtkStringArray. Default is off.
        """
        ...
    
    def SetFieldDelimiterCharacters(self, string):
        """
        V.SetFieldDelimiterCharacters(string)
        C++: virtual void SetFieldDelimiterCharacters(const char *_arg)
        
        Specify the character(s) that will be used to separate fields. 
        For example, set this to "," for a comma-separated value file. 
        Set it to ".:;" for a file where columns can be separated by a
        period, colon or semicolon.  The order of the characters in the
        string does not matter.  Defaults to a comma.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specifies the delimited text file to be loaded.
        """
        ...
    
    def SetForceDouble(self, bool):
        """
        V.SetForceDouble(bool)
        C++: virtual void SetForceDouble(bool _arg)
        
        When set to true and DetectNumericColumns is also true, forces
        all numeric columns to vtkDoubleArray even if they contain only
        integer values. Default is off.
        """
        ...
    
    def SetGeneratePedigreeIds(self, bool):
        """
        V.SetGeneratePedigreeIds(bool)
        C++: virtual void SetGeneratePedigreeIds(bool _arg)
        
        If on (default), generates pedigree ids automatically. If off,
        assign one of the arrays to be the pedigree id.
        """
        ...
    
    def SetHaveHeaders(self, bool):
        """
        V.SetHaveHeaders(bool)
        C++: virtual void SetHaveHeaders(bool _arg)
        
        Set/get whether to treat the first line of the file as headers.
        The default is false (no headers).
        """
        ...
    
    def SetInputString(self, string, p_int):
        """
        V.SetInputString(string, int)
        C++: void SetInputString(const char *in, int len)
        V.SetInputString(string)
        C++: void SetInputString(const vtkStdString &input)
        
        Specify the InputString for use when reading from a character
        array. Optionally include the length for binary strings. Note
        that a copy of the string is made and stored. If this causes
        exceedingly large memory consumption, consider using InputArray
        instead.
        """
        ...
    
    def SetMaxRecords(self, p_int):
        """
        V.SetMaxRecords(int)
        C++: virtual void SetMaxRecords(vtkIdType _arg)
        
        Specifies the maximum number of records to read from the file. 
        Limiting the number of records to read is useful for previewing
        the contents of a file.
        """
        ...
    
    def SetMergeConsecutiveDelimiters(self, bool):
        """
        V.SetMergeConsecutiveDelimiters(bool)
        C++: virtual void SetMergeConsecutiveDelimiters(bool _arg)
        
        Set/get whether to merge successive delimiters.  Use this if (for
        example) your fields are separated by spaces but you don't know
        exactly how many.
        """
        ...
    
    def SetOutputPedigreeIds(self, bool):
        """
        V.SetOutputPedigreeIds(bool)
        C++: virtual void SetOutputPedigreeIds(bool _arg)
        
        If on, assigns pedigree ids to output. Defaults to off.
        """
        ...
    
    def SetPedigreeIdArrayName(self, string):
        """
        V.SetPedigreeIdArrayName(string)
        C++: virtual void SetPedigreeIdArrayName(const char *_arg)
        
        The name of the array for generating or assigning pedigree ids
        (default "id").
        """
        ...
    
    def SetReadFromInputString(self, p_int):
        """
        V.SetReadFromInputString(int)
        C++: virtual void SetReadFromInputString(vtkTypeBool _arg)
        
        Enable reading from an InputString or InputArray instead of the
        default, a file.
        """
        ...
    
    def SetReplacementCharacter(self, p_int):
        """
        V.SetReplacementCharacter(int)
        C++: virtual void SetReplacementCharacter(vtkTypeUInt32 _arg)
        
        Fallback character for use in the US-ASCII-WITH-FALLBACK
        character set.  Any characters that have their 8th bit set will
        be replaced with this code point.  Defaults to 'x'.
        """
        ...
    
    def SetStringDelimiter(self, char):
        """
        V.SetStringDelimiter(char)
        C++: virtual void SetStringDelimiter(char _arg)
        
        Get/set the character that will begin and end strings.  Microsoft
        Excel, for example, will export the following format:
        
        * "First Field","Second Field","Field, With, Commas","Fourth
          Field"
        
        * The third field has a comma in it.  By using a string
          delimiter,
        * this will be correctly read.  The delimiter defaults to '"'.
        """
        ...
    
    def SetTrimWhitespacePriorToNumericConversion(self, bool):
        """
        V.SetTrimWhitespacePriorToNumericConversion(bool)
        C++: virtual void SetTrimWhitespacePriorToNumericConversion(
            bool _arg)
        
        When DetectNumericColumns is set to true, whether to trim
        whitespace from strings prior to conversion to a numeric. Default
        is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def SetUnicodeCharacterSet(self, string):
        """
        V.SetUnicodeCharacterSet(string)
        C++: virtual void SetUnicodeCharacterSet(const char *_arg)
        
        Specifies the character set used in the input file.  Valid
        character set names will be drawn from the list maintained by the
        Internet Assigned Name Authority at
        
        * http://www.iana.org/assignments/character-sets
        
        * Where multiple aliases are provided for a character set, the
          preferred MIME name
        * will be used.  vtkUnicodeDelimitedTextReader currently supports
        "US-ASCII", "UTF-8",
        * "UTF-16", "UTF-16BE", and "UTF-16LE" character sets.
        """
        ...
    
    def SetUnicodeFieldDelimiters(self, unicode):
        """
        V.SetUnicodeFieldDelimiters(unicode)
        C++: void SetUnicodeFieldDelimiters(
            const vtkUnicodeString &delimiters)
        """
        ...
    
    def SetUnicodeRecordDelimiters(self, unicode):
        """
        V.SetUnicodeRecordDelimiters(unicode)
        C++: void SetUnicodeRecordDelimiters(
            const vtkUnicodeString &delimiters)
        
        Specify the character(s) that will be used to separate records.
        The order of characters in the string does not matter.  Defaults
        to "\r\n".
        """
        ...
    
    def SetUnicodeStringDelimiters(self, unicode):
        """
        V.SetUnicodeStringDelimiters(unicode)
        C++: void SetUnicodeStringDelimiters(
            const vtkUnicodeString &delimiters)
        """
        ...
    
    def SetUseStringDelimiter(self, bool):
        """
        V.SetUseStringDelimiter(bool)
        C++: virtual void SetUseStringDelimiter(bool _arg)
        
        Set/get whether to use the string delimiter.  Defaults to on.
        """
        ...
    
    def SetUTF8FieldDelimiters(self, string):
        """
        V.SetUTF8FieldDelimiters(string)
        C++: void SetUTF8FieldDelimiters(const char *delimiters)
        """
        ...
    
    def SetUTF8RecordDelimiters(self, string):
        """
        V.SetUTF8RecordDelimiters(string)
        C++: void SetUTF8RecordDelimiters(const char *delimiters)
        
        Specify the character(s) that will be used to separate records.
        The order of characters in the string does not matter.  Defaults
        to "\r\n".
        """
        ...
    
    def SetUTF8StringDelimiters(self, string):
        """
        V.SetUTF8StringDelimiters(string)
        C++: void SetUTF8StringDelimiters(const char *delimiters)
        """
        ...
    
    def TrimWhitespacePriorToNumericConversionOff(self):
        """
        V.TrimWhitespacePriorToNumericConversionOff()
        C++: virtual void TrimWhitespacePriorToNumericConversionOff()
        
        When DetectNumericColumns is set to true, whether to trim
        whitespace from strings prior to conversion to a numeric. Default
        is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def TrimWhitespacePriorToNumericConversionOn(self):
        """
        V.TrimWhitespacePriorToNumericConversionOn()
        C++: virtual void TrimWhitespacePriorToNumericConversionOn()
        
        When DetectNumericColumns is set to true, whether to trim
        whitespace from strings prior to conversion to a numeric. Default
        is false to preserve backward compatibility.
        
        * vtkVariant handles whitespace inconsistently, so trim it before
        we try to
        * convert it.  For example:
        
        * vtkVariant("  2.0").ToDouble() == 2.0 <-- leading whitespace is
        not a problem
        * vtkVariant("  2.0  ").ToDouble() == NaN <-- trailing whitespace
        is a problem
        * vtkVariant("  infinity  ").ToDouble() == NaN <-- any whitespace
        is a problem
        
        * In these cases, trimming the whitespace gives us the result we
          expect:
        * 2.0 and INF respectively.
        """
        ...
    
    def UseStringDelimiterOff(self):
        """
        V.UseStringDelimiterOff()
        C++: virtual void UseStringDelimiterOff()
        
        Set/get whether to use the string delimiter.  Defaults to on.
        """
        ...
    
    def UseStringDelimiterOn(self):
        """
        V.UseStringDelimiterOn()
        C++: virtual void UseStringDelimiterOn()
        
        Set/get whether to use the string delimiter.  Defaults to on.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDIMACSGraphReader(__vtkmodules_vtkCommonExecutionModel.vtkGraphAlgorithm):
    """
    vtkDIMACSGraphReader - reads vtkGraph data from a DIMACS formatted
    file
    
    Superclass: vtkGraphAlgorithm
    
    vtkDIMACSGraphReader is a source object that reads vtkGraph data
    files from a DIMACS format.
    
    The reader has special handlers for max-flow and graph coloring
    problems, which are specified in the problem line as 'max' and 'edge'
    respectively. Other graphs are treated as generic DIMACS files.
    
    DIMACS formatted files consist of lines in which the first character
    in in column 0 specifies the type of the line.
    
    Generic DIMACS files have the following line types:
    - problem statement line : p graph num_verts num_edges
    - node line (optional)   : n node_id node_weight
    - edge line              : a src_id trg_id edge_weight
    - alternate edge format  : e src_id trg_id edge_weight
    - comment lines          : c I am a comment line
    ** note, there should be one and only one problem statement line per
       file.
    
    DIMACS graphs are undirected and nodes are numbered 1..n
    
    See webpage for additional formatting details.
    -  http://dimacs.rutgers.edu/Challenges/
    -  http://www.dis.uniroma1.it/~challenge9/format.shtml
    
    @sa
    vtkDIMACSGraphWriter
    """
    def GetEdgeAttributeArrayName(self):
        """
        V.GetEdgeAttributeArrayName() -> string
        C++: virtual char *GetEdgeAttributeArrayName()
        
        Edge attribute array name
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The DIMACS file name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetVertexAttributeArrayName(self):
        """
        V.GetVertexAttributeArrayName() -> string
        C++: virtual char *GetVertexAttributeArrayName()
        
        Vertex attribute array name
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDIMACSGraphReader
        C++: vtkDIMACSGraphReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDIMACSGraphReader
        C++: static vtkDIMACSGraphReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEdgeAttributeArrayName(self, string):
        """
        V.SetEdgeAttributeArrayName(string)
        C++: virtual void SetEdgeAttributeArrayName(const char *_arg)
        
        Edge attribute array name
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The DIMACS file name.
        """
        ...
    
    def SetVertexAttributeArrayName(self, string):
        """
        V.SetVertexAttributeArrayName(string)
        C++: virtual void SetVertexAttributeArrayName(const char *_arg)
        
        Vertex attribute array name
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDIMACSGraphWriter(__vtkmodules_vtkIOLegacy.vtkDataWriter):
    """
    vtkDIMACSGraphWriter - write vtkGraph data to a DIMACS formatted file
    
    Superclass: vtkDataWriter
    
    vtkDIMACSGraphWriter is a sink object that writes vtkGraph data files
    into a generic DIMACS (.gr) format.
    
    Output files contain a problem statement line:
    
    p graph <num_verts> <num_edges>
    
    Followed by |E| edge descriptor lines that are formatted as:
    
    e <target> 
    
    Vertices are numbered from 1..n in DIMACS formatted files.
    
    See webpage for format details.
    http://prolland.free.fr/works/research/dsat/dimacs.html
    
    @sa
    vtkDIMACSGraphReader
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkGraph
        C++: vtkGraph *GetInput()
        V.GetInput(int) -> vtkGraph
        C++: vtkGraph *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDIMACSGraphWriter
        C++: vtkDIMACSGraphWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDIMACSGraphWriter
        C++: static vtkDIMACSGraphWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFixedWidthTextReader(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkFixedWidthTextReader - reader for pulling in text files with
    fixed-width fields
    
    Superclass: vtkTableAlgorithm
    
    vtkFixedWidthTextReader reads in a table from a text file where each
    column occupies a certain number of characters.
    
    This class emits ProgressEvent for every 100 lines it reads.
    
    @warning
    This first version of the reader will assume that all fields have the
    same width.  It also assumes that the first line in the file has at
    least as many fields (i.e. at least as many characters) as any other
    line in the file.
    
    @par Thanks: Thanks to Andy Wilson from Sandia National Laboratories
    for implementing this class.
    """
    def GetFieldWidth(self):
        """
        V.GetFieldWidth() -> int
        C++: virtual int GetFieldWidth()
        
        Set/get the field width
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        """
        ...
    
    def GetHaveHeaders(self):
        """
        V.GetHaveHeaders() -> bool
        C++: virtual bool GetHaveHeaders()
        
        Set/get whether to treat the first line of the file as headers.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStripWhiteSpace(self):
        """
        V.GetStripWhiteSpace() -> bool
        C++: virtual bool GetStripWhiteSpace()
        
        If set, this flag will cause the reader to strip whitespace from
        the beginning and ending of each field.  Defaults to off.
        """
        ...
    
    def GetTableErrorObserver(self):
        """
        V.GetTableErrorObserver() -> vtkCommand
        C++: virtual vtkCommand *GetTableErrorObserver()
        
        Set/get the ErrorObserver for the internal vtkTable This is
        useful for applications that want to catch error messages.
        """
        ...
    
    def HaveHeadersOff(self):
        """
        V.HaveHeadersOff()
        C++: virtual void HaveHeadersOff()
        
        Set/get whether to treat the first line of the file as headers.
        """
        ...
    
    def HaveHeadersOn(self):
        """
        V.HaveHeadersOn()
        C++: virtual void HaveHeadersOn()
        
        Set/get whether to treat the first line of the file as headers.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFixedWidthTextReader
        C++: vtkFixedWidthTextReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFixedWidthTextReader
        C++: static vtkFixedWidthTextReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFieldWidth(self, p_int):
        """
        V.SetFieldWidth(int)
        C++: virtual void SetFieldWidth(int _arg)
        
        Set/get the field width
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        """
        ...
    
    def SetHaveHeaders(self, bool):
        """
        V.SetHaveHeaders(bool)
        C++: virtual void SetHaveHeaders(bool _arg)
        
        Set/get whether to treat the first line of the file as headers.
        """
        ...
    
    def SetStripWhiteSpace(self, bool):
        """
        V.SetStripWhiteSpace(bool)
        C++: virtual void SetStripWhiteSpace(bool _arg)
        
        If set, this flag will cause the reader to strip whitespace from
        the beginning and ending of each field.  Defaults to off.
        """
        ...
    
    def SetTableErrorObserver(self, vtkCommand):
        """
        V.SetTableErrorObserver(vtkCommand)
        C++: void SetTableErrorObserver(vtkCommand *)
        
        Set/get the ErrorObserver for the internal vtkTable This is
        useful for applications that want to catch error messages.
        """
        ...
    
    def StripWhiteSpaceOff(self):
        """
        V.StripWhiteSpaceOff()
        C++: virtual void StripWhiteSpaceOff()
        
        If set, this flag will cause the reader to strip whitespace from
        the beginning and ending of each field.  Defaults to off.
        """
        ...
    
    def StripWhiteSpaceOn(self):
        """
        V.StripWhiteSpaceOn()
        C++: virtual void StripWhiteSpaceOn()
        
        If set, this flag will cause the reader to strip whitespace from
        the beginning and ending of each field.  Defaults to off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkISIReader(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkISIReader - reader for ISI files
    
    Superclass: vtkTableAlgorithm
    
    ISI is a tagged format for expressing bibliographic citations.  Data
    is structured as a collection of records with each record composed of
    one-to-many fields.  See
    
    http://isibasic.com/help/helpprn.html#dialog_export_format
    
    for details.  vtkISIReader will convert an ISI file into a vtkTable,
    with the set of table columns determined dynamically from the
    contents of the file.
    """
    def GetDelimiter(self):
        """
        V.GetDelimiter() -> string
        C++: virtual char *GetDelimiter()
        
        Set/get the delimiter to be used for concatenating field data
        (default: ";")
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/get the file to load
        """
        ...
    
    def GetMaxRecords(self):
        """
        V.GetMaxRecords() -> int
        C++: virtual int GetMaxRecords()
        
        Set/get the maximum number of records to read from the file (zero
        = unlimited)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkISIReader
        C++: vtkISIReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkISIReader
        C++: static vtkISIReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDelimiter(self, string):
        """
        V.SetDelimiter(string)
        C++: virtual void SetDelimiter(const char *_arg)
        
        Set/get the delimiter to be used for concatenating field data
        (default: ";")
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/get the file to load
        """
        ...
    
    def SetMaxRecords(self, p_int):
        """
        V.SetMaxRecords(int)
        C++: virtual void SetMaxRecords(int _arg)
        
        Set/get the maximum number of records to read from the file (zero
        = unlimited)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMultiNewickTreeReader(__vtkmodules_vtkIOLegacy.vtkDataReader):
    """
    vtkMultiNewickTreeReader - read multiple vtkTrees from Newick
    formatted file
    
    Superclass: vtkDataReader
    
    vtkMultiNewickTreeReader is a source object that reads Newick tree
    format files. The output of this reader is a single
    vtkMultiPieceDataSet that contains multiple vtkTree objects. The
    superclass of this class, vtkDataReader, provides many methods for
    controlling the reading of the data file, see vtkDataReader for more
    information.
    @sa
    vtkTree vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkMultiPieceDataSet
        C++: vtkMultiPieceDataSet *GetOutput()
        V.GetOutput(int) -> vtkMultiPieceDataSet
        C++: vtkMultiPieceDataSet *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMultiNewickTreeReader
        C++: vtkMultiNewickTreeReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMultiNewickTreeReader
        C++: static vtkMultiNewickTreeReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkMultiPieceDataSet):
        """
        V.SetOutput(vtkMultiPieceDataSet)
        C++: void SetOutput(vtkMultiPieceDataSet *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNewickTreeReader(__vtkmodules_vtkIOLegacy.vtkDataReader):
    """
    vtkNewickTreeReader - read vtkTree from Newick formatted file
    
    Superclass: vtkDataReader
    
    vtkNewickTreeReader is a source object that reads Newick tree format
    files. The output of this reader is a single vtkTree data object. The
    superclass of this class, vtkDataReader, provides many methods for
    controlling the reading of the data file, see vtkDataReader for more
    information.@par Thanks: This class is adapted from code originally
    written by Yu-Wei Wu.
    @sa
    vtkTree vtkDataReader
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkTree
        C++: vtkTree *GetOutput()
        V.GetOutput(int) -> vtkTree
        C++: vtkTree *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNewickTreeReader
        C++: vtkNewickTreeReader *NewInstance()
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output) override;
        
        Actual reading happens here
        """
        ...
    
    def ReadNewickTree(self, string, vtkTree):
        """
        V.ReadNewickTree(string, vtkTree) -> int
        C++: int ReadNewickTree(const char *buffer, vtkTree &tree)
        
        Get the output of this reader.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNewickTreeReader
        C++: static vtkNewickTreeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOutput(self, vtkTree):
        """
        V.SetOutput(vtkTree)
        C++: void SetOutput(vtkTree *output)
        
        Get the output of this reader.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNewickTreeWriter(__vtkmodules_vtkIOLegacy.vtkDataWriter):
    """
    vtkNewickTreeWriter - write vtkTree data to Newick format.
    
    Superclass: vtkDataWriter
    
    vtkNewickTreeWriter is writes a vtkTree to a Newick formatted file or
    string.
    """
    def GetEdgeWeightArrayName(self):
        """
        V.GetEdgeWeightArrayName() -> string
        C++: virtual vtkStdString GetEdgeWeightArrayName()
        
        Get/Set the name of the input's tree edge weight array. This
        array must be part of the input tree's EdgeData. The default name
        is "weight".  If this array cannot be found, then no edge weights
        will be included in the output of this writer.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkTree
        C++: vtkTree *GetInput()
        V.GetInput(int) -> vtkTree
        C++: vtkTree *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNodeNameArrayName(self):
        """
        V.GetNodeNameArrayName() -> string
        C++: virtual vtkStdString GetNodeNameArrayName()
        
        Get/Set the name of the input's tree node name array. This array
        must be part of the input tree's VertexData. The default name is "node
        name".  If this array cannot be found, then no node names will be
        included in the output of this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNewickTreeWriter
        C++: vtkNewickTreeWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNewickTreeWriter
        C++: static vtkNewickTreeWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEdgeWeightArrayName(self, string):
        """
        V.SetEdgeWeightArrayName(string)
        C++: virtual void SetEdgeWeightArrayName(vtkStdString _arg)
        
        Get/Set the name of the input's tree edge weight array. This
        array must be part of the input tree's EdgeData. The default name
        is "weight".  If this array cannot be found, then no edge weights
        will be included in the output of this writer.
        """
        ...
    
    def SetNodeNameArrayName(self, string):
        """
        V.SetNodeNameArrayName(string)
        C++: virtual void SetNodeNameArrayName(vtkStdString _arg)
        
        Get/Set the name of the input's tree node name array. This array
        must be part of the input tree's VertexData. The default name is "node
        name".  If this array cannot be found, then no node names will be
        included in the output of this writer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPhyloXMLTreeReader(__vtkmodules_vtkIOXML.vtkXMLReader):
    """
    vtkPhyloXMLTreeReader - read vtkTree from PhyloXML formatted file
    
    Superclass: vtkXMLReader
    
    vtkPhyloXMLTreeReader is a source object that reads PhyloXML tree
    format files. The output of this reader is a single vtkTree data
    object.
    
    @warning
    This reader does not implement the entire PhyloXML specification. It
    currently only supports the following tags: phylogeny, name,
    description, confidence, property, clade, branch_length, color, red,
    green, and blue. This reader also only supports a single phylogeny
    per file.
    
    @sa
    vtkTree vtkXMLReader vtkPhyloXMLTreeWriter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkTree
        C++: vtkTree *GetOutput()
        V.GetOutput(int) -> vtkTree
        C++: vtkTree *GetOutput(int idx)
        
        Get the output of this reader.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPhyloXMLTreeReader
        C++: vtkPhyloXMLTreeReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPhyloXMLTreeReader
        C++: static vtkPhyloXMLTreeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPhyloXMLTreeWriter(__vtkmodules_vtkIOXML.vtkXMLWriter):
    """
    vtkPhyloXMLTreeWriter - write vtkTree data to PhyloXML format.
    
    Superclass: vtkXMLWriter
    
    vtkPhyloXMLTreeWriter is writes a vtkTree to a PhyloXML formatted
    file or string.
    """
    def GetDefaultFileExtension(self):
        """
        V.GetDefaultFileExtension() -> string
        C++: const char *GetDefaultFileExtension() override;
        
        Get the default file extension for files written by this writer.
        """
        ...
    
    def GetEdgeWeightArrayName(self):
        """
        V.GetEdgeWeightArrayName() -> string
        C++: virtual vtkStdString GetEdgeWeightArrayName()
        
        Get/Set the name of the input's tree edge weight array. This
        array must be part of the input tree's EdgeData. The default name
        is "weight".  If this array cannot be found, then no edge weights
        will be included in the output of this writer.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkTree
        C++: vtkTree *GetInput()
        V.GetInput(int) -> vtkTree
        C++: vtkTree *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetNodeNameArrayName(self):
        """
        V.GetNodeNameArrayName() -> string
        C++: virtual vtkStdString GetNodeNameArrayName()
        
        Get/Set the name of the input's tree node name array. This array
        must be part of the input tree's VertexData. The default name is "node
        name".  If this array cannot be found, then no node names will be
        included in the output of this writer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IgnoreArray(self, string):
        """
        V.IgnoreArray(string)
        C++: void IgnoreArray(const char *arrayName)
        
        Do not include name the VertexData array in the PhyloXML output
        of this writer.  Call this function once for each array that you
        wish to ignore.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPhyloXMLTreeWriter
        C++: vtkPhyloXMLTreeWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPhyloXMLTreeWriter
        C++: static vtkPhyloXMLTreeWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEdgeWeightArrayName(self, string):
        """
        V.SetEdgeWeightArrayName(string)
        C++: virtual void SetEdgeWeightArrayName(vtkStdString _arg)
        
        Get/Set the name of the input's tree edge weight array. This
        array must be part of the input tree's EdgeData. The default name
        is "weight".  If this array cannot be found, then no edge weights
        will be included in the output of this writer.
        """
        ...
    
    def SetNodeNameArrayName(self, string):
        """
        V.SetNodeNameArrayName(string)
        C++: virtual void SetNodeNameArrayName(vtkStdString _arg)
        
        Get/Set the name of the input's tree node name array. This array
        must be part of the input tree's VertexData. The default name is "node
        name".  If this array cannot be found, then no node names will be
        included in the output of this writer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRISReader(__vtkmodules_vtkCommonExecutionModel.vtkTableAlgorithm):
    """
    vtkRISReader - reader for RIS files
    
    Superclass: vtkTableAlgorithm
    
    RIS is a tagged format for expressing bibliographic citations.  Data
    is structured as a collection of records with each record composed of
    one-to-many fields.  See
    
    http://en.wikipedia.org/wiki/RIS_(file_format)
    http://www.refman.com/support/risformat_intro.asp
    http://www.adeptscience.co.uk/kb/article/A626
    
    for details.  vtkRISReader will convert an RIS file into a vtkTable,
    with the set of table columns determined dynamically from the
    contents of the file.
    """
    def GetDelimiter(self):
        """
        V.GetDelimiter() -> string
        C++: virtual char *GetDelimiter()
        
        Set/get the delimiter to be used for concatenating field data
        (default: ";")
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/get the file to load
        """
        ...
    
    def GetMaxRecords(self):
        """
        V.GetMaxRecords() -> int
        C++: virtual int GetMaxRecords()
        
        Set/get the maximum number of records to read from the file (zero
        = unlimited)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRISReader
        C++: vtkRISReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRISReader
        C++: static vtkRISReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDelimiter(self, string):
        """
        V.SetDelimiter(string)
        C++: virtual void SetDelimiter(const char *_arg)
        
        Set/get the delimiter to be used for concatenating field data
        (default: ";")
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/get the file to load
        """
        ...
    
    def SetMaxRecords(self, p_int):
        """
        V.SetMaxRecords(int)
        C++: virtual void SetMaxRecords(int _arg)
        
        Set/get the maximum number of records to read from the file (zero
        = unlimited)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTemporalDelimitedTextReader(vtkDelimitedTextReader):
    """
    vtkTemporalDelimitedTextReader - reads a delimited ascii or unicode
    text files and and output a temporal vtkTable.
    
    Superclass: vtkDelimitedTextReader
    
    This reader requires that FieldDelimiterCharacters is set before the
    pipeline is executed, otherwise it will produce an empty output.
    
    A column can be selected as time step indicator using the
    SetTimeColumnName or SetTimeColumnId functions. If so, for a given
    time step 's' only the lines where the time step indicator column
    have the value 's' are present. To control if the time step indicator
    column should be present in the output, a RemoveTimeStepColumn option
    is available. If no time step indicator column is given by the user,
    the whole file it outputted.
    
    This reader assume the time step column is numeric. A warning is set
    otherwise. The DetectNumericColumns field is set to on, do not change
    this field unless you really know what you are doing.
    
    @see vtkDelimitedTextReader
    """
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Internal fields of this reader use a specific MTime
        (InternalMTime). This mechamism ensure the actual data is only
        re-read when necessary. Here, we ensure the GetMTime of this
        reader stay consistent by returning the latest between the MTime
        of this reader and the internal one.
        
        @see InternalModified
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRemoveTimeStepColumn(self):
        """
        V.GetRemoveTimeStepColumn() -> bool
        C++: virtual bool GetRemoveTimeStepColumn()
        
        Set the RemoveTimeStepColumn flag If this boolean is true, the
        output will not contain the Time step column. Default to true.
        """
        ...
    
    def GetTimeColumnId(self):
        """
        V.GetTimeColumnId() -> int
        C++: virtual int GetTimeColumnId()
        
        Get/Set the column to use as time indicator. It the TimeColumnId
        is equal to -1, the TimeColumnName will be used instead. If no
        column has been chosen using either the TimeColumnId or the
        TimeColumnName the whole input file is outputted. Default to -1.
        """
        ...
    
    def GetTimeColumnName(self):
        """
        V.GetTimeColumnName() -> string
        C++: virtual std::string GetTimeColumnName()
        
        Get/Set the name of the column to use as time indicator. Ignored
        if TimeColumnId is not equal to -1. If no column has been chosen
        using either the TimeColumnId or the TimeColumnName the whole
        input file is outputted. Default to empty string.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTemporalDelimitedTextReader
        C++: vtkTemporalDelimitedTextReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTemporalDelimitedTextReader
        C++: static vtkTemporalDelimitedTextReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetRemoveTimeStepColumn(self, bool):
        """
        V.SetRemoveTimeStepColumn(bool)
        C++: void SetRemoveTimeStepColumn(bool rts)
        
        Set the RemoveTimeStepColumn flag If this boolean is true, the
        output will not contain the Time step column. Default to true.
        """
        ...
    
    def SetTimeColumnId(self, p_int):
        """
        V.SetTimeColumnId(int)
        C++: void SetTimeColumnId(const int idx)
        
        Get/Set the column to use as time indicator. It the TimeColumnId
        is equal to -1, the TimeColumnName will be used instead. If no
        column has been chosen using either the TimeColumnId or the
        TimeColumnName the whole input file is outputted. Default to -1.
        """
        ...
    
    def SetTimeColumnName(self, string):
        """
        V.SetTimeColumnName(string)
        C++: void SetTimeColumnName(const std::string name)
        
        Get/Set the name of the column to use as time indicator. Ignored
        if TimeColumnId is not equal to -1. If no column has been chosen
        using either the TimeColumnId or the TimeColumnName the whole
        input file is outputted. Default to empty string.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTulipReader(__vtkmodules_vtkCommonExecutionModel.vtkUndirectedGraphAlgorithm):
    """
    vtkTulipReader - Reads tulip graph files.
    
    Superclass: vtkUndirectedGraphAlgorithm
    
    vtkTulipReader reads in files in the Tulip format. Definition of the
    Tulip file format can be found online at:
    http://tulip.labri.fr/tlpformat.php An example is the following 
    (nodes 0 1 2 3 4 5 6 7 8 9) (edge 0 0 1) (edge 1 1 2) (edge 2 2 3)
    (edge 3 3 4) (edge 4 4 5) (edge 5 5 6) (edge 6 6 7) (edge 7 7 8)
    (edge 8 8 9) (edge 9 9 0) (edge 10 0 5) (edge 11 2 7) (edge 12 4 9) 
    where "nodes" defines all the nodes ids in the graph, and "edge" is a
    triple of edge id, source vertex id, and target vertex id. The graph
    is read in as undirected graph. Pedigree ids are set on the output
    graph's vertices and edges that match the node and edge ids defined
    in the Tulip file.
    
    Clusters are output as a vtkAnnotationLayers on output port 1. Each
    cluster name is used to create an annotation layer, and each cluster
    with that name is added to the layer as a vtkSelectionNode. Nesting
    hierarchies are treated as if they were flat. See
    vtkGraphAnnotationLayersFilter for an example of how the clusters can
    be represented visually.
    
    @attention Only string, int, and double properties are supported.
    Display information is discarded.
    
    @par Thanks: Thanks to Colin Myers, University of Leeds for extending
    this implementation.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The Tulip file name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTulipReader
        C++: vtkTulipReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTulipReader
        C++: static vtkTulipReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The Tulip file name.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXGMLReader(__vtkmodules_vtkCommonExecutionModel.vtkUndirectedGraphAlgorithm):
    """
    vtkXGMLReader - Reads XGML graph files.
    
    Superclass: vtkUndirectedGraphAlgorithm
    
    This reader is developed for a simple graph file format based loosely
    on the "GML" notation.  This implementation is based heavily on the
    vtkTulipReader class that forms part of the Titan toolkit.
    
    @par Thanks: Thanks to David Duke from the University of Leeds for
    providing this implementation.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        The XGML file name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXGMLReader
        C++: vtkXGMLReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXGMLReader
        C++: static vtkXGMLReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        The XGML file name.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXMLTreeReader(__vtkmodules_vtkCommonExecutionModel.vtkTreeAlgorithm):
    """
    vtkXMLTreeReader - reads an XML file into a vtkTree
    
    Superclass: vtkTreeAlgorithm
    
    vtkXMLTreeReader parses an XML file and uses the nesting structure of
    the XML tags to generate a tree.  Node attributes are assigned to
    node arrays, and the special arrays .tagname and .chardata contain
    the tag type and the text internal to the tag, respectively.  The
    arrays are of type vtkStringArray.  There is an array for each
    attribute type in the XML file, even if it appears in only one tag. 
    If an attribute is missing from a tag, its value is the empty string.
    
    If MaskArrays is on (the default is off), the filter will
    additionally make bit arrays whose names are prepended with ".valid."
    which are 1 if the element contains that attribute, and 0 otherwise.
    
    For example, the XML file containing the text:
    
    &lt;node name="jeff" age="26"&gt;
      this is text in jeff's node
      &lt;node name="joe"&gt;
        &lt;node name="al" initials="amb" other="something"/&gt;
        &lt;node name="dave" age="30"/&gt;
      &lt;/node&gt;
      &lt;node name="lisa"&gt;this is text in lisa's node&lt;/node&gt;
      &lt;node name="darlene" age="29"/&gt; &lt;/node&gt; 
    
    would be parsed into a tree with the following node IDs and
    structure:
    
    0 (jeff) - children: 1 (joe), 4 (lisa), 5 (darlene) 1 (joe)  -
    children: 2 (al), 3 (dave) 2 (al) 3 (dave) 4 (lisa) 5 (darlene) 
    
    and the node data arrays would be as follows:
    
    name      initials  other     age       .tagname  .chardata
    ----------------------------------------------------------------------
        -------------------------- jeff      (empty)   (empty)   26      
      node     "  this is text in jeff's node\n  \n  \n  \n" joe      
        (empty)   (empty)   (empty)    node     "\n    \n    \n  " al    
       amb       something (empty)    node     (empty) dave      (empty) 
     (empty)   30         node     (empty) lisa      (empty)   (empty)  
        (empty)    node     "this is text in lisa's node" darlene  
        (empty)   (empty)   29         node     (empty) 
    
    There would also be the following bit arrays if MaskArrays is on:
    
    .valid.name   .valid.initials   .valid.other   .valid.age
    --------------------------------------------------------- 1          
      0                 0              1 1             0                
        0              0 1             1                 1              0
        1             0                 0              1 1             0 
                   0              0 1             0                 0    
             1
    """
    def GenerateEdgePedigreeIdsOff(self):
        """
        V.GenerateEdgePedigreeIdsOff()
        C++: virtual void GenerateEdgePedigreeIdsOff()
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def GenerateEdgePedigreeIdsOn(self):
        """
        V.GenerateEdgePedigreeIdsOn()
        C++: virtual void GenerateEdgePedigreeIdsOn()
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def GenerateVertexPedigreeIdsOff(self):
        """
        V.GenerateVertexPedigreeIdsOff()
        C++: virtual void GenerateVertexPedigreeIdsOff()
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def GenerateVertexPedigreeIdsOn(self):
        """
        V.GenerateVertexPedigreeIdsOn()
        C++: virtual void GenerateVertexPedigreeIdsOn()
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def GetEdgePedigreeIdArrayName(self):
        """
        V.GetEdgePedigreeIdArrayName() -> string
        C++: virtual char *GetEdgePedigreeIdArrayName()
        
        The name of the edge pedigree ids. Default is "edge id".
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        If set, reads in the XML file specified.
        """
        ...
    
    def GetGenerateEdgePedigreeIds(self):
        """
        V.GetGenerateEdgePedigreeIds() -> bool
        C++: virtual bool GetGenerateEdgePedigreeIds()
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def GetGenerateVertexPedigreeIds(self):
        """
        V.GetGenerateVertexPedigreeIds() -> bool
        C++: virtual bool GetGenerateVertexPedigreeIds()
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def GetMaskArrays(self):
        """
        V.GetMaskArrays() -> bool
        C++: virtual bool GetMaskArrays()
        
        If on, makes bit arrays for each attribute with name
        .valid.attribute_name for each attribute.  Default is off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReadCharData(self):
        """
        V.GetReadCharData() -> bool
        C++: virtual bool GetReadCharData()
        
        If on, stores the XML character data (i.e. textual data between
        tags) into an array named CharDataField, otherwise this field is
        skipped. Default is off.
        """
        ...
    
    def GetReadTagName(self):
        """
        V.GetReadTagName() -> bool
        C++: virtual bool GetReadTagName()
        
        If on, stores the XML tag name data in a field called .tagname
        otherwise this field is skipped. Default is on.
        """
        ...
    
    def GetVertexPedigreeIdArrayName(self):
        """
        V.GetVertexPedigreeIdArrayName() -> string
        C++: virtual char *GetVertexPedigreeIdArrayName()
        
        The name of the vertex pedigree ids. Default is "vertex id".
        """
        ...
    
    def GetXMLString(self):
        """
        V.GetXMLString() -> string
        C++: virtual char *GetXMLString()
        
        If set, and FileName is not set, reads in the XML string.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MaskArraysOff(self):
        """
        V.MaskArraysOff()
        C++: virtual void MaskArraysOff()
        
        If on, makes bit arrays for each attribute with name
        .valid.attribute_name for each attribute.  Default is off.
        """
        ...
    
    def MaskArraysOn(self):
        """
        V.MaskArraysOn()
        C++: virtual void MaskArraysOn()
        
        If on, makes bit arrays for each attribute with name
        .valid.attribute_name for each attribute.  Default is off.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLTreeReader
        C++: vtkXMLTreeReader *NewInstance()
        """
        ...
    
    def ReadCharDataOff(self):
        """
        V.ReadCharDataOff()
        C++: virtual void ReadCharDataOff()
        
        If on, stores the XML character data (i.e. textual data between
        tags) into an array named CharDataField, otherwise this field is
        skipped. Default is off.
        """
        ...
    
    def ReadCharDataOn(self):
        """
        V.ReadCharDataOn()
        C++: virtual void ReadCharDataOn()
        
        If on, stores the XML character data (i.e. textual data between
        tags) into an array named CharDataField, otherwise this field is
        skipped. Default is off.
        """
        ...
    
    def ReadTagNameOff(self):
        """
        V.ReadTagNameOff()
        C++: virtual void ReadTagNameOff()
        
        If on, stores the XML tag name data in a field called .tagname
        otherwise this field is skipped. Default is on.
        """
        ...
    
    def ReadTagNameOn(self):
        """
        V.ReadTagNameOn()
        C++: virtual void ReadTagNameOn()
        
        If on, stores the XML tag name data in a field called .tagname
        otherwise this field is skipped. Default is on.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLTreeReader
        C++: static vtkXMLTreeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEdgePedigreeIdArrayName(self, string):
        """
        V.SetEdgePedigreeIdArrayName(string)
        C++: virtual void SetEdgePedigreeIdArrayName(const char *_arg)
        
        The name of the edge pedigree ids. Default is "edge id".
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        If set, reads in the XML file specified.
        """
        ...
    
    def SetGenerateEdgePedigreeIds(self, bool):
        """
        V.SetGenerateEdgePedigreeIds(bool)
        C++: virtual void SetGenerateEdgePedigreeIds(bool _arg)
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def SetGenerateVertexPedigreeIds(self, bool):
        """
        V.SetGenerateVertexPedigreeIds(bool)
        C++: virtual void SetGenerateVertexPedigreeIds(bool _arg)
        
        Set whether to use an property from the XML file as pedigree ids
        (off), or generate a new array with integer values starting at
        zero (on). Default is on.
        """
        ...
    
    def SetMaskArrays(self, bool):
        """
        V.SetMaskArrays(bool)
        C++: virtual void SetMaskArrays(bool _arg)
        
        If on, makes bit arrays for each attribute with name
        .valid.attribute_name for each attribute.  Default is off.
        """
        ...
    
    def SetReadCharData(self, bool):
        """
        V.SetReadCharData(bool)
        C++: virtual void SetReadCharData(bool _arg)
        
        If on, stores the XML character data (i.e. textual data between
        tags) into an array named CharDataField, otherwise this field is
        skipped. Default is off.
        """
        ...
    
    def SetReadTagName(self, bool):
        """
        V.SetReadTagName(bool)
        C++: virtual void SetReadTagName(bool _arg)
        
        If on, stores the XML tag name data in a field called .tagname
        otherwise this field is skipped. Default is on.
        """
        ...
    
    def SetVertexPedigreeIdArrayName(self, string):
        """
        V.SetVertexPedigreeIdArrayName(string)
        C++: virtual void SetVertexPedigreeIdArrayName(const char *_arg)
        
        The name of the vertex pedigree ids. Default is "vertex id".
        """
        ...
    
    def SetXMLString(self, string):
        """
        V.SetXMLString(string)
        C++: virtual void SetXMLString(const char *_arg)
        
        If set, and FileName is not set, reads in the XML string.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
