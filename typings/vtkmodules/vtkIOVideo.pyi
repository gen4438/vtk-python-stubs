"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkVideoSource(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkVideoSource - Superclass of video input devices for VTK
    
    Superclass: vtkImageAlgorithm
    
    vtkVideoSource is a superclass for video input interfaces for VTK.
    The goal is to provide an interface which is very similar to the
    interface of a VCR, where the 'tape' is an internal frame buffer
    capable of holding a preset number of video frames.  Specialized
    versions of this class record input from various video input sources.
    This base class records input from a noise source.
    @warning
    You must call the ReleaseSystemResources() method before the
    application exits.  Otherwise the application might hang while trying
    to exit.
    @sa
    vtkWin32VideoSource vtkMILVideoSource
    """
    def AutoAdvanceOff(self):
        """
        V.AutoAdvanceOff()
        C++: virtual void AutoAdvanceOff()
        
        Set whether to automatically advance the buffer before each grab.
        Default: on
        """
        ...
    
    def AutoAdvanceOn(self):
        """
        V.AutoAdvanceOn()
        C++: virtual void AutoAdvanceOn()
        
        Set whether to automatically advance the buffer before each grab.
        Default: on
        """
        ...
    
    def FastForward(self):
        """
        V.FastForward()
        C++: virtual void FastForward()
        
        FastForward to the last frame that was recorded (i.e. to the
        frame that has the most recent timestamp).
        """
        ...
    
    def GetAutoAdvance(self):
        """
        V.GetAutoAdvance() -> int
        C++: virtual vtkTypeBool GetAutoAdvance()
        
        Set whether to automatically advance the buffer before each grab.
        Default: on
        """
        ...
    
    def GetClipRegion(self):
        """
        V.GetClipRegion() -> (int, int, int, int, int, int)
        C++: virtual int *GetClipRegion()
        
        Set the clip rectangle for the frames.  The video will be clipped
        before it is copied into the framebuffer.  Changing the
        ClipRegion will destroy the current contents of the framebuffer.
        The default ClipRegion is
        (0,VTK_INT_MAX,0,VTK_INT_MAX,0,VTK_INT_MAX).
        """
        ...
    
    def GetDataOrigin(self):
        """
        V.GetDataOrigin() -> (float, float, float)
        C++: virtual double *GetDataOrigin()
        
        Set/Get the coordinates of the lower, left corner of the frame.
        Default: (0.0,0.0,0.0)
        """
        ...
    
    def GetDataSpacing(self):
        """
        V.GetDataSpacing() -> (float, float, float)
        C++: virtual double *GetDataSpacing()
        
        Set/Get the pixel spacing. Default: (1.0,1.0,1.0)
        """
        ...
    
    def GetFrameBufferSize(self):
        """
        V.GetFrameBufferSize() -> int
        C++: virtual int GetFrameBufferSize()
        
        Set size of the frame buffer, i.e. the number of frames that the
        'tape' can store.
        """
        ...
    
    def GetFrameCount(self):
        """
        V.GetFrameCount() -> int
        C++: virtual int GetFrameCount()
        
        This value is incremented each time a frame is grabbed. reset it
        to zero (or any other value) at any time.
        """
        ...
    
    def GetFrameIndex(self):
        """
        V.GetFrameIndex() -> int
        C++: virtual int GetFrameIndex()
        
        Get the frame index relative to the 'beginning of the tape'. 
        This value wraps back to zero if it increases past the
        FrameBufferSize.
        """
        ...
    
    def GetFrameRate(self):
        """
        V.GetFrameRate() -> float
        C++: virtual float GetFrameRate()
        
        Request a particular frame rate (default 30 frames per second).
        """
        ...
    
    def GetFrameSize(self):
        """
        V.GetFrameSize() -> (int, int, int)
        C++: virtual int *GetFrameSize()
        
        Set the full-frame size.  This must be an allowed size for the
        device, the device may either refuse a request for an illegal
        frame size or automatically choose a new frame size. The default
        is usually 320x240x1, but can be device specific. The 'depth'
        should always be 1 (unless you have a device that can handle 3D
        acquisition).
        """
        ...
    
    def GetFrameTimeStamp(self, p_int):
        """
        V.GetFrameTimeStamp(int) -> float
        C++: virtual double GetFrameTimeStamp(int frame)
        V.GetFrameTimeStamp() -> float
        C++: double GetFrameTimeStamp()
        
        Get a time stamp in seconds (resolution of milliseconds) for a
        video frame.   Time began on Jan 1, 1970.  You can specify a
        number (negative or positive) to specify the position of the
        video frame relative to the current frame.
        """
        ...
    
    def GetInitialized(self):
        """
        V.GetInitialized() -> int
        C++: virtual int GetInitialized()
        
        Initialize the hardware.  This is called automatically on the
        first Update or Grab.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfOutputFrames(self):
        """
        V.GetNumberOfOutputFrames() -> int
        C++: virtual int GetNumberOfOutputFrames()
        
        Set the number of frames to copy to the output on each execute.
        The frames will be concatenated along the Z dimension, with the
        most recent frame first. Default: 1
        """
        ...
    
    def GetOpacity(self):
        """
        V.GetOpacity() -> float
        C++: virtual float GetOpacity()
        
        For RGBA output only (4 scalar components), set the opacity. 
        This will not modify the existing contents of the framebuffer,
        only subsequently grabbed frames.
        """
        ...
    
    def GetOutputFormat(self):
        """
        V.GetOutputFormat() -> int
        C++: virtual int GetOutputFormat()
        
        Set the output format.  This must be appropriate for device,
        usually only VTK_LUMINANCE, VTK_RGB, and VTK_RGBA are supported.
        """
        ...
    
    def GetOutputWholeExtent(self):
        """
        V.GetOutputWholeExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetOutputWholeExtent()
        
        Get/Set the WholeExtent of the output.  This can be used to
        either clip or pad the video frame.  This clipping/padding is
        done when the frame is copied to the output, and does not change
        the contents of the framebuffer.  This is useful e.g. for
        expanding the output size to a power of two for texture mapping. 
        The default is (0,-1,0,-1,0,-1) which causes the entire frame to
        be copied to the output.
        """
        ...
    
    def GetPlaying(self):
        """
        V.GetPlaying() -> int
        C++: virtual int GetPlaying()
        
        Are we in play mode? (record mode and play mode are mutually
        exclusive).
        """
        ...
    
    def GetRecording(self):
        """
        V.GetRecording() -> int
        C++: virtual int GetRecording()
        
        Are we in record mode? (record mode and play mode are mutually
        exclusive).
        """
        ...
    
    def GetStartTimeStamp(self):
        """
        V.GetStartTimeStamp() -> float
        C++: double GetStartTimeStamp()
        
        And internal variable which marks the beginning of a Record
        session. These methods are for internal use only.
        """
        ...
    
    def Grab(self):
        """
        V.Grab()
        C++: virtual void Grab()
        
        Grab a single video frame.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize()
        
        Initialize the hardware.  This is called automatically on the
        first Update or Grab.
        """
        ...
    
    def InternalGrab(self):
        """
        V.InternalGrab()
        C++: virtual void InternalGrab()
        
        The internal function which actually does the grab.  You will
        definitely want to override this if you develop a vtkVideoSource
        subclass.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVideoSource
        C++: vtkVideoSource *NewInstance()
        """
        ...
    
    def Play(self):
        """
        V.Play()
        C++: virtual void Play()
        
        Play through the 'tape' sequentially at the specified frame rate.
        If you have just finished Recoding, you should call Rewind()
        first.
        """
        ...
    
    def Record(self):
        """
        V.Record()
        C++: virtual void Record()
        
        Record incoming video at the specified FrameRate.  The recording
        continues indefinitely until Stop() is called.
        """
        ...
    
    def ReleaseSystemResources(self):
        """
        V.ReleaseSystemResources()
        C++: virtual void ReleaseSystemResources()
        
        Release the video driver.  This method must be called before
        application exit, or else the application might hang during exit.
        """
        ...
    
    def Rewind(self):
        """
        V.Rewind()
        C++: virtual void Rewind()
        
        Rewind to the frame with the earliest timestamp.  Record
        operations will start on the following frame, therefore if you
        want to re-record over this frame you must call Seek(-1) before
        calling Grab() or Record().
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVideoSource
        C++: static vtkVideoSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Seek(self, p_int):
        """
        V.Seek(int)
        C++: virtual void Seek(int n)
        
        Seek forwards or backwards by the specified number of frames
        (positive is forward, negative is backward).
        """
        ...
    
    def SetAutoAdvance(self, p_int):
        """
        V.SetAutoAdvance(int)
        C++: virtual void SetAutoAdvance(vtkTypeBool _arg)
        
        Set whether to automatically advance the buffer before each grab.
        Default: on
        """
        ...
    
    def SetClipRegion(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetClipRegion([int, int, int, int, int, int])
        C++: virtual void SetClipRegion(int r[6])
        V.SetClipRegion(int, int, int, int, int, int)
        C++: virtual void SetClipRegion(int x0, int x1, int y0, int y1,
            int z0, int z1)
        
        Set the clip rectangle for the frames.  The video will be clipped
        before it is copied into the framebuffer.  Changing the
        ClipRegion will destroy the current contents of the framebuffer.
        The default ClipRegion is
        (0,VTK_INT_MAX,0,VTK_INT_MAX,0,VTK_INT_MAX).
        """
        ...
    
    def SetDataOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetDataOrigin(float, float, float)
        C++: virtual void SetDataOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetDataOrigin((float, float, float))
        C++: virtual void SetDataOrigin(const double _arg[3])
        
        Set/Get the coordinates of the lower, left corner of the frame.
        Default: (0.0,0.0,0.0)
        """
        ...
    
    def SetDataSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetDataSpacing(float, float, float)
        C++: virtual void SetDataSpacing(double _arg1, double _arg2,
            double _arg3)
        V.SetDataSpacing((float, float, float))
        C++: virtual void SetDataSpacing(const double _arg[3])
        
        Set/Get the pixel spacing. Default: (1.0,1.0,1.0)
        """
        ...
    
    def SetFrameBufferSize(self, p_int):
        """
        V.SetFrameBufferSize(int)
        C++: virtual void SetFrameBufferSize(int FrameBufferSize)
        
        Set size of the frame buffer, i.e. the number of frames that the
        'tape' can store.
        """
        ...
    
    def SetFrameCount(self, p_int):
        """
        V.SetFrameCount(int)
        C++: virtual void SetFrameCount(int _arg)
        
        This value is incremented each time a frame is grabbed. reset it
        to zero (or any other value) at any time.
        """
        ...
    
    def SetFrameRate(self, p_float):
        """
        V.SetFrameRate(float)
        C++: virtual void SetFrameRate(float rate)
        
        Request a particular frame rate (default 30 frames per second).
        """
        ...
    
    def SetFrameSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetFrameSize(int, int, int)
        C++: virtual void SetFrameSize(int x, int y, int z)
        V.SetFrameSize([int, int, int])
        C++: virtual void SetFrameSize(int dim[3])
        
        Set the full-frame size.  This must be an allowed size for the
        device, the device may either refuse a request for an illegal
        frame size or automatically choose a new frame size. The default
        is usually 320x240x1, but can be device specific. The 'depth'
        should always be 1 (unless you have a device that can handle 3D
        acquisition).
        """
        ...
    
    def SetNumberOfOutputFrames(self, p_int):
        """
        V.SetNumberOfOutputFrames(int)
        C++: virtual void SetNumberOfOutputFrames(int _arg)
        
        Set the number of frames to copy to the output on each execute.
        The frames will be concatenated along the Z dimension, with the
        most recent frame first. Default: 1
        """
        ...
    
    def SetOpacity(self, p_float):
        """
        V.SetOpacity(float)
        C++: virtual void SetOpacity(float _arg)
        
        For RGBA output only (4 scalar components), set the opacity. 
        This will not modify the existing contents of the framebuffer,
        only subsequently grabbed frames.
        """
        ...
    
    def SetOutputFormat(self, p_int):
        """
        V.SetOutputFormat(int)
        C++: virtual void SetOutputFormat(int format)
        
        Set the output format.  This must be appropriate for device,
        usually only VTK_LUMINANCE, VTK_RGB, and VTK_RGBA are supported.
        """
        ...
    
    def SetOutputFormatToLuminance(self):
        """
        V.SetOutputFormatToLuminance()
        C++: void SetOutputFormatToLuminance()
        
        Set the output format.  This must be appropriate for device,
        usually only VTK_LUMINANCE, VTK_RGB, and VTK_RGBA are supported.
        """
        ...
    
    def SetOutputFormatToRGB(self):
        """
        V.SetOutputFormatToRGB()
        C++: void SetOutputFormatToRGB()
        
        Set the output format.  This must be appropriate for device,
        usually only VTK_LUMINANCE, VTK_RGB, and VTK_RGBA are supported.
        """
        ...
    
    def SetOutputFormatToRGBA(self):
        """
        V.SetOutputFormatToRGBA()
        C++: void SetOutputFormatToRGBA()
        
        Set the output format.  This must be appropriate for device,
        usually only VTK_LUMINANCE, VTK_RGB, and VTK_RGBA are supported.
        """
        ...
    
    def SetOutputWholeExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetOutputWholeExtent(int, int, int, int, int, int)
        C++: virtual void SetOutputWholeExtent(int _arg1, int _arg2,
            int _arg3, int _arg4, int _arg5, int _arg6)
        V.SetOutputWholeExtent((int, int, int, int, int, int))
        C++: virtual void SetOutputWholeExtent(const int _arg[6])
        
        Get/Set the WholeExtent of the output.  This can be used to
        either clip or pad the video frame.  This clipping/padding is
        done when the frame is copied to the output, and does not change
        the contents of the framebuffer.  This is useful e.g. for
        expanding the output size to a power of two for texture mapping. 
        The default is (0,-1,0,-1,0,-1) which causes the entire frame to
        be copied to the output.
        """
        ...
    
    def SetStartTimeStamp(self, p_float):
        """
        V.SetStartTimeStamp(float)
        C++: void SetStartTimeStamp(double t)
        
        And internal variable which marks the beginning of a Record
        session. These methods are for internal use only.
        """
        ...
    
    def Stop(self):
        """
        V.Stop()
        C++: virtual void Stop()
        
        Stop recording or playing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
