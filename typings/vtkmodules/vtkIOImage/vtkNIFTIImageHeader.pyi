"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkNIFTIImageHeader(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkNIFTIImageHeader - Store NIfTI header information.
    
    Superclass: vtkObject
    
    This class stores the header of a NIfTI file in a VTK-friendly
    format. By using this class, it is possible to specify the header
    information that will be stored in a file written by the
    vtkNIFTIImageWriter.  Note that the SForm and QForm orientation
    information in this class will be ignored by the writer if an SForm
    and QForm have been explicitly set via the writer's SetSForm and
    SetQForm methods.  Also note that all info like Dim, PixDim,
    DataType, etc. will be ignored by the writer because this information
    must instead be taken from the vtkImageData information.  Finally,
    note that the vtkNIFTIImageWriter will ignore the Descrip field,
    since it has its own SetDescription method.@par Thanks: This class
    was contributed to VTK by the Calgary Image Processing and Analysis
    Centre (CIPAC).
    @sa
    vtkNIFTIImageReader, vtkNIFTIImageWriter
    """
    def DeepCopy(self, vtkNIFTIImageHeader):
        """
        V.DeepCopy(vtkNIFTIImageHeader)
        C++: void DeepCopy(vtkNIFTIImageHeader *o)
        
        Make a copy of the header.
        """
        ...
    
    def GetAuxFile(self):
        """
        V.GetAuxFile() -> string
        C++: const char *GetAuxFile()
        """
        ...
    
    def GetBitPix(self):
        """
        V.GetBitPix() -> int
        C++: int GetBitPix()
        
        Get the number of bits per pixel.
        """
        ...
    
    def GetCalMax(self):
        """
        V.GetCalMax() -> float
        C++: double GetCalMax()
        
        Get the calibrated range of the data, i.e. the values stored in
        the cal_min and cal_max fields in the header.
        """
        ...
    
    def GetCalMin(self):
        """
        V.GetCalMin() -> float
        C++: double GetCalMin()
        
        Get the calibrated range of the data, i.e. the values stored in
        the cal_min and cal_max fields in the header.
        """
        ...
    
    def GetDataType(self):
        """
        V.GetDataType() -> int
        C++: int GetDataType()
        
        Get the data type.
        """
        ...
    
    def GetDescrip(self):
        """
        V.GetDescrip() -> string
        C++: const char *GetDescrip()
        """
        ...
    
    def GetDim(self, p_int):
        """
        V.GetDim(int) -> int
        C++: vtkTypeInt64 GetDim(int i)
        
        Get the nth dimension of the data, where GetDim(0) returns the
        number of dimensions that are defined for the file.
        """
        ...
    
    def GetDimInfo(self):
        """
        V.GetDimInfo() -> int
        C++: int GetDimInfo()
        
        Get a bitfield with extra information about the dimensions, it
        states which dimensions are the phase encode, frequency encode,
        and slice encode dimensions for MRI acquisitions.
        """
        ...
    
    def GetIntentCode(self):
        """
        V.GetIntentCode() -> int
        C++: int GetIntentCode()
        
        Get the NIFTI intent code.  This is an enumerated value in the
        NIFTI header that states what the data is intended to be used
        for.
        """
        ...
    
    def GetIntentName(self):
        """
        V.GetIntentName() -> string
        C++: const char *GetIntentName()
        """
        ...
    
    def GetIntentP1(self):
        """
        V.GetIntentP1() -> float
        C++: double GetIntentP1()
        
        Get one of the NIFTI intent parameters.  The definition of these
        parameters varies according to the IntentCode.
        """
        ...
    
    def GetIntentP2(self):
        """
        V.GetIntentP2() -> float
        C++: double GetIntentP2()
        
        Get one of the NIFTI intent parameters.  The definition of these
        parameters varies according to the IntentCode.
        """
        ...
    
    def GetIntentP3(self):
        """
        V.GetIntentP3() -> float
        C++: double GetIntentP3()
        
        Get one of the NIFTI intent parameters.  The definition of these
        parameters varies according to the IntentCode.
        """
        ...
    
    def GetMagic(self):
        """
        V.GetMagic() -> string
        C++: const char *GetMagic()
        
        Get the magic number for the NIFTI file as a null-terminated
        string.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Static method for construction.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Static method for construction.
        """
        ...
    
    def GetPixDim(self, p_int):
        """
        V.GetPixDim(int) -> float
        C++: double GetPixDim(int i)
        
        Get the sample spacing in the nth dimension. If GetPixDim(0) is
        negative, then the quaternion for the qform describes the correct
        orientation only after the slice ordering has been reversed.
        """
        ...
    
    def GetQFormCode(self):
        """
        V.GetQFormCode() -> int
        C++: int GetQFormCode()
        
        Get the QForm or SForm code.
        """
        ...
    
    def GetQOffsetX(self):
        """
        V.GetQOffsetX() -> float
        C++: double GetQOffsetX()
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def GetQOffsetY(self):
        """
        V.GetQOffsetY() -> float
        C++: double GetQOffsetY()
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def GetQOffsetZ(self):
        """
        V.GetQOffsetZ() -> float
        C++: double GetQOffsetZ()
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def GetQuaternB(self):
        """
        V.GetQuaternB() -> float
        C++: double GetQuaternB()
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def GetQuaternC(self):
        """
        V.GetQuaternC() -> float
        C++: double GetQuaternC()
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def GetQuaternD(self):
        """
        V.GetQuaternD() -> float
        C++: double GetQuaternD()
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def GetSclInter(self):
        """
        V.GetSclInter() -> float
        C++: double GetSclInter()
        
        Get the scale and slope to apply to the data in order to get the
        real-valued data values.
        """
        ...
    
    def GetSclSlope(self):
        """
        V.GetSclSlope() -> float
        C++: double GetSclSlope()
        
        Get the scale and slope to apply to the data in order to get the
        real-valued data values.
        """
        ...
    
    def GetSFormCode(self):
        """
        V.GetSFormCode() -> int
        C++: int GetSFormCode()
        
        Get the QForm or SForm code.
        """
        ...
    
    def GetSliceCode(self):
        """
        V.GetSliceCode() -> int
        C++: int GetSliceCode()
        
        Get the slice code for the data.
        """
        ...
    
    def GetSliceDuration(self):
        """
        V.GetSliceDuration() -> float
        C++: double GetSliceDuration()
        
        Get the slice_duration and toffset from the header.
        """
        ...
    
    def GetSliceEnd(self):
        """
        V.GetSliceEnd() -> int
        C++: vtkTypeInt64 GetSliceEnd()
        
        Get the slice range for the data.
        """
        ...
    
    def GetSliceStart(self):
        """
        V.GetSliceStart() -> int
        C++: vtkTypeInt64 GetSliceStart()
        
        Get the slice range for the data.
        """
        ...
    
    def GetSRowX(self):
        """
        V.GetSRowX() -> (float, float, float, float)
        C++: virtual double *GetSRowX()
        
        Get information about the matrix transformation.  Note that the
        vtkNIFTIImageWriter ignores this part of the header if a matrix
        has been set via vtkNIFTIImageWriter::SetSFormMatrix().
        """
        ...
    
    def GetSRowY(self):
        """
        V.GetSRowY() -> (float, float, float, float)
        C++: virtual double *GetSRowY()
        
        Get information about the matrix transformation.  Note that the
        vtkNIFTIImageWriter ignores this part of the header if a matrix
        has been set via vtkNIFTIImageWriter::SetSFormMatrix().
        """
        ...
    
    def GetSRowZ(self):
        """
        V.GetSRowZ() -> (float, float, float, float)
        C++: virtual double *GetSRowZ()
        
        Get information about the matrix transformation.  Note that the
        vtkNIFTIImageWriter ignores this part of the header if a matrix
        has been set via vtkNIFTIImageWriter::SetSFormMatrix().
        """
        ...
    
    def GetTOffset(self):
        """
        V.GetTOffset() -> float
        C++: double GetTOffset()
        
        Get the slice_duration and toffset from the header.
        """
        ...
    
    def GetVoxOffset(self):
        """
        V.GetVoxOffset() -> int
        C++: vtkTypeInt64 GetVoxOffset()
        
        Get the offset to the pixel data within the file.
        """
        ...
    
    def GetXYZTUnits(self):
        """
        V.GetXYZTUnits() -> int
        C++: int GetXYZTUnits()
        
        Get a bitfield that describes the units for the first 4 dims.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Initialize the header to default values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Static method for construction.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Static method for construction.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNIFTIImageHeader
        C++: vtkNIFTIImageHeader *NewInstance()
        
        Static method for construction.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNIFTIImageHeader
        C++: static vtkNIFTIImageHeader *SafeDownCast(vtkObjectBase *o)
        
        Static method for construction.
        """
        ...
    
    def SetAuxFile(self, string):
        """
        V.SetAuxFile(string)
        C++: void SetAuxFile(const char *auxfile)
        
        Get an auxiliary file, e.g. a color table, that is associated
        with this data.  The length of the filename must be a maximum of
        24 characters, and it will be assumed to be in the same directory
        as the NIFTI file.
        """
        ...
    
    def SetCalMax(self, p_float):
        """
        V.SetCalMax(float)
        C++: virtual void SetCalMax(double _arg)
        
        Get the calibrated range of the data, i.e. the values stored in
        the cal_min and cal_max fields in the header.
        """
        ...
    
    def SetCalMin(self, p_float):
        """
        V.SetCalMin(float)
        C++: virtual void SetCalMin(double _arg)
        
        Get the calibrated range of the data, i.e. the values stored in
        the cal_min and cal_max fields in the header.
        """
        ...
    
    def SetDescrip(self, string):
        """
        V.SetDescrip(string)
        C++: void SetDescrip(const char *descrip)
        
        Get a null-terminated file descriptor, this usually gives the
        name of the software that wrote the file. It will have a maximum
        length of 80 characters.  Use ASCII to ensure compatibility with
        all NIFTI software, the NIFTI standard itself does not specify
        what encodings are permitted.
        """
        ...
    
    def SetDimInfo(self, p_int):
        """
        V.SetDimInfo(int)
        C++: virtual void SetDimInfo(int _arg)
        
        Get a bitfield with extra information about the dimensions, it
        states which dimensions are the phase encode, frequency encode,
        and slice encode dimensions for MRI acquisitions.
        """
        ...
    
    def SetIntentCode(self, p_int):
        """
        V.SetIntentCode(int)
        C++: virtual void SetIntentCode(int _arg)
        
        Get the NIFTI intent code.  This is an enumerated value in the
        NIFTI header that states what the data is intended to be used
        for.
        """
        ...
    
    def SetIntentName(self, string):
        """
        V.SetIntentName(string)
        C++: void SetIntentName(const char *name)
        
        Get the intent name.  This should match the intent code.
        """
        ...
    
    def SetIntentP1(self, p_float):
        """
        V.SetIntentP1(float)
        C++: virtual void SetIntentP1(double _arg)
        
        Get one of the NIFTI intent parameters.  The definition of these
        parameters varies according to the IntentCode.
        """
        ...
    
    def SetIntentP2(self, p_float):
        """
        V.SetIntentP2(float)
        C++: virtual void SetIntentP2(double _arg)
        
        Get one of the NIFTI intent parameters.  The definition of these
        parameters varies according to the IntentCode.
        """
        ...
    
    def SetIntentP3(self, p_float):
        """
        V.SetIntentP3(float)
        C++: virtual void SetIntentP3(double _arg)
        
        Get one of the NIFTI intent parameters.  The definition of these
        parameters varies according to the IntentCode.
        """
        ...
    
    def SetQFormCode(self, p_int):
        """
        V.SetQFormCode(int)
        C++: virtual void SetQFormCode(int _arg)
        
        Get the QForm or SForm code.
        """
        ...
    
    def SetQOffsetX(self, p_float):
        """
        V.SetQOffsetX(float)
        C++: virtual void SetQOffsetX(double _arg)
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def SetQOffsetY(self, p_float):
        """
        V.SetQOffsetY(float)
        C++: virtual void SetQOffsetY(double _arg)
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def SetQOffsetZ(self, p_float):
        """
        V.SetQOffsetZ(float)
        C++: virtual void SetQOffsetZ(double _arg)
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def SetQuaternB(self, p_float):
        """
        V.SetQuaternB(float)
        C++: virtual void SetQuaternB(double _arg)
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def SetQuaternC(self, p_float):
        """
        V.SetQuaternC(float)
        C++: virtual void SetQuaternC(double _arg)
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def SetQuaternD(self, p_float):
        """
        V.SetQuaternD(float)
        C++: virtual void SetQuaternD(double _arg)
        
        Get information about the quaternion transformation.  Note that
        the vtkNIFTIImageWriter ignores this part of the header if a
        quaternion has been set via
        vtkNIFTIImageWriter::SetQFormMatrix().
        """
        ...
    
    def SetSclInter(self, p_float):
        """
        V.SetSclInter(float)
        C++: virtual void SetSclInter(double _arg)
        
        Get the scale and slope to apply to the data in order to get the
        real-valued data values.
        """
        ...
    
    def SetSclSlope(self, p_float):
        """
        V.SetSclSlope(float)
        C++: virtual void SetSclSlope(double _arg)
        
        Get the scale and slope to apply to the data in order to get the
        real-valued data values.
        """
        ...
    
    def SetSFormCode(self, p_int):
        """
        V.SetSFormCode(int)
        C++: virtual void SetSFormCode(int _arg)
        
        Get the QForm or SForm code.
        """
        ...
    
    def SetSliceCode(self, p_int):
        """
        V.SetSliceCode(int)
        C++: virtual void SetSliceCode(int _arg)
        
        Get the slice code for the data.
        """
        ...
    
    def SetSliceDuration(self, p_float):
        """
        V.SetSliceDuration(float)
        C++: virtual void SetSliceDuration(double _arg)
        
        Get the slice_duration and toffset from the header.
        """
        ...
    
    def SetSliceEnd(self, p_int):
        """
        V.SetSliceEnd(int)
        C++: virtual void SetSliceEnd(vtkTypeInt64 _arg)
        
        Get the slice range for the data.
        """
        ...
    
    def SetSliceStart(self, p_int):
        """
        V.SetSliceStart(int)
        C++: virtual void SetSliceStart(vtkTypeInt64 _arg)
        
        Get the slice range for the data.
        """
        ...
    
    def SetSRowX(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetSRowX(float, float, float, float)
        C++: virtual void SetSRowX(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetSRowX((float, float, float, float))
        C++: virtual void SetSRowX(const double _arg[4])
        
        Get information about the matrix transformation.  Note that the
        vtkNIFTIImageWriter ignores this part of the header if a matrix
        has been set via vtkNIFTIImageWriter::SetSFormMatrix().
        """
        ...
    
    def SetSRowY(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetSRowY(float, float, float, float)
        C++: virtual void SetSRowY(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetSRowY((float, float, float, float))
        C++: virtual void SetSRowY(const double _arg[4])
        
        Get information about the matrix transformation.  Note that the
        vtkNIFTIImageWriter ignores this part of the header if a matrix
        has been set via vtkNIFTIImageWriter::SetSFormMatrix().
        """
        ...
    
    def SetSRowZ(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetSRowZ(float, float, float, float)
        C++: virtual void SetSRowZ(double _arg1, double _arg2,
            double _arg3, double _arg4)
        V.SetSRowZ((float, float, float, float))
        C++: virtual void SetSRowZ(const double _arg[4])
        
        Get information about the matrix transformation.  Note that the
        vtkNIFTIImageWriter ignores this part of the header if a matrix
        has been set via vtkNIFTIImageWriter::SetSFormMatrix().
        """
        ...
    
    def SetTOffset(self, p_float):
        """
        V.SetTOffset(float)
        C++: virtual void SetTOffset(double _arg)
        
        Get the slice_duration and toffset from the header.
        """
        ...
    
    def SetXYZTUnits(self, p_int):
        """
        V.SetXYZTUnits(int)
        C++: virtual void SetXYZTUnits(int _arg)
        
        Get a bitfield that describes the units for the first 4 dims.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DataTypeEnum = ...
    HeaderSizeEnum = ...
    IntentBeta = ...
    IntentBinom = ...
    IntentChi = ...
    IntentChiSQ = ...
    IntentChiSQNonc = ...
    IntentCodeEnum = ...
    IntentCorrel = ...
    IntentDimless = ...
    IntentDispVect = ...
    IntentEstimate = ...
    IntentExtVal = ...
    IntentFTest = ...
    IntentFTestNonc = ...
    IntentGamma = ...
    IntentGenMatrix = ...
    IntentInvGauss = ...
    IntentLabel = ...
    IntentLaplace = ...
    IntentLog10PVal = ...
    IntentLogistic = ...
    IntentLogPVal = ...
    IntentNeuroName = ...
    IntentNodeIndex = ...
    IntentNone = ...
    IntentNormal = ...
    IntentPointSet = ...
    IntentPoisson = ...
    IntentPVal = ...
    IntentQuaternion = ...
    IntentRGBAVector = ...
    IntentRGBVector = ...
    IntentShape = ...
    IntentSymMatrix = ...
    IntentTimeSeries = ...
    IntentTriangle = ...
    IntentTTest = ...
    IntentTTestNonc = ...
    IntentUniform = ...
    IntentVector = ...
    IntentWeibull = ...
    IntentZScore = ...
    NIFTI1HeaderSize = ...
    NIFTI2HeaderSize = ...
    SliceAltDec = ...
    SliceAltDec2 = ...
    SliceAltInc = ...
    SliceAltInc2 = ...
    SliceCodeEnum = ...
    SliceSeqDec = ...
    SliceSeqInc = ...
    SliceUnknown = ...
    TypeComplex128 = ...
    TypeComplex256 = ...
    TypeComplex64 = ...
    TypeFloat128 = ...
    TypeFloat32 = ...
    TypeFloat64 = ...
    TypeInt16 = ...
    TypeInt32 = ...
    TypeInt64 = ...
    TypeInt8 = ...
    TypeRGB24 = ...
    TypeRGBA32 = ...
    TypeUInt16 = ...
    TypeUInt32 = ...
    TypeUInt64 = ...
    TypeUInt8 = ...
    UnitsHz = ...
    UnitsMeter = ...
    UnitsMicron = ...
    UnitsMM = ...
    UnitsMSec = ...
    UnitsPPM = ...
    UnitsRads = ...
    UnitsSec = ...
    UnitsSpace = ...
    UnitsTime = ...
    UnitsUnknown = ...
    UnitsUSec = ...
    UnitsXYZTEnum = ...
    XFormAlignedAnat = ...
    XFormCodeEnum = ...
    XFormMNI152 = ...
    XFormScannerAnat = ...
    XFormTalairach = ...
    XFormUnkown = ...
    __dict__ = ...
    __vtkname__ = ...


