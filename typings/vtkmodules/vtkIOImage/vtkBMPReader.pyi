"""
This type stub file was generated by pyright.
"""

from .vtkImageReader import vtkImageReader

class vtkBMPReader(vtkImageReader):
    """
    vtkBMPReader - read Windows BMP files
    
    Superclass: vtkImageReader
    
    vtkBMPReader is a source object that reads Windows BMP files. This
    includes indexed and 24bit bitmaps Usually, all BMPs are converted to
    24bit RGB, but BMPs may be output as 8bit images with a LookupTable
    if the Allow8BitBMP flag is set.
    
    BMPReader creates structured point datasets. The dimension of the
    dataset depends upon the number of files read. Reading a single file
    results in a 2D image, while reading more than one file results in a
    3D volume.
    
    To read a volume, files must be of the form "FileName.<number>"
    (e.g., foo.bmp.0, foo.bmp.1, ...). You must also specify the image
    range. This range specifies the beginning and ending files to read
    (range can be any pair of non-negative numbers).
    
    The default behavior is to read a single file. In this case, the form
    of the file is simply "FileName" (e.g., foo.bmp).
    
    @sa
    vtkBMPWriter
    """
    def Allow8BitBMPOff(self):
        """
        V.Allow8BitBMPOff()
        C++: virtual void Allow8BitBMPOff()
        
        If this flag is set and the BMP reader encounters an 8bit file,
        the data will be kept as unsigned chars and a lookuptable will be
        exported
        """
        ...
    
    def Allow8BitBMPOn(self):
        """
        V.Allow8BitBMPOn()
        C++: virtual void Allow8BitBMPOn()
        
        If this flag is set and the BMP reader encounters an 8bit file,
        the data will be kept as unsigned chars and a lookuptable will be
        exported
        """
        ...
    
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *fname) override;
        
        Is the given file a BMP file?
        """
        ...
    
    def GetAllow8BitBMP(self):
        """
        V.GetAllow8BitBMP() -> int
        C++: virtual vtkTypeBool GetAllow8BitBMP()
        
        If this flag is set and the BMP reader encounters an 8bit file,
        the data will be kept as unsigned chars and a lookuptable will be
        exported
        """
        ...
    
    def GetColors(self):
        """
        V.GetColors() -> (int, ...)
        C++: virtual unsigned char *GetColors()
        
        Returns the color lut.
        """
        ...
    
    def GetDepth(self):
        """
        V.GetDepth() -> int
        C++: virtual int GetDepth()
        
        Returns the depth of the BMP, either 8 or 24.
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: const char *GetDescriptiveName() override;
        
        Return a descriptive name for the file format that might be
        useful in a GUI.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: const char *GetFileExtensions() override;
        
        Get the file extensions for this format. Returns a string with a
        space separated list of extensions in the format .extension
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkLookupTable
        C++: virtual vtkLookupTable *GetLookupTable()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBMPReader
        C++: vtkBMPReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBMPReader
        C++: static vtkBMPReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllow8BitBMP(self, p_int):
        """
        V.SetAllow8BitBMP(int)
        C++: virtual void SetAllow8BitBMP(vtkTypeBool _arg)
        
        If this flag is set and the BMP reader encounters an 8bit file,
        the data will be kept as unsigned chars and a lookuptable will be
        exported
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


