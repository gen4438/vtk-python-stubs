"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDEMReader(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkDEMReader - read a digital elevation model (DEM) file
    
    Superclass: vtkImageAlgorithm
    
    vtkDEMReader reads digital elevation files and creates image data.
    Digital elevation files are produced by the <A
    HREF="http://www.usgs.gov">US Geological Survey. A complete
    description of the DEM file is located at the USGS site. The reader
    reads the entire dem file and create a vtkImageData that contains a
    single scalar component that is the elevation in meters. The spacing
    is also expressed in meters. A number of get methods provide access
    to fields on the header.
    """
    def GetAccuracyCode(self):
        """
        V.GetAccuracyCode() -> int
        C++: virtual int GetAccuracyCode()
        
        Accuracy code for elevations. 0=unknown accuracy
        """
        ...
    
    def GetDEMLevel(self):
        """
        V.GetDEMLevel() -> int
        C++: virtual int GetDEMLevel()
        
        Code 1=DEM-1, 2=DEM_2, ...
        """
        ...
    
    def GetElevationBounds(self):
        """
        V.GetElevationBounds() -> (float, float)
        C++: virtual float *GetElevationBounds()
        
        Minimum and maximum elevation for the DEM. The units in the file
        are in ElevationUnitOfMeasure. This class converts them to
        meters.
        """
        ...
    
    def GetElevationPattern(self):
        """
        V.GetElevationPattern() -> int
        C++: virtual int GetElevationPattern()
        
        Code 1=regular, 2=random, reserved for future use
        """
        ...
    
    def GetElevationReference(self):
        """
        V.GetElevationReference() -> int
        C++: virtual int GetElevationReference()
        
        Specify the elevation origin to use. By default, the elevation
        origin is equal to ElevationBounds[0]. A more convenient origin
        is to use sea level (i.e., a value of 0.0).
        """
        ...
    
    def GetElevationReferenceAsString(self):
        """
        V.GetElevationReferenceAsString() -> string
        C++: const char *GetElevationReferenceAsString(void)
        
        Specify the elevation origin to use. By default, the elevation
        origin is equal to ElevationBounds[0]. A more convenient origin
        is to use sea level (i.e., a value of 0.0).
        """
        ...
    
    def GetElevationReferenceMaxValue(self):
        """
        V.GetElevationReferenceMaxValue() -> int
        C++: virtual int GetElevationReferenceMaxValue()
        
        Specify the elevation origin to use. By default, the elevation
        origin is equal to ElevationBounds[0]. A more convenient origin
        is to use sea level (i.e., a value of 0.0).
        """
        ...
    
    def GetElevationReferenceMinValue(self):
        """
        V.GetElevationReferenceMinValue() -> int
        C++: virtual int GetElevationReferenceMinValue()
        
        Specify the elevation origin to use. By default, the elevation
        origin is equal to ElevationBounds[0]. A more convenient origin
        is to use sea level (i.e., a value of 0.0).
        """
        ...
    
    def GetElevationUnitOfMeasure(self):
        """
        V.GetElevationUnitOfMeasure() -> int
        C++: virtual int GetElevationUnitOfMeasure()
        
        Defining unit of measure for elevation coordinates throughout the
        file. 1 = feet, 2 = meters
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of Digital Elevation Model (DEM) file
        """
        ...
    
    def GetGroundSystem(self):
        """
        V.GetGroundSystem() -> int
        C++: virtual int GetGroundSystem()
        
        Ground planimetric reference system
        """
        ...
    
    def GetGroundZone(self):
        """
        V.GetGroundZone() -> int
        C++: virtual int GetGroundZone()
        
        Zone in ground planimetric reference system
        """
        ...
    
    def GetLocalRotation(self):
        """
        V.GetLocalRotation() -> float
        C++: virtual float GetLocalRotation()
        
        Counterclockwise angle (in radians) from the primary axis of the
        planimetric reference to the primary axis of the DEM local
        reference system. IGNORED BY THIS IMPLEMENTATION.
        """
        ...
    
    def GetMapLabel(self):
        """
        V.GetMapLabel() -> string
        C++: virtual char *GetMapLabel()
        
        An ASCII description of the map
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPlaneUnitOfMeasure(self):
        """
        V.GetPlaneUnitOfMeasure() -> int
        C++: virtual int GetPlaneUnitOfMeasure()
        
        Defining unit of measure for ground planimetric coordinates
        throughout the file. 0 = radians, 1 = feet, 2 = meters, 3 =
        arc-seconds.
        """
        ...
    
    def GetPolygonSize(self):
        """
        V.GetPolygonSize() -> int
        C++: virtual int GetPolygonSize()
        
        Number of sides in the polygon which defines the coverage of the
        DEM file. Set to 4.
        """
        ...
    
    def GetProfileDimension(self):
        """
        V.GetProfileDimension() -> (int, int)
        C++: virtual int *GetProfileDimension()
        
        The number of rows and columns in the DEM.
        """
        ...
    
    def GetProjectionParameters(self):
        """
        V.GetProjectionParameters() -> (float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float)
        C++: virtual float *GetProjectionParameters()
        
        Map Projection parameters. All are zero.
        """
        ...
    
    def GetSpatialResolution(self):
        """
        V.GetSpatialResolution() -> (float, float, float)
        C++: virtual float *GetSpatialResolution()
        
        DEM spatial resolution for x,y,z. Values are expressed in units
        of resolution. Since elevations are read as integers, this
        permits fractional elevations.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDEMReader
        C++: vtkDEMReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDEMReader
        C++: static vtkDEMReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetElevationReference(self, p_int):
        """
        V.SetElevationReference(int)
        C++: virtual void SetElevationReference(int _arg)
        
        Specify the elevation origin to use. By default, the elevation
        origin is equal to ElevationBounds[0]. A more convenient origin
        is to use sea level (i.e., a value of 0.0).
        """
        ...
    
    def SetElevationReferenceToElevationBounds(self):
        """
        V.SetElevationReferenceToElevationBounds()
        C++: void SetElevationReferenceToElevationBounds()
        
        Specify the elevation origin to use. By default, the elevation
        origin is equal to ElevationBounds[0]. A more convenient origin
        is to use sea level (i.e., a value of 0.0).
        """
        ...
    
    def SetElevationReferenceToSeaLevel(self):
        """
        V.SetElevationReferenceToSeaLevel()
        C++: void SetElevationReferenceToSeaLevel()
        
        Specify the elevation origin to use. By default, the elevation
        origin is equal to ElevationBounds[0]. A more convenient origin
        is to use sea level (i.e., a value of 0.0).
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of Digital Elevation Model (DEM) file
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    REFERENCE_ELEVATION_BOUNDS = ...
    REFERENCE_SEA_LEVEL = ...
    __dict__ = ...
    __vtkname__ = ...


