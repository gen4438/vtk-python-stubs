"""
This type stub file was generated by pyright.
"""

from .vtkImageReader2 import vtkImageReader2

class vtkMetaImageReader(vtkImageReader2):
    """
    vtkMetaImageReader - read binary UNC meta image data
    
    Superclass: vtkImageReader2
    
    One of the formats for which a reader is already available in the
    toolkit is the MetaImage file format. This is a fairly simple yet
    powerful format consisting of a text header and a binary data
    section. The following instructions describe how you can write a
    MetaImage header for the data that you download from the BrainWeb
    page.
    
    The minimal structure of the MetaImage header is the following:
    
    
       NDims = 3
       DimSize = 181 217 181
       ElementType = MET_UCHAR
       ElementSpacing = 1.0 1.0 1.0
       ElementByteOrderMSB = False
       ElementDataFile = brainweb1.raw
    
    * NDims indicate that this is a 3D image. ITK can handle images of
      arbitrary dimension.
    * DimSize indicates the size of the volume in pixels along each
      direction.
    * ElementType indicate the primitive type used for pixels. In this
      case is "unsigned char", implying that the data is digitized in 8
      bits / pixel.
    * ElementSpacing indicates the physical separation between the center
    of one pixel and the center of the next pixel along each direction in
    space. The units used are millimeters.
    * ElementByteOrderMSB indicates is the data is encoded in little or
      big endian order. You might want to play with this value when
      moving data between different computer platforms.
    * ElementDataFile is the name of the file containing the raw binary
      data of the image. This file must be in the same directory as the
      header.
    
    MetaImage headers are expected to have extension: ".mha" or ".mhd"
    
    Once you write this header text file, it should be possible to read
    the image into your ITK based application using the
    itk::FileIOToImageFilter class.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *name) override;
        
        Test whether the file with the given name can be read by this
        reader.
        """
        ...
    
    def GetAnatomicalOrientation(self):
        """
        V.GetAnatomicalOrientation() -> string
        C++: virtual char *GetAnatomicalOrientation()
        """
        ...
    
    def GetBitsAllocated(self):
        """
        V.GetBitsAllocated() -> int
        C++: virtual int GetBitsAllocated()
        """
        ...
    
    def GetDataByteOrder(self):
        """
        V.GetDataByteOrder() -> int
        C++: int GetDataByteOrder(void) override;
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def GetDate(self):
        """
        V.GetDate() -> string
        C++: virtual char *GetDate()
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: const char *GetDescriptiveName() override;
        
        Return a descriptive name for the file format that might be
        useful in a GUI.
        """
        ...
    
    def GetDistanceUnits(self):
        """
        V.GetDistanceUnits() -> string
        C++: virtual char *GetDistanceUnits()
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: const char *GetFileExtensions() override;
        
        Get the file extensions for this format. Returns a string with a
        space separated list of extensions in the format .extension
        """
        ...
    
    def GetGantryAngle(self):
        """
        V.GetGantryAngle() -> float
        C++: virtual double GetGantryAngle()
        """
        ...
    
    def GetHeight(self):
        """
        V.GetHeight() -> int
        C++: int GetHeight()
        """
        ...
    
    def GetImageNumber(self):
        """
        V.GetImageNumber() -> string
        C++: virtual char *GetImageNumber()
        """
        ...
    
    def GetImagePositionPatient(self):
        """
        V.GetImagePositionPatient() -> (float, ...)
        C++: double *GetImagePositionPatient()
        """
        ...
    
    def GetModality(self):
        """
        V.GetModality() -> string
        C++: virtual char *GetModality()
        """
        ...
    
    def GetNumberOfComponents(self):
        """
        V.GetNumberOfComponents() -> int
        C++: int GetNumberOfComponents()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPatientID(self):
        """
        V.GetPatientID() -> string
        C++: virtual char *GetPatientID()
        """
        ...
    
    def GetPatientName(self):
        """
        V.GetPatientName() -> string
        C++: virtual char *GetPatientName()
        """
        ...
    
    def GetPixelRepresentation(self):
        """
        V.GetPixelRepresentation() -> int
        C++: int GetPixelRepresentation()
        """
        ...
    
    def GetPixelSpacing(self):
        """
        V.GetPixelSpacing() -> (float, ...)
        C++: double *GetPixelSpacing()
        """
        ...
    
    def GetRescaleOffset(self):
        """
        V.GetRescaleOffset() -> float
        C++: virtual double GetRescaleOffset()
        """
        ...
    
    def GetRescaleSlope(self):
        """
        V.GetRescaleSlope() -> float
        C++: virtual double GetRescaleSlope()
        """
        ...
    
    def GetSeries(self):
        """
        V.GetSeries() -> string
        C++: virtual char *GetSeries()
        """
        ...
    
    def GetStudyID(self):
        """
        V.GetStudyID() -> string
        C++: virtual char *GetStudyID()
        """
        ...
    
    def GetStudyUID(self):
        """
        V.GetStudyUID() -> string
        C++: virtual char *GetStudyUID()
        """
        ...
    
    def GetTransferSyntaxUID(self):
        """
        V.GetTransferSyntaxUID() -> string
        C++: virtual char *GetTransferSyntaxUID()
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> int
        C++: int GetWidth()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMetaImageReader
        C++: vtkMetaImageReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMetaImageReader
        C++: static vtkMetaImageReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


