"""
This type stub file was generated by pyright.
"""

from .vtkImageReader2 import vtkImageReader2

class vtkImageReader(vtkImageReader2):
    """
    vtkImageReader - Superclass of transformable binary file readers.
    
    Superclass: vtkImageReader2
    
    vtkImageReader provides methods needed to read a region from a file.
    It supports both transforms and masks on the input data, but as a
    result is more complicated and slower than its parent class
    vtkImageReader2.
    
    @sa
    vtkBMPReader vtkPNMReader vtkTIFFReader
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *) override;
        
        vtkImageReader itself can read raw binary files. That being the
        case, we need to implement `CanReadFile` to return success for
        any file. Subclasses that read specific file format should
        override and implement appropriate checks for file format.
        """
        ...
    
    def ComputeInverseTransformedExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.ComputeInverseTransformedExtent([int, int, int, int, int, int],
            [int, int, int, int, int, int])
        C++: void ComputeInverseTransformedExtent(int inExtent[6],
            int outExtent[6])
        """
        ...
    
    def ComputeInverseTransformedIncrements(self, p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.ComputeInverseTransformedIncrements([int, int, int], [int, int,
            int])
        C++: void ComputeInverseTransformedIncrements(vtkIdType inIncr[3],
             vtkIdType outIncr[3])
        """
        ...
    
    def GetDataMask(self):
        """
        V.GetDataMask() -> int
        C++: virtual vtkTypeUInt64 GetDataMask()
        
        Set/Get the Data mask.  The data mask is a simply integer whose
        bits are treated as a mask to the bits read from disk.  That is,
        the data mask is bitwise-and'ed to the numbers read from disk. 
        This ivar is stored as 64 bits, the largest mask you will need. 
        The mask will be truncated to the data size required to be read
        (using the least significant bits).
        """
        ...
    
    def GetDataVOI(self):
        """
        V.GetDataVOI() -> (int, int, int, int, int, int)
        C++: virtual int *GetDataVOI()
        
        Set/get the data VOI. You can limit the reader to only read a
        subset of the data.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarArrayName(self):
        """
        V.GetScalarArrayName() -> string
        C++: virtual char *GetScalarArrayName()
        
        Set/get the scalar array name for this data set.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform
        C++: virtual vtkTransform *GetTransform()
        
        Set/Get transformation matrix to transform the data from slice
        space into world space. This matrix must be a permutation matrix.
        To qualify, the sums of the rows must be + or - 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageReader
        C++: vtkImageReader *NewInstance()
        """
        ...
    
    def OpenAndSeekFile(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.OpenAndSeekFile([int, int, int, int, int, int], int) -> int
        C++: int OpenAndSeekFile(int extent[6], int slice)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageReader
        C++: static vtkImageReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDataMask(self, p_int):
        """
        V.SetDataMask(int)
        C++: virtual void SetDataMask(vtkTypeUInt64 _arg)
        
        Set/Get the Data mask.  The data mask is a simply integer whose
        bits are treated as a mask to the bits read from disk.  That is,
        the data mask is bitwise-and'ed to the numbers read from disk. 
        This ivar is stored as 64 bits, the largest mask you will need. 
        The mask will be truncated to the data size required to be read
        (using the least significant bits).
        """
        ...
    
    def SetDataVOI(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetDataVOI(int, int, int, int, int, int)
        C++: virtual void SetDataVOI(int _arg1, int _arg2, int _arg3,
            int _arg4, int _arg5, int _arg6)
        V.SetDataVOI((int, int, int, int, int, int))
        C++: virtual void SetDataVOI(const int _arg[6])
        
        Set/get the data VOI. You can limit the reader to only read a
        subset of the data.
        """
        ...
    
    def SetScalarArrayName(self, string):
        """
        V.SetScalarArrayName(string)
        C++: virtual void SetScalarArrayName(const char *_arg)
        
        Set/get the scalar array name for this data set.
        """
        ...
    
    def SetTransform(self, vtkTransform):
        """
        V.SetTransform(vtkTransform)
        C++: virtual void SetTransform(vtkTransform *)
        
        Set/Get transformation matrix to transform the data from slice
        space into world space. This matrix must be a permutation matrix.
        To qualify, the sums of the rows must be + or - 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


