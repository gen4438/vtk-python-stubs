"""
This type stub file was generated by pyright.
"""

from .vtkImageReader2 import vtkImageReader2

class vtkMedicalImageReader2(vtkImageReader2):
    """
    vtkMedicalImageReader2 - vtkImageReader2 with medical meta data.
    
    Superclass: vtkImageReader2
    
    vtkMedicalImageReader2 is a parent class for medical image readers.
    It provides a place to store patient information that may be stored
    in the image header.
    @sa
    vtkImageReader2 vtkGESignaReader vtkMedicalImageProperties
    """
    def GetDate(self):
        """
        V.GetDate() -> string
        C++: virtual const char *GetDate()
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def GetImageNumber(self):
        """
        V.GetImageNumber() -> string
        C++: virtual const char *GetImageNumber()
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def GetMedicalImageProperties(self):
        """
        V.GetMedicalImageProperties() -> vtkMedicalImageProperties
        C++: virtual vtkMedicalImageProperties *GetMedicalImageProperties(
            )
        
        Get the medical image properties object
        """
        ...
    
    def GetModality(self):
        """
        V.GetModality() -> string
        C++: virtual const char *GetModality()
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPatientID(self):
        """
        V.GetPatientID() -> string
        C++: virtual const char *GetPatientID()
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def GetPatientName(self):
        """
        V.GetPatientName() -> string
        C++: virtual const char *GetPatientName()
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def GetSeries(self):
        """
        V.GetSeries() -> string
        C++: virtual const char *GetSeries()
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def GetStudy(self):
        """
        V.GetStudy() -> string
        C++: virtual const char *GetStudy()
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMedicalImageReader2
        C++: vtkMedicalImageReader2 *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMedicalImageReader2
        C++: static vtkMedicalImageReader2 *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDate(self, string):
        """
        V.SetDate(string)
        C++: virtual void SetDate(const char *)
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def SetImageNumber(self, string):
        """
        V.SetImageNumber(string)
        C++: virtual void SetImageNumber(const char *)
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def SetModality(self, string):
        """
        V.SetModality(string)
        C++: virtual void SetModality(const char *)
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def SetPatientID(self, string):
        """
        V.SetPatientID(string)
        C++: virtual void SetPatientID(const char *)
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def SetPatientName(self, string):
        """
        V.SetPatientName(string)
        C++: virtual void SetPatientName(const char *)
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def SetSeries(self, string):
        """
        V.SetSeries(string)
        C++: virtual void SetSeries(const char *)
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def SetStudy(self, string):
        """
        V.SetStudy(string)
        C++: virtual void SetStudy(const char *)
        
        For backward compatibility, propagate calls to the
        MedicalImageProperties object.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


