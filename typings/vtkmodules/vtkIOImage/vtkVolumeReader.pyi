"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkVolumeReader(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkVolumeReader - read image files
    
    Superclass: vtkImageAlgorithm
    
    vtkVolumeReader is a source object that reads image files.
    
    VolumeReader creates structured point datasets. The dimension of the
    dataset depends upon the number of files read. Reading a single file
    results in a 2D image, while reading more than one file results in a
    3D volume.
    
    File names are created using FilePattern and FilePrefix as follows:
    snprintf (filename, sizeof(filename), FilePattern, FilePrefix,
    number); where number is in the range ImageRange[0] to ImageRange[1].
    If ImageRange[1] <= ImageRange[0], then slice number ImageRange[0] is
    read. Thus to read an image set ImageRange[0] = ImageRange[1] = slice
    number. The default behavior is to read a single file (i.e., image
    slice 1).
    
    The DataMask instance variable is used to read data files with
    embedded connectivity or segmentation information. For example, some
    data has the high order bit set to indicate connected surface. The
    DataMask allows you to select this data. Other important ivars
    include HeaderSize, which allows you to skip over initial info, and
    SwapBytes, which turns on/off byte swapping. Consider using
    vtkImageReader as a replacement.
    
    @sa
    vtkSliceCubes vtkMarchingCubes vtkPNMReader vtkVolume16Reader
    vtkImageReader
    """
    def GetDataOrigin(self):
        """
        V.GetDataOrigin() -> (float, float, float)
        C++: virtual double *GetDataOrigin()
        
        Specify the origin for the data.
        """
        ...
    
    def GetDataSpacing(self):
        """
        V.GetDataSpacing() -> (float, float, float)
        C++: virtual double *GetDataSpacing()
        
        Specify the spacing for the data.
        """
        ...
    
    def GetFilePattern(self):
        """
        V.GetFilePattern() -> string
        C++: virtual char *GetFilePattern()
        
        The snprintf format used to build filename from FilePrefix and
        number.
        """
        ...
    
    def GetFilePrefix(self):
        """
        V.GetFilePrefix() -> string
        C++: virtual char *GetFilePrefix()
        
        Specify file prefix for the image file(s).
        """
        ...
    
    def GetImage(self, p_int):
        """
        V.GetImage(int) -> vtkImageData
        C++: virtual vtkImageData *GetImage(int ImageNumber)
        
        Other objects make use of this method.
        """
        ...
    
    def GetImageRange(self):
        """
        V.GetImageRange() -> (int, int)
        C++: virtual int *GetImageRange()
        
        Set the range of files to read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVolumeReader
        C++: vtkVolumeReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVolumeReader
        C++: static vtkVolumeReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDataOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetDataOrigin(float, float, float)
        C++: virtual void SetDataOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetDataOrigin((float, float, float))
        C++: virtual void SetDataOrigin(const double _arg[3])
        
        Specify the origin for the data.
        """
        ...
    
    def SetDataSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetDataSpacing(float, float, float)
        C++: virtual void SetDataSpacing(double _arg1, double _arg2,
            double _arg3)
        V.SetDataSpacing((float, float, float))
        C++: virtual void SetDataSpacing(const double _arg[3])
        
        Specify the spacing for the data.
        """
        ...
    
    def SetFilePattern(self, string):
        """
        V.SetFilePattern(string)
        C++: virtual void SetFilePattern(const char *_arg)
        
        The snprintf format used to build filename from FilePrefix and
        number.
        """
        ...
    
    def SetFilePrefix(self, string):
        """
        V.SetFilePrefix(string)
        C++: virtual void SetFilePrefix(const char *_arg)
        
        Specify file prefix for the image file(s).
        """
        ...
    
    def SetImageRange(self, p_int, p_int_1):
        """
        V.SetImageRange(int, int)
        C++: virtual void SetImageRange(int _arg1, int _arg2)
        V.SetImageRange((int, int))
        C++: void SetImageRange(const int _arg[2])
        
        Set the range of files to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


