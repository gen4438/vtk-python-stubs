"""
This type stub file was generated by pyright.
"""

from .vtkTIFFReader import vtkTIFFReader

class vtkOMETIFFReader(vtkTIFFReader):
    """
    vtkOMETIFFReader - reader for OME TIFF files
    
    Superclass: vtkTIFFReader
    
    vtkOMETIFFReader supports reading OME-TIFF files. These are TIFF
    files with OME meta-data that helps interpret the contents of the
    TIFF.
    
    The OME-TIFF specification is available here:
    https://docs.openmicroscopy.org/ome-model/5.6.3/ome-tiff/specification
    .html#ome-tiff-specification
    
    The current implementation only supports single-file, multi-page
    TIFF. It will not read multi-file OME-TIFF files correctly.
    
    Unlike most image readers, this reader does not support arbitrary
    sub-extent requests. This is because the splicing of the `z`, `t`,
    and `c` planes can make it tricky to read sub-extents in `z` for
    certain dimension orders. This reader supports piece-request instead
    and satisfies such request by splitting the `XY` plane into requested
    number of pieces.
    
    The reader lets the superclass read the whole TIFF volume and then
    splice it up into channels, timesteps, and z-planes. The parts are
    then cached internally so that subsequent timestep requests can be
    served without re-reading the file.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *fname) override;
        
        Is the given file name a tiff file?
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: const char *GetDescriptiveName() override;
        
        Return a descriptive name for the file format that might be
        useful in a GUI.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: const char *GetFileExtensions() override;
        
        Get the file extensions for this format. Returns a string with a
        space separated list of extensions in the format .extension
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOMETIFFReader
        C++: vtkOMETIFFReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOMETIFFReader
        C++: static vtkOMETIFFReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


