"""
This type stub file was generated by pyright.
"""

from .vtkVolumeReader import vtkVolumeReader

class vtkVolume16Reader(vtkVolumeReader):
    """
    vtkVolume16Reader - read 16 bit image files
    
    Superclass: vtkVolumeReader
    
    vtkVolume16Reader is a source object that reads 16 bit image files.
    
    Volume16Reader creates structured point datasets. The dimension of
    the dataset depends upon the number of files read. Reading a single
    file results in a 2D image, while reading more than one file results
    in a 3D volume.
    
    File names are created using FilePattern and FilePrefix as follows:
    snprintf (filename, sizeof(filename), FilePattern, FilePrefix,
    number); where number is in the range ImageRange[0] to ImageRange[1].
    If ImageRange[1] <= ImageRange[0], then slice number ImageRange[0] is
    read. Thus to read an image set ImageRange[0] = ImageRange[1] = slice
    number. The default behavior is to read a single file (i.e., image
    slice 1).
    
    The DataMask instance variable is used to read data files with
    embedded connectivity or segmentation information. For example, some
    data has the high order bit set to indicate connected surface. The
    DataMask allows you to select this data. Other important ivars
    include HeaderSize, which allows you to skip over initial info, and
    SwapBytes, which turns on/off byte swapping.
    
    The Transform instance variable specifies a permutation
    transformation to map slice space into world space. vtkImageReader
    has replaced the functionality of this class and should be used
    instead.
    
    @sa
    vtkSliceCubes vtkMarchingCubes vtkImageReader
    """
    def GetDataByteOrder(self):
        """
        V.GetDataByteOrder() -> int
        C++: int GetDataByteOrder()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def GetDataByteOrderAsString(self):
        """
        V.GetDataByteOrderAsString() -> string
        C++: const char *GetDataByteOrderAsString()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def GetDataDimensions(self):
        """
        V.GetDataDimensions() -> (int, int)
        C++: virtual int *GetDataDimensions()
        
        Specify the dimensions for the data.
        """
        ...
    
    def GetDataMask(self):
        """
        V.GetDataMask() -> int
        C++: virtual unsigned short GetDataMask()
        
        Specify a mask used to eliminate data in the data file (e.g.,
        connectivity bits).
        """
        ...
    
    def GetHeaderSize(self):
        """
        V.GetHeaderSize() -> int
        C++: virtual int GetHeaderSize()
        
        Specify the number of bytes to seek over at start of image.
        """
        ...
    
    def GetImage(self, p_int):
        """
        V.GetImage(int) -> vtkImageData
        C++: vtkImageData *GetImage(int ImageNumber) override;
        
        Other objects make use of these methods
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSwapBytes(self):
        """
        V.GetSwapBytes() -> int
        C++: virtual vtkTypeBool GetSwapBytes()
        
        Turn on/off byte swapping.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform
        C++: virtual vtkTransform *GetTransform()
        
        Set/Get transformation matrix to transform the data from slice
        space into world space. This matrix must be a permutation matrix.
        To qualify, the sums of the rows must be + or - 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVolume16Reader
        C++: vtkVolume16Reader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVolume16Reader
        C++: static vtkVolume16Reader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDataByteOrder(self, p_int):
        """
        V.SetDataByteOrder(int)
        C++: void SetDataByteOrder(int)
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def SetDataByteOrderToBigEndian(self):
        """
        V.SetDataByteOrderToBigEndian()
        C++: void SetDataByteOrderToBigEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def SetDataByteOrderToLittleEndian(self):
        """
        V.SetDataByteOrderToLittleEndian()
        C++: void SetDataByteOrderToLittleEndian()
        
        These methods should be used instead of the SwapBytes methods.
        They indicate the byte ordering of the file you are trying to
        read in. These methods will then either swap or not swap the
        bytes depending on the byte ordering of the machine it is being
        run on. For example, reading in a BigEndian file on a BigEndian
        machine will result in no swapping. Trying to read the same file
        on a LittleEndian machine will result in swapping. As a quick
        note most UNIX machines are BigEndian while PC's and VAX tend to
        be LittleEndian. So if the file you are reading in was generated
        on a VAX or PC, SetDataByteOrderToLittleEndian otherwise
        SetDataByteOrderToBigEndian.
        """
        ...
    
    def SetDataDimensions(self, p_int, p_int_1):
        """
        V.SetDataDimensions(int, int)
        C++: virtual void SetDataDimensions(int _arg1, int _arg2)
        V.SetDataDimensions((int, int))
        C++: void SetDataDimensions(const int _arg[2])
        
        Specify the dimensions for the data.
        """
        ...
    
    def SetDataMask(self, p_int):
        """
        V.SetDataMask(int)
        C++: virtual void SetDataMask(unsigned short _arg)
        
        Specify a mask used to eliminate data in the data file (e.g.,
        connectivity bits).
        """
        ...
    
    def SetHeaderSize(self, p_int):
        """
        V.SetHeaderSize(int)
        C++: virtual void SetHeaderSize(int _arg)
        
        Specify the number of bytes to seek over at start of image.
        """
        ...
    
    def SetSwapBytes(self, p_int):
        """
        V.SetSwapBytes(int)
        C++: virtual void SetSwapBytes(vtkTypeBool _arg)
        
        Turn on/off byte swapping.
        """
        ...
    
    def SetTransform(self, vtkTransform):
        """
        V.SetTransform(vtkTransform)
        C++: virtual void SetTransform(vtkTransform *)
        
        Set/Get transformation matrix to transform the data from slice
        space into world space. This matrix must be a permutation matrix.
        To qualify, the sums of the rows must be + or - 1.
        """
        ...
    
    def SwapBytesOff(self):
        """
        V.SwapBytesOff()
        C++: virtual void SwapBytesOff()
        
        Turn on/off byte swapping.
        """
        ...
    
    def SwapBytesOn(self):
        """
        V.SwapBytesOn()
        C++: virtual void SwapBytesOn()
        
        Turn on/off byte swapping.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


