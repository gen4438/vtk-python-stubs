"""
This type stub file was generated by pyright.
"""

from .vtkImageWriter import vtkImageWriter

class vtkPNGWriter(vtkImageWriter):
    """
    vtkPNGWriter - Writes PNG files.
    
    Superclass: vtkImageWriter
    
    vtkPNGWriter writes PNG files. It supports 1 to 4 component data of
    unsigned char or unsigned short
    
    @sa
    vtkPNGReader
    """
    def AddText(self, string, string_1):
        """
        V.AddText(string, string)
        C++: void AddText(const char *key, const char *value)
        
        Adds a text chunk to the PNG. More than one text chunk with the
        same key is permissible. There are a number of predefined
        keywords that should be used when appropriate. See
        http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html for more
        information.
        """
        ...
    
    def GetCompressionLevel(self):
        """
        V.GetCompressionLevel() -> int
        C++: virtual int GetCompressionLevel()
        
        Set/Get the zlib compression level. The range is 0-9, with 0
        meaning no compression corresponding to the largest file size,
        and 9 meaning best compression, corresponding to the smallest
        file size. The default is 5.
        """
        ...
    
    def GetCompressionLevelMaxValue(self):
        """
        V.GetCompressionLevelMaxValue() -> int
        C++: virtual int GetCompressionLevelMaxValue()
        
        Set/Get the zlib compression level. The range is 0-9, with 0
        meaning no compression corresponding to the largest file size,
        and 9 meaning best compression, corresponding to the smallest
        file size. The default is 5.
        """
        ...
    
    def GetCompressionLevelMinValue(self):
        """
        V.GetCompressionLevelMinValue() -> int
        C++: virtual int GetCompressionLevelMinValue()
        
        Set/Get the zlib compression level. The range is 0-9, with 0
        meaning no compression corresponding to the largest file size,
        and 9 meaning best compression, corresponding to the smallest
        file size. The default is 5.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetResult(self):
        """
        V.GetResult() -> vtkUnsignedCharArray
        C++: virtual vtkUnsignedCharArray *GetResult()
        
        When writing to memory this is the result, it will be nullptr
        until the data is written the first time
        """
        ...
    
    def GetWriteToMemory(self):
        """
        V.GetWriteToMemory() -> int
        C++: virtual vtkTypeUBool GetWriteToMemory()
        
        Write the image to memory (a vtkUnsignedCharArray)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPNGWriter
        C++: vtkPNGWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPNGWriter
        C++: static vtkPNGWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCompressionLevel(self, p_int):
        """
        V.SetCompressionLevel(int)
        C++: virtual void SetCompressionLevel(int _arg)
        
        Set/Get the zlib compression level. The range is 0-9, with 0
        meaning no compression corresponding to the largest file size,
        and 9 meaning best compression, corresponding to the smallest
        file size. The default is 5.
        """
        ...
    
    def SetResult(self, vtkUnsignedCharArray):
        """
        V.SetResult(vtkUnsignedCharArray)
        C++: virtual void SetResult(vtkUnsignedCharArray *)
        
        When writing to memory this is the result, it will be nullptr
        until the data is written the first time
        """
        ...
    
    def SetWriteToMemory(self, p_int):
        """
        V.SetWriteToMemory(int)
        C++: virtual void SetWriteToMemory(vtkTypeUBool _arg)
        
        Write the image to memory (a vtkUnsignedCharArray)
        """
        ...
    
    def Write(self):
        """
        V.Write()
        C++: void Write() override;
        
        The main interface which triggers the writer to start.
        """
        ...
    
    def WriteToMemoryOff(self):
        """
        V.WriteToMemoryOff()
        C++: virtual void WriteToMemoryOff()
        
        Write the image to memory (a vtkUnsignedCharArray)
        """
        ...
    
    def WriteToMemoryOn(self):
        """
        V.WriteToMemoryOn()
        C++: virtual void WriteToMemoryOn()
        
        Write the image to memory (a vtkUnsignedCharArray)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


