"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkMedicalImageProperties(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkMedicalImageProperties - some medical image properties.
    
    Superclass: vtkObject
    
    vtkMedicalImageProperties is a helper class that can be used by
    medical image readers and applications to encapsulate medical
    image/acquisition properties. Later on, this should probably be
    extended to add any user-defined property.
    @sa
    vtkMedicalImageReader2
    """
    def AddUserDefinedValue(self, string, string_1):
        """
        V.AddUserDefinedValue(string, string)
        C++: virtual void AddUserDefinedValue(const char *name,
            const char *value)
        """
        ...
    
    def AddWindowLevelPreset(self, p_float, p_float_1):
        """
        V.AddWindowLevelPreset(float, float) -> int
        C++: virtual int AddWindowLevelPreset(double w, double l)
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def Clear(self):
        """
        V.Clear()
        C++: virtual void Clear()
        
        Convenience method to reset all fields to an empty string/value
        """
        ...
    
    def DeepCopy(self, vtkMedicalImageProperties):
        """
        V.DeepCopy(vtkMedicalImageProperties)
        C++: virtual void DeepCopy(vtkMedicalImageProperties *p)
        
        Copy the contents of p to this instance.
        """
        ...
    
    def GetAcquisitionDate(self):
        """
        V.GetAcquisitionDate() -> string
        C++: virtual char *GetAcquisitionDate()
        
        Acquisition Date Format: yyyymmdd For ex: DICOM (0008,0022) =
        20030617
        """
        ...
    
    def GetAcquisitionDateDay(self):
        """
        V.GetAcquisitionDateDay() -> int
        C++: int GetAcquisitionDateDay()
        """
        ...
    
    def GetAcquisitionDateMonth(self):
        """
        V.GetAcquisitionDateMonth() -> int
        C++: int GetAcquisitionDateMonth()
        """
        ...
    
    def GetAcquisitionDateYear(self):
        """
        V.GetAcquisitionDateYear() -> int
        C++: int GetAcquisitionDateYear()
        """
        ...
    
    def GetAcquisitionTime(self):
        """
        V.GetAcquisitionTime() -> string
        C++: virtual char *GetAcquisitionTime()
        
        Acquisition time Format: hhmmss.frac (any trailing component(s)
        can be omitted) For ex: DICOM (0008,0032) = 162552.0705 or
        230012, or 0012
        """
        ...
    
    def GetAgeAsFields(self, string, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.GetAgeAsFields(string, int, int, int, int) -> int
        C++: static int GetAgeAsFields(const char *age, int &year,
            int &month, int &week, int &day)
        
        Take as input a string in VR=AS (DICOM PS3.5) and extract either
        different fields namely: year month week day Return 0 on error, 1
        on success One can test fields if they are different from -1 upon
        success
        """
        ...
    
    def GetConvolutionKernel(self):
        """
        V.GetConvolutionKernel() -> string
        C++: virtual char *GetConvolutionKernel()
        
        Convolution Kernel (or algorithm used to reconstruct the data)
        For ex: DICOM (0018,1210) = Bone
        """
        ...
    
    def GetDateAsFields(self, string, p_int, p_int_1, p_int_2):
        """
        V.GetDateAsFields(string, int, int, int) -> int
        C++: static int GetDateAsFields(const char *date, int &year,
            int &month, int &day)
        
        Take as input a string in ISO 8601 date (YYYY/MM/DD) and extract
        the different fields namely: year month day Return 0 on error, 1
        on success
        """
        ...
    
    def GetDateAsLocale(self, string, string_1):
        """
        V.GetDateAsLocale(string, string) -> int
        C++: static int GetDateAsLocale(const char *date, char *locale)
        
        Take as input a string in ISO 8601 date (YYYY/MM/DD) and
        construct a locale date based on the different fields (see
        GetDateAsFields to extract different fields) Return 0 on error, 1
        on success
        """
        ...
    
    def GetDirectionCosine(self):
        """
        V.GetDirectionCosine() -> (float, float, float, float, float,
            float)
        C++: virtual double *GetDirectionCosine()
        
        Get the direction cosine (default to 1,0,0,0,1,0)
        """
        ...
    
    def GetEchoTime(self):
        """
        V.GetEchoTime() -> string
        C++: virtual char *GetEchoTime()
        
        Echo Time (Time in ms between the middle of the excitation pulse
        and the peak of the echo produced) For ex: DICOM (0018,0081) =
        105
        """
        ...
    
    def GetEchoTrainLength(self):
        """
        V.GetEchoTrainLength() -> string
        C++: virtual char *GetEchoTrainLength()
        
        Echo Train Length (Number of lines in k-space acquired per
        excitation per image) For ex: DICOM (0018,0091) = 35
        """
        ...
    
    def GetExposure(self):
        """
        V.GetExposure() -> string
        C++: virtual char *GetExposure()
        
        Exposure (The exposure expressed in mAs, for example calculated
        from Exposure Time and X-ray Tube Current) For ex: DICOM
        (0018,1152) = 114
        """
        ...
    
    def GetExposureTime(self):
        """
        V.GetExposureTime() -> string
        C++: virtual char *GetExposureTime()
        
        Exposure time (time of x-ray exposure in msec) For ex: DICOM
        (0018,1150) = 5
        """
        ...
    
    def GetGantryTilt(self):
        """
        V.GetGantryTilt() -> string
        C++: virtual char *GetGantryTilt()
        
        Gantry/Detector tilt (Nominal angle of tilt in degrees of the
        scanning gantry.) For ex: DICOM (0018,1120) = 15
        """
        ...
    
    def GetGantryTiltAsDouble(self):
        """
        V.GetGantryTiltAsDouble() -> float
        C++: virtual double GetGantryTiltAsDouble()
        
        Gantry/Detector tilt (Nominal angle of tilt in degrees of the
        scanning gantry.) For ex: DICOM (0018,1120) = 15
        """
        ...
    
    def GetImageDate(self):
        """
        V.GetImageDate() -> string
        C++: virtual char *GetImageDate()
        
        Image Date aka Content Date Format: yyyymmdd For ex: DICOM
        (0008,0023) = 20030617
        """
        ...
    
    def GetImageDateDay(self):
        """
        V.GetImageDateDay() -> int
        C++: int GetImageDateDay()
        """
        ...
    
    def GetImageDateMonth(self):
        """
        V.GetImageDateMonth() -> int
        C++: int GetImageDateMonth()
        """
        ...
    
    def GetImageDateYear(self):
        """
        V.GetImageDateYear() -> int
        C++: int GetImageDateYear()
        """
        ...
    
    def GetImageNumber(self):
        """
        V.GetImageNumber() -> string
        C++: virtual char *GetImageNumber()
        
        Image number For ex: DICOM (0020,0013) = 1
        """
        ...
    
    def GetImageTime(self):
        """
        V.GetImageTime() -> string
        C++: virtual char *GetImageTime()
        
        Image Time Format: hhmmss.frac (any trailing component(s) can be
        omitted) For ex: DICOM (0008,0033) = 162552.0705 or 230012, or
        0012
        """
        ...
    
    def GetInstanceUIDFromSliceID(self, p_int, p_int_1):
        """
        V.GetInstanceUIDFromSliceID(int, int) -> string
        C++: const char *GetInstanceUIDFromSliceID(int volumeidx,
            int sliceid)
        
        Mapping from a sliceidx within a volumeidx into a DICOM Instance
        UID Some DICOM reader can populate this structure so that later
        on from a slice index in a vtkImageData volume we can backtrack
        and find out which 2d slice it was coming from
        """
        ...
    
    def GetInstitutionName(self):
        """
        V.GetInstitutionName() -> string
        C++: virtual char *GetInstitutionName()
        
        Institution Name For ex: DICOM (0008,0080) = FooCity Medical
        Center
        """
        ...
    
    def GetKVP(self):
        """
        V.GetKVP() -> string
        C++: virtual char *GetKVP()
        
        Peak kilo voltage output of the (x-ray) generator used For ex:
        DICOM (0018,0060) = 120
        """
        ...
    
    def GetManufacturer(self):
        """
        V.GetManufacturer() -> string
        C++: virtual char *GetManufacturer()
        
        Manufacturer For ex: DICOM (0008,0070) = Siemens
        """
        ...
    
    def GetManufacturerModelName(self):
        """
        V.GetManufacturerModelName() -> string
        C++: virtual char *GetManufacturerModelName()
        
        Manufacturer's Model Name For ex: DICOM (0008,1090) = LightSpeed
        QX/i
        """
        ...
    
    def GetModality(self):
        """
        V.GetModality() -> string
        C++: virtual char *GetModality()
        
        Modality For ex: DICOM (0008,0060)= CT
        """
        ...
    
    def GetNthWindowLevelPreset(self, p_int, *float, **kwargs):
        """
        V.GetNthWindowLevelPreset(int, [float, ...], [float, ...]) -> int
        C++: virtual int GetNthWindowLevelPreset(int idx, double *w,
            double *l)
        V.GetNthWindowLevelPreset(int) -> (float, float)
        C++: virtual double *GetNthWindowLevelPreset(int idx)
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def GetNthWindowLevelPresetComment(self, p_int):
        """
        V.GetNthWindowLevelPresetComment(int) -> string
        C++: virtual const char *GetNthWindowLevelPresetComment(int idx)
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfUserDefinedValues(self):
        """
        V.GetNumberOfUserDefinedValues() -> int
        C++: virtual unsigned int GetNumberOfUserDefinedValues()
        """
        ...
    
    def GetNumberOfWindowLevelPresets(self):
        """
        V.GetNumberOfWindowLevelPresets() -> int
        C++: virtual int GetNumberOfWindowLevelPresets()
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def GetOrientationType(self, p_int):
        """
        V.GetOrientationType(int) -> int
        C++: int GetOrientationType(int volumeidx)
        """
        ...
    
    def GetPatientAge(self):
        """
        V.GetPatientAge() -> string
        C++: virtual char *GetPatientAge()
        
        Patient age Format: nnnD, nnW, nnnM or nnnY (eventually nnD, nnW,
        nnY) with D (day), M (month), W (week), Y (year) For ex: DICOM
        (0010,1010) = 031Y
        """
        ...
    
    def GetPatientAgeDay(self):
        """
        V.GetPatientAgeDay() -> int
        C++: int GetPatientAgeDay()
        """
        ...
    
    def GetPatientAgeMonth(self):
        """
        V.GetPatientAgeMonth() -> int
        C++: int GetPatientAgeMonth()
        """
        ...
    
    def GetPatientAgeWeek(self):
        """
        V.GetPatientAgeWeek() -> int
        C++: int GetPatientAgeWeek()
        """
        ...
    
    def GetPatientAgeYear(self):
        """
        V.GetPatientAgeYear() -> int
        C++: int GetPatientAgeYear()
        """
        ...
    
    def GetPatientBirthDate(self):
        """
        V.GetPatientBirthDate() -> string
        C++: virtual char *GetPatientBirthDate()
        
        Patient birth date Format: yyyymmdd For ex: DICOM (0010,0030) =
        19680427
        """
        ...
    
    def GetPatientBirthDateDay(self):
        """
        V.GetPatientBirthDateDay() -> int
        C++: int GetPatientBirthDateDay()
        """
        ...
    
    def GetPatientBirthDateMonth(self):
        """
        V.GetPatientBirthDateMonth() -> int
        C++: int GetPatientBirthDateMonth()
        """
        ...
    
    def GetPatientBirthDateYear(self):
        """
        V.GetPatientBirthDateYear() -> int
        C++: int GetPatientBirthDateYear()
        """
        ...
    
    def GetPatientID(self):
        """
        V.GetPatientID() -> string
        C++: virtual char *GetPatientID()
        
        Patient ID For ex: DICOM (0010,0020) = 1933197
        """
        ...
    
    def GetPatientName(self):
        """
        V.GetPatientName() -> string
        C++: virtual char *GetPatientName()
        
        Patient name For ex: DICOM (0010,0010) = DOE,JOHN
        """
        ...
    
    def GetPatientSex(self):
        """
        V.GetPatientSex() -> string
        C++: virtual char *GetPatientSex()
        
        Patient sex For ex: DICOM (0010,0040) = M
        """
        ...
    
    def GetRepetitionTime(self):
        """
        V.GetRepetitionTime() -> string
        C++: virtual char *GetRepetitionTime()
        
        Repetition Time The period of time in msec between the beginning
        of a pulse sequence and the beginning of the succeeding
        (essentially identical) pulse sequence. For ex: DICOM (0018,0080)
        = 2040
        """
        ...
    
    def GetSeriesDescription(self):
        """
        V.GetSeriesDescription() -> string
        C++: virtual char *GetSeriesDescription()
        
        Series Description User provided description of the Series For
        ex: DICOM (0008,103e) = SCOUT
        """
        ...
    
    def GetSeriesNumber(self):
        """
        V.GetSeriesNumber() -> string
        C++: virtual char *GetSeriesNumber()
        
        Series number For ex: DICOM (0020,0011) = 902
        """
        ...
    
    def GetSliceIDFromInstanceUID(self, p_int, string):
        """
        V.GetSliceIDFromInstanceUID(int, string) -> int
        C++: int GetSliceIDFromInstanceUID(int &volumeidx,
            const char *uid)
        
        Provides the inverse mapping. Returns -1 if a slice for this uid
        is not found.
        """
        ...
    
    def GetSliceThickness(self):
        """
        V.GetSliceThickness() -> string
        C++: virtual char *GetSliceThickness()
        
        Slice Thickness (Nominal reconstructed slice thickness, in mm)
        For ex: DICOM (0018,0050) = 0.273438
        """
        ...
    
    def GetSliceThicknessAsDouble(self):
        """
        V.GetSliceThicknessAsDouble() -> float
        C++: virtual double GetSliceThicknessAsDouble()
        
        Slice Thickness (Nominal reconstructed slice thickness, in mm)
        For ex: DICOM (0018,0050) = 0.273438
        """
        ...
    
    def GetStationName(self):
        """
        V.GetStationName() -> string
        C++: virtual char *GetStationName()
        
        Station Name For ex: DICOM (0008,1010) = LSPD_OC8
        """
        ...
    
    def GetStringFromOrientationType(self, p_int):
        """
        V.GetStringFromOrientationType(int) -> string
        C++: static const char *GetStringFromOrientationType(
            unsigned int type)
        """
        ...
    
    def GetStudyDate(self):
        """
        V.GetStudyDate() -> string
        C++: virtual char *GetStudyDate()
        
        Study Date Format: yyyymmdd For ex: DICOM (0008,0020) = 20030617
        """
        ...
    
    def GetStudyDescription(self):
        """
        V.GetStudyDescription() -> string
        C++: virtual char *GetStudyDescription()
        
        Study description For ex: DICOM (0008,1030) = BRAIN/C-SP/FACIAL
        """
        ...
    
    def GetStudyID(self):
        """
        V.GetStudyID() -> string
        C++: virtual char *GetStudyID()
        
        Study ID For ex: DICOM (0020,0010) = 37481
        """
        ...
    
    def GetStudyTime(self):
        """
        V.GetStudyTime() -> string
        C++: virtual char *GetStudyTime()
        
        Study Time Format: hhmmss.frac (any trailing component(s) can be
        omitted) For ex: DICOM (0008,0030) = 162552.0705 or 230012, or
        0012
        """
        ...
    
    def GetTimeAsFields(self, string, p_int, p_int_1, p_int_2):
        """
        V.GetTimeAsFields(string, int, int, int) -> int
        C++: static int GetTimeAsFields(const char *time, int &hour,
            int &minute, int &second)
        
        Take as input a string in VR:TM format (HHMMSS) and extract the
        different fields namely: hour, minute and second Return 0 on
        error, 1 on success
        """
        ...
    
    def GetUserDefinedNameByIndex(self, p_int):
        """
        V.GetUserDefinedNameByIndex(int) -> string
        C++: virtual const char *GetUserDefinedNameByIndex(
            unsigned int idx)
        """
        ...
    
    def GetUserDefinedValue(self, string):
        """
        V.GetUserDefinedValue(string) -> string
        C++: virtual const char *GetUserDefinedValue(const char *name)
        """
        ...
    
    def GetUserDefinedValueByIndex(self, p_int):
        """
        V.GetUserDefinedValueByIndex(int) -> string
        C++: virtual const char *GetUserDefinedValueByIndex(
            unsigned int idx)
        """
        ...
    
    def GetWindowLevelPresetIndex(self, p_float, p_float_1):
        """
        V.GetWindowLevelPresetIndex(float, float) -> int
        C++: virtual int GetWindowLevelPresetIndex(double w, double l)
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def GetXRayTubeCurrent(self):
        """
        V.GetXRayTubeCurrent() -> string
        C++: virtual char *GetXRayTubeCurrent()
        
        X-ray tube current (in mA) For ex: DICOM (0018,1151) = 400
        """
        ...
    
    def HasWindowLevelPreset(self, p_float, p_float_1):
        """
        V.HasWindowLevelPreset(float, float) -> int
        C++: virtual int HasWindowLevelPreset(double w, double l)
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMedicalImageProperties
        C++: vtkMedicalImageProperties *NewInstance()
        """
        ...
    
    def RemoveAllUserDefinedValues(self):
        """
        V.RemoveAllUserDefinedValues()
        C++: virtual void RemoveAllUserDefinedValues()
        """
        ...
    
    def RemoveAllWindowLevelPresets(self):
        """
        V.RemoveAllWindowLevelPresets()
        C++: virtual void RemoveAllWindowLevelPresets()
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def RemoveWindowLevelPreset(self, p_float, p_float_1):
        """
        V.RemoveWindowLevelPreset(float, float)
        C++: virtual void RemoveWindowLevelPreset(double w, double l)
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMedicalImageProperties
        C++: static vtkMedicalImageProperties *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAcquisitionDate(self, string):
        """
        V.SetAcquisitionDate(string)
        C++: virtual void SetAcquisitionDate(const char *_arg)
        
        Acquisition Date Format: yyyymmdd For ex: DICOM (0008,0022) =
        20030617
        """
        ...
    
    def SetAcquisitionTime(self, string):
        """
        V.SetAcquisitionTime(string)
        C++: virtual void SetAcquisitionTime(const char *_arg)
        
        Acquisition time Format: hhmmss.frac (any trailing component(s)
        can be omitted) For ex: DICOM (0008,0032) = 162552.0705 or
        230012, or 0012
        """
        ...
    
    def SetConvolutionKernel(self, string):
        """
        V.SetConvolutionKernel(string)
        C++: virtual void SetConvolutionKernel(const char *_arg)
        
        Convolution Kernel (or algorithm used to reconstruct the data)
        For ex: DICOM (0018,1210) = Bone
        """
        ...
    
    def SetDirectionCosine(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetDirectionCosine(float, float, float, float, float, float)
        C++: virtual void SetDirectionCosine(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetDirectionCosine((float, float, float, float, float, float))
        C++: virtual void SetDirectionCosine(const double _arg[6])
        
        Get the direction cosine (default to 1,0,0,0,1,0)
        """
        ...
    
    def SetEchoTime(self, string):
        """
        V.SetEchoTime(string)
        C++: virtual void SetEchoTime(const char *_arg)
        
        Echo Time (Time in ms between the middle of the excitation pulse
        and the peak of the echo produced) For ex: DICOM (0018,0081) =
        105
        """
        ...
    
    def SetEchoTrainLength(self, string):
        """
        V.SetEchoTrainLength(string)
        C++: virtual void SetEchoTrainLength(const char *_arg)
        
        Echo Train Length (Number of lines in k-space acquired per
        excitation per image) For ex: DICOM (0018,0091) = 35
        """
        ...
    
    def SetExposure(self, string):
        """
        V.SetExposure(string)
        C++: virtual void SetExposure(const char *_arg)
        
        Exposure (The exposure expressed in mAs, for example calculated
        from Exposure Time and X-ray Tube Current) For ex: DICOM
        (0018,1152) = 114
        """
        ...
    
    def SetExposureTime(self, string):
        """
        V.SetExposureTime(string)
        C++: virtual void SetExposureTime(const char *_arg)
        
        Exposure time (time of x-ray exposure in msec) For ex: DICOM
        (0018,1150) = 5
        """
        ...
    
    def SetGantryTilt(self, string):
        """
        V.SetGantryTilt(string)
        C++: virtual void SetGantryTilt(const char *_arg)
        
        Gantry/Detector tilt (Nominal angle of tilt in degrees of the
        scanning gantry.) For ex: DICOM (0018,1120) = 15
        """
        ...
    
    def SetImageDate(self, string):
        """
        V.SetImageDate(string)
        C++: virtual void SetImageDate(const char *_arg)
        
        Image Date aka Content Date Format: yyyymmdd For ex: DICOM
        (0008,0023) = 20030617
        """
        ...
    
    def SetImageNumber(self, string):
        """
        V.SetImageNumber(string)
        C++: virtual void SetImageNumber(const char *_arg)
        
        Image number For ex: DICOM (0020,0013) = 1
        """
        ...
    
    def SetImageTime(self, string):
        """
        V.SetImageTime(string)
        C++: virtual void SetImageTime(const char *_arg)
        
        Image Time Format: hhmmss.frac (any trailing component(s) can be
        omitted) For ex: DICOM (0008,0033) = 162552.0705 or 230012, or
        0012
        """
        ...
    
    def SetInstanceUIDFromSliceID(self, p_int, p_int_1, string):
        """
        V.SetInstanceUIDFromSliceID(int, int, string)
        C++: void SetInstanceUIDFromSliceID(int volumeidx, int sliceid,
            const char *uid)
        
        Mapping from a sliceidx within a volumeidx into a DICOM Instance
        UID Some DICOM reader can populate this structure so that later
        on from a slice index in a vtkImageData volume we can backtrack
        and find out which 2d slice it was coming from
        """
        ...
    
    def SetInstitutionName(self, string):
        """
        V.SetInstitutionName(string)
        C++: virtual void SetInstitutionName(const char *_arg)
        
        Institution Name For ex: DICOM (0008,0080) = FooCity Medical
        Center
        """
        ...
    
    def SetKVP(self, string):
        """
        V.SetKVP(string)
        C++: virtual void SetKVP(const char *_arg)
        
        Peak kilo voltage output of the (x-ray) generator used For ex:
        DICOM (0018,0060) = 120
        """
        ...
    
    def SetManufacturer(self, string):
        """
        V.SetManufacturer(string)
        C++: virtual void SetManufacturer(const char *_arg)
        
        Manufacturer For ex: DICOM (0008,0070) = Siemens
        """
        ...
    
    def SetManufacturerModelName(self, string):
        """
        V.SetManufacturerModelName(string)
        C++: virtual void SetManufacturerModelName(const char *_arg)
        
        Manufacturer's Model Name For ex: DICOM (0008,1090) = LightSpeed
        QX/i
        """
        ...
    
    def SetModality(self, string):
        """
        V.SetModality(string)
        C++: virtual void SetModality(const char *_arg)
        
        Modality For ex: DICOM (0008,0060)= CT
        """
        ...
    
    def SetNthWindowLevelPresetComment(self, p_int, string):
        """
        V.SetNthWindowLevelPresetComment(int, string)
        C++: virtual void SetNthWindowLevelPresetComment(int idx,
            const char *comment)
        
        Add/Remove/Query the window/level presets that may have been
        associated to a medical image. Window is also known as 'width',
        level is also known as 'center'. The same window/level pair can
        not be added twice. As a convenience, a comment (aka Explanation)
        can be associated to a preset. For ex:
         DICOM Window Center (0028,1050) = 00045\000470
         DICOM Window Width  (0028,1051) = 0106\03412
         DICOM Window Center Width Explanation (0028,1055) = WINDOW1\WINDOW2
        """
        ...
    
    def SetOrientationType(self, p_int, p_int_1):
        """
        V.SetOrientationType(int, int)
        C++: void SetOrientationType(int volumeidx, int orientation)
        """
        ...
    
    def SetPatientAge(self, string):
        """
        V.SetPatientAge(string)
        C++: virtual void SetPatientAge(const char *_arg)
        
        Patient age Format: nnnD, nnW, nnnM or nnnY (eventually nnD, nnW,
        nnY) with D (day), M (month), W (week), Y (year) For ex: DICOM
        (0010,1010) = 031Y
        """
        ...
    
    def SetPatientBirthDate(self, string):
        """
        V.SetPatientBirthDate(string)
        C++: virtual void SetPatientBirthDate(const char *_arg)
        
        Patient birth date Format: yyyymmdd For ex: DICOM (0010,0030) =
        19680427
        """
        ...
    
    def SetPatientID(self, string):
        """
        V.SetPatientID(string)
        C++: virtual void SetPatientID(const char *_arg)
        
        Patient ID For ex: DICOM (0010,0020) = 1933197
        """
        ...
    
    def SetPatientName(self, string):
        """
        V.SetPatientName(string)
        C++: virtual void SetPatientName(const char *_arg)
        
        Patient name For ex: DICOM (0010,0010) = DOE,JOHN
        """
        ...
    
    def SetPatientSex(self, string):
        """
        V.SetPatientSex(string)
        C++: virtual void SetPatientSex(const char *_arg)
        
        Patient sex For ex: DICOM (0010,0040) = M
        """
        ...
    
    def SetRepetitionTime(self, string):
        """
        V.SetRepetitionTime(string)
        C++: virtual void SetRepetitionTime(const char *_arg)
        
        Repetition Time The period of time in msec between the beginning
        of a pulse sequence and the beginning of the succeeding
        (essentially identical) pulse sequence. For ex: DICOM (0018,0080)
        = 2040
        """
        ...
    
    def SetSeriesDescription(self, string):
        """
        V.SetSeriesDescription(string)
        C++: virtual void SetSeriesDescription(const char *_arg)
        
        Series Description User provided description of the Series For
        ex: DICOM (0008,103e) = SCOUT
        """
        ...
    
    def SetSeriesNumber(self, string):
        """
        V.SetSeriesNumber(string)
        C++: virtual void SetSeriesNumber(const char *_arg)
        
        Series number For ex: DICOM (0020,0011) = 902
        """
        ...
    
    def SetSliceThickness(self, string):
        """
        V.SetSliceThickness(string)
        C++: virtual void SetSliceThickness(const char *_arg)
        
        Slice Thickness (Nominal reconstructed slice thickness, in mm)
        For ex: DICOM (0018,0050) = 0.273438
        """
        ...
    
    def SetStationName(self, string):
        """
        V.SetStationName(string)
        C++: virtual void SetStationName(const char *_arg)
        
        Station Name For ex: DICOM (0008,1010) = LSPD_OC8
        """
        ...
    
    def SetStudyDate(self, string):
        """
        V.SetStudyDate(string)
        C++: virtual void SetStudyDate(const char *_arg)
        
        Study Date Format: yyyymmdd For ex: DICOM (0008,0020) = 20030617
        """
        ...
    
    def SetStudyDescription(self, string):
        """
        V.SetStudyDescription(string)
        C++: virtual void SetStudyDescription(const char *_arg)
        
        Study description For ex: DICOM (0008,1030) = BRAIN/C-SP/FACIAL
        """
        ...
    
    def SetStudyID(self, string):
        """
        V.SetStudyID(string)
        C++: virtual void SetStudyID(const char *_arg)
        
        Study ID For ex: DICOM (0020,0010) = 37481
        """
        ...
    
    def SetStudyTime(self, string):
        """
        V.SetStudyTime(string)
        C++: virtual void SetStudyTime(const char *_arg)
        
        Study Time Format: hhmmss.frac (any trailing component(s) can be
        omitted) For ex: DICOM (0008,0030) = 162552.0705 or 230012, or
        0012
        """
        ...
    
    def SetXRayTubeCurrent(self, string):
        """
        V.SetXRayTubeCurrent(string)
        C++: virtual void SetXRayTubeCurrent(const char *_arg)
        
        X-ray tube current (in mA) For ex: DICOM (0018,1151) = 400
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AXIAL = ...
    CORONAL = ...
    SAGITTAL = ...
    __dict__ = ...
    __vtkname__ = ...


