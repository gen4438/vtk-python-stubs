"""
This type stub file was generated by pyright.
"""

from .vtkImageWriter import vtkImageWriter

class vtkMetaImageWriter(vtkImageWriter):
    """
    vtkMetaImageWriter - write a binary UNC meta image data
    
    Superclass: vtkImageWriter
    
    One of the formats for which a reader is already available in the
    toolkit is the MetaImage file format. This is a fairly simple yet
    powerful format consisting of a text header and a binary data
    section. The following instructions describe how you can write a
    MetaImage header for the data that you download from the BrainWeb
    page.
    
    The minimal structure of the MetaImage header is the following:
    
    
       NDims = 3
       DimSize = 181 217 181
       ElementType = MET_UCHAR
       ElementSpacing = 1.0 1.0 1.0
       ElementByteOrderMSB = False
       ElementDataFile = brainweb1.raw
    
    * NDims indicate that this is a 3D image. ITK can handle images of
      arbitrary dimension.
    * DimSize indicates the size of the volume in pixels along each
      direction.
    * ElementType indicate the primitive type used for pixels. In this
      case is "unsigned char", implying that the data is digitized in 8
      bits / pixel.
    * ElementSpacing indicates the physical separation between the center
    of one pixel and the center of the next pixel along each direction in
    space. The units used are millimeters.
    * ElementByteOrderMSB indicates is the data is encoded in little or
      big endian order. You might want to play with this value when
      moving data between different computer platforms.
    * ElementDataFile is the name of the file containing the raw binary
      data of the image. This file must be in the same directory as the
      header.
    
    MetaImage headers are expected to have extension: ".mha" or ".mhd"
    
    Once you write this header text file, it should be possible to read
    the image into your ITK based application using the
    itk::FileIOToImageFilter class.
    
    @sa
    vtkImageWriter vtkMetaImageReader
    """
    def GetCompression(self):
        """
        V.GetCompression() -> bool
        C++: virtual bool GetCompression(void)
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: char *GetFileName() override;
        
        Specify file name for the image file. You should specify either a
        FileName or a FilePrefix. Use FilePrefix if the data is stored in
        multiple files.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRAWFileName(self):
        """
        V.GetRAWFileName() -> string
        C++: virtual char *GetRAWFileName()
        
        Specify the file name of the raw image data.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMetaImageWriter
        C++: vtkMetaImageWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMetaImageWriter
        C++: static vtkMetaImageWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCompression(self, bool):
        """
        V.SetCompression(bool)
        C++: virtual void SetCompression(bool compress)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *fname) override;
        
        Specify file name of meta file
        """
        ...
    
    def SetRAWFileName(self, string):
        """
        V.SetRAWFileName(string)
        C++: virtual void SetRAWFileName(const char *fname)
        
        Specify the file name of the raw image data.
        """
        ...
    
    def Write(self):
        """
        V.Write()
        C++: void Write() override;
        
        The main interface which triggers the writer to start.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


