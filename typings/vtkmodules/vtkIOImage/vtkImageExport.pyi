"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageExport(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageExport - Export VTK images to third-party systems.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageExport provides a way of exporting image data at the end of a
    pipeline to a third-party system or to a simple C array. Applications
    can use this to get direct access to the image data in memory.  A
    callback interface is provided to allow connection of the VTK
    pipeline to a third-party pipeline.  This interface conforms to the
    interface of vtkImageImport. In Python it is possible to use this
    class to write the image data into a python string that has been
    pre-allocated to be the correct size.
    @sa
    vtkImageImport
    """
    def Export(self):
        """
        V.Export()
        C++: void Export()
        V.Export(void)
        C++: virtual void Export(void *)
        
        The main interface: update the pipeline and export the image to
        the memory pointed to by SetExportVoidPointer().  You can also
        specify a void pointer when you call Export().
        """
        ...
    
    def GetCallbackUserData(self):
        """
        V.GetCallbackUserData() -> void
        C++: void *GetCallbackUserData()
        
        Get the user data that should be passed to the callback
        functions.
        """
        ...
    
    def GetDataDimensions(self, *int):
        """
        V.GetDataDimensions([int, ...])
        C++: void GetDataDimensions(int *ptr)
        V.GetDataDimensions() -> (int, int, int)
        C++: int *GetDataDimensions()
        
        Get the (x,y,z) index dimensions of the data.  Please note that C
        arrays are indexed in decreasing order, i.e. array[z][y][x].
        """
        ...
    
    def GetDataDirection(self):
        """
        V.GetDataDirection() -> (float, float, float, float, float, float,
             float, float, float)
        C++: double *GetDataDirection()
        V.GetDataDirection([float, ...])
        C++: void GetDataDirection(double *ptr)
        
        Get miscellaneous additional information about the data.
        """
        ...
    
    def GetDataExtent(self):
        """
        V.GetDataExtent() -> (int, int, int, int, int, int)
        C++: int *GetDataExtent()
        V.GetDataExtent([int, ...])
        C++: void GetDataExtent(int *ptr)
        
        Get miscellaneous additional information about the data.
        """
        ...
    
    def GetDataMemorySize(self):
        """
        V.GetDataMemorySize() -> int
        C++: vtkIdType GetDataMemorySize()
        
        Get the number of bytes required for the output C array.
        """
        ...
    
    def GetDataNumberOfScalarComponents(self):
        """
        V.GetDataNumberOfScalarComponents() -> int
        C++: int GetDataNumberOfScalarComponents()
        
        Get the number of scalar components of the data.  Please note
        that when you index into a C array, the scalar component index
        comes last, i.e. array[z][y][x][c].
        """
        ...
    
    def GetDataOrigin(self):
        """
        V.GetDataOrigin() -> (float, float, float)
        C++: double *GetDataOrigin()
        V.GetDataOrigin([float, ...])
        C++: void GetDataOrigin(double *ptr)
        
        Get miscellaneous additional information about the data.
        """
        ...
    
    def GetDataScalarType(self):
        """
        V.GetDataScalarType() -> int
        C++: int GetDataScalarType()
        
        Get the scalar type of the data.  The scalar type of the C array
        must match the scalar type of the data.
        """
        ...
    
    def GetDataScalarTypeAsString(self):
        """
        V.GetDataScalarTypeAsString() -> string
        C++: const char *GetDataScalarTypeAsString()
        """
        ...
    
    def GetDataSpacing(self):
        """
        V.GetDataSpacing() -> (float, float, float)
        C++: double *GetDataSpacing()
        V.GetDataSpacing([float, ...])
        C++: void GetDataSpacing(double *ptr)
        
        Get miscellaneous additional information about the data.
        """
        ...
    
    def GetExportVoidPointer(self):
        """
        V.GetExportVoidPointer() -> void
        C++: void *GetExportVoidPointer()
        
        Set the void pointer of the C array to export the data to. From
        python, you can specify a pointer to a string that is large
        enough to hold the data.
        """
        ...
    
    def GetImageLowerLeft(self):
        """
        V.GetImageLowerLeft() -> int
        C++: virtual vtkTypeBool GetImageLowerLeft()
        
        Set/Get whether the data goes to the exported memory starting in
        the lower left corner or upper left corner.  Default: On. When
        this flag is Off, the image will be flipped vertically before it
        is exported. WARNING: this flag is used only with the Export()
        method, it is ignored by GetPointerToData().
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: vtkImageData *GetInput()
        
        Get the input object from the image pipeline.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPointerToData(self):
        """
        V.GetPointerToData() -> void
        C++: void *GetPointerToData()
        
        An alternative to Export(): Use with caution.   Update the
        pipeline and return a pointer to the image memory.  The pointer
        is only valid until the next time that the pipeline is updated.
        WARNING: This method ignores the ImageLowerLeft flag.
        """
        ...
    
    def ImageLowerLeftOff(self):
        """
        V.ImageLowerLeftOff()
        C++: virtual void ImageLowerLeftOff()
        
        Set/Get whether the data goes to the exported memory starting in
        the lower left corner or upper left corner.  Default: On. When
        this flag is Off, the image will be flipped vertically before it
        is exported. WARNING: this flag is used only with the Export()
        method, it is ignored by GetPointerToData().
        """
        ...
    
    def ImageLowerLeftOn(self):
        """
        V.ImageLowerLeftOn()
        C++: virtual void ImageLowerLeftOn()
        
        Set/Get whether the data goes to the exported memory starting in
        the lower left corner or upper left corner.  Default: On. When
        this flag is Off, the image will be flipped vertically before it
        is exported. WARNING: this flag is used only with the Export()
        method, it is ignored by GetPointerToData().
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageExport
        C++: vtkImageExport *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageExport
        C++: static vtkImageExport *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetExportVoidPointer(self, void):
        """
        V.SetExportVoidPointer(void)
        C++: void SetExportVoidPointer(void *)
        
        Set the void pointer of the C array to export the data to. From
        python, you can specify a pointer to a string that is large
        enough to hold the data.
        """
        ...
    
    def SetImageLowerLeft(self, p_int):
        """
        V.SetImageLowerLeft(int)
        C++: virtual void SetImageLowerLeft(vtkTypeBool _arg)
        
        Set/Get whether the data goes to the exported memory starting in
        the lower left corner or upper left corner.  Default: On. When
        this flag is Off, the image will be flipped vertically before it
        is exported. WARNING: this flag is used only with the Export()
        method, it is ignored by GetPointerToData().
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


