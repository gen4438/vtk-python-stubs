"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkImageReader2Factory(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkImageReader2Factory - Superclass of binary file readers.
    
    Superclass: vtkObject
    
    vtkImageReader2Factory: This class is used to create a
    vtkImageReader2 object given a path name to a file.  It calls
    CanReadFile on all available readers until one of them returns true. 
    The available reader list comes from three places.  In the
    InitializeReaders function of this class, built-in VTK classes are
    added to the list, users can call RegisterReader, or users can create
    a vtkObjectFactory that has CreateObject method that returns a new
    vtkImageReader2 sub class when given the string
    "vtkImageReaderObject".  This way applications can be extended with
    new readers via a plugin dll or by calling RegisterReader. Of course
    all of the readers that are part of the vtk release are made
    automatically available.
    
    @sa
    vtkImageReader2
    """
    def CreateImageReader2(self, string):
        """
        V.CreateImageReader2(string) -> vtkImageReader2
        C++: static vtkImageReader2 *CreateImageReader2(const char *path)
        
        open the image file, it is the callers responsibility to call
        Delete on the returned object.   If no reader is found, null is
        returned.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRegisteredReaders(self, vtkImageReader2Collection):
        """
        V.GetRegisteredReaders(vtkImageReader2Collection)
        C++: static void GetRegisteredReaders(vtkImageReader2Collection *)
        
        The caller must allocate the vtkImageReader2Collection and pass
        in the pointer to this method.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageReader2Factory
        C++: vtkImageReader2Factory *NewInstance()
        """
        ...
    
    def RegisterReader(self, vtkImageReader2):
        """
        V.RegisterReader(vtkImageReader2)
        C++: static void RegisterReader(vtkImageReader2 *r)
        
        registered readers will be queried in CreateImageReader2 to see
        if they can load a given file.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageReader2Factory
        C++: static vtkImageReader2Factory *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


