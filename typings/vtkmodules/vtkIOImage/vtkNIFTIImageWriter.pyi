"""
This type stub file was generated by pyright.
"""

from .vtkImageWriter import vtkImageWriter

class vtkNIFTIImageWriter(vtkImageWriter):
    """
    vtkNIFTIImageWriter - Write NIfTI-1 and NIfTI-2 medical image files
    
    Superclass: vtkImageWriter
    
    This class writes NIFTI files, either in .nii format or as separate
    .img and .hdr files.  If told to write a file that ends in ".gz",
    then the writer will automatically compress the file with zlib.
    Images of type unsigned char that have 3 or 4 scalar components will
    automatically be written as RGB or RGBA respectively.  Images of type
    float or double that have 2 components will automatically be written
    as complex values.@par Thanks: This class was contributed to VTK by
    the Calgary Image Processing and Analysis Centre (CIPAC).
    @sa
    vtkNIFTIImageReader
    """
    def GetDescription(self):
        """
        V.GetDescription() -> string
        C++: virtual char *GetDescription()
        
        Set a short description (max 80 chars) of how the file was
        produced. The default description is "VTKX.Y" where X.Y is the
        VTK version.
        """
        ...
    
    def GetNIFTIHeader(self):
        """
        V.GetNIFTIHeader() -> vtkNIFTIImageHeader
        C++: vtkNIFTIImageHeader *GetNIFTIHeader()
        
        Set the NIFTI header information to use when writing the file.
        The data dimensions and pixdim from the supplied header will be
        ignored.  Likewise, the QForm and SForm information in the
        supplied header will be ignored if you have called
        SetQFormMatrix() or SetSFormMatrix() to provide the orientation
        information for the file.
        """
        ...
    
    def GetNIFTIVersion(self):
        """
        V.GetNIFTIVersion() -> int
        C++: virtual int GetNIFTIVersion()
        
        Set the version number for the NIfTI file format to use. This can
        be 1, 2, or 0 (the default).  If set to zero, then it will save
        as NIfTI version 1 unless SetNIFTIHeader() provided header
        information from a NIfTI version 2 file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Static method for construction.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Static method for construction.
        """
        ...
    
    def GetPlanarRGB(self):
        """
        V.GetPlanarRGB() -> bool
        C++: virtual bool GetPlanarRGB()
        
        Write planar RGB (separate R, G, and B planes), rather than
        packed RGB. Use this option with extreme caution: the NIFTI
        standard requires RGB pixels to be packed.  The Analyze format,
        however, was used to store both planar RGB and packed RGB
        depending on the software, without any indication in the header
        about which convention was being used.
        """
        ...
    
    def GetQFac(self):
        """
        V.GetQFac() -> float
        C++: virtual double GetQFac()
        
        The QFac sets the ordering of the slices in the NIFTI file. If
        QFac is -1, then the slice ordering in the file will be reversed
        as compared to VTK. Use with caution.
        """
        ...
    
    def GetQFormMatrix(self):
        """
        V.GetQFormMatrix() -> vtkMatrix4x4
        C++: vtkMatrix4x4 *GetQFormMatrix()
        """
        ...
    
    def GetRescaleIntercept(self):
        """
        V.GetRescaleIntercept() -> float
        C++: virtual double GetRescaleIntercept()
        
        Set the slope and intercept for calibrating the scalar values.
        Other programs that read the NIFTI file can use the equation v =
        u*RescaleSlope + RescaleIntercept to rescale the data to real
        values.  If both the slope and the intercept are zero, then the
        SclSlope and SclIntercept in the header info provided via
        SetNIFTIHeader() are used instead.
        """
        ...
    
    def GetRescaleSlope(self):
        """
        V.GetRescaleSlope() -> float
        C++: virtual double GetRescaleSlope()
        
        Set the slope and intercept for calibrating the scalar values.
        Other programs that read the NIFTI file can use the equation v =
        u*RescaleSlope + RescaleIntercept to rescale the data to real
        values.  If both the slope and the intercept are zero, then the
        SclSlope and SclIntercept in the header info provided via
        SetNIFTIHeader() are used instead.
        """
        ...
    
    def GetSFormMatrix(self):
        """
        V.GetSFormMatrix() -> vtkMatrix4x4
        C++: vtkMatrix4x4 *GetSFormMatrix()
        """
        ...
    
    def GetTimeDimension(self):
        """
        V.GetTimeDimension() -> int
        C++: virtual int GetTimeDimension()
        
        Set the time dimension to use in the NIFTI file (or zero if
        none). The number of components of the input data must be
        divisible by the time dimension if the time dimension is not set
        to zero.  The vector dimension will be set to the number of
        components divided by the time dimension.
        """
        ...
    
    def GetTimeSpacing(self):
        """
        V.GetTimeSpacing() -> float
        C++: virtual double GetTimeSpacing()
        
        Set the time dimension to use in the NIFTI file (or zero if
        none). The number of components of the input data must be
        divisible by the time dimension if the time dimension is not set
        to zero.  The vector dimension will be set to the number of
        components divided by the time dimension.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Static method for construction.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Static method for construction.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkNIFTIImageWriter
        C++: vtkNIFTIImageWriter *NewInstance()
        
        Static method for construction.
        """
        ...
    
    def PlanarRGBOff(self):
        """
        V.PlanarRGBOff()
        C++: virtual void PlanarRGBOff()
        
        Write planar RGB (separate R, G, and B planes), rather than
        packed RGB. Use this option with extreme caution: the NIFTI
        standard requires RGB pixels to be packed.  The Analyze format,
        however, was used to store both planar RGB and packed RGB
        depending on the software, without any indication in the header
        about which convention was being used.
        """
        ...
    
    def PlanarRGBOn(self):
        """
        V.PlanarRGBOn()
        C++: virtual void PlanarRGBOn()
        
        Write planar RGB (separate R, G, and B planes), rather than
        packed RGB. Use this option with extreme caution: the NIFTI
        standard requires RGB pixels to be packed.  The Analyze format,
        however, was used to store both planar RGB and packed RGB
        depending on the software, without any indication in the header
        about which convention was being used.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkNIFTIImageWriter
        C++: static vtkNIFTIImageWriter *SafeDownCast(vtkObjectBase *o)
        
        Static method for construction.
        """
        ...
    
    def SetDescription(self, string):
        """
        V.SetDescription(string)
        C++: virtual void SetDescription(const char *_arg)
        
        Set a short description (max 80 chars) of how the file was
        produced. The default description is "VTKX.Y" where X.Y is the
        VTK version.
        """
        ...
    
    def SetNIFTIHeader(self, vtkNIFTIImageHeader):
        """
        V.SetNIFTIHeader(vtkNIFTIImageHeader)
        C++: void SetNIFTIHeader(vtkNIFTIImageHeader *hdr)
        
        Set the NIFTI header information to use when writing the file.
        The data dimensions and pixdim from the supplied header will be
        ignored.  Likewise, the QForm and SForm information in the
        supplied header will be ignored if you have called
        SetQFormMatrix() or SetSFormMatrix() to provide the orientation
        information for the file.
        """
        ...
    
    def SetNIFTIVersion(self, p_int):
        """
        V.SetNIFTIVersion(int)
        C++: virtual void SetNIFTIVersion(int _arg)
        
        Set the version number for the NIfTI file format to use. This can
        be 1, 2, or 0 (the default).  If set to zero, then it will save
        as NIfTI version 1 unless SetNIFTIHeader() provided header
        information from a NIfTI version 2 file.
        """
        ...
    
    def SetPlanarRGB(self, bool):
        """
        V.SetPlanarRGB(bool)
        C++: virtual void SetPlanarRGB(bool _arg)
        
        Write planar RGB (separate R, G, and B planes), rather than
        packed RGB. Use this option with extreme caution: the NIFTI
        standard requires RGB pixels to be packed.  The Analyze format,
        however, was used to store both planar RGB and packed RGB
        depending on the software, without any indication in the header
        about which convention was being used.
        """
        ...
    
    def SetQFac(self, p_float):
        """
        V.SetQFac(float)
        C++: virtual void SetQFac(double _arg)
        
        The QFac sets the ordering of the slices in the NIFTI file. If
        QFac is -1, then the slice ordering in the file will be reversed
        as compared to VTK. Use with caution.
        """
        ...
    
    def SetQFormMatrix(self, vtkMatrix4x4):
        """
        V.SetQFormMatrix(vtkMatrix4x4)
        C++: void SetQFormMatrix(vtkMatrix4x4 *)
        
        Set the "qform" orientation and offset for the image data. The
        3x3 portion of the matrix must be orthonormal and have a positive
        determinant, it will be used to compute the quaternion. The last
        column of the matrix will be used for the offset. In the NIFTI
        header, the qform_code will be set to 1.
        """
        ...
    
    def SetRescaleIntercept(self, p_float):
        """
        V.SetRescaleIntercept(float)
        C++: virtual void SetRescaleIntercept(double _arg)
        
        Set the slope and intercept for calibrating the scalar values.
        Other programs that read the NIFTI file can use the equation v =
        u*RescaleSlope + RescaleIntercept to rescale the data to real
        values.  If both the slope and the intercept are zero, then the
        SclSlope and SclIntercept in the header info provided via
        SetNIFTIHeader() are used instead.
        """
        ...
    
    def SetRescaleSlope(self, p_float):
        """
        V.SetRescaleSlope(float)
        C++: virtual void SetRescaleSlope(double _arg)
        
        Set the slope and intercept for calibrating the scalar values.
        Other programs that read the NIFTI file can use the equation v =
        u*RescaleSlope + RescaleIntercept to rescale the data to real
        values.  If both the slope and the intercept are zero, then the
        SclSlope and SclIntercept in the header info provided via
        SetNIFTIHeader() are used instead.
        """
        ...
    
    def SetSFormMatrix(self, vtkMatrix4x4):
        """
        V.SetSFormMatrix(vtkMatrix4x4)
        C++: void SetSFormMatrix(vtkMatrix4x4 *)
        
        Set a matrix for the "sform" transformation stored in the file.
        Unlike the qform matrix, the sform matrix can contain scaling
        information.  Before being stored in the NIFTI header, the first
        three columns of the matrix will be multiplied by the voxel
        spacing. In the NIFTI header, the sform_code will be set to 2.
        """
        ...
    
    def SetTimeDimension(self, p_int):
        """
        V.SetTimeDimension(int)
        C++: virtual void SetTimeDimension(int _arg)
        
        Set the time dimension to use in the NIFTI file (or zero if
        none). The number of components of the input data must be
        divisible by the time dimension if the time dimension is not set
        to zero.  The vector dimension will be set to the number of
        components divided by the time dimension.
        """
        ...
    
    def SetTimeSpacing(self, p_float):
        """
        V.SetTimeSpacing(float)
        C++: virtual void SetTimeSpacing(double _arg)
        
        Set the time dimension to use in the NIFTI file (or zero if
        none). The number of components of the input data must be
        divisible by the time dimension if the time dimension is not set
        to zero.  The vector dimension will be set to the number of
        components divided by the time dimension.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


