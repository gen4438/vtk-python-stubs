"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkImporter(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkImporter - importer abstract class
    
    Superclass: vtkObject
    
    vtkImporter is an abstract class that specifies the protocol for
    importing actors, cameras, lights and properties into a
    vtkRenderWindow. The following takes place:
    1) Create a RenderWindow and Renderer if none is provided.
    2) Call ImportBegin, if ImportBegin returns False, return
    3) Call ReadData, which calls: a) Import the Actors b) Import the
       cameras c) Import the lights d) Import the Properties
    7) Call ImportEnd
    
    Subclasses optionally implement the ImportActors, ImportCameras,
    ImportLights and ImportProperties or ReadData methods. An ImportBegin
    and ImportEnd can optionally be provided to perform Importer-specific
    initialization and termination.  The Read method initiates the import
    process. If a RenderWindow is provided, its Renderer will contained
    the imported objects. If the RenderWindow has no Renderer, one is
    created. If no RenderWindow is provided, both a RenderWindow and
    Renderer will be created. Both the RenderWindow and Renderer can be
    accessed using Get methods.
    
    @sa
    vtk3DSImporter vtkExporter
    """
    def DisableAnimation(self, p_int):
        """
        V.DisableAnimation(int)
        C++: virtual void DisableAnimation(vtkIdType animationIndex)
        
        Enable/Disable/Get the status of specific animations
        """
        ...
    
    def EnableAnimation(self, p_int):
        """
        V.EnableAnimation(int)
        C++: virtual void EnableAnimation(vtkIdType animationIndex)
        
        Enable/Disable/Get the status of specific animations
        """
        ...
    
    def GetAnimationName(self, p_int):
        """
        V.GetAnimationName(int) -> string
        C++: virtual std::string GetAnimationName(
            vtkIdType animationIndex)
        
        Get the name of an animation. Return an empty if not provided by
        implementation.
        """
        ...
    
    def GetNumberOfAnimations(self):
        """
        V.GetNumberOfAnimations() -> int
        C++: virtual vtkIdType GetNumberOfAnimations()
        
        Get the number of available animations. Return -1 if not provided
        by implementation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputsDescription(self):
        """
        V.GetOutputsDescription() -> string
        C++: virtual std::string GetOutputsDescription()
        
        Recover a printable string that let importer implementation
        Describe their outputs.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        Get the renderer that contains the imported actors, cameras and
        lights.
        """
        ...
    
    def GetRenderWindow(self):
        """
        V.GetRenderWindow() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetRenderWindow()
        
        Set the vtkRenderWindow to contain the imported actors, cameras
        and lights, If no vtkRenderWindow is set, one will be created and
        can be obtained with the GetRenderWindow method. If the
        vtkRenderWindow has been specified, the first vtkRenderer it has
        will be used to import the objects. If the vtkRenderWindow has no
        Renderer, one will be created and can be accessed using
        GetRenderer.
        """
        ...
    
    def GetTemporalInformation(self, p_int, p_int_1, p_float=..., p_float=..., *args, **kwargs):
        """
        V.GetTemporalInformation(int, int, [float, float], vtkDoubleArray)
             -> bool
        C++: virtual bool GetTemporalInformation(vtkIdType animationIndex,
             int &nbTimeSteps, double timeRange[2],
            vtkDoubleArray *timeSteps)
        
        Get temporal informations for the currently enabled animations.
        the three return arguments can be defined or not. Return true in
        case of success, false otherwise.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsAnimationEnabled(self, p_int):
        """
        V.IsAnimationEnabled(int) -> bool
        C++: virtual bool IsAnimationEnabled(vtkIdType animationIndex)
        
        Enable/Disable/Get the status of specific animations
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImporter
        C++: vtkImporter *NewInstance()
        """
        ...
    
    def Read(self):
        """
        V.Read()
        C++: void Read()
        
        Import the actors, cameras, lights and properties into a
        vtkRenderWindow.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImporter
        C++: static vtkImporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetRenderWindow(self, vtkRenderWindow):
        """
        V.SetRenderWindow(vtkRenderWindow)
        C++: virtual void SetRenderWindow(vtkRenderWindow *)
        
        Set the vtkRenderWindow to contain the imported actors, cameras
        and lights, If no vtkRenderWindow is set, one will be created and
        can be obtained with the GetRenderWindow method. If the
        vtkRenderWindow has been specified, the first vtkRenderer it has
        will be used to import the objects. If the vtkRenderWindow has no
        Renderer, one will be created and can be accessed using
        GetRenderer.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update()
        
        Import the actors, cameras, lights and properties into a
        vtkRenderWindow.
        """
        ...
    
    def UpdateTimeStep(self, p_float):
        """
        V.UpdateTimeStep(float)
        C++: virtual void UpdateTimeStep(double timeStep)
        
        Import the actors, camera, lights and properties at a specific
        timestep. If not reimplemented, only call Update().
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtk3DSImporter(vtkImporter):
    """
    vtk3DSImporter - imports 3D Studio files.
    
    Superclass: vtkImporter
    
    vtk3DSImporter imports 3D Studio files into vtk.
    
    @sa
    vtkImporter
    """
    def ComputeNormalsOff(self):
        """
        V.ComputeNormalsOff()
        C++: virtual void ComputeNormalsOff()
        
        Set/Get the computation of normals. If on, imported geometry will
        be run through vtkPolyDataNormals.
        """
        ...
    
    def ComputeNormalsOn(self):
        """
        V.ComputeNormalsOn()
        C++: virtual void ComputeNormalsOn()
        
        Set/Get the computation of normals. If on, imported geometry will
        be run through vtkPolyDataNormals.
        """
        ...
    
    def GetComputeNormals(self):
        """
        V.GetComputeNormals() -> int
        C++: virtual vtkTypeBool GetComputeNormals()
        
        Set/Get the computation of normals. If on, imported geometry will
        be run through vtkPolyDataNormals.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the name of the file to read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputsDescription(self):
        """
        V.GetOutputsDescription() -> string
        C++: std::string GetOutputsDescription() override;
        
        Get a printable string describing the outputs
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtk3DSImporter
        C++: vtk3DSImporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtk3DSImporter
        C++: static vtk3DSImporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComputeNormals(self, p_int):
        """
        V.SetComputeNormals(int)
        C++: virtual void SetComputeNormals(vtkTypeBool _arg)
        
        Set/Get the computation of normals. If on, imported geometry will
        be run through vtkPolyDataNormals.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the name of the file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGLTFImporter(vtkImporter):
    """
    vtkGLTFImporter - Import a GLTF file.
    
    Superclass: vtkImporter
    
    vtkGLTFImporter is a concrete subclass of vtkImporter that reads glTF
    2.0 files.
    
    The GL Transmission Format (glTF) is an API-neutral runtime asset
    delivery format. A glTF asset is represented by:
    - A JSON-formatted file (.gltf) containing a full scene description:
      node hierarchy, materials, cameras, as well as descriptor
      information for meshes, animations, and other constructs
    - Binary files (.bin) containing geometry and animation data, and
      other buffer-based data
    - Image files (.jpg, .png) for textures
    
    This importer supports all physically-based rendering material
    features, with the exception of alpha masking and mirrored texture
    wrapping, which are not supported.
    
    This importer does not support materials that use multiple sets of
    texture coordinates. Only the first set will be used in this case.
    
    This importer does not support animations, morphing and skinning. If
    you would like to use animations, morphing or skinning, please
    consider using vtkGLTFReader.
    
    This importer only supports assets that use the 2.x version of the
    glTF specification.
    
    For the full glTF specification, see:
    https://github.com/KhronosGroup/glTF/tree/master/specification/2.0
    
    Note: array sizes should not exceed INT_MAX
    
    Supported extensions:
    - KHR_lights_punctual : The importer supports the KHR_lights_punctual
    extension except for this feature:
    - VTK does not support changing the falloff of the cone with
      innerConeAngle and outerConeAngle. The importer uses outerConeAngle
    and ignores innerConeAngle as specified for this situation.
    
    @sa
    vtkImporter vtkGLTFReader
    """
    def GetCamera(self, p_int):
        """
        V.GetCamera(int) -> vtkSmartPointer_I9vtkCameraE
        C++: vtkSmartPointer<vtkCamera> GetCamera(unsigned int id)
        
        glTF defines multiple camera objects, but no default behavior for
        which camera should be used. The importer will by default apply
        the asset's first camera. This accessor lets you use the asset's
        other cameras.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the name of the file to read.
        """
        ...
    
    def GetNumberOfCameras(self):
        """
        V.GetNumberOfCameras() -> int
        C++: size_t GetNumberOfCameras()
        
        Get the total number of cameras
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputsDescription(self):
        """
        V.GetOutputsDescription() -> string
        C++: std::string GetOutputsDescription() override;
        
        Get a printable string describing all outputs
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGLTFImporter
        C++: vtkGLTFImporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGLTFImporter
        C++: static vtkGLTFImporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the name of the file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOBJImporter(vtkImporter):
    """
    vtkOBJImporter - import from .obj wavefront files
    
    Superclass: vtkImporter
    
    from Wavefront .obj & associated .mtl files.@par Thanks - Peter
    Karasev (Georgia Tech / Keysight Technologies Inc),:
                      Allen Tannenbaum (SUNY Stonybrook), Patricio Vela
    (Georgia Tech)
    @sa
     vtkImporter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: const char *GetFileName()
        
        Specify the name of the file to read.
        """
        ...
    
    def GetFileNameMTL(self):
        """
        V.GetFileNameMTL() -> string
        C++: const char *GetFileNameMTL()
        
        Specify the name of the file to read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputDescription(self, p_int):
        """
        V.GetOutputDescription(int) -> string
        C++: std::string GetOutputDescription(int idx)
        
        Get a string describing an output
        """
        ...
    
    def GetOutputsDescription(self):
        """
        V.GetOutputsDescription() -> string
        C++: std::string GetOutputsDescription() override;
        
        Get a printable string describing all outputs
        """
        ...
    
    def GetTexturePath(self):
        """
        V.GetTexturePath() -> string
        C++: const char *GetTexturePath()
        
        Specify the name of the file to read.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOBJImporter
        C++: vtkOBJImporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOBJImporter
        C++: static vtkOBJImporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *arg)
        
        Specify the name of the file to read.
        """
        ...
    
    def SetFileNameMTL(self, string):
        """
        V.SetFileNameMTL(string)
        C++: void SetFileNameMTL(const char *arg)
        
        Specify the name of the file to read.
        """
        ...
    
    def SetTexturePath(self, string):
        """
        V.SetTexturePath(string)
        C++: void SetTexturePath(const char *path)
        
        Specify the name of the file to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkVRMLImporter(vtkImporter):
    """
    vtkVRMLImporter - imports VRML 2.0 files.
    
    Superclass: vtkImporter
    
    vtkVRMLImporter imports VRML 2.0 files into VTK.
    
    @warning
    These nodes are currently supported:
         Appearance                              IndexedFaceSet
         Box                                     IndexedLineSet
         Color                                   Material
         Cone                                    Shape
         Coordinate                              Sphere
         Cylinder                                Transform
         DirectionalLight
    
    @warning
    As you can see this implementation focuses on getting the geometry
    translated.  The routes and scripting nodes are ignored since they
    deal with directly accessing a nodes internal structure based on the
    VRML spec. Since this is a translation the internal data structures
    differ greatly from the VRML spec and the External Authoring
    Interface (see the VRML spec). The DEF/USE mechanism does allow the
    VTK user to extract objects from the scene and directly manipulate
    them using the native language (Python, Java, or whatever language
    VTK is wrapped in). This, in a way, removes the need for the route
    and script mechanism (not completely though). Texture coordinates are
    attached to the mesh is available but image textures are not loaded.
    Viewpoints (camera presets) are not imported.
    
    @par Thanks:
     Thanks to Russ Coucher of Areva for numerous bug fixes and a new
    test.
    
    @sa
    vtkImporter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify the name of the file to read.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputsDescription(self):
        """
        V.GetOutputsDescription() -> string
        C++: std::string GetOutputsDescription() override;
        
        Get a printable string describing the outputs
        """
        ...
    
    def GetShapeResolution(self):
        """
        V.GetShapeResolution() -> int
        C++: virtual int GetShapeResolution()
        
        Specify the resolution for Sphere, Cone and Cylinder shape
        sources. Default is 12.
        """
        ...
    
    def GetVRMLDEFObject(self, string):
        """
        V.GetVRMLDEFObject(string) -> vtkObject
        C++: vtkObject *GetVRMLDEFObject(const char *name)
        
        In the VRML spec you can DEF and USE nodes (name them), This
        routine will return the associated VTK object which was created
        as a result of the DEF mechanism Send in the name from the VRML
        file, get the VTK object. You will have to check and correctly
        cast the object since this only returns vtkObjects.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVRMLImporter
        C++: vtkVRMLImporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVRMLImporter
        C++: static vtkVRMLImporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify the name of the file to read.
        """
        ...
    
    def SetShapeResolution(self, p_int):
        """
        V.SetShapeResolution(int)
        C++: virtual void SetShapeResolution(int _arg)
        
        Specify the resolution for Sphere, Cone and Cylinder shape
        sources. Default is 12.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
