"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExtractTensorComponents(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkExtractTensorComponents - extract parts of tensor and create a
    scalar, vector, normal, or texture coordinates.
    
    Superclass: vtkDataSetAlgorithm
    
    vtkExtractTensorComponents is a filter that extracts components of a
    tensor to create a scalar, vector, normal, or texture coords. For
    example, if the tensor contains components of stress, then you could
    extract the normal stress in the x-direction as a scalar (i.e.,
    tensor component (0,0).
    
    To use this filter, you must set some boolean flags to control which
    data is extracted from the tensors, and whether you want to pass the
    tensor data through to the output. Also, you must specify the tensor
    component(s) for each type of data you want to extract. The tensor
    component(s) is(are) specified using matrix notation into a 3x3
    matrix. That is, use the (row,column) address to specify a particular
    tensor component; and if the data you are extracting requires more
    than one component, use a list of addresses. (Note that the addresses
    are 0-offset -> (0,0) specifies upper left corner of the tensor.)
    
    There are two optional methods to extract scalar data. You can
    extract the determinant of the tensor, or you can extract the
    effective stress of the tensor. These require that the ivar
    ExtractScalars is on, and the appropriate scalar extraction mode is
    set.
    """
    def ExtractNormalsOff(self):
        """
        V.ExtractNormalsOff()
        C++: virtual void ExtractNormalsOff()
        
        Boolean controls whether normal data is extracted from tensor.
        """
        ...
    
    def ExtractNormalsOn(self):
        """
        V.ExtractNormalsOn()
        C++: virtual void ExtractNormalsOn()
        
        Boolean controls whether normal data is extracted from tensor.
        """
        ...
    
    def ExtractScalarsOff(self):
        """
        V.ExtractScalarsOff()
        C++: virtual void ExtractScalarsOff()
        
        Boolean controls whether scalar data is extracted from tensor.
        """
        ...
    
    def ExtractScalarsOn(self):
        """
        V.ExtractScalarsOn()
        C++: virtual void ExtractScalarsOn()
        
        Boolean controls whether scalar data is extracted from tensor.
        """
        ...
    
    def ExtractTCoordsOff(self):
        """
        V.ExtractTCoordsOff()
        C++: virtual void ExtractTCoordsOff()
        
        Boolean controls whether texture coordinates are extracted from
        tensor.
        """
        ...
    
    def ExtractTCoordsOn(self):
        """
        V.ExtractTCoordsOn()
        C++: virtual void ExtractTCoordsOn()
        
        Boolean controls whether texture coordinates are extracted from
        tensor.
        """
        ...
    
    def ExtractVectorsOff(self):
        """
        V.ExtractVectorsOff()
        C++: virtual void ExtractVectorsOff()
        
        Boolean controls whether vector data is extracted from tensor.
        """
        ...
    
    def ExtractVectorsOn(self):
        """
        V.ExtractVectorsOn()
        C++: virtual void ExtractVectorsOn()
        
        Boolean controls whether vector data is extracted from tensor.
        """
        ...
    
    def GetExtractNormals(self):
        """
        V.GetExtractNormals() -> int
        C++: virtual vtkTypeBool GetExtractNormals()
        
        Boolean controls whether normal data is extracted from tensor.
        """
        ...
    
    def GetExtractScalars(self):
        """
        V.GetExtractScalars() -> int
        C++: virtual vtkTypeBool GetExtractScalars()
        
        Boolean controls whether scalar data is extracted from tensor.
        """
        ...
    
    def GetExtractTCoords(self):
        """
        V.GetExtractTCoords() -> int
        C++: virtual vtkTypeBool GetExtractTCoords()
        
        Boolean controls whether texture coordinates are extracted from
        tensor.
        """
        ...
    
    def GetExtractVectors(self):
        """
        V.GetExtractVectors() -> int
        C++: virtual vtkTypeBool GetExtractVectors()
        
        Boolean controls whether vector data is extracted from tensor.
        """
        ...
    
    def GetNormalComponents(self):
        """
        V.GetNormalComponents() -> (int, int, int, int, int, int)
        C++: virtual int *GetNormalComponents()
        
        Specify the ((row,column)0,(row,column)1,(row,column)2) tensor
        components to extract as a vector.
        """
        ...
    
    def GetNormalizeNormals(self):
        """
        V.GetNormalizeNormals() -> int
        C++: virtual vtkTypeBool GetNormalizeNormals()
        
        Boolean controls whether normal vector is converted to unit
        normal after extraction.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTCoords(self):
        """
        V.GetNumberOfTCoords() -> int
        C++: virtual int GetNumberOfTCoords()
        
        Set the dimension of the texture coordinates to extract.
        """
        ...
    
    def GetNumberOfTCoordsMaxValue(self):
        """
        V.GetNumberOfTCoordsMaxValue() -> int
        C++: virtual int GetNumberOfTCoordsMaxValue()
        
        Set the dimension of the texture coordinates to extract.
        """
        ...
    
    def GetNumberOfTCoordsMinValue(self):
        """
        V.GetNumberOfTCoordsMinValue() -> int
        C++: virtual int GetNumberOfTCoordsMinValue()
        
        Set the dimension of the texture coordinates to extract.
        """
        ...
    
    def GetPassTensorsToOutput(self):
        """
        V.GetPassTensorsToOutput() -> int
        C++: virtual vtkTypeBool GetPassTensorsToOutput()
        
        Boolean controls whether tensor data is passed through to output.
        """
        ...
    
    def GetScalarComponents(self):
        """
        V.GetScalarComponents() -> (int, int)
        C++: virtual int *GetScalarComponents()
        
        Specify the (row,column) tensor component to extract as a scalar.
        """
        ...
    
    def GetScalarMode(self):
        """
        V.GetScalarMode() -> int
        C++: virtual int GetScalarMode()
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def GetTCoordComponents(self):
        """
        V.GetTCoordComponents() -> (int, int, int, int, int, int)
        C++: virtual int *GetTCoordComponents()
        
        Specify the ((row,column)0,(row,column)1,(row,column)2) tensor
        components to extract as a vector. Up to NumberOfTCoords
        components are extracted.
        """
        ...
    
    def GetVectorComponents(self):
        """
        V.GetVectorComponents() -> (int, int, int, int, int, int)
        C++: virtual int *GetVectorComponents()
        
        Specify the ((row,column)0,(row,column)1,(row,column)2) tensor
        components to extract as a vector.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractTensorComponents
        C++: vtkExtractTensorComponents *NewInstance()
        """
        ...
    
    def NormalizeNormalsOff(self):
        """
        V.NormalizeNormalsOff()
        C++: virtual void NormalizeNormalsOff()
        
        Boolean controls whether normal vector is converted to unit
        normal after extraction.
        """
        ...
    
    def NormalizeNormalsOn(self):
        """
        V.NormalizeNormalsOn()
        C++: virtual void NormalizeNormalsOn()
        
        Boolean controls whether normal vector is converted to unit
        normal after extraction.
        """
        ...
    
    def PassTensorsToOutputOff(self):
        """
        V.PassTensorsToOutputOff()
        C++: virtual void PassTensorsToOutputOff()
        
        Boolean controls whether tensor data is passed through to output.
        """
        ...
    
    def PassTensorsToOutputOn(self):
        """
        V.PassTensorsToOutputOn()
        C++: virtual void PassTensorsToOutputOn()
        
        Boolean controls whether tensor data is passed through to output.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractTensorComponents
        C++: static vtkExtractTensorComponents *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def ScalarIsComponent(self):
        """
        V.ScalarIsComponent()
        C++: void ScalarIsComponent()
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def ScalarIsDeterminant(self):
        """
        V.ScalarIsDeterminant()
        C++: void ScalarIsDeterminant()
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def ScalarIsEffectiveStress(self):
        """
        V.ScalarIsEffectiveStress()
        C++: void ScalarIsEffectiveStress()
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def SetExtractNormals(self, p_int):
        """
        V.SetExtractNormals(int)
        C++: virtual void SetExtractNormals(vtkTypeBool _arg)
        
        Boolean controls whether normal data is extracted from tensor.
        """
        ...
    
    def SetExtractScalars(self, p_int):
        """
        V.SetExtractScalars(int)
        C++: virtual void SetExtractScalars(vtkTypeBool _arg)
        
        Boolean controls whether scalar data is extracted from tensor.
        """
        ...
    
    def SetExtractTCoords(self, p_int):
        """
        V.SetExtractTCoords(int)
        C++: virtual void SetExtractTCoords(vtkTypeBool _arg)
        
        Boolean controls whether texture coordinates are extracted from
        tensor.
        """
        ...
    
    def SetExtractVectors(self, p_int):
        """
        V.SetExtractVectors(int)
        C++: virtual void SetExtractVectors(vtkTypeBool _arg)
        
        Boolean controls whether vector data is extracted from tensor.
        """
        ...
    
    def SetNormalComponents(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetNormalComponents(int, int, int, int, int, int)
        C++: virtual void SetNormalComponents(int _arg1, int _arg2,
            int _arg3, int _arg4, int _arg5, int _arg6)
        V.SetNormalComponents((int, int, int, int, int, int))
        C++: virtual void SetNormalComponents(const int _arg[6])
        
        Specify the ((row,column)0,(row,column)1,(row,column)2) tensor
        components to extract as a vector.
        """
        ...
    
    def SetNormalizeNormals(self, p_int):
        """
        V.SetNormalizeNormals(int)
        C++: virtual void SetNormalizeNormals(vtkTypeBool _arg)
        
        Boolean controls whether normal vector is converted to unit
        normal after extraction.
        """
        ...
    
    def SetNumberOfTCoords(self, p_int):
        """
        V.SetNumberOfTCoords(int)
        C++: virtual void SetNumberOfTCoords(int _arg)
        
        Set the dimension of the texture coordinates to extract.
        """
        ...
    
    def SetPassTensorsToOutput(self, p_int):
        """
        V.SetPassTensorsToOutput(int)
        C++: virtual void SetPassTensorsToOutput(vtkTypeBool _arg)
        
        Boolean controls whether tensor data is passed through to output.
        """
        ...
    
    def SetScalarComponents(self, p_int, p_int_1):
        """
        V.SetScalarComponents(int, int)
        C++: virtual void SetScalarComponents(int _arg1, int _arg2)
        V.SetScalarComponents((int, int))
        C++: void SetScalarComponents(const int _arg[2])
        
        Specify the (row,column) tensor component to extract as a scalar.
        """
        ...
    
    def SetScalarMode(self, p_int):
        """
        V.SetScalarMode(int)
        C++: virtual void SetScalarMode(int _arg)
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def SetScalarModeToComponent(self):
        """
        V.SetScalarModeToComponent()
        C++: void SetScalarModeToComponent()
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def SetScalarModeToDeterminant(self):
        """
        V.SetScalarModeToDeterminant()
        C++: void SetScalarModeToDeterminant()
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def SetScalarModeToEffectiveStress(self):
        """
        V.SetScalarModeToEffectiveStress()
        C++: void SetScalarModeToEffectiveStress()
        
        Specify how to extract the scalar. You can extract it as one of
        the components of the tensor, as effective stress, or as the
        determinant of the tensor. If you extract a component make sure
        that you set the ScalarComponents ivar.
        """
        ...
    
    def SetTCoordComponents(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetTCoordComponents(int, int, int, int, int, int)
        C++: virtual void SetTCoordComponents(int _arg1, int _arg2,
            int _arg3, int _arg4, int _arg5, int _arg6)
        V.SetTCoordComponents((int, int, int, int, int, int))
        C++: virtual void SetTCoordComponents(const int _arg[6])
        
        Specify the ((row,column)0,(row,column)1,(row,column)2) tensor
        components to extract as a vector. Up to NumberOfTCoords
        components are extracted.
        """
        ...
    
    def SetVectorComponents(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetVectorComponents(int, int, int, int, int, int)
        C++: virtual void SetVectorComponents(int _arg1, int _arg2,
            int _arg3, int _arg4, int _arg5, int _arg6)
        V.SetVectorComponents((int, int, int, int, int, int))
        C++: virtual void SetVectorComponents(const int _arg[6])
        
        Specify the ((row,column)0,(row,column)1,(row,column)2) tensor
        components to extract as a vector.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


