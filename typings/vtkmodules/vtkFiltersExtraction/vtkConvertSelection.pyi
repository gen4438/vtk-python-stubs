"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkConvertSelection(__vtkmodules_vtkCommonExecutionModel.vtkSelectionAlgorithm):
    """
    vtkConvertSelection - Convert a selection from one type to another
    
    Superclass: vtkSelectionAlgorithm
    
    vtkConvertSelection converts an input selection from one type to
    another in the context of a data object being selected. The first
    input is the selection, while the second input is the data object
    that the selection relates to.
    
    @sa
    vtkSelection vtkSelectionNode vtkExtractSelection
    vtkExtractSelectedGraph
    """
    def AddArrayName(self, string):
        """
        V.AddArrayName(string)
        C++: void AddArrayName(const char *)
        
        Convenience methods used by UI
        """
        ...
    
    def AllowMissingArrayOff(self):
        """
        V.AllowMissingArrayOff()
        C++: virtual void AllowMissingArrayOff()
        
        When enabled, not finding expected array will not return an
        error. Defaults to OFF.
        """
        ...
    
    def AllowMissingArrayOn(self):
        """
        V.AllowMissingArrayOn()
        C++: virtual void AllowMissingArrayOn()
        
        When enabled, not finding expected array will not return an
        error. Defaults to OFF.
        """
        ...
    
    def ClearArrayNames(self):
        """
        V.ClearArrayNames()
        C++: void ClearArrayNames()
        
        Convenience methods used by UI
        """
        ...
    
    def GetAllowMissingArray(self):
        """
        V.GetAllowMissingArray() -> bool
        C++: virtual bool GetAllowMissingArray()
        
        When enabled, not finding expected array will not return an
        error. Defaults to OFF.
        """
        ...
    
    def GetArrayName(self):
        """
        V.GetArrayName() -> string
        C++: virtual const char *GetArrayName()
        
        The output array name for value or threshold selections.
        """
        ...
    
    def GetArrayNames(self):
        """
        V.GetArrayNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetArrayNames()
        
        The output array names for value selection.
        """
        ...
    
    def GetInputFieldType(self):
        """
        V.GetInputFieldType() -> int
        C++: virtual int GetInputFieldType()
        
        The input field type. If this is set to a number other than -1,
        ignores the input selection field type and instead assumes that
        all selection nodes have the field type specified. This should be
        one of the constants defined in vtkSelectionNode.h. Default is
        -1.
        """
        ...
    
    def GetMatchAnyValues(self):
        """
        V.GetMatchAnyValues() -> bool
        C++: virtual bool GetMatchAnyValues()
        
        When on, creates a separate selection node for each array.
        Defaults to OFF.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputType(self):
        """
        V.GetOutputType() -> int
        C++: virtual int GetOutputType()
        
        The output selection content type. This should be one of the
        constants defined in vtkSelectionNode.h.
        """
        ...
    
    def GetSelectedCells(self, vtkSelection, vtkDataSet, vtkIdTypeArray):
        """
        V.GetSelectedCells(vtkSelection, vtkDataSet, vtkIdTypeArray)
        C++: static void GetSelectedCells(vtkSelection *input,
            vtkDataSet *data, vtkIdTypeArray *indices)
        
        Static methods for easily obtaining selected items from a data
        object. The array argument will be filled with the selected
        items.
        """
        ...
    
    def GetSelectedEdges(self, vtkSelection, vtkGraph, vtkIdTypeArray):
        """
        V.GetSelectedEdges(vtkSelection, vtkGraph, vtkIdTypeArray)
        C++: static void GetSelectedEdges(vtkSelection *input,
            vtkGraph *data, vtkIdTypeArray *indices)
        
        Static methods for easily obtaining selected items from a data
        object. The array argument will be filled with the selected
        items.
        """
        ...
    
    def GetSelectedItems(self, vtkSelection, vtkDataObject, p_int, vtkIdTypeArray):
        """
        V.GetSelectedItems(vtkSelection, vtkDataObject, int,
            vtkIdTypeArray)
        C++: static void GetSelectedItems(vtkSelection *input,
            vtkDataObject *data, int fieldType, vtkIdTypeArray *indices)
        
        Static generic method for obtaining selected items from a data
        object. Other static methods (e.g. GetSelectedVertices) call this
        one.
        """
        ...
    
    def GetSelectedPoints(self, vtkSelection, vtkDataSet, vtkIdTypeArray):
        """
        V.GetSelectedPoints(vtkSelection, vtkDataSet, vtkIdTypeArray)
        C++: static void GetSelectedPoints(vtkSelection *input,
            vtkDataSet *data, vtkIdTypeArray *indices)
        
        Static methods for easily obtaining selected items from a data
        object. The array argument will be filled with the selected
        items.
        """
        ...
    
    def GetSelectedRows(self, vtkSelection, vtkTable, vtkIdTypeArray):
        """
        V.GetSelectedRows(vtkSelection, vtkTable, vtkIdTypeArray)
        C++: static void GetSelectedRows(vtkSelection *input,
            vtkTable *data, vtkIdTypeArray *indices)
        
        Static methods for easily obtaining selected items from a data
        object. The array argument will be filled with the selected
        items.
        """
        ...
    
    def GetSelectedVertices(self, vtkSelection, vtkGraph, vtkIdTypeArray):
        """
        V.GetSelectedVertices(vtkSelection, vtkGraph, vtkIdTypeArray)
        C++: static void GetSelectedVertices(vtkSelection *input,
            vtkGraph *data, vtkIdTypeArray *indices)
        
        Static methods for easily obtaining selected items from a data
        object. The array argument will be filled with the selected
        items.
        """
        ...
    
    def GetSelectionExtractor(self):
        """
        V.GetSelectionExtractor() -> vtkExtractSelection
        C++: virtual vtkExtractSelection *GetSelectionExtractor()
        
        Set/get a selection extractor used in some conversions to obtain
        IDs.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MatchAnyValuesOff(self):
        """
        V.MatchAnyValuesOff()
        C++: virtual void MatchAnyValuesOff()
        
        When on, creates a separate selection node for each array.
        Defaults to OFF.
        """
        ...
    
    def MatchAnyValuesOn(self):
        """
        V.MatchAnyValuesOn()
        C++: virtual void MatchAnyValuesOn()
        
        When on, creates a separate selection node for each array.
        Defaults to OFF.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkConvertSelection
        C++: vtkConvertSelection *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkConvertSelection
        C++: static vtkConvertSelection *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllowMissingArray(self, bool):
        """
        V.SetAllowMissingArray(bool)
        C++: virtual void SetAllowMissingArray(bool _arg)
        
        When enabled, not finding expected array will not return an
        error. Defaults to OFF.
        """
        ...
    
    def SetArrayName(self, string):
        """
        V.SetArrayName(string)
        C++: virtual void SetArrayName(const char *)
        
        The output array name for value or threshold selections.
        """
        ...
    
    def SetArrayNames(self, vtkStringArray):
        """
        V.SetArrayNames(vtkStringArray)
        C++: virtual void SetArrayNames(vtkStringArray *)
        
        The output array names for value selection.
        """
        ...
    
    def SetDataObjectConnection(self, vtkAlgorithmOutput):
        """
        V.SetDataObjectConnection(vtkAlgorithmOutput)
        C++: void SetDataObjectConnection(vtkAlgorithmOutput *in)
        
        A convenience method for setting the second input (i.e. the data
        object).
        """
        ...
    
    def SetInputFieldType(self, p_int):
        """
        V.SetInputFieldType(int)
        C++: virtual void SetInputFieldType(int _arg)
        
        The input field type. If this is set to a number other than -1,
        ignores the input selection field type and instead assumes that
        all selection nodes have the field type specified. This should be
        one of the constants defined in vtkSelectionNode.h. Default is
        -1.
        """
        ...
    
    def SetMatchAnyValues(self, bool):
        """
        V.SetMatchAnyValues(bool)
        C++: virtual void SetMatchAnyValues(bool _arg)
        
        When on, creates a separate selection node for each array.
        Defaults to OFF.
        """
        ...
    
    def SetOutputType(self, p_int):
        """
        V.SetOutputType(int)
        C++: virtual void SetOutputType(int _arg)
        
        The output selection content type. This should be one of the
        constants defined in vtkSelectionNode.h.
        """
        ...
    
    def SetSelectionExtractor(self, vtkExtractSelection):
        """
        V.SetSelectionExtractor(vtkExtractSelection)
        C++: virtual void SetSelectionExtractor(vtkExtractSelection *)
        
        Set/get a selection extractor used in some conversions to obtain
        IDs.
        """
        ...
    
    def ToGlobalIdSelection(self, vtkSelection, vtkDataObject):
        """
        V.ToGlobalIdSelection(vtkSelection, vtkDataObject) -> vtkSelection
        C++: static vtkSelection *ToGlobalIdSelection(vtkSelection *input,
             vtkDataObject *data)
        
        Static methods for easily converting between selection types.
        NOTE: The returned selection pointer IS reference counted, so be
        sure to Delete() it when you are done with it.
        """
        ...
    
    def ToIndexSelection(self, vtkSelection, vtkDataObject):
        """
        V.ToIndexSelection(vtkSelection, vtkDataObject) -> vtkSelection
        C++: static vtkSelection *ToIndexSelection(vtkSelection *input,
            vtkDataObject *data)
        
        Static methods for easily converting between selection types.
        NOTE: The returned selection pointer IS reference counted, so be
        sure to Delete() it when you are done with it.
        """
        ...
    
    def ToPedigreeIdSelection(self, vtkSelection, vtkDataObject):
        """
        V.ToPedigreeIdSelection(vtkSelection, vtkDataObject)
            -> vtkSelection
        C++: static vtkSelection *ToPedigreeIdSelection(
            vtkSelection *input, vtkDataObject *data)
        
        Static methods for easily converting between selection types.
        NOTE: The returned selection pointer IS reference counted, so be
        sure to Delete() it when you are done with it.
        """
        ...
    
    def ToSelectionType(self, vtkSelection, vtkDataObject, p_int, vtkStringArray, p_int_1, bool):
        """
        V.ToSelectionType(vtkSelection, vtkDataObject, int,
            vtkStringArray, int, bool) -> vtkSelection
        C++: static vtkSelection *ToSelectionType(vtkSelection *input,
            vtkDataObject *data, int type,
            vtkStringArray *arrayNames=nullptr, int inputFieldType=-1,
            bool allowMissingArray=false)
        
        A generic static method for converting selection types. The type
        should be an integer constant defined in vtkSelectionNode.h.
        """
        ...
    
    def ToValueSelection(self, vtkSelection, vtkDataObject, string):
        """
        V.ToValueSelection(vtkSelection, vtkDataObject, string)
            -> vtkSelection
        C++: static vtkSelection *ToValueSelection(vtkSelection *input,
            vtkDataObject *data, const char *arrayName)
        V.ToValueSelection(vtkSelection, vtkDataObject, vtkStringArray)
            -> vtkSelection
        C++: static vtkSelection *ToValueSelection(vtkSelection *input,
            vtkDataObject *data, vtkStringArray *arrayNames)
        
        Static methods for easily converting between selection types.
        NOTE: The returned selection pointer IS reference counted, so be
        sure to Delete() it when you are done with it.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


