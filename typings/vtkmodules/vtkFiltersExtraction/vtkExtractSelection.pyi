"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExtractSelection(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkExtractSelection - extract a subset from a vtkDataSet.
    
    Superclass: vtkDataObjectAlgorithm
    
    vtkExtractSelection extracts some subset of cells and points from its
    input dataobject. The dataobject is given on its first input port.
    The subset is described by the contents of the vtkSelection on its
    second input port.  Depending on the contents of the vtkSelection
    this will create various vtkSelectors to identify the selected
    elements.
    
    This filter supports vtkCompositeDataSet (output is
    vtkMultiBlockDataSet), vtkTable and vtkDataSet (output is
    vtkUnstructuredGrid). Other types of input are not processed and the
    corresponding output is a default constructed object of the input
    type.
    
    @sa
    vtkSelection vtkSelector vtkSelectionNode
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPreserveTopology(self):
        """
        V.GetPreserveTopology() -> bool
        C++: virtual bool GetPreserveTopology()
        
        This flag tells the extraction filter not to extract a subset of
        the data, but instead to produce a vtkInsidedness array and add
        it to the input dataset. Default value is false(0).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractSelection
        C++: vtkExtractSelection *NewInstance()
        """
        ...
    
    def PreserveTopologyOff(self):
        """
        V.PreserveTopologyOff()
        C++: virtual void PreserveTopologyOff()
        
        This flag tells the extraction filter not to extract a subset of
        the data, but instead to produce a vtkInsidedness array and add
        it to the input dataset. Default value is false(0).
        """
        ...
    
    def PreserveTopologyOn(self):
        """
        V.PreserveTopologyOn()
        C++: virtual void PreserveTopologyOn()
        
        This flag tells the extraction filter not to extract a subset of
        the data, but instead to produce a vtkInsidedness array and add
        it to the input dataset. Default value is false(0).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractSelection
        C++: static vtkExtractSelection *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPreserveTopology(self, bool):
        """
        V.SetPreserveTopology(bool)
        C++: virtual void SetPreserveTopology(bool _arg)
        
        This flag tells the extraction filter not to extract a subset of
        the data, but instead to produce a vtkInsidedness array and add
        it to the input dataset. Default value is false(0).
        """
        ...
    
    def SetSelectionConnection(self, vtkAlgorithmOutput):
        """
        V.SetSelectionConnection(vtkAlgorithmOutput)
        C++: void SetSelectionConnection(vtkAlgorithmOutput *algOutput)
        
        Convenience method to specify the selection connection (2nd input
        port)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


