"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExtractTemporalFieldData(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkExtractTemporalFieldData - Extract temporal arrays from input
    field data
    
    Superclass: vtkDataObjectAlgorithm
    
    @deprecated in VTK 9.0. Use vtkExtractExodusGlobalTemporalVariables
    instead. The global temporal variable concept is a very Exodus
    specific thing and hence the filter is now maybe to work closely with
    the exodus reader and hence can better support other exodus use-cases
    like restart files.
    """
    def GetHandleCompositeDataBlocksIndividually(self):
        """
        V.GetHandleCompositeDataBlocksIndividually() -> bool
        C++: virtual bool GetHandleCompositeDataBlocksIndividually()
        
        When set to true (default), if the input is a
        vtkCompositeDataSet, then each block in the input dataset in
        processed separately. If false, then the first non-empty
        FieldData is considered.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: int GetNumberOfTimeSteps()
        
        Get the number of time steps
        """
        ...
    
    def HandleCompositeDataBlocksIndividuallyOff(self):
        """
        V.HandleCompositeDataBlocksIndividuallyOff()
        C++: virtual void HandleCompositeDataBlocksIndividuallyOff()
        
        When set to true (default), if the input is a
        vtkCompositeDataSet, then each block in the input dataset in
        processed separately. If false, then the first non-empty
        FieldData is considered.
        """
        ...
    
    def HandleCompositeDataBlocksIndividuallyOn(self):
        """
        V.HandleCompositeDataBlocksIndividuallyOn()
        C++: virtual void HandleCompositeDataBlocksIndividuallyOn()
        
        When set to true (default), if the input is a
        vtkCompositeDataSet, then each block in the input dataset in
        processed separately. If false, then the first non-empty
        FieldData is considered.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractTemporalFieldData
        C++: vtkExtractTemporalFieldData *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractTemporalFieldData
        C++: static vtkExtractTemporalFieldData *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetHandleCompositeDataBlocksIndividually(self, bool):
        """
        V.SetHandleCompositeDataBlocksIndividually(bool)
        C++: virtual void SetHandleCompositeDataBlocksIndividually(
            bool _arg)
        
        When set to true (default), if the input is a
        vtkCompositeDataSet, then each block in the input dataset in
        processed separately. If false, then the first non-empty
        FieldData is considered.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


