"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExtractCells(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkExtractCells - subset a vtkDataSet to create a vtkUnstructuredGrid
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    Given a vtkDataSet and a list of cell ids, create a
    vtkUnstructuredGrid
       composed of these cells.  If the cell list is empty when
    vtkExtractCells
       executes, it will set up the ugrid, point and cell arrays, with no
    points,
       cells or data.
    """
    def AddCellIds(self, int_tuple, p_int):
        """
        V.AddCellIds((int, ...), int)
        C++: void AddCellIds(const vtkIdType *ptr, vtkIdType numValues)
        
        Another way to provide ids using a pointer to vtkIdType array.
        """
        ...
    
    def AddCellList(self, vtkIdList):
        """
        V.AddCellList(vtkIdList)
        C++: void AddCellList(vtkIdList *l)
        
        Add the supplied list of cell IDs to those that will be included
        in the output vtkUnstructuredGrid. The cell ids should be >=0.
        """
        ...
    
    def AddCellRange(self, p_int, p_int_1):
        """
        V.AddCellRange(int, int)
        C++: void AddCellRange(vtkIdType from, vtkIdType to)
        
        Add this range of cell IDs to those that will be included in the
        output vtkUnstructuredGrid. Note that (from < to), and (from >=
        0).
        """
        ...
    
    def AssumeSortedAndUniqueIdsOff(self):
        """
        V.AssumeSortedAndUniqueIdsOff()
        C++: virtual void AssumeSortedAndUniqueIdsOff()
        
        If the cell ids specified are already sorted and unique, then set
        this to true to avoid the filter from doing time-consuming sorts
        and uniquification operations. Defaults to false.
        """
        ...
    
    def AssumeSortedAndUniqueIdsOn(self):
        """
        V.AssumeSortedAndUniqueIdsOn()
        C++: virtual void AssumeSortedAndUniqueIdsOn()
        
        If the cell ids specified are already sorted and unique, then set
        this to true to avoid the filter from doing time-consuming sorts
        and uniquification operations. Defaults to false.
        """
        ...
    
    def ExtractAllCellsOff(self):
        """
        V.ExtractAllCellsOff()
        C++: virtual void ExtractAllCellsOff()
        
        If all cells are being extracted, this filter can use fast path
        to speed up the extraction. In that case, one can set this flag
        to true. When set to true, cell ids added via the various methods
        are simply ignored. Defaults to false.
        """
        ...
    
    def ExtractAllCellsOn(self):
        """
        V.ExtractAllCellsOn()
        C++: virtual void ExtractAllCellsOn()
        
        If all cells are being extracted, this filter can use fast path
        to speed up the extraction. In that case, one can set this flag
        to true. When set to true, cell ids added via the various methods
        are simply ignored. Defaults to false.
        """
        ...
    
    def GetAssumeSortedAndUniqueIds(self):
        """
        V.GetAssumeSortedAndUniqueIds() -> bool
        C++: virtual bool GetAssumeSortedAndUniqueIds()
        
        If the cell ids specified are already sorted and unique, then set
        this to true to avoid the filter from doing time-consuming sorts
        and uniquification operations. Defaults to false.
        """
        ...
    
    def GetExtractAllCells(self):
        """
        V.GetExtractAllCells() -> bool
        C++: virtual bool GetExtractAllCells()
        
        If all cells are being extracted, this filter can use fast path
        to speed up the extraction. In that case, one can set this flag
        to true. When set to true, cell ids added via the various methods
        are simply ignored. Defaults to false.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractCells
        C++: vtkExtractCells *NewInstance()
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractCells
        C++: static vtkExtractCells *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for construction, type info, and printing.
        """
        ...
    
    def SetAssumeSortedAndUniqueIds(self, bool):
        """
        V.SetAssumeSortedAndUniqueIds(bool)
        C++: virtual void SetAssumeSortedAndUniqueIds(bool _arg)
        
        If the cell ids specified are already sorted and unique, then set
        this to true to avoid the filter from doing time-consuming sorts
        and uniquification operations. Defaults to false.
        """
        ...
    
    def SetCellIds(self, int_tuple, p_int):
        """
        V.SetCellIds((int, ...), int)
        C++: void SetCellIds(const vtkIdType *ptr, vtkIdType numValues)
        
        Another way to provide ids using a pointer to vtkIdType array.
        """
        ...
    
    def SetCellList(self, vtkIdList):
        """
        V.SetCellList(vtkIdList)
        C++: void SetCellList(vtkIdList *l)
        
        Set the list of cell IDs that the output vtkUnstructuredGrid will
        be composed of.  Replaces any other cell ID list supplied so far.
         (Set to nullptr to free memory used by cell list.)  The cell ids
        should be >=0.
        """
        ...
    
    def SetExtractAllCells(self, bool):
        """
        V.SetExtractAllCells(bool)
        C++: virtual void SetExtractAllCells(bool _arg)
        
        If all cells are being extracted, this filter can use fast path
        to speed up the extraction. In that case, one can set this flag
        to true. When set to true, cell ids added via the various methods
        are simply ignored. Defaults to false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


