"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExpandMarkedElements(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkExpandMarkedElements - expands marked elements to including
    adjacent elements.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkExpandMarkedElements is intended to expand selected cells to grow
    to include adjacent cells. The filter works across all blocks in a
    composite dataset and across all ranks. Besides cells, the filter can
    be used to expand selected points instead in which case adjacent
    points are defined as points on any cell that has the source point as
    one of its points.
    
    The selected cells (or points) are indicated by a
    `vtkSignedCharArray` on cell-data (or point-data). The array can be
    selected by using `SetInputArrayToProcess(0, 0, 0,...)` (see
    vtkAlgorithm::SetInputArrayToProcess).
    
    Currently, the filter only supports expanding marked elements for
    cells and points.
    """
    def GetController(self):
        """
        V.GetController() -> vtkMultiProcessController
        C++: virtual vtkMultiProcessController *GetController()
        
        Get/Set the controller to use. By default, is initialized to
        `vtkMultiProcessController::GetGlobalController` in the
        constructor.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLayers(self):
        """
        V.GetNumberOfLayers() -> int
        C++: virtual int GetNumberOfLayers()
        
        Get/Set the number of layers to expand by.
        """
        ...
    
    def GetNumberOfLayersMaxValue(self):
        """
        V.GetNumberOfLayersMaxValue() -> int
        C++: virtual int GetNumberOfLayersMaxValue()
        
        Get/Set the number of layers to expand by.
        """
        ...
    
    def GetNumberOfLayersMinValue(self):
        """
        V.GetNumberOfLayersMinValue() -> int
        C++: virtual int GetNumberOfLayersMinValue()
        
        Get/Set the number of layers to expand by.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExpandMarkedElements
        C++: vtkExpandMarkedElements *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExpandMarkedElements
        C++: static vtkExpandMarkedElements *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetController(self, vtkMultiProcessController):
        """
        V.SetController(vtkMultiProcessController)
        C++: void SetController(vtkMultiProcessController *)
        
        Get/Set the controller to use. By default, is initialized to
        `vtkMultiProcessController::GetGlobalController` in the
        constructor.
        """
        ...
    
    def SetNumberOfLayers(self, p_int):
        """
        V.SetNumberOfLayers(int)
        C++: virtual void SetNumberOfLayers(int _arg)
        
        Get/Set the number of layers to expand by.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


