"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExtractUnstructuredGrid(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkExtractUnstructuredGrid - extract subset of unstructured grid
    geometry
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkExtractUnstructuredGrid is a general-purpose filter to extract
    geometry (and associated data) from an unstructured grid dataset. The
    extraction process is controlled by specifying a range of point ids,
    cell ids, or a bounding box (referred to as "Extent"). Those cells
    laying within these regions are sent to the output. The user has the
    choice of merging coincident points (Merging is on) or using the
    original point set (Merging is off).
    
    @warning
    If merging is off, the input points are copied through to the output.
    This means unused points may be present in the output data. If
    merging is on, then coincident points with different point attribute
    values are merged.
    
    @sa
    vtkImageDataGeometryFilter vtkStructuredGridGeometryFilter
    vtkRectilinearGridGeometryFilter vtkExtractGeometry vtkExtractVOI
    """
    def CellClippingOff(self):
        """
        V.CellClippingOff()
        C++: virtual void CellClippingOff()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def CellClippingOn(self):
        """
        V.CellClippingOn()
        C++: virtual void CellClippingOn()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified.
        """
        ...
    
    def ExtentClippingOff(self):
        """
        V.ExtentClippingOff()
        C++: virtual void ExtentClippingOff()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def ExtentClippingOn(self):
        """
        V.ExtentClippingOn()
        C++: virtual void ExtentClippingOn()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def GetCellClipping(self):
        """
        V.GetCellClipping() -> int
        C++: virtual vtkTypeBool GetCellClipping()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def GetCellMaximum(self):
        """
        V.GetCellMaximum() -> int
        C++: virtual vtkIdType GetCellMaximum()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMaximumMaxValue(self):
        """
        V.GetCellMaximumMaxValue() -> int
        C++: virtual vtkIdType GetCellMaximumMaxValue()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMaximumMinValue(self):
        """
        V.GetCellMaximumMinValue() -> int
        C++: virtual vtkIdType GetCellMaximumMinValue()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMinimum(self):
        """
        V.GetCellMinimum() -> int
        C++: virtual vtkIdType GetCellMinimum()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetCellMinimumMaxValue(self):
        """
        V.GetCellMinimumMaxValue() -> int
        C++: virtual vtkIdType GetCellMinimumMaxValue()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetCellMinimumMinValue(self):
        """
        V.GetCellMinimumMinValue() -> int
        C++: virtual vtkIdType GetCellMinimumMinValue()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetExtent(self):
        """
        V.GetExtent() -> (float, float, float, float, float, float)
        C++: double *GetExtent()
        
        Set / get a (xmin,xmax, ymin,ymax, zmin,zmax) bounding box to
        clip data.
        """
        ...
    
    def GetExtentClipping(self):
        """
        V.GetExtentClipping() -> int
        C++: virtual vtkTypeBool GetExtentClipping()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Set / get a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMerging(self):
        """
        V.GetMerging() -> int
        C++: virtual vtkTypeBool GetMerging()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the locator.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPointClipping(self):
        """
        V.GetPointClipping() -> int
        C++: virtual vtkTypeBool GetPointClipping()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def GetPointMaximum(self):
        """
        V.GetPointMaximum() -> int
        C++: virtual vtkIdType GetPointMaximum()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMaximumMaxValue(self):
        """
        V.GetPointMaximumMaxValue() -> int
        C++: virtual vtkIdType GetPointMaximumMaxValue()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMaximumMinValue(self):
        """
        V.GetPointMaximumMinValue() -> int
        C++: virtual vtkIdType GetPointMaximumMinValue()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMinimum(self):
        """
        V.GetPointMinimum() -> int
        C++: virtual vtkIdType GetPointMinimum()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def GetPointMinimumMaxValue(self):
        """
        V.GetPointMinimumMaxValue() -> int
        C++: virtual vtkIdType GetPointMinimumMaxValue()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def GetPointMinimumMinValue(self):
        """
        V.GetPointMinimumMinValue() -> int
        C++: virtual vtkIdType GetPointMinimumMinValue()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergingOff(self):
        """
        V.MergingOff()
        C++: virtual void MergingOff()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def MergingOn(self):
        """
        V.MergingOn()
        C++: virtual void MergingOn()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractUnstructuredGrid
        C++: vtkExtractUnstructuredGrid *NewInstance()
        """
        ...
    
    def PointClippingOff(self):
        """
        V.PointClippingOff()
        C++: virtual void PointClippingOff()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def PointClippingOn(self):
        """
        V.PointClippingOn()
        C++: virtual void PointClippingOn()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractUnstructuredGrid
        C++: static vtkExtractUnstructuredGrid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCellClipping(self, p_int):
        """
        V.SetCellClipping(int)
        C++: virtual void SetCellClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def SetCellMaximum(self, p_int):
        """
        V.SetCellMaximum(int)
        C++: virtual void SetCellMaximum(vtkIdType _arg)
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def SetCellMinimum(self, p_int):
        """
        V.SetCellMinimum(int)
        C++: virtual void SetCellMinimum(vtkIdType _arg)
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def SetExtent(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetExtent(float, float, float, float, float, float)
        C++: void SetExtent(double xMin, double xMax, double yMin,
            double yMax, double zMin, double zMax)
        V.SetExtent([float, float, float, float, float, float])
        C++: void SetExtent(double extent[6])
        
        Specify a (xmin,xmax, ymin,ymax, zmin,zmax) bounding box to clip
        data.
        """
        ...
    
    def SetExtentClipping(self, p_int):
        """
        V.SetExtentClipping(int)
        C++: virtual void SetExtentClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *locator)
        
        Set / get a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetMerging(self, p_int):
        """
        V.SetMerging(int)
        C++: virtual void SetMerging(vtkTypeBool _arg)
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def SetPointClipping(self, p_int):
        """
        V.SetPointClipping(int)
        C++: virtual void SetPointClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def SetPointMaximum(self, p_int):
        """
        V.SetPointMaximum(int)
        C++: virtual void SetPointMaximum(vtkIdType _arg)
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def SetPointMinimum(self, p_int):
        """
        V.SetPointMinimum(int)
        C++: virtual void SetPointMinimum(vtkIdType _arg)
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


