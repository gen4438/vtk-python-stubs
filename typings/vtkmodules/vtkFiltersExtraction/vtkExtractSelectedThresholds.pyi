"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkFiltersGeneral as __vtkmodules_vtkFiltersGeneral

class vtkExtractSelectedThresholds(__vtkmodules_vtkFiltersGeneral.vtkExtractSelectionBase):
    """
    vtkExtractSelectedThresholds - extract a cells or points from a
    dataset that have values within a set of thresholds.
    
    Superclass: vtkExtractSelectionBase
    
    vtkExtractSelectedThresholds extracts all cells and points with
    attribute values that lie within a vtkSelection's THRESHOLD contents.
    The selecion can specify to threshold a particular array within
    either the point or cell attribute data of the input. This is similar
    to vtkThreshold but allows multiple thresholds ranges. This filter
    adds a scalar array called vtkOriginalCellIds that says what input
    cell produced each output cell. This is an example of a Pedigree ID
    which helps to trace back results.
    
    @sa
    vtkSelection vtkExtractSelection vtkThreshold
    """
    def EvaluateValue(self, vtkDataArray, p_int, vtkDataArray_1):
        """
        V.EvaluateValue(vtkDataArray, int, vtkDataArray) -> int
        C++: static int EvaluateValue(vtkDataArray *scalars, vtkIdType id,
             vtkDataArray *lims)
        V.EvaluateValue(vtkDataArray, int, int, vtkDataArray) -> int
        C++: static int EvaluateValue(vtkDataArray *array,
            int array_component_no, vtkIdType id, vtkDataArray *lims)
        V.EvaluateValue(vtkDataArray, int, vtkDataArray, [int, ...], [int,
             ...], [int, ...]) -> int
        C++: static int EvaluateValue(vtkDataArray *scalars, vtkIdType id,
             vtkDataArray *lims, int *AboveCount, int *BelowCount,
            int *InsideCount)
        V.EvaluateValue(vtkDataArray, int, int, vtkDataArray, [int, ...],
            [int, ...], [int, ...]) -> int
        C++: static int EvaluateValue(vtkDataArray *scalars,
            int array_component_no, vtkIdType id, vtkDataArray *lims,
            int *AboveCount, int *BelowCount, int *InsideCount)
        
        Function for determining whether a value in a data array passes
        the threshold test(s) provided in lims.  Returns 1 if the value
        passes at least one of the threshold tests. If scalars is
        nullptr, then the id itself is used as the scalar value.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractSelectedThresholds
        C++: vtkExtractSelectedThresholds *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractSelectedThresholds
        C++: static vtkExtractSelectedThresholds *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


