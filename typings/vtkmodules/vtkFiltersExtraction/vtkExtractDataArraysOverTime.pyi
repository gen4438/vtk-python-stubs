"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkExtractDataArraysOverTime(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkExtractDataArraysOverTime - extracts array from input dataset over
    time.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkExtractDataArraysOverTime extracts array from input dataset over
    time. The filter extracts attribute arrays, based on the chosen field
    association (vtkExtractDataArraysOverTime::SetFieldAssociation).
    
    vtkExtractDataArraysOverTime::ReportStatisticsOnly determines if each
    element is individually tracked or only summary statistics for each
    timestep are tracked.
    
    If ReportStatisticsOnly is off, the filter tracks each element in the
    input over time. It requires that it can identify matching elements
    from one timestep to another. There are several ways of doing that.
    
    \li if vtkExtractDataArraysOverTime::UseGlobalIDs is true, then the
        filter
        will look for array marked as vtkDataSetAttributes::GLOBALIDS in
    the
        input and use that to track the element.
    \li if vtkExtractDataArraysOverTime::UseGlobalIDs is false or there
        are no
        element ids present, then the filter will look for the array
    chosen for
        processing using `vtkAlgorithm::SetInputArrayToProcess` at index
    0.
    \li if earlier attempts fail, then simply the element id (i.e. index)
    is used.
    
    The output is a vtkMultiBlockDataSet with single level, where leaf
    nodes can are vtkTable instances.
    
    The output is structured as follows:
    
    \li if vtkExtractDataArraysOverTime::ReportStatisticsOnly is true,
        then the
        stats are computed per input block (if input is a composite
    dataset) or on the whole
        input dataset and placed as blocks named as **stats block=<block
    id>**.
        For non-composite input, the single leaf block is output is named
    as
    **stats**.
    
    \li if vtkExtractDataArraysOverTime::ReportStatisticsOnly if off,
        then each
       tracked element is placed in a separate output block. The block
    name is of
       the form **id=block=<block id>** where the **block=** suffix is
       dropped for non-composite input datasets. If global ids are being
    used for
       tracking then the name is simply **gid=<global id>**.
    
    @sa vtkPExtractDataArraysOverTime
    """
    def GetFieldAssociation(self):
        """
        V.GetFieldAssociation() -> int
        C++: virtual int GetFieldAssociation()
        
        FieldAssociation indicates which attributes to extract over time.
        This filter can extract only one type of attribute arrays.
        Currently, vtkDataObject::FIELD and
        vtkDataObject::POINT_THEN_CELL are not supported.
        """
        ...
    
    def GetFieldAssociationMaxValue(self):
        """
        V.GetFieldAssociationMaxValue() -> int
        C++: virtual int GetFieldAssociationMaxValue()
        
        FieldAssociation indicates which attributes to extract over time.
        This filter can extract only one type of attribute arrays.
        Currently, vtkDataObject::FIELD and
        vtkDataObject::POINT_THEN_CELL are not supported.
        """
        ...
    
    def GetFieldAssociationMinValue(self):
        """
        V.GetFieldAssociationMinValue() -> int
        C++: virtual int GetFieldAssociationMinValue()
        
        FieldAssociation indicates which attributes to extract over time.
        This filter can extract only one type of attribute arrays.
        Currently, vtkDataObject::FIELD and
        vtkDataObject::POINT_THEN_CELL are not supported.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: virtual int GetNumberOfTimeSteps()
        
        Get the number of time steps
        """
        ...
    
    def GetReportStatisticsOnly(self):
        """
        V.GetReportStatisticsOnly() -> bool
        C++: virtual bool GetReportStatisticsOnly()
        
        Instead of breaking a data into a separate time-history table for
        each (block,ID)-tuple, you may call ReportStatisticsOnlyOn().
        Then a single table per block of the input dataset will report
        the minimum, maximum, quartiles, and (for numerical arrays) the
        average and standard deviation of the data over time.
        
        * The default is off to preserve backwards-compatibility.
        """
        ...
    
    def GetUseGlobalIDs(self):
        """
        V.GetUseGlobalIDs() -> bool
        C++: virtual bool GetUseGlobalIDs()
        
        When ReportStatisticsOnly is false, if UseGlobalIDs is true, then
        the filter will track elements using their global ids, if
        present. Default is true.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExtractDataArraysOverTime
        C++: vtkExtractDataArraysOverTime *NewInstance()
        """
        ...
    
    def ReportStatisticsOnlyOff(self):
        """
        V.ReportStatisticsOnlyOff()
        C++: virtual void ReportStatisticsOnlyOff()
        
        Instead of breaking a data into a separate time-history table for
        each (block,ID)-tuple, you may call ReportStatisticsOnlyOn().
        Then a single table per block of the input dataset will report
        the minimum, maximum, quartiles, and (for numerical arrays) the
        average and standard deviation of the data over time.
        
        * The default is off to preserve backwards-compatibility.
        """
        ...
    
    def ReportStatisticsOnlyOn(self):
        """
        V.ReportStatisticsOnlyOn()
        C++: virtual void ReportStatisticsOnlyOn()
        
        Instead of breaking a data into a separate time-history table for
        each (block,ID)-tuple, you may call ReportStatisticsOnlyOn().
        Then a single table per block of the input dataset will report
        the minimum, maximum, quartiles, and (for numerical arrays) the
        average and standard deviation of the data over time.
        
        * The default is off to preserve backwards-compatibility.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkExtractDataArraysOverTime
        C++: static vtkExtractDataArraysOverTime *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFieldAssociation(self, p_int):
        """
        V.SetFieldAssociation(int)
        C++: virtual void SetFieldAssociation(int _arg)
        
        FieldAssociation indicates which attributes to extract over time.
        This filter can extract only one type of attribute arrays.
        Currently, vtkDataObject::FIELD and
        vtkDataObject::POINT_THEN_CELL are not supported.
        """
        ...
    
    def SetReportStatisticsOnly(self, bool):
        """
        V.SetReportStatisticsOnly(bool)
        C++: virtual void SetReportStatisticsOnly(bool _arg)
        
        Instead of breaking a data into a separate time-history table for
        each (block,ID)-tuple, you may call ReportStatisticsOnlyOn().
        Then a single table per block of the input dataset will report
        the minimum, maximum, quartiles, and (for numerical arrays) the
        average and standard deviation of the data over time.
        
        * The default is off to preserve backwards-compatibility.
        """
        ...
    
    def SetUseGlobalIDs(self, bool):
        """
        V.SetUseGlobalIDs(bool)
        C++: virtual void SetUseGlobalIDs(bool _arg)
        
        When ReportStatisticsOnly is false, if UseGlobalIDs is true, then
        the filter will track elements using their global ids, if
        present. Default is true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


