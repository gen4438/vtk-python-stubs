"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLRenderTimerLog(__vtkmodules_vtkRenderingCore.vtkRenderTimerLog):
    """
    vtkOpenGLRenderTimerLog - OpenGL2 override for vtkRenderTimerLog.
    
    Superclass: vtkRenderTimerLog
    """
    def FrameReady(self):
        """
        V.FrameReady() -> bool
        C++: bool FrameReady() override;
        
        Returns true if there are any frames ready with complete timing
        info.
        """
        ...
    
    def GetLoggingEnabled(self):
        """
        V.GetLoggingEnabled() -> bool
        C++: bool GetLoggingEnabled() override;
        
        Overridden to do support check before returning.
        """
        ...
    
    def GetMinTimerPoolSize(self):
        """
        V.GetMinTimerPoolSize() -> int
        C++: virtual size_t GetMinTimerPoolSize()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsSupported(self):
        """
        V.IsSupported() -> bool
        C++: bool IsSupported() override;
        
        Returns true if stream timings are implemented for the current
        graphics backend.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MarkEndEvent(self):
        """
        V.MarkEndEvent()
        C++: void MarkEndEvent() override;
        """
        ...
    
    def MarkFrame(self):
        """
        V.MarkFrame()
        C++: void MarkFrame() override;
        
        Call to mark the start of a new frame, or the end of an old one.
        Does nothing if no events have been recorded in the current
        frame.
        """
        ...
    
    def MarkStartEvent(self, string):
        """
        V.MarkStartEvent(string)
        C++: void MarkStartEvent(const std::string &name) override;
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLRenderTimerLog
        C++: vtkOpenGLRenderTimerLog *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: void ReleaseGraphicsResources() override;
        
        Releases any resources allocated on the graphics device.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLRenderTimerLog
        C++: static vtkOpenGLRenderTimerLog *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetMinTimerPoolSize(self, p_int):
        """
        V.SetMinTimerPoolSize(int)
        C++: virtual void SetMinTimerPoolSize(size_t _arg)
        
        This implementations keeps a pool of vtkRenderTimers around,
        recycling them to avoid constantly allocating/freeing them. The
        pool is sometimes trimmed to free up memory if the number of
        timers in the pool is much greater the the number of timers
        currently used. This setting controls the minimum number of
        timers that will be kept. More may be kept if they are being
        used, but the pool will never be trimmed below this amount.
        
        Default value is 32, but can be adjusted for specific use cases.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


