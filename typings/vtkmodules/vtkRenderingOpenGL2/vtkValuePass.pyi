"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLRenderPass import vtkOpenGLRenderPass

class vtkValuePass(vtkOpenGLRenderPass):
    """
    vtkValuePass - Renders geometry using the values of a field array as
    fragment colors.
    
    Superclass: vtkOpenGLRenderPass
    
    The output can be used for deferred color mapping. It supports using
    arrays of either point or cell data. The target array can be selected
    by setting an array name/id and a component number. Only opaque
    geometry is supported.
    
    There are two rendering modes available:
    
    * INVERTIBLE_LUT  Encodes array values as RGB data and renders the
      result to the default framebuffer.  It uses a texture as a color
      LUT to map the values to RGB data. Texture size constraints limit
      its precision (currently 12-bit). The implementation of this mode
      is in vtkInternalsInvertible. This option is deprecated now that
      the SGI patent on floating point textures has expired and Mesa and
      other OpenGL's always supports it.
    
    * FLOATING_POINT  Renders actual array values as floating point data
      to an internal RGBA32F framebuffer.  This class binds and unbinds
      the framebuffer on each render pass. Resources are allocated on
      demand. When rendering point data values are uploaded to the GPU as
    vertex attributes. When rendering cell data values are uploaded as a
      texture buffer. Custom vertex and fragment shaders are defined in
      order to adjust its behavior for either type of data.
    
    @sa
    vtkRenderPass vtkOpenGLRenderPass
    """
    def ColorToValue(self, int_tuple, p_float, p_float_1, p_float_2):
        """
        V.ColorToValue((int, ...), float, float, float)
        C++: void ColorToValue(unsigned char const *color,
            double const min, double const scale, double &value)
        
        Convert an RGB triplet to a floating point value. This method is
        exposed as a convenience function for testing
        (TestValuePass2).@deprecated As of 9.0, not necessary with
        FLOATING_POINT.
        """
        ...
    
    def GetFloatImageData(self, p_int, p_int_1, p_int_2, void):
        """
        V.GetFloatImageData(int, int, int, void)
        C++: void GetFloatImageData(int const format, int const width,
            int const height, void *data)
        
        Interface to get the rendered image in FLOATING_POINT mode.  Low
        level API, a format for the internal glReadPixels call can be
        specified. 'data' is expected to be allocated and cleaned-up by
        the caller.
        """
        ...
    
    def GetFloatImageDataArray(self, vtkRenderer):
        """
        V.GetFloatImageDataArray(vtkRenderer) -> vtkFloatArray
        C++: vtkFloatArray *GetFloatImageDataArray(vtkRenderer *ren)
        
        Interface to get the rendered image in FLOATING_POINT mode. 
        Returns a single component array containing the rendered values.
        \warning The returned array is owned by this class.
        """
        ...
    
    def GetFloatImageExtents(self):
        """
        V.GetFloatImageExtents() -> (int, ...)
        C++: int *GetFloatImageExtents()
        
        Interface to get the rendered image in FLOATING_POINT mode. 
        Image extents of the value array.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderingMode(self):
        """
        V.GetRenderingMode() -> int
        C++: virtual int GetRenderingMode()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsFloatingPointModeSupported(self):
        """
        V.IsFloatingPointModeSupported() -> bool
        C++: bool IsFloatingPointModeSupported()
        
        Check for extension support.@deprecated As of 9.0, All platforms
        support FLOATING_POINT.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkValuePass
        C++: vtkValuePass *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *win) override;
        
        Release graphics resources and ask components to release their
        own resources. Default implementation is empty.
        \pre w_exists: w!=0
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkValuePass
        C++: static vtkValuePass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInputArrayToProcess(self, p_int, string):
        """
        V.SetInputArrayToProcess(int, string)
        C++: void SetInputArrayToProcess(int fieldAssociation,
            const char *name)
        V.SetInputArrayToProcess(int, int)
        C++: void SetInputArrayToProcess(int fieldAssociation,
            int fieldId)
        """
        ...
    
    def SetInputComponentToProcess(self, p_int):
        """
        V.SetInputComponentToProcess(int)
        C++: void SetInputComponentToProcess(int component)
        """
        ...
    
    def SetRenderingMode(self, p_int):
        """
        V.SetRenderingMode(int)
        C++: virtual void SetRenderingMode(int _arg)
        """
        ...
    
    def SetScalarRange(self, p_float, p_float_1):
        """
        V.SetScalarRange(float, float)
        C++: void SetScalarRange(double min, double max)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    FLOATING_POINT = ...
    INVERTIBLE_LUT = ...
    Mode = ...
    __dict__ = ...
    __vtkname__ = ...


