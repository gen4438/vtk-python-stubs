"""
This type stub file was generated by pyright.
"""

from .vtkImageProcessingPass import vtkImageProcessingPass

class vtkSSAOPass(vtkImageProcessingPass):
    """
    vtkSSAOPass - Implement a screen-space ambient occlusion pass.
    
    Superclass: vtkImageProcessingPass
    
    SSAO darkens some pixels to improve depth perception simulating
    ambient occlusion in screen space. For each fragment, random samples
    inside a hemisphere at the fragment position oriented with the normal
    are tested against other fragments to compute an average occlusion.
    The number of samples and the radius of the hemisphere are
    configurables.
    
    @sa
    vtkRenderPass
    """
    def BlurOff(self):
        """
        V.BlurOff()
        C++: virtual void BlurOff()
        
        Get/Set blurring of the ambient occlusion. Blurring can help to
        improve the result if samples number is low. Default is false
        """
        ...
    
    def BlurOn(self):
        """
        V.BlurOn()
        C++: virtual void BlurOn()
        
        Get/Set blurring of the ambient occlusion. Blurring can help to
        improve the result if samples number is low. Default is false
        """
        ...
    
    def GetBias(self):
        """
        V.GetBias() -> float
        C++: virtual double GetBias()
        
        Get/Set the bias when comparing samples. Default is 0.01
        """
        ...
    
    def GetBlur(self):
        """
        V.GetBlur() -> bool
        C++: virtual bool GetBlur()
        
        Get/Set blurring of the ambient occlusion. Blurring can help to
        improve the result if samples number is low. Default is false
        """
        ...
    
    def GetKernelSize(self):
        """
        V.GetKernelSize() -> int
        C++: virtual unsigned int GetKernelSize()
        
        Get/Set the number of samples. Default is 32
        """
        ...
    
    def GetKernelSizeMaxValue(self):
        """
        V.GetKernelSizeMaxValue() -> int
        C++: virtual unsigned int GetKernelSizeMaxValue()
        
        Get/Set the number of samples. Default is 32
        """
        ...
    
    def GetKernelSizeMinValue(self):
        """
        V.GetKernelSizeMinValue() -> int
        C++: virtual unsigned int GetKernelSizeMinValue()
        
        Get/Set the number of samples. Default is 32
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Get/Set the SSAO hemisphere radius. Default is 0.5
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSSAOPass
        C++: vtkSSAOPass *NewInstance()
        """
        ...
    
    def PostReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PostReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: bool PostReplaceShaderValues(std::string &vertexShader,
            std::string &geometryShader, std::string &fragmentShader,
            vtkAbstractMapper *mapper, vtkProp *prop) override;
        
        Post replace shader values
        """
        ...
    
    def PreReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PreReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: bool PreReplaceShaderValues(std::string &vertexShader,
            std::string &geometryShader, std::string &fragmentShader,
            vtkAbstractMapper *mapper, vtkProp *prop) override;
        
        Pre replace shader values
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Release graphics resources and ask components to release their
        own resources.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSSAOPass
        C++: static vtkSSAOPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBias(self, p_float):
        """
        V.SetBias(float)
        C++: virtual void SetBias(double _arg)
        
        Get/Set the bias when comparing samples. Default is 0.01
        """
        ...
    
    def SetBlur(self, bool):
        """
        V.SetBlur(bool)
        C++: virtual void SetBlur(bool _arg)
        
        Get/Set blurring of the ambient occlusion. Blurring can help to
        improve the result if samples number is low. Default is false
        """
        ...
    
    def SetKernelSize(self, p_int):
        """
        V.SetKernelSize(int)
        C++: virtual void SetKernelSize(unsigned int _arg)
        
        Get/Set the number of samples. Default is 32
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Get/Set the SSAO hemisphere radius. Default is 0.5
        """
        ...
    
    def SetShaderParameters(self, vtkShaderProgram, vtkAbstractMapper, vtkProp, vtkOpenGLVertexArrayObject):
        """
        V.SetShaderParameters(vtkShaderProgram, vtkAbstractMapper,
            vtkProp, vtkOpenGLVertexArrayObject) -> bool
        C++: bool SetShaderParameters(vtkShaderProgram *program,
            vtkAbstractMapper *mapper, vtkProp *prop,
            vtkOpenGLVertexArrayObject *VAO=nullptr) override;
        
        Set shader parameters. Set the draw buffers depending on the
        mapper.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


