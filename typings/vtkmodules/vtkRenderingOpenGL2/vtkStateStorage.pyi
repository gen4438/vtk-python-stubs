"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkStateStorage(object):
    """
    vtkStateStorage - Class to make storing and comparing state quick and
    easy
    
    vtkStateStorage is just a thin wrapper around std::vector<unsigned
    char> It is best to use this class as an ivar so that allocs do not
    happen too often.
    
    Example usage:// compute the new state in a temp ivar
    // note that clear does not free memory
    this->TempState.Clear();
    this->TempState.Append(act->GetProperty()->GetMTime(), "property
    mtime");
    this->TempState.Append(
      this->CurrentInput ? this->CurrentInput->GetMTime() : 0, "input
    mtime");
    this->TempState.Append(
      act->GetTexture() ? act->GetTexture()->GetMTime() : 0, "texture
    mtime");
    
    // now compare against the last state value
    
    if (this->VBOBuildState != this->TempState) {
      // set the ivar to the new state
      this->VBOBuildState = this->TempState;
      do something... }
    
    vtkStateStorage()
    """
    def Clear(self):
        """
        V.Clear()
        C++: void Clear()
        """
        ...
    
    def __eq__(self, *args, **kwargs) -> bool:
        """ Return self==value. """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __ge__(self, *args, **kwargs) -> bool:
        """ Return self>=value. """
        ...
    
    def __gt__(self, *args, **kwargs) -> bool:
        """ Return self>value. """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    def __le__(self, *args, **kwargs) -> bool:
        """ Return self<=value. """
        ...
    
    def __lt__(self, *args, **kwargs) -> bool:
        """ Return self<value. """
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __ne__(self, *args, **kwargs) -> bool:
        """ Return self!=value. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


