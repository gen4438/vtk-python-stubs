"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLBufferObject import vtkOpenGLBufferObject

class vtkOpenGLIndexBufferObject(vtkOpenGLBufferObject):
    """
    vtkOpenGLIndexBufferObject - OpenGL vertex buffer object
    
    Superclass: vtkOpenGLBufferObject
    
    OpenGL buffer object to store geometry and/or attribute data on the
    GPU.
    """
    def AppendEdgeFlagIndexBuffer(self, Stvector_IjE, vtkCellArray, p_int, vtkDataArray):
        """
        V.AppendEdgeFlagIndexBuffer(Stvector_IjE, vtkCellArray, int,
            vtkDataArray)
        C++: static void AppendEdgeFlagIndexBuffer(
            std::vector<unsigned int> &indexArray, vtkCellArray *cells,
            vtkIdType vertexOffset, vtkDataArray *edgeflags)
        
        special index buffer for polys wireframe with edge
        visibilityflags
        """
        ...
    
    def AppendLineIndexBuffer(self, Stvector_IjE, vtkCellArray, p_int):
        """
        V.AppendLineIndexBuffer(Stvector_IjE, vtkCellArray, int)
        C++: static void AppendLineIndexBuffer(
            std::vector<unsigned int> &indexArray, vtkCellArray *cells,
            vtkIdType vertexOffset)
        
        used to create an IBO for line primitives
        """
        ...
    
    def AppendPointIndexBuffer(self, Stvector_IjE, vtkCellArray, p_int):
        """
        V.AppendPointIndexBuffer(Stvector_IjE, vtkCellArray, int)
        C++: static void AppendPointIndexBuffer(
            std::vector<unsigned int> &indexArray, vtkCellArray *cells,
            vtkIdType vertexOffset)
        
        used to create an IBO for primitives as points
        """
        ...
    
    def AppendStripIndexBuffer(self, Stvector_IjE, vtkCellArray, p_int, bool):
        """
        V.AppendStripIndexBuffer(Stvector_IjE, vtkCellArray, int, bool)
        C++: static void AppendStripIndexBuffer(
            std::vector<unsigned int> &indexArray, vtkCellArray *cells,
            vtkIdType vertexOffset, bool wireframeTriStrips)
        """
        ...
    
    def AppendTriangleIndexBuffer(self, Stvector_IjE, vtkCellArray, vtkPoints, p_int):
        """
        V.AppendTriangleIndexBuffer(Stvector_IjE, vtkCellArray, vtkPoints,
             int)
        C++: static void AppendTriangleIndexBuffer(
            std::vector<unsigned int> &indexArray, vtkCellArray *cells,
            vtkPoints *points, vtkIdType vertexOffset)
        
        used to create an IBO for triangle primitives
        """
        ...
    
    def AppendTriangleLineIndexBuffer(self, Stvector_IjE, vtkCellArray, p_int):
        """
        V.AppendTriangleLineIndexBuffer(Stvector_IjE, vtkCellArray, int)
        C++: static void AppendTriangleLineIndexBuffer(
            std::vector<unsigned int> &indexArray, vtkCellArray *cells,
            vtkIdType vertexOffset)
        
        create a IBO for wireframe polys/tris
        """
        ...
    
    def CreateEdgeFlagIndexBuffer(self, vtkCellArray, vtkDataArray):
        """
        V.CreateEdgeFlagIndexBuffer(vtkCellArray, vtkDataArray) -> int
        C++: size_t CreateEdgeFlagIndexBuffer(vtkCellArray *cells,
            vtkDataArray *edgeflags)
        """
        ...
    
    def CreateLineIndexBuffer(self, vtkCellArray):
        """
        V.CreateLineIndexBuffer(vtkCellArray) -> int
        C++: size_t CreateLineIndexBuffer(vtkCellArray *cells)
        
        create a IBO for wireframe polys/tris
        """
        ...
    
    def CreatePointIndexBuffer(self, vtkCellArray):
        """
        V.CreatePointIndexBuffer(vtkCellArray) -> int
        C++: size_t CreatePointIndexBuffer(vtkCellArray *cells)
        
        used to create an IBO for primitives as points
        """
        ...
    
    def CreateStripIndexBuffer(self, vtkCellArray, bool):
        """
        V.CreateStripIndexBuffer(vtkCellArray, bool) -> int
        C++: size_t CreateStripIndexBuffer(vtkCellArray *cells,
            bool wireframeTriStrips)
        
        used to create an IBO for line strips and triangle strips
        """
        ...
    
    def CreateTriangleIndexBuffer(self, vtkCellArray, vtkPoints):
        """
        V.CreateTriangleIndexBuffer(vtkCellArray, vtkPoints) -> int
        C++: size_t CreateTriangleIndexBuffer(vtkCellArray *cells,
            vtkPoints *points)
        
        used to create an IBO for triangle primitives
        """
        ...
    
    def CreateTriangleLineIndexBuffer(self, vtkCellArray):
        """
        V.CreateTriangleLineIndexBuffer(vtkCellArray) -> int
        C++: size_t CreateTriangleLineIndexBuffer(vtkCellArray *cells)
        
        create a IBO for wireframe polys/tris
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLIndexBufferObject
        C++: vtkOpenGLIndexBufferObject *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLIndexBufferObject
        C++: static vtkOpenGLIndexBufferObject *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


