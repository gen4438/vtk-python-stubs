"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkOpenGLCellToVTKCellMap(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkOpenGLCellToVTKCellMap - OpenGL rendering utility functions
    
    Superclass: vtkObject
    
    vtkOpenGLCellToVTKCellMap provides functions map from opengl
    primitive ID to vtk
    """
    def ConvertOpenGLCellIdToVTKCellId(self, bool, p_int):
        """
        V.ConvertOpenGLCellIdToVTKCellId(bool, int) -> int
        C++: vtkIdType ConvertOpenGLCellIdToVTKCellId(bool pointPicking,
            vtkIdType openGLId)
        """
        ...
    
    def GetFinalOffset(self):
        """
        V.GetFinalOffset() -> int
        C++: vtkIdType GetFinalOffset()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPrimitiveOffsets(self):
        """
        V.GetPrimitiveOffsets() -> (int, ...)
        C++: vtkIdType *GetPrimitiveOffsets()
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> int
        C++: size_t GetSize()
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> int
        C++: vtkIdType GetValue(size_t i)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLCellToVTKCellMap
        C++: vtkOpenGLCellToVTKCellMap *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLCellToVTKCellMap
        C++: static vtkOpenGLCellToVTKCellMap *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetStartOffset(self, p_int):
        """
        V.SetStartOffset(int)
        C++: void SetStartOffset(vtkIdType start)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


