"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLTexture import vtkOpenGLTexture

class vtkEquirectangularToCubeMapTexture(vtkOpenGLTexture):
    """
    vtkEquirectangularToCubeMapTexture - compute a cubemap texture based
    on a standard equirectangular projection
    
    Superclass: vtkOpenGLTexture
    
    This special texture converts a 2D projected texture in
    equirectangular format to a 3D cubemap using the GPU. The generated
    texture can be used as input for a skybox or an environment map for
    PBR shading.
    
    @sa vtkSkybox vtkRenderer::SetEnvironmentCubeMap
    """
    def GetCubeMapSize(self):
        """
        V.GetCubeMapSize() -> int
        C++: virtual unsigned int GetCubeMapSize()
        
        Set/Get size of each face of the output cubemap texture. Default
        is 512.
        """
        ...
    
    def GetInputTexture(self):
        """
        V.GetInputTexture() -> vtkOpenGLTexture
        C++: virtual vtkOpenGLTexture *GetInputTexture()
        
        Get/Set the input equirectangular 2D texture.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Load(self, vtkRenderer):
        """
        V.Load(vtkRenderer)
        C++: void Load(vtkRenderer *) override;
        
        Implement base class method.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEquirectangularToCubeMapTexture
        C++: vtkEquirectangularToCubeMapTexture *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        texture. The parameter window could be used to determine which
        graphic resources to release. Using the same texture object in
        multiple render windows is NOT currently supported.
        """
        ...
    
    def Render(self, vtkRenderer):
        """
        V.Render(vtkRenderer)
        C++: void Render(vtkRenderer *ren) override;
        
        Implement base class method.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkEquirectangularToCubeMapTexture
        C++: static vtkEquirectangularToCubeMapTexture *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCubeMapSize(self, p_int):
        """
        V.SetCubeMapSize(int)
        C++: virtual void SetCubeMapSize(unsigned int _arg)
        
        Set/Get size of each face of the output cubemap texture. Default
        is 512.
        """
        ...
    
    def SetInputTexture(self, vtkOpenGLTexture):
        """
        V.SetInputTexture(vtkOpenGLTexture)
        C++: void SetInputTexture(vtkOpenGLTexture *texture)
        
        Get/Set the input equirectangular 2D texture.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


