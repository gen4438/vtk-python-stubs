"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkOpenGLRenderUtilities(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkOpenGLRenderUtilities - OpenGL rendering utility functions
    
    Superclass: vtkObject
    
    vtkOpenGLRenderUtilities provides functions to help render
    primitives.
    
    See also the vtkOpenGLQuadHelper class which may be easier to use.
    """
    def DrawFullScreenQuad(self):
        """
        V.DrawFullScreenQuad()
        C++: static void DrawFullScreenQuad()
        
        Draw a full-screen quad:
        
        * VertexShader and GeometryShader should be used as-is when
          building the ShaderProgram.
        * FragmentShaderTemplate supports the replacements
          //VTK::FSQ::Decl and //VTK::FSQ::Impl for declaring variables
          and the shader body, respectively.
        * The varying texCoord is available to the fragment shader for
          texture lookups into full-screen textures, ie.
          texture2D(textureName, texCoord).
        * PrepFullScreenVAO initializes a new VAO for drawing a quad.
        * DrawFullScreenQuad actually draws the quad.
        
        * Example usage:
        * * typedef vtkOpenGLRenderUtilities GLUtil;
        
        * // Prep fragment shader source:
        * std::string fragShader =
          GLUtil::GetFullScreenQuadFragmentShaderTemplate();
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Decl",
        * "uniform sampler2D aTexture;");
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Impl",
        * "gl_FragData[0] = texture2D(aTexture, texCoord);");
        
        * // Create shader program:
        * vtkShaderProgram *prog = shaderCache->ReadyShaderProgram(
        * GLUtil::GetFullScreenQuadVertexShader().c_str(),
        * fragShader.c_str(),
        * GLUtil::GetFullScreenQuadGeometryShader().c_str());
        
        * // Initialize new VAO/vertex buffer. This is only done once:
        * vtkNewvao;
        * GLUtil::PrepFullScreenVAO(renWin, vao.Get(), prog);
        
        * // Setup shader program to sample vtkTextureObject aTexture:
        * aTexture->Activate();
        * prog->SetUniformi("aTexture", aTexture->GetTextureUnit());
        
        * // Render the full-screen quad:
        * vao->Bind();
        * GLUtil::DrawFullScreenQuad();
        * vao->Release();
        * aTexture->Deactivate();
        *
        """
        ...
    
    def GetFullScreenQuadFragmentShaderTemplate(self):
        """
        V.GetFullScreenQuadFragmentShaderTemplate() -> string
        C++: static std::string GetFullScreenQuadFragmentShaderTemplate()
        
        Draw a full-screen quad:
        
        * VertexShader and GeometryShader should be used as-is when
          building the ShaderProgram.
        * FragmentShaderTemplate supports the replacements
          //VTK::FSQ::Decl and //VTK::FSQ::Impl for declaring variables
          and the shader body, respectively.
        * The varying texCoord is available to the fragment shader for
          texture lookups into full-screen textures, ie.
          texture2D(textureName, texCoord).
        * PrepFullScreenVAO initializes a new VAO for drawing a quad.
        * DrawFullScreenQuad actually draws the quad.
        
        * Example usage:
        * * typedef vtkOpenGLRenderUtilities GLUtil;
        
        * // Prep fragment shader source:
        * std::string fragShader =
          GLUtil::GetFullScreenQuadFragmentShaderTemplate();
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Decl",
        * "uniform sampler2D aTexture;");
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Impl",
        * "gl_FragData[0] = texture2D(aTexture, texCoord);");
        
        * // Create shader program:
        * vtkShaderProgram *prog = shaderCache->ReadyShaderProgram(
        * GLUtil::GetFullScreenQuadVertexShader().c_str(),
        * fragShader.c_str(),
        * GLUtil::GetFullScreenQuadGeometryShader().c_str());
        
        * // Initialize new VAO/vertex buffer. This is only done once:
        * vtkNewvao;
        * GLUtil::PrepFullScreenVAO(renWin, vao.Get(), prog);
        
        * // Setup shader program to sample vtkTextureObject aTexture:
        * aTexture->Activate();
        * prog->SetUniformi("aTexture", aTexture->GetTextureUnit());
        
        * // Render the full-screen quad:
        * vao->Bind();
        * GLUtil::DrawFullScreenQuad();
        * vao->Release();
        * aTexture->Deactivate();
        *
        """
        ...
    
    def GetFullScreenQuadGeometryShader(self):
        """
        V.GetFullScreenQuadGeometryShader() -> string
        C++: static std::string GetFullScreenQuadGeometryShader()
        
        Draw a full-screen quad:
        
        * VertexShader and GeometryShader should be used as-is when
          building the ShaderProgram.
        * FragmentShaderTemplate supports the replacements
          //VTK::FSQ::Decl and //VTK::FSQ::Impl for declaring variables
          and the shader body, respectively.
        * The varying texCoord is available to the fragment shader for
          texture lookups into full-screen textures, ie.
          texture2D(textureName, texCoord).
        * PrepFullScreenVAO initializes a new VAO for drawing a quad.
        * DrawFullScreenQuad actually draws the quad.
        
        * Example usage:
        * * typedef vtkOpenGLRenderUtilities GLUtil;
        
        * // Prep fragment shader source:
        * std::string fragShader =
          GLUtil::GetFullScreenQuadFragmentShaderTemplate();
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Decl",
        * "uniform sampler2D aTexture;");
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Impl",
        * "gl_FragData[0] = texture2D(aTexture, texCoord);");
        
        * // Create shader program:
        * vtkShaderProgram *prog = shaderCache->ReadyShaderProgram(
        * GLUtil::GetFullScreenQuadVertexShader().c_str(),
        * fragShader.c_str(),
        * GLUtil::GetFullScreenQuadGeometryShader().c_str());
        
        * // Initialize new VAO/vertex buffer. This is only done once:
        * vtkNewvao;
        * GLUtil::PrepFullScreenVAO(renWin, vao.Get(), prog);
        
        * // Setup shader program to sample vtkTextureObject aTexture:
        * aTexture->Activate();
        * prog->SetUniformi("aTexture", aTexture->GetTextureUnit());
        
        * // Render the full-screen quad:
        * vao->Bind();
        * GLUtil::DrawFullScreenQuad();
        * vao->Release();
        * aTexture->Deactivate();
        *
        """
        ...
    
    def GetFullScreenQuadVertexShader(self):
        """
        V.GetFullScreenQuadVertexShader() -> string
        C++: static std::string GetFullScreenQuadVertexShader()
        
        Draw a full-screen quad:
        
        * VertexShader and GeometryShader should be used as-is when
          building the ShaderProgram.
        * FragmentShaderTemplate supports the replacements
          //VTK::FSQ::Decl and //VTK::FSQ::Impl for declaring variables
          and the shader body, respectively.
        * The varying texCoord is available to the fragment shader for
          texture lookups into full-screen textures, ie.
          texture2D(textureName, texCoord).
        * PrepFullScreenVAO initializes a new VAO for drawing a quad.
        * DrawFullScreenQuad actually draws the quad.
        
        * Example usage:
        * * typedef vtkOpenGLRenderUtilities GLUtil;
        
        * // Prep fragment shader source:
        * std::string fragShader =
          GLUtil::GetFullScreenQuadFragmentShaderTemplate();
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Decl",
        * "uniform sampler2D aTexture;");
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Impl",
        * "gl_FragData[0] = texture2D(aTexture, texCoord);");
        
        * // Create shader program:
        * vtkShaderProgram *prog = shaderCache->ReadyShaderProgram(
        * GLUtil::GetFullScreenQuadVertexShader().c_str(),
        * fragShader.c_str(),
        * GLUtil::GetFullScreenQuadGeometryShader().c_str());
        
        * // Initialize new VAO/vertex buffer. This is only done once:
        * vtkNewvao;
        * GLUtil::PrepFullScreenVAO(renWin, vao.Get(), prog);
        
        * // Setup shader program to sample vtkTextureObject aTexture:
        * aTexture->Activate();
        * prog->SetUniformi("aTexture", aTexture->GetTextureUnit());
        
        * // Render the full-screen quad:
        * vao->Bind();
        * GLUtil::DrawFullScreenQuad();
        * vao->Release();
        * aTexture->Deactivate();
        *
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MarkDebugEvent(self, string):
        """
        V.MarkDebugEvent(string)
        C++: static void MarkDebugEvent(const std::string &event)
        
        Pass a debugging mark to the render engine to assist development
        via tools like apitrace. This calls glDebugMessageInsert to
        insert the event string into the OpenGL command stream.
        
        Note that this method only works when glDebugMessageInsert is
        bound, which it may not be on certain platforms.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLRenderUtilities
        C++: vtkOpenGLRenderUtilities *NewInstance()
        """
        ...
    
    def PrepFullScreenVAO(self, vtkOpenGLRenderWindow, vtkOpenGLVertexArrayObject, vtkShaderProgram):
        """
        V.PrepFullScreenVAO(vtkOpenGLRenderWindow,
            vtkOpenGLVertexArrayObject, vtkShaderProgram) -> bool
        C++: static bool PrepFullScreenVAO(vtkOpenGLRenderWindow *renWin,
            vtkOpenGLVertexArrayObject *vao, vtkShaderProgram *prog)
        V.PrepFullScreenVAO(vtkOpenGLBufferObject,
            vtkOpenGLVertexArrayObject, vtkShaderProgram) -> bool
        C++: static bool PrepFullScreenVAO(vtkOpenGLBufferObject *verts,
            vtkOpenGLVertexArrayObject *vao, vtkShaderProgram *prog)
        
        Draw a full-screen quad:
        
        * VertexShader and GeometryShader should be used as-is when
          building the ShaderProgram.
        * FragmentShaderTemplate supports the replacements
          //VTK::FSQ::Decl and //VTK::FSQ::Impl for declaring variables
          and the shader body, respectively.
        * The varying texCoord is available to the fragment shader for
          texture lookups into full-screen textures, ie.
          texture2D(textureName, texCoord).
        * PrepFullScreenVAO initializes a new VAO for drawing a quad.
        * DrawFullScreenQuad actually draws the quad.
        
        * Example usage:
        * * typedef vtkOpenGLRenderUtilities GLUtil;
        
        * // Prep fragment shader source:
        * std::string fragShader =
          GLUtil::GetFullScreenQuadFragmentShaderTemplate();
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Decl",
        * "uniform sampler2D aTexture;");
        * vtkShaderProgram::Substitute(fragShader, "//VTK::FSQ::Impl",
        * "gl_FragData[0] = texture2D(aTexture, texCoord);");
        
        * // Create shader program:
        * vtkShaderProgram *prog = shaderCache->ReadyShaderProgram(
        * GLUtil::GetFullScreenQuadVertexShader().c_str(),
        * fragShader.c_str(),
        * GLUtil::GetFullScreenQuadGeometryShader().c_str());
        
        * // Initialize new VAO/vertex buffer. This is only done once:
        * vtkNewvao;
        * GLUtil::PrepFullScreenVAO(renWin, vao.Get(), prog);
        
        * // Setup shader program to sample vtkTextureObject aTexture:
        * aTexture->Activate();
        * prog->SetUniformi("aTexture", aTexture->GetTextureUnit());
        
        * // Render the full-screen quad:
        * vao->Bind();
        * GLUtil::DrawFullScreenQuad();
        * vao->Releas ...
         [Truncated]
        """
        ...
    
    def RenderQuad(self, *float, **kwargs):
        """
        V.RenderQuad([float, ...], [float, ...], vtkShaderProgram,
            vtkOpenGLVertexArrayObject)
        C++: static void RenderQuad(float *verts, float *tcoords,
            vtkShaderProgram *program, vtkOpenGLVertexArrayObject *vao)
        
        Helper function that draws a quad on the screen at the specified
        vertex coordinates and if tcoords are not NULL with the specified
        texture coordinates.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLRenderUtilities
        C++: static vtkOpenGLRenderUtilities *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


