"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLRenderWindow import vtkOpenGLRenderWindow

class vtkGenericOpenGLRenderWindow(vtkOpenGLRenderWindow):
    """
    vtkGenericOpenGLRenderWindow - platform independent render window
    
    Superclass: vtkOpenGLRenderWindow
    
    vtkGenericOpenGLRenderWindow provides a skeleton for implementing a
    render window using one's own OpenGL context and drawable. To be
    effective, one must register an observer for WindowMakeCurrentEvent,
    WindowIsCurrentEvent and WindowFrameEvent.  When this class sends a
    WindowIsCurrentEvent, the call data is an bool* which one can use to
    return whether the context is current.
    """
    def CreateAWindow(self):
        """
        V.CreateAWindow()
        C++: void CreateAWindow() override;
        
        Create a not-off-screen window.
        """
        ...
    
    def DestroyWindow(self):
        """
        V.DestroyWindow()
        C++: void DestroyWindow() override;
        
        Destroy a not-off-screen window.
        """
        ...
    
    def Finalize(self):
        """
        V.Finalize()
        C++: void Finalize() override;
        
        Cleans up graphics resources allocated in the context for this
        VTK scene.
        """
        ...
    
    def Frame(self):
        """
        V.Frame()
        C++: void Frame() override;
        
        flush the pending drawing operations Class user may to watch for
        WindowFrameEvent and act on it
        """
        ...
    
    def GetEventPending(self):
        """
        V.GetEventPending() -> int
        C++: vtkTypeBool GetEventPending() override;
        
        Check to see if a mouse button has been pressed.  All other
        events are ignored by this method.  Ideally, you want to abort
        the render on any event which causes the DesiredUpdateRate to
        switch from a high-quality rate to a more interactive rate.
        """
        ...
    
    def GetForceMaximumHardwareLineWidth(self):
        """
        V.GetForceMaximumHardwareLineWidth() -> float
        C++: virtual float GetForceMaximumHardwareLineWidth()
        
        Specify a non-zero line width to force the hardware line width
        determined by the window.
        """
        ...
    
    def GetForceMaximumHardwareLineWidthMaxValue(self):
        """
        V.GetForceMaximumHardwareLineWidthMaxValue() -> float
        C++: virtual float GetForceMaximumHardwareLineWidthMaxValue()
        
        Specify a non-zero line width to force the hardware line width
        determined by the window.
        """
        ...
    
    def GetForceMaximumHardwareLineWidthMinValue(self):
        """
        V.GetForceMaximumHardwareLineWidthMinValue() -> float
        C++: virtual float GetForceMaximumHardwareLineWidthMinValue()
        
        Specify a non-zero line width to force the hardware line width
        determined by the window.
        """
        ...
    
    def GetGenericContext(self):
        """
        V.GetGenericContext() -> void
        C++: void *GetGenericContext() override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def GetGenericDisplayId(self):
        """
        V.GetGenericDisplayId() -> void
        C++: void *GetGenericDisplayId() override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def GetGenericDrawable(self):
        """
        V.GetGenericDrawable() -> void
        C++: void *GetGenericDrawable() override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def GetGenericParentId(self):
        """
        V.GetGenericParentId() -> void
        C++: void *GetGenericParentId() override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def GetGenericWindowId(self):
        """
        V.GetGenericWindowId() -> void
        C++: void *GetGenericWindowId() override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def GetMaximumHardwareLineWidth(self):
        """
        V.GetMaximumHardwareLineWidth() -> float
        C++: float GetMaximumHardwareLineWidth() override;
        
        Overridden to pass explicitly specified MaximumHardwareLineWidth,
        if any.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReadyForRendering(self):
        """
        V.GetReadyForRendering() -> bool
        C++: virtual bool GetReadyForRendering()
        
        Set this to true to indicate that the context is now ready. For
        backwards compatibility reasons, it's set to true by default. If
        set to false, the `Render` call will be skipped entirely.
        """
        ...
    
    def GetScreenSize(self):
        """
        V.GetScreenSize() -> (int, int)
        C++: int *GetScreenSize() override;
        
        Get the current size of the screen in pixels.
        """
        ...
    
    def HideCursor(self):
        """
        V.HideCursor()
        C++: void HideCursor() override;
        
        Hide or Show the mouse cursor, it is nice to be able to hide the
        default cursor if you want VTK to display a 3D cursor instead.
        Set cursor position in window (note that (0,0) is the lower left
        corner).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsCurrent(self):
        """
        V.IsCurrent() -> bool
        C++: bool IsCurrent() override;
        
        Returns if the context is current.  It is the class user's
        responsibility to watch for WindowIsCurrentEvent and set the
        bool* flag passed through the call data parameter.
        """
        ...
    
    def IsDirect(self):
        """
        V.IsDirect() -> int
        C++: vtkTypeBool IsDirect() override;
        
        Returns if the context is direct.  It is the class user's
        responsibility to watch for WindowIsDirectEvent and set the int*
        flag passed through the call data parameter.
        """
        ...
    
    def IsDrawable(self):
        """
        V.IsDrawable() -> bool
        C++: bool IsDrawable() override;
        
        Overridden to simply call `GetReadyForRendering`
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MakeCurrent(self):
        """
        V.MakeCurrent()
        C++: void MakeCurrent() override;
        
        Makes the context current.  It is the class user's responsibility
        to watch for WindowMakeCurrentEvent and set it current.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericOpenGLRenderWindow
        C++: vtkGenericOpenGLRenderWindow *NewInstance()
        """
        ...
    
    def PopState(self):
        """
        V.PopState()
        C++: void PopState()
        
        no-op (for API compat with OpenGL1).
        """
        ...
    
    def PushState(self):
        """
        V.PushState()
        C++: void PushState()
        
        no-op (for API compat with OpenGL1).
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: void Render() override;
        
        Override the Render method to do some state management. This
        method saves the OpenGL state before asking its child renderers
        to render their image. Once this is done, the OpenGL state is
        restored.
        \sa vtkOpenGLRenderWindow::SaveGLState()
        \sa vtkOpenGLRenderWindow::RestoreGLState()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericOpenGLRenderWindow
        C++: static vtkGenericOpenGLRenderWindow *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBackLeftBuffer(self, p_int):
        """
        V.SetBackLeftBuffer(int)
        C++: void SetBackLeftBuffer(unsigned int)
        """
        ...
    
    def SetBackRightBuffer(self, p_int):
        """
        V.SetBackRightBuffer(int)
        C++: void SetBackRightBuffer(unsigned int)
        """
        ...
    
    def SetCurrentCursor(self, p_int):
        """
        V.SetCurrentCursor(int)
        C++: void SetCurrentCursor(int cShape) override;
        
        Overridden to invoke vtkCommand::CursorChangedEvent
        """
        ...
    
    def SetDefaultFrameBufferId(self, p_int):
        """
        V.SetDefaultFrameBufferId(int)
        C++: void SetDefaultFrameBufferId(unsigned int)
        """
        ...
    
    def SetDisplayId(self, void):
        """
        V.SetDisplayId(void)
        C++: void SetDisplayId(void *) override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def SetForceMaximumHardwareLineWidth(self, p_float):
        """
        V.SetForceMaximumHardwareLineWidth(float)
        C++: virtual void SetForceMaximumHardwareLineWidth(float _arg)
        
        Specify a non-zero line width to force the hardware line width
        determined by the window.
        """
        ...
    
    def SetFrontLeftBuffer(self, p_int):
        """
        V.SetFrontLeftBuffer(int)
        C++: void SetFrontLeftBuffer(unsigned int)
        
        set the drawing buffers to use
        """
        ...
    
    def SetFrontRightBuffer(self, p_int):
        """
        V.SetFrontRightBuffer(int)
        C++: void SetFrontRightBuffer(unsigned int)
        """
        ...
    
    def SetFullScreen(self, p_int):
        """
        V.SetFullScreen(int)
        C++: void SetFullScreen(vtkTypeBool) override;
        
        Turn on/off rendering full screen window size.
        """
        ...
    
    def SetIsCurrent(self, bool):
        """
        V.SetIsCurrent(bool)
        C++: void SetIsCurrent(bool newValue)
        
        Allow to update state within observer callback without changing
        data argument and MTime.
        """
        ...
    
    def SetIsDirect(self, p_int):
        """
        V.SetIsDirect(int)
        C++: void SetIsDirect(vtkTypeBool newValue)
        
        Allow to update state within observer callback without changing
        data argument and MTime.
        """
        ...
    
    def SetMapped(self, p_int):
        """
        V.SetMapped(int)
        C++: virtual void SetMapped(vtkTypeBool _arg)
        """
        ...
    
    def SetNextWindowId(self, void):
        """
        V.SetNextWindowId(void)
        C++: void SetNextWindowId(void *) override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def SetNextWindowInfo(self, string):
        """
        V.SetNextWindowInfo(string)
        C++: void SetNextWindowInfo(const char *) override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def SetOwnContext(self, p_int):
        """
        V.SetOwnContext(int)
        C++: void SetOwnContext(int)
        """
        ...
    
    def SetParentId(self, void):
        """
        V.SetParentId(void)
        C++: void SetParentId(void *) override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def SetParentInfo(self, string):
        """
        V.SetParentInfo(string)
        C++: void SetParentInfo(const char *) override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def SetReadyForRendering(self, bool):
        """
        V.SetReadyForRendering(bool)
        C++: virtual void SetReadyForRendering(bool _arg)
        
        Set this to true to indicate that the context is now ready. For
        backwards compatibility reasons, it's set to true by default. If
        set to false, the `Render` call will be skipped entirely.
        """
        ...
    
    def SetScreenSize(self, p_int, p_int_1):
        """
        V.SetScreenSize(int, int)
        C++: virtual void SetScreenSize(int _arg1, int _arg2)
        V.SetScreenSize((int, int))
        C++: void SetScreenSize(const int _arg[2])
        
        Set the size of the screen in pixels. An HDTV for example would
        be 1920 x 1080 pixels.
        """
        ...
    
    def SetSupportsOpenGL(self, p_int):
        """
        V.SetSupportsOpenGL(int)
        C++: void SetSupportsOpenGL(int newValue)
        
        Allow to update state within observer callback without changing
        data argument and MTime.
        """
        ...
    
    def SetWindowId(self, void):
        """
        V.SetWindowId(void)
        C++: void SetWindowId(void *) override;
        
        does nothing
        """
        ...
    
    def SetWindowInfo(self, string):
        """
        V.SetWindowInfo(string)
        C++: void SetWindowInfo(const char *) override;
        
        Dummy stubs for vtkWindow API.
        """
        ...
    
    def ShowCursor(self):
        """
        V.ShowCursor()
        C++: void ShowCursor() override;
        
        Hide or Show the mouse cursor, it is nice to be able to hide the
        default cursor if you want VTK to display a 3D cursor instead.
        Set cursor position in window (note that (0,0) is the lower left
        corner).
        """
        ...
    
    def SupportsOpenGL(self):
        """
        V.SupportsOpenGL() -> int
        C++: int SupportsOpenGL() override;
        
        Returns if OpenGL is supported.  It is the class user's
        responsibility to watch for WindowSupportsOpenGLEvent and set the
        int* flag passed through the call data parameter.
        """
        ...
    
    def WindowRemap(self):
        """
        V.WindowRemap()
        C++: void WindowRemap() override;
        
        Remap the rendering window. This probably only works on UNIX
        right now. It is useful for changing properties that can't
        normally be changed once the window is up.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


