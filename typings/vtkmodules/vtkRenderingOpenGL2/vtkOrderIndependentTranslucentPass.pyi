"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLRenderPass import vtkOpenGLRenderPass

class vtkOrderIndependentTranslucentPass(vtkOpenGLRenderPass):
    """
    vtkOrderIndependentTranslucentPass - Implement OIT rendering using
    average color
    
    Superclass: vtkOpenGLRenderPass
    
    Simple version that uses average alpha weighted color and correct
    final computed alpha. Single pass approach.
    
    @sa
    vtkRenderPass, vtkTranslucentPass, vtkFramebufferPass
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTranslucentPass(self):
        """
        V.GetTranslucentPass() -> vtkRenderPass
        C++: virtual vtkRenderPass *GetTranslucentPass()
        
        Delegate for rendering the translucent polygonal geometry. If it
        is NULL, nothing will be rendered and a warning will be emitted.
        It is usually set to a vtkTranslucentPass. Initial value is a
        NULL pointer.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOrderIndependentTranslucentPass
        C++: vtkOrderIndependentTranslucentPass *NewInstance()
        """
        ...
    
    def PostReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PostReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: bool PostReplaceShaderValues(std::string &vertexShader,
            std::string &geometryShader, std::string &fragmentShader,
            vtkAbstractMapper *mapper, vtkProp *prop) override;
        
        Use vtkShaderProgram::Substitute to replace //VTK::XXX:YYY
        declarations in the shader sources. Gets called after other
        mapper shader replacements. Return false on error.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Release graphics resources and ask components to release their
        own resources.
        \pre w_exists: w!=0
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkOrderIndependentTranslucentPass
        C++: static vtkOrderIndependentTranslucentPass *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetTranslucentPass(self, vtkRenderPass):
        """
        V.SetTranslucentPass(vtkRenderPass)
        C++: virtual void SetTranslucentPass(
            vtkRenderPass *translucentPass)
        
        Delegate for rendering the translucent polygonal geometry. If it
        is NULL, nothing will be rendered and a warning will be emitted.
        It is usually set to a vtkTranslucentPass. Initial value is a
        NULL pointer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


