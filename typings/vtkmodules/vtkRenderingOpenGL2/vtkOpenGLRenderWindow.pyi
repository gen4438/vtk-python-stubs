"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLRenderWindow(__vtkmodules_vtkRenderingCore.vtkRenderWindow):
    """
    vtkOpenGLRenderWindow - OpenGL rendering window
    
    Superclass: vtkRenderWindow
    
    vtkOpenGLRenderWindow is a concrete implementation of the abstract
    class vtkRenderWindow. vtkOpenGLRenderer interfaces to the OpenGL
    graphics library. Application programmers should normally use
    vtkRenderWindow instead of the OpenGL specific version.
    """
    def ActivateTexture(self, vtkTextureObject):
        """
        V.ActivateTexture(vtkTextureObject)
        C++: void ActivateTexture(vtkTextureObject *)
        
        Activate a texture unit for this texture
        """
        ...
    
    def DeactivateTexture(self, vtkTextureObject):
        """
        V.DeactivateTexture(vtkTextureObject)
        C++: void DeactivateTexture(vtkTextureObject *)
        
        Deactivate a previously activated texture
        """
        ...
    
    def DrawPixels(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5, void):
        """
        V.DrawPixels(int, int, int, int, int, int, void)
        C++: virtual void DrawPixels(int x1, int y1, int x2, int y2,
            int numComponents, int dataType, void *data)
        V.DrawPixels(int, int, int, int, int, int, int, int, int, int,
            int, int, void)
        C++: virtual void DrawPixels(int dstXmin, int dstYmin,
            int dstXmax, int dstYmax, int srcXmin, int srcYmin,
            int srcXmax, int srcYmax, int srcWidth, int srcHeight,
            int numComponents, int dataType, void *data)
        V.DrawPixels(int, int, int, int, void)
        C++: virtual void DrawPixels(int srcWidth, int srcHeight,
            int numComponents, int dataType, void *data)
        
        Replacement for the old glDrawPixels function
        """
        ...
    
    def End(self):
        """
        V.End()
        C++: void End() override;
        
        Update the system, if needed, at end of render process
        """
        ...
    
    def Frame(self):
        """
        V.Frame()
        C++: void Frame() override;
        
        A termination method performed at the end of the rendering
        process to do things like swapping buffers (if necessary) or
        similar actions.
        """
        ...
    
    def GetBackBuffer(self):
        """
        V.GetBackBuffer() -> int
        C++: unsigned int GetBackBuffer()
        
        Return the OpenGL name of the back left buffer. Identical to
        GetBackLeftBuffer.
        """
        ...
    
    def GetBackLeftBuffer(self):
        """
        V.GetBackLeftBuffer() -> int
        C++: unsigned int GetBackLeftBuffer()
        
        Return the OpenGL name of the back left buffer. It is
        GL_BACK_LEFT if GL is bound to the window-system-provided
        framebuffer. It is vtkgl::COLOR_ATTACHMENT0_EXT if GL is bound to
        an application-created framebuffer object (GPU-based offscreen
        rendering) It is used by vtkOpenGLCamera.
        """
        ...
    
    def GetBackRightBuffer(self):
        """
        V.GetBackRightBuffer() -> int
        C++: unsigned int GetBackRightBuffer()
        
        Return the OpenGL name of the back right buffer. It is
        GL_BACK_RIGHT if GL is bound to the window-system-provided
        framebuffer. It is vtkgl::COLOR_ATTACHMENT0_EXT+1 if GL is bound
        to an application-created framebuffer object (GPU-based offscreen
        rendering) It is used by vtkOpenGLCamera.
        """
        ...
    
    def GetBufferNeedsResolving(self):
        """
        V.GetBufferNeedsResolving() -> bool
        C++: bool GetBufferNeedsResolving()
        """
        ...
    
    def GetColorBufferInternalFormat(self, p_int):
        """
        V.GetColorBufferInternalFormat(int) -> int
        C++: int GetColorBufferInternalFormat(int attachmentPoint)
        
        Get the internal format of current attached texture or render
        buffer. attachmentPoint is the index of attachment. Returns 0 if
        not able to determine.
        """
        ...
    
    def GetColorBufferSizes(self, *int):
        """
        V.GetColorBufferSizes([int, ...]) -> int
        C++: int GetColorBufferSizes(int *rgba) override;
        
        Get the size of the color buffer. Returns 0 if not able to
        determine otherwise sets R G B and A into buffer.
        """
        ...
    
    def GetContextCreationTime(self):
        """
        V.GetContextCreationTime() -> int
        C++: virtual vtkMTimeType GetContextCreationTime()
        
        Get the time when the OpenGL context was created.
        """
        ...
    
    def GetDefaultFrameBufferId(self):
        """
        V.GetDefaultFrameBufferId() -> int
        C++: virtual unsigned int GetDefaultFrameBufferId()
        
        Returns the id for the frame buffer object, if any, used by the
        render window in which the window does all its rendering. This
        may be 0, in which case the render window is rendering to the
        default OpenGL render buffers.
        
        @returns the name (or id) of the frame buffer object to render
            to.
        """
        ...
    
    def GetDefaultTextureInternalFormat(self, p_int, p_int_1, bool, bool_1, bool_2):
        """
        V.GetDefaultTextureInternalFormat(int, int, bool, bool, bool)
            -> int
        C++: int GetDefaultTextureInternalFormat(int vtktype,
            int numComponents, bool needInteger, bool needFloat,
            bool needSRGB)
        
        Get a mapping of vtk data types to native texture formats for
        this window we put this on the RenderWindow so that every texture
        does not have to build these structures themselves
        """
        ...
    
    def GetDepthBufferSize(self):
        """
        V.GetDepthBufferSize() -> int
        C++: int GetDepthBufferSize() override;
        
        Get the size of the depth buffer.
        """
        ...
    
    def GetFrontBuffer(self):
        """
        V.GetFrontBuffer() -> int
        C++: unsigned int GetFrontBuffer()
        
        Return the OpenGL name of the front left buffer. Identical to
        GetFrontLeftBuffer.
        """
        ...
    
    def GetFrontLeftBuffer(self):
        """
        V.GetFrontLeftBuffer() -> int
        C++: unsigned int GetFrontLeftBuffer()
        
        Return the OpenGL name of the front left buffer. It is
        GL_FRONT_LEFT if GL is bound to the window-system-provided
        framebuffer. It is vtkgl::COLOR_ATTACHMENT0_EXT if GL is bound to
        an application-created framebuffer object (GPU-based offscreen
        rendering) It is used by vtkOpenGLCamera.
        """
        ...
    
    def GetFrontRightBuffer(self):
        """
        V.GetFrontRightBuffer() -> int
        C++: unsigned int GetFrontRightBuffer()
        
        Return the OpenGL name of the front right buffer. It is
        GL_FRONT_RIGHT if GL is bound to the window-system-provided
        framebuffer. It is vtkgl::COLOR_ATTACHMENT0_EXT+1 if GL is bound
        to an application-created framebuffer object (GPU-based offscreen
        rendering) It is used by vtkOpenGLCamera.
        """
        ...
    
    def GetGlobalMaximumNumberOfMultiSamples(self):
        """
        V.GetGlobalMaximumNumberOfMultiSamples() -> int
        C++: static int GetGlobalMaximumNumberOfMultiSamples()
        
        Set/Get the maximum number of multisamples
        """
        ...
    
    def GetMaximumHardwareLineWidth(self):
        """
        V.GetMaximumHardwareLineWidth() -> float
        C++: virtual float GetMaximumHardwareLineWidth()
        
        Return the largest line width supported by the hardware
        """
        ...
    
    def GetNoiseTextureUnit(self):
        """
        V.GetNoiseTextureUnit() -> int
        C++: int GetNoiseTextureUnit()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOffScreenFramebuffer(self):
        """
        V.GetOffScreenFramebuffer() -> vtkOpenGLFramebufferObject
        C++: virtual vtkOpenGLFramebufferObject *GetOffScreenFramebuffer()
        
        Returns the offscreen framebuffer object if any
        """
        ...
    
    def GetOpenGLSupportMessage(self):
        """
        V.GetOpenGLSupportMessage() -> string
        C++: std::string GetOpenGLSupportMessage()
        
        Return a message profiding additional details about the results
        of calling SupportsOpenGL()  This can be used to retrieve more
        specifics about what failed
        """
        ...
    
    def GetOpenGLVersion(self, p_int, p_int_1):
        """
        V.GetOpenGLVersion(int, int)
        C++: void GetOpenGLVersion(int &major, int &minor)
        
        Get the major and minor version numbers of the OpenGL context we
        are using ala 3.2, 3.3, 4.0, etc... returns 0,0 if opengl has not
        been initialized yet
        """
        ...
    
    def GetPixelData(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.GetPixelData(int, int, int, int, int, int) -> (int, ...)
        C++: unsigned char *GetPixelData(int x, int y, int x2, int y2,
            int front, int right) override;
        V.GetPixelData(int, int, int, int, int, vtkUnsignedCharArray, int)
             -> int
        C++: int GetPixelData(int x, int y, int x2, int y2, int front,
            vtkUnsignedCharArray *data, int right) override;
        
        Set/Get the pixel data of an image, transmitted as RGBRGB...
        """
        ...
    
    def GetRenderingBackend(self):
        """
        V.GetRenderingBackend() -> string
        C++: const char *GetRenderingBackend() override;
        
        What rendering backend has the user requested
        """
        ...
    
    def GetRGBACharPixelData(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.GetRGBACharPixelData(int, int, int, int, int, int) -> (int, ...)
        C++: unsigned char *GetRGBACharPixelData(int x, int y, int x2,
            int y2, int front, int right=0) override;
        V.GetRGBACharPixelData(int, int, int, int, int,
            vtkUnsignedCharArray, int) -> int
        C++: int GetRGBACharPixelData(int x, int y, int x2, int y2,
            int front, vtkUnsignedCharArray *data, int right=0) override;
        
        Set/Get the pixel data of an image, transmitted as RGBARGBA...
        """
        ...
    
    def GetRGBAPixelData(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.GetRGBAPixelData(int, int, int, int, int, int) -> (float, ...)
        C++: float *GetRGBAPixelData(int x, int y, int x2, int y2,
            int front, int right=0) override;
        V.GetRGBAPixelData(int, int, int, int, int, vtkFloatArray, int)
            -> int
        C++: int GetRGBAPixelData(int x, int y, int x2, int y2, int front,
             vtkFloatArray *data, int right=0) override;
        
        Set/Get the pixel data of an image, transmitted as RGBARGBA...
        """
        ...
    
    def GetShaderCache(self):
        """
        V.GetShaderCache() -> vtkOpenGLShaderCache
        C++: vtkOpenGLShaderCache *GetShaderCache()
        
        Returns an Shader Cache object
        """
        ...
    
    def GetState(self):
        """
        V.GetState() -> vtkOpenGLState
        C++: virtual vtkOpenGLState *GetState()
        """
        ...
    
    def GetTextureUnitForTexture(self, vtkTextureObject):
        """
        V.GetTextureUnitForTexture(vtkTextureObject) -> int
        C++: int GetTextureUnitForTexture(vtkTextureObject *)
        
        Get the texture unit for a given texture object
        """
        ...
    
    def GetTextureUnitManager(self):
        """
        V.GetTextureUnitManager() -> vtkTextureUnitManager
        C++: vtkTextureUnitManager *GetTextureUnitManager()
        
        Returns its texture unit manager object. A new one will be
        created if one hasn't already been set up.
        """
        ...
    
    def GetTQuad2DVBO(self):
        """
        V.GetTQuad2DVBO() -> vtkOpenGLBufferObject
        C++: vtkOpenGLBufferObject *GetTQuad2DVBO()
        """
        ...
    
    def GetUsingSRGBColorSpace(self):
        """
        V.GetUsingSRGBColorSpace() -> bool
        C++: bool GetUsingSRGBColorSpace()
        
        Is this window/fo in sRGB colorspace
        """
        ...
    
    def GetVBOCache(self):
        """
        V.GetVBOCache() -> vtkOpenGLVertexBufferObjectCache
        C++: vtkOpenGLVertexBufferObjectCache *GetVBOCache()
        
        Returns the VBO Cache
        """
        ...
    
    def GetZbufferData(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.GetZbufferData(int, int, int, int) -> (float, ...)
        C++: float *GetZbufferData(int x1, int y1, int x2, int y2)
            override;
        V.GetZbufferData(int, int, int, int, [float, ...]) -> int
        C++: int GetZbufferData(int x1, int y1, int x2, int y2, float *z)
            override;
        V.GetZbufferData(int, int, int, int, vtkFloatArray) -> int
        C++: int GetZbufferData(int x1, int y1, int x2, int y2,
            vtkFloatArray *z) override;
        
        Set/Get the zbuffer data from an image
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize(void)
        
        Initialize the rendering window.  This will setup all
        system-specific resources.  This method and Finalize() must be
        symmetric and it should be possible to call them multiple times,
        even changing WindowId in-between.  This is what WindowRemap
        does.
        """
        ...
    
    def InitializeFromCurrentContext(self):
        """
        V.InitializeFromCurrentContext() -> bool
        C++: bool InitializeFromCurrentContext() override;
        
        Initialize the render window from the information associated with
        the currently activated OpenGL context.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsPointSpriteBugPresent(self):
        """
        V.IsPointSpriteBugPresent() -> bool
        C++: virtual bool IsPointSpriteBugPresent()
        
        Returns true if driver has an EGL/OpenGL bug that makes
        vtkChartsCoreCxx-TestChartDoubleColors and other tests to fail
        because point sprites don't work correctly (gl_PointCoord is
        undefined) unless glEnable(GL_POINT_SPRITE)
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLRenderWindow
        C++: vtkOpenGLRenderWindow *NewInstance()
        """
        ...
    
    def OpenGLInit(self):
        """
        V.OpenGLInit()
        C++: virtual void OpenGLInit()
        
        Initialize OpenGL for this window.
        """
        ...
    
    def OpenGLInitContext(self):
        """
        V.OpenGLInitContext()
        C++: virtual void OpenGLInitContext()
        """
        ...
    
    def OpenGLInitState(self):
        """
        V.OpenGLInitState()
        C++: virtual void OpenGLInitState()
        """
        ...
    
    def PopContext(self):
        """
        V.PopContext()
        C++: virtual void PopContext()
        """
        ...
    
    def PushContext(self):
        """
        V.PushContext()
        C++: virtual void PushContext()
        
        Ability to push and pop this window's context as the current
        context. The idea being to if needed make this window's context
        current and when done releasing resources restore the prior
        context.  The default implementation here is only meant as a
        backup for subclasses that lack a proper implementation.
        """
        ...
    
    def RegisterGraphicsResources(self, vtkGenericOpenGLResourceFreeCallback):
        """
        V.RegisterGraphicsResources(vtkGenericOpenGLResourceFreeCallback)
        C++: void RegisterGraphicsResources(
            vtkGenericOpenGLResourceFreeCallback *cb)
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Free up any graphics resources associated with this window a
        value of NULL means the context may already be destroyed
        """
        ...
    
    def ReleaseRGBAPixelData(self, *float):
        """
        V.ReleaseRGBAPixelData([float, ...])
        C++: void ReleaseRGBAPixelData(float *data) override;
        
        Set/Get the pixel data of an image, transmitted as RGBARGBA...
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: void Render() override;
        
        Handle opengl specific code and calls superclass
        """
        ...
    
    def ReportCapabilities(self):
        """
        V.ReportCapabilities() -> string
        C++: const char *ReportCapabilities() override;
        
        Get report of capabilities for the render window
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLRenderWindow
        C++: static vtkOpenGLRenderWindow *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGlobalMaximumNumberOfMultiSamples(self, p_int):
        """
        V.SetGlobalMaximumNumberOfMultiSamples(int)
        C++: static void SetGlobalMaximumNumberOfMultiSamples(int val)
        
        Set/Get the maximum number of multisamples
        """
        ...
    
    def SetPixelData(self, p_int, p_int_1, p_int_2, p_int_3, *int, **kwargs):
        """
        V.SetPixelData(int, int, int, int, [int, ...], int, int) -> int
        C++: int SetPixelData(int x, int y, int x2, int y2,
            unsigned char *data, int front, int right) override;
        V.SetPixelData(int, int, int, int, vtkUnsignedCharArray, int, int)
             -> int
        C++: int SetPixelData(int x, int y, int x2, int y2,
            vtkUnsignedCharArray *data, int front, int right) override;
        
        Set/Get the pixel data of an image, transmitted as RGBRGB...
        """
        ...
    
    def SetRGBACharPixelData(self, p_int, p_int_1, p_int_2, p_int_3, *int, **kwargs):
        """
        V.SetRGBACharPixelData(int, int, int, int, [int, ...], int, int,
            int) -> int
        C++: int SetRGBACharPixelData(int x, int y, int x2, int y2,
            unsigned char *data, int front, int blend=0, int right=0)
            override;
        V.SetRGBACharPixelData(int, int, int, int, vtkUnsignedCharArray,
            int, int, int) -> int
        C++: int SetRGBACharPixelData(int x, int y, int x2, int y2,
            vtkUnsignedCharArray *data, int front, int blend=0,
            int right=0) override;
        
        Set/Get the pixel data of an image, transmitted as RGBARGBA...
        """
        ...
    
    def SetRGBAPixelData(self, p_int, p_int_1, p_int_2, p_int_3, *float, **kwargs):
        """
        V.SetRGBAPixelData(int, int, int, int, [float, ...], int, int,
            int) -> int
        C++: int SetRGBAPixelData(int x, int y, int x2, int y2,
            float *data, int front, int blend=0, int right=0) override;
        V.SetRGBAPixelData(int, int, int, int, vtkFloatArray, int, int,
            int) -> int
        C++: int SetRGBAPixelData(int x, int y, int x2, int y2,
            vtkFloatArray *data, int front, int blend=0, int right=0)
            override;
        
        Set/Get the pixel data of an image, transmitted as RGBARGBA...
        """
        ...
    
    def SetSize(self, p_int, p_int_1):
        """
        V.SetSize(int, int)
        C++: void SetSize(int width, int height) override;
        V.SetSize([int, int])
        C++: void SetSize(int a[2]) override;
        
        Set the size (width and height) of the rendering window in screen
        coordinates (in pixels). This resizes the operating system's
        view/window and redraws it.
        
        If the size has changed, this method will fire
        vtkCommand::WindowResizeEvent.
        """
        ...
    
    def SetSwapControl(self, p_int):
        """
        V.SetSwapControl(int) -> bool
        C++: virtual bool SetSwapControl(int)
        
        Set the number of vertical syncs required between frames. A value
        of 0 means swap buffers as quickly as possible regardless of the
        vertical refresh. A value of 1 means swap buffers in sync with
        the vertical refresh to eliminate tearing. A value of -1 means
        use a value of 1 unless we missed a frame in which case swap
        immediately. Returns true if the call succeeded.
        """
        ...
    
    def SetZbufferData(self, p_int, p_int_1, p_int_2, p_int_3, *float):
        """
        V.SetZbufferData(int, int, int, int, [float, ...]) -> int
        C++: int SetZbufferData(int x1, int y1, int x2, int y2,
            float *buffer) override;
        V.SetZbufferData(int, int, int, int, vtkFloatArray) -> int
        C++: int SetZbufferData(int x1, int y1, int x2, int y2,
            vtkFloatArray *buffer) override;
        
        Set/Get the zbuffer data from an image
        """
        ...
    
    def Start(self):
        """
        V.Start()
        C++: void Start(void) override;
        
        Begin the rendering process.
        """
        ...
    
    def StereoMidpoint(self):
        """
        V.StereoMidpoint()
        C++: void StereoMidpoint() override;
        
        Intermediate method performs operations required between the
        rendering of the left and right eye.
        """
        ...
    
    def SupportsOpenGL(self):
        """
        V.SupportsOpenGL() -> int
        C++: int SupportsOpenGL() override;
        
        Does this render window support OpenGL? 0-false, 1-true
        """
        ...
    
    def UnregisterGraphicsResources(self, vtkGenericOpenGLResourceFreeCallback):
        """
        V.UnregisterGraphicsResources(
            vtkGenericOpenGLResourceFreeCallback)
        C++: void UnregisterGraphicsResources(
            vtkGenericOpenGLResourceFreeCallback *cb)
        """
        ...
    
    def WaitForCompletion(self):
        """
        V.WaitForCompletion()
        C++: void WaitForCompletion() override;
        
        Block the thread until the actual rendering is finished(). Useful
        for measurement only.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


