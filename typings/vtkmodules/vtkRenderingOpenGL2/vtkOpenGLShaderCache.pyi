"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkOpenGLShaderCache(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkOpenGLShaderCache - manage Shader Programs within a context
    
    Superclass: vtkObject
    
    vtkOpenGLShaderCache manages shader program compilation and binding
    """
    def ClearLastShaderBound(self):
        """
        V.ClearLastShaderBound()
        C++: virtual void ClearLastShaderBound()
        
        Get/Clear the last Shader bound, called by shaders as they
        release their graphics resources
        """
        ...
    
    def GetLastShaderBound(self):
        """
        V.GetLastShaderBound() -> vtkShaderProgram
        C++: virtual vtkShaderProgram *GetLastShaderBound()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLShaderCache
        C++: vtkOpenGLShaderCache *NewInstance()
        """
        ...
    
    def ReadyShaderProgram(self, string, string_1, string_2, vtkTransformFeedback):
        """
        V.ReadyShaderProgram(string, string, string, vtkTransformFeedback)
             -> vtkShaderProgram
        C++: virtual vtkShaderProgram *ReadyShaderProgram(
            const char *vertexCode, const char *fragmentCode,
            const char *geometryCode, vtkTransformFeedback *cap=nullptr)
        V.ReadyShaderProgram(vtkShaderProgram, vtkTransformFeedback)
            -> vtkShaderProgram
        C++: virtual vtkShaderProgram *ReadyShaderProgram(
            vtkShaderProgram *shader, vtkTransformFeedback *cap=nullptr)
        """
        ...
    
    def ReleaseCurrentShader(self):
        """
        V.ReleaseCurrentShader()
        C++: void ReleaseCurrentShader()
        
        Release the current shader.  Basically go back to having no
        shaders loaded.  This is useful for old legacy code that relies
        on no shaders being loaded.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *win)
        
        Free up any resources being used by the provided shader
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLShaderCache
        C++: static vtkOpenGLShaderCache *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetElapsedTime(self, p_float):
        """
        V.SetElapsedTime(float)
        C++: void SetElapsedTime(float val)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


