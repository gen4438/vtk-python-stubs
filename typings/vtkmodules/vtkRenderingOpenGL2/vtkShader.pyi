"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkShader(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkShader - encapsulate a glsl shader
    
    Superclass: vtkObject
    
    vtkShader represents a shader, vertex, fragment, geometry etc
    """
    def Cleanup(self):
        """
        V.Cleanup()
        C++: void Cleanup()
        
        Delete the shader.
        
        ote This should only be done once the ShaderProgram is done with
        the Shader.
        """
        ...
    
    def Compile(self):
        """
        V.Compile() -> bool
        C++: bool Compile()
        
        Compile the shader.
        
        ote A valid context must to current in order to compile the
        shader.
        """
        ...
    
    def GetError(self):
        """
        V.GetError() -> string
        C++: std::string GetError()
        
        Get the error message (empty if none) for the shader.
        """
        ...
    
    def GetHandle(self):
        """
        V.GetHandle() -> int
        C++: int GetHandle()
        
        Get the handle of the shader.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSource(self):
        """
        V.GetSource() -> string
        C++: std::string GetSource()
        
        Get the source for the shader.
        """
        ...
    
    def GetType(self):
        """
        V.GetType() -> Type
        C++: Type GetType()
        
        Get the shader type, typically Vertex or Fragment.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkShader
        C++: vtkShader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkShader
        C++: static vtkShader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetSource(self, string):
        """
        V.SetSource(string)
        C++: void SetSource(const std::string &source)
        
        Set the shader source to the supplied string.
        """
        ...
    
    def SetType(self, Type):
        """
        V.SetType(Type)
        C++: void SetType(Type type)
        
        Set the shader type.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Fragment = ...
    Geometry = ...
    Type = ...
    Unknown = ...
    Vertex = ...
    __dict__ = ...
    __vtkname__ = ...


