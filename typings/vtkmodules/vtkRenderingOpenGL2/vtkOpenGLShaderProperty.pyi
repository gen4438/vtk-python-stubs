"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLShaderProperty(__vtkmodules_vtkRenderingCore.vtkShaderProperty):
    """
    vtkOpenGLShaderProperty - represent GPU shader properties
    
    Superclass: vtkShaderProperty
    
    vtkOpenGLShaderProperty is used to hold user-defined modifications of
    a GPU shader program used in a mapper.
    
    @sa
    vtkShaderProperty vtkUniforms vtkOpenGLUniform
    
    @par Thanks: Developed by Simon Drouin (sdrouin2@bwh.harvard.edu) at
    Brigham and Women's Hospital.
    """
    def AddFragmentShaderReplacement(self, string, bool, string_1, bool_1):
        """
        V.AddFragmentShaderReplacement(string, bool, string, bool)
        C++: virtual void AddFragmentShaderReplacement(
            const std::string &originalValue, bool replaceFirst,
            const std::string &replacementValue, bool replaceAll)
            override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def AddGeometryShaderReplacement(self, string, bool, string_1, bool_1):
        """
        V.AddGeometryShaderReplacement(string, bool, string, bool)
        C++: virtual void AddGeometryShaderReplacement(
            const std::string &originalValue, bool replaceFirst,
            const std::string &replacementValue, bool replaceAll)
            override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def AddShaderReplacement(self, vtkShader_Type, string, bool, string_1, bool_1):
        """
        V.AddShaderReplacement(vtkShader.Type, string, bool, string, bool)
        C++: void AddShaderReplacement(vtkShader::Type shaderType,
            const std::string &originalValue, bool replaceFirst,
            const std::string &replacementValue, bool replaceAll)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def AddVertexShaderReplacement(self, string, bool, string_1, bool_1):
        """
        V.AddVertexShaderReplacement(string, bool, string, bool)
        C++: virtual void AddVertexShaderReplacement(
            const std::string &originalValue, bool replaceFirst,
            const std::string &replacementValue, bool replaceAll)
            override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllFragmentShaderReplacements(self):
        """
        V.ClearAllFragmentShaderReplacements()
        C++: void ClearAllFragmentShaderReplacements() override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllGeometryShaderReplacements(self):
        """
        V.ClearAllGeometryShaderReplacements()
        C++: void ClearAllGeometryShaderReplacements() override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllShaderReplacements(self):
        """
        V.ClearAllShaderReplacements()
        C++: void ClearAllShaderReplacements() override;
        V.ClearAllShaderReplacements(vtkShader.Type)
        C++: void ClearAllShaderReplacements(vtkShader::Type shaderType)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllVertexShaderReplacements(self):
        """
        V.ClearAllVertexShaderReplacements()
        C++: void ClearAllVertexShaderReplacements() override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearFragmentShaderReplacement(self, string, bool):
        """
        V.ClearFragmentShaderReplacement(string, bool)
        C++: void ClearFragmentShaderReplacement(
            const std::string &originalValue, bool replaceFirst) override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearGeometryShaderReplacement(self, string, bool):
        """
        V.ClearGeometryShaderReplacement(string, bool)
        C++: void ClearGeometryShaderReplacement(
            const std::string &originalValue, bool replaceFirst) override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearShaderReplacement(self, vtkShader_Type, string, bool):
        """
        V.ClearShaderReplacement(vtkShader.Type, string, bool)
        C++: void ClearShaderReplacement(vtkShader::Type shaderType,
            const std::string &originalValue, bool replaceFirst)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearVertexShaderReplacement(self, string, bool):
        """
        V.ClearVertexShaderReplacement(string, bool)
        C++: void ClearVertexShaderReplacement(
            const std::string &originalValue, bool replaceFirst) override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def DeepCopy(self, vtkOpenGLShaderProperty):
        """
        V.DeepCopy(vtkOpenGLShaderProperty)
        C++: void DeepCopy(vtkOpenGLShaderProperty *p)
        
        Assign one property to another.
        """
        ...
    
    def GetNthShaderReplacement(self, p_int, string, bool, string_1, bool_1):
        """
        V.GetNthShaderReplacement(int, string, bool, string, bool)
        C++: void GetNthShaderReplacement(vtkIdType index,
            std::string &name, bool &replaceFirst,
            std::string &replacementValue, bool &replaceAll) override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def GetNthShaderReplacementTypeAsString(self, p_int):
        """
        V.GetNthShaderReplacementTypeAsString(int) -> string
        C++: std::string GetNthShaderReplacementTypeAsString(
            vtkIdType index) override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfShaderReplacements(self):
        """
        V.GetNumberOfShaderReplacements() -> int
        C++: int GetNumberOfShaderReplacements() override;
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLShaderProperty
        C++: vtkOpenGLShaderProperty *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLShaderProperty
        C++: static vtkOpenGLShaderProperty *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


