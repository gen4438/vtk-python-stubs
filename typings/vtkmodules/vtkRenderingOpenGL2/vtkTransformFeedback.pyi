"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkTransformFeedback(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkTransformFeedback - Manages a TransformFeedback buffer.
    
    Superclass: vtkObject
    
    OpenGL's TransformFeedback allows varying attributes from a
    vertex/geometry shader to be captured into a buffer for later
    processing. This is used in VTK to capture vertex information during
    GL2PS export when using the OpenGL2 backend as a replacement for the
    deprecated OpenGL feedback buffer.
    """
    def AddVarying(self, VaryingRole, string):
        """
        V.AddVarying(VaryingRole, string)
        C++: void AddVarying(VaryingRole role, const std::string &var)
        
        Capture the varying 'var' with the indicated role.
        """
        ...
    
    def Allocate(self, p_int, p_int_1, p_int_2):
        """
        V.Allocate(int, int, int)
        C++: void Allocate(int nbBuffers, size_t size, unsigned int hint)
        
        Generates and allocates the transform feedback buffers. Must be
        called before BindBuffer. This releases old buffers. nbBuffers is
        the number of buffers to allocate. size if the size in byte to
        allocate per buffer. hint is the type of buffer (for example,
        GL_DYNAMIC_COPY)
        """
        ...
    
    def BindBuffer(self, bool):
        """
        V.BindBuffer(bool)
        C++: void BindBuffer(bool allocateOneBuffer=true)
        
        Binds the feedback buffer, then call glBeginTransformFeedback
        with the specified PrimitiveMode. Must be called after
        BindVaryings and before any relevant glDraw commands. If
        allocateOneBuffer is true, allocates 1 buffer (used for retro
        compatibility).
        """
        ...
    
    def BindVaryings(self, vtkShaderProgram):
        """
        V.BindVaryings(vtkShaderProgram)
        C++: void BindVaryings(vtkShaderProgram *prog)
        
        GL_SEPARATE_ATTRIBS is not supported yet. The bufferMode argument
        to glTransformFeedbackVaryings. Must be GL_INTERLEAVED_ATTRIBS or
        GL_SEPARATE_ATTRIBS. Default is interleaved. Must be set prior to
        calling BindVaryings. vtkSetMacro(BufferMode, int);
        vtkGetMacro(BufferMode, int);
        
        Call glTransformFeedbackVaryings(). Must be called after the
        shaders are attached to prog, but before the program is linked.
        """
        ...
    
    def ClearVaryings(self):
        """
        V.ClearVaryings()
        C++: void ClearVaryings()
        
        Clear the list of varying attributes to capture.
        """
        ...
    
    def GetBuffer(self, p_int):
        """
        V.GetBuffer(int) -> vtkOpenGLBufferObject
        C++: vtkOpenGLBufferObject *GetBuffer(int index)
        
        Get the transform buffer object. Only valid after calling
        BindBuffer.
        """
        ...
    
    def GetBufferData(self):
        """
        V.GetBufferData() -> void
        C++: virtual void *GetBufferData()
        
        Get the transform buffer data as a void pointer. Only valid after
        calling ReadBuffer.
        """
        ...
    
    def GetBufferHandle(self, p_int):
        """
        V.GetBufferHandle(int) -> int
        C++: int GetBufferHandle(int index=0)
        
        Get the transform buffer object handle. Only valid after calling
        BindBuffer.
        """
        ...
    
    def GetBufferSize(self):
        """
        V.GetBufferSize() -> int
        C++: size_t GetBufferSize()
        
        The size (in bytes) of the capture buffer. Available after adding
        all Varyings and setting NumberOfVertices.
        """
        ...
    
    def GetBytesPerVertex(self, VaryingRole):
        """
        V.GetBytesPerVertex(VaryingRole) -> int
        C++: static size_t GetBytesPerVertex(VaryingRole role)
        V.GetBytesPerVertex() -> int
        C++: size_t GetBytesPerVertex()
        
        Returns the number of data elements each vertex requires for a
        given role.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfVertices(self):
        """
        V.GetNumberOfVertices() -> int
        C++: virtual size_t GetNumberOfVertices()
        
        The number of vertices expected to be captured. If the drawMode
        setter is used, PrimitiveMode will also be set appropriately. For
        the single argument version set function, set the exact number of
        vertices expected to be emitted, accounting for primitive
        expansion (e.g. triangle strips -> triangle strips). The two
        argument setter is for convenience. Given the number of vertices
        used as input to a draw command and the draw mode, it will
        calculate the total number of vertices.
        """
        ...
    
    def GetPrimitiveMode(self):
        """
        V.GetPrimitiveMode() -> int
        C++: virtual int GetPrimitiveMode()
        
        The type of primitive to capture. Must be one of GL_POINTS,
        GL_LINES, or GL_TRIANGLES. Default is GL_POINTS. Must be set
        prior to calling BindBuffer.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTransformFeedback
        C++: vtkTransformFeedback *NewInstance()
        """
        ...
    
    def ReadBuffer(self, p_int):
        """
        V.ReadBuffer(int)
        C++: void ReadBuffer(int index=0)
        
        Calls glEndTransformFeedback(), flushes the OpenGL command
        stream, and reads the transform feedback buffer into BufferData.
        Must be called after any relevant glDraw commands. If index is
        positive, data of specified buffer is copied to BufferData.
        """
        ...
    
    def ReleaseBufferData(self, bool):
        """
        V.ReleaseBufferData(bool)
        C++: void ReleaseBufferData(bool freeBuffer=true)
        
        Release the memory used by the buffer data. If freeBuffer == true
        (default), the data is deleted. If false, the caller is
        responsible for deleting the BufferData with delete[].
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: void ReleaseGraphicsResources()
        
        Release any graphics resources used by this object.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTransformFeedback
        C++: static vtkTransformFeedback *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfVertices(self, p_int):
        """
        V.SetNumberOfVertices(int)
        C++: virtual void SetNumberOfVertices(size_t _arg)
        V.SetNumberOfVertices(int, int)
        C++: void SetNumberOfVertices(int drawMode, size_t inputVerts)
        
        The number of vertices expected to be captured. If the drawMode
        setter is used, PrimitiveMode will also be set appropriately. For
        the single argument version set function, set the exact number of
        vertices expected to be emitted, accounting for primitive
        expansion (e.g. triangle strips -> triangle strips). The two
        argument setter is for convenience. Given the number of vertices
        used as input to a draw command and the draw mode, it will
        calculate the total number of vertices.
        """
        ...
    
    def SetPrimitiveMode(self, p_int):
        """
        V.SetPrimitiveMode(int)
        C++: virtual void SetPrimitiveMode(int _arg)
        
        The type of primitive to capture. Must be one of GL_POINTS,
        GL_LINES, or GL_TRIANGLES. Default is GL_POINTS. Must be set
        prior to calling BindBuffer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Color_RGBA_F = ...
    Next_Buffer = ...
    Normal_F = ...
    VaryingRole = ...
    Vertex_ClipCoordinate_F = ...
    __dict__ = ...
    __vtkname__ = ...


