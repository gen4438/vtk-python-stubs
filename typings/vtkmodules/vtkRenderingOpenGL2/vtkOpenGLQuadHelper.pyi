"""
This type stub file was generated by pyright.
"""

from .object import object

class vtkOpenGLQuadHelper(object):
    """
    vtkOpenGLQuadHelper - Class to make rendering a full screen quad
    easier
    
    vtkOpenGLQuadHelper is designed to be used by classes in VTK that
    need to render a quad to the screen with a shader program. This
    happens often with render passes or other advanced rendering
    techniques.
    
    Note that when releasing graphics resources instances of this class
    should be destroyed. A common use pattern is to conditionally create
    the instance where used and delete it in ReleaseGraphicsResources and
    the destructor.
    
    Example usage:if (!this->QuadHelper)
    {
      this->QuadHelper = vtkOpenGLQualHelper(renWin, vs, fs, gs);
    }
    renWin->GetShaderCache()->ReadyShaderProgram(this->QuadHelper->Program
    );
    aTexture->Activate();
    this->QuadHelper->Program->SetUniformi("aTexture",
    aTexture->GetTextureUnit());
    this->QuadHelper->Render();
    aTexture->Deactivate();
    
    @sa vtkOpenGLRenderUtilities
    
    vtkOpenGLQuadHelper(vtkOpenGLRenderWindow *, const char *vs,
        const char *fs, const char *gs)
    """
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *)
        
        Release graphics resources. In general, there's no need to call
        this explicitly, since vtkOpenGLQuadHelper will invoke it
        appropriately when needed.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: void Render()
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, vtkOpenGLRenderWindow, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


