"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLHardwareSelector(__vtkmodules_vtkRenderingCore.vtkHardwareSelector):
    """
    vtkOpenGLHardwareSelector - implements the device specific code of
     vtkOpenGLHardwareSelector.
    
    Superclass: vtkHardwareSelector
    
    Implements the device specific code of vtkOpenGLHardwareSelector.
    
    @sa
    vtkHardwareSelector
    """
    def BeginRenderProp(self):
        """
        V.BeginRenderProp()
        C++: void BeginRenderProp() override;
        
        Called by the mapper before and after rendering each prop.
        """
        ...
    
    def BeginSelection(self):
        """
        V.BeginSelection()
        C++: void BeginSelection() override;
        """
        ...
    
    def EndRenderProp(self):
        """
        V.EndRenderProp()
        C++: void EndRenderProp() override;
        
        Called by the mapper before and after rendering each prop.
        """
        ...
    
    def EndSelection(self):
        """
        V.EndSelection()
        C++: void EndSelection() override;
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLHardwareSelector
        C++: vtkOpenGLHardwareSelector *NewInstance()
        """
        ...
    
    def RenderCompositeIndex(self, p_int):
        """
        V.RenderCompositeIndex(int)
        C++: void RenderCompositeIndex(unsigned int index) override;
        
        Called by any vtkMapper or vtkProp subclass to render a
        composite-index. Currently indices >= 0xffffff are not supported.
        """
        ...
    
    def RenderProcessId(self, p_int):
        """
        V.RenderProcessId(int)
        C++: void RenderProcessId(unsigned int processid) override;
        
        Called by any vtkMapper or subclass to render process id. This
        has any effect when this->UseProcessIdFromData is true.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLHardwareSelector
        C++: static vtkOpenGLHardwareSelector *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


