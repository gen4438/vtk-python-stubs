"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLFluidMapper(__vtkmodules_vtkRenderingCore.vtkAbstractVolumeMapper):
    """
    vtkOpenGLFluidMapper - Render fluid from position data (and color, if
    available)
    
    Superclass: vtkAbstractVolumeMapper
    
    An OpenGL mapper that display fluid volume using a screen space fluid
    rendering technique. Thanks to Nghia Truong for the algorihtm and
    initial implementation.
    """
    def GetAdditionalReflection(self):
        """
        V.GetAdditionalReflection() -> float
        C++: virtual float GetAdditionalReflection()
        
        Get/Set the fluid surface additional reflection scale This value
        is in [0, 1], which 0 means using the reflection color computed
        from fresnel equation, and 1 means using reflection color as [1,
        1, 1] Default value is 0
        """
        ...
    
    def GetAttenuationColor(self):
        """
        V.GetAttenuationColor() -> (float, float, float)
        C++: virtual float *GetAttenuationColor()
        
        Get/Set the fluid attenuation color (color that will be absorpted
        exponentially when going through the fluid volume)
        """
        ...
    
    def GetAttenuationScale(self):
        """
        V.GetAttenuationScale() -> float
        C++: virtual float GetAttenuationScale()
        
        Get/Set the fluid volume attenuation scale, which will be
        multiplied with attennuation color Default value is 1.0, and can
        be set to any non-negative number The larger attennuation scale,
        the darker fluid color
        """
        ...
    
    def GetDisplayMode(self):
        """
        V.GetDisplayMode() -> vtkOpenGLFluidMapper.FluidDisplayMode
        C++: virtual vtkOpenGLFluidMapper::FluidDisplayMode GetDisplayMode(
            )
        
        Get/Set the display mode
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        
        Specify the input data to map.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpaqueColor(self):
        """
        V.GetOpaqueColor() -> (float, float, float)
        C++: virtual float *GetOpaqueColor()
        
        Get/Set the fluid surface color if rendered in opaque surface
        mode without particle color
        """
        ...
    
    def GetParticleColorPower(self):
        """
        V.GetParticleColorPower() -> float
        C++: virtual float GetParticleColorPower()
        
        Get/Set the power value for particle color if input data has
        particle color Default value is 0.1, and can be set to any
        non-negative number The particle color is then recomputed as
        newColor = pow(oldColor, power) * scale
        """
        ...
    
    def GetParticleColorScale(self):
        """
        V.GetParticleColorScale() -> float
        C++: virtual float GetParticleColorScale()
        
        Get/Set the scale value for particle color if input data has
        particle color Default value is 1.0, and can be set to any
        non-negative number The particle color is then recomputed as
        newColor = pow(oldColor, power) * scale
        """
        ...
    
    def GetParticleRadius(self):
        """
        V.GetParticleRadius() -> float
        C++: virtual float GetParticleRadius()
        
        Set/Get the particle radius, must be explicitly set by user To
        fuse the gaps between particles and obtain a smooth surface, this
        parameter need to be slightly larger than the actual particle
        radius, (particle radius is the half distance between two
        consecutive particles in regular pattern sampling)
        """
        ...
    
    def GetRefractionScale(self):
        """
        V.GetRefractionScale() -> float
        C++: virtual float GetRefractionScale()
        
        Get/Set the scale value for refraction This is needed for tweak
        refraction of volumes with different size scales For example,
        fluid volume having diameter of 100.0 will refract light much
        more than volume with diameter 1.0 This value is in [0, 1],
        default value is 1.0
        """
        ...
    
    def GetRefractiveIndex(self):
        """
        V.GetRefractiveIndex() -> float
        C++: virtual float GetRefractiveIndex()
        
        Get/Set the fluid refraction index. The default value is 1.33
        (water)
        """
        ...
    
    def GetScalarVisibility(self):
        """
        V.GetScalarVisibility() -> bool
        C++: virtual bool GetScalarVisibility()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def GetSurfaceFilterMethod(self):
        """
        V.GetSurfaceFilterMethod()
            -> vtkOpenGLFluidMapper.FluidSurfaceFilterMethod
        C++: virtual vtkOpenGLFluidMapper::FluidSurfaceFilterMethod GetSurfaceFilterMethod(
            )
        
        Get/Set the filter method for filtering fluid surface
        """
        ...
    
    def GetThicknessAndVolumeColorFilterRadius(self):
        """
        V.GetThicknessAndVolumeColorFilterRadius() -> float
        C++: virtual float GetThicknessAndVolumeColorFilterRadius()
        
        Get/Set the filter radius to filter the volume thickness and
        particle color This is an optional parameter, default value is 10
        (pixels)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLFluidMapper
        C++: vtkOpenGLFluidMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Release graphics resources and ask components to release their
        own resources.
        \pre w_exists: w!=0
        """
        ...
    
    def Render(self, vtkRenderer, vtkVolume):
        """
        V.Render(vtkRenderer, vtkVolume)
        C++: void Render(vtkRenderer *ren, vtkVolume *vol) override;
        
        This calls RenderPiece
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLFluidMapper
        C++: static vtkOpenGLFluidMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalarVisibilityOff(self):
        """
        V.ScalarVisibilityOff()
        C++: virtual void ScalarVisibilityOff()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def ScalarVisibilityOn(self):
        """
        V.ScalarVisibilityOn()
        C++: virtual void ScalarVisibilityOn()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def SetAdditionalReflection(self, p_float):
        """
        V.SetAdditionalReflection(float)
        C++: virtual void SetAdditionalReflection(float _arg)
        
        Get/Set the fluid surface additional reflection scale This value
        is in [0, 1], which 0 means using the reflection color computed
        from fresnel equation, and 1 means using reflection color as [1,
        1, 1] Default value is 0
        """
        ...
    
    def SetAttenuationColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetAttenuationColor(float, float, float)
        C++: virtual void SetAttenuationColor(float _arg1, float _arg2,
            float _arg3)
        V.SetAttenuationColor((float, float, float))
        C++: virtual void SetAttenuationColor(const float _arg[3])
        
        Get/Set the fluid attenuation color (color that will be absorpted
        exponentially when going through the fluid volume)
        """
        ...
    
    def SetAttenuationScale(self, p_float):
        """
        V.SetAttenuationScale(float)
        C++: virtual void SetAttenuationScale(float _arg)
        
        Get/Set the fluid volume attenuation scale, which will be
        multiplied with attennuation color Default value is 1.0, and can
        be set to any non-negative number The larger attennuation scale,
        the darker fluid color
        """
        ...
    
    def SetBilateralGaussianFilterParameter(self, p_float):
        """
        V.SetBilateralGaussianFilterParameter(float)
        C++: void SetBilateralGaussianFilterParameter(float sigmaDepth)
        
        Optional parameters, exclusively for bilateral gaussian filter
        The parameter is for controlling smoothing between surface depth
        values
        """
        ...
    
    def SetDisplayMode(self, vtkOpenGLFluidMapper_FluidDisplayMode):
        """
        V.SetDisplayMode(vtkOpenGLFluidMapper.FluidDisplayMode)
        C++: virtual void SetDisplayMode(
            vtkOpenGLFluidMapper::FluidDisplayMode _arg)
        
        Get/Set the display mode
        """
        ...
    
    def SetInputData(self, vtkPolyData):
        """
        V.SetInputData(vtkPolyData)
        C++: void SetInputData(vtkPolyData *in)
        
        Specify the input data to map.
        """
        ...
    
    def SetNarrowRangeFilterParameters(self, p_float, p_float_1):
        """
        V.SetNarrowRangeFilterParameters(float, float)
        C++: void SetNarrowRangeFilterParameters(float lambda, float mu)
        
        Optional parameters, exclusively for narrow range filter The
        first parameter is to control smoothing between surface depth
        values The second parameter is to control curvature of the
        surface edges
        """
        ...
    
    def SetOpaqueColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetOpaqueColor(float, float, float)
        C++: virtual void SetOpaqueColor(float _arg1, float _arg2,
            float _arg3)
        V.SetOpaqueColor((float, float, float))
        C++: virtual void SetOpaqueColor(const float _arg[3])
        
        Get/Set the fluid surface color if rendered in opaque surface
        mode without particle color
        """
        ...
    
    def SetParticleColorPower(self, p_float):
        """
        V.SetParticleColorPower(float)
        C++: virtual void SetParticleColorPower(float _arg)
        
        Get/Set the power value for particle color if input data has
        particle color Default value is 0.1, and can be set to any
        non-negative number The particle color is then recomputed as
        newColor = pow(oldColor, power) * scale
        """
        ...
    
    def SetParticleColorScale(self, p_float):
        """
        V.SetParticleColorScale(float)
        C++: virtual void SetParticleColorScale(float _arg)
        
        Get/Set the scale value for particle color if input data has
        particle color Default value is 1.0, and can be set to any
        non-negative number The particle color is then recomputed as
        newColor = pow(oldColor, power) * scale
        """
        ...
    
    def SetParticleRadius(self, p_float):
        """
        V.SetParticleRadius(float)
        C++: virtual void SetParticleRadius(float _arg)
        
        Set/Get the particle radius, must be explicitly set by user To
        fuse the gaps between particles and obtain a smooth surface, this
        parameter need to be slightly larger than the actual particle
        radius, (particle radius is the half distance between two
        consecutive particles in regular pattern sampling)
        """
        ...
    
    def SetRefractionScale(self, p_float):
        """
        V.SetRefractionScale(float)
        C++: virtual void SetRefractionScale(float _arg)
        
        Get/Set the scale value for refraction This is needed for tweak
        refraction of volumes with different size scales For example,
        fluid volume having diameter of 100.0 will refract light much
        more than volume with diameter 1.0 This value is in [0, 1],
        default value is 1.0
        """
        ...
    
    def SetRefractiveIndex(self, p_float):
        """
        V.SetRefractiveIndex(float)
        C++: virtual void SetRefractiveIndex(float _arg)
        
        Get/Set the fluid refraction index. The default value is 1.33
        (water)
        """
        ...
    
    def SetScalarVisibility(self, bool):
        """
        V.SetScalarVisibility(bool)
        C++: virtual void SetScalarVisibility(bool _arg)
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def SetSurfaceFilterMethod(self, vtkOpenGLFluidMapper_FluidSurfaceFilterMethod):
        """
        V.SetSurfaceFilterMethod(
            vtkOpenGLFluidMapper.FluidSurfaceFilterMethod)
        C++: virtual void SetSurfaceFilterMethod(
            vtkOpenGLFluidMapper::FluidSurfaceFilterMethod _arg)
        
        Get/Set the filter method for filtering fluid surface
        """
        ...
    
    def SetThicknessAndVolumeColorFilterRadius(self, p_float):
        """
        V.SetThicknessAndVolumeColorFilterRadius(float)
        C++: virtual void SetThicknessAndVolumeColorFilterRadius(
            float _arg)
        
        Get/Set the filter radius to filter the volume thickness and
        particle color This is an optional parameter, default value is 10
        (pixels)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BilateralGaussian = ...
    FilteredOpaqueSurface = ...
    FilteredSurfaceNormal = ...
    FluidDisplayMode = ...
    FluidSurfaceFilterMethod = ...
    NarrowRange = ...
    NumDisplayModes = ...
    NumFilterMethods = ...
    TransparentFluidVolume = ...
    UnfilteredOpaqueSurface = ...
    UnfilteredSurfaceNormal = ...
    __dict__ = ...
    __vtkname__ = ...


