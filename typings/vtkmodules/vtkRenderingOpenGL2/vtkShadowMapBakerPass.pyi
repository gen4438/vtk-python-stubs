"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLRenderPass import vtkOpenGLRenderPass

class vtkShadowMapBakerPass(vtkOpenGLRenderPass):
    """
    vtkShadowMapBakerPass - Implement a builder of shadow map pass.
    
    Superclass: vtkOpenGLRenderPass
    
    Bake a list of shadow maps, once per spot light. It work in
    conjunction with the vtkShadowMapPass, which uses the shadow maps for
    rendering the opaque geometry (a technique to render hard shadows in
    hardware).
    
    This pass expects an initialized depth buffer and color buffer.
    Initialized buffers means they have been cleared with farest z-value
    and background color/gradient/transparent color. An opaque pass may
    have been performed right after the initialization.
    
    Its delegate is usually set to a vtkOpaquePass.
    
    @par Implementation: The first pass of the algorithm is to generate a
    shadow map per light (depth map from the light point of view) by
    rendering the opaque objects
    
    @sa
    vtkRenderPass, vtkOpaquePass, vtkShadowMapPass
    """
    def GetCompositeZPass(self):
        """
        V.GetCompositeZPass() -> vtkRenderPass
        C++: virtual vtkRenderPass *GetCompositeZPass()
        
        Delegate for compositing of the shadow maps across processors. If
        it is NULL, there is no z compositing. It is usually set to a
        vtkCompositeZPass (Parallel package). Initial value is a NULL
        pointer.
        """
        ...
    
    def GetHasShadows(self):
        """
        V.GetHasShadows() -> bool
        C++: bool GetHasShadows()
        
        INTERNAL USE ONLY. Internally used by vtkShadowMapBakerPass and
        vtkShadowMapPass.
        
        * Tell if there is at least one shadow.
        * Initial value is false.
        """
        ...
    
    def GetNeedUpdate(self):
        """
        V.GetNeedUpdate() -> bool
        C++: bool GetNeedUpdate()
        
        INTERNAL USE ONLY. Internally used by vtkShadowMapBakerPass and
        vtkShadowMapPass.
        
        * Do the shadows need to be updated?
        * Value changed by vtkShadowMapBakerPass and used by
          vtkShadowMapPass.
        * Initial value is true.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpaqueSequence(self):
        """
        V.GetOpaqueSequence() -> vtkRenderPass
        C++: virtual vtkRenderPass *GetOpaqueSequence()
        
        Delegate for rendering the camera, lights, and opaque geometry.
        If it is NULL, nothing will be rendered and a warning will be
        emitted. It defaults to a vtkCameraPass with a sequence of
        vtkLightPass/vtkOpaquePass.
        """
        ...
    
    def GetResolution(self):
        """
        V.GetResolution() -> int
        C++: virtual unsigned int GetResolution()
        
        Set/Get the number of pixels in each dimension of the shadow maps
        (shadow maps are square). Initial value is 256. The greater the
        better. Resolution does not have to be a power-of-two value.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LightCreatesShadow(self, vtkLight):
        """
        V.LightCreatesShadow(vtkLight) -> bool
        C++: bool LightCreatesShadow(vtkLight *l)
        
        INTERNAL USE ONLY. Internally used by vtkShadowMapBakerPass and
        vtkShadowMapPass.
        
        * Tell if the light `l' can create shadows.
        * The light has to not be a head light and to be directional or
        * positional with an angle less than 180 degrees.
        * \pre l_exists: l!=0
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkShadowMapBakerPass
        C++: vtkShadowMapBakerPass *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Release graphics resources and ask components to release their
        own resources.
        \pre w_exists: w!=0
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkShadowMapBakerPass
        C++: static vtkShadowMapBakerPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCompositeZPass(self, vtkRenderPass):
        """
        V.SetCompositeZPass(vtkRenderPass)
        C++: virtual void SetCompositeZPass(vtkRenderPass *compositeZPass)
        
        Delegate for compositing of the shadow maps across processors. If
        it is NULL, there is no z compositing. It is usually set to a
        vtkCompositeZPass (Parallel package). Initial value is a NULL
        pointer.
        """
        ...
    
    def SetOpaqueSequence(self, vtkRenderPass):
        """
        V.SetOpaqueSequence(vtkRenderPass)
        C++: virtual void SetOpaqueSequence(vtkRenderPass *opaqueSequence)
        
        Delegate for rendering the camera, lights, and opaque geometry.
        If it is NULL, nothing will be rendered and a warning will be
        emitted. It defaults to a vtkCameraPass with a sequence of
        vtkLightPass/vtkOpaquePass.
        """
        ...
    
    def SetResolution(self, p_int):
        """
        V.SetResolution(int)
        C++: virtual void SetResolution(unsigned int _arg)
        
        Set/Get the number of pixels in each dimension of the shadow maps
        (shadow maps are square). Initial value is 256. The greater the
        better. Resolution does not have to be a power-of-two value.
        """
        ...
    
    def SetUpToDate(self):
        """
        V.SetUpToDate()
        C++: void SetUpToDate()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


