"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLImageMapper(__vtkmodules_vtkRenderingCore.vtkImageMapper):
    """
    vtkOpenGLImageMapper - 2D image display support for OpenGL
    
    Superclass: vtkImageMapper
    
    vtkOpenGLImageMapper is a concrete subclass of vtkImageMapper that
    renders images under OpenGL
    
    @warning
    vtkOpenGLImageMapper does not support vtkBitArray, you have to
    convert the array first to vtkUnsignedCharArray (for example)
    
    @sa
    vtkImageMapper
    """
    def DrawPixels(self, vtkViewport, p_int, p_int_1, p_int_2, void):
        """
        V.DrawPixels(vtkViewport, int, int, int, void)
        C++: void DrawPixels(vtkViewport *vp, int width, int height,
            int numComponents, void *data)
        
        draw the data once it has been converted to uchar, windowed
        leveled used internally by the templated functions
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLImageMapper
        C++: vtkOpenGLImageMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        mapper, the image texture in particular.
        """
        ...
    
    def RenderData(self, vtkViewport, vtkImageData, vtkActor2D):
        """
        V.RenderData(vtkViewport, vtkImageData, vtkActor2D)
        C++: void RenderData(vtkViewport *viewport, vtkImageData *data,
            vtkActor2D *actor) override;
        
        Called by the Render function in vtkImageMapper.  Actually draws
        the image to the screen.
        """
        ...
    
    def RenderOverlay(self, vtkViewport, vtkActor2D):
        """
        V.RenderOverlay(vtkViewport, vtkActor2D)
        C++: void RenderOverlay(vtkViewport *viewport, vtkActor2D *actor)
            override;
        
        Handle the render method.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLImageMapper
        C++: static vtkOpenGLImageMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


