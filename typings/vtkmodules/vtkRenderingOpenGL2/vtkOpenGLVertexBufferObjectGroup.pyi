"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkOpenGLVertexBufferObjectGroup(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkOpenGLVertexBufferObjectGroup - manage vertex buffer objects
    shared within a mapper
    
    Superclass: vtkObject
    
    This class holds onto the VBOs that a mapper is using. The basic
    operation is that during the render process the mapper may cache a
    number of dataArrays as VBOs associated with attributes. This class
    keep track of freeing VBOs no longer used by the mapper and uploading
    new data as needed.
    
    When using CacheCataArray the same array can be set each time and
    this class will not rebuild or upload unless needed.
    
    When using the AppendDataArray API no caching is done and the VBOs
    will be rebuilt and uploaded each time. So when appending th emapper
    need to handle checking if the VBO should be updated.
    
    Use case:
      make this an ivar of your mapper
      vbg->CacheDataArray("vertexMC", vtkDataArray);
      vbg->BuildAllVBOs();
      if (vbg->GetMTime() > your VAO update time)
      {
        vbg->AddAllAttributesToVAO(...);
      }
    
    Appended Use case:
      make this an ivar of your mapper
      if (you need to update your VBOs)
      {
        vbg->ClearAllVBOs();
        vbg->AppendDataArray("vertexMC", vtkDataArray1);
        vbg->AppendDataArray("vertexMC", vtkDataArray2);
        vbg->AppendDataArray("vertexMC", vtkDataArray3);
        vbg->BuildAllVBOs();
        vbg->AddAllAttributesToVAO(...);
      }
    
    use VAO
    """
    def AddAllAttributesToVAO(self, vtkShaderProgram, vtkOpenGLVertexArrayObject):
        """
        V.AddAllAttributesToVAO(vtkShaderProgram,
            vtkOpenGLVertexArrayObject)
        C++: void AddAllAttributesToVAO(vtkShaderProgram *program,
            vtkOpenGLVertexArrayObject *vao)
        
        Attach all VBOs to their attributes
        """
        ...
    
    def AppendDataArray(self, string, vtkDataArray, p_int):
        """
        V.AppendDataArray(string, vtkDataArray, int)
        C++: void AppendDataArray(const char *attribute, vtkDataArray *da,
             int destType)
        
        Append a data array for an attribute in the VBO Group registers
        the data array until build is called
        """
        ...
    
    def ArrayExists(self, string, vtkDataArray, p_int, p_int_1):
        """
        V.ArrayExists(string, vtkDataArray, int, int) -> bool
        C++: bool ArrayExists(const char *attribute, vtkDataArray *da,
            vtkIdType &offset, vtkIdType &totalOffset)
        
        Check if the array already exists. offset is the index of the
        first vertex of the array if it exists. totalOffset is the total
        number of vertices in the appended arrays. Note that if the array
        does not exist, offset is equal to totalOffset.
        """
        ...
    
    def BuildAllVBOs(self, vtkOpenGLVertexBufferObjectCache):
        """
        V.BuildAllVBOs(vtkOpenGLVertexBufferObjectCache)
        C++: void BuildAllVBOs(vtkOpenGLVertexBufferObjectCache *)
        V.BuildAllVBOs(vtkViewport)
        C++: void BuildAllVBOs(vtkViewport *)
        
        using the data arrays in this group build all the VBOs, once this
        has been called the reference to the data arrays will be freed.
        """
        ...
    
    def CacheDataArray(self, string, vtkDataArray, vtkOpenGLVertexBufferObjectCache, p_int):
        """
        V.CacheDataArray(string, vtkDataArray,
            vtkOpenGLVertexBufferObjectCache, int)
        C++: void CacheDataArray(const char *attribute, vtkDataArray *da,
            vtkOpenGLVertexBufferObjectCache *cache, int destType)
        V.CacheDataArray(string, vtkDataArray, vtkViewport, int)
        C++: void CacheDataArray(const char *attribute, vtkDataArray *da,
            vtkViewport *vp, int destType)
        
        Set the data array for an attribute in the VBO Group registers
        the data array until build is called once this is called a valid
        VBO will exist
        """
        ...
    
    def ClearAllDataArrays(self):
        """
        V.ClearAllDataArrays()
        C++: void ClearAllDataArrays()
        
        Clear all the data arrays. Typically an internal method.
        Automatically called at the end of BuildAllVBOs to prepare for
        the next set of attributes.
        """
        ...
    
    def ClearAllVBOs(self):
        """
        V.ClearAllVBOs()
        C++: void ClearAllVBOs()
        
        Force all the VBOs to be freed from this group. Call this prior
        to starting appending operations. Not needed for single array
        caching.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the mtime of this groups VBOs
        """
        ...
    
    def GetNumberOfComponents(self, string):
        """
        V.GetNumberOfComponents(string) -> int
        C++: int GetNumberOfComponents(const char *attribute)
        
        Returns the number of components for this attribute zero if the
        attribute does not exist
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTuples(self, string):
        """
        V.GetNumberOfTuples(string) -> int
        C++: int GetNumberOfTuples(const char *attribute)
        
        Returns the number of tuples for this attribute zero if the
        attribute does not exist
        """
        ...
    
    def GetVBO(self, string):
        """
        V.GetVBO(string) -> vtkOpenGLVertexBufferObject
        C++: vtkOpenGLVertexBufferObject *GetVBO(const char *attribute)
        
        Returns the VBO for an attribute, NULL if it is not present.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLVertexBufferObjectGroup
        C++: vtkOpenGLVertexBufferObjectGroup *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *)
        
        Release any graphics resources that are being consumed by this
        mapper. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RemoveAttribute(self, string):
        """
        V.RemoveAttribute(string)
        C++: void RemoveAttribute(const char *attribute)
        
        used to remove a no longer needed attribute Calling
        CacheDataArray with a nullptr attribute will also work.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLVertexBufferObjectGroup
        C++: static vtkOpenGLVertexBufferObjectGroup *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


