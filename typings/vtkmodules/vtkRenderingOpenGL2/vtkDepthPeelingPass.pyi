"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLRenderPass import vtkOpenGLRenderPass

class vtkDepthPeelingPass(vtkOpenGLRenderPass):
    """
    vtkDepthPeelingPass - Implement Depth Peeling for use within a
    framebuffer pass
    
    Superclass: vtkOpenGLRenderPass
    
    Note that this implementation is used as a fallback for drivers that
    don't support floating point textures. Most renderings will use the
    subclass vtkDualDepthPeelingPass instead.
    
    Render the translucent polygonal geometry of a scene without sorting
    polygons in the view direction.
    
    This pass expects an initialized depth buffer and color buffer.
    Initialized buffers means they have been cleared with farest z-value
    and background color/gradient/transparent color. An opaque pass may
    have been performed right after the initialization.
    
    The depth peeling algorithm works by rendering the translucent
    polygonal geometry multiple times (once for each peel). The actually
    rendering of the translucent polygonal geometry is performed by its
    delegate TranslucentPass. This delegate is therefore used multiple
    times.
    
    Its delegate is usually set to a vtkTranslucentPass.
    
    This implementation makes use of textures and is suitable for ES3 For
    ES3 it must be embedded within a pass that makes use of framebuffers
    so that the required OpaqueZTexture and OpaqueRGBATexture can be
    passed from the outer framebuffer pass. For OpenGL ES3 be aware the
    occlusion ratio test is not supported. The maximum number of peels is
    used instead so set it to a reasonable value. For many scenes a value
    of 4 or 5 will work well.
    
    @sa
    vtkRenderPass, vtkTranslucentPass, vtkFramebufferPass
    """
    def GetMaximumNumberOfPeels(self):
        """
        V.GetMaximumNumberOfPeels() -> int
        C++: virtual int GetMaximumNumberOfPeels()
        
        In case of depth peeling, define the maximum number of peeling
        layers. Initial value is 4. A special value of 0 means no maximum
        limit. It has to be a positive value.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOcclusionRatio(self):
        """
        V.GetOcclusionRatio() -> float
        C++: virtual double GetOcclusionRatio()
        
        In case of use of depth peeling technique for rendering
        translucent material, define the threshold under which the
        algorithm stops to iterate over peel layers. This is the ratio of
        the number of pixels that have been touched by the last layer
        over the total number of pixels of the viewport area. Initial
        value is 0.0, meaning rendering have to be exact. Greater values
        may speed-up the rendering with small impact on the quality.
        """
        ...
    
    def GetOcclusionRatioMaxValue(self):
        """
        V.GetOcclusionRatioMaxValue() -> float
        C++: virtual double GetOcclusionRatioMaxValue()
        
        In case of use of depth peeling technique for rendering
        translucent material, define the threshold under which the
        algorithm stops to iterate over peel layers. This is the ratio of
        the number of pixels that have been touched by the last layer
        over the total number of pixels of the viewport area. Initial
        value is 0.0, meaning rendering have to be exact. Greater values
        may speed-up the rendering with small impact on the quality.
        """
        ...
    
    def GetOcclusionRatioMinValue(self):
        """
        V.GetOcclusionRatioMinValue() -> float
        C++: virtual double GetOcclusionRatioMinValue()
        
        In case of use of depth peeling technique for rendering
        translucent material, define the threshold under which the
        algorithm stops to iterate over peel layers. This is the ratio of
        the number of pixels that have been touched by the last layer
        over the total number of pixels of the viewport area. Initial
        value is 0.0, meaning rendering have to be exact. Greater values
        may speed-up the rendering with small impact on the quality.
        """
        ...
    
    def GetTranslucentPass(self):
        """
        V.GetTranslucentPass() -> vtkRenderPass
        C++: virtual vtkRenderPass *GetTranslucentPass()
        
        Delegate for rendering the translucent polygonal geometry. If it
        is NULL, nothing will be rendered and a warning will be emitted.
        It is usually set to a vtkTranslucentPass. Initial value is a
        NULL pointer.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDepthPeelingPass
        C++: vtkDepthPeelingPass *NewInstance()
        """
        ...
    
    def PostReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PostReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: bool PostReplaceShaderValues(std::string &vertexShader,
            std::string &geometryShader, std::string &fragmentShader,
            vtkAbstractMapper *mapper, vtkProp *prop) override;
        
        Use vtkShaderProgram::Substitute to replace //VTK::XXX:YYY
        declarations in the shader sources. Gets called after other
        mapper shader replacements. Return false on error.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Release graphics resources and ask components to release their
        own resources.
        \pre w_exists: w!=0
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDepthPeelingPass
        C++: static vtkDepthPeelingPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDepthFormat(self, p_int):
        """
        V.SetDepthFormat(int)
        C++: virtual void SetDepthFormat(int _arg)
        
        Set the format to use for the depth texture e.g.
        vtkTextureObject::Float32
        """
        ...
    
    def SetMaximumNumberOfPeels(self, p_int):
        """
        V.SetMaximumNumberOfPeels(int)
        C++: virtual void SetMaximumNumberOfPeels(int _arg)
        
        In case of depth peeling, define the maximum number of peeling
        layers. Initial value is 4. A special value of 0 means no maximum
        limit. It has to be a positive value.
        """
        ...
    
    def SetOcclusionRatio(self, p_float):
        """
        V.SetOcclusionRatio(float)
        C++: virtual void SetOcclusionRatio(double _arg)
        
        In case of use of depth peeling technique for rendering
        translucent material, define the threshold under which the
        algorithm stops to iterate over peel layers. This is the ratio of
        the number of pixels that have been touched by the last layer
        over the total number of pixels of the viewport area. Initial
        value is 0.0, meaning rendering have to be exact. Greater values
        may speed-up the rendering with small impact on the quality.
        """
        ...
    
    def SetOpaqueRGBATexture(self, vtkTextureObject):
        """
        V.SetOpaqueRGBATexture(vtkTextureObject)
        C++: void SetOpaqueRGBATexture(vtkTextureObject *)
        """
        ...
    
    def SetOpaqueZTexture(self, vtkTextureObject):
        """
        V.SetOpaqueZTexture(vtkTextureObject)
        C++: void SetOpaqueZTexture(vtkTextureObject *)
        """
        ...
    
    def SetShaderParameters(self, vtkShaderProgram, vtkAbstractMapper, vtkProp, vtkOpenGLVertexArrayObject):
        """
        V.SetShaderParameters(vtkShaderProgram, vtkAbstractMapper,
            vtkProp, vtkOpenGLVertexArrayObject) -> bool
        C++: bool SetShaderParameters(vtkShaderProgram *program,
            vtkAbstractMapper *mapper, vtkProp *prop,
            vtkOpenGLVertexArrayObject *VAO=nullptr) override;
        
        Update the uniforms of the shader program. Return false on error.
        """
        ...
    
    def SetTranslucentPass(self, vtkRenderPass):
        """
        V.SetTranslucentPass(vtkRenderPass)
        C++: virtual void SetTranslucentPass(
            vtkRenderPass *translucentPass)
        
        Delegate for rendering the translucent polygonal geometry. If it
        is NULL, nothing will be rendered and a warning will be emitted.
        It is usually set to a vtkTranslucentPass. Initial value is a
        NULL pointer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


