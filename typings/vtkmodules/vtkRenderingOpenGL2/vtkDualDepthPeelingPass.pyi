"""
This type stub file was generated by pyright.
"""

from .vtkDepthPeelingPass import vtkDepthPeelingPass

class vtkDualDepthPeelingPass(vtkDepthPeelingPass):
    """
    vtkDualDepthPeelingPass - Implements the dual depth peeling algorithm.
    
    Superclass: vtkDepthPeelingPass
    
    Dual depth peeling is an augmentatation of the standard depth peeling
    algorithm that peels two layers (front and back) for each render
    pass. The technique is described in "Order independent transparency
    with dual depth peeling" (February 2008) by L. Bavoil, K. Myers.
    
    This algorithm has been extended to also peel volumetric data along
    with translucent geometry. To use this feature, set VolumetricPass to
    an appropriate RenderPass (usually vtkVolumetricPass).
    
    The pass occurs in several stages:
    
    1. Copy the current (opaque geometry) depth buffer into a texture.
    2. Initialize the min-max depth buffer from the opaque depth texture
       and the translucent geometry.
    3. Peel the nearest and farthest fragments: 3a. Blend fragments that
       match the nearest depth of the min-max depth buffer into the front
    buffer. 3b. Write the far depth fragments into a temporary buffer.
       3c. Extract the next set of min/max depth values for the next
       peel. 3d. Blend the temporary far fragment texture (3b) into an
       accumulation texture. 3e. Go back to 3a and repeat until the
       maximum number of peels is met, or the desired occlusion ratio is
       satisfied.
    4. If the occlusion ratio != 0 (i.e. we hit the maximum number of
       peels before finishing), alpha blend the remaining fragments
       in-between the near and far accumulation textures.
    5. Blend all accumulation buffers over the opaque color buffer to
       produce the final image.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShaderStageMTime(self):
        """
        V.GetShaderStageMTime() -> int
        C++: vtkMTimeType GetShaderStageMTime() override;
        
        For multi-stage render passes that need to change shader code
        during a single pass, use this method to notify a mapper that the
        shader needs to be rebuilt (rather than reuse the last cached
        shader. This method should return the last time that the shader
        stage changed, or 0 if the shader is single-stage.
        """
        ...
    
    def GetVolumetricPass(self):
        """
        V.GetVolumetricPass() -> vtkRenderPass
        C++: virtual vtkRenderPass *GetVolumetricPass()
        
        Delegate for rendering the volumetric geometry, if needed. It is
        usually set to a vtkVolumetricPass. Initial value is a NULL
        pointer.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDualDepthPeelingPass
        C++: vtkDualDepthPeelingPass *NewInstance()
        """
        ...
    
    def PostReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PostReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: bool PostReplaceShaderValues(std::string &vertexShader,
            std::string &geometryShader, std::string &fragmentShader,
            vtkAbstractMapper *mapper, vtkProp *prop) override;
        
        Use vtkShaderProgram::Substitute to replace //VTK::XXX:YYY
        declarations in the shader sources. Gets called after other
        mapper shader replacements. Return false on error.
        """
        ...
    
    def PreReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PreReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: bool PreReplaceShaderValues(std::string &vertexShader,
            std::string &geometryShader, std::string &fragmentShader,
            vtkAbstractMapper *mapper, vtkProp *prop) override;
        
        Use vtkShaderProgram::Substitute to replace //VTK::XXX:YYY
        declarations in the shader sources. Gets called before other
        mapper shader replacements Return false on error.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Release graphics resources and ask components to release their
        own resources.
        \pre w_exists: w!=0
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDualDepthPeelingPass
        C++: static vtkDualDepthPeelingPass *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetShaderParameters(self, vtkShaderProgram, vtkAbstractMapper, vtkProp, vtkOpenGLVertexArrayObject):
        """
        V.SetShaderParameters(vtkShaderProgram, vtkAbstractMapper,
            vtkProp, vtkOpenGLVertexArrayObject) -> bool
        C++: bool SetShaderParameters(vtkShaderProgram *program,
            vtkAbstractMapper *mapper, vtkProp *prop,
            vtkOpenGLVertexArrayObject *VAO=nullptr) override;
        
        Update the uniforms of the shader program. Return false on error.
        """
        ...
    
    def SetVolumetricPass(self, vtkRenderPass):
        """
        V.SetVolumetricPass(vtkRenderPass)
        C++: virtual void SetVolumetricPass(vtkRenderPass *volumetricPass)
        
        Delegate for rendering the volumetric geometry, if needed. It is
        usually set to a vtkVolumetricPass. Initial value is a NULL
        pointer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


