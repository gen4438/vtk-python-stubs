"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLGlyph3DMapper(__vtkmodules_vtkRenderingCore.vtkGlyph3DMapper):
    """
    vtkOpenGLGlyph3DMapper - vtkOpenGLGlyph3D on the GPU.
    
    Superclass: vtkGlyph3DMapper
    
    Do the same job than vtkGlyph3D but on the GPU. For this reason, it
    is a mapper not a vtkPolyDataAlgorithm. Also, some methods of
    vtkOpenGLGlyph3D don't make sense in vtkOpenGLGlyph3DMapper:
    GeneratePointIds, old-style SetSource, PointIdsName, IsPointVisible.
    
    @sa
    vtkOpenGLGlyph3D
    """
    def GetMaxNumberOfLOD(self):
        """
        V.GetMaxNumberOfLOD() -> int
        C++: vtkIdType GetMaxNumberOfLOD() override;
        
        Get the maximum number of LOD. OpenGL context must be bound. The
        maximum number of LOD depends on GPU capabilities.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLGlyph3DMapper
        C++: vtkOpenGLGlyph3DMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *window) override;
        
        Release any graphics resources that are being consumed by this
        mapper. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def Render(self, vtkRenderer, vtkActor):
        """
        V.Render(vtkRenderer, vtkActor)
        C++: void Render(vtkRenderer *ren, vtkActor *a) override;
        
        Method initiates the mapping process. Generally sent by the actor
        as each frame is rendered.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLGlyph3DMapper
        C++: static vtkOpenGLGlyph3DMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLODDistanceAndTargetReduction(self, p_int, p_float, p_float_1):
        """
        V.SetLODDistanceAndTargetReduction(int, float, float)
        C++: virtual void SetLODDistanceAndTargetReduction(
            vtkIdType index, float distance, float targetReduction)
            override;
        
        Configure LODs. Culling must be enabled. distance have to be a
        positive value, it is the distance to the camera scaled by the
        instanced geometry bounding box. targetReduction have to be
        between 0 and 1, 0 disable decimation, 1 draw a point.
        
        @sa vtkDecimatePro::SetTargetReduction
        """
        ...
    
    def SetNumberOfLOD(self, p_int):
        """
        V.SetNumberOfLOD(int)
        C++: void SetNumberOfLOD(vtkIdType nb) override;
        
        Set the number of LOD.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


