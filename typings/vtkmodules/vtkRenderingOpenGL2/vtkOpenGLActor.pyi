"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLActor(__vtkmodules_vtkRenderingCore.vtkActor):
    """
    vtkOpenGLActor - OpenGL actor
    
    Superclass: vtkActor
    
    vtkOpenGLActor is a concrete implementation of the abstract class
    vtkActor. vtkOpenGLActor interfaces to the OpenGL rendering library.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GLDepthMaskOverride(self):
        """
        V.GLDepthMaskOverride() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *GLDepthMaskOverride()
        
        If this key is set in GetPropertyKeys(), the glDepthMask will be
        adjusted prior to rendering translucent objects. This is useful
        for e.g. depth peeling.
        
        * If GetIsOpaque() == true, the depth mask is always enabled,
          regardless of
        * this key. Otherwise, the depth mask is disabled for default
          alpha blending
        * unless this key is set.
        
        * If this key is set, the integer value has the following
          meanings:
        * 0: glDepthMask(GL_FALSE)
        * 1: glDepthMask(GL_TRUE)
        * Anything else: No change to depth mask.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLActor
        C++: vtkOpenGLActor *NewInstance()
        """
        ...
    
    def Render(self, vtkRenderer, vtkMapper):
        """
        V.Render(vtkRenderer, vtkMapper)
        C++: void Render(vtkRenderer *ren, vtkMapper *mapper) override;
        
        Actual actor render method.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLActor
        C++: static vtkOpenGLActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


