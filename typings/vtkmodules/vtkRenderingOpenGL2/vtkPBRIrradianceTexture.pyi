"""
This type stub file was generated by pyright.
"""

from .vtkOpenGLTexture import vtkOpenGLTexture

class vtkPBRIrradianceTexture(vtkOpenGLTexture):
    """
    vtkPBRIrradianceTexture - precompute irradiance texture used in
    physically based rendering
    
    Superclass: vtkOpenGLTexture
    
    Irradiance texture is a cubemap which average light of a hemisphere
    of the input texture. The input texture can be a cubemap or an
    equirectangular projection. It is used in Image Base Lighting to
    compute the diffuse part.
    """
    def ConvertToLinearOff(self):
        """
        V.ConvertToLinearOff()
        C++: virtual void ConvertToLinearOff()
        
        Set/Get the conversion to linear color space. If the input
        texture is in sRGB color space and the conversion is not done by
        OpenGL directly with the texture format, the conversion can be
        done in the shader with this flag.
        """
        ...
    
    def ConvertToLinearOn(self):
        """
        V.ConvertToLinearOn()
        C++: virtual void ConvertToLinearOn()
        
        Set/Get the conversion to linear color space. If the input
        texture is in sRGB color space and the conversion is not done by
        OpenGL directly with the texture format, the conversion can be
        done in the shader with this flag.
        """
        ...
    
    def GetConvertToLinear(self):
        """
        V.GetConvertToLinear() -> bool
        C++: virtual bool GetConvertToLinear()
        
        Set/Get the conversion to linear color space. If the input
        texture is in sRGB color space and the conversion is not done by
        OpenGL directly with the texture format, the conversion can be
        done in the shader with this flag.
        """
        ...
    
    def GetInputTexture(self):
        """
        V.GetInputTexture() -> vtkOpenGLTexture
        C++: virtual vtkOpenGLTexture *GetInputTexture()
        
        Get/Set the input texture.
        """
        ...
    
    def GetIrradianceSize(self):
        """
        V.GetIrradianceSize() -> int
        C++: virtual unsigned int GetIrradianceSize()
        
        Set/Get size of texture. Default is 256.
        """
        ...
    
    def GetIrradianceStep(self):
        """
        V.GetIrradianceStep() -> float
        C++: virtual float GetIrradianceStep()
        
        Set/Get the size of steps in radians used to sample hemisphere.
        Default is (pi/64). In some OpenGL drivers (OSMesa, old OSX), the
        default value might be too low leading to artifacts.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Load(self, vtkRenderer):
        """
        V.Load(vtkRenderer)
        C++: void Load(vtkRenderer *) override;
        
        Implement base class method.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPBRIrradianceTexture
        C++: vtkPBRIrradianceTexture *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        texture. The parameter window could be used to determine which
        graphic resources to release. Using the same texture object in
        multiple render windows is NOT currently supported.
        """
        ...
    
    def Render(self, vtkRenderer):
        """
        V.Render(vtkRenderer)
        C++: void Render(vtkRenderer *ren) override;
        
        Implement base class method.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPBRIrradianceTexture
        C++: static vtkPBRIrradianceTexture *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetConvertToLinear(self, bool):
        """
        V.SetConvertToLinear(bool)
        C++: virtual void SetConvertToLinear(bool _arg)
        
        Set/Get the conversion to linear color space. If the input
        texture is in sRGB color space and the conversion is not done by
        OpenGL directly with the texture format, the conversion can be
        done in the shader with this flag.
        """
        ...
    
    def SetInputTexture(self, vtkOpenGLTexture):
        """
        V.SetInputTexture(vtkOpenGLTexture)
        C++: void SetInputTexture(vtkOpenGLTexture *texture)
        
        Get/Set the input texture.
        """
        ...
    
    def SetIrradianceSize(self, p_int):
        """
        V.SetIrradianceSize(int)
        C++: virtual void SetIrradianceSize(unsigned int _arg)
        
        Set/Get size of texture. Default is 256.
        """
        ...
    
    def SetIrradianceStep(self, p_float):
        """
        V.SetIrradianceStep(float)
        C++: virtual void SetIrradianceStep(float _arg)
        
        Set/Get the size of steps in radians used to sample hemisphere.
        Default is (pi/64). In some OpenGL drivers (OSMesa, old OSX), the
        default value might be too low leading to artifacts.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


