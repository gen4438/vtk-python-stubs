"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkOpenGLRenderPass(__vtkmodules_vtkRenderingCore.vtkRenderPass):
    """
    vtkOpenGLRenderPass - Abstract render pass with shader modifications.
    
    Superclass: vtkRenderPass
    
    Allows a render pass to update shader code using a new virtual API.
    """
    def GetActiveDrawBuffers(self):
        """
        V.GetActiveDrawBuffers() -> int
        C++: virtual unsigned int GetActiveDrawBuffers()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShaderStageMTime(self):
        """
        V.GetShaderStageMTime() -> int
        C++: virtual vtkMTimeType GetShaderStageMTime()
        
        For multi-stage render passes that need to change shader code
        during a single pass, use this method to notify a mapper that the
        shader needs to be rebuilt (rather than reuse the last cached
        shader. This method should return the last time that the shader
        stage changed, or 0 if the shader is single-stage.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLRenderPass
        C++: vtkOpenGLRenderPass *NewInstance()
        """
        ...
    
    def PostReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PostReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: virtual bool PostReplaceShaderValues(
            std::string &vertexShader, std::string &geometryShader,
            std::string &fragmentShader, vtkAbstractMapper *mapper,
            vtkProp *prop)
        
        Use vtkShaderProgram::Substitute to replace //VTK::XXX:YYY
        declarations in the shader sources. Gets called after other
        mapper shader replacements. Return false on error.
        """
        ...
    
    def PreReplaceShaderValues(self, string, string_1, string_2, vtkAbstractMapper, vtkProp):
        """
        V.PreReplaceShaderValues(string, string, string,
            vtkAbstractMapper, vtkProp) -> bool
        C++: virtual bool PreReplaceShaderValues(
            std::string &vertexShader, std::string &geometryShader,
            std::string &fragmentShader, vtkAbstractMapper *mapper,
            vtkProp *prop)
        
        Use vtkShaderProgram::Substitute to replace //VTK::XXX:YYY
        declarations in the shader sources. Gets called before other
        mapper shader replacements Return false on error.
        """
        ...
    
    def RenderPasses(self):
        """
        V.RenderPasses() -> vtkInformationObjectBaseVectorKey
        C++: static vtkInformationObjectBaseVectorKey *RenderPasses()
        
        Key containing information about the current pass.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLRenderPass
        C++: static vtkOpenGLRenderPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetActiveDrawBuffers(self, p_int):
        """
        V.SetActiveDrawBuffers(int)
        C++: virtual void SetActiveDrawBuffers(unsigned int _arg)
        
        Number of active draw buffers.
        """
        ...
    
    def SetShaderParameters(self, vtkShaderProgram, vtkAbstractMapper, vtkProp, vtkOpenGLVertexArrayObject):
        """
        V.SetShaderParameters(vtkShaderProgram, vtkAbstractMapper,
            vtkProp, vtkOpenGLVertexArrayObject) -> bool
        C++: virtual bool SetShaderParameters(vtkShaderProgram *program,
            vtkAbstractMapper *mapper, vtkProp *prop,
            vtkOpenGLVertexArrayObject *VAO=nullptr)
        
        Update the uniforms of the shader program. Return false on error.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


