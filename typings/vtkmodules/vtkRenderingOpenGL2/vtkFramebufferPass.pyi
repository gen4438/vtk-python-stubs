"""
This type stub file was generated by pyright.
"""

from .vtkDepthImageProcessingPass import vtkDepthImageProcessingPass

class vtkFramebufferPass(vtkDepthImageProcessingPass):
    """
    vtkFramebufferPass - Render into a FO
    
    Superclass: vtkDepthImageProcessingPass
    
    @sa
    vtkRenderPass
    """
    def GetColorTexture(self):
        """
        V.GetColorTexture() -> vtkTextureObject
        C++: virtual vtkTextureObject *GetColorTexture()
        """
        ...
    
    def GetDepthTexture(self):
        """
        V.GetDepthTexture() -> vtkTextureObject
        C++: virtual vtkTextureObject *GetDepthTexture()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFramebufferPass
        C++: vtkFramebufferPass *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *w) override;
        
        Release graphics resources and ask components to release their
        own resources.
        \pre w_exists: w!=0
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFramebufferPass
        C++: static vtkFramebufferPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColorFormat(self, p_int):
        """
        V.SetColorFormat(int)
        C++: virtual void SetColorFormat(int _arg)
        
        Set the format to use for the color texture
        vtkTextureObject::Float16 vtkTextureObject::Float32 and
        vtkTextureObject::Fixed8 are supported. Fixed8 is the default.
        """
        ...
    
    def SetDepthFormat(self, p_int):
        """
        V.SetDepthFormat(int)
        C++: virtual void SetDepthFormat(int _arg)
        
        Set the format to use for the depth texture e.g.
        vtkTextureObject::Float32
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


