"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkOpenGLBufferObject(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkOpenGLBufferObject - OpenGL buffer object
    
    Superclass: vtkObject
    
    OpenGL buffer object to store index, geometry and/or attribute data
    on the GPU.
    """
    def Bind(self):
        """
        V.Bind() -> bool
        C++: bool Bind()
        
        Bind the buffer object ready for rendering.
        
        ote Only one ARRAY_BUFFER and one ELEMENT_ARRAY_BUFFER may be
        bound at any time.
        """
        ...
    
    def GenerateBuffer(self, ObjectType):
        """
        V.GenerateBuffer(ObjectType) -> bool
        C++: bool GenerateBuffer(ObjectType type)
        
        Generate the opengl buffer for this Handle
        """
        ...
    
    def GetError(self):
        """
        V.GetError() -> string
        C++: std::string GetError()
        
        Return a string describing errors.
        """
        ...
    
    def GetHandle(self):
        """
        V.GetHandle() -> int
        C++: int GetHandle()
        
        Get the handle of the buffer object.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetType(self):
        """
        V.GetType() -> ObjectType
        C++: ObjectType GetType()
        
        Get the type of the buffer object.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsReady(self):
        """
        V.IsReady() -> bool
        C++: bool IsReady()
        
        Determine if the buffer object is ready to be used.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLBufferObject
        C++: vtkOpenGLBufferObject *NewInstance()
        """
        ...
    
    def Release(self):
        """
        V.Release() -> bool
        C++: bool Release()
        
        Release the buffer. This should be done after rendering is
        complete.
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: void ReleaseGraphicsResources()
        
        Release any graphics resources that are being consumed by this
        class.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLBufferObject
        C++: static vtkOpenGLBufferObject *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetType(self, ObjectType):
        """
        V.SetType(ObjectType)
        C++: void SetType(ObjectType value)
        
        Set the type of the buffer object.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ArrayBuffer = ...
    ElementArrayBuffer = ...
    ObjectType = ...
    TextureBuffer = ...
    __dict__ = ...
    __vtkname__ = ...


