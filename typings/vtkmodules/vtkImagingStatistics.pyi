"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkImageAccumulate(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageAccumulate - Generalized histograms up to 3 dimensions.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageAccumulate - This filter divides component space into
    discrete bins.  It then counts the number of pixels associated with
    each bin. The dimensionality of the output depends on how many
    components the input pixels have. An input images with N components
    per pixels will result in an N-dimensional histogram, where N can be
    1, 2, or 3. The input can be any type, but the output is always int.
    Some statistics are computed on the pixel values at the same time.
    The SetStencil and ReverseStencil functions allow the statistics to
    be computed on an arbitrary portion of the input data. See the
    documentation for vtkImageStencilData for more information.
    
    This filter also supports ignoring pixels with value equal to 0.
    Using this option with vtkImageMask may result in results being
    slightly off since 0 could be a valid value from your input.
    """
    def GetComponentExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetComponentExtent([int, int, int, int, int, int])
        C++: void GetComponentExtent(int extent[6])
        V.GetComponentExtent() -> (int, int, int, int, int, int)
        C++: int *GetComponentExtent()
        
        Set/Get - The component extent sets the number/extent of the
        bins. For a 1D histogram with 10 bins spanning the values 1000 to
        2000, this extent should be set to 0, 9, 0, 0, 0, 0. The extent
        specifies inclusive min/max values. This implies that the top
        extent should be set to the number of bins - 1. Initial value is
        (0,255,0,0,0,0)
        """
        ...
    
    def GetComponentOrigin(self):
        """
        V.GetComponentOrigin() -> (float, float, float)
        C++: virtual double *GetComponentOrigin()
        
        Set/Get - The component origin is the location of bin (0, 0, 0).
        Note that if the Component extent does not include the value
        (0,0,0), then this origin bin will not actually be in the output.
        The origin of the output ends up being the same as the componenet
        origin. For a 1D histogram with 10 bins spanning the values 1000
        to 2000, this origin should be set to 1000, 0, 0. Initial value
        is (0.0,0.0,0.0).
        """
        ...
    
    def GetComponentSpacing(self):
        """
        V.GetComponentSpacing() -> (float, float, float)
        C++: virtual double *GetComponentSpacing()
        
        Set/Get - The component spacing is the dimension of each bin.
        This ends up being the spacing of the output "image". If the
        number of input scalar components are less than three, then some
        of these spacing values are ignored. For a 1D histogram with 10
        bins spanning the values 1000 to 2000, this spacing should be set
        to 100, 0, 0. Initial value is (1.0,1.0,1.0).
        """
        ...
    
    def GetIgnoreZero(self):
        """
        V.GetIgnoreZero() -> int
        C++: virtual vtkTypeBool GetIgnoreZero()
        
        Should the data with value 0 be ignored? Initial value is false.
        """
        ...
    
    def GetIgnoreZeroMaxValue(self):
        """
        V.GetIgnoreZeroMaxValue() -> int
        C++: virtual vtkTypeBool GetIgnoreZeroMaxValue()
        
        Should the data with value 0 be ignored? Initial value is false.
        """
        ...
    
    def GetIgnoreZeroMinValue(self):
        """
        V.GetIgnoreZeroMinValue() -> int
        C++: virtual vtkTypeBool GetIgnoreZeroMinValue()
        
        Should the data with value 0 be ignored? Initial value is false.
        """
        ...
    
    def GetMax(self):
        """
        V.GetMax() -> (float, float, float)
        C++: virtual double *GetMax()
        
        Get the statistics information for the data. The values only make
        sense after the execution of the filter. Initial values are 0.
        """
        ...
    
    def GetMean(self):
        """
        V.GetMean() -> (float, float, float)
        C++: virtual double *GetMean()
        
        Get the statistics information for the data. The values only make
        sense after the execution of the filter. Initial values are 0.
        """
        ...
    
    def GetMin(self):
        """
        V.GetMin() -> (float, float, float)
        C++: virtual double *GetMin()
        
        Get the statistics information for the data. The values only make
        sense after the execution of the filter. Initial values are 0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReverseStencil(self):
        """
        V.GetReverseStencil() -> int
        C++: virtual vtkTypeBool GetReverseStencil()
        
        Reverse the stencil. Initial value is false.
        """
        ...
    
    def GetReverseStencilMaxValue(self):
        """
        V.GetReverseStencilMaxValue() -> int
        C++: virtual vtkTypeBool GetReverseStencilMaxValue()
        
        Reverse the stencil. Initial value is false.
        """
        ...
    
    def GetReverseStencilMinValue(self):
        """
        V.GetReverseStencilMinValue() -> int
        C++: virtual vtkTypeBool GetReverseStencilMinValue()
        
        Reverse the stencil. Initial value is false.
        """
        ...
    
    def GetStandardDeviation(self):
        """
        V.GetStandardDeviation() -> (float, float, float)
        C++: virtual double *GetStandardDeviation()
        
        Get the statistics information for the data. The values only make
        sense after the execution of the filter. Initial values are 0.
        """
        ...
    
    def GetStencil(self):
        """
        V.GetStencil() -> vtkImageStencilData
        C++: vtkImageStencilData *GetStencil()
        
        Use a stencil to specify which voxels to accumulate.
        Backcompatible methods. It set and get the stencil on input port
        1. Initial value is nullptr.
        """
        ...
    
    def GetVoxelCount(self):
        """
        V.GetVoxelCount() -> int
        C++: virtual vtkIdType GetVoxelCount()
        
        Get the statistics information for the data. The values only make
        sense after the execution of the filter. Initial values are 0.
        """
        ...
    
    def IgnoreZeroOff(self):
        """
        V.IgnoreZeroOff()
        C++: virtual void IgnoreZeroOff()
        
        Should the data with value 0 be ignored? Initial value is false.
        """
        ...
    
    def IgnoreZeroOn(self):
        """
        V.IgnoreZeroOn()
        C++: virtual void IgnoreZeroOn()
        
        Should the data with value 0 be ignored? Initial value is false.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageAccumulate
        C++: vtkImageAccumulate *NewInstance()
        """
        ...
    
    def ReverseStencilOff(self):
        """
        V.ReverseStencilOff()
        C++: virtual void ReverseStencilOff()
        
        Reverse the stencil. Initial value is false.
        """
        ...
    
    def ReverseStencilOn(self):
        """
        V.ReverseStencilOn()
        C++: virtual void ReverseStencilOn()
        
        Reverse the stencil. Initial value is false.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageAccumulate
        C++: static vtkImageAccumulate *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComponentExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetComponentExtent([int, int, int, int, int, int])
        C++: void SetComponentExtent(int extent[6])
        V.SetComponentExtent(int, int, int, int, int, int)
        C++: void SetComponentExtent(int minX, int maxX, int minY,
            int maxY, int minZ, int maxZ)
        
        Set/Get - The component extent sets the number/extent of the
        bins. For a 1D histogram with 10 bins spanning the values 1000 to
        2000, this extent should be set to 0, 9, 0, 0, 0, 0. The extent
        specifies inclusive min/max values. This implies that the top
        extent should be set to the number of bins - 1. Initial value is
        (0,255,0,0,0,0)
        """
        ...
    
    def SetComponentOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetComponentOrigin(float, float, float)
        C++: virtual void SetComponentOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetComponentOrigin((float, float, float))
        C++: virtual void SetComponentOrigin(const double _arg[3])
        
        Set/Get - The component origin is the location of bin (0, 0, 0).
        Note that if the Component extent does not include the value
        (0,0,0), then this origin bin will not actually be in the output.
        The origin of the output ends up being the same as the componenet
        origin. For a 1D histogram with 10 bins spanning the values 1000
        to 2000, this origin should be set to 1000, 0, 0. Initial value
        is (0.0,0.0,0.0).
        """
        ...
    
    def SetComponentSpacing(self, p_float, p_float_1, p_float_2):
        """
        V.SetComponentSpacing(float, float, float)
        C++: virtual void SetComponentSpacing(double _arg1, double _arg2,
            double _arg3)
        V.SetComponentSpacing((float, float, float))
        C++: virtual void SetComponentSpacing(const double _arg[3])
        
        Set/Get - The component spacing is the dimension of each bin.
        This ends up being the spacing of the output "image". If the
        number of input scalar components are less than three, then some
        of these spacing values are ignored. For a 1D histogram with 10
        bins spanning the values 1000 to 2000, this spacing should be set
        to 100, 0, 0. Initial value is (1.0,1.0,1.0).
        """
        ...
    
    def SetIgnoreZero(self, p_int):
        """
        V.SetIgnoreZero(int)
        C++: virtual void SetIgnoreZero(vtkTypeBool _arg)
        
        Should the data with value 0 be ignored? Initial value is false.
        """
        ...
    
    def SetReverseStencil(self, p_int):
        """
        V.SetReverseStencil(int)
        C++: virtual void SetReverseStencil(vtkTypeBool _arg)
        
        Reverse the stencil. Initial value is false.
        """
        ...
    
    def SetStencilData(self, vtkImageStencilData):
        """
        V.SetStencilData(vtkImageStencilData)
        C++: void SetStencilData(vtkImageStencilData *stencil)
        
        Use a stencil to specify which voxels to accumulate.
        Backcompatible methods. It set and get the stencil on input port
        1. Initial value is nullptr.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageHistogram(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageHistogram - Compute the histogram for an image.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageHistogram generates a histogram from its input, and
    optionally produces a 2D black-and-white image of the histogram as
    its output. Unlike the class vtkImageAccumulate, a multi-component
    image does not result in a multi-dimensional histogram.  Instead, the
    resulting histogram will be the sum of the histograms of each of the
    individual components, unless SetActiveComponent is used to choose a
    single component.@par Thanks: Thanks to David Gobbi at the Seaman
    Family MR Centre and Dept. of Clinical Neurosciences, Foothills
    Medical Centre, Calgary, for providing this class.
    """
    def AutomaticBinningOff(self):
        """
        V.AutomaticBinningOff()
        C++: virtual void AutomaticBinningOff()
        
        If this is On, then the histogram binning will be done
        automatically. For char and unsigned char data, there will be 256
        bins with unit spacing.  For data of type short and larger, there
        will be between 256 and MaximumNumberOfBins, depending on the
        range of the data, and the BinOrigin will be set to zero if no
        negative values are present, or to the smallest negative value if
        negative values are present. For float data, the
        MaximumNumberOfBins will always be used. The BinOrigin and
        BinSpacing will be set so that they provide a mapping from bin
        index to scalar value.
        """
        ...
    
    def AutomaticBinningOn(self):
        """
        V.AutomaticBinningOn()
        C++: virtual void AutomaticBinningOn()
        
        If this is On, then the histogram binning will be done
        automatically. For char and unsigned char data, there will be 256
        bins with unit spacing.  For data of type short and larger, there
        will be between 256 and MaximumNumberOfBins, depending on the
        range of the data, and the BinOrigin will be set to zero if no
        negative values are present, or to the smallest negative value if
        negative values are present. For float data, the
        MaximumNumberOfBins will always be used. The BinOrigin and
        BinSpacing will be set so that they provide a mapping from bin
        index to scalar value.
        """
        ...
    
    def GenerateHistogramImageOff(self):
        """
        V.GenerateHistogramImageOff()
        C++: virtual void GenerateHistogramImageOff()
        
        If this is On, then a histogram image will be produced as the
        output. Regardless of this setting, the histogram is always
        available as a vtkIdTypeArray from the GetHistogram method.
        """
        ...
    
    def GenerateHistogramImageOn(self):
        """
        V.GenerateHistogramImageOn()
        C++: virtual void GenerateHistogramImageOn()
        
        If this is On, then a histogram image will be produced as the
        output. Regardless of this setting, the histogram is always
        available as a vtkIdTypeArray from the GetHistogram method.
        """
        ...
    
    def GetActiveComponent(self):
        """
        V.GetActiveComponent() -> int
        C++: virtual int GetActiveComponent()
        
        Set the component for which to generate a histogram.  The default
        value is -1, which produces a histogram that is the sum of the
        histograms of the individual components.
        """
        ...
    
    def GetAutomaticBinning(self):
        """
        V.GetAutomaticBinning() -> int
        C++: virtual vtkTypeBool GetAutomaticBinning()
        
        If this is On, then the histogram binning will be done
        automatically. For char and unsigned char data, there will be 256
        bins with unit spacing.  For data of type short and larger, there
        will be between 256 and MaximumNumberOfBins, depending on the
        range of the data, and the BinOrigin will be set to zero if no
        negative values are present, or to the smallest negative value if
        negative values are present. For float data, the
        MaximumNumberOfBins will always be used. The BinOrigin and
        BinSpacing will be set so that they provide a mapping from bin
        index to scalar value.
        """
        ...
    
    def GetBinOrigin(self):
        """
        V.GetBinOrigin() -> float
        C++: virtual double GetBinOrigin()
        
        The value for the center of the first bin (default 0).  This is
        automatically computed unless AutomaticBinning is Off.
        """
        ...
    
    def GetBinSpacing(self):
        """
        V.GetBinSpacing() -> float
        C++: virtual double GetBinSpacing()
        
        The bin spacing (default 1).  This is automatically computed
        unless AutomaticBinning is Off.
        """
        ...
    
    def GetGenerateHistogramImage(self):
        """
        V.GetGenerateHistogramImage() -> int
        C++: virtual vtkTypeBool GetGenerateHistogramImage()
        
        If this is On, then a histogram image will be produced as the
        output. Regardless of this setting, the histogram is always
        available as a vtkIdTypeArray from the GetHistogram method.
        """
        ...
    
    def GetHistogram(self):
        """
        V.GetHistogram() -> vtkIdTypeArray
        C++: vtkIdTypeArray *GetHistogram()
        
        Get the histogram as a vtkIdTypeArray.  You must call Update()
        before calling this method.
        """
        ...
    
    def GetHistogramImageScale(self):
        """
        V.GetHistogramImageScale() -> int
        C++: virtual int GetHistogramImageScale()
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def GetHistogramImageScaleAsString(self):
        """
        V.GetHistogramImageScaleAsString() -> string
        C++: const char *GetHistogramImageScaleAsString()
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def GetHistogramImageScaleMaxValue(self):
        """
        V.GetHistogramImageScaleMaxValue() -> int
        C++: virtual int GetHistogramImageScaleMaxValue()
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def GetHistogramImageScaleMinValue(self):
        """
        V.GetHistogramImageScaleMinValue() -> int
        C++: virtual int GetHistogramImageScaleMinValue()
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def GetHistogramImageSize(self):
        """
        V.GetHistogramImageSize() -> (int, int)
        C++: virtual int *GetHistogramImageSize()
        
        Set the size of the histogram image that is produced as output.
        The default is 256 by 256.
        """
        ...
    
    def GetMaximumNumberOfBins(self):
        """
        V.GetMaximumNumberOfBins() -> int
        C++: virtual int GetMaximumNumberOfBins()
        
        The maximum number of bins to use when AutomaticBinning is On.
        When AutomaticBinning is On, the size of the output histogram
        will be set to the full range of the input data values, unless
        the full range is greater than this value.  By default, the max
        value is 65536, which is large enough to capture the full range
        of 16-bit integers.
        """
        ...
    
    def GetNumberOfBins(self):
        """
        V.GetNumberOfBins() -> int
        C++: virtual int GetNumberOfBins()
        
        The number of bins in histogram (default 256).  This is
        automatically computed unless AutomaticBinning is Off.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStencil(self):
        """
        V.GetStencil() -> vtkImageStencilData
        C++: vtkImageStencilData *GetStencil()
        
        Use a stencil to compute the histogram for just a part of the
        image.
        """
        ...
    
    def GetTotal(self):
        """
        V.GetTotal() -> int
        C++: vtkIdType GetTotal()
        
        Get the total count of the histogram.  This will be the number of
        voxels times the number of components.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageHistogram
        C++: vtkImageHistogram *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageHistogram
        C++: static vtkImageHistogram *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetActiveComponent(self, p_int):
        """
        V.SetActiveComponent(int)
        C++: virtual void SetActiveComponent(int _arg)
        
        Set the component for which to generate a histogram.  The default
        value is -1, which produces a histogram that is the sum of the
        histograms of the individual components.
        """
        ...
    
    def SetAutomaticBinning(self, p_int):
        """
        V.SetAutomaticBinning(int)
        C++: virtual void SetAutomaticBinning(vtkTypeBool _arg)
        
        If this is On, then the histogram binning will be done
        automatically. For char and unsigned char data, there will be 256
        bins with unit spacing.  For data of type short and larger, there
        will be between 256 and MaximumNumberOfBins, depending on the
        range of the data, and the BinOrigin will be set to zero if no
        negative values are present, or to the smallest negative value if
        negative values are present. For float data, the
        MaximumNumberOfBins will always be used. The BinOrigin and
        BinSpacing will be set so that they provide a mapping from bin
        index to scalar value.
        """
        ...
    
    def SetBinOrigin(self, p_float):
        """
        V.SetBinOrigin(float)
        C++: virtual void SetBinOrigin(double _arg)
        
        The value for the center of the first bin (default 0).  This is
        automatically computed unless AutomaticBinning is Off.
        """
        ...
    
    def SetBinSpacing(self, p_float):
        """
        V.SetBinSpacing(float)
        C++: virtual void SetBinSpacing(double _arg)
        
        The bin spacing (default 1).  This is automatically computed
        unless AutomaticBinning is Off.
        """
        ...
    
    def SetGenerateHistogramImage(self, p_int):
        """
        V.SetGenerateHistogramImage(int)
        C++: virtual void SetGenerateHistogramImage(vtkTypeBool _arg)
        
        If this is On, then a histogram image will be produced as the
        output. Regardless of this setting, the histogram is always
        available as a vtkIdTypeArray from the GetHistogram method.
        """
        ...
    
    def SetHistogramImageScale(self, p_int):
        """
        V.SetHistogramImageScale(int)
        C++: virtual void SetHistogramImageScale(int _arg)
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def SetHistogramImageScaleToLinear(self):
        """
        V.SetHistogramImageScaleToLinear()
        C++: void SetHistogramImageScaleToLinear()
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def SetHistogramImageScaleToLog(self):
        """
        V.SetHistogramImageScaleToLog()
        C++: void SetHistogramImageScaleToLog()
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def SetHistogramImageScaleToSqrt(self):
        """
        V.SetHistogramImageScaleToSqrt()
        C++: void SetHistogramImageScaleToSqrt()
        
        Set the scale to use for the histogram image.  The default is a
        linear scale, but sqrt and log provide better visualization.
        """
        ...
    
    def SetHistogramImageSize(self, p_int, p_int_1):
        """
        V.SetHistogramImageSize(int, int)
        C++: virtual void SetHistogramImageSize(int _arg1, int _arg2)
        V.SetHistogramImageSize((int, int))
        C++: void SetHistogramImageSize(const int _arg[2])
        
        Set the size of the histogram image that is produced as output.
        The default is 256 by 256.
        """
        ...
    
    def SetMaximumNumberOfBins(self, p_int):
        """
        V.SetMaximumNumberOfBins(int)
        C++: virtual void SetMaximumNumberOfBins(int _arg)
        
        The maximum number of bins to use when AutomaticBinning is On.
        When AutomaticBinning is On, the size of the output histogram
        will be set to the full range of the input data values, unless
        the full range is greater than this value.  By default, the max
        value is 65536, which is large enough to capture the full range
        of 16-bit integers.
        """
        ...
    
    def SetNumberOfBins(self, p_int):
        """
        V.SetNumberOfBins(int)
        C++: virtual void SetNumberOfBins(int _arg)
        
        The number of bins in histogram (default 256).  This is
        automatically computed unless AutomaticBinning is Off.
        """
        ...
    
    def SetStencilConnection(self, vtkAlgorithmOutput):
        """
        V.SetStencilConnection(vtkAlgorithmOutput)
        C++: void SetStencilConnection(vtkAlgorithmOutput *algOutput)
        
        Equivalent to SetInputConnection(1, algOutput).
        """
        ...
    
    def SetStencilData(self, vtkImageStencilData):
        """
        V.SetStencilData(vtkImageStencilData)
        C++: void SetStencilData(vtkImageStencilData *stencil)
        
        Use a stencil to compute the histogram for just a part of the
        image.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Linear = ...
    Log = ...
    Sqrt = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageHistogramStatistics(vtkImageHistogram):
    """
    vtkImageHistogramStatistics - Compute statistics for an image
    
    Superclass: vtkImageHistogram
    
    vtkImageHistogramStatistics computes statistics such as mean, median,
    and standard deviation.  These statistics are computed from the
    histogram of the image, rather than from the image itself, because
    this is more efficient than computing the statistics while traversing
    the pixels. If the input image is of type float or double, then the
    precision of the Mean, Median, and StandardDeviation will depend on
    the number of histogram bins.  By default, 65536 bins are used for
    float data, giving at least 16 bits of precision.@par Thanks: Thanks
    to David Gobbi at the Seaman Family MR Centre and Dept. of Clinical
    Neurosciences, Foothills Medical Centre, Calgary, for providing this
    class.
    """
    def GetAutoRange(self):
        """
        V.GetAutoRange() -> (float, float)
        C++: virtual double *GetAutoRange()
        
        Get an automatically computed view range for the image, for use
        with the lookup table or image property that is used when viewing
        the image.  The use of this range will avoid situations where an
        image looks too dark because a few pixels happen to be much
        brighter than the rest.
        """
        ...
    
    def GetAutoRangeExpansionFactors(self):
        """
        V.GetAutoRangeExpansionFactors() -> (float, float)
        C++: virtual double *GetAutoRangeExpansionFactors()
        
        Set lower and upper expansion factors to apply to the auto range
        that was computed from the AutoRangePercentiles.  Any outliers
        that are within this expanded range will be included, even if
        they are beyond the percentile.  This allows inclusion of values
        that are just slightly outside of the percentile, while rejecting
        values that are far beyond the percentile.  The default is to
        expand the range by a factor of 0.1 at each end.  The range will
        never be expanded beyond the Minimum or Maximum pixel values.
        """
        ...
    
    def GetAutoRangePercentiles(self):
        """
        V.GetAutoRangePercentiles() -> (float, float)
        C++: virtual double *GetAutoRangePercentiles()
        
        Set the percentiles to use for automatic view range computation.
        This allows one to compute a range that does not include outliers
        that are significantly darker or significantly brighter than the
        rest of the pixels in the image.  The default is to use the first
        percentile and the 99th percentile.
        """
        ...
    
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: double GetMaximum()
        
        Get the maximum value present in the image.  This value is
        computed when Update() is called.
        """
        ...
    
    def GetMean(self):
        """
        V.GetMean() -> float
        C++: double GetMean()
        
        Get the mean value of the image.  This value is computed when
        Update() is called.
        """
        ...
    
    def GetMedian(self):
        """
        V.GetMedian() -> float
        C++: double GetMedian()
        
        Get the median value.  This is computed when Update() is called.
        """
        ...
    
    def GetMinimum(self):
        """
        V.GetMinimum() -> float
        C++: double GetMinimum()
        
        Get the minimum value present in the image.  This value is
        computed when Update() is called.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStandardDeviation(self):
        """
        V.GetStandardDeviation() -> float
        C++: double GetStandardDeviation()
        
        Get the standard deviation of the values in the image.  This is
        computed when Update() is called.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageHistogramStatistics
        C++: vtkImageHistogramStatistics *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageHistogramStatistics
        C++: static vtkImageHistogramStatistics *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAutoRangeExpansionFactors(self, p_float, p_float_1):
        """
        V.SetAutoRangeExpansionFactors(float, float)
        C++: virtual void SetAutoRangeExpansionFactors(double _arg1,
            double _arg2)
        V.SetAutoRangeExpansionFactors((float, float))
        C++: void SetAutoRangeExpansionFactors(const double _arg[2])
        
        Set lower and upper expansion factors to apply to the auto range
        that was computed from the AutoRangePercentiles.  Any outliers
        that are within this expanded range will be included, even if
        they are beyond the percentile.  This allows inclusion of values
        that are just slightly outside of the percentile, while rejecting
        values that are far beyond the percentile.  The default is to
        expand the range by a factor of 0.1 at each end.  The range will
        never be expanded beyond the Minimum or Maximum pixel values.
        """
        ...
    
    def SetAutoRangePercentiles(self, p_float, p_float_1):
        """
        V.SetAutoRangePercentiles(float, float)
        C++: virtual void SetAutoRangePercentiles(double _arg1,
            double _arg2)
        V.SetAutoRangePercentiles((float, float))
        C++: void SetAutoRangePercentiles(const double _arg[2])
        
        Set the percentiles to use for automatic view range computation.
        This allows one to compute a range that does not include outliers
        that are significantly darker or significantly brighter than the
        rest of the pixels in the image.  The default is to use the first
        percentile and the 99th percentile.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
