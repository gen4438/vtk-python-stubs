"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel

class vtkBilinearQuadIntersection(object):
    """
    vtkBilinearQuadIntersection - Class to perform non planar quad
    intersection
    
    Class for non planar quad intersection. This class is an updated and
    fixed version of the code by Ramsey et al.
    (http://shaunramsey.com/research/bp/).
    
    vtkBilinearQuadIntersection(const vtkVector3d &pt00,
        const vtkVector3d &Pt01, const vtkVector3d &Pt10,
        const vtkVector3d &Pt11)
    vtkBilinearQuadIntersection()
    vtkBilinearQuadIntersection(const &vtkBilinearQuadIntersection)
    """
    def ComputeCartesianCoordinates(self, p_float, p_float_1):
        """
        V.ComputeCartesianCoordinates(float, float) -> vtkVector3d
        C++: vtkVector3d ComputeCartesianCoordinates(double u, double v)
        
        Compute cartesian coordinates of point in the quad using
        parameteric coordinates
        """
        ...
    
    def GetP00Data(self):
        """
        V.GetP00Data() -> (float, ...)
        C++: double *GetP00Data()
        
        Get direct access to the underlying point data
        """
        ...
    
    def GetP01Data(self):
        """
        V.GetP01Data() -> (float, ...)
        C++: double *GetP01Data()
        
        Get direct access to the underlying point data
        """
        ...
    
    def GetP10Data(self):
        """
        V.GetP10Data() -> (float, ...)
        C++: double *GetP10Data()
        
        Get direct access to the underlying point data
        """
        ...
    
    def GetP11Data(self):
        """
        V.GetP11Data() -> (float, ...)
        C++: double *GetP11Data()
        
        Get direct access to the underlying point data
        """
        ...
    
    def RayIntersection(self, vtkVector3d, vtkVector3d_1, vtkVector3d_2):
        """
        V.RayIntersection(vtkVector3d, vtkVector3d, vtkVector3d) -> bool
        C++: bool RayIntersection(const vtkVector3d &r,
            const vtkVector3d &d, vtkVector3d &uv)
        
        Compute the intersection between a ray r->d and the quad
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, const_vtkVector3d, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkCardinalSpline(__vtkmodules_vtkCommonDataModel.vtkSpline):
    """
    vtkCardinalSpline - computes an interpolating spline using a a
    Cardinal basis.
    
    Superclass: vtkSpline
    
    vtkCardinalSpline is a concrete implementation of vtkSpline using a
    Cardinal basis.
    
    @sa
    vtkSpline vtkKochanekSpline
    """
    def Compute(self):
        """
        V.Compute()
        C++: void Compute() override;
        
        Compute Cardinal Splines for each dependent variable
        """
        ...
    
    def DeepCopy(self, vtkSpline):
        """
        V.DeepCopy(vtkSpline)
        C++: void DeepCopy(vtkSpline *s) override;
        
        Deep copy of cardinal spline data.
        """
        ...
    
    def Evaluate(self, p_float):
        """
        V.Evaluate(float) -> float
        C++: double Evaluate(double t) override;
        
        Evaluate a 1D cardinal spline.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCardinalSpline
        C++: vtkCardinalSpline *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCardinalSpline
        C++: static vtkCardinalSpline *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkKochanekSpline(__vtkmodules_vtkCommonDataModel.vtkSpline):
    """
    vtkKochanekSpline - computes an interpolating spline using a Kochanek
    basis.
    
    Superclass: vtkSpline
    
    Implements the Kochanek interpolating spline described in: Kochanek,
    D., Bartels, R., "Interpolating Splines with Local Tension,
    Continuity, and Bias Control," Computer Graphics, vol. 18, no. 3, pp.
    33-41, July 1984. These splines give the user more control over the
    shape of the curve than the cardinal splines implemented in
    vtkCardinalSpline. Three parameters can be specified. All have a
    range from -1 to 1.
    
    Tension controls how sharply the curve bends at an input point. A
    value of -1 produces more slack in the curve. A value of 1 tightens
    the curve.
    
    Continuity controls the continuity of the first derivative at input
    points.
    
    Bias controls the direction of the curve at it passes through an
    input point. A value of -1 undershoots the point while a value of 1
    overshoots the point.
    
    These three parameters give the user broad control over the shape of
    the interpolating spline. The original Kochanek paper describes the
    effects nicely and is recommended reading.
    
    @sa
    vtkSpline vtkCardinalSpline
    """
    def Compute(self):
        """
        V.Compute()
        C++: void Compute() override;
        
        Compute Kochanek Spline coefficients.
        """
        ...
    
    def DeepCopy(self, vtkSpline):
        """
        V.DeepCopy(vtkSpline)
        C++: void DeepCopy(vtkSpline *s) override;
        
        Deep copy of cardinal spline data.
        """
        ...
    
    def Evaluate(self, p_float):
        """
        V.Evaluate(float) -> float
        C++: double Evaluate(double t) override;
        
        Evaluate a 1D Kochanek spline.
        """
        ...
    
    def GetDefaultBias(self):
        """
        V.GetDefaultBias() -> float
        C++: virtual double GetDefaultBias()
        
        Set the bias for all points. Default is 0.
        """
        ...
    
    def GetDefaultContinuity(self):
        """
        V.GetDefaultContinuity() -> float
        C++: virtual double GetDefaultContinuity()
        
        Set the continuity for all points. Default is 0.
        """
        ...
    
    def GetDefaultTension(self):
        """
        V.GetDefaultTension() -> float
        C++: virtual double GetDefaultTension()
        
        Set the tension for all points. Default is 0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkKochanekSpline
        C++: vtkKochanekSpline *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkKochanekSpline
        C++: static vtkKochanekSpline *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDefaultBias(self, p_float):
        """
        V.SetDefaultBias(float)
        C++: virtual void SetDefaultBias(double _arg)
        
        Set the bias for all points. Default is 0.
        """
        ...
    
    def SetDefaultContinuity(self, p_float):
        """
        V.SetDefaultContinuity(float)
        C++: virtual void SetDefaultContinuity(double _arg)
        
        Set the continuity for all points. Default is 0.
        """
        ...
    
    def SetDefaultTension(self, p_float):
        """
        V.SetDefaultTension(float)
        C++: virtual void SetDefaultTension(double _arg)
        
        Set the tension for all points. Default is 0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricFunction(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkParametricFunction - abstract interface for parametric functions
    
    Superclass: vtkObject
    
    vtkParametricFunction is an abstract interface for functions defined
    by parametric mapping i.e. f(u,v,w)->(x,y,z) where u_min <= u <
    u_max, v_min <= v < v_max, w_min <= w < w_max. (For notational
    convenience, we will write f(u)->x and assume that u means (u,v,w)
    and x means (x,y,z).)
    
    The interface contains the pure virtual function, Evaluate(), that
    generates a point and the derivatives at that point which are then
    used to construct the surface. A second pure virtual function,
    EvaluateScalar(), can be used to generate a scalar for the surface.
    Finally, the GetDimension() virtual function is used to differentiate
    1D, 2D, and 3D parametric functions. Since this abstract class
    defines a pure virtual API, its subclasses must implement the pure
    virtual functions GetDimension(), Evaluate() and EvaluateScalar().
    
    This class has also methods for defining a range of parametric values
    (u,v,w).
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    
    @sa
    vtkParametricFunctionSource - tessellates a parametric function
    
    @sa
    Implementations of derived classes implementing non-orentable
    surfaces: vtkParametricBoy vtkParametricCrossCap
    vtkParametricFigure8Klein vtkParametricKlein vtkParametricMobius
    vtkParametricRoman
    
    @sa
    Implementations of derived classes implementing orientable surfaces:
    vtkParametricConicSpiral vtkParametricDini vtkParametricEllipsoid
    vtkParametricEnneper vtkParametricRandomHills
    vtkParametricSuperEllipsoid vtkParametricSuperToroid
    vtkParametricTorus
    """
    def ClockwiseOrderingOff(self):
        """
        V.ClockwiseOrderingOff()
        C++: virtual void ClockwiseOrderingOff()
        
        Set/Get the flag which determines the ordering of the vertices
        forming the triangle strips. The ordering of the points being
        inserted into the triangle strip is important because it
        determines the direction of the normals for the lighting. If set,
        the ordering is clockwise, otherwise the ordering is
        anti-clockwise. Default is true (i.e. clockwise ordering).
        """
        ...
    
    def ClockwiseOrderingOn(self):
        """
        V.ClockwiseOrderingOn()
        C++: virtual void ClockwiseOrderingOn()
        
        Set/Get the flag which determines the ordering of the vertices
        forming the triangle strips. The ordering of the points being
        inserted into the triangle strip is important because it
        determines the direction of the normals for the lighting. If set,
        the ordering is clockwise, otherwise the ordering is
        anti-clockwise. Default is true (i.e. clockwise ordering).
        """
        ...
    
    def DerivativesAvailableOff(self):
        """
        V.DerivativesAvailableOff()
        C++: virtual void DerivativesAvailableOff()
        
        Set/Get the flag which determines whether derivatives are
        available from the parametric function (i.e., whether the
        Evaluate() method returns valid derivatives).
        """
        ...
    
    def DerivativesAvailableOn(self):
        """
        V.DerivativesAvailableOn()
        C++: virtual void DerivativesAvailableOn()
        
        Set/Get the flag which determines whether derivatives are
        available from the parametric function (i.e., whether the
        Evaluate() method returns valid derivatives).
        """
        ...
    
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: virtual void Evaluate(double uvw[3], double Pt[3],
            double Duvw[9])
        
        Performs the mapping $f(uvw)->(Pt,Duvw)$f. This is a pure virtual
        function that must be instantiated in a derived class.
        
        * uvw are the parameters, with u corresponding to uvw[0],
        * v to uvw[1] and w to uvw[2] respectively. Pt is the returned
          Cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Note that the first three values in Duvw are Du, the next three
        are Dv,
        * and the final three are Dw. Du Dv Dw are the partial
          derivatives of the
        * function at the point Pt with respect to u, v and w
          respectively.
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: virtual double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9])
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This is a pure virtual function that must be instantiated
        in a derived class.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v,
          and w.
        * Pt, Duvw are obtained from Evaluate().
        """
        ...
    
    def GetClockwiseOrdering(self):
        """
        V.GetClockwiseOrdering() -> int
        C++: virtual vtkTypeBool GetClockwiseOrdering()
        
        Set/Get the flag which determines the ordering of the vertices
        forming the triangle strips. The ordering of the points being
        inserted into the triangle strip is important because it
        determines the direction of the normals for the lighting. If set,
        the ordering is clockwise, otherwise the ordering is
        anti-clockwise. Default is true (i.e. clockwise ordering).
        """
        ...
    
    def GetClockwiseOrderingMaxValue(self):
        """
        V.GetClockwiseOrderingMaxValue() -> int
        C++: virtual vtkTypeBool GetClockwiseOrderingMaxValue()
        
        Set/Get the flag which determines the ordering of the vertices
        forming the triangle strips. The ordering of the points being
        inserted into the triangle strip is important because it
        determines the direction of the normals for the lighting. If set,
        the ordering is clockwise, otherwise the ordering is
        anti-clockwise. Default is true (i.e. clockwise ordering).
        """
        ...
    
    def GetClockwiseOrderingMinValue(self):
        """
        V.GetClockwiseOrderingMinValue() -> int
        C++: virtual vtkTypeBool GetClockwiseOrderingMinValue()
        
        Set/Get the flag which determines the ordering of the vertices
        forming the triangle strips. The ordering of the points being
        inserted into the triangle strip is important because it
        determines the direction of the normals for the lighting. If set,
        the ordering is clockwise, otherwise the ordering is
        anti-clockwise. Default is true (i.e. clockwise ordering).
        """
        ...
    
    def GetDerivativesAvailable(self):
        """
        V.GetDerivativesAvailable() -> int
        C++: virtual vtkTypeBool GetDerivativesAvailable()
        
        Set/Get the flag which determines whether derivatives are
        available from the parametric function (i.e., whether the
        Evaluate() method returns valid derivatives).
        """
        ...
    
    def GetDerivativesAvailableMaxValue(self):
        """
        V.GetDerivativesAvailableMaxValue() -> int
        C++: virtual vtkTypeBool GetDerivativesAvailableMaxValue()
        
        Set/Get the flag which determines whether derivatives are
        available from the parametric function (i.e., whether the
        Evaluate() method returns valid derivatives).
        """
        ...
    
    def GetDerivativesAvailableMinValue(self):
        """
        V.GetDerivativesAvailableMinValue() -> int
        C++: virtual vtkTypeBool GetDerivativesAvailableMinValue()
        
        Set/Get the flag which determines whether derivatives are
        available from the parametric function (i.e., whether the
        Evaluate() method returns valid derivatives).
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: virtual int GetDimension()
        
        Return the dimension of parametric space. Depending on the
        dimension, then the (u,v,w) parameters and associated information
        (e.g., derivates) have meaning. For example, if the dimension of
        the function is one, then u[0] and Duvw[0...2] have meaning. This
        is a pure virtual function that must be instantiated in a derived
        class.
        """
        ...
    
    def GetJoinU(self):
        """
        V.GetJoinU() -> int
        C++: virtual vtkTypeBool GetJoinU()
        
        Set/Get the flag which joins the first triangle strip to the last
        one.
        """
        ...
    
    def GetJoinUMaxValue(self):
        """
        V.GetJoinUMaxValue() -> int
        C++: virtual vtkTypeBool GetJoinUMaxValue()
        
        Set/Get the flag which joins the first triangle strip to the last
        one.
        """
        ...
    
    def GetJoinUMinValue(self):
        """
        V.GetJoinUMinValue() -> int
        C++: virtual vtkTypeBool GetJoinUMinValue()
        
        Set/Get the flag which joins the first triangle strip to the last
        one.
        """
        ...
    
    def GetJoinV(self):
        """
        V.GetJoinV() -> int
        C++: virtual vtkTypeBool GetJoinV()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def GetJoinVMaxValue(self):
        """
        V.GetJoinVMaxValue() -> int
        C++: virtual vtkTypeBool GetJoinVMaxValue()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def GetJoinVMinValue(self):
        """
        V.GetJoinVMinValue() -> int
        C++: virtual vtkTypeBool GetJoinVMinValue()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def GetJoinW(self):
        """
        V.GetJoinW() -> int
        C++: virtual vtkTypeBool GetJoinW()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def GetJoinWMaxValue(self):
        """
        V.GetJoinWMaxValue() -> int
        C++: virtual vtkTypeBool GetJoinWMaxValue()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def GetJoinWMinValue(self):
        """
        V.GetJoinWMinValue() -> int
        C++: virtual vtkTypeBool GetJoinWMinValue()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def GetMaximumU(self):
        """
        V.GetMaximumU() -> float
        C++: virtual double GetMaximumU()
        
        Set/Get the maximum u-value.
        """
        ...
    
    def GetMaximumV(self):
        """
        V.GetMaximumV() -> float
        C++: virtual double GetMaximumV()
        
        Set/Get the maximum v-value.
        """
        ...
    
    def GetMaximumW(self):
        """
        V.GetMaximumW() -> float
        C++: virtual double GetMaximumW()
        
        Set/Get the maximum w-value.
        """
        ...
    
    def GetMinimumU(self):
        """
        V.GetMinimumU() -> float
        C++: virtual double GetMinimumU()
        
        Set/Get the minimum u-value.
        """
        ...
    
    def GetMinimumV(self):
        """
        V.GetMinimumV() -> float
        C++: virtual double GetMinimumV()
        
        Set/Get the minimum v-value.
        """
        ...
    
    def GetMinimumW(self):
        """
        V.GetMinimumW() -> float
        C++: virtual double GetMinimumW()
        
        Set/Get the minimum w-value.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTwistU(self):
        """
        V.GetTwistU() -> int
        C++: virtual vtkTypeBool GetTwistU()
        
        Set/Get the flag which joins the first triangle strip to the last
        one with a twist. JoinU must also be set if this is set. Used
        when building some non-orientable surfaces.
        """
        ...
    
    def GetTwistUMaxValue(self):
        """
        V.GetTwistUMaxValue() -> int
        C++: virtual vtkTypeBool GetTwistUMaxValue()
        
        Set/Get the flag which joins the first triangle strip to the last
        one with a twist. JoinU must also be set if this is set. Used
        when building some non-orientable surfaces.
        """
        ...
    
    def GetTwistUMinValue(self):
        """
        V.GetTwistUMinValue() -> int
        C++: virtual vtkTypeBool GetTwistUMinValue()
        
        Set/Get the flag which joins the first triangle strip to the last
        one with a twist. JoinU must also be set if this is set. Used
        when building some non-orientable surfaces.
        """
        ...
    
    def GetTwistV(self):
        """
        V.GetTwistV() -> int
        C++: virtual vtkTypeBool GetTwistV()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinV must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def GetTwistVMaxValue(self):
        """
        V.GetTwistVMaxValue() -> int
        C++: virtual vtkTypeBool GetTwistVMaxValue()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinV must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def GetTwistVMinValue(self):
        """
        V.GetTwistVMinValue() -> int
        C++: virtual vtkTypeBool GetTwistVMinValue()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinV must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def GetTwistW(self):
        """
        V.GetTwistW() -> int
        C++: virtual vtkTypeBool GetTwistW()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinW must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def GetTwistWMaxValue(self):
        """
        V.GetTwistWMaxValue() -> int
        C++: virtual vtkTypeBool GetTwistWMaxValue()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinW must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def GetTwistWMinValue(self):
        """
        V.GetTwistWMinValue() -> int
        C++: virtual vtkTypeBool GetTwistWMinValue()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinW must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def JoinUOff(self):
        """
        V.JoinUOff()
        C++: virtual void JoinUOff()
        
        Set/Get the flag which joins the first triangle strip to the last
        one.
        """
        ...
    
    def JoinUOn(self):
        """
        V.JoinUOn()
        C++: virtual void JoinUOn()
        
        Set/Get the flag which joins the first triangle strip to the last
        one.
        """
        ...
    
    def JoinVOff(self):
        """
        V.JoinVOff()
        C++: virtual void JoinVOff()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def JoinVOn(self):
        """
        V.JoinVOn()
        C++: virtual void JoinVOn()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def JoinWOff(self):
        """
        V.JoinWOff()
        C++: virtual void JoinWOff()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def JoinWOn(self):
        """
        V.JoinWOn()
        C++: virtual void JoinWOn()
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricFunction
        C++: vtkParametricFunction *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricFunction
        C++: static vtkParametricFunction *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClockwiseOrdering(self, p_int):
        """
        V.SetClockwiseOrdering(int)
        C++: virtual void SetClockwiseOrdering(vtkTypeBool _arg)
        
        Set/Get the flag which determines the ordering of the vertices
        forming the triangle strips. The ordering of the points being
        inserted into the triangle strip is important because it
        determines the direction of the normals for the lighting. If set,
        the ordering is clockwise, otherwise the ordering is
        anti-clockwise. Default is true (i.e. clockwise ordering).
        """
        ...
    
    def SetDerivativesAvailable(self, p_int):
        """
        V.SetDerivativesAvailable(int)
        C++: virtual void SetDerivativesAvailable(vtkTypeBool _arg)
        
        Set/Get the flag which determines whether derivatives are
        available from the parametric function (i.e., whether the
        Evaluate() method returns valid derivatives).
        """
        ...
    
    def SetJoinU(self, p_int):
        """
        V.SetJoinU(int)
        C++: virtual void SetJoinU(vtkTypeBool _arg)
        
        Set/Get the flag which joins the first triangle strip to the last
        one.
        """
        ...
    
    def SetJoinV(self, p_int):
        """
        V.SetJoinV(int)
        C++: virtual void SetJoinV(vtkTypeBool _arg)
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def SetJoinW(self, p_int):
        """
        V.SetJoinW(int)
        C++: virtual void SetJoinW(vtkTypeBool _arg)
        
        Set/Get the flag which joins the ends of the triangle strips.
        """
        ...
    
    def SetMaximumU(self, p_float):
        """
        V.SetMaximumU(float)
        C++: virtual void SetMaximumU(double _arg)
        
        Set/Get the maximum u-value.
        """
        ...
    
    def SetMaximumV(self, p_float):
        """
        V.SetMaximumV(float)
        C++: virtual void SetMaximumV(double _arg)
        
        Set/Get the maximum v-value.
        """
        ...
    
    def SetMaximumW(self, p_float):
        """
        V.SetMaximumW(float)
        C++: virtual void SetMaximumW(double _arg)
        
        Set/Get the maximum w-value.
        """
        ...
    
    def SetMinimumU(self, p_float):
        """
        V.SetMinimumU(float)
        C++: virtual void SetMinimumU(double _arg)
        
        Set/Get the minimum u-value.
        """
        ...
    
    def SetMinimumV(self, p_float):
        """
        V.SetMinimumV(float)
        C++: virtual void SetMinimumV(double _arg)
        
        Set/Get the minimum v-value.
        """
        ...
    
    def SetMinimumW(self, p_float):
        """
        V.SetMinimumW(float)
        C++: virtual void SetMinimumW(double _arg)
        
        Set/Get the minimum w-value.
        """
        ...
    
    def SetTwistU(self, p_int):
        """
        V.SetTwistU(int)
        C++: virtual void SetTwistU(vtkTypeBool _arg)
        
        Set/Get the flag which joins the first triangle strip to the last
        one with a twist. JoinU must also be set if this is set. Used
        when building some non-orientable surfaces.
        """
        ...
    
    def SetTwistV(self, p_int):
        """
        V.SetTwistV(int)
        C++: virtual void SetTwistV(vtkTypeBool _arg)
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinV must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def SetTwistW(self, p_int):
        """
        V.SetTwistW(int)
        C++: virtual void SetTwistW(vtkTypeBool _arg)
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinW must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def TwistUOff(self):
        """
        V.TwistUOff()
        C++: virtual void TwistUOff()
        
        Set/Get the flag which joins the first triangle strip to the last
        one with a twist. JoinU must also be set if this is set. Used
        when building some non-orientable surfaces.
        """
        ...
    
    def TwistUOn(self):
        """
        V.TwistUOn()
        C++: virtual void TwistUOn()
        
        Set/Get the flag which joins the first triangle strip to the last
        one with a twist. JoinU must also be set if this is set. Used
        when building some non-orientable surfaces.
        """
        ...
    
    def TwistVOff(self):
        """
        V.TwistVOff()
        C++: virtual void TwistVOff()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinV must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def TwistVOn(self):
        """
        V.TwistVOn()
        C++: virtual void TwistVOn()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinV must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def TwistWOff(self):
        """
        V.TwistWOff()
        C++: virtual void TwistWOff()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinW must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def TwistWOn(self):
        """
        V.TwistWOn()
        C++: virtual void TwistWOn()
        
        Set/Get the flag which joins the ends of the triangle strips with
        a twist. JoinW must also be set if this is set. Used when
        building some non-orientable surfaces.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricBohemianDome(vtkParametricFunction):
    """
    vtkParametricBohemianDome - Generate a Bohemian dome.
    
    Superclass: vtkParametricFunction
    
    vtkParametricBohemianDome generates a parametric Bohemian dome. The
    Bohemian dome is a quartic surface, and is described in much better
    detail at <a
    href="https://www.math.hmc.edu/math142-01/mellon/curves_and_surfaces/surfaces/bohdom.html"
    >HMC page.
    @warning
    I haven't set any restrictions on the A, B, or C values.@par Thanks:
    Tim Meehan
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        BohemianDome surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), D_u\vec{f} = (dx/du, dy/du, dz/du), D_v\vec{f}
        = (dx/dv, dy/dv, dz/dv) $ .
        * Then the normal is $N = D_u\vec{f} \times D_v\vec{f} $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This method simply returns 0.
        """
        ...
    
    def GetA(self):
        """
        V.GetA() -> float
        C++: virtual double GetA()
        
        Construct a Bohemian dome surface with the following parameters:
        """
        ...
    
    def GetB(self):
        """
        V.GetB() -> float
        C++: virtual double GetB()
        """
        ...
    
    def GetC(self):
        """
        V.GetC() -> float
        C++: virtual double GetC()
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricBohemianDome
        C++: vtkParametricBohemianDome *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricBohemianDome
        C++: static vtkParametricBohemianDome *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetA(self, p_float):
        """
        V.SetA(float)
        C++: virtual void SetA(double _arg)
        
        Construct a Bohemian dome surface with the following parameters:
        """
        ...
    
    def SetB(self, p_float):
        """
        V.SetB(float)
        C++: virtual void SetB(double _arg)
        """
        ...
    
    def SetC(self, p_float):
        """
        V.SetC(float)
        C++: virtual void SetC(double _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricBour(vtkParametricFunction):
    """
    vtkParametricBour - Generate Bour's minimal surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricBour generates Bour's minimal surface parametrically.
    More information can be found at <a
    href="http://en.wikipedia.org/wiki/Bour%27s_minimal_surface">Wikipedia
    .@par Thanks: Tim Meehan
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Bour's minimal surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), D_u\vec{f} = (dx/du, dy/du, dz/du), D_v\vec{f}
        = (dx/dv, dy/dv, dz/dv) $ .
        * Then the normal is $N = D_u\vec{f} \times D_v\vec{f} $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This method simply returns 0.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricBour
        C++: vtkParametricBour *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricBour
        C++: static vtkParametricBour *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricBoy(vtkParametricFunction):
    """
    vtkParametricBoy - Generate Boy's surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricBoy generates Boy's surface. This is a Model of the
    projective plane without singularities. It was found by Werner Boy on
    assignment from David Hilbert.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Boy's surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetZScale(self):
        """
        V.GetZScale() -> float
        C++: virtual double GetZScale()
        
        Set/Get the scale factor for the z-coordinate. Default is 1/8,
        giving a nice shape.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricBoy
        C++: vtkParametricBoy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricBoy
        C++: static vtkParametricBoy *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetZScale(self, p_float):
        """
        V.SetZScale(float)
        C++: virtual void SetZScale(double _arg)
        
        Set/Get the scale factor for the z-coordinate. Default is 1/8,
        giving a nice shape.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricCatalanMinimal(vtkParametricFunction):
    """
    vtkParametricCatalanMinimal - Generate Catalan's minimal surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricCatalanMinimal generates Catalan's minimal surface
    parametrically. This minimal surface contains the cycloid as a
    geodesic. More information about it can be found at <a
    href="https://en.wikipedia.org/wiki/Catalan%27s_minimal_surface">Wikip
    edia.@par Thanks: Tim Meehan
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Catalan's minimal surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), D_u\vec{f} = (dx/du, dy/du, dz/du), D_v\vec{f}
        = (dx/dv, dy/dv, dz/dv) $ .
        * Then the normal is $N = D_u\vec{f} \times D_v\vec{f} $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This method simply returns 0.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricCatalanMinimal
        C++: vtkParametricCatalanMinimal *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricCatalanMinimal
        C++: static vtkParametricCatalanMinimal *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricConicSpiral(vtkParametricFunction):
    """
    vtkParametricConicSpiral - Generate conic spiral surfaces that
    resemble sea-shells.
    
    Superclass: vtkParametricFunction
    
    vtkParametricConicSpiral generates conic spiral surfaces. These can
    resemble sea shells, or may look like a torus "eating" its own tail.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        A conic spiral surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetA(self):
        """
        V.GetA() -> float
        C++: virtual double GetA()
        
        Set/Get the scale factor. Default = 0.2
        """
        ...
    
    def GetB(self):
        """
        V.GetB() -> float
        C++: virtual double GetB()
        
        Set/Get the A function coefficient. See the definition in
        Parametric surfaces referred to above. Default is 1.
        """
        ...
    
    def GetC(self):
        """
        V.GetC() -> float
        C++: virtual double GetC()
        
        Set/Get the B function coefficient. See the definition in
        Parametric surfaces referred to above. Default is 0.1.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetN(self):
        """
        V.GetN() -> float
        C++: virtual double GetN()
        
        Set/Get the C function coefficient. See the definition in
        Parametric surfaces referred to above. Default is 2.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricConicSpiral
        C++: vtkParametricConicSpiral *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricConicSpiral
        C++: static vtkParametricConicSpiral *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetA(self, p_float):
        """
        V.SetA(float)
        C++: virtual void SetA(double _arg)
        
        Set/Get the scale factor. Default = 0.2
        """
        ...
    
    def SetB(self, p_float):
        """
        V.SetB(float)
        C++: virtual void SetB(double _arg)
        
        Set/Get the A function coefficient. See the definition in
        Parametric surfaces referred to above. Default is 1.
        """
        ...
    
    def SetC(self, p_float):
        """
        V.SetC(float)
        C++: virtual void SetC(double _arg)
        
        Set/Get the B function coefficient. See the definition in
        Parametric surfaces referred to above. Default is 0.1.
        """
        ...
    
    def SetN(self, p_float):
        """
        V.SetN(float)
        C++: virtual void SetN(double _arg)
        
        Set/Get the C function coefficient. See the definition in
        Parametric surfaces referred to above. Default is 2.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricCrossCap(vtkParametricFunction):
    """
    vtkParametricCrossCap - Generate a cross-cap.
    
    Superclass: vtkParametricFunction
    
    vtkParametricCrossCap generates a cross-cap which is a non-orientable
    self-intersecting single-sided surface. This is one possible image of
    a projective plane in three-space.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        A cross-cap.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricCrossCap
        C++: vtkParametricCrossCap *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricCrossCap
        C++: static vtkParametricCrossCap *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricDini(vtkParametricFunction):
    """
    vtkParametricDini - Generate Dini's surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricDini generates Dini's surface. Dini's surface is a
    surface that possesses constant negative Gaussian curvature
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Dini's surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetA(self):
        """
        V.GetA() -> float
        C++: virtual double GetA()
        
        Set/Get the scale factor. See the definition in Parametric
        surfaces referred to above. Default is 1.
        """
        ...
    
    def GetB(self):
        """
        V.GetB() -> float
        C++: virtual double GetB()
        
        Set/Get the scale factor. See the definition in Parametric
        surfaces referred to above. Default is 0.2
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricDini
        C++: vtkParametricDini *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricDini
        C++: static vtkParametricDini *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetA(self, p_float):
        """
        V.SetA(float)
        C++: virtual void SetA(double _arg)
        
        Set/Get the scale factor. See the definition in Parametric
        surfaces referred to above. Default is 1.
        """
        ...
    
    def SetB(self, p_float):
        """
        V.SetB(float)
        C++: virtual void SetB(double _arg)
        
        Set/Get the scale factor. See the definition in Parametric
        surfaces referred to above. Default is 0.2
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricEllipsoid(vtkParametricFunction):
    """
    vtkParametricEllipsoid - Generate an ellipsoid.
    
    Superclass: vtkParametricFunction
    
    vtkParametricEllipsoid generates an ellipsoid. If all the radii are
    the same, we have a sphere. An oblate spheroid occurs if RadiusX =
    RadiusY > RadiusZ. Here the Z-axis forms the symmetry axis. To a
    first approximation, this is the shape of the earth. A prolate
    spheroid occurs if RadiusX = RadiusY < RadiusZ.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        An ellipsoid.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetXRadius(self):
        """
        V.GetXRadius() -> float
        C++: virtual double GetXRadius()
        
        Set/Get the scaling factor for the x-axis. Default is 1.
        """
        ...
    
    def GetYRadius(self):
        """
        V.GetYRadius() -> float
        C++: virtual double GetYRadius()
        
        Set/Get the scaling factor for the y-axis. Default is 1.
        """
        ...
    
    def GetZRadius(self):
        """
        V.GetZRadius() -> float
        C++: virtual double GetZRadius()
        
        Set/Get the scaling factor for the z-axis. Default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricEllipsoid
        C++: vtkParametricEllipsoid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricEllipsoid
        C++: static vtkParametricEllipsoid *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetXRadius(self, p_float):
        """
        V.SetXRadius(float)
        C++: virtual void SetXRadius(double _arg)
        
        Set/Get the scaling factor for the x-axis. Default is 1.
        """
        ...
    
    def SetYRadius(self, p_float):
        """
        V.SetYRadius(float)
        C++: virtual void SetYRadius(double _arg)
        
        Set/Get the scaling factor for the y-axis. Default is 1.
        """
        ...
    
    def SetZRadius(self, p_float):
        """
        V.SetZRadius(float)
        C++: virtual void SetZRadius(double _arg)
        
        Set/Get the scaling factor for the z-axis. Default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricEnneper(vtkParametricFunction):
    """
    vtkParametricEnneper - Generate Enneper's surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricEnneper generates Enneper's surface. Enneper's surface
    is a a self-intersecting minimal surface possessing constant negative
    Gaussian curvature
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Enneper's surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uv are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricEnneper
        C++: vtkParametricEnneper *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricEnneper
        C++: static vtkParametricEnneper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricFigure8Klein(vtkParametricFunction):
    """
    vtkParametricFigure8Klein - Generate a figure-8 Klein bottle.
    
    Superclass: vtkParametricFunction
    
    vtkParametricFigure8Klein generates a figure-8 Klein bottle.  A Klein
    bottle is a closed surface with no interior and only one surface.  It
    is unrealisable in 3 dimensions without intersecting surfaces.  It
    can be realised in 4 dimensions by considering the map $F:R^2
    \rightarrow R^4 $  given by:
    
    - $f(u,v) =
      ((r*cos(v)+a)*cos(u),(r*cos(v)+a)*sin(u),r*sin(v)*cos(u/2),r*sin(v)*
      sin(u/2)) $
    
    This representation of the immersion in $R^3 $ is formed by taking
    two Mobius strips and joining them along their boundaries, this is
    the so called "Figure-8 Klein Bottle"
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        A Figure-8 Klein bottle.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set/Get the radius of the bottle. Default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricFigure8Klein
        C++: vtkParametricFigure8Klein *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricFigure8Klein
        C++: static vtkParametricFigure8Klein *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set/Get the radius of the bottle. Default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricHenneberg(vtkParametricFunction):
    """
    vtkParametricHenneberg - Generate Henneberg's minimal surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricHenneberg generates Henneberg's minimal surface
    parametrically. Henneberg's minimal surface is discussed further at
    <a
    href="http://mathworld.wolfram.com/HennebergsMinimalSurface.html">Math
     World.@par Thanks: Tim Meehan
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Henneberg's minimal surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), D_u\vec{f} = (dx/du, dy/du, dz/du), D_v\vec{f}
        = (dx/dv, dy/dv, dz/dv) $ .
        * Then the normal is $N = D_u\vec{f} \times D_v\vec{f} $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This method simply returns 0.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricHenneberg
        C++: vtkParametricHenneberg *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricHenneberg
        C++: static vtkParametricHenneberg *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricKlein(vtkParametricFunction):
    """
    vtkParametricKlein - Generates a "classical" representation of a
    Klein bottle.
    
    Superclass: vtkParametricFunction
    
    vtkParametricKlein generates a "classical" representation of a Klein
    bottle.  A Klein bottle is a closed surface with no interior and only
    one surface.  It is unrealisable in 3 dimensions without intersecting
    surfaces.  It can be realised in 4 dimensions by considering the map
    $F:R^2 \rightarrow R^4 $  given by:
    
    - $f(u,v) =
      ((r*cos(v)+a)*cos(u),(r*cos(v)+a)*sin(u),r*sin(v)*cos(u/2),r*sin(v)*
      sin(u/2)) $
    
    The classical representation of the immersion in $R^3 $ is returned
    by this function.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        A Klein bottle.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricKlein
        C++: vtkParametricKlein *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricKlein
        C++: static vtkParametricKlein *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricKuen(vtkParametricFunction):
    """
    vtkParametricKuen - Generate Kuens' surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricKuen generates Kuens' surface. This surface has a
    constant negative gaussian curvature. For more information about this
    surface, see Dr. O'Niell's page at the <a
    href="http://www.math.ucla.edu/~bon/kuen.html">UCLA Mathematics
    Department.@par Thanks: Tim Meehan
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Kuen's surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), D_u\vec{f} = (dx/du, dy/du, dz/du), D_v\vec{f}
        = (dx/dv, dy/dv, dz/dv) $ .
        * Then the normal is $N = D_u\vec{f} \times D_v\vec{f} $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This method simply returns 0.
        """
        ...
    
    def GetDeltaV0(self):
        """
        V.GetDeltaV0() -> float
        C++: virtual double GetDeltaV0()
        
        Set/Get the value to use when V == 0. Default is 0.05, giving the
        best appearance with the default settings. Setting it to a value
        less than 0.05 extrapolates the surface towards a pole in the -z
        direction. Setting it to 0 retains the pole whose z-value is
        -inf.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricKuen
        C++: vtkParametricKuen *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricKuen
        C++: static vtkParametricKuen *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDeltaV0(self, p_float):
        """
        V.SetDeltaV0(float)
        C++: virtual void SetDeltaV0(double _arg)
        
        Set/Get the value to use when V == 0. Default is 0.05, giving the
        best appearance with the default settings. Setting it to a value
        less than 0.05 extrapolates the surface towards a pole in the -z
        direction. Setting it to 0 retains the pole whose z-value is
        -inf.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricMobius(vtkParametricFunction):
    """
    vtkParametricMobius - Generate a Mobius strip.
    
    Superclass: vtkParametricFunction
    
    vtkParametricMobius generates a Mobius strip.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        The Mobius strip.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Du, Dv are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set/Get the radius of the Mobius strip. Default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricMobius
        C++: vtkParametricMobius *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricMobius
        C++: static vtkParametricMobius *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set/Get the radius of the Mobius strip. Default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricPluckerConoid(vtkParametricFunction):
    """
    vtkParametricPluckerConoid - Generate Plucker's conoid surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricPluckerConoid generates Plucker's conoid surface
    parametrically. Plucker's conoid is a ruled surface, named after
    Julius Plucker. It is possible to set the number of folds in this
    class via the parameter 'N'.
    
    For more information, see the Wikipedia page on <a
    href="https://en.wikipedia.org/wiki/Pl%c3%bccker%27s_conoid">Plucker's
     Conoid.
    @warning
    I haven't done any special checking on the number of folds parameter,
    N.@par Thanks: Tim Meehan
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Plucker's conoid surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), D_u\vec{f} = (dx/du, dy/du, dz/du), D_v\vec{f}
        = (dx/dv, dy/dv, dz/dv) $ .
        * Then the normal is $N = D_u\vec{f} \times D_v\vec{f} $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This method simply returns 0.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetN(self):
        """
        V.GetN() -> int
        C++: virtual int GetN()
        
        This is the number of folds in the conoid.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricPluckerConoid
        C++: vtkParametricPluckerConoid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricPluckerConoid
        C++: static vtkParametricPluckerConoid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetN(self, p_int):
        """
        V.SetN(int)
        C++: virtual void SetN(int _arg)
        
        This is the number of folds in the conoid.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricPseudosphere(vtkParametricFunction):
    """
    vtkParametricPseudosphere - Generate a pseudosphere.
    
    Superclass: vtkParametricFunction
    
    vtkParametricPseudosphere generates a parametric pseudosphere. The
    pseudosphere is generated as a surface of revolution of the tractrix
    about it's asymptote, and is a surface of constant negative Gaussian
    curvature. You can find out more about this interesting surface at <a
    href="http://mathworld.wolfram.com/Pseudosphere.html">Math World.@par
    Thanks: Tim Meehan
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Pseudosphere surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), D_u\vec{f} = (dx/du, dy/du, dz/du), D_v\vec{f}
        = (dx/dv, dy/dv, dz/dv) $ .
        * Then the normal is $N = D_u\vec{f} \times D_v\vec{f} $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw. This method simply returns 0.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricPseudosphere
        C++: vtkParametricPseudosphere *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricPseudosphere
        C++: static vtkParametricPseudosphere *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricRandomHills(vtkParametricFunction):
    """
    vtkParametricRandomHills - Generate a surface covered with randomly
    placed hills.
    
    Superclass: vtkParametricFunction
    
    vtkParametricRandomHills generates a surface covered with randomly
    placed hills. Hills will vary in shape and height since the presence
    of nearby hills will contribute to the shape and height of a given
    hill. An option is provided for placing hills on a regular grid on
    the surface. In this case the hills will all have the same shape and
    height.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def AllowRandomGenerationOff(self):
        """
        V.AllowRandomGenerationOff()
        C++: virtual void AllowRandomGenerationOff()
        
        Set/Get the random generation flag. A value of 0 will disable the
        generation of random hills on the surface allowing a reproducible
        number of identically shaped hills to be generated. If zero, then
        the number of hills used will be the nearest perfect square less
        than or equal to the number of hills. For example, selecting 30
        hills will result in a 5 X 5 array of hills being generated. Thus
        a square array of hills will be generated.
        
        * Any other value means that the hills will be placed randomly on
        the
        * surface.
        * Default is 1.
        """
        ...
    
    def AllowRandomGenerationOn(self):
        """
        V.AllowRandomGenerationOn()
        C++: virtual void AllowRandomGenerationOn()
        
        Set/Get the random generation flag. A value of 0 will disable the
        generation of random hills on the surface allowing a reproducible
        number of identically shaped hills to be generated. If zero, then
        the number of hills used will be the nearest perfect square less
        than or equal to the number of hills. For example, selecting 30
        hills will result in a 5 X 5 array of hills being generated. Thus
        a square array of hills will be generated.
        
        * Any other value means that the hills will be placed randomly on
        the
        * surface.
        * Default is 1.
        """
        ...
    
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Construct a terrain consisting of hills on a surface.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the Cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetAllowRandomGeneration(self):
        """
        V.GetAllowRandomGeneration() -> int
        C++: virtual vtkTypeBool GetAllowRandomGeneration()
        
        Set/Get the random generation flag. A value of 0 will disable the
        generation of random hills on the surface allowing a reproducible
        number of identically shaped hills to be generated. If zero, then
        the number of hills used will be the nearest perfect square less
        than or equal to the number of hills. For example, selecting 30
        hills will result in a 5 X 5 array of hills being generated. Thus
        a square array of hills will be generated.
        
        * Any other value means that the hills will be placed randomly on
        the
        * surface.
        * Default is 1.
        """
        ...
    
    def GetAllowRandomGenerationMaxValue(self):
        """
        V.GetAllowRandomGenerationMaxValue() -> int
        C++: virtual vtkTypeBool GetAllowRandomGenerationMaxValue()
        
        Set/Get the random generation flag. A value of 0 will disable the
        generation of random hills on the surface allowing a reproducible
        number of identically shaped hills to be generated. If zero, then
        the number of hills used will be the nearest perfect square less
        than or equal to the number of hills. For example, selecting 30
        hills will result in a 5 X 5 array of hills being generated. Thus
        a square array of hills will be generated.
        
        * Any other value means that the hills will be placed randomly on
        the
        * surface.
        * Default is 1.
        """
        ...
    
    def GetAllowRandomGenerationMinValue(self):
        """
        V.GetAllowRandomGenerationMinValue() -> int
        C++: virtual vtkTypeBool GetAllowRandomGenerationMinValue()
        
        Set/Get the random generation flag. A value of 0 will disable the
        generation of random hills on the surface allowing a reproducible
        number of identically shaped hills to be generated. If zero, then
        the number of hills used will be the nearest perfect square less
        than or equal to the number of hills. For example, selecting 30
        hills will result in a 5 X 5 array of hills being generated. Thus
        a square array of hills will be generated.
        
        * Any other value means that the hills will be placed randomly on
        the
        * surface.
        * Default is 1.
        """
        ...
    
    def GetAmplitudeScaleFactor(self):
        """
        V.GetAmplitudeScaleFactor() -> float
        C++: virtual double GetAmplitudeScaleFactor()
        
        Set/Get the scaling factor for the amplitude. Default is 1/3.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetHillAmplitude(self):
        """
        V.GetHillAmplitude() -> float
        C++: virtual double GetHillAmplitude()
        
        Set/Get the hill amplitude (height). Default is 2.
        """
        ...
    
    def GetHillXVariance(self):
        """
        V.GetHillXVariance() -> float
        C++: virtual double GetHillXVariance()
        
        Set/Get the hill variance in the x-direction. Default is 2.5.
        """
        ...
    
    def GetHillYVariance(self):
        """
        V.GetHillYVariance() -> float
        C++: virtual double GetHillYVariance()
        
        Set/Get the hill variance in the y-direction. Default is 2.5.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfHills(self):
        """
        V.GetNumberOfHills() -> int
        C++: virtual int GetNumberOfHills()
        
        Set/Get the number of hills. Default is 30.
        """
        ...
    
    def GetRandomSeed(self):
        """
        V.GetRandomSeed() -> int
        C++: virtual int GetRandomSeed()
        
        Set/Get the Seed for the random number generator, a value of 1
        will initialize the random number generator, a negative value
        will initialize it with the system time. Default is 1.
        """
        ...
    
    def GetXVarianceScaleFactor(self):
        """
        V.GetXVarianceScaleFactor() -> float
        C++: virtual double GetXVarianceScaleFactor()
        
        Set/Get the scaling factor for the variance in the x-direction.
        Default is 1/3.
        """
        ...
    
    def GetYVarianceScaleFactor(self):
        """
        V.GetYVarianceScaleFactor() -> float
        C++: virtual double GetYVarianceScaleFactor()
        
        Set/Get the scaling factor for the variance in the y-direction.
        Default is 1/3.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricRandomHills
        C++: vtkParametricRandomHills *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricRandomHills
        C++: static vtkParametricRandomHills *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAllowRandomGeneration(self, p_int):
        """
        V.SetAllowRandomGeneration(int)
        C++: virtual void SetAllowRandomGeneration(vtkTypeBool _arg)
        
        Set/Get the random generation flag. A value of 0 will disable the
        generation of random hills on the surface allowing a reproducible
        number of identically shaped hills to be generated. If zero, then
        the number of hills used will be the nearest perfect square less
        than or equal to the number of hills. For example, selecting 30
        hills will result in a 5 X 5 array of hills being generated. Thus
        a square array of hills will be generated.
        
        * Any other value means that the hills will be placed randomly on
        the
        * surface.
        * Default is 1.
        """
        ...
    
    def SetAmplitudeScaleFactor(self, p_float):
        """
        V.SetAmplitudeScaleFactor(float)
        C++: virtual void SetAmplitudeScaleFactor(double _arg)
        
        Set/Get the scaling factor for the amplitude. Default is 1/3.
        """
        ...
    
    def SetHillAmplitude(self, p_float):
        """
        V.SetHillAmplitude(float)
        C++: virtual void SetHillAmplitude(double _arg)
        
        Set/Get the hill amplitude (height). Default is 2.
        """
        ...
    
    def SetHillXVariance(self, p_float):
        """
        V.SetHillXVariance(float)
        C++: virtual void SetHillXVariance(double _arg)
        
        Set/Get the hill variance in the x-direction. Default is 2.5.
        """
        ...
    
    def SetHillYVariance(self, p_float):
        """
        V.SetHillYVariance(float)
        C++: virtual void SetHillYVariance(double _arg)
        
        Set/Get the hill variance in the y-direction. Default is 2.5.
        """
        ...
    
    def SetNumberOfHills(self, p_int):
        """
        V.SetNumberOfHills(int)
        C++: virtual void SetNumberOfHills(int _arg)
        
        Set/Get the number of hills. Default is 30.
        """
        ...
    
    def SetRandomSeed(self, p_int):
        """
        V.SetRandomSeed(int)
        C++: virtual void SetRandomSeed(int _arg)
        
        Set/Get the Seed for the random number generator, a value of 1
        will initialize the random number generator, a negative value
        will initialize it with the system time. Default is 1.
        """
        ...
    
    def SetXVarianceScaleFactor(self, p_float):
        """
        V.SetXVarianceScaleFactor(float)
        C++: virtual void SetXVarianceScaleFactor(double _arg)
        
        Set/Get the scaling factor for the variance in the x-direction.
        Default is 1/3.
        """
        ...
    
    def SetYVarianceScaleFactor(self, p_float):
        """
        V.SetYVarianceScaleFactor(float)
        C++: virtual void SetYVarianceScaleFactor(double _arg)
        
        Set/Get the scaling factor for the variance in the y-direction.
        Default is 1/3.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricRoman(vtkParametricFunction):
    """
    vtkParametricRoman - Generate Steiner's Roman Surface.
    
    Superclass: vtkParametricFunction
    
    vtkParametricRoman generates Steiner's Roman Surface.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        Steiner's Roman Surface
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the Cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set/Get the radius. Default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricRoman
        C++: vtkParametricRoman *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricRoman
        C++: static vtkParametricRoman *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set/Get the radius. Default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricSpline(vtkParametricFunction):
    """
    vtkParametricSpline - parametric function for 1D interpolating splines
    
    Superclass: vtkParametricFunction
    
    vtkParametricSpline is a parametric function for 1D interpolating
    splines. vtkParametricSpline maps the single parameter u into a 3D
    point (x,y,z) using three instances of interpolating splines.  This
    family of 1D splines is guaranteed to be parameterized in the
    interval [0,1].  Attempting to evaluate outside this interval will
    cause the parameter u to be clamped in the range [0,1].
    
    When constructed, this class creates instances of vtkCardinalSpline
    for each of the x-y-z coordinates. The user may choose to replace
    these with their own instances of subclasses of vtkSpline.
    
    @warning
    If you wish to tessellate the spline, use the class
    vtkParametricFunctionSource.
    
    @sa
    vtkSpline vtkKochanekSpline vtkCardinalSpline
    """
    def ClosedOff(self):
        """
        V.ClosedOff()
        C++: virtual void ClosedOff()
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def ClosedOn(self):
        """
        V.ClosedOn()
        C++: virtual void ClosedOn()
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double u[3], double Pt[3], double Du[9])
            override;
        
        Evaluate the spline at parametric coordinate u[0] returning the
        point coordinate Pt[3].
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double u[3], double Pt[3],
            double Du[9]) override;
        
        Evaluate a scalar value at parametric coordinate u[0] and Pt[3].
        The scalar value is just the parameter u[0].
        """
        ...
    
    def GetClosed(self):
        """
        V.GetClosed() -> int
        C++: virtual vtkTypeBool GetClosed()
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetLeftConstraint(self):
        """
        V.GetLeftConstraint() -> int
        C++: virtual int GetLeftConstraint()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetLeftConstraintMaxValue(self):
        """
        V.GetLeftConstraintMaxValue() -> int
        C++: virtual int GetLeftConstraintMaxValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetLeftConstraintMinValue(self):
        """
        V.GetLeftConstraintMinValue() -> int
        C++: virtual int GetLeftConstraintMinValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetLeftValue(self):
        """
        V.GetLeftValue() -> float
        C++: virtual double GetLeftValue()
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetParameterizeByLength(self):
        """
        V.GetParameterizeByLength() -> int
        C++: virtual vtkTypeBool GetParameterizeByLength()
        
        Control whether the spline is parameterized by length or by point
        index. Default is by length.
        """
        ...
    
    def GetPoints(self):
        """
        V.GetPoints() -> vtkPoints
        C++: virtual vtkPoints *GetPoints()
        
        Specify the list of points defining the spline. Do this by
        specifying a vtkPoints array containing the points. Note that the
        order of the points in vtkPoints is the order that the splines
        will be fit.
        """
        ...
    
    def GetRightConstraint(self):
        """
        V.GetRightConstraint() -> int
        C++: virtual int GetRightConstraint()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetRightConstraintMaxValue(self):
        """
        V.GetRightConstraintMaxValue() -> int
        C++: virtual int GetRightConstraintMaxValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetRightConstraintMinValue(self):
        """
        V.GetRightConstraintMinValue() -> int
        C++: virtual int GetRightConstraintMinValue()
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def GetRightValue(self):
        """
        V.GetRightValue() -> float
        C++: virtual double GetRightValue()
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def GetXSpline(self):
        """
        V.GetXSpline() -> vtkSpline
        C++: virtual vtkSpline *GetXSpline()
        
        By default, this class is constructed with three instances of
        vtkCardinalSpline (for each of the x-y-z coordinate axes). The
        user may choose to create and assign their own instances of
        vtkSpline.
        """
        ...
    
    def GetYSpline(self):
        """
        V.GetYSpline() -> vtkSpline
        C++: virtual vtkSpline *GetYSpline()
        
        By default, this class is constructed with three instances of
        vtkCardinalSpline (for each of the x-y-z coordinate axes). The
        user may choose to create and assign their own instances of
        vtkSpline.
        """
        ...
    
    def GetZSpline(self):
        """
        V.GetZSpline() -> vtkSpline
        C++: virtual vtkSpline *GetZSpline()
        
        By default, this class is constructed with three instances of
        vtkCardinalSpline (for each of the x-y-z coordinate axes). The
        user may choose to create and assign their own instances of
        vtkSpline.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricSpline
        C++: vtkParametricSpline *NewInstance()
        """
        ...
    
    def ParameterizeByLengthOff(self):
        """
        V.ParameterizeByLengthOff()
        C++: virtual void ParameterizeByLengthOff()
        
        Control whether the spline is parameterized by length or by point
        index. Default is by length.
        """
        ...
    
    def ParameterizeByLengthOn(self):
        """
        V.ParameterizeByLengthOn()
        C++: virtual void ParameterizeByLengthOn()
        
        Control whether the spline is parameterized by length or by point
        index. Default is by length.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricSpline
        C++: static vtkParametricSpline *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClosed(self, p_int):
        """
        V.SetClosed(int)
        C++: virtual void SetClosed(vtkTypeBool _arg)
        
        Control whether the spline is open or closed. A closed spline
        forms a continuous loop: the first and last points are the same,
        and derivatives are continuous.
        """
        ...
    
    def SetLeftConstraint(self, p_int):
        """
        V.SetLeftConstraint(int)
        C++: virtual void SetLeftConstraint(int _arg)
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def SetLeftValue(self, p_float):
        """
        V.SetLeftValue(float)
        C++: virtual void SetLeftValue(double _arg)
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def SetNumberOfPoints(self, p_int):
        """
        V.SetNumberOfPoints(int)
        C++: void SetNumberOfPoints(vtkIdType numPts)
        
        Another API to set the points. Set the number of points and then
        set the individual point coordinates.
        """
        ...
    
    def SetParameterizeByLength(self, p_int):
        """
        V.SetParameterizeByLength(int)
        C++: virtual void SetParameterizeByLength(vtkTypeBool _arg)
        
        Control whether the spline is parameterized by length or by point
        index. Default is by length.
        """
        ...
    
    def SetPoint(self, p_int, p_float, p_float_1, p_float_2):
        """
        V.SetPoint(int, float, float, float)
        C++: void SetPoint(vtkIdType index, double x, double y, double z)
        
        Another API to set the points. Set the number of points and then
        set the individual point coordinates.
        """
        ...
    
    def SetPoints(self, vtkPoints):
        """
        V.SetPoints(vtkPoints)
        C++: void SetPoints(vtkPoints *)
        
        Specify the list of points defining the spline. Do this by
        specifying a vtkPoints array containing the points. Note that the
        order of the points in vtkPoints is the order that the splines
        will be fit.
        """
        ...
    
    def SetRightConstraint(self, p_int):
        """
        V.SetRightConstraint(int)
        C++: virtual void SetRightConstraint(int _arg)
        
        Set the type of constraint of the left(right) end points. Four
        constraints are available:
        
        * 0: the first derivative at left(right) most point is determined
        * from the line defined from the first(last) two points.
        
        * 1: the first derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 2: the second derivative at left(right) most point is set to
        * Left(Right)Value.
        
        * 3: the second derivative at left(right)most points is
          Left(Right)Value
        * times second derivative at first interior point.
        """
        ...
    
    def SetRightValue(self, p_float):
        """
        V.SetRightValue(float)
        C++: virtual void SetRightValue(double _arg)
        
        The values of the derivative on the left and right sides. The
        value is used only if the left(right) constraint is type 1-3.
        """
        ...
    
    def SetXSpline(self, vtkSpline):
        """
        V.SetXSpline(vtkSpline)
        C++: void SetXSpline(vtkSpline *)
        
        By default, this class is constructed with three instances of
        vtkCardinalSpline (for each of the x-y-z coordinate axes). The
        user may choose to create and assign their own instances of
        vtkSpline.
        """
        ...
    
    def SetYSpline(self, vtkSpline):
        """
        V.SetYSpline(vtkSpline)
        C++: void SetYSpline(vtkSpline *)
        
        By default, this class is constructed with three instances of
        vtkCardinalSpline (for each of the x-y-z coordinate axes). The
        user may choose to create and assign their own instances of
        vtkSpline.
        """
        ...
    
    def SetZSpline(self, vtkSpline):
        """
        V.SetZSpline(vtkSpline)
        C++: void SetZSpline(vtkSpline *)
        
        By default, this class is constructed with three instances of
        vtkCardinalSpline (for each of the x-y-z coordinate axes). The
        user may choose to create and assign their own instances of
        vtkSpline.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricSuperEllipsoid(vtkParametricFunction):
    """
    vtkParametricSuperEllipsoid - Generate a superellipsoid.
    
    Superclass: vtkParametricFunction
    
    vtkParametricSuperEllipsoid generates a superellipsoid.  A
    superellipsoid is a versatile primitive that is controlled by two
    parameters n1 and n2. As special cases it can represent a sphere,
    square box, and closed cylindrical can.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    Also see: http://paulbourke.net/geometry/superellipse/
    
    @warning
    Care needs to be taken specifying the bounds correctly. You may need
    to carefully adjust MinimumU, MinimumV, MaximumU, MaximumV.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        A superellipsoid.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetN1(self):
        """
        V.GetN1() -> float
        C++: virtual double GetN1()
        
        Set/Get the "squareness" parameter in the z axis.  Default is 1.
        """
        ...
    
    def GetN2(self):
        """
        V.GetN2() -> float
        C++: virtual double GetN2()
        
        Set/Get the "squareness" parameter in the x-y plane. Default is
        1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetXRadius(self):
        """
        V.GetXRadius() -> float
        C++: virtual double GetXRadius()
        
        Set/Get the scaling factor for the x-axis. Default is 1.
        """
        ...
    
    def GetYRadius(self):
        """
        V.GetYRadius() -> float
        C++: virtual double GetYRadius()
        
        Set/Get the scaling factor for the y-axis. Default is 1.
        """
        ...
    
    def GetZRadius(self):
        """
        V.GetZRadius() -> float
        C++: virtual double GetZRadius()
        
        Set/Get the scaling factor for the z-axis. Default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricSuperEllipsoid
        C++: vtkParametricSuperEllipsoid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricSuperEllipsoid
        C++: static vtkParametricSuperEllipsoid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetN1(self, p_float):
        """
        V.SetN1(float)
        C++: virtual void SetN1(double _arg)
        
        Set/Get the "squareness" parameter in the z axis.  Default is 1.
        """
        ...
    
    def SetN2(self, p_float):
        """
        V.SetN2(float)
        C++: virtual void SetN2(double _arg)
        
        Set/Get the "squareness" parameter in the x-y plane. Default is
        1.
        """
        ...
    
    def SetXRadius(self, p_float):
        """
        V.SetXRadius(float)
        C++: virtual void SetXRadius(double _arg)
        
        Set/Get the scaling factor for the x-axis. Default is 1.
        """
        ...
    
    def SetYRadius(self, p_float):
        """
        V.SetYRadius(float)
        C++: virtual void SetYRadius(double _arg)
        
        Set/Get the scaling factor for the y-axis. Default is 1.
        """
        ...
    
    def SetZRadius(self, p_float):
        """
        V.SetZRadius(float)
        C++: virtual void SetZRadius(double _arg)
        
        Set/Get the scaling factor for the z-axis. Default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricSuperToroid(vtkParametricFunction):
    """
    vtkParametricSuperToroid - Generate a supertoroid.
    
    Superclass: vtkParametricFunction
    
    vtkParametricSuperToroid generates a supertoroid.  Essentially a
    supertoroid is a torus with the sine and cosine terms raised to a
    power. A supertoroid is a versatile primitive that is controlled by
    four parameters r0, r1, n1 and n2. r0, r1 determine the type of torus
    whilst the value of n1 determines the shape of the torus ring and n2
    determines the shape of the cross section of the ring. It is the
    different values of these powers which give rise to a family of 3D
    shapes that are all basically toroidal in shape.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    Also see: http://paulbourke.net/geometry/torus/#super.
    
    @warning
    Care needs to be taken specifying the bounds correctly. You may need
    to carefully adjust MinimumU, MinimumV, MaximumU, MaximumV.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        A supertoroid.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $ .
        * Then the normal is $N = Du X Dv $ .
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetCrossSectionRadius(self):
        """
        V.GetCrossSectionRadius() -> float
        C++: virtual double GetCrossSectionRadius()
        
        Set/Get the radius of the cross section of ring of the
        supertoroid. Default = 0.5.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetN1(self):
        """
        V.GetN1() -> float
        C++: virtual double GetN1()
        
        Set/Get the shape of the torus ring.  Default is 1.
        """
        ...
    
    def GetN2(self):
        """
        V.GetN2() -> float
        C++: virtual double GetN2()
        
        Set/Get the shape of the cross section of the ring. Default is 1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRingRadius(self):
        """
        V.GetRingRadius() -> float
        C++: virtual double GetRingRadius()
        
        Set/Get the radius from the center to the middle of the ring of
        the supertoroid. Default is 1.
        """
        ...
    
    def GetXRadius(self):
        """
        V.GetXRadius() -> float
        C++: virtual double GetXRadius()
        
        Set/Get the scaling factor for the x-axis. Default is 1.
        """
        ...
    
    def GetYRadius(self):
        """
        V.GetYRadius() -> float
        C++: virtual double GetYRadius()
        
        Set/Get the scaling factor for the y-axis. Default is 1.
        """
        ...
    
    def GetZRadius(self):
        """
        V.GetZRadius() -> float
        C++: virtual double GetZRadius()
        
        Set/Get the scaling factor for the z-axis. Default is 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricSuperToroid
        C++: vtkParametricSuperToroid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricSuperToroid
        C++: static vtkParametricSuperToroid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCrossSectionRadius(self, p_float):
        """
        V.SetCrossSectionRadius(float)
        C++: virtual void SetCrossSectionRadius(double _arg)
        
        Set/Get the radius of the cross section of ring of the
        supertoroid. Default = 0.5.
        """
        ...
    
    def SetN1(self, p_float):
        """
        V.SetN1(float)
        C++: virtual void SetN1(double _arg)
        
        Set/Get the shape of the torus ring.  Default is 1.
        """
        ...
    
    def SetN2(self, p_float):
        """
        V.SetN2(float)
        C++: virtual void SetN2(double _arg)
        
        Set/Get the shape of the cross section of the ring. Default is 1.
        """
        ...
    
    def SetRingRadius(self, p_float):
        """
        V.SetRingRadius(float)
        C++: virtual void SetRingRadius(double _arg)
        
        Set/Get the radius from the center to the middle of the ring of
        the supertoroid. Default is 1.
        """
        ...
    
    def SetXRadius(self, p_float):
        """
        V.SetXRadius(float)
        C++: virtual void SetXRadius(double _arg)
        
        Set/Get the scaling factor for the x-axis. Default is 1.
        """
        ...
    
    def SetYRadius(self, p_float):
        """
        V.SetYRadius(float)
        C++: virtual void SetYRadius(double _arg)
        
        Set/Get the scaling factor for the y-axis. Default is 1.
        """
        ...
    
    def SetZRadius(self, p_float):
        """
        V.SetZRadius(float)
        C++: virtual void SetZRadius(double _arg)
        
        Set/Get the scaling factor for the z-axis. Default is 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkParametricTorus(vtkParametricFunction):
    """
    vtkParametricTorus - Generate a torus.
    
    Superclass: vtkParametricFunction
    
    vtkParametricTorus generates a torus.
    
    For further information about this surface, please consult the
    technical description "Parametric surfaces" in
    http://www.vtk.org/publications in the "VTK Technical Documents"
    section in the VTk.org web pages.
    
    @par Thanks: Andrew Maclean andrew.amaclean@gmail.com for creating
    and contributing the class.
    """
    def Evaluate(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Evaluate([float, float, float], [float, float, float], [float,
            float, float, float, float, float, float, float, float])
        C++: void Evaluate(double uvw[3], double Pt[3], double Duvw[9])
            override;
        
        A torus.
        
        * This function performs the mapping $f(u,v) \rightarrow (x,y,x)
          $, returning it
        * as Pt. It also returns the partial derivatives Du and Dv.
        * $Pt = (x, y, z), Du = (dx/du, dy/du, dz/du), Dv = (dx/dv,
          dy/dv, dz/dv) $.
        * Then the normal is $N = Du X Dv $.
        """
        ...
    
    def EvaluateScalar(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.EvaluateScalar([float, float, float], [float, float, float],
            [float, float, float, float, float, float, float, float,
            float]) -> float
        C++: double EvaluateScalar(double uvw[3], double Pt[3],
            double Duvw[9]) override;
        
        Calculate a user defined scalar using one or all of uvw, Pt,
        Duvw.
        
        * uvw are the parameters with Pt being the Cartesian point,
        * Duvw are the derivatives of this point with respect to u, v and
        w.
        * Pt, Duvw are obtained from Evaluate().
        
        * This function is only called if the ScalarMode has the value
        * vtkParametricFunctionSource::SCALAR_FUNCTION_DEFINED
        
        * If the user does not need to calculate a scalar, then the
        * instantiated function should return zero.
        """
        ...
    
    def GetCrossSectionRadius(self):
        """
        V.GetCrossSectionRadius() -> float
        C++: virtual double GetCrossSectionRadius()
        
        Set/Get the radius of the cross section of ring of the torus.
        Default is 0.5.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: int GetDimension() override;
        
        Return the parametric dimension of the class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRingRadius(self):
        """
        V.GetRingRadius() -> float
        C++: virtual double GetRingRadius()
        
        Set/Get the radius from the center to the middle of the ring of
        the torus. Default is 1.0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParametricTorus
        C++: vtkParametricTorus *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParametricTorus
        C++: static vtkParametricTorus *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCrossSectionRadius(self, p_float):
        """
        V.SetCrossSectionRadius(float)
        C++: virtual void SetCrossSectionRadius(double _arg)
        
        Set/Get the radius of the cross section of ring of the torus.
        Default is 0.5.
        """
        ...
    
    def SetRingRadius(self, p_float):
        """
        V.SetRingRadius(float)
        C++: virtual void SetRingRadius(double _arg)
        
        Set/Get the radius from the center to the middle of the ring of
        the torus. Default is 1.0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
