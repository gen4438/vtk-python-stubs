"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkConvertSelectionDomain(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkConvertSelectionDomain - Convert a selection from one domain to
    another
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkConvertSelectionDomain converts a selection from one domain to
    another using known domain mappings. The domain mappings are
    described by a vtkMultiBlockDataSet containing one or more vtkTables.
    
    The first input port is for the input selection (or collection of
    annotations in a vtkAnnotationLayers object), while the second port
    is for the multi-block of mappings, and the third port is for the
    data that is being selected on.
    
    If the second or third port is not set, this filter will pass the
    selection/annotation to the output unchanged.
    
    The second output is the selection associated with the "current
    annotation" normally representing the current interactive selection.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkConvertSelectionDomain
        C++: vtkConvertSelectionDomain *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkConvertSelectionDomain
        C++: static vtkConvertSelectionDomain *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataRepresentation(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkDataRepresentation - The superclass for all representations
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkDataRepresentation the superclass for representations of data
    objects. This class itself may be instantiated and used as a
    representation that simply holds a connection to a pipeline.
    
    If there are multiple representations present in a view, you should
    use a subclass of vtkDataRepresentation.  The representation is
    responsible for taking the input pipeline connection and converting
    it to an object usable by a view.  In the most common case, the
    representation will contain the pipeline necessary to convert a data
    object into an actor or set of actors.
    
    The representation has a concept of a selection.  If the user
    performs a selection operation on the view, the view forwards this on
    to its representations.  The representation is responsible for
    displaying that selection in an appropriate way.
    
    Representation selections may also be linked.  The representation
    shares the selection by converting it into a view-independent format,
    then setting the selection on its vtkAnnotationLink.  Other
    representations sharing the same selection link instance will get the
    same selection from the selection link when the view is updated.  The
    application is responsible for linking representations as appropriate
    by setting the same vtkAnnotationLink on each linked representation.
    """
    def Annotate(self, vtkView, vtkAnnotationLayers):
        """
        V.Annotate(vtkView, vtkAnnotationLayers)
        C++: void Annotate(vtkView *view,
            vtkAnnotationLayers *annotations)
        V.Annotate(vtkView, vtkAnnotationLayers, bool)
        C++: void Annotate(vtkView *view,
            vtkAnnotationLayers *annotations, bool extend)
        
        Analogous to Select(). The view calls this method when it needs
        to change the underlying annotations (some views might perform
        the creation of annotations). The representation takes the
        annotations and converts them into a selection on its data by
        calling ConvertAnnotations, then calls UpdateAnnotations with the
        converted selection. Subclasses should not override this method,
        but should instead override ConvertSelection. The optional third
        argument specifies whether the selection should be added to the
        previous selection on this representation.
        """
        ...
    
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: virtual void ApplyViewTheme(vtkViewTheme *theme)
        
        Apply a theme to this representation. Subclasses should override
        this method.
        """
        ...
    
    def ConvertSelection(self, vtkView, vtkSelection):
        """
        V.ConvertSelection(vtkView, vtkSelection) -> vtkSelection
        C++: virtual vtkSelection *ConvertSelection(vtkView *view,
            vtkSelection *selection)
        
        Convert the selection to a type appropriate for sharing with
        other representations through vtkAnnotationLink, possibly using
        the view. For the superclass, we just return the same selection.
        Subclasses may do something more fancy, like convert the
        selection from a frustrum to a list of pedigree ids.  If the
        selection cannot be applied to this representation, return
        nullptr.
        """
        ...
    
    def GetAnnotationLink(self):
        """
        V.GetAnnotationLink() -> vtkAnnotationLink
        C++: vtkAnnotationLink *GetAnnotationLink()
        
        The annotation link for this representation. To link annotations,
        set the same vtkAnnotationLink object in multiple
        representations.
        """
        ...
    
    def GetInputConnection(self, p_int, p_int_1):
        """
        V.GetInputConnection(int, int) -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetInputConnection(int port=0,
            int index=0)
        
        Convenience override method for obtaining the input connection
        without specifying the port or index.
        """
        ...
    
    def GetInternalAnnotationOutputPort(self):
        """
        V.GetInternalAnnotationOutputPort() -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalAnnotationOutputPort()
        V.GetInternalAnnotationOutputPort(int) -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalAnnotationOutputPort(
            int port)
        V.GetInternalAnnotationOutputPort(int, int) -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalAnnotationOutputPort(
            int port, int conn)
        
        The output port that contains the annotations whose selections
        are localized for a particular input data object. This should be
        used when connecting the internal pipelines.
        """
        ...
    
    def GetInternalOutputPort(self):
        """
        V.GetInternalOutputPort() -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalOutputPort()
        V.GetInternalOutputPort(int) -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalOutputPort(int port)
        V.GetInternalOutputPort(int, int) -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalOutputPort(int port,
            int conn)
        
        Retrieves an output port for the input data object at the
        specified port and connection index. This may be connected to the
        representation's internal pipeline.
        """
        ...
    
    def GetInternalSelectionOutputPort(self):
        """
        V.GetInternalSelectionOutputPort() -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalSelectionOutputPort()
        V.GetInternalSelectionOutputPort(int) -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalSelectionOutputPort(
            int port)
        V.GetInternalSelectionOutputPort(int, int) -> vtkAlgorithmOutput
        C++: virtual vtkAlgorithmOutput *GetInternalSelectionOutputPort(
            int port, int conn)
        
        The output port that contains the selection associated with the
        current annotation (normally the interactive selection). This
        should be used when connecting the internal pipelines.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSelectable(self):
        """
        V.GetSelectable() -> bool
        C++: virtual bool GetSelectable()
        
        Whether this representation is able to handle a selection.
        Default is true.
        """
        ...
    
    def GetSelectionArrayName(self):
        """
        V.GetSelectionArrayName() -> string
        C++: virtual const char *GetSelectionArrayName()
        
        If a VALUES selection, the array used to produce a selection.
        """
        ...
    
    def GetSelectionArrayNames(self):
        """
        V.GetSelectionArrayNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetSelectionArrayNames()
        
        If a VALUES selection, the arrays used to produce a selection.
        """
        ...
    
    def GetSelectionType(self):
        """
        V.GetSelectionType() -> int
        C++: virtual int GetSelectionType()
        
        Set the selection type produced by this view. This should be one
        of the content type constants defined in vtkSelectionNode.h.
        Common values are vtkSelectionNode::INDICES
        vtkSelectionNode::PEDIGREEIDS vtkSelectionNode::VALUES
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataRepresentation
        C++: vtkDataRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataRepresentation
        C++: static vtkDataRepresentation *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Select(self, vtkView, vtkSelection):
        """
        V.Select(vtkView, vtkSelection)
        C++: void Select(vtkView *view, vtkSelection *selection)
        V.Select(vtkView, vtkSelection, bool)
        C++: void Select(vtkView *view, vtkSelection *selection,
            bool extend)
        
        The view calls this method when a selection occurs. The
        representation takes this selection and converts it into a
        selection on its data by calling ConvertSelection, then calls
        UpdateSelection with the converted selection. Subclasses should
        not override this method, but should instead override
        ConvertSelection. The optional third argument specifies whether
        the selection should be added to the previous selection on this
        representation.
        """
        ...
    
    def SelectableOff(self):
        """
        V.SelectableOff()
        C++: virtual void SelectableOff()
        
        Whether this representation is able to handle a selection.
        Default is true.
        """
        ...
    
    def SelectableOn(self):
        """
        V.SelectableOn()
        C++: virtual void SelectableOn()
        
        Whether this representation is able to handle a selection.
        Default is true.
        """
        ...
    
    def SetAnnotationLink(self, vtkAnnotationLink):
        """
        V.SetAnnotationLink(vtkAnnotationLink)
        C++: void SetAnnotationLink(vtkAnnotationLink *link)
        """
        ...
    
    def SetSelectable(self, bool):
        """
        V.SetSelectable(bool)
        C++: virtual void SetSelectable(bool _arg)
        
        Whether this representation is able to handle a selection.
        Default is true.
        """
        ...
    
    def SetSelectionArrayName(self, string):
        """
        V.SetSelectionArrayName(string)
        C++: virtual void SetSelectionArrayName(const char *name)
        
        If a VALUES selection, the array used to produce a selection.
        """
        ...
    
    def SetSelectionArrayNames(self, vtkStringArray):
        """
        V.SetSelectionArrayNames(vtkStringArray)
        C++: virtual void SetSelectionArrayNames(vtkStringArray *names)
        
        If a VALUES selection, the arrays used to produce a selection.
        """
        ...
    
    def SetSelectionType(self, p_int):
        """
        V.SetSelectionType(int)
        C++: virtual void SetSelectionType(int _arg)
        
        Set the selection type produced by this view. This should be one
        of the content type constants defined in vtkSelectionNode.h.
        Common values are vtkSelectionNode::INDICES
        vtkSelectionNode::PEDIGREEIDS vtkSelectionNode::VALUES
        """
        ...
    
    def UpdateAnnotations(self, vtkAnnotationLayers):
        """
        V.UpdateAnnotations(vtkAnnotationLayers)
        C++: void UpdateAnnotations(vtkAnnotationLayers *annotations)
        V.UpdateAnnotations(vtkAnnotationLayers, bool)
        C++: void UpdateAnnotations(vtkAnnotationLayers *annotations,
            bool extend)
        
        Updates the selection in the selection link and fires a selection
        change event. Subclasses should not override this method, but
        should instead override ConvertSelection. The optional second
        argument specifies whether the selection should be added to the
        previous selection on this representation.
        """
        ...
    
    def UpdateSelection(self, vtkSelection):
        """
        V.UpdateSelection(vtkSelection)
        C++: void UpdateSelection(vtkSelection *selection)
        V.UpdateSelection(vtkSelection, bool)
        C++: void UpdateSelection(vtkSelection *selection, bool extend)
        
        Updates the selection in the selection link and fires a selection
        change event. Subclasses should not override this method, but
        should instead override ConvertSelection. The optional second
        argument specifies whether the selection should be added to the
        previous selection on this representation.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkEmptyRepresentation(vtkDataRepresentation):
    """
    vtkEmptyRepresentation - 
    
    Superclass: vtkDataRepresentation
    """
    def GetInternalAnnotationOutputPort(self):
        """
        V.GetInternalAnnotationOutputPort() -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetInternalAnnotationOutputPort()
            override;
        V.GetInternalAnnotationOutputPort(int) -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetInternalAnnotationOutputPort(int port)
             override;
        V.GetInternalAnnotationOutputPort(int, int) -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetInternalAnnotationOutputPort(int port,
             int conn) override;
        
        Since this representation has no inputs, override superclass
        implementation with one that ignores "port" and "conn" and still
        allows it to have an annotation output.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEmptyRepresentation
        C++: vtkEmptyRepresentation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEmptyRepresentation
        C++: static vtkEmptyRepresentation *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkView(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkView - The superclass for all views.
    
    Superclass: vtkObject
    
    vtkView is the superclass for views.  A view is generally an area of
    an application's canvas devoted to displaying one or more VTK data
    objects. Associated representations (subclasses of
    vtkDataRepresentation) are responsible for converting the data into a
    displayable format.  These representations are then added to the
    view.
    
    For views which display only one data object at a time you may set a
    data object or pipeline connection directly on the view itself (e.g.
    vtkGraphLayoutView, vtkLandscapeView, vtkTreeMapView). The view will
    internally create a vtkDataRepresentation for the data.
    
    A view has the concept of linked selection.  If the same data is
    displayed in multiple views, their selections may be linked by
    setting the same vtkAnnotationLink on their representations (see
    vtkDataRepresentation).
    """
    def AddRepresentation(self, vtkDataRepresentation):
        """
        V.AddRepresentation(vtkDataRepresentation)
        C++: void AddRepresentation(vtkDataRepresentation *rep)
        
        Adds the representation to the view.
        """
        ...
    
    def AddRepresentationFromInput(self, vtkDataObject):
        """
        V.AddRepresentationFromInput(vtkDataObject)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *AddRepresentationFromInput(
            vtkDataObject *input)
        
        Convenience method which creates a simple representation with the
        specified input and adds it to the view. NOTE: The returned
        representation pointer is not reference-counted, so you MUST call
        Register() on the representation if you want to keep a reference
        to it.
        """
        ...
    
    def AddRepresentationFromInputConnection(self, vtkAlgorithmOutput):
        """
        V.AddRepresentationFromInputConnection(vtkAlgorithmOutput)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *AddRepresentationFromInputConnection(
            vtkAlgorithmOutput *conn)
        
        Convenience method which creates a simple representation with the
        connection and adds it to the view. Returns the representation
        internally created. NOTE: The returned representation pointer is
        not reference-counted, so you MUST call Register() on the
        representation if you want to keep a reference to it.
        """
        ...
    
    def ApplyViewTheme(self, vtkViewTheme):
        """
        V.ApplyViewTheme(vtkViewTheme)
        C++: virtual void ApplyViewTheme(vtkViewTheme *theme)
        
        Apply a theme to the view.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfRepresentations(self):
        """
        V.GetNumberOfRepresentations() -> int
        C++: int GetNumberOfRepresentations()
        
        Returns the number of representations from first port(0) in this
        view.
        """
        ...
    
    def GetObserver(self):
        """
        V.GetObserver() -> vtkCommand
        C++: vtkCommand *GetObserver()
        
        Returns the observer that the subclasses can use to listen to
        additional events. Additionally these subclasses should override
        ProcessEvents() to handle these events.
        """
        ...
    
    def GetRepresentation(self, p_int):
        """
        V.GetRepresentation(int) -> vtkDataRepresentation
        C++: vtkDataRepresentation *GetRepresentation(int index=0)
        
        The representation at a specified index.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsRepresentationPresent(self, vtkDataRepresentation):
        """
        V.IsRepresentationPresent(vtkDataRepresentation) -> bool
        C++: bool IsRepresentationPresent(vtkDataRepresentation *rep)
        
        Check to see if a representation is present in the view.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkView
        C++: vtkView *NewInstance()
        """
        ...
    
    def RegisterProgress(self, vtkObject, string):
        """
        V.RegisterProgress(vtkObject, string)
        C++: void RegisterProgress(vtkObject *algorithm,
            const char *message=nullptr)
        
        Meant for use by subclasses and vtkRepresentation subclasses.
        Call this method to register vtkObjects (generally vtkAlgorithm
        subclasses) which fire vtkCommand::ProgressEvent with the view.
        The view listens to vtkCommand::ProgressEvent and fires
        ViewProgressEvent with ViewProgressEventCallData containing the
        message and the progress amount. If message is not provided, then
        the class name for the algorithm is used.
        """
        ...
    
    def RemoveAllRepresentations(self):
        """
        V.RemoveAllRepresentations()
        C++: void RemoveAllRepresentations()
        
        Removes all representations from the view.
        """
        ...
    
    def RemoveRepresentation(self, vtkDataRepresentation):
        """
        V.RemoveRepresentation(vtkDataRepresentation)
        C++: void RemoveRepresentation(vtkDataRepresentation *rep)
        V.RemoveRepresentation(vtkAlgorithmOutput)
        C++: void RemoveRepresentation(vtkAlgorithmOutput *rep)
        
        Removes the representation from the view.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkView
        C++: static vtkView *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetRepresentation(self, vtkDataRepresentation):
        """
        V.SetRepresentation(vtkDataRepresentation)
        C++: void SetRepresentation(vtkDataRepresentation *rep)
        
        Set the representation to the view.
        """
        ...
    
    def SetRepresentationFromInput(self, vtkDataObject):
        """
        V.SetRepresentationFromInput(vtkDataObject)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetRepresentationFromInput(
            vtkDataObject *input)
        
        Convenience method which sets the representation to the specified
        input and adds it to the view. NOTE: The returned representation
        pointer is not reference-counted, so you MUST call Register() on
        the representation if you want to keep a reference to it.
        """
        ...
    
    def SetRepresentationFromInputConnection(self, vtkAlgorithmOutput):
        """
        V.SetRepresentationFromInputConnection(vtkAlgorithmOutput)
            -> vtkDataRepresentation
        C++: vtkDataRepresentation *SetRepresentationFromInputConnection(
            vtkAlgorithmOutput *conn)
        
        Convenience method which sets the representation with the
        connection and adds it to the view. Returns the representation
        internally created. NOTE: The returned representation pointer is
        not reference-counted, so you MUST call Register() on the
        representation if you want to keep a reference to it.
        """
        ...
    
    def UnRegisterProgress(self, vtkObject):
        """
        V.UnRegisterProgress(vtkObject)
        C++: void UnRegisterProgress(vtkObject *algorithm)
        
        Unregister objects previously registered with RegisterProgress.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: virtual void Update()
        
        Update the view.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRenderViewBase(vtkView):
    """
    vtkRenderViewBase - A base view containing a renderer.
    
    Superclass: vtkView
    
    vtkRenderViewBase is a view which contains a vtkRenderer.  You may
    add vtkActors directly to the renderer.
    
    This class is also the parent class for any more specialized view
    which uses a renderer.
    """
    def GetInteractor(self):
        """
        V.GetInteractor() -> vtkRenderWindowInteractor
        C++: virtual vtkRenderWindowInteractor *GetInteractor()
        
        The render window interactor. Note that this requires special
        handling in order to do correctly - see the notes in the detailed
        description of vtkRenderViewBase.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        Gets the renderer for this view.
        """
        ...
    
    def GetRenderWindow(self):
        """
        V.GetRenderWindow() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetRenderWindow()
        
        Get a handle to the render window.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderViewBase
        C++: vtkRenderViewBase *NewInstance()
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: virtual void Render()
        
        Updates the representations, then calls Render() on the render
        window associated with this view.
        """
        ...
    
    def ResetCamera(self):
        """
        V.ResetCamera()
        C++: virtual void ResetCamera()
        
        Updates the representations, then calls ResetCamera() on the
        renderer associated with this view.
        """
        ...
    
    def ResetCameraClippingRange(self):
        """
        V.ResetCameraClippingRange()
        C++: virtual void ResetCameraClippingRange()
        
        Updates the representations, then calls
        ResetCameraClippingRange() on the renderer associated with this
        view.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderViewBase
        C++: static vtkRenderViewBase *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: virtual void SetInteractor(vtkRenderWindowInteractor *)
        
        The render window interactor. Note that this requires special
        handling in order to do correctly - see the notes in the detailed
        description of vtkRenderViewBase.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: virtual void SetRenderer(vtkRenderer *ren)
        """
        ...
    
    def SetRenderWindow(self, vtkRenderWindow):
        """
        V.SetRenderWindow(vtkRenderWindow)
        C++: virtual void SetRenderWindow(vtkRenderWindow *win)
        
        Set the render window for this view. Note that this requires
        special handling in order to do correctly - see the notes in the
        detailed description of vtkRenderViewBase.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkViewTheme(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkViewTheme - Sets theme colors for a graphical view.
    
    Superclass: vtkObject
    
    This may be set on any subclass of vtkView.  The view class will
    attempt to use the values set in the theme to customize the view. 
    Views will not generally use every aspect of the theme. NOTICE: This
    class will be deprecated in favor of a more robust solution based on
    style sheets.  Do not become overly-dependent on the functionality of
    themes.
    """
    def CreateMellowTheme(self):
        """
        V.CreateMellowTheme() -> vtkViewTheme
        C++: static vtkViewTheme *CreateMellowTheme()
        
        Convenience methods for creating some default view themes. The
        return reference is reference-counted, so you will have to call
        Delete() on the reference when you are finished with it.
        """
        ...
    
    def CreateNeonTheme(self):
        """
        V.CreateNeonTheme() -> vtkViewTheme
        C++: static vtkViewTheme *CreateNeonTheme()
        
        Convenience methods for creating some default view themes. The
        return reference is reference-counted, so you will have to call
        Delete() on the reference when you are finished with it.
        """
        ...
    
    def CreateOceanTheme(self):
        """
        V.CreateOceanTheme() -> vtkViewTheme
        C++: static vtkViewTheme *CreateOceanTheme()
        
        Convenience methods for creating some default view themes. The
        return reference is reference-counted, so you will have to call
        Delete() on the reference when you are finished with it.
        """
        ...
    
    def GetBackgroundColor(self):
        """
        V.GetBackgroundColor() -> (float, float, float)
        C++: virtual double *GetBackgroundColor()
        
        The view background color.
        """
        ...
    
    def GetBackgroundColor2(self):
        """
        V.GetBackgroundColor2() -> (float, float, float)
        C++: virtual double *GetBackgroundColor2()
        
        The second background color (for gradients).
        """
        ...
    
    def GetCellAlphaRange(self):
        """
        V.GetCellAlphaRange() -> (float, ...)
        C++: virtual double *GetCellAlphaRange()
        V.GetCellAlphaRange(float, float)
        C++: virtual void GetCellAlphaRange(double &mn, double &mx)
        V.GetCellAlphaRange([float, float])
        C++: virtual void GetCellAlphaRange(double rng[2])
        """
        ...
    
    def GetCellColor(self):
        """
        V.GetCellColor() -> (float, float, float)
        C++: virtual double *GetCellColor()
        
        The color and opacity of cells or edges when not mapped through a
        lookup table.
        """
        ...
    
    def GetCellHueRange(self):
        """
        V.GetCellHueRange() -> (float, ...)
        C++: virtual double *GetCellHueRange()
        V.GetCellHueRange(float, float)
        C++: virtual void GetCellHueRange(double &mn, double &mx)
        V.GetCellHueRange([float, float])
        C++: virtual void GetCellHueRange(double rng[2])
        
        The ranges to use in the cell lookup table. You may also do this
        by accessing the cell lookup table directly with
        GetCellLookupTable() and calling these methods.
        """
        ...
    
    def GetCellLookupTable(self):
        """
        V.GetCellLookupTable() -> vtkScalarsToColors
        C++: virtual vtkScalarsToColors *GetCellLookupTable()
        
        Set/Get the cell lookup table.
        """
        ...
    
    def GetCellOpacity(self):
        """
        V.GetCellOpacity() -> float
        C++: virtual double GetCellOpacity()
        
        The color and opacity of cells or edges when not mapped through a
        lookup table.
        """
        ...
    
    def GetCellSaturationRange(self):
        """
        V.GetCellSaturationRange() -> (float, ...)
        C++: virtual double *GetCellSaturationRange()
        V.GetCellSaturationRange(float, float)
        C++: virtual void GetCellSaturationRange(double &mn, double &mx)
        V.GetCellSaturationRange([float, float])
        C++: virtual void GetCellSaturationRange(double rng[2])
        """
        ...
    
    def GetCellTextProperty(self):
        """
        V.GetCellTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetCellTextProperty()
        
        The text property to use for labeling edges/cells.
        """
        ...
    
    def GetCellValueRange(self):
        """
        V.GetCellValueRange() -> (float, ...)
        C++: virtual double *GetCellValueRange()
        V.GetCellValueRange(float, float)
        C++: virtual void GetCellValueRange(double &mn, double &mx)
        V.GetCellValueRange([float, float])
        C++: virtual void GetCellValueRange(double rng[2])
        """
        ...
    
    def GetEdgeLabelColor(self):
        """
        V.GetEdgeLabelColor() -> (float, ...)
        C++: virtual double *GetEdgeLabelColor()
        V.GetEdgeLabelColor(float, float, float)
        C++: virtual void GetEdgeLabelColor(double &r, double &g,
            double &b)
        V.GetEdgeLabelColor([float, float, float])
        C++: virtual void GetEdgeLabelColor(double c[3])
        
        The color to use for labeling graph edges. This is deprecated.
        Use GetCellTextProperty()->SetColor() instead.
        """
        ...
    
    def GetLineWidth(self):
        """
        V.GetLineWidth() -> float
        C++: virtual double GetLineWidth()
        
        The width of lines or edges
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutlineColor(self):
        """
        V.GetOutlineColor() -> (float, float, float)
        C++: virtual double *GetOutlineColor()
        
        The color of any outlines in the view.
        """
        ...
    
    def GetPointAlphaRange(self):
        """
        V.GetPointAlphaRange() -> (float, ...)
        C++: virtual double *GetPointAlphaRange()
        V.GetPointAlphaRange(float, float)
        C++: virtual void GetPointAlphaRange(double &mn, double &mx)
        V.GetPointAlphaRange([float, float])
        C++: virtual void GetPointAlphaRange(double rng[2])
        """
        ...
    
    def GetPointColor(self):
        """
        V.GetPointColor() -> (float, float, float)
        C++: virtual double *GetPointColor()
        
        The color and opacity of points or vertices when not mapped
        through a lookup table.
        """
        ...
    
    def GetPointHueRange(self):
        """
        V.GetPointHueRange() -> (float, ...)
        C++: virtual double *GetPointHueRange()
        V.GetPointHueRange(float, float)
        C++: virtual void GetPointHueRange(double &mn, double &mx)
        V.GetPointHueRange([float, float])
        C++: virtual void GetPointHueRange(double rng[2])
        
        The ranges to use in the point lookup table. You may also do this
        by accessing the point lookup table directly with
        GetPointLookupTable() and calling these methods.
        """
        ...
    
    def GetPointLookupTable(self):
        """
        V.GetPointLookupTable() -> vtkScalarsToColors
        C++: virtual vtkScalarsToColors *GetPointLookupTable()
        
        Set/Get the point lookup table.
        """
        ...
    
    def GetPointOpacity(self):
        """
        V.GetPointOpacity() -> float
        C++: virtual double GetPointOpacity()
        
        The color and opacity of points or vertices when not mapped
        through a lookup table.
        """
        ...
    
    def GetPointSaturationRange(self):
        """
        V.GetPointSaturationRange() -> (float, ...)
        C++: virtual double *GetPointSaturationRange()
        V.GetPointSaturationRange(float, float)
        C++: virtual void GetPointSaturationRange(double &mn, double &mx)
        V.GetPointSaturationRange([float, float])
        C++: virtual void GetPointSaturationRange(double rng[2])
        """
        ...
    
    def GetPointSize(self):
        """
        V.GetPointSize() -> float
        C++: virtual double GetPointSize()
        
        The size of points or vertices
        """
        ...
    
    def GetPointTextProperty(self):
        """
        V.GetPointTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetPointTextProperty()
        
        The text property to use for labeling points/vertices.
        """
        ...
    
    def GetPointValueRange(self):
        """
        V.GetPointValueRange() -> (float, ...)
        C++: virtual double *GetPointValueRange()
        V.GetPointValueRange(float, float)
        C++: virtual void GetPointValueRange(double &mn, double &mx)
        V.GetPointValueRange([float, float])
        C++: virtual void GetPointValueRange(double rng[2])
        """
        ...
    
    def GetScaleCellLookupTable(self):
        """
        V.GetScaleCellLookupTable() -> bool
        C++: virtual bool GetScaleCellLookupTable()
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def GetScalePointLookupTable(self):
        """
        V.GetScalePointLookupTable() -> bool
        C++: virtual bool GetScalePointLookupTable()
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def GetSelectedCellColor(self):
        """
        V.GetSelectedCellColor() -> (float, float, float)
        C++: virtual double *GetSelectedCellColor()
        
        The color of selected cells or edges.
        """
        ...
    
    def GetSelectedCellOpacity(self):
        """
        V.GetSelectedCellOpacity() -> float
        C++: virtual double GetSelectedCellOpacity()
        
        The color of selected cells or edges.
        """
        ...
    
    def GetSelectedPointColor(self):
        """
        V.GetSelectedPointColor() -> (float, float, float)
        C++: virtual double *GetSelectedPointColor()
        
        The color of selected points or vertices.
        """
        ...
    
    def GetSelectedPointOpacity(self):
        """
        V.GetSelectedPointOpacity() -> float
        C++: virtual double GetSelectedPointOpacity()
        
        The color of selected points or vertices.
        """
        ...
    
    def GetVertexLabelColor(self):
        """
        V.GetVertexLabelColor() -> (float, ...)
        C++: virtual double *GetVertexLabelColor()
        V.GetVertexLabelColor(float, float, float)
        C++: virtual void GetVertexLabelColor(double &r, double &g,
            double &b)
        V.GetVertexLabelColor([float, float, float])
        C++: virtual void GetVertexLabelColor(double c[3])
        
        The color to use for labeling graph vertices. This is deprecated.
        Use GetPointTextProperty()->SetColor() instead.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LookupMatchesCellTheme(self, vtkScalarsToColors):
        """
        V.LookupMatchesCellTheme(vtkScalarsToColors) -> bool
        C++: bool LookupMatchesCellTheme(vtkScalarsToColors *s2c)
        
        Whether a given lookup table matches the point or cell theme of
        this theme.
        """
        ...
    
    def LookupMatchesPointTheme(self, vtkScalarsToColors):
        """
        V.LookupMatchesPointTheme(vtkScalarsToColors) -> bool
        C++: bool LookupMatchesPointTheme(vtkScalarsToColors *s2c)
        
        Whether a given lookup table matches the point or cell theme of
        this theme.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkViewTheme
        C++: vtkViewTheme *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkViewTheme
        C++: static vtkViewTheme *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScaleCellLookupTableOff(self):
        """
        V.ScaleCellLookupTableOff()
        C++: virtual void ScaleCellLookupTableOff()
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def ScaleCellLookupTableOn(self):
        """
        V.ScaleCellLookupTableOn()
        C++: virtual void ScaleCellLookupTableOn()
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def ScalePointLookupTableOff(self):
        """
        V.ScalePointLookupTableOff()
        C++: virtual void ScalePointLookupTableOff()
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def ScalePointLookupTableOn(self):
        """
        V.ScalePointLookupTableOn()
        C++: virtual void ScalePointLookupTableOn()
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def SetBackgroundColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetBackgroundColor(float, float, float)
        C++: virtual void SetBackgroundColor(double _arg1, double _arg2,
            double _arg3)
        V.SetBackgroundColor((float, float, float))
        C++: virtual void SetBackgroundColor(const double _arg[3])
        
        The view background color.
        """
        ...
    
    def SetBackgroundColor2(self, p_float, p_float_1, p_float_2):
        """
        V.SetBackgroundColor2(float, float, float)
        C++: virtual void SetBackgroundColor2(double _arg1, double _arg2,
            double _arg3)
        V.SetBackgroundColor2((float, float, float))
        C++: virtual void SetBackgroundColor2(const double _arg[3])
        
        The second background color (for gradients).
        """
        ...
    
    def SetCellAlphaRange(self, p_float, p_float_1):
        """
        V.SetCellAlphaRange(float, float)
        C++: virtual void SetCellAlphaRange(double mn, double mx)
        V.SetCellAlphaRange([float, float])
        C++: virtual void SetCellAlphaRange(double rng[2])
        """
        ...
    
    def SetCellColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetCellColor(float, float, float)
        C++: virtual void SetCellColor(double _arg1, double _arg2,
            double _arg3)
        V.SetCellColor((float, float, float))
        C++: virtual void SetCellColor(const double _arg[3])
        
        The color and opacity of cells or edges when not mapped through a
        lookup table.
        """
        ...
    
    def SetCellHueRange(self, p_float, p_float_1):
        """
        V.SetCellHueRange(float, float)
        C++: virtual void SetCellHueRange(double mn, double mx)
        V.SetCellHueRange([float, float])
        C++: virtual void SetCellHueRange(double rng[2])
        
        The ranges to use in the cell lookup table. You may also do this
        by accessing the cell lookup table directly with
        GetCellLookupTable() and calling these methods.
        """
        ...
    
    def SetCellLookupTable(self, vtkScalarsToColors):
        """
        V.SetCellLookupTable(vtkScalarsToColors)
        C++: virtual void SetCellLookupTable(vtkScalarsToColors *lut)
        
        Set/Get the cell lookup table.
        """
        ...
    
    def SetCellOpacity(self, p_float):
        """
        V.SetCellOpacity(float)
        C++: virtual void SetCellOpacity(double _arg)
        
        The color and opacity of cells or edges when not mapped through a
        lookup table.
        """
        ...
    
    def SetCellSaturationRange(self, p_float, p_float_1):
        """
        V.SetCellSaturationRange(float, float)
        C++: virtual void SetCellSaturationRange(double mn, double mx)
        V.SetCellSaturationRange([float, float])
        C++: virtual void SetCellSaturationRange(double rng[2])
        """
        ...
    
    def SetCellTextProperty(self, vtkTextProperty):
        """
        V.SetCellTextProperty(vtkTextProperty)
        C++: virtual void SetCellTextProperty(vtkTextProperty *tprop)
        
        The text property to use for labeling edges/cells.
        """
        ...
    
    def SetCellValueRange(self, p_float, p_float_1):
        """
        V.SetCellValueRange(float, float)
        C++: virtual void SetCellValueRange(double mn, double mx)
        V.SetCellValueRange([float, float])
        C++: virtual void SetCellValueRange(double rng[2])
        """
        ...
    
    def SetEdgeLabelColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetEdgeLabelColor(float, float, float)
        C++: virtual void SetEdgeLabelColor(double r, double g, double b)
        V.SetEdgeLabelColor([float, float, float])
        C++: virtual void SetEdgeLabelColor(double c[3])
        
        The color to use for labeling graph edges. This is deprecated.
        Use GetCellTextProperty()->SetColor() instead.
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: virtual void SetLineWidth(double _arg)
        
        The width of lines or edges
        """
        ...
    
    def SetOutlineColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetOutlineColor(float, float, float)
        C++: virtual void SetOutlineColor(double _arg1, double _arg2,
            double _arg3)
        V.SetOutlineColor((float, float, float))
        C++: virtual void SetOutlineColor(const double _arg[3])
        
        The color of any outlines in the view.
        """
        ...
    
    def SetPointAlphaRange(self, p_float, p_float_1):
        """
        V.SetPointAlphaRange(float, float)
        C++: virtual void SetPointAlphaRange(double mn, double mx)
        V.SetPointAlphaRange([float, float])
        C++: virtual void SetPointAlphaRange(double rng[2])
        """
        ...
    
    def SetPointColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetPointColor(float, float, float)
        C++: virtual void SetPointColor(double _arg1, double _arg2,
            double _arg3)
        V.SetPointColor((float, float, float))
        C++: virtual void SetPointColor(const double _arg[3])
        
        The color and opacity of points or vertices when not mapped
        through a lookup table.
        """
        ...
    
    def SetPointHueRange(self, p_float, p_float_1):
        """
        V.SetPointHueRange(float, float)
        C++: virtual void SetPointHueRange(double mn, double mx)
        V.SetPointHueRange([float, float])
        C++: virtual void SetPointHueRange(double rng[2])
        
        The ranges to use in the point lookup table. You may also do this
        by accessing the point lookup table directly with
        GetPointLookupTable() and calling these methods.
        """
        ...
    
    def SetPointLookupTable(self, vtkScalarsToColors):
        """
        V.SetPointLookupTable(vtkScalarsToColors)
        C++: virtual void SetPointLookupTable(vtkScalarsToColors *lut)
        
        Set/Get the point lookup table.
        """
        ...
    
    def SetPointOpacity(self, p_float):
        """
        V.SetPointOpacity(float)
        C++: virtual void SetPointOpacity(double _arg)
        
        The color and opacity of points or vertices when not mapped
        through a lookup table.
        """
        ...
    
    def SetPointSaturationRange(self, p_float, p_float_1):
        """
        V.SetPointSaturationRange(float, float)
        C++: virtual void SetPointSaturationRange(double mn, double mx)
        V.SetPointSaturationRange([float, float])
        C++: virtual void SetPointSaturationRange(double rng[2])
        """
        ...
    
    def SetPointSize(self, p_float):
        """
        V.SetPointSize(float)
        C++: virtual void SetPointSize(double _arg)
        
        The size of points or vertices
        """
        ...
    
    def SetPointTextProperty(self, vtkTextProperty):
        """
        V.SetPointTextProperty(vtkTextProperty)
        C++: virtual void SetPointTextProperty(vtkTextProperty *tprop)
        
        The text property to use for labeling points/vertices.
        """
        ...
    
    def SetPointValueRange(self, p_float, p_float_1):
        """
        V.SetPointValueRange(float, float)
        C++: virtual void SetPointValueRange(double mn, double mx)
        V.SetPointValueRange([float, float])
        C++: virtual void SetPointValueRange(double rng[2])
        """
        ...
    
    def SetScaleCellLookupTable(self, bool):
        """
        V.SetScaleCellLookupTable(bool)
        C++: virtual void SetScaleCellLookupTable(bool _arg)
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def SetScalePointLookupTable(self, bool):
        """
        V.SetScalePointLookupTable(bool)
        C++: virtual void SetScalePointLookupTable(bool _arg)
        
        Whether to scale the lookup table to fit the range of the data.
        """
        ...
    
    def SetSelectedCellColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetSelectedCellColor(float, float, float)
        C++: virtual void SetSelectedCellColor(double _arg1, double _arg2,
             double _arg3)
        V.SetSelectedCellColor((float, float, float))
        C++: virtual void SetSelectedCellColor(const double _arg[3])
        
        The color of selected cells or edges.
        """
        ...
    
    def SetSelectedCellOpacity(self, p_float):
        """
        V.SetSelectedCellOpacity(float)
        C++: virtual void SetSelectedCellOpacity(double _arg)
        
        The color of selected cells or edges.
        """
        ...
    
    def SetSelectedPointColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetSelectedPointColor(float, float, float)
        C++: virtual void SetSelectedPointColor(double _arg1,
            double _arg2, double _arg3)
        V.SetSelectedPointColor((float, float, float))
        C++: virtual void SetSelectedPointColor(const double _arg[3])
        
        The color of selected points or vertices.
        """
        ...
    
    def SetSelectedPointOpacity(self, p_float):
        """
        V.SetSelectedPointOpacity(float)
        C++: virtual void SetSelectedPointOpacity(double _arg)
        
        The color of selected points or vertices.
        """
        ...
    
    def SetVertexLabelColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetVertexLabelColor(float, float, float)
        C++: virtual void SetVertexLabelColor(double r, double g,
            double b)
        V.SetVertexLabelColor([float, float, float])
        C++: virtual void SetVertexLabelColor(double c[3])
        
        The color to use for labeling graph vertices. This is deprecated.
        Use GetPointTextProperty()->SetColor() instead.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
