"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

VTK_EDGE_OVERLAP = ...
VTK_NODE_OVERLAP = ...
VTK_NO_OVERLAP = ...
VTK_PARTIAL_OVERLAP = ...
class vtkAbstractGridConnectivity(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAbstractGridConnectivity -  A superclass that defines the
    interface to be implemented by all
     concrete grid connectivity classes.
    
    Superclass: vtkObject
    
    Grid connectivity classes provide the
     mechanism to achieve the following:
     
       
         Handling of partitioned/distributed data
    
    
          Construct the neighboring topology information for each
    partition,e.g.,
          used for creating communication lists and in computing
    statistics,i.e.,
          average, mean, etc.
         
         Creation of ghost layers
    
    
          Provides the mechanism for automatically generating ghost
    information
          given a partitioned/distributed grid configuration.
         
       
     
    
    @sa
     vtkStructuredGridConnectivity vtkStructuredAMRGridConnectivity
    """
    def ComputeNeighbors(self):
        """
        V.ComputeNeighbors()
        C++: virtual void ComputeNeighbors()
        
        Computes the grid neighboring topology for the domain
        """
        ...
    
    def CreateGhostLayers(self, p_int):
        """
        V.CreateGhostLayers(int)
        C++: virtual void CreateGhostLayers(const int N=1)
        
        Creates N layers of ghost layers where N is the number of cells
        that will be added to each grid. If no parameter is supplied, N
        has a nominal value of 1, in which case 1 layer of cells would be
        added. NOTE: This method is implemented by concrete
        implementations
        """
        ...
    
    def GetGhostedCellGhostArray(self, p_int):
        """
        V.GetGhostedCellGhostArray(int) -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *GetGhostedCellGhostArray(
            const int gridID)
        
        Returns the ghosted cells ghost array for the grid associated
        with the given grid ID. The return pointer is a shallow-copy of
        the internal data-structure. The pointer may be nullptr iff there
        is no ghosted cells ghost array for the requested grid.
        """
        ...
    
    def GetGhostedGridCellData(self, p_int):
        """
        V.GetGhostedGridCellData(int) -> vtkCellData
        C++: vtkCellData *GetGhostedGridCellData(const int gridID)
        
        Returns the ghosted grid cell data for the grid associated with
        the given grid ID. The return pointer is a shallow-copy of the
        internal data-structure. The pointer may be nullptr iff there is
        no ghosted cell data for the requested grid.
        """
        ...
    
    def GetGhostedGridPointData(self, p_int):
        """
        V.GetGhostedGridPointData(int) -> vtkPointData
        C++: vtkPointData *GetGhostedGridPointData(const int gridID)
        
        Returns the ghosted grid point data for the grid associated with
        the given grid ID. The return pointer is a shallow-copy of the
        internal data-structure. The pointer may be nullptr iff there is
        no ghosted point data for the requested grid.
        """
        ...
    
    def GetGhostedPointGhostArray(self, p_int):
        """
        V.GetGhostedPointGhostArray(int) -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *GetGhostedPointGhostArray(
            const int gridID)
        
        Returns the ghosted points ghost array for the grid associated
        with the given grid ID. The return pointer is a shallow-copy of
        the internal data-structure. The pointer may be nullptr iff there
        is no ghosted points ghost array for the requested grid.
        """
        ...
    
    def GetGhostedPoints(self, p_int):
        """
        V.GetGhostedPoints(int) -> vtkPoints
        C++: vtkPoints *GetGhostedPoints(const int gridID)
        
        Returns the ghosted grid points for the grid associated with the
        given grid ID. The return pointer is a shallow-copy of the
        internal data structure. The pointer may be nullptr iff there are
        no ghosted points created for the requested grid.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGhostLayers(self):
        """
        V.GetNumberOfGhostLayers() -> int
        C++: virtual unsigned int GetNumberOfGhostLayers()
        
        Set/Get the number of ghost layers
        """
        ...
    
    def GetNumberOfGrids(self):
        """
        V.GetNumberOfGrids() -> int
        C++: unsigned int GetNumberOfGrids()
        
        Returns the total number of grids.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractGridConnectivity
        C++: vtkAbstractGridConnectivity *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractGridConnectivity
        C++: static vtkAbstractGridConnectivity *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfGhostLayers(self, p_int):
        """
        V.SetNumberOfGhostLayers(int)
        C++: virtual void SetNumberOfGhostLayers(unsigned int _arg)
        
        Set/Get the number of ghost layers
        """
        ...
    
    def SetNumberOfGrids(self, p_int):
        """
        V.SetNumberOfGrids(int)
        C++: virtual void SetNumberOfGrids(const unsigned int N)
        
        Sets the total number of grids in the domain. Note: This method
        is implemented by concrete classes. NOTE: Concrete classes
        implementing this pure virtual method must set the number of
        grids and call AllocateUserRegisterDataStructures in addition to
        defining any other additional functionality.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkCompositeDataGeometryFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkCompositeDataGeometryFilter - extract geometry from multi-group
    data
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkCompositeDataGeometryFilter applies vtkGeometryFilter to all
    leaves in vtkCompositeDataSet. Place this filter at the end of a
    pipeline before a polydata consumer such as a polydata mapper to
    extract geometry from all blocks and append them to one polydata
    object.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCompositeDataGeometryFilter
        C++: vtkCompositeDataGeometryFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCompositeDataGeometryFilter
        C++: static vtkCompositeDataGeometryFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataSetGhostGenerator(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkDataSetGhostGenerator -  An abstract class that provides common
    functionality and implements an
     interface for all ghost data generators.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    Ghost data generators accept as
     input a partitioned data-set, defined by a vtkMultiBlockDataSet,
    where each
     block corresponds to a partition. The output consists of
    vtkMultiBlockDataSet
     where each block holds the corresponding ghosted data-set. For more
    details,
     see concrete implementations.
    
    @sa
    vtkUniformGridGhostDataGenerator,
    vtkStructuredGridGhostDataGenerator,
    vtkRectilinearGridGhostDataGenerator
    """
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def FillOutputPortInformation(self, p_int, vtkInformation):
        """
        V.FillOutputPortInformation(int, vtkInformation) -> int
        C++: int FillOutputPortInformation(int port, vtkInformation *info)
             override;
        
        Fill the output port information objects for this algorithm. This
        is invoked by the first call to GetOutputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGhostLayers(self):
        """
        V.GetNumberOfGhostLayers() -> int
        C++: virtual int GetNumberOfGhostLayers()
        
        Set/Get for number of ghost layers to generate.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataSetGhostGenerator
        C++: vtkDataSetGhostGenerator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataSetGhostGenerator
        C++: static vtkDataSetGhostGenerator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfGhostLayers(self, p_int):
        """
        V.SetNumberOfGhostLayers(int)
        C++: virtual void SetNumberOfGhostLayers(int _arg)
        
        Set/Get for number of ghost layers to generate.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataSetSurfaceFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkDataSetSurfaceFilter - Extracts outer (polygonal) surface.
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkDataSetSurfaceFilter is a faster version of vtkGeometry filter,
    but it does not have an option to select bounds.  It may use more
    memory than vtkGeometryFilter.  It only has one option: whether to
    use triangle strips when the input type is structured.
    
    @sa
    vtkGeometryFilter vtkStructuredGridGeometryFilter.
    """
    def DataSetExecute(self, vtkDataSet, vtkPolyData):
        """
        V.DataSetExecute(vtkDataSet, vtkPolyData) -> int
        C++: virtual int DataSetExecute(vtkDataSet *input,
            vtkPolyData *output)
        
        Direct access methods that can be used to use the this class as
        an algorithm without using it as a filter.
        """
        ...
    
    def GetNonlinearSubdivisionLevel(self):
        """
        V.GetNonlinearSubdivisionLevel() -> int
        C++: virtual int GetNonlinearSubdivisionLevel()
        
        If the input is an unstructured grid with nonlinear faces, this
        parameter determines how many times the face is subdivided into
        linear faces.  If 0, the output is the equivalent of its linear
        counterpart (and the midpoints determining the nonlinear
        interpolation are discarded).  If 1 (the default), the nonlinear
        face is triangulated based on the midpoints.  If greater than 1,
        the triangulated pieces are recursively subdivided to reach the
        desired subdivision.  Setting the value to greater than 1 may
        cause some point data to not be passed even if no nonlinear faces
        exist.  This option has no effect if the input is not an
        unstructured grid.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOriginalCellIdsName(self):
        """
        V.GetOriginalCellIdsName() -> string
        C++: virtual const char *GetOriginalCellIdsName()
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def GetOriginalPointIdsName(self):
        """
        V.GetOriginalPointIdsName() -> string
        C++: virtual const char *GetOriginalPointIdsName()
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def GetPassThroughCellIds(self):
        """
        V.GetPassThroughCellIds() -> int
        C++: virtual vtkTypeBool GetPassThroughCellIds()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def GetPassThroughPointIds(self):
        """
        V.GetPassThroughPointIds() -> int
        C++: virtual vtkTypeBool GetPassThroughPointIds()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def GetPieceInvariant(self):
        """
        V.GetPieceInvariant() -> int
        C++: virtual int GetPieceInvariant()
        
        If PieceInvariant is true, vtkDataSetSurfaceFilter requests 1
        ghost level from input in order to remove internal surface that
        are between processes. False by default.
        """
        ...
    
    def GetUseStrips(self):
        """
        V.GetUseStrips() -> int
        C++: virtual vtkTypeBool GetUseStrips()
        
        When input is structured data, this flag will generate faces with
        triangle strips.  This should render faster and use less memory,
        but no cell data is copied.  By default, UseStrips is Off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataSetSurfaceFilter
        C++: vtkDataSetSurfaceFilter *NewInstance()
        """
        ...
    
    def PassThroughCellIdsOff(self):
        """
        V.PassThroughCellIdsOff()
        C++: virtual void PassThroughCellIdsOff()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughCellIdsOn(self):
        """
        V.PassThroughCellIdsOn()
        C++: virtual void PassThroughCellIdsOn()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughPointIdsOff(self):
        """
        V.PassThroughPointIdsOff()
        C++: virtual void PassThroughPointIdsOff()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughPointIdsOn(self):
        """
        V.PassThroughPointIdsOn()
        C++: virtual void PassThroughPointIdsOn()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataSetSurfaceFilter
        C++: static vtkDataSetSurfaceFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetNonlinearSubdivisionLevel(self, p_int):
        """
        V.SetNonlinearSubdivisionLevel(int)
        C++: virtual void SetNonlinearSubdivisionLevel(int _arg)
        
        If the input is an unstructured grid with nonlinear faces, this
        parameter determines how many times the face is subdivided into
        linear faces.  If 0, the output is the equivalent of its linear
        counterpart (and the midpoints determining the nonlinear
        interpolation are discarded).  If 1 (the default), the nonlinear
        face is triangulated based on the midpoints.  If greater than 1,
        the triangulated pieces are recursively subdivided to reach the
        desired subdivision.  Setting the value to greater than 1 may
        cause some point data to not be passed even if no nonlinear faces
        exist.  This option has no effect if the input is not an
        unstructured grid.
        """
        ...
    
    def SetOriginalCellIdsName(self, string):
        """
        V.SetOriginalCellIdsName(string)
        C++: virtual void SetOriginalCellIdsName(const char *_arg)
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def SetOriginalPointIdsName(self, string):
        """
        V.SetOriginalPointIdsName(string)
        C++: virtual void SetOriginalPointIdsName(const char *_arg)
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def SetPassThroughCellIds(self, p_int):
        """
        V.SetPassThroughCellIds(int)
        C++: virtual void SetPassThroughCellIds(vtkTypeBool _arg)
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def SetPassThroughPointIds(self, p_int):
        """
        V.SetPassThroughPointIds(int)
        C++: virtual void SetPassThroughPointIds(vtkTypeBool _arg)
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def SetPieceInvariant(self, p_int):
        """
        V.SetPieceInvariant(int)
        C++: virtual void SetPieceInvariant(int _arg)
        
        If PieceInvariant is true, vtkDataSetSurfaceFilter requests 1
        ghost level from input in order to remove internal surface that
        are between processes. False by default.
        """
        ...
    
    def SetUseStrips(self, p_int):
        """
        V.SetUseStrips(int)
        C++: virtual void SetUseStrips(vtkTypeBool _arg)
        
        When input is structured data, this flag will generate faces with
        triangle strips.  This should render faster and use less memory,
        but no cell data is copied.  By default, UseStrips is Off.
        """
        ...
    
    def StructuredExecute(self, vtkDataSet, vtkPolyData, *int, **kwargs):
        """
        V.StructuredExecute(vtkDataSet, vtkPolyData, [int, ...], [int,
            ...]) -> int
        C++: virtual int StructuredExecute(vtkDataSet *input,
            vtkPolyData *output, vtkIdType *ext, vtkIdType *wholeExt)
        V.StructuredExecute(vtkDataSet, vtkPolyData, [int, ...], [int,
            ...]) -> int
        C++: virtual int StructuredExecute(vtkDataSet *input,
            vtkPolyData *output, int *ext32, int *wholeExt32)
        
        Direct access methods that can be used to use the this class as
        an algorithm without using it as a filter.
        """
        ...
    
    def StructuredWithBlankingExecute(self, vtkStructuredGrid, vtkPolyData):
        """
        V.StructuredWithBlankingExecute(vtkStructuredGrid, vtkPolyData)
            -> int
        C++: virtual int StructuredWithBlankingExecute(
            vtkStructuredGrid *input, vtkPolyData *output)
        
        Direct access methods that can be used to use the this class as
        an algorithm without using it as a filter.
        """
        ...
    
    def UniformGridExecute(self, vtkDataSet, vtkPolyData, *int, **kwargs):
        """
        V.UniformGridExecute(vtkDataSet, vtkPolyData, [int, ...], [int,
            ...], [bool, bool, bool, bool, bool, bool]) -> int
        C++: virtual int UniformGridExecute(vtkDataSet *input,
            vtkPolyData *output, vtkIdType *ext, vtkIdType *wholeExt,
            bool extractface[6])
        V.UniformGridExecute(vtkDataSet, vtkPolyData, [int, ...], [int,
            ...], [bool, bool, bool, bool, bool, bool]) -> int
        C++: virtual int UniformGridExecute(vtkDataSet *input,
            vtkPolyData *output, int *ext32, int *wholeExt32,
            bool extractface[6])
        
        Direct access methods that can be used to use the this class as
        an algorithm without using it as a filter.
        """
        ...
    
    def UnstructuredGridExecute(self, vtkDataSet, vtkPolyData):
        """
        V.UnstructuredGridExecute(vtkDataSet, vtkPolyData) -> int
        C++: virtual int UnstructuredGridExecute(vtkDataSet *input,
            vtkPolyData *output)
        
        Direct access methods that can be used to use the this class as
        an algorithm without using it as a filter.
        """
        ...
    
    def UseStripsOff(self):
        """
        V.UseStripsOff()
        C++: virtual void UseStripsOff()
        
        When input is structured data, this flag will generate faces with
        triangle strips.  This should render faster and use less memory,
        but no cell data is copied.  By default, UseStrips is Off.
        """
        ...
    
    def UseStripsOn(self):
        """
        V.UseStripsOn()
        C++: virtual void UseStripsOn()
        
        When input is structured data, this flag will generate faces with
        triangle strips.  This should render faster and use less memory,
        but no cell data is copied.  By default, UseStrips is Off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataSetRegionSurfaceFilter(vtkDataSetSurfaceFilter):
    """
    vtkDataSetRegionSurfaceFilter - Extract surface of materials.
    
    Superclass: vtkDataSetSurfaceFilter
    
    This filter extracts surfaces of materials such that a surface could
    have a material on each side of it. It also stores a mapping of the
    original cells and their sides back to the original grid so that we
    can output boundary information for those cells given only surfaces.
    """
    def GetInterfaceIDsName(self):
        """
        V.GetInterfaceIDsName() -> string
        C++: virtual char *GetInterfaceIDsName()
        
        The name of the field array that has material interface type
        identifiers in it Default is "interface_ids"
        """
        ...
    
    def GetMaterialIDsName(self):
        """
        V.GetMaterialIDsName() -> string
        C++: virtual char *GetMaterialIDsName()
        
        The name of the field array that has material type identifiers in
        it Default is "material_ids"
        """
        ...
    
    def GetMaterialPIDsName(self):
        """
        V.GetMaterialPIDsName() -> string
        C++: virtual char *GetMaterialPIDsName()
        
        The name of the output field array that records parent materials
        of each interface Default is "material_ancestors"
        """
        ...
    
    def GetMaterialPropertiesName(self):
        """
        V.GetMaterialPropertiesName() -> string
        C++: virtual char *GetMaterialPropertiesName()
        
        The name of the field array that has characteristics of each
        material Default is "material_properties"
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRegionArrayName(self):
        """
        V.GetRegionArrayName() -> string
        C++: virtual char *GetRegionArrayName()
        
        The name of the cell based array that we use to extract
        interfaces from Default is "Regions"
        """
        ...
    
    def GetSingleSided(self):
        """
        V.GetSingleSided() -> bool
        C++: virtual bool GetSingleSided()
        
        Whether to return single sided material interfaces or double
        sided Default is single
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataSetRegionSurfaceFilter
        C++: vtkDataSetRegionSurfaceFilter *NewInstance()
        """
        ...
    
    def RecordOrigCellId(self, p_int, p_int_1):
        """
        V.RecordOrigCellId(int, int)
        C++: void RecordOrigCellId(vtkIdType newIndex, vtkIdType origId)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataSetRegionSurfaceFilter
        C++: static vtkDataSetRegionSurfaceFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInterfaceIDsName(self, string):
        """
        V.SetInterfaceIDsName(string)
        C++: virtual void SetInterfaceIDsName(const char *_arg)
        
        The name of the field array that has material interface type
        identifiers in it Default is "interface_ids"
        """
        ...
    
    def SetMaterialIDsName(self, string):
        """
        V.SetMaterialIDsName(string)
        C++: virtual void SetMaterialIDsName(const char *_arg)
        
        The name of the field array that has material type identifiers in
        it Default is "material_ids"
        """
        ...
    
    def SetMaterialPIDsName(self, string):
        """
        V.SetMaterialPIDsName(string)
        C++: virtual void SetMaterialPIDsName(const char *_arg)
        
        The name of the output field array that records parent materials
        of each interface Default is "material_ancestors"
        """
        ...
    
    def SetMaterialPropertiesName(self, string):
        """
        V.SetMaterialPropertiesName(string)
        C++: virtual void SetMaterialPropertiesName(const char *_arg)
        
        The name of the field array that has characteristics of each
        material Default is "material_properties"
        """
        ...
    
    def SetRegionArrayName(self, string):
        """
        V.SetRegionArrayName(string)
        C++: virtual void SetRegionArrayName(const char *_arg)
        
        The name of the cell based array that we use to extract
        interfaces from Default is "Regions"
        """
        ...
    
    def SetSingleSided(self, bool):
        """
        V.SetSingleSided(bool)
        C++: virtual void SetSingleSided(bool _arg)
        
        Whether to return single sided material interfaces or double
        sided Default is single
        """
        ...
    
    def UnstructuredGridExecute(self, vtkDataSet, vtkPolyData):
        """
        V.UnstructuredGridExecute(vtkDataSet, vtkPolyData) -> int
        C++: int UnstructuredGridExecute(vtkDataSet *input,
            vtkPolyData *output) override;
        
        Direct access methods that can be used to use the this class as
        an algorithm without using it as a filter.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkExplicitStructuredGridSurfaceFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkExplicitStructuredGridSurfaceFilter - Filter which creates a
    surface (polydata) from an explicit structured grid.
    
    Superclass: vtkPolyDataAlgorithm
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOriginalCellIdsName(self):
        """
        V.GetOriginalCellIdsName() -> string
        C++: virtual const char *GetOriginalCellIdsName()
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to NULL, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def GetOriginalPointIdsName(self):
        """
        V.GetOriginalPointIdsName() -> string
        C++: virtual const char *GetOriginalPointIdsName()
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to NULL, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def GetPassThroughCellIds(self):
        """
        V.GetPassThroughCellIds() -> int
        C++: virtual int GetPassThroughCellIds()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def GetPassThroughPointIds(self):
        """
        V.GetPassThroughPointIds() -> int
        C++: virtual int GetPassThroughPointIds()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkExplicitStructuredGridSurfaceFilter
        C++: vtkExplicitStructuredGridSurfaceFilter *NewInstance()
        """
        ...
    
    def PassThroughCellIdsOff(self):
        """
        V.PassThroughCellIdsOff()
        C++: virtual void PassThroughCellIdsOff()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughCellIdsOn(self):
        """
        V.PassThroughCellIdsOn()
        C++: virtual void PassThroughCellIdsOn()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughPointIdsOff(self):
        """
        V.PassThroughPointIdsOff()
        C++: virtual void PassThroughPointIdsOff()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughPointIdsOn(self):
        """
        V.PassThroughPointIdsOn()
        C++: virtual void PassThroughPointIdsOn()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkExplicitStructuredGridSurfaceFilter
        C++: static vtkExplicitStructuredGridSurfaceFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetOriginalCellIdsName(self, string):
        """
        V.SetOriginalCellIdsName(string)
        C++: virtual void SetOriginalCellIdsName(const char *_arg)
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to NULL, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def SetOriginalPointIdsName(self, string):
        """
        V.SetOriginalPointIdsName(string)
        C++: virtual void SetOriginalPointIdsName(const char *_arg)
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to NULL, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def SetPassThroughCellIds(self, p_int):
        """
        V.SetPassThroughCellIds(int)
        C++: virtual void SetPassThroughCellIds(int _arg)
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def SetPassThroughPointIds(self, p_int):
        """
        V.SetPassThroughPointIds(int)
        C++: virtual void SetPassThroughPointIds(int _arg)
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkFastGeomQuadStruct(object):
    """
    vtkFastGeomQuadStruct - no description provided.
    
    vtkFastGeomQuadStruct()
    vtkFastGeomQuadStruct(const &vtkFastGeomQuadStruct)
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkGeometryFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkGeometryFilter - extract geometry from data (or convert data to
    polygonal type)
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkGeometryFilter is a general-purpose filter to extract geometry
    (and associated data) from any type of dataset. Geometry is obtained
    as follows: all 0D, 1D, and 2D cells are extracted. All 2D faces that
    are used by only one 3D cell (i.e., boundary faces) are extracted. It
    also is possible to specify conditions on point ids, cell ids, and on
    bounding box (referred to as "Extent") to control the extraction
    process.
    
    This filter also may be used to convert any type of data to polygonal
    type. The conversion process may be less than satisfactory for some
    3D datasets. For example, this filter will extract the outer surface
    of a volume or structured grid dataset. (For structured data you may
    want to use vtkImageDataGeometryFilter,
    vtkStructuredGridGeometryFilter, vtkExtractUnstructuredGrid,
    vtkRectilinearGridGeometryFilter, or vtkExtractVOI.)
    
    @warning
    When vtkGeometryFilter extracts cells (or boundaries of cells) it
    will (by default) merge duplicate vertices. This may cause problems
    in some cases. For example, if you've run vtkPolyDataNormals to
    generate normals, which may split meshes and create duplicate
    vertices, vtkGeometryFilter will merge these points back together.
    Turn merging off to prevent this from occurring.
    
    @warning
    This filter assumes that the input dataset is composed of either: 0D
    cells OR 1D cells OR 2D and/or 3D cells. In other words, the input
    dataset cannot be a combination of different dimensional cells with
    the exception of 2D and 3D cells.
    
    @sa
    vtkImageDataGeometryFilter vtkStructuredGridGeometryFilter
    vtkExtractGeometry vtkExtractVOI
    """
    def CellClippingOff(self):
        """
        V.CellClippingOff()
        C++: virtual void CellClippingOff()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def CellClippingOn(self):
        """
        V.CellClippingOn()
        C++: virtual void CellClippingOn()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified.
        """
        ...
    
    def ExtentClippingOff(self):
        """
        V.ExtentClippingOff()
        C++: virtual void ExtentClippingOff()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def ExtentClippingOn(self):
        """
        V.ExtentClippingOn()
        C++: virtual void ExtentClippingOn()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def GetCellClipping(self):
        """
        V.GetCellClipping() -> int
        C++: virtual vtkTypeBool GetCellClipping()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def GetCellMaximum(self):
        """
        V.GetCellMaximum() -> int
        C++: virtual vtkIdType GetCellMaximum()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMaximumMaxValue(self):
        """
        V.GetCellMaximumMaxValue() -> int
        C++: virtual vtkIdType GetCellMaximumMaxValue()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMaximumMinValue(self):
        """
        V.GetCellMaximumMinValue() -> int
        C++: virtual vtkIdType GetCellMaximumMinValue()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMinimum(self):
        """
        V.GetCellMinimum() -> int
        C++: virtual vtkIdType GetCellMinimum()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetCellMinimumMaxValue(self):
        """
        V.GetCellMinimumMaxValue() -> int
        C++: virtual vtkIdType GetCellMinimumMaxValue()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetCellMinimumMinValue(self):
        """
        V.GetCellMinimumMinValue() -> int
        C++: virtual vtkIdType GetCellMinimumMinValue()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetExtent(self):
        """
        V.GetExtent() -> (float, float, float, float, float, float)
        C++: double *GetExtent()
        
        Set / get a (xmin,xmax, ymin,ymax, zmin,zmax) bounding box to
        clip data.
        """
        ...
    
    def GetExtentClipping(self):
        """
        V.GetExtentClipping() -> int
        C++: virtual vtkTypeBool GetExtentClipping()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Set / get a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMerging(self):
        """
        V.GetMerging() -> int
        C++: virtual vtkTypeBool GetMerging()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the locator.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings. This only
        applies for data types where we create points as opposed to pass
        them, such as rectilinear grid.
        """
        ...
    
    def GetPointClipping(self):
        """
        V.GetPointClipping() -> int
        C++: virtual vtkTypeBool GetPointClipping()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def GetPointMaximum(self):
        """
        V.GetPointMaximum() -> int
        C++: virtual vtkIdType GetPointMaximum()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMaximumMaxValue(self):
        """
        V.GetPointMaximumMaxValue() -> int
        C++: virtual vtkIdType GetPointMaximumMaxValue()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMaximumMinValue(self):
        """
        V.GetPointMaximumMinValue() -> int
        C++: virtual vtkIdType GetPointMaximumMinValue()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMinimum(self):
        """
        V.GetPointMinimum() -> int
        C++: virtual vtkIdType GetPointMinimum()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def GetPointMinimumMaxValue(self):
        """
        V.GetPointMinimumMaxValue() -> int
        C++: virtual vtkIdType GetPointMinimumMaxValue()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def GetPointMinimumMinValue(self):
        """
        V.GetPointMinimumMinValue() -> int
        C++: virtual vtkIdType GetPointMinimumMinValue()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergingOff(self):
        """
        V.MergingOff()
        C++: virtual void MergingOff()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def MergingOn(self):
        """
        V.MergingOn()
        C++: virtual void MergingOn()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGeometryFilter
        C++: vtkGeometryFilter *NewInstance()
        """
        ...
    
    def PointClippingOff(self):
        """
        V.PointClippingOff()
        C++: virtual void PointClippingOff()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def PointClippingOn(self):
        """
        V.PointClippingOn()
        C++: virtual void PointClippingOn()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGeometryFilter
        C++: static vtkGeometryFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCellClipping(self, p_int):
        """
        V.SetCellClipping(int)
        C++: virtual void SetCellClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def SetCellMaximum(self, p_int):
        """
        V.SetCellMaximum(int)
        C++: virtual void SetCellMaximum(vtkIdType _arg)
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def SetCellMinimum(self, p_int):
        """
        V.SetCellMinimum(int)
        C++: virtual void SetCellMinimum(vtkIdType _arg)
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def SetExtent(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetExtent(float, float, float, float, float, float)
        C++: void SetExtent(double xMin, double xMax, double yMin,
            double yMax, double zMin, double zMax)
        V.SetExtent([float, float, float, float, float, float])
        C++: void SetExtent(double extent[6])
        
        Specify a (xmin,xmax, ymin,ymax, zmin,zmax) bounding box to clip
        data.
        """
        ...
    
    def SetExtentClipping(self, p_int):
        """
        V.SetExtentClipping(int)
        C++: virtual void SetExtentClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *locator)
        
        Set / get a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetMerging(self, p_int):
        """
        V.SetMerging(int)
        C++: virtual void SetMerging(vtkTypeBool _arg)
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: void SetOutputPointsPrecision(int precision)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings. This only
        applies for data types where we create points as opposed to pass
        them, such as rectilinear grid.
        """
        ...
    
    def SetPointClipping(self, p_int):
        """
        V.SetPointClipping(int)
        C++: virtual void SetPointClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def SetPointMaximum(self, p_int):
        """
        V.SetPointMaximum(int)
        C++: virtual void SetPointMaximum(vtkIdType _arg)
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def SetPointMinimum(self, p_int):
        """
        V.SetPointMinimum(int)
        C++: virtual void SetPointMinimum(vtkIdType _arg)
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkHierarchicalDataSetGeometryFilter(vtkCompositeDataGeometryFilter):
    """
    vtkHierarchicalDataSetGeometryFilter - extract geometry from
    hierarchical data
    
    Superclass: vtkCompositeDataGeometryFilter
    
    Legacy class. Use vtkCompositeDataGeometryFilter instead.
    
    @sa
    vtkCompositeDataGeometryFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHierarchicalDataSetGeometryFilter
        C++: vtkHierarchicalDataSetGeometryFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkHierarchicalDataSetGeometryFilter
        C++: static vtkHierarchicalDataSetGeometryFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageDataGeometryFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkImageDataGeometryFilter - extract geometry for structured points
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkImageDataGeometryFilter is a filter that extracts geometry from a
    structured points dataset. By specifying appropriate i-j-k indices
    (via the "Extent" instance variable), it is possible to extract a
    point, a line, a plane (i.e., image), or a "volume" from dataset.
    (Since the output is of type polydata, the volume is actually a (n x
    m x o) region of points.)
    
    The extent specification is zero-offset. That is, the first k-plane
    in a 50x50x50 volume is given by (0,49, 0,49, 0,0).
    @warning
    If you don't know the dimensions of the input dataset, you can use a
    large number to specify extent (the number will be clamped
    appropriately). For example, if the dataset dimensions are 50x50x50,
    and you want a the fifth k-plane, you can use the extents (0,100,
    0,100, 4,4). The 100 will automatically be clamped to 49.
    
    @sa
    vtkGeometryFilter vtkStructuredGridSource
    """
    def GetExtent(self):
        """
        V.GetExtent() -> (int, int, int, int, int, int)
        C++: int *GetExtent()
        
        Set / get the extent (imin,imax, jmin,jmax, kmin,kmax) indices.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputTriangles(self):
        """
        V.GetOutputTriangles() -> int
        C++: virtual vtkTypeBool GetOutputTriangles()
        
        Set OutputTriangles to true if you wish to generate triangles
        instead of quads when extracting cells from 2D imagedata
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def GetThresholdCells(self):
        """
        V.GetThresholdCells() -> int
        C++: virtual vtkTypeBool GetThresholdCells()
        
        Set ThresholdCells to true if you wish to skip any voxel/pixels
        which have scalar values less than the specified threshold.
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def GetThresholdValue(self):
        """
        V.GetThresholdValue() -> float
        C++: virtual double GetThresholdValue()
        
        Set ThresholdValue to the scalar value by which to threshold
        cells when extracting geometry when ThresholdCells is true. Cells
        with scalar values greater than the threshold will be output.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageDataGeometryFilter
        C++: vtkImageDataGeometryFilter *NewInstance()
        """
        ...
    
    def OutputTrianglesOff(self):
        """
        V.OutputTrianglesOff()
        C++: virtual void OutputTrianglesOff()
        
        Set OutputTriangles to true if you wish to generate triangles
        instead of quads when extracting cells from 2D imagedata
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def OutputTrianglesOn(self):
        """
        V.OutputTrianglesOn()
        C++: virtual void OutputTrianglesOn()
        
        Set OutputTriangles to true if you wish to generate triangles
        instead of quads when extracting cells from 2D imagedata
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageDataGeometryFilter
        C++: static vtkImageDataGeometryFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetExtent([int, int, int, int, int, int])
        C++: void SetExtent(int extent[6])
        V.SetExtent(int, int, int, int, int, int)
        C++: void SetExtent(int iMin, int iMax, int jMin, int jMax,
            int kMin, int kMax)
        
        Set / get the extent (imin,imax, jmin,jmax, kmin,kmax) indices.
        """
        ...
    
    def SetOutputTriangles(self, p_int):
        """
        V.SetOutputTriangles(int)
        C++: virtual void SetOutputTriangles(vtkTypeBool _arg)
        
        Set OutputTriangles to true if you wish to generate triangles
        instead of quads when extracting cells from 2D imagedata
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def SetThresholdCells(self, p_int):
        """
        V.SetThresholdCells(int)
        C++: virtual void SetThresholdCells(vtkTypeBool _arg)
        
        Set ThresholdCells to true if you wish to skip any voxel/pixels
        which have scalar values less than the specified threshold.
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def SetThresholdValue(self, p_float):
        """
        V.SetThresholdValue(float)
        C++: virtual void SetThresholdValue(double _arg)
        
        Set ThresholdValue to the scalar value by which to threshold
        cells when extracting geometry when ThresholdCells is true. Cells
        with scalar values greater than the threshold will be output.
        """
        ...
    
    def ThresholdCellsOff(self):
        """
        V.ThresholdCellsOff()
        C++: virtual void ThresholdCellsOff()
        
        Set ThresholdCells to true if you wish to skip any voxel/pixels
        which have scalar values less than the specified threshold.
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def ThresholdCellsOn(self):
        """
        V.ThresholdCellsOn()
        C++: virtual void ThresholdCellsOn()
        
        Set ThresholdCells to true if you wish to skip any voxel/pixels
        which have scalar values less than the specified threshold.
        Currently this functionality is only implemented for 2D imagedata
        """
        ...
    
    def ThresholdValueOff(self):
        """
        V.ThresholdValueOff()
        C++: virtual void ThresholdValueOff()
        
        Set ThresholdValue to the scalar value by which to threshold
        cells when extracting geometry when ThresholdCells is true. Cells
        with scalar values greater than the threshold will be output.
        """
        ...
    
    def ThresholdValueOn(self):
        """
        V.ThresholdValueOn()
        C++: virtual void ThresholdValueOn()
        
        Set ThresholdValue to the scalar value by which to threshold
        cells when extracting geometry when ThresholdCells is true. Cells
        with scalar values greater than the threshold will be output.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageDataToUniformGrid(__vtkmodules_vtkCommonExecutionModel.vtkDataObjectAlgorithm):
    """
    vtkImageDataToUniformGrid - convert vtkImageData to vtkUniformGrid
    
    Superclass: vtkDataObjectAlgorithm
    
    Convert a vtkImageData to vtkUniformGrid and set blanking based on
    specified by named arrays. By default, values of 0 in the named array
    will result in the point or cell being blanked. Set Reverse to 1 to
    indicate that values of 0 will result in the point or cell to not be
    blanked.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReverse(self):
        """
        V.GetReverse() -> int
        C++: virtual vtkTypeBool GetReverse()
        
        By default, values of 0 (i.e. Reverse = 0) in the array will
        result in that point or cell to be blanked. Set Reverse to 1 to
        make points or cells to not be blanked for array values of 0.
        """
        ...
    
    def GetReverseMaxValue(self):
        """
        V.GetReverseMaxValue() -> int
        C++: virtual vtkTypeBool GetReverseMaxValue()
        
        By default, values of 0 (i.e. Reverse = 0) in the array will
        result in that point or cell to be blanked. Set Reverse to 1 to
        make points or cells to not be blanked for array values of 0.
        """
        ...
    
    def GetReverseMinValue(self):
        """
        V.GetReverseMinValue() -> int
        C++: virtual vtkTypeBool GetReverseMinValue()
        
        By default, values of 0 (i.e. Reverse = 0) in the array will
        result in that point or cell to be blanked. Set Reverse to 1 to
        make points or cells to not be blanked for array values of 0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageDataToUniformGrid
        C++: vtkImageDataToUniformGrid *NewInstance()
        """
        ...
    
    def ReverseOff(self):
        """
        V.ReverseOff()
        C++: virtual void ReverseOff()
        
        By default, values of 0 (i.e. Reverse = 0) in the array will
        result in that point or cell to be blanked. Set Reverse to 1 to
        make points or cells to not be blanked for array values of 0.
        """
        ...
    
    def ReverseOn(self):
        """
        V.ReverseOn()
        C++: virtual void ReverseOn()
        
        By default, values of 0 (i.e. Reverse = 0) in the array will
        result in that point or cell to be blanked. Set Reverse to 1 to
        make points or cells to not be blanked for array values of 0.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageDataToUniformGrid
        C++: static vtkImageDataToUniformGrid *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetReverse(self, p_int):
        """
        V.SetReverse(int)
        C++: virtual void SetReverse(vtkTypeBool _arg)
        
        By default, values of 0 (i.e. Reverse = 0) in the array will
        result in that point or cell to be blanked. Set Reverse to 1 to
        make points or cells to not be blanked for array values of 0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLinearToQuadraticCellsFilter(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridAlgorithm):
    """
    vtkLinearToQuadraticCellsFilter - degree elevate the cells of a
    linear unstructured grid.
    
    Superclass: vtkUnstructuredGridAlgorithm
    
    vtkLinearToQuadraticCellsFilter takes an unstructured grid comprised
    of linear cells and degree elevates each of the cells to quadratic.
    Additional points are simply interpolated from the existing points
    (there is no snapping to an external model).
    """
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified. The locator is used to merge coincident points.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Specify a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the mtime also considering the locator.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        OutputPointsPrecision is DEFAULT_PRECISION by default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLinearToQuadraticCellsFilter
        C++: vtkLinearToQuadraticCellsFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLinearToQuadraticCellsFilter
        C++: static vtkLinearToQuadraticCellsFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *locator)
        
        Specify a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        OutputPointsPrecision is DEFAULT_PRECISION by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkProjectSphereFilter(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkProjectSphereFilter - A filter to 'unroll' a sphere.
    
    Superclass: vtkPointSetAlgorithm
    
    The unroll longitude is -180.
    """
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: virtual double *GetCenter()
        
        Set the center of the sphere to be split. Default is 0,0,0.
        """
        ...
    
    def GetKeepPolePoints(self):
        """
        V.GetKeepPolePoints() -> bool
        C++: virtual bool GetKeepPolePoints()
        
        Specify whether or not to keep the cells using a point at a pole.
        The default is false.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTranslateZ(self):
        """
        V.GetTranslateZ() -> bool
        C++: virtual bool GetTranslateZ()
        
        Specify whether (true) or not to translate the points in the
        projected transformation such that the input point with the
        smallest radius is at 0. The default is false.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def KeepPolePointsOff(self):
        """
        V.KeepPolePointsOff()
        C++: virtual void KeepPolePointsOff()
        
        Specify whether or not to keep the cells using a point at a pole.
        The default is false.
        """
        ...
    
    def KeepPolePointsOn(self):
        """
        V.KeepPolePointsOn()
        C++: virtual void KeepPolePointsOn()
        
        Specify whether or not to keep the cells using a point at a pole.
        The default is false.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProjectSphereFilter
        C++: vtkProjectSphereFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProjectSphereFilter
        C++: static vtkProjectSphereFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCenter(self, p_float, p_float_1, p_float_2):
        """
        V.SetCenter(float, float, float)
        C++: virtual void SetCenter(double _arg1, double _arg2,
            double _arg3)
        V.SetCenter((float, float, float))
        C++: virtual void SetCenter(const double _arg[3])
        
        Set the center of the sphere to be split. Default is 0,0,0.
        """
        ...
    
    def SetKeepPolePoints(self, bool):
        """
        V.SetKeepPolePoints(bool)
        C++: virtual void SetKeepPolePoints(bool _arg)
        
        Specify whether or not to keep the cells using a point at a pole.
        The default is false.
        """
        ...
    
    def SetTranslateZ(self, bool):
        """
        V.SetTranslateZ(bool)
        C++: virtual void SetTranslateZ(bool _arg)
        
        Specify whether (true) or not to translate the points in the
        projected transformation such that the input point with the
        smallest radius is at 0. The default is false.
        """
        ...
    
    def TranslateZOff(self):
        """
        V.TranslateZOff()
        C++: virtual void TranslateZOff()
        
        Specify whether (true) or not to translate the points in the
        projected transformation such that the input point with the
        smallest radius is at 0. The default is false.
        """
        ...
    
    def TranslateZOn(self):
        """
        V.TranslateZOn()
        C++: virtual void TranslateZOn()
        
        Specify whether (true) or not to translate the points in the
        projected transformation such that the input point with the
        smallest radius is at 0. The default is false.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRectilinearGridGeometryFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkRectilinearGridGeometryFilter - extract geometry for a rectilinear
    grid
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkRectilinearGridGeometryFilter is a filter that extracts geometry
    from a rectilinear grid. By specifying appropriate i-j-k indices, it
    is possible to extract a point, a curve, a surface, or a "volume".
    The volume is actually a (n x m x o) region of points.
    
    The extent specification is zero-offset. That is, the first k-plane
    in a 50x50x50 rectilinear grid is given by (0,49, 0,49, 0,0).
    
    @warning
    If you don't know the dimensions of the input dataset, you can use a
    large number to specify extent (the number will be clamped
    appropriately). For example, if the dataset dimensions are 50x50x50,
    and you want a the fifth k-plane, you can use the extents (0,100,
    0,100, 4,4). The 100 will automatically be clamped to 49.
    
    @sa
    vtkGeometryFilter vtkExtractGrid
    """
    def GetExtent(self):
        """
        V.GetExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetExtent()
        
        Get the extent in topological coordinate range (imin,imax,
        jmin,jmax, kmin,kmax).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRectilinearGridGeometryFilter
        C++: vtkRectilinearGridGeometryFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRectilinearGridGeometryFilter
        C++: static vtkRectilinearGridGeometryFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetExtent(int, int, int, int, int, int)
        C++: void SetExtent(int iMin, int iMax, int jMin, int jMax,
            int kMin, int kMax)
        V.SetExtent([int, int, int, int, int, int])
        C++: void SetExtent(int extent[6])
        
        Specify (imin,imax, jmin,jmax, kmin,kmax) indices.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkRectilinearGridPartitioner(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkRectilinearGridPartitioner -  A concrete implementation of
    vtkMultiBlockDataSetAlgorithm that provides
     functionality for partitioning a VTK rectilinear dataset.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    The partitioning
     methd used is Recursive Coordinate Bisection (RCB) where each time
    the
     longest dimension is split.
    
    @sa
     vtkUniformGridPartitioner vtkStructuredGridPartitioner
    """
    def DuplicateNodesOff(self):
        """
        V.DuplicateNodesOff()
        C++: virtual void DuplicateNodesOff()
        """
        ...
    
    def DuplicateNodesOn(self):
        """
        V.DuplicateNodesOn()
        C++: virtual void DuplicateNodesOn()
        """
        ...
    
    def GetDuplicateNodes(self):
        """
        V.GetDuplicateNodes() -> int
        C++: virtual vtkTypeBool GetDuplicateNodes()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGhostLayers(self):
        """
        V.GetNumberOfGhostLayers() -> int
        C++: virtual int GetNumberOfGhostLayers()
        
        Set/Get macro for the number of ghost layers.
        """
        ...
    
    def GetNumberOfPartitions(self):
        """
        V.GetNumberOfPartitions() -> int
        C++: virtual int GetNumberOfPartitions()
        
        Set/Get macro for the number of subdivisions.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRectilinearGridPartitioner
        C++: vtkRectilinearGridPartitioner *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRectilinearGridPartitioner
        C++: static vtkRectilinearGridPartitioner *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDuplicateNodes(self, p_int):
        """
        V.SetDuplicateNodes(int)
        C++: virtual void SetDuplicateNodes(vtkTypeBool _arg)
        """
        ...
    
    def SetNumberOfGhostLayers(self, p_int):
        """
        V.SetNumberOfGhostLayers(int)
        C++: virtual void SetNumberOfGhostLayers(int _arg)
        
        Set/Get macro for the number of ghost layers.
        """
        ...
    
    def SetNumberOfPartitions(self, p_int):
        """
        V.SetNumberOfPartitions(int)
        C++: virtual void SetNumberOfPartitions(int _arg)
        
        Set/Get macro for the number of subdivisions.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredAMRGridConnectivity(vtkAbstractGridConnectivity):
    """
    vtkStructuredAMRGridConnectivity -  grid connectivity.
    
    Superclass: vtkAbstractGridConnectivity
    
    A concrete instance of vtkAbstractGridConnectivity that implements
     functionality for computing the neighboring topology within a
    structured
     AMR grid, as well as, generating ghost-layers. Support is provided
    for
     1-D, 2-D (XY,XZ,YZ) and 3-D cell-centered datasets. This
    implementation
     does not have any support for distributed data. For the parallel
     implementation see vtkPStructuredAMRGridConnectivity.
    
    @sa
     vtkPStructuredAMRGridConnectivity vtkAbstractGridConnectivity
    """
    def ComputeNeighbors(self):
        """
        V.ComputeNeighbors()
        C++: void ComputeNeighbors() override;
        
        Computes neighboring information.
        """
        ...
    
    def CreateGhostLayers(self, p_int):
        """
        V.CreateGhostLayers(int)
        C++: void CreateGhostLayers(const int N=1) override;
        
        Creates ghost layers.
        """
        ...
    
    def GetBalancedRefinement(self):
        """
        V.GetBalancedRefinement() -> bool
        C++: virtual bool GetBalancedRefinement()
        
        Get/Set macro for BalancedRefinement property, default is true.
        If the refinement is balanced, then, adjacent grids in the AMR
        hierarchy can only differ by one level. By default, a balanced
        refinement is assumed.
        """
        ...
    
    def GetCellCentered(self):
        """
        V.GetCellCentered() -> bool
        C++: virtual bool GetCellCentered()
        
        Get/Set CellCentered property which indicates if the data is
        cell-centered By default, cell-centered is set to true.
        """
        ...
    
    def GetGhostedExtent(self, p_int, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetGhostedExtent(int, [int, int, int, int, int, int])
        C++: void GetGhostedExtent(const int gridID, int ext[6])
        
        Returns the ghost extend for the grid corresponding to the given
        grid ID.
        """
        ...
    
    def GetNeighbor(self, p_int, p_int_1):
        """
        V.GetNeighbor(int, int) -> vtkStructuredAMRNeighbor
        C++: vtkStructuredAMRNeighbor GetNeighbor(const int gridID,
            const int nei)
        
        Returns the AMR neighbor for the patch with the corresponding
        grid ID.
        """
        ...
    
    def GetNodeCentered(self):
        """
        V.GetNodeCentered() -> bool
        C++: virtual bool GetNodeCentered()
        
        Get/Set macro NodeCentered property which indicates if the data
        is node-centered or cell-centered. By default, node-centered is
        set to false since AMR datasets are primarily cell-centered.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfNeighbors(self, p_int):
        """
        V.GetNumberOfNeighbors(int) -> int
        C++: int GetNumberOfNeighbors(const int gridID)
        
        Returns the number of neighbors for the grid corresponding to the
        given grid ID.
        """
        ...
    
    def Initialize(self, p_int, p_int_1, p_int_2):
        """
        V.Initialize(int, int, int)
        C++: void Initialize(const unsigned int NumberOfLevels,
            const unsigned int N, const int RefinementRatio=-1)
        
        Initializes this instance of vtkStructuredAMRGridConnectivity
        where N is the total number of grids in the AMR hierarchy.
        Optionally, if the AMR dataset has a constant refinement, it
        should be specified during initialization as the code optimizes
        for it. If a -1 or no refinement ratio is specified a varying
        refinement ratio is assumed.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredAMRGridConnectivity
        C++: vtkStructuredAMRGridConnectivity *NewInstance()
        """
        ...
    
    def RegisterGrid(self, p_int, p_int_1, p_int_2, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.RegisterGrid(int, int, int, [int, int, int, int, int, int],
            vtkUnsignedCharArray, vtkUnsignedCharArray, vtkPointData,
            vtkCellData, vtkPoints)
        C++: virtual void RegisterGrid(const int gridIdx, const int level,
             const int refinementRatio, int extents[6],
            vtkUnsignedCharArray *nodesGhostArray,
            vtkUnsignedCharArray *cellGhostArray, vtkPointData *pointData,
             vtkCellData *cellData, vtkPoints *gridNodes)
        V.RegisterGrid(int, int, [int, int, int, int, int, int],
            vtkUnsignedCharArray, vtkUnsignedCharArray, vtkPointData,
            vtkCellData, vtkPoints)
        C++: virtual void RegisterGrid(const int gridIdx, const int level,
             int extents[6], vtkUnsignedCharArray *nodesGhostArray,
            vtkUnsignedCharArray *cellGhostArray, vtkPointData *pointData,
             vtkCellData *cellData, vtkPoints *gridNodes)
        
        Registers the AMR grid with the given global linear grid ID
        (starting numbering from 0) and level and refinement ratio. This
        method is to be used when the refinement ratio is not constant.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredAMRGridConnectivity
        C++: static vtkStructuredAMRGridConnectivity *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBalancedRefinement(self, bool):
        """
        V.SetBalancedRefinement(bool)
        C++: virtual void SetBalancedRefinement(bool _arg)
        
        Get/Set macro for BalancedRefinement property, default is true.
        If the refinement is balanced, then, adjacent grids in the AMR
        hierarchy can only differ by one level. By default, a balanced
        refinement is assumed.
        """
        ...
    
    def SetCellCentered(self, bool):
        """
        V.SetCellCentered(bool)
        C++: virtual void SetCellCentered(bool _arg)
        
        Get/Set CellCentered property which indicates if the data is
        cell-centered By default, cell-centered is set to true.
        """
        ...
    
    def SetNodeCentered(self, bool):
        """
        V.SetNodeCentered(bool)
        C++: virtual void SetNodeCentered(bool _arg)
        
        Get/Set macro NodeCentered property which indicates if the data
        is node-centered or cell-centered. By default, node-centered is
        set to false since AMR datasets are primarily cell-centered.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredNeighbor(object):
    """
    vtkStructuredNeighbor -  An internal, light-weight class used to
    store neighbor information.
    
    vtkStructuredNeighbor()
    vtkStructuredNeighbor(const int NeiID, int overlap[6])
    vtkStructuredNeighbor(const int NeiID, int overlap[6], int orient[3])
    vtkStructuredNeighbor(const vtkStructuredNeighbor &N)
    """
    def ComputeSendAndReceiveExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.ComputeSendAndReceiveExtent([int, int, int, int, int, int],
            [int, int, int, int, int, int], [int, int, int, int, int,
            int], [int, int, int, int, int, int], int)
        C++: virtual void ComputeSendAndReceiveExtent(
            int gridRealExtent[6], int gridGhostedExtent[6],
            int neiRealExtent[6], int WholeExtent[6], const int N)
        
        Computes the SendExtent and the RcvExtent for this neighbor. The
        method assumes that the overlap extent and orientation are
        already computed. Using this information, the method grows the
        overlap extent to form the Send and Rcv Extents for this neighbor
        instance.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    HI = ...
    LO = ...
    NeighborOrientation = ...
    ONE_TO_ONE = ...
    SUBSET_BOTH = ...
    SUBSET_HI = ...
    SUBSET_LO = ...
    SUPERSET = ...
    UNDEFINED = ...


class vtkStructuredAMRNeighbor(vtkStructuredNeighbor):
    """
    vtkStructuredAMRNeighbor -  An internal, light-weight object used to
    store neighbor information for
     AMR grids.
    
    Superclass: vtkStructuredNeighbor
    
    @sa
     vtkStructuredNeighbor vtkStructuredAMRGridConnectivity
    
    vtkStructuredAMRNeighbor()
    vtkStructuredAMRNeighbor(const int gridLevel, const int neiID,
        const int neighborLevel, int gridOverlap[6], int neiOverlap[6],
        int orient[3], const int relationShip)
    vtkStructuredAMRNeighbor(const vtkStructuredAMRNeighbor &N)
    """
    def ComputeSendAndReceiveExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.ComputeSendAndReceiveExtent([int, int, int, int, int, int],
            [int, int, int, int, int, int], [int, int, int, int, int,
            int], [int, int, int, int, int, int], int)
        C++: void ComputeSendAndReceiveExtent(int gridRealExtent[6],
            int gridGhostedExtent[6], int neiRealExtent[6],
            int WholeExtent[6], const int N) override;
        
        Computes the SendExtent and RcvExtent for this neighbor. The
        method assumes that the overlap extent and orientation are
        already computed. Using this information, the method grows the
        overlap extent to form the Send and Rcv extents for this neighbor
        instance.
        """
        ...
    
    def GetReceiveExtentOnGrid(self, p_int, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.GetReceiveExtentOnGrid(int, [int, int, int, int, int, int],
            [int, int, int, int, int, int])
        C++: void GetReceiveExtentOnGrid(const int ng, int gridExtent[6],
            int ext[6])
        
        Returns the receive extent w.r.t. the grid's level, i.e., not the
        neighbor's level.
        """
        ...
    
    def GetRelationShipString(self):
        """
        V.GetRelationShipString() -> string
        C++: std::string GetRelationShipString()
        
        Returns the neighbor relationship as a string (useful for
        debugging).
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    CHILD = ...
    COARSE_TO_FINE_SIBLING = ...
    FINE_TO_COARSE_SIBLING = ...
    NeighborRelationship = ...
    PARENT = ...
    PARTIALLY_OVERLAPPING_CHILD = ...
    PARTIALLY_OVERLAPPING_PARENT = ...
    SAME_LEVEL_SIBLING = ...
    UNDEFINED = ...


class vtkStructuredGridConnectivity(vtkAbstractGridConnectivity):
    """
    vtkStructuredGridConnectivity -  vtkStructuredGridConnectivity is a
    concrete instance of vtkObject that
     implements functionality for computing the neighboring topology
    within a
     single partitioned structured grid dataset.
    
    Superclass: vtkAbstractGridConnectivity
    
    This class implementation does
     not have any support for distributed data. For the parallel
    implementation
     see vtkPStructuredGridConnectivity.
    
    @sa
     vtkPStructuredGridConnectivity
    """
    def ComputeNeighbors(self):
        """
        V.ComputeNeighbors()
        C++: void ComputeNeighbors() override;
        
        Computes neighboring information
        """
        ...
    
    def CreateGhostLayers(self, p_int):
        """
        V.CreateGhostLayers(int)
        C++: void CreateGhostLayers(const int N=1) override;
        
        Creates ghost layers.
        """
        ...
    
    def FillGhostArrays(self, p_int, vtkUnsignedCharArray, vtkUnsignedCharArray_1):
        """
        V.FillGhostArrays(int, vtkUnsignedCharArray, vtkUnsignedCharArray)
        C++: void FillGhostArrays(const int gridID,
            vtkUnsignedCharArray *nodesArray,
            vtkUnsignedCharArray *cellsArray) override;
        
        Fills the mesh property arrays, nodes and cells, for the grid
        corresponding to the given grid ID. NOTE: this method assumes
        that ComputeNeighbors() has been called.
        """
        ...
    
    def GetDataDimension(self):
        """
        V.GetDataDimension() -> int
        C++: virtual int GetDataDimension()
        
        Returns the data dimension based on the whole extent
        """
        ...
    
    def GetGhostedGridExtent(self, p_int, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetGhostedGridExtent(int, [int, int, int, int, int, int])
        C++: void GetGhostedGridExtent(const int gridID, int ext[6])
        
        Returns the ghosted grid extent for the block corresponding the
        """
        ...
    
    def GetGridExtent(self, p_int, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetGridExtent(int, [int, int, int, int, int, int])
        C++: void GetGridExtent(const int gridID, int extent[6])
        
        Returns the grid extent of the grid corresponding to the given
        grid ID.
        """
        ...
    
    def GetGridNeighbor(self, p_int, p_int_1):
        """
        V.GetGridNeighbor(int, int) -> vtkStructuredNeighbor
        C++: vtkStructuredNeighbor GetGridNeighbor(const int gridID,
            const int nei)
        
        Returns the neighbor corresponding to the index nei for the grid
        with the given (global) grid ID.
        """
        ...
    
    def GetNeighbors(self, p_int, *int):
        """
        V.GetNeighbors(int, [int, ...]) -> vtkIdList
        C++: vtkIdList *GetNeighbors(const int gridID, int *extents)
        
        Returns the list of neighboring blocks for the given grid and the
        corresponding overlapping extents are filled in the 1-D flat
        array strided by 6.
        
        * NOTE: the flat array extents must be pre-allocated.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfNeighbors(self, p_int):
        """
        V.GetNumberOfNeighbors(int) -> int
        C++: int GetNumberOfNeighbors(const int gridID)
        
        Returns the number of neighbors for the grid corresponding to the
        given grid ID.
        """
        ...
    
    def GetWholeExtent(self):
        """
        V.GetWholeExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetWholeExtent()
        
        Set/Get the whole extent of the grid
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredGridConnectivity
        C++: vtkStructuredGridConnectivity *NewInstance()
        """
        ...
    
    def RegisterGrid(self, p_int, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.RegisterGrid(int, [int, int, int, int, int, int],
            vtkUnsignedCharArray, vtkUnsignedCharArray, vtkPointData,
            vtkCellData, vtkPoints)
        C++: virtual void RegisterGrid(const int gridID, int extents[6],
            vtkUnsignedCharArray *nodesGhostArray,
            vtkUnsignedCharArray *cellGhostArray, vtkPointData *pointData,
             vtkCellData *cellData, vtkPoints *gridNodes)
        
        Registers the current grid corresponding to the grid ID by its
        global extent w.r.t. the whole extent.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredGridConnectivity
        C++: static vtkStructuredGridConnectivity *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetGhostedGridExtent(self, p_int, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetGhostedGridExtent(int, [int, int, int, int, int, int])
        C++: void SetGhostedGridExtent(const int gridID, int ext[6])
        
        Sets the ghosted grid extent for the grid corresponding to the
        given grid ID to the given extent.
        """
        ...
    
    def SetNumberOfGrids(self, p_int):
        """
        V.SetNumberOfGrids(int)
        C++: void SetNumberOfGrids(const unsigned int N) override;
        
        Set/Get the total number of domains distributed among processors
        """
        ...
    
    def SetWholeExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetWholeExtent(int, int, int, int, int, int)
        C++: virtual void SetWholeExtent(int _arg1, int _arg2, int _arg3,
            int _arg4, int _arg5, int _arg6)
        V.SetWholeExtent((int, int, int, int, int, int))
        C++: virtual void SetWholeExtent(const int _arg[6])
        
        Set/Get the whole extent of the grid
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredGridGeometryFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkStructuredGridGeometryFilter - extract geometry for structured grid
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkStructuredGridGeometryFilter is a filter that extracts geometry
    from a structured grid. By specifying appropriate i-j-k indices, it
    is possible to extract a point, a curve, a surface, or a "volume".
    Depending upon the type of data, the curve and surface may be curved
    or planar. (The volume is actually a (n x m x o) region of points.)
    
    The extent specification is zero-offset. That is, the first k-plane
    in a 50x50x50 structured grid is given by (0,49, 0,49, 0,0).
    
    The output of this filter is affected by the structured grid
    blanking. If blanking is on, and a blanking array defined, then those
    cells attached to blanked points are not output. (Blanking is a
    property of the input vtkStructuredGrid.)
    
    @warning
    If you don't know the dimensions of the input dataset, you can use a
    large number to specify extent (the number will be clamped
    appropriately). For example, if the dataset dimensions are 50x50x50,
    and you want a the fifth k-plane, you can use the extents (0,100,
    0,100, 4,4). The 100 will automatically be clamped to 49.
    
    @sa
    vtkGeometryFilter vtkExtractGrid vtkStructuredGrid
    """
    def GetExtent(self):
        """
        V.GetExtent() -> (int, int, int, int, int, int)
        C++: virtual int *GetExtent()
        
        Get the extent in topological coordinate range (imin,imax,
        jmin,jmax, kmin,kmax).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredGridGeometryFilter
        C++: vtkStructuredGridGeometryFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredGridGeometryFilter
        C++: static vtkStructuredGridGeometryFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetExtent(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetExtent(int, int, int, int, int, int)
        C++: void SetExtent(int iMin, int iMax, int jMin, int jMax,
            int kMin, int kMax)
        V.SetExtent([int, int, int, int, int, int])
        C++: void SetExtent(int extent[6])
        
        Specify (imin,imax, jmin,jmax, kmin,kmax) indices.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredGridGhostDataGenerator(vtkDataSetGhostGenerator):
    """
    vtkStructuredGridGhostDataGenerator -  A concrete implementation of
    vtkDataSetGhostGenerator for generating ghost
     data on partitioned structured grids on a singled process.
    
    Superclass: vtkDataSetGhostGenerator
    
    For a distributed
     data-set see vtkPStructuredGridGhostDataGenerator.
    
    @warning
    
      
       The input multi-block dataset must:
       
         Have the whole-extent set 
         Each block must be an instance of vtkStructuredGrid 
         Each block must have its corresponding global extent set in the
              meta-data using the PIECE_EXTENT() key 
         All blocks must have the same fields loaded 
       
      
      
       The code currently does not handle the following cases:
       
         Ghost cells along Periodic boundaries
         Growing ghost layers beyond the extents of the neighboring grid
       
       
    
    @sa
    vtkDataSetGhostGenerator, vtkPStructuredGridGhostDataGenerator
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredGridGhostDataGenerator
        C++: vtkStructuredGridGhostDataGenerator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkStructuredGridGhostDataGenerator
        C++: static vtkStructuredGridGhostDataGenerator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredGridPartitioner(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkStructuredGridPartitioner -  A concrete implementation of
    vtkMultiBlockDataSetAlgorithm that provides
     functionality for partitioning a VTK structured grid dataset.
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    The partition-
     ing method used is Recursive Coordinate Bisection (RCB) where each
    time the
     longest dimension is split.
    
    @sa
     vtkUniformGridPartitioner vtkRectilinearGridPartitioner
    """
    def DuplicateNodesOff(self):
        """
        V.DuplicateNodesOff()
        C++: virtual void DuplicateNodesOff()
        
        Set/Get & boolean macro for the DuplicateNodes property.
        """
        ...
    
    def DuplicateNodesOn(self):
        """
        V.DuplicateNodesOn()
        C++: virtual void DuplicateNodesOn()
        
        Set/Get & boolean macro for the DuplicateNodes property.
        """
        ...
    
    def GetDuplicateNodes(self):
        """
        V.GetDuplicateNodes() -> int
        C++: virtual vtkTypeBool GetDuplicateNodes()
        
        Set/Get & boolean macro for the DuplicateNodes property.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGhostLayers(self):
        """
        V.GetNumberOfGhostLayers() -> int
        C++: virtual int GetNumberOfGhostLayers()
        
        Set/Get macro for the number of ghost layers.
        """
        ...
    
    def GetNumberOfPartitions(self):
        """
        V.GetNumberOfPartitions() -> int
        C++: virtual int GetNumberOfPartitions()
        
        Set/Get macro for the number of subdivisions.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredGridPartitioner
        C++: vtkStructuredGridPartitioner *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredGridPartitioner
        C++: static vtkStructuredGridPartitioner *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDuplicateNodes(self, p_int):
        """
        V.SetDuplicateNodes(int)
        C++: virtual void SetDuplicateNodes(vtkTypeBool _arg)
        
        Set/Get & boolean macro for the DuplicateNodes property.
        """
        ...
    
    def SetNumberOfGhostLayers(self, p_int):
        """
        V.SetNumberOfGhostLayers(int)
        C++: virtual void SetNumberOfGhostLayers(int _arg)
        
        Set/Get macro for the number of ghost layers.
        """
        ...
    
    def SetNumberOfPartitions(self, p_int):
        """
        V.SetNumberOfPartitions(int)
        C++: virtual void SetNumberOfPartitions(int _arg)
        
        Set/Get macro for the number of subdivisions.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkStructuredPointsGeometryFilter(vtkImageDataGeometryFilter):
    """
    vtkStructuredPointsGeometryFilter - obsolete class
    
    Superclass: vtkImageDataGeometryFilter
    
    vtkStructuredPointsGeometryFilter has been renamed to
    vtkImageDataGeometryFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStructuredPointsGeometryFilter
        C++: vtkStructuredPointsGeometryFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStructuredPointsGeometryFilter
        C++: static vtkStructuredPointsGeometryFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkUniformGridGhostDataGenerator(vtkDataSetGhostGenerator):
    """
    vtkUniformGridGhostDataGenerator -  A concrete implementation of
    vtkDataSetGhostGenerator for generating ghost
     data on partitioned uniform grids on a single process.
    
    Superclass: vtkDataSetGhostGenerator
    
    For a distributed
     data-set see vtkPUniformGridGhostDataGenerator.
    
    @warning
     
      
       The input multi-block dataset must:
       
         Have the whole-extent set 
         Each block must be an instance of vtkUniformGrid 
         Each block must have its corresponding global extent set in the
              meta-data using the PIECE_EXTENT() key 
         The spacing of each block is the same 
         All blocks must have the same fields loaded 
       
      
      
       The code currently does not handle the following cases:
       
         Ghost cells along Periodic boundaries
         Growing ghost layers beyond the extents of the neighboring grid
       
      
     
    
    @sa
     vtkDataSetGhostGenerator, vtkPUniformGhostDataGenerator
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUniformGridGhostDataGenerator
        C++: vtkUniformGridGhostDataGenerator *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUniformGridGhostDataGenerator
        C++: static vtkUniformGridGhostDataGenerator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkUnstructuredGridGeometryFilter(__vtkmodules_vtkCommonExecutionModel.vtkUnstructuredGridBaseAlgorithm):
    """
    vtkUnstructuredGridGeometryFilter - extract geometry from an
    unstructured grid
    
    Superclass: vtkUnstructuredGridBaseAlgorithm
    
    vtkUnstructuredGridGeometryFilter is a filter that extracts geometry
    (and associated data) from an unstructured grid. It differs from
    vtkGeometryFilter by not tessellating higher order faces: 2D faces of
    quadratic 3D cells will be quadratic. A quadratic edge is extracted
    as a quadratic edge. For that purpose, the output of this filter is
    an unstructured grid, not a polydata. Also, the face of a voxel is a
    pixel, not a quad. Geometry is obtained as follows: all 0D, 1D, and
    2D cells are extracted. All 2D faces that are used by only one 3D
    cell (i.e., boundary faces) are extracted. It also is possible to
    specify conditions on point ids, cell ids, and on bounding box
    (referred to as "Extent") to control the extraction process.
    
    @warning
    When vtkUnstructuredGridGeometryFilter extracts cells (or boundaries
    of cells) it will (by default) merge duplicate vertices. This may
    cause problems in some cases. Turn merging off to prevent this from
    occurring.
    
    @sa
    vtkGeometryFilter
    """
    def CellClippingOff(self):
        """
        V.CellClippingOff()
        C++: virtual void CellClippingOff()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def CellClippingOn(self):
        """
        V.CellClippingOn()
        C++: virtual void CellClippingOn()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified.
        """
        ...
    
    def DuplicateGhostCellClippingOff(self):
        """
        V.DuplicateGhostCellClippingOff()
        C++: virtual void DuplicateGhostCellClippingOff()
        
        Turn on/off clipping of ghost cells with type
        vtkDataSetAttributes::DUPLICATECELL. Defaults to on.
        """
        ...
    
    def DuplicateGhostCellClippingOn(self):
        """
        V.DuplicateGhostCellClippingOn()
        C++: virtual void DuplicateGhostCellClippingOn()
        
        Turn on/off clipping of ghost cells with type
        vtkDataSetAttributes::DUPLICATECELL. Defaults to on.
        """
        ...
    
    def ExtentClippingOff(self):
        """
        V.ExtentClippingOff()
        C++: virtual void ExtentClippingOff()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def ExtentClippingOn(self):
        """
        V.ExtentClippingOn()
        C++: virtual void ExtentClippingOn()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def GetCellClipping(self):
        """
        V.GetCellClipping() -> int
        C++: virtual vtkTypeBool GetCellClipping()
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def GetCellMaximum(self):
        """
        V.GetCellMaximum() -> int
        C++: virtual vtkIdType GetCellMaximum()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMaximumMaxValue(self):
        """
        V.GetCellMaximumMaxValue() -> int
        C++: virtual vtkIdType GetCellMaximumMaxValue()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMaximumMinValue(self):
        """
        V.GetCellMaximumMinValue() -> int
        C++: virtual vtkIdType GetCellMaximumMinValue()
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def GetCellMinimum(self):
        """
        V.GetCellMinimum() -> int
        C++: virtual vtkIdType GetCellMinimum()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetCellMinimumMaxValue(self):
        """
        V.GetCellMinimumMaxValue() -> int
        C++: virtual vtkIdType GetCellMinimumMaxValue()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetCellMinimumMinValue(self):
        """
        V.GetCellMinimumMinValue() -> int
        C++: virtual vtkIdType GetCellMinimumMinValue()
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def GetDuplicateGhostCellClipping(self):
        """
        V.GetDuplicateGhostCellClipping() -> int
        C++: virtual vtkTypeBool GetDuplicateGhostCellClipping()
        
        Turn on/off clipping of ghost cells with type
        vtkDataSetAttributes::DUPLICATECELL. Defaults to on.
        """
        ...
    
    def GetExtent(self):
        """
        V.GetExtent() -> (float, ...)
        C++: double *GetExtent()
        
        Set / get a (xmin,xmax, ymin,ymax, zmin,zmax) bounding box to
        clip data.
        """
        ...
    
    def GetExtentClipping(self):
        """
        V.GetExtentClipping() -> int
        C++: virtual vtkTypeBool GetExtentClipping()
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Set / get a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMerging(self):
        """
        V.GetMerging() -> int
        C++: virtual vtkTypeBool GetMerging()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the locator.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOriginalCellIdsName(self):
        """
        V.GetOriginalCellIdsName() -> string
        C++: virtual const char *GetOriginalCellIdsName()
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def GetOriginalPointIdsName(self):
        """
        V.GetOriginalPointIdsName() -> string
        C++: virtual const char *GetOriginalPointIdsName()
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def GetPassThroughCellIds(self):
        """
        V.GetPassThroughCellIds() -> int
        C++: virtual vtkTypeBool GetPassThroughCellIds()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def GetPassThroughPointIds(self):
        """
        V.GetPassThroughPointIds() -> int
        C++: virtual vtkTypeBool GetPassThroughPointIds()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def GetPointClipping(self):
        """
        V.GetPointClipping() -> int
        C++: virtual vtkTypeBool GetPointClipping()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def GetPointMaximum(self):
        """
        V.GetPointMaximum() -> int
        C++: virtual vtkIdType GetPointMaximum()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMaximumMaxValue(self):
        """
        V.GetPointMaximumMaxValue() -> int
        C++: virtual vtkIdType GetPointMaximumMaxValue()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMaximumMinValue(self):
        """
        V.GetPointMaximumMinValue() -> int
        C++: virtual vtkIdType GetPointMaximumMinValue()
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def GetPointMinimum(self):
        """
        V.GetPointMinimum() -> int
        C++: virtual vtkIdType GetPointMinimum()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def GetPointMinimumMaxValue(self):
        """
        V.GetPointMinimumMaxValue() -> int
        C++: virtual vtkIdType GetPointMinimumMaxValue()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def GetPointMinimumMinValue(self):
        """
        V.GetPointMinimumMinValue() -> int
        C++: virtual vtkIdType GetPointMinimumMinValue()
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergingOff(self):
        """
        V.MergingOff()
        C++: virtual void MergingOff()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def MergingOn(self):
        """
        V.MergingOn()
        C++: virtual void MergingOn()
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUnstructuredGridGeometryFilter
        C++: vtkUnstructuredGridGeometryFilter *NewInstance()
        """
        ...
    
    def PassThroughCellIdsOff(self):
        """
        V.PassThroughCellIdsOff()
        C++: virtual void PassThroughCellIdsOff()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughCellIdsOn(self):
        """
        V.PassThroughCellIdsOn()
        C++: virtual void PassThroughCellIdsOn()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughPointIdsOff(self):
        """
        V.PassThroughPointIdsOff()
        C++: virtual void PassThroughPointIdsOff()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PassThroughPointIdsOn(self):
        """
        V.PassThroughPointIdsOn()
        C++: virtual void PassThroughPointIdsOn()
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def PointClippingOff(self):
        """
        V.PointClippingOff()
        C++: virtual void PointClippingOff()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def PointClippingOn(self):
        """
        V.PointClippingOn()
        C++: virtual void PointClippingOn()
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUnstructuredGridGeometryFilter
        C++: static vtkUnstructuredGridGeometryFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCellClipping(self, p_int):
        """
        V.SetCellClipping(int)
        C++: virtual void SetCellClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry by cell id.
        """
        ...
    
    def SetCellMaximum(self, p_int):
        """
        V.SetCellMaximum(int)
        C++: virtual void SetCellMaximum(vtkIdType _arg)
        
        Specify the maximum cell id for point id selection.
        """
        ...
    
    def SetCellMinimum(self, p_int):
        """
        V.SetCellMinimum(int)
        C++: virtual void SetCellMinimum(vtkIdType _arg)
        
        Specify the minimum cell id for point id selection.
        """
        ...
    
    def SetDuplicateGhostCellClipping(self, p_int):
        """
        V.SetDuplicateGhostCellClipping(int)
        C++: virtual void SetDuplicateGhostCellClipping(vtkTypeBool _arg)
        
        Turn on/off clipping of ghost cells with type
        vtkDataSetAttributes::DUPLICATECELL. Defaults to on.
        """
        ...
    
    def SetExtent(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetExtent(float, float, float, float, float, float)
        C++: void SetExtent(double xMin, double xMax, double yMin,
            double yMax, double zMin, double zMax)
        V.SetExtent([float, float, float, float, float, float])
        C++: void SetExtent(double extent[6])
        
        Specify a (xmin,xmax, ymin,ymax, zmin,zmax) bounding box to clip
        data.
        """
        ...
    
    def SetExtentClipping(self, p_int):
        """
        V.SetExtentClipping(int)
        C++: virtual void SetExtentClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry via bounding box.
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: void SetLocator(vtkIncrementalPointLocator *locator)
        
        Set / get a spatial locator for merging points. By default an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetMerging(self, p_int):
        """
        V.SetMerging(int)
        C++: virtual void SetMerging(vtkTypeBool _arg)
        
        Turn on/off merging of coincident points. Note that is merging is
        on, points with different point attributes (e.g., normals) are
        merged, which may cause rendering artifacts.
        """
        ...
    
    def SetOriginalCellIdsName(self, string):
        """
        V.SetOriginalCellIdsName(string)
        C++: virtual void SetOriginalCellIdsName(const char *_arg)
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def SetOriginalPointIdsName(self, string):
        """
        V.SetOriginalPointIdsName(string)
        C++: virtual void SetOriginalPointIdsName(const char *_arg)
        
        If PassThroughCellIds or PassThroughPointIds is on, then these
        ivars control the name given to the field in which the ids are
        written into.  If set to nullptr, then vtkOriginalCellIds or
        vtkOriginalPointIds (the default) is used, respectively.
        """
        ...
    
    def SetPassThroughCellIds(self, p_int):
        """
        V.SetPassThroughCellIds(int)
        C++: virtual void SetPassThroughCellIds(vtkTypeBool _arg)
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def SetPassThroughPointIds(self, p_int):
        """
        V.SetPassThroughPointIds(int)
        C++: virtual void SetPassThroughPointIds(vtkTypeBool _arg)
        
        If on, the output polygonal dataset will have a celldata array
        that holds the cell index of the original 3D cell that produced
        each output cell. This is useful for cell picking. The default is
        off to conserve memory. Note that PassThroughCellIds will be
        ignored if UseStrips is on, since in that case each tringle strip
        can represent more than on of the input cells.
        """
        ...
    
    def SetPointClipping(self, p_int):
        """
        V.SetPointClipping(int)
        C++: virtual void SetPointClipping(vtkTypeBool _arg)
        
        Turn on/off selection of geometry by point id.
        """
        ...
    
    def SetPointMaximum(self, p_int):
        """
        V.SetPointMaximum(int)
        C++: virtual void SetPointMaximum(vtkIdType _arg)
        
        Specify the maximum point id for point id selection.
        """
        ...
    
    def SetPointMinimum(self, p_int):
        """
        V.SetPointMinimum(int)
        C++: virtual void SetPointMinimum(vtkIdType _arg)
        
        Specify the minimum point id for point id selection.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
