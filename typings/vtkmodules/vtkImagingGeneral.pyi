"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkImagingCore as __vtkmodules_vtkImagingCore

VTK_EDT_SAITO = ...
VTK_EDT_SAITO_CACHED = ...
class vtkImageSpatialAlgorithm(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageSpatialAlgorithm - Filters that operate on pixel
    neighborhoods.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageSpatialAlgorithm is a super class for filters that operate on
    an input neighborhood for each output pixel. It handles even sized
    neighborhoods, but their can be a half pixel shift associated with
    processing.  This superclass has some logic for handling boundaries. 
    It can split regions into boundary and non-boundary pieces and call
    different execute methods.
    """
    def GetKernelMiddle(self):
        """
        V.GetKernelMiddle() -> (int, int, int)
        C++: virtual int *GetKernelMiddle()
        
        Get the Kernel middle.
        """
        ...
    
    def GetKernelSize(self):
        """
        V.GetKernelSize() -> (int, int, int)
        C++: virtual int *GetKernelSize()
        
        Get the Kernel size.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSpatialAlgorithm
        C++: vtkImageSpatialAlgorithm *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSpatialAlgorithm
        C++: static vtkImageSpatialAlgorithm *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageAnisotropicDiffusion2D(vtkImageSpatialAlgorithm):
    """
    vtkImageAnisotropicDiffusion2D - edge preserving smoothing.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageAnisotropicDiffusion2D diffuses a 2d image iteratively. The
    neighborhood of the diffusion is determined by the instance flags. If
    "Edges" is on the 4 edge connected voxels are included, and if
    "Corners" is on, the 4 corner connected voxels are included. 
    "DiffusionFactor" determines how far a pixel value moves toward its
    neighbors, and is insensitive to the number of neighbors chosen.  The
    diffusion is anisotropic because it only occurs when a gradient
    measure is below "GradientThreshold".  Two gradient measures exist
    and are toggled by the "GradientMagnitudeThreshold" flag. When
    "GradientMagnitudeThreshold" is on, the magnitude of the gradient,
    computed by central differences, above "DiffusionThreshold" a voxel
    is not modified.  The alternative measure examines each neighbor
    independently.  The gradient between the voxel and the neighbor must
    be below the "DiffusionThreshold" for diffusion to occur with THAT
    neighbor.
    
    @sa
    vtkImageAnisotropicDiffusion3D
    """
    def CornersOff(self):
        """
        V.CornersOff()
        C++: virtual void CornersOff()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def CornersOn(self):
        """
        V.CornersOn()
        C++: virtual void CornersOn()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def EdgesOff(self):
        """
        V.EdgesOff()
        C++: virtual void EdgesOff()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def EdgesOn(self):
        """
        V.EdgesOn()
        C++: virtual void EdgesOn()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def FacesOff(self):
        """
        V.FacesOff()
        C++: virtual void FacesOff()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def FacesOn(self):
        """
        V.FacesOn()
        C++: virtual void FacesOn()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetCorners(self):
        """
        V.GetCorners() -> int
        C++: virtual vtkTypeBool GetCorners()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetDiffusionFactor(self):
        """
        V.GetDiffusionFactor() -> float
        C++: virtual double GetDiffusionFactor()
        
        The diffusion factor specifies how much neighboring pixels effect
        each other. No diffusion occurs with a factor of 0, and a
        diffusion factor of 1 causes the pixel to become the average of
        all its neighbors.
        """
        ...
    
    def GetDiffusionThreshold(self):
        """
        V.GetDiffusionThreshold() -> float
        C++: virtual double GetDiffusionThreshold()
        
        Set/Get the difference threshold that stops diffusion. when the
        difference between two pixel is greater than this threshold, the
        pixels are not diffused.  This causes diffusion to avoid sharp
        edges. If the GradientMagnitudeThreshold is set, then gradient
        magnitude is used for comparison instead of pixel differences.
        """
        ...
    
    def GetEdges(self):
        """
        V.GetEdges() -> int
        C++: virtual vtkTypeBool GetEdges()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetFaces(self):
        """
        V.GetFaces() -> int
        C++: virtual vtkTypeBool GetFaces()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetGradientMagnitudeThreshold(self):
        """
        V.GetGradientMagnitudeThreshold() -> int
        C++: virtual vtkTypeBool GetGradientMagnitudeThreshold()
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfIterations(self):
        """
        V.GetNumberOfIterations() -> int
        C++: virtual int GetNumberOfIterations()
        
        Get the number of iterations.
        """
        ...
    
    def GradientMagnitudeThresholdOff(self):
        """
        V.GradientMagnitudeThresholdOff()
        C++: virtual void GradientMagnitudeThresholdOff()
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def GradientMagnitudeThresholdOn(self):
        """
        V.GradientMagnitudeThresholdOn()
        C++: virtual void GradientMagnitudeThresholdOn()
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageAnisotropicDiffusion2D
        C++: vtkImageAnisotropicDiffusion2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageAnisotropicDiffusion2D
        C++: static vtkImageAnisotropicDiffusion2D *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCorners(self, p_int):
        """
        V.SetCorners(int)
        C++: virtual void SetCorners(vtkTypeBool _arg)
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def SetDiffusionFactor(self, p_float):
        """
        V.SetDiffusionFactor(float)
        C++: virtual void SetDiffusionFactor(double _arg)
        
        The diffusion factor specifies how much neighboring pixels effect
        each other. No diffusion occurs with a factor of 0, and a
        diffusion factor of 1 causes the pixel to become the average of
        all its neighbors.
        """
        ...
    
    def SetDiffusionThreshold(self, p_float):
        """
        V.SetDiffusionThreshold(float)
        C++: virtual void SetDiffusionThreshold(double _arg)
        
        Set/Get the difference threshold that stops diffusion. when the
        difference between two pixel is greater than this threshold, the
        pixels are not diffused.  This causes diffusion to avoid sharp
        edges. If the GradientMagnitudeThreshold is set, then gradient
        magnitude is used for comparison instead of pixel differences.
        """
        ...
    
    def SetEdges(self, p_int):
        """
        V.SetEdges(int)
        C++: virtual void SetEdges(vtkTypeBool _arg)
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def SetFaces(self, p_int):
        """
        V.SetFaces(int)
        C++: virtual void SetFaces(vtkTypeBool _arg)
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def SetGradientMagnitudeThreshold(self, p_int):
        """
        V.SetGradientMagnitudeThreshold(int)
        C++: virtual void SetGradientMagnitudeThreshold(vtkTypeBool _arg)
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def SetNumberOfIterations(self, p_int):
        """
        V.SetNumberOfIterations(int)
        C++: void SetNumberOfIterations(int num)
        
        This method sets the number of iterations which also affects the
        input neighborhood needed to compute one output pixel.  Each
        iteration requires an extra pixel layer on the neighborhood. 
        This is only relevant when you are trying to stream or are
        requesting a sub extent of the "wholeExtent".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageAnisotropicDiffusion3D(vtkImageSpatialAlgorithm):
    """
    vtkImageAnisotropicDiffusion3D - edge preserving smoothing.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageAnisotropicDiffusion3D diffuses an volume iteratively. The
    neighborhood of the diffusion is determined by the instance flags. if
    "Faces" is on, the 6 voxels adjoined by faces are included in the
    neighborhood.  If "Edges" is on the 12 edge connected voxels are
    included, and if "Corners" is on, the 8 corner connected voxels are
    included.  "DiffusionFactor" determines how far a pixel value moves
    toward its neighbors, and is insensitive to the number of neighbors
    chosen.  The diffusion is anisotropic because it only occurs when a
    gradient measure is below "GradientThreshold".  Two gradient measures
    exist and are toggled by the "GradientMagnitudeThreshold" flag. When
    "GradientMagnitudeThreshold" is on, the magnitude of the gradient,
    computed by central differences, above "DiffusionThreshold" a voxel
    is not modified.  The alternative measure examines each neighbor
    independently.  The gradient between the voxel and the neighbor must
    be below the "DiffusionThreshold" for diffusion to occur with THAT
    neighbor.
    
    @sa
    vtkImageAnisotropicDiffusion2D
    """
    def CornersOff(self):
        """
        V.CornersOff()
        C++: virtual void CornersOff()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def CornersOn(self):
        """
        V.CornersOn()
        C++: virtual void CornersOn()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def EdgesOff(self):
        """
        V.EdgesOff()
        C++: virtual void EdgesOff()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def EdgesOn(self):
        """
        V.EdgesOn()
        C++: virtual void EdgesOn()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def FacesOff(self):
        """
        V.FacesOff()
        C++: virtual void FacesOff()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def FacesOn(self):
        """
        V.FacesOn()
        C++: virtual void FacesOn()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetCorners(self):
        """
        V.GetCorners() -> int
        C++: virtual vtkTypeBool GetCorners()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetDiffusionFactor(self):
        """
        V.GetDiffusionFactor() -> float
        C++: virtual double GetDiffusionFactor()
        
        Set/Get the difference factor
        """
        ...
    
    def GetDiffusionThreshold(self):
        """
        V.GetDiffusionThreshold() -> float
        C++: virtual double GetDiffusionThreshold()
        
        Set/Get the difference threshold that stops diffusion. when the
        difference between two pixel is greater than this threshold, the
        pixels are not diffused.  This causes diffusion to avoid sharp
        edges. If the GradientMagnitudeThreshold is set, then gradient
        magnitude is used for comparison instead of pixel differences.
        """
        ...
    
    def GetEdges(self):
        """
        V.GetEdges() -> int
        C++: virtual vtkTypeBool GetEdges()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetFaces(self):
        """
        V.GetFaces() -> int
        C++: virtual vtkTypeBool GetFaces()
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def GetGradientMagnitudeThreshold(self):
        """
        V.GetGradientMagnitudeThreshold() -> int
        C++: virtual vtkTypeBool GetGradientMagnitudeThreshold()
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfIterations(self):
        """
        V.GetNumberOfIterations() -> int
        C++: virtual int GetNumberOfIterations()
        
        Get the number of iterations.
        """
        ...
    
    def GradientMagnitudeThresholdOff(self):
        """
        V.GradientMagnitudeThresholdOff()
        C++: virtual void GradientMagnitudeThresholdOff()
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def GradientMagnitudeThresholdOn(self):
        """
        V.GradientMagnitudeThresholdOn()
        C++: virtual void GradientMagnitudeThresholdOn()
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageAnisotropicDiffusion3D
        C++: vtkImageAnisotropicDiffusion3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageAnisotropicDiffusion3D
        C++: static vtkImageAnisotropicDiffusion3D *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCorners(self, p_int):
        """
        V.SetCorners(int)
        C++: virtual void SetCorners(vtkTypeBool _arg)
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def SetDiffusionFactor(self, p_float):
        """
        V.SetDiffusionFactor(float)
        C++: virtual void SetDiffusionFactor(double _arg)
        
        Set/Get the difference factor
        """
        ...
    
    def SetDiffusionThreshold(self, p_float):
        """
        V.SetDiffusionThreshold(float)
        C++: virtual void SetDiffusionThreshold(double _arg)
        
        Set/Get the difference threshold that stops diffusion. when the
        difference between two pixel is greater than this threshold, the
        pixels are not diffused.  This causes diffusion to avoid sharp
        edges. If the GradientMagnitudeThreshold is set, then gradient
        magnitude is used for comparison instead of pixel differences.
        """
        ...
    
    def SetEdges(self, p_int):
        """
        V.SetEdges(int)
        C++: virtual void SetEdges(vtkTypeBool _arg)
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def SetFaces(self, p_int):
        """
        V.SetFaces(int)
        C++: virtual void SetFaces(vtkTypeBool _arg)
        
        Choose neighbors to diffuse (6 faces, 12 edges, 8 corners).
        """
        ...
    
    def SetGradientMagnitudeThreshold(self, p_int):
        """
        V.SetGradientMagnitudeThreshold(int)
        C++: virtual void SetGradientMagnitudeThreshold(vtkTypeBool _arg)
        
        Switch between gradient magnitude threshold and pixel gradient
        threshold.
        """
        ...
    
    def SetNumberOfIterations(self, p_int):
        """
        V.SetNumberOfIterations(int)
        C++: void SetNumberOfIterations(int num)
        
        This method sets the number of iterations which also affects the
        input neighborhood needed to compute one output pixel.  Each
        iterations requires an extra pixel layer on the neighborhood. 
        This is only relevant when you are trying to stream or are
        requesting a sub extent of the "wholeExtent".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageCheckerboard(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageCheckerboard - show two images at once using a checkboard
    pattern
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageCheckerboard displays two images as one using a checkerboard
     pattern. This filter can be used to compare two images. The
     checkerboard pattern is controlled by the NumberOfDivisions
     ivar. This controls the number of checkerboard divisions in the
    whole
     extent of the image.
    """
    def GetNumberOfDivisions(self):
        """
        V.GetNumberOfDivisions() -> (int, int, int)
        C++: virtual int *GetNumberOfDivisions()
        
        Set/Get the number of divisions along each axis.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageCheckerboard
        C++: vtkImageCheckerboard *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageCheckerboard
        C++: static vtkImageCheckerboard *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInput1Data(self, vtkDataObject):
        """
        V.SetInput1Data(vtkDataObject)
        C++: virtual void SetInput1Data(vtkDataObject *in)
        
        Set the two inputs to this filter
        """
        ...
    
    def SetInput2Data(self, vtkDataObject):
        """
        V.SetInput2Data(vtkDataObject)
        C++: virtual void SetInput2Data(vtkDataObject *in)
        """
        ...
    
    def SetNumberOfDivisions(self, p_int, p_int_1, p_int_2):
        """
        V.SetNumberOfDivisions(int, int, int)
        C++: virtual void SetNumberOfDivisions(int _arg1, int _arg2,
            int _arg3)
        V.SetNumberOfDivisions((int, int, int))
        C++: virtual void SetNumberOfDivisions(const int _arg[3])
        
        Set/Get the number of divisions along each axis.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageCityBlockDistance(__vtkmodules_vtkImagingCore.vtkImageDecomposeFilter):
    """
    vtkImageCityBlockDistance - 1,2 or 3D distance map.
    
    Superclass: vtkImageDecomposeFilter
    
    vtkImageCityBlockDistance creates a distance map using the city block
    (Manhatten) distance measure.  The input is a mask.  Zero values are
    considered boundaries.  The output pixel is the minimum of the input
    pixel and the distance to a boundary (or neighbor value + 1 unit).
    distance values are calculated in pixels. The filter works by taking
    6 passes (for 3d distance map): 2 along each axis (forward and
    backward). Each pass keeps a running minimum distance. For some
    reason, I preserve the sign if the distance.  If the input mask is
    initially negative, the output distances will be negative. Distances
    maps can have inside (negative regions) and outsides (positive
    regions).
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageCityBlockDistance
        C++: vtkImageCityBlockDistance *NewInstance()
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageCityBlockDistance
        C++: static vtkImageCityBlockDistance *SafeDownCast(
            vtkObjectBase *o)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageConvolve(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageConvolve - Convolution of an image with a kernel.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageConvolve convolves the image with a 3D NxNxN kernel or a 2D
    NxN kernel.  The output image is cropped to the same size as the
    input.
    """
    def GetKernel3x3(self):
        """
        V.GetKernel3x3() -> (float, float, float, float, float, float,
            float, float, float)
        C++: double *GetKernel3x3()
        V.GetKernel3x3([float, float, float, float, float, float, float,
            float, float])
        C++: void GetKernel3x3(double kernel[9])
        
        Return an array that contains the kernel.
        """
        ...
    
    def GetKernel3x3x3(self):
        """
        V.GetKernel3x3x3() -> (float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float)
        C++: double *GetKernel3x3x3()
        V.GetKernel3x3x3([float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float])
        C++: void GetKernel3x3x3(double kernel[27])
        
        Return an array that contains the kernel
        """
        ...
    
    def GetKernel5x5(self):
        """
        V.GetKernel5x5() -> (float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float)
        C++: double *GetKernel5x5()
        V.GetKernel5x5([float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float])
        C++: void GetKernel5x5(double kernel[25])
        
        Return an array that contains the kernel.
        """
        ...
    
    def GetKernel5x5x5(self):
        """
        V.GetKernel5x5x5() -> (float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float)
        C++: double *GetKernel5x5x5()
        """
        ...
    
    def GetKernel7x7(self):
        """
        V.GetKernel7x7() -> (float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float)
        C++: double *GetKernel7x7()
        V.GetKernel7x7([float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float])
        C++: void GetKernel7x7(double kernel[49])
        """
        ...
    
    def GetKernel7x7x7(self):
        """
        V.GetKernel7x7x7() -> (float, ...)
        C++: double *GetKernel7x7x7()
        """
        ...
    
    def GetKernelSize(self):
        """
        V.GetKernelSize() -> (int, int, int)
        C++: virtual int *GetKernelSize()
        
        Get the kernel size
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageConvolve filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageConvolve filter.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageConvolve filter.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageConvolve filter.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageConvolve
        C++: vtkImageConvolve *NewInstance()
        
        Construct an instance of vtkImageConvolve filter.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageConvolve
        C++: static vtkImageConvolve *SafeDownCast(vtkObjectBase *o)
        
        Construct an instance of vtkImageConvolve filter.
        """
        ...
    
    def SetKernel3x3(self, ):
        """
        V.SetKernel3x3((float, float, float, float, float, float, float,
            float, float))
        C++: void SetKernel3x3(const double kernel[9])
        
        Set the kernel to be a given 3x3 or 5x5 or 7x7 kernel.
        """
        ...
    
    def SetKernel3x3x3(self, ):
        """
        V.SetKernel3x3x3((float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float))
        C++: void SetKernel3x3x3(const double kernel[27])
        
        Set the kernel to be a 3x3x3 or 5x5x5 or 7x7x7 kernel.
        """
        ...
    
    def SetKernel5x5(self, ):
        """
        V.SetKernel5x5((float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float))
        C++: void SetKernel5x5(const double kernel[25])
        
        Set the kernel to be a given 3x3 or 5x5 or 7x7 kernel.
        """
        ...
    
    def SetKernel5x5x5(self, ):
        """
        V.SetKernel5x5x5((float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float))
        C++: void SetKernel5x5x5(const double kernel[125])
        """
        ...
    
    def SetKernel7x7(self, ):
        """
        V.SetKernel7x7((float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float))
        C++: void SetKernel7x7(const double kernel[49])
        """
        ...
    
    def SetKernel7x7x7(self, *args, **kwargs):
        """  """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageCorrelation(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageCorrelation - Correlation imageof the two inputs.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageCorrelation finds the correlation between two data sets.
    SetDimensionality determines whether the Correlation will be 3D, 2D
    or 1D. The default is a 2D Correlation.  The Output type will be
    double. The output size will match the size of the first input. The
    second input is considered the correlation kernel.
    """
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Determines how the input is interpreted (set of 2d slices ...).
        The default is 2.
        """
        ...
    
    def GetDimensionalityMaxValue(self):
        """
        V.GetDimensionalityMaxValue() -> int
        C++: virtual int GetDimensionalityMaxValue()
        
        Determines how the input is interpreted (set of 2d slices ...).
        The default is 2.
        """
        ...
    
    def GetDimensionalityMinValue(self):
        """
        V.GetDimensionalityMinValue() -> int
        C++: virtual int GetDimensionalityMinValue()
        
        Determines how the input is interpreted (set of 2d slices ...).
        The default is 2.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageCorrelation
        C++: vtkImageCorrelation *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageCorrelation
        C++: static vtkImageCorrelation *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Determines how the input is interpreted (set of 2d slices ...).
        The default is 2.
        """
        ...
    
    def SetInput1Data(self, vtkDataObject):
        """
        V.SetInput1Data(vtkDataObject)
        C++: virtual void SetInput1Data(vtkDataObject *in)
        
        Set the input image.
        """
        ...
    
    def SetInput2Data(self, vtkDataObject):
        """
        V.SetInput2Data(vtkDataObject)
        C++: virtual void SetInput2Data(vtkDataObject *in)
        
        Set the correlation kernel.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageEuclideanDistance(__vtkmodules_vtkImagingCore.vtkImageDecomposeFilter):
    """
    vtkImageEuclideanDistance - computes 3D Euclidean DT
    
    Superclass: vtkImageDecomposeFilter
    
    vtkImageEuclideanDistance implements the Euclidean DT using Saito's
    algorithm. The distance map produced contains the square of the
    Euclidean distance values.
    
    The algorithm has a o(n^(D+1)) complexity over nxnx...xn images in D
    dimensions. It is very efficient on relatively small images.
    Cuisenaire's algorithms should be used instead if n >> 500. These are
    not implemented yet.
    
    For the special case of images where the slice-size is a multiple of
    2^N with a large N (typically for 256x256 slices), Saito's algorithm
    encounters a lot of cache conflicts during the 3rd iteration which
    can slow it very significantly. In that case, one should use
    ::SetAlgorithmToSaitoCached() instead for better performance.
    
    References:
    
    T. Saito and J.I. Toriwaki. New algorithms for Euclidean distance
    transformations of an n-dimensional digitised picture with
    applications. Pattern Recognition, 27(11). pp. 1551--1565, 1994.
    
    O. Cuisenaire. Distance Transformation: fast algorithms and
    applications to medical image processing. PhD Thesis, Universite
    catholique de Louvain, October 1999.
    http://ltswww.epfl.ch/~cuisenai/papers/oc_thesis.pdf
    """
    def ConsiderAnisotropyOff(self):
        """
        V.ConsiderAnisotropyOff()
        C++: virtual void ConsiderAnisotropyOff()
        
        Used to define whether Spacing should be used in the computation
        of the distances
        """
        ...
    
    def ConsiderAnisotropyOn(self):
        """
        V.ConsiderAnisotropyOn()
        C++: virtual void ConsiderAnisotropyOn()
        
        Used to define whether Spacing should be used in the computation
        of the distances
        """
        ...
    
    def GetAlgorithm(self):
        """
        V.GetAlgorithm() -> int
        C++: virtual int GetAlgorithm()
        
        Selects a Euclidean DT algorithm.
        1. Saito
        2. Saito-cached More algorithms will be added later on.
        """
        ...
    
    def GetConsiderAnisotropy(self):
        """
        V.GetConsiderAnisotropy() -> int
        C++: virtual vtkTypeBool GetConsiderAnisotropy()
        
        Used to define whether Spacing should be used in the computation
        of the distances
        """
        ...
    
    def GetInitialize(self):
        """
        V.GetInitialize() -> int
        C++: virtual vtkTypeBool GetInitialize()
        
        Used to set all non-zero voxels to MaximumDistance before
        starting the distance transformation. Setting Initialize off
        keeps the current value in the input image as starting point.
        This allows to superimpose several distance maps.
        """
        ...
    
    def GetMaximumDistance(self):
        """
        V.GetMaximumDistance() -> float
        C++: virtual double GetMaximumDistance()
        
        Any distance bigger than this->MaximumDistance will not ne
        computed but set to this->MaximumDistance instead.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def InitializeOff(self):
        """
        V.InitializeOff()
        C++: virtual void InitializeOff()
        
        Used to set all non-zero voxels to MaximumDistance before
        starting the distance transformation. Setting Initialize off
        keeps the current value in the input image as starting point.
        This allows to superimpose several distance maps.
        """
        ...
    
    def InitializeOn(self):
        """
        V.InitializeOn()
        C++: virtual void InitializeOn()
        
        Used to set all non-zero voxels to MaximumDistance before
        starting the distance transformation. Setting Initialize off
        keeps the current value in the input image as starting point.
        This allows to superimpose several distance maps.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageEuclideanDistance
        C++: vtkImageEuclideanDistance *NewInstance()
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageEuclideanDistance
        C++: static vtkImageEuclideanDistance *SafeDownCast(
            vtkObjectBase *o)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SetAlgorithm(self, p_int):
        """
        V.SetAlgorithm(int)
        C++: virtual void SetAlgorithm(int _arg)
        
        Selects a Euclidean DT algorithm.
        1. Saito
        2. Saito-cached More algorithms will be added later on.
        """
        ...
    
    def SetAlgorithmToSaito(self):
        """
        V.SetAlgorithmToSaito()
        C++: void SetAlgorithmToSaito()
        
        Selects a Euclidean DT algorithm.
        1. Saito
        2. Saito-cached More algorithms will be added later on.
        """
        ...
    
    def SetAlgorithmToSaitoCached(self):
        """
        V.SetAlgorithmToSaitoCached()
        C++: void SetAlgorithmToSaitoCached()
        
        Selects a Euclidean DT algorithm.
        1. Saito
        2. Saito-cached More algorithms will be added later on.
        """
        ...
    
    def SetConsiderAnisotropy(self, p_int):
        """
        V.SetConsiderAnisotropy(int)
        C++: virtual void SetConsiderAnisotropy(vtkTypeBool _arg)
        
        Used to define whether Spacing should be used in the computation
        of the distances
        """
        ...
    
    def SetInitialize(self, p_int):
        """
        V.SetInitialize(int)
        C++: virtual void SetInitialize(vtkTypeBool _arg)
        
        Used to set all non-zero voxels to MaximumDistance before
        starting the distance transformation. Setting Initialize off
        keeps the current value in the input image as starting point.
        This allows to superimpose several distance maps.
        """
        ...
    
    def SetMaximumDistance(self, p_float):
        """
        V.SetMaximumDistance(float)
        C++: virtual void SetMaximumDistance(double _arg)
        
        Any distance bigger than this->MaximumDistance will not ne
        computed but set to this->MaximumDistance instead.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageEuclideanToPolar(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageEuclideanToPolar - Converts 2D Euclidean coordinates to polar.
    
    Superclass: vtkThreadedImageAlgorithm
    
    For each pixel with vector components x,y, this filter outputs theta
    in component0, and radius in component1.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetThetaMaximum(self):
        """
        V.GetThetaMaximum() -> float
        C++: virtual double GetThetaMaximum()
        
        Theta is an angle. Maximum specifies when it maps back to 0.
        ThetaMaximum defaults to 255 instead of 2PI, because unsigned
        char is expected as input. The output type must be the same as
        input type.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageEuclideanToPolar
        C++: vtkImageEuclideanToPolar *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageEuclideanToPolar
        C++: static vtkImageEuclideanToPolar *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetThetaMaximum(self, p_float):
        """
        V.SetThetaMaximum(float)
        C++: virtual void SetThetaMaximum(double _arg)
        
        Theta is an angle. Maximum specifies when it maps back to 0.
        ThetaMaximum defaults to 255 instead of 2PI, because unsigned
        char is expected as input. The output type must be the same as
        input type.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageGaussianSmooth(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageGaussianSmooth - Performs a gaussian convolution.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageGaussianSmooth implements a convolution of the input image
    with a gaussian. Supports from one to three dimensional convolutions.
    """
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Set/Get the dimensionality of this filter. This determines
        whether a one, two, or three dimensional gaussian is performed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadiusFactors(self):
        """
        V.GetRadiusFactors() -> (float, float, float)
        C++: virtual double *GetRadiusFactors()
        
        Sets/Gets the Radius Factors of the gaussian (no unit). The
        radius factors determine how far out the gaussian kernel will go
        before being clamped to zero.
        """
        ...
    
    def GetStandardDeviations(self):
        """
        V.GetStandardDeviations() -> (float, float, float)
        C++: virtual double *GetStandardDeviations()
        
        Sets/Gets the Standard deviation of the gaussian in pixel units.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageGaussianSmooth
        C++: vtkImageGaussianSmooth *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageGaussianSmooth
        C++: static vtkImageGaussianSmooth *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Set/Get the dimensionality of this filter. This determines
        whether a one, two, or three dimensional gaussian is performed.
        """
        ...
    
    def SetRadiusFactor(self, p_float):
        """
        V.SetRadiusFactor(float)
        C++: void SetRadiusFactor(double f)
        
        Sets/Gets the Radius Factors of the gaussian (no unit). The
        radius factors determine how far out the gaussian kernel will go
        before being clamped to zero.
        """
        ...
    
    def SetRadiusFactors(self, p_float, p_float_1, p_float_2):
        """
        V.SetRadiusFactors(float, float, float)
        C++: virtual void SetRadiusFactors(double _arg1, double _arg2,
            double _arg3)
        V.SetRadiusFactors((float, float, float))
        C++: virtual void SetRadiusFactors(const double _arg[3])
        V.SetRadiusFactors(float, float)
        C++: void SetRadiusFactors(double f, double f2)
        
        Sets/Gets the Radius Factors of the gaussian (no unit). The
        radius factors determine how far out the gaussian kernel will go
        before being clamped to zero.
        """
        ...
    
    def SetStandardDeviation(self, p_float):
        """
        V.SetStandardDeviation(float)
        C++: void SetStandardDeviation(double std)
        V.SetStandardDeviation(float, float)
        C++: void SetStandardDeviation(double a, double b)
        V.SetStandardDeviation(float, float, float)
        C++: void SetStandardDeviation(double a, double b, double c)
        
        Sets/Gets the Standard deviation of the gaussian in pixel units.
        """
        ...
    
    def SetStandardDeviations(self, p_float, p_float_1, p_float_2):
        """
        V.SetStandardDeviations(float, float, float)
        C++: virtual void SetStandardDeviations(double _arg1,
            double _arg2, double _arg3)
        V.SetStandardDeviations((float, float, float))
        C++: virtual void SetStandardDeviations(const double _arg[3])
        V.SetStandardDeviations(float, float)
        C++: void SetStandardDeviations(double a, double b)
        
        Sets/Gets the Standard deviation of the gaussian in pixel units.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageGradient(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageGradient - Computes the gradient vector.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageGradient computes the gradient vector of an image.  The
    vector results are stored as scalar components. The Dimensionality
    determines whether to perform a 2d or 3d gradient. The default is two
    dimensional XY gradient.  OutputScalarType is always double. Gradient
    is computed using central differences.
    """
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetDimensionalityMaxValue(self):
        """
        V.GetDimensionalityMaxValue() -> int
        C++: virtual int GetDimensionalityMaxValue()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetDimensionalityMinValue(self):
        """
        V.GetDimensionalityMinValue() -> int
        C++: virtual int GetDimensionalityMinValue()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetHandleBoundaries(self):
        """
        V.GetHandleBoundaries() -> int
        C++: virtual vtkTypeBool GetHandleBoundaries()
        
        Get/Set whether to handle boundaries.  If enabled, boundary
        pixels are treated as duplicated so that central differencing
        works for the boundary pixels.  If disabled, the output whole
        extent of the image is reduced by one pixel.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HandleBoundariesOff(self):
        """
        V.HandleBoundariesOff()
        C++: virtual void HandleBoundariesOff()
        
        Get/Set whether to handle boundaries.  If enabled, boundary
        pixels are treated as duplicated so that central differencing
        works for the boundary pixels.  If disabled, the output whole
        extent of the image is reduced by one pixel.
        """
        ...
    
    def HandleBoundariesOn(self):
        """
        V.HandleBoundariesOn()
        C++: virtual void HandleBoundariesOn()
        
        Get/Set whether to handle boundaries.  If enabled, boundary
        pixels are treated as duplicated so that central differencing
        works for the boundary pixels.  If disabled, the output whole
        extent of the image is reduced by one pixel.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageGradient
        C++: vtkImageGradient *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageGradient
        C++: static vtkImageGradient *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def SetHandleBoundaries(self, p_int):
        """
        V.SetHandleBoundaries(int)
        C++: virtual void SetHandleBoundaries(vtkTypeBool _arg)
        
        Get/Set whether to handle boundaries.  If enabled, boundary
        pixels are treated as duplicated so that central differencing
        works for the boundary pixels.  If disabled, the output whole
        extent of the image is reduced by one pixel.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageGradientMagnitude(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageGradientMagnitude - Computes magnitude of the gradient.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageGradientMagnitude computes the gradient magnitude of an
    image. Setting the dimensionality determines whether the gradient is
    computed on 2D images, or 3D volumes.  The default is two dimensional
    XY images.
    
    @sa
    vtkImageGradient vtkImageMagnitude
    """
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetDimensionalityMaxValue(self):
        """
        V.GetDimensionalityMaxValue() -> int
        C++: virtual int GetDimensionalityMaxValue()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetDimensionalityMinValue(self):
        """
        V.GetDimensionalityMinValue() -> int
        C++: virtual int GetDimensionalityMinValue()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetHandleBoundaries(self):
        """
        V.GetHandleBoundaries() -> int
        C++: virtual vtkTypeBool GetHandleBoundaries()
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HandleBoundariesOff(self):
        """
        V.HandleBoundariesOff()
        C++: virtual void HandleBoundariesOff()
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def HandleBoundariesOn(self):
        """
        V.HandleBoundariesOn()
        C++: virtual void HandleBoundariesOn()
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageGradientMagnitude
        C++: vtkImageGradientMagnitude *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageGradientMagnitude
        C++: static vtkImageGradientMagnitude *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def SetHandleBoundaries(self, p_int):
        """
        V.SetHandleBoundaries(int)
        C++: virtual void SetHandleBoundaries(vtkTypeBool _arg)
        
        If "HandleBoundariesOn" then boundary pixels are duplicated So
        central differences can get values.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageHybridMedian2D(vtkImageSpatialAlgorithm):
    """
    vtkImageHybridMedian2D - Median filter that preserves lines and
    corners.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageHybridMedian2D is a median filter that preserves thin lines
    and corners.  It operates on a 5x5 pixel neighborhood.  It computes
    two values initially: the median of the + neighbors and the median of
    the x neighbors.  It then computes the median of these two values
    plus the center pixel.  This result of this second median is the
    output pixel value.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageHybridMedian2D
        C++: vtkImageHybridMedian2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageHybridMedian2D
        C++: static vtkImageHybridMedian2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageLaplacian(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageLaplacian - Computes divergence of gradient.
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageLaplacian computes the Laplacian (like a second derivative)
    of a scalar image.  The operation is the same as taking the
    divergence after a gradient.  Boundaries are handled, so the input is
    the same as the output. Dimensionality determines how the input
    regions are interpreted. (images, or volumes). The Dimensionality
    defaults to two.
    """
    def GetDimensionality(self):
        """
        V.GetDimensionality() -> int
        C++: virtual int GetDimensionality()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetDimensionalityMaxValue(self):
        """
        V.GetDimensionalityMaxValue() -> int
        C++: virtual int GetDimensionalityMaxValue()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetDimensionalityMinValue(self):
        """
        V.GetDimensionalityMinValue() -> int
        C++: virtual int GetDimensionalityMinValue()
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageLaplacian
        C++: vtkImageLaplacian *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageLaplacian
        C++: static vtkImageLaplacian *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDimensionality(self, p_int):
        """
        V.SetDimensionality(int)
        C++: virtual void SetDimensionality(int _arg)
        
        Determines how the input is interpreted (set of 2d slices ...)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageMedian3D(vtkImageSpatialAlgorithm):
    """
    vtkImageMedian3D - Median Filter
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageMedian3D a Median filter that replaces each pixel with the
    median value from a rectangular neighborhood around that pixel.
    Neighborhoods can be no more than 3 dimensional.  Setting one axis of
    the neighborhood kernelSize to 1 changes the filter into a 2D median.
    """
    def GetNumberOfElements(self):
        """
        V.GetNumberOfElements() -> int
        C++: virtual int GetNumberOfElements()
        
        Return the number of elements in the median mask
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMedian3D
        C++: vtkImageMedian3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMedian3D
        C++: static vtkImageMedian3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetKernelSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetKernelSize(int, int, int)
        C++: void SetKernelSize(int size0, int size1, int size2)
        
        This method sets the size of the neighborhood.  It also sets the
        default middle of the neighborhood
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageNormalize(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageNormalize - Normalizes that scalar components for each point.
    
    Superclass: vtkThreadedImageAlgorithm
    
    For each point, vtkImageNormalize normalizes the vector defined by
    the scalar components.  If the magnitude of this vector is zero, the
    output vector is zero also.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageNormalize
        C++: vtkImageNormalize *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageNormalize
        C++: static vtkImageNormalize *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageRange3D(vtkImageSpatialAlgorithm):
    """
    vtkImageRange3D - Max - min of a circular neighborhood.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageRange3D replaces a pixel with the maximum minus minimum over
    an ellipsoidal neighborhood.  If KernelSize of an axis is 1, no
    processing is done on that axis.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageRange3D
        C++: vtkImageRange3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageRange3D
        C++: static vtkImageRange3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetKernelSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetKernelSize(int, int, int)
        C++: void SetKernelSize(int size0, int size1, int size2)
        
        This method sets the size of the neighborhood.  It also sets the
        default middle of the neighborhood and computes the elliptical
        foot print.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSeparableConvolution(__vtkmodules_vtkImagingCore.vtkImageDecomposeFilter):
    """
    vtkImageSeparableConvolution - 3 1D convolutions on an image
    
    Superclass: vtkImageDecomposeFilter
    
    vtkImageSeparableConvolution performs a convolution along the X, Y,
    and Z axes of an image, based on the three different 1D convolution
    kernels.  The kernels must be of odd size, and are considered to be
    centered at (int)((kernelsize - 1) / 2.0 ).  If a kernel is nullptr,
    that dimension is skipped.  This filter is designed to efficiently
    convolve separable filters that can be decomposed into 1 or more 1D
    convolutions.  It also handles arbitrarily large kernel sizes, and
    uses edge replication to handle boundaries.
    """
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overload standard modified time function. If kernel arrays are
        modified, then this object is modified as well.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def GetXKernel(self):
        """
        V.GetXKernel() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetXKernel()
        """
        ...
    
    def GetYKernel(self):
        """
        V.GetYKernel() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetYKernel()
        """
        ...
    
    def GetZKernel(self):
        """
        V.GetZKernel() -> vtkFloatArray
        C++: virtual vtkFloatArray *GetZKernel()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSeparableConvolution
        C++: vtkImageSeparableConvolution *NewInstance()
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSeparableConvolution
        C++: static vtkImageSeparableConvolution *SafeDownCast(
            vtkObjectBase *o)
        
        Construct an instance of vtkImageDecomposeFilter filter with
        default dimensionality 3.
        """
        ...
    
    def SetXKernel(self, vtkFloatArray):
        """
        V.SetXKernel(vtkFloatArray)
        C++: virtual void SetXKernel(vtkFloatArray *)
        """
        ...
    
    def SetYKernel(self, vtkFloatArray):
        """
        V.SetYKernel(vtkFloatArray)
        C++: virtual void SetYKernel(vtkFloatArray *)
        """
        ...
    
    def SetZKernel(self, vtkFloatArray):
        """
        V.SetZKernel(vtkFloatArray)
        C++: virtual void SetZKernel(vtkFloatArray *)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSlab(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageSlab - combine image slices to form a slab image
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageSlab will combine all of the slices of an image to create a
    single slice.  The slices can be combined with the following
    operations: averaging, summation, minimum, maximum. If you require an
    arbitrary angle of projection, you can use vtkImageReslice.@par
    Thanks: Thanks to David Gobbi for contributing this class to VTK.
    """
    def GetMultiSliceOutput(self):
        """
        V.GetMultiSliceOutput() -> int
        C++: virtual vtkTypeBool GetMultiSliceOutput()
        
        Turn on multi-slice output.  Each slice of the output will be a
        projection through the specified range of input slices, e.g. if
        the SliceRange is [0,3] then slice 'i' of the output will be a
        projection through slices 'i' through '3+i' of the input. This
        flag is off by default.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOperation(self):
        """
        V.GetOperation() -> int
        C++: virtual int GetOperation()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def GetOperationAsString(self):
        """
        V.GetOperationAsString() -> string
        C++: const char *GetOperationAsString()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def GetOperationMaxValue(self):
        """
        V.GetOperationMaxValue() -> int
        C++: virtual int GetOperationMaxValue()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def GetOperationMinValue(self):
        """
        V.GetOperationMinValue() -> int
        C++: virtual int GetOperationMinValue()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: virtual int GetOrientation()
        
        Set the slice direction: zero for x, 1 for y, 2 for z. The
        default is the Z direction.
        """
        ...
    
    def GetOrientationMaxValue(self):
        """
        V.GetOrientationMaxValue() -> int
        C++: virtual int GetOrientationMaxValue()
        
        Set the slice direction: zero for x, 1 for y, 2 for z. The
        default is the Z direction.
        """
        ...
    
    def GetOrientationMinValue(self):
        """
        V.GetOrientationMinValue() -> int
        C++: virtual int GetOrientationMinValue()
        
        Set the slice direction: zero for x, 1 for y, 2 for z. The
        default is the Z direction.
        """
        ...
    
    def GetOutputScalarType(self):
        """
        V.GetOutputScalarType() -> int
        C++: virtual int GetOutputScalarType()
        
        Set the output scalar type to float or double, to avoid potential
        overflow when doing a summation operation. The default is to use
        the scalar type of the input data, and clamp the output to the
        range of the input scalar type.
        """
        ...
    
    def GetSliceRange(self):
        """
        V.GetSliceRange() -> (int, int)
        C++: virtual int *GetSliceRange()
        
        Set the range of slices to combine. The default is to project
        through all slices.
        """
        ...
    
    def GetTrapezoidIntegration(self):
        """
        V.GetTrapezoidIntegration() -> int
        C++: virtual vtkTypeBool GetTrapezoidIntegration()
        
        Use trapezoid integration for slab computation.  This weighs the
        first and last slices by half when doing sum and mean, as
        compared to the default midpoint integration that weighs all
        slices equally. It is off by default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MultiSliceOutputOff(self):
        """
        V.MultiSliceOutputOff()
        C++: virtual void MultiSliceOutputOff()
        
        Turn on multi-slice output.  Each slice of the output will be a
        projection through the specified range of input slices, e.g. if
        the SliceRange is [0,3] then slice 'i' of the output will be a
        projection through slices 'i' through '3+i' of the input. This
        flag is off by default.
        """
        ...
    
    def MultiSliceOutputOn(self):
        """
        V.MultiSliceOutputOn()
        C++: virtual void MultiSliceOutputOn()
        
        Turn on multi-slice output.  Each slice of the output will be a
        projection through the specified range of input slices, e.g. if
        the SliceRange is [0,3] then slice 'i' of the output will be a
        projection through slices 'i' through '3+i' of the input. This
        flag is off by default.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSlab
        C++: vtkImageSlab *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSlab
        C++: static vtkImageSlab *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMultiSliceOutput(self, p_int):
        """
        V.SetMultiSliceOutput(int)
        C++: virtual void SetMultiSliceOutput(vtkTypeBool _arg)
        
        Turn on multi-slice output.  Each slice of the output will be a
        projection through the specified range of input slices, e.g. if
        the SliceRange is [0,3] then slice 'i' of the output will be a
        projection through slices 'i' through '3+i' of the input. This
        flag is off by default.
        """
        ...
    
    def SetOperation(self, p_int):
        """
        V.SetOperation(int)
        C++: virtual void SetOperation(int _arg)
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def SetOperationToMax(self):
        """
        V.SetOperationToMax()
        C++: void SetOperationToMax()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def SetOperationToMean(self):
        """
        V.SetOperationToMean()
        C++: void SetOperationToMean()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def SetOperationToMin(self):
        """
        V.SetOperationToMin()
        C++: void SetOperationToMin()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def SetOperationToSum(self):
        """
        V.SetOperationToSum()
        C++: void SetOperationToSum()
        
        Set the operation to use when combining slices.  The choices are
        "Mean", "Sum", "Min", "Max".  The default is "Mean".
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: virtual void SetOrientation(int _arg)
        
        Set the slice direction: zero for x, 1 for y, 2 for z. The
        default is the Z direction.
        """
        ...
    
    def SetOrientationToX(self):
        """
        V.SetOrientationToX()
        C++: void SetOrientationToX()
        
        Set the slice direction: zero for x, 1 for y, 2 for z. The
        default is the Z direction.
        """
        ...
    
    def SetOrientationToY(self):
        """
        V.SetOrientationToY()
        C++: void SetOrientationToY()
        
        Set the slice direction: zero for x, 1 for y, 2 for z. The
        default is the Z direction.
        """
        ...
    
    def SetOrientationToZ(self):
        """
        V.SetOrientationToZ()
        C++: void SetOrientationToZ()
        
        Set the slice direction: zero for x, 1 for y, 2 for z. The
        default is the Z direction.
        """
        ...
    
    def SetOutputScalarTypeToDouble(self):
        """
        V.SetOutputScalarTypeToDouble()
        C++: void SetOutputScalarTypeToDouble()
        
        Set the output scalar type to float or double, to avoid potential
        overflow when doing a summation operation. The default is to use
        the scalar type of the input data, and clamp the output to the
        range of the input scalar type.
        """
        ...
    
    def SetOutputScalarTypeToFloat(self):
        """
        V.SetOutputScalarTypeToFloat()
        C++: void SetOutputScalarTypeToFloat()
        
        Set the output scalar type to float or double, to avoid potential
        overflow when doing a summation operation. The default is to use
        the scalar type of the input data, and clamp the output to the
        range of the input scalar type.
        """
        ...
    
    def SetOutputScalarTypeToInputScalarType(self):
        """
        V.SetOutputScalarTypeToInputScalarType()
        C++: void SetOutputScalarTypeToInputScalarType()
        
        Set the output scalar type to float or double, to avoid potential
        overflow when doing a summation operation. The default is to use
        the scalar type of the input data, and clamp the output to the
        range of the input scalar type.
        """
        ...
    
    def SetSliceRange(self, p_int, p_int_1):
        """
        V.SetSliceRange(int, int)
        C++: virtual void SetSliceRange(int _arg1, int _arg2)
        V.SetSliceRange((int, int))
        C++: void SetSliceRange(const int _arg[2])
        
        Set the range of slices to combine. The default is to project
        through all slices.
        """
        ...
    
    def SetTrapezoidIntegration(self, p_int):
        """
        V.SetTrapezoidIntegration(int)
        C++: virtual void SetTrapezoidIntegration(vtkTypeBool _arg)
        
        Use trapezoid integration for slab computation.  This weighs the
        first and last slices by half when doing sum and mean, as
        compared to the default midpoint integration that weighs all
        slices equally. It is off by default.
        """
        ...
    
    def TrapezoidIntegrationOff(self):
        """
        V.TrapezoidIntegrationOff()
        C++: virtual void TrapezoidIntegrationOff()
        
        Use trapezoid integration for slab computation.  This weighs the
        first and last slices by half when doing sum and mean, as
        compared to the default midpoint integration that weighs all
        slices equally. It is off by default.
        """
        ...
    
    def TrapezoidIntegrationOn(self):
        """
        V.TrapezoidIntegrationOn()
        C++: virtual void TrapezoidIntegrationOn()
        
        Use trapezoid integration for slab computation.  This weighs the
        first and last slices by half when doing sum and mean, as
        compared to the default midpoint integration that weighs all
        slices equally. It is off by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSlabReslice(__vtkmodules_vtkImagingCore.vtkImageReslice):
    """
    vtkImageSlabReslice - Thick slab reformat through data.
    
    Superclass: vtkImageReslice
    
    This class derives from vtkImageResliceBase. Much like
    vtkImageReslice, it reslices the data. It is multi-threaded. It takes
    a three dimensional image as input and produces a two dimensional
    thick MPR along some direction.
    
    The class reslices the thick slab using a blending function.
    Supported blending functions are Minimum Intensity blend through the
    slab, maximum intensity blend and a Mean (average) intensity of
    values across the slab.
    
    The user can adjust the thickness of the slab by using the method
    SetSlabThickness. The distance between sample points used for
    blending across the thickness of the slab is controlled by the method
    SetSlabResolution. These two methods determine the number of slices
    used across the slab for blending, which is computed as {(2 x
    (int)(0.5 x SlabThickness/SlabResolution)) + 1}. This value may be
    queried via GetNumBlendSamplePoints() and is always >= 1.
    
    Much like vtkImageReslice, the reslice axes direction cosines may be
    set via the methods SetResliceAxes or SetResliceAxesDirectionCosines.
    The output spacing is controlled by SetOutputSpacing and the output
    origin is controlled by SetOutputOrigin. The default value to be set
    on pixels that lie outside the volume when reformatting is controlled
    by SetBackgroundColor or SetBackgroundLevel. The
    SetResliceAxesOrigin() method can also be used to provide an (x,y,z)
    point that the slice will pass through.
    @sa
    vtkImageReslice
    """
    def GetBlendMode(self):
        """
        V.GetBlendMode() -> int
        C++: virtual int GetBlendMode()
        
        Set/Get the blend mode. Default is MIP (ie Max)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumBlendSamplePoints(self):
        """
        V.GetNumBlendSamplePoints() -> int
        C++: virtual int GetNumBlendSamplePoints()
        
        Number of sample points used across the slab cross-section. If
        equal to 1, this ends up being a thin reslice through the data
        a.k.a. vtkImageReslice
        """
        ...
    
    def GetSlabResolution(self):
        """
        V.GetSlabResolution() -> float
        C++: virtual double GetSlabResolution()
        
        Spacing between slabs in world units. (Number of Slices, ie
        samples to blend is computed from SlabThickness and
        SlabResolution).
        """
        ...
    
    def GetSlabThickness(self):
        """
        V.GetSlabThickness() -> float
        C++: virtual double GetSlabThickness()
        
        SlabThickness of slab in world coords. SlabThickness must be
        non-zero and positive.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSlabReslice
        C++: vtkImageSlabReslice *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSlabReslice
        C++: static vtkImageSlabReslice *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBlendMode(self, p_int):
        """
        V.SetBlendMode(int)
        C++: virtual void SetBlendMode(int _arg)
        
        Set/Get the blend mode. Default is MIP (ie Max)
        """
        ...
    
    def SetBlendModeToMax(self):
        """
        V.SetBlendModeToMax()
        C++: void SetBlendModeToMax()
        
        Set/Get the blend mode. Default is MIP (ie Max)
        """
        ...
    
    def SetBlendModeToMean(self):
        """
        V.SetBlendModeToMean()
        C++: void SetBlendModeToMean()
        
        Set/Get the blend mode. Default is MIP (ie Max)
        """
        ...
    
    def SetBlendModeToMin(self):
        """
        V.SetBlendModeToMin()
        C++: void SetBlendModeToMin()
        
        Set/Get the blend mode. Default is MIP (ie Max)
        """
        ...
    
    def SetSlabResolution(self, p_float):
        """
        V.SetSlabResolution(float)
        C++: virtual void SetSlabResolution(double _arg)
        
        Spacing between slabs in world units. (Number of Slices, ie
        samples to blend is computed from SlabThickness and
        SlabResolution).
        """
        ...
    
    def SetSlabThickness(self, p_float):
        """
        V.SetSlabThickness(float)
        C++: virtual void SetSlabThickness(double _arg)
        
        SlabThickness of slab in world coords. SlabThickness must be
        non-zero and positive.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSobel2D(vtkImageSpatialAlgorithm):
    """
    vtkImageSobel2D - Computes a vector field using sobel functions.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageSobel2D computes a vector field from a scalar field by using
    Sobel functions.  The number of vector components is 2 because the
    input is an image.  Output is always doubles.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSobel2D
        C++: vtkImageSobel2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSobel2D
        C++: static vtkImageSobel2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageSobel3D(vtkImageSpatialAlgorithm):
    """
    vtkImageSobel3D - Computes a vector field using sobel functions.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageSobel3D computes a vector field from a scalar field by using
    Sobel functions.  The number of vector components is 3 because the
    input is a volume.  Output is always doubles.  A little creative
    liberty was used to extend the 2D sobel kernels into 3D.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSobel3D
        C++: vtkImageSobel3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSobel3D
        C++: static vtkImageSobel3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageVariance3D(vtkImageSpatialAlgorithm):
    """
    vtkImageVariance3D - Variance in a neighborhood.
    
    Superclass: vtkImageSpatialAlgorithm
    
    vtkImageVariance3D replaces each pixel with a measurement of pixel
    variance in a elliptical neighborhood centered on that pixel. The
    value computed is not exactly the variance. The difference between
    the neighbor values and center value is computed and squared for each
    neighbor.  These values are summed and divided by the total number of
    neighbors to produce the output value.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageVariance3D
        C++: vtkImageVariance3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageVariance3D
        C++: static vtkImageVariance3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetKernelSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetKernelSize(int, int, int)
        C++: void SetKernelSize(int size0, int size1, int size2)
        
        This method sets the size of the neighborhood.  It also sets the
        default middle of the neighborhood and computes the Elliptical
        foot print.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSimpleImageFilterExample(__vtkmodules_vtkCommonExecutionModel.vtkSimpleImageToImageFilter):
    """
    vtkSimpleImageFilterExample - Simple example of an image-image filter.
    
    Superclass: vtkSimpleImageToImageFilter
    
    This is an example of a simple image-image filter. It copies it's
    input to it's output (point by point). It shows how templates can be
    used to support various data types.
    @sa
    vtkSimpleImageToImageFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimpleImageFilterExample
        C++: vtkSimpleImageFilterExample *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimpleImageFilterExample
        C++: static vtkSimpleImageFilterExample *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
