"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkXMLParser(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkXMLParser - Parse XML to handle element tags and attributes.
    
    Superclass: vtkObject
    
    vtkXMLParser reads a stream and parses XML element tags and
    corresponding attributes.  Each element begin tag and its attributes
    are sent to the StartElement method.  Each element end tag is sent to
    the EndElement method.  Subclasses should replace these methods to
    actually use the tags.
    """
    def CleanupParser(self):
        """
        V.CleanupParser() -> int
        C++: virtual int CleanupParser()
        
        When parsing fragments of XML, or when streaming XML, use the
        following three methods:
        - InitializeParser() initializes the parser but does not perform
          any actual parsing.
        - ParseChunk() parses a fragment of XML; this has to match to
          what was already parsed.
        - CleanupParser() finishes parsing; if there were errors, it will
        report them.
        """
        ...
    
    def GetEncoding(self):
        """
        V.GetEncoding() -> string
        C++: virtual char *GetEncoding()
        
        Set and get the encoding the parser should expect (nullptr
        defaults to Expat's own default encoder, i.e UTF-8). This should
        be set before parsing (i.e. a call to Parse()) or even
        initializing the parser (i.e. a call to InitializeParser())
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set and get file name.
        """
        ...
    
    def GetIgnoreCharacterData(self):
        """
        V.GetIgnoreCharacterData() -> int
        C++: virtual int GetIgnoreCharacterData()
        
        If this is off (the default), CharacterDataHandler will be called
        to process text within XML Elements. If this is on, the text will
        be ignored.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InitializeParser(self):
        """
        V.InitializeParser() -> int
        C++: virtual int InitializeParser()
        
        When parsing fragments of XML, or when streaming XML, use the
        following three methods:
        - InitializeParser() initializes the parser but does not perform
          any actual parsing.
        - ParseChunk() parses a fragment of XML; this has to match to
          what was already parsed.
        - CleanupParser() finishes parsing; if there were errors, it will
        report them.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLParser
        C++: vtkXMLParser *NewInstance()
        """
        ...
    
    def Parse(self):
        """
        V.Parse() -> int
        C++: virtual int Parse()
        V.Parse(string) -> int
        C++: virtual int Parse(const char *inputString)
        V.Parse(string, int) -> int
        C++: virtual int Parse(const char *inputString,
            unsigned int length)
        
        Parse the XML input.
        """
        ...
    
    def ParseChunk(self, string, p_int):
        """
        V.ParseChunk(string, int) -> int
        C++: virtual int ParseChunk(const char *inputString,
            unsigned int length)
        
        When parsing fragments of XML, or when streaming XML, use the
        following three methods:
        - InitializeParser() initializes the parser but does not perform
          any actual parsing.
        - ParseChunk() parses a fragment of XML; this has to match to
          what was already parsed.
        - CleanupParser() finishes parsing; if there were errors, it will
        report them.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLParser
        C++: static vtkXMLParser *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SeekG(self, p_int):
        """
        V.SeekG(int)
        C++: void SeekG(vtkTypeInt64 position)
        
        Used by subclasses and their supporting classes.  These methods
        wrap around the tellg and seekg methods of the input stream to
        work-around stream bugs on various platforms.
        """
        ...
    
    def SetEncoding(self, string):
        """
        V.SetEncoding(string)
        C++: virtual void SetEncoding(const char *_arg)
        
        Set and get the encoding the parser should expect (nullptr
        defaults to Expat's own default encoder, i.e UTF-8). This should
        be set before parsing (i.e. a call to Parse()) or even
        initializing the parser (i.e. a call to InitializeParser())
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set and get file name.
        """
        ...
    
    def SetIgnoreCharacterData(self, p_int):
        """
        V.SetIgnoreCharacterData(int)
        C++: virtual void SetIgnoreCharacterData(int _arg)
        
        If this is off (the default), CharacterDataHandler will be called
        to process text within XML Elements. If this is on, the text will
        be ignored.
        """
        ...
    
    def TellG(self):
        """
        V.TellG() -> int
        C++: vtkTypeInt64 TellG()
        
        Used by subclasses and their supporting classes.  These methods
        wrap around the tellg and seekg methods of the input stream to
        work-around stream bugs on various platforms.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXMLDataParser(vtkXMLParser):
    """
    vtkXMLDataParser - Used by vtkXMLReader to parse VTK XML files.
    
    Superclass: vtkXMLParser
    
    vtkXMLDataParser provides a subclass of vtkXMLParser that constructs
    a representation of an XML data format's file using vtkXMLDataElement
    to represent each XML element.  This representation is then used by
    vtkXMLReader and its subclasses to traverse the structure of the file
    and extract data.
    
    @sa
    vtkXMLDataElement
    """
    def CharacterDataHandler(self, string, p_int):
        """
        V.CharacterDataHandler(string, int)
        C++: void CharacterDataHandler(const char *data, int length)
            override;
        
        If you need the text inside XMLElements, turn IgnoreCharacterData
        off. This method will then be called when the file is parsed, and
        the text will be stored in each XMLDataElement. VTK XML Readers
        store the information elsewhere, so the default is to ignore it.
        """
        ...
    
    def GetAbort(self):
        """
        V.GetAbort() -> int
        C++: virtual int GetAbort()
        
        Get/Set flag to abort reading of data.  This may be set by a
        progress event observer.
        """
        ...
    
    def GetAppendedDataPosition(self):
        """
        V.GetAppendedDataPosition() -> int
        C++: vtkTypeInt64 GetAppendedDataPosition()
        
        Returns the byte index of where appended data starts (if the file
        is using appended data). Valid after the XML is parsed.
        """
        ...
    
    def GetAttributesEncoding(self):
        """
        V.GetAttributesEncoding() -> int
        C++: virtual int GetAttributesEncoding()
        
        Get/Set the character encoding that will be used to set the
        attributes's encoding type of each vtkXMLDataElement created by
        this parser (i.e., the data element attributes will use that
        encoding internally). If set to VTK_ENCODING_NONE (default), the
        attribute encoding type will not be changed and will default to
        the vtkXMLDataElement default encoding type (see
        vtkXMLDataElement::AttributeEncoding).
        """
        ...
    
    def GetAttributesEncodingMaxValue(self):
        """
        V.GetAttributesEncodingMaxValue() -> int
        C++: virtual int GetAttributesEncodingMaxValue()
        
        Get/Set the character encoding that will be used to set the
        attributes's encoding type of each vtkXMLDataElement created by
        this parser (i.e., the data element attributes will use that
        encoding internally). If set to VTK_ENCODING_NONE (default), the
        attribute encoding type will not be changed and will default to
        the vtkXMLDataElement default encoding type (see
        vtkXMLDataElement::AttributeEncoding).
        """
        ...
    
    def GetAttributesEncodingMinValue(self):
        """
        V.GetAttributesEncodingMinValue() -> int
        C++: virtual int GetAttributesEncodingMinValue()
        
        Get/Set the character encoding that will be used to set the
        attributes's encoding type of each vtkXMLDataElement created by
        this parser (i.e., the data element attributes will use that
        encoding internally). If set to VTK_ENCODING_NONE (default), the
        attribute encoding type will not be changed and will default to
        the vtkXMLDataElement default encoding type (see
        vtkXMLDataElement::AttributeEncoding).
        """
        ...
    
    def GetCompressor(self):
        """
        V.GetCompressor() -> vtkDataCompressor
        C++: virtual vtkDataCompressor *GetCompressor()
        
        Get/Set the compressor used to decompress binary and appended
        data after reading from the file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetProgress(self):
        """
        V.GetProgress() -> float
        C++: virtual float GetProgress()
        
        Get/Set progress of reading data.  This may be checked by a
        progress event observer.
        """
        ...
    
    def GetRootElement(self):
        """
        V.GetRootElement() -> vtkXMLDataElement
        C++: vtkXMLDataElement *GetRootElement()
        
        Get the root element from the XML document.
        """
        ...
    
    def GetWordTypeSize(self, p_int):
        """
        V.GetWordTypeSize(int) -> int
        C++: size_t GetWordTypeSize(int wordType)
        
        Get the size of a word of the given type.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLDataParser
        C++: vtkXMLDataParser *NewInstance()
        """
        ...
    
    def Parse(self):
        """
        V.Parse() -> int
        C++: int Parse() override;
        
        Parse the XML input and check that the file is safe to read.
        Returns 1 for okay, 0 for error.
        """
        ...
    
    def ReadAppendedData(self, p_int, void, p_int_1, p_int_2, p_int_3):
        """
        V.ReadAppendedData(int, void, int, int, int) -> int
        C++: size_t ReadAppendedData(vtkTypeInt64 offset, void *buffer,
            vtkTypeUInt64 startWord, size_t numWords, int wordType)
        V.ReadAppendedData(int, string, int, int) -> int
        C++: size_t ReadAppendedData(vtkTypeInt64 offset, char *buffer,
            vtkTypeUInt64 startWord, size_t numWords)
        
        Read from an appended data section starting at the given appended
        data offset.  Returns the number of words read.
        """
        ...
    
    def ReadAsciiData(self, void, p_int, p_int_1, p_int_2):
        """
        V.ReadAsciiData(void, int, int, int) -> int
        C++: size_t ReadAsciiData(void *buffer, vtkTypeUInt64 startWord,
            size_t numWords, int wordType)
        
        Read from an ascii data section starting at the current position
        in the stream.  Returns the number of words read.
        """
        ...
    
    def ReadBinaryData(self, void, p_int, p_int_1, p_int_2):
        """
        V.ReadBinaryData(void, int, int, int) -> int
        C++: size_t ReadBinaryData(void *buffer, vtkTypeUInt64 startWord,
            size_t maxWords, int wordType)
        
        Read from a data section starting at the current position in the
        stream.  Returns the number of words read.
        """
        ...
    
    def ReadInlineData(self, vtkXMLDataElement, p_int, void, p_int_1, p_int_2, p_int_3):
        """
        V.ReadInlineData(vtkXMLDataElement, int, void, int, int, int)
            -> int
        C++: size_t ReadInlineData(vtkXMLDataElement *element,
            int isAscii, void *buffer, vtkTypeUInt64 startWord,
            size_t numWords, int wordType)
        V.ReadInlineData(vtkXMLDataElement, int, string, int, int) -> int
        C++: size_t ReadInlineData(vtkXMLDataElement *element,
            int isAscii, char *buffer, vtkTypeUInt64 startWord,
            size_t numWords)
        
        Read inline data from inside the given element.  Returns the
        number of words read.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLDataParser
        C++: static vtkXMLDataParser *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAbort(self, p_int):
        """
        V.SetAbort(int)
        C++: virtual void SetAbort(int _arg)
        
        Get/Set flag to abort reading of data.  This may be set by a
        progress event observer.
        """
        ...
    
    def SetAttributesEncoding(self, p_int):
        """
        V.SetAttributesEncoding(int)
        C++: virtual void SetAttributesEncoding(int _arg)
        
        Get/Set the character encoding that will be used to set the
        attributes's encoding type of each vtkXMLDataElement created by
        this parser (i.e., the data element attributes will use that
        encoding internally). If set to VTK_ENCODING_NONE (default), the
        attribute encoding type will not be changed and will default to
        the vtkXMLDataElement default encoding type (see
        vtkXMLDataElement::AttributeEncoding).
        """
        ...
    
    def SetCompressor(self, vtkDataCompressor):
        """
        V.SetCompressor(vtkDataCompressor)
        C++: virtual void SetCompressor(vtkDataCompressor *)
        
        Get/Set the compressor used to decompress binary and appended
        data after reading from the file.
        """
        ...
    
    def SetProgress(self, p_float):
        """
        V.SetProgress(float)
        C++: virtual void SetProgress(float _arg)
        
        Get/Set progress of reading data.  This may be checked by a
        progress event observer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BigEndian = ...
    LittleEndian = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkXMLUtilities(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkXMLUtilities - XML utilities.
    
    Superclass: vtkObject
    
    vtkXMLUtilities provides XML-related convenience functions.
    @sa
    vtkXMLDataElement
    """
    def FactorElements(self, vtkXMLDataElement):
        """
        V.FactorElements(vtkXMLDataElement)
        C++: static void FactorElements(vtkXMLDataElement *tree)
        
        Factor and unfactor a tree. This operation looks for duplicate
        elements in the tree, and replace them with references to a pool
        of elements. Unfactoring a non-factored element is harmless.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkXMLUtilities
        C++: vtkXMLUtilities *NewInstance()
        """
        ...
    
    def ReadElementFromFile(self, string, p_int):
        """
        V.ReadElementFromFile(string, int) -> vtkXMLDataElement
        C++: static vtkXMLDataElement *ReadElementFromFile(
            const char *filename, int encoding=VTK_ENCODING_NONE)
        
        Read a vtkXMLDataElement from a stream, string or file. The
        'encoding' parameter will be used to set the internal encoding of
        the attributes of the data elements created by those functions
        (conversion from the XML stream encoding to that new encoding
        will be performed automatically). If set to VTK_ENCODING_NONE,
        the encoding won't be changed and will default to the default
        vtkXMLDataElement encoding. Return the root element on success,
        nullptr otherwise. Note that you have to call Delete() on the
        element returned by that function to ensure it is freed properly.
        """
        ...
    
    def ReadElementFromString(self, string, p_int):
        """
        V.ReadElementFromString(string, int) -> vtkXMLDataElement
        C++: static vtkXMLDataElement *ReadElementFromString(
            const char *str, int encoding=VTK_ENCODING_NONE)
        
        Read a vtkXMLDataElement from a stream, string or file. The
        'encoding' parameter will be used to set the internal encoding of
        the attributes of the data elements created by those functions
        (conversion from the XML stream encoding to that new encoding
        will be performed automatically). If set to VTK_ENCODING_NONE,
        the encoding won't be changed and will default to the default
        vtkXMLDataElement encoding. Return the root element on success,
        nullptr otherwise. Note that you have to call Delete() on the
        element returned by that function to ensure it is freed properly.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkXMLUtilities
        C++: static vtkXMLUtilities *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def UnFactorElements(self, vtkXMLDataElement):
        """
        V.UnFactorElements(vtkXMLDataElement)
        C++: static void UnFactorElements(vtkXMLDataElement *tree)
        
        Factor and unfactor a tree. This operation looks for duplicate
        elements in the tree, and replace them with references to a pool
        of elements. Unfactoring a non-factored element is harmless.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
