"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkAreaLayoutStrategy(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAreaLayoutStrategy - abstract superclass for all area layout
    strategies
    
    Superclass: vtkObject
    
    All subclasses of this class perform a area layout on a tree. This
    involves assigning a region to each vertex in the tree, and placing
    that information in a data array with four components per tuple
    representing (innerRadius, outerRadius, startAngle, endAngle).
    
    Instances of subclasses of this class may be assigned as the layout
    strategy to vtkAreaLayout
    
    @par Thanks: Thanks to Jason Shepherd from Sandia National
    Laboratories for help developing this class.
    """
    def FindVertex(self, vtkTree, vtkDataArray, p_float=..., p_float=...):
        """
        V.FindVertex(vtkTree, vtkDataArray, [float, float]) -> int
        C++: virtual vtkIdType FindVertex(vtkTree *tree,
            vtkDataArray *array, float pnt[2])
        
        Returns the vertex id that contains pnt (or -1 if no one contains
        it)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetShrinkPercentage(self):
        """
        V.GetShrinkPercentage() -> float
        C++: virtual double GetShrinkPercentage()
        """
        ...
    
    def GetShrinkPercentageMaxValue(self):
        """
        V.GetShrinkPercentageMaxValue() -> float
        C++: virtual double GetShrinkPercentageMaxValue()
        """
        ...
    
    def GetShrinkPercentageMinValue(self):
        """
        V.GetShrinkPercentageMinValue() -> float
        C++: virtual double GetShrinkPercentageMinValue()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self, vtkTree, vtkDataArray, vtkDataArray_1):
        """
        V.Layout(vtkTree, vtkDataArray, vtkDataArray)
        C++: virtual void Layout(vtkTree *inputTree,
            vtkDataArray *areaArray, vtkDataArray *sizeArray)
        
        Perform the layout of the input tree, and store the sector bounds
        of each vertex as a tuple in a data array. For radial layout,
        this is (innerRadius, outerRadius, startAngle, endAngle). For
        rectangular layout, this is (xmin, xmax, ymin, ymax).
        
        * The sizeArray may be nullptr, or may contain the desired
        * size of each vertex in the tree.
        """
        ...
    
    def LayoutEdgePoints(self, vtkTree, vtkDataArray, vtkDataArray_1, vtkTree_1):
        """
        V.LayoutEdgePoints(vtkTree, vtkDataArray, vtkDataArray, vtkTree)
        C++: virtual void LayoutEdgePoints(vtkTree *inputTree,
            vtkDataArray *areaArray, vtkDataArray *sizeArray,
            vtkTree *edgeLayoutTree)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAreaLayoutStrategy
        C++: vtkAreaLayoutStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAreaLayoutStrategy
        C++: static vtkAreaLayoutStrategy *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetShrinkPercentage(self, p_float):
        """
        V.SetShrinkPercentage(float)
        C++: virtual void SetShrinkPercentage(double _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


