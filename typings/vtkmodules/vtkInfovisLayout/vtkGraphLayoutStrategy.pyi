"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkGraphLayoutStrategy(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGraphLayoutStrategy - abstract superclass for all graph layout
    strategies
    
    Superclass: vtkObject
    
    All graph layouts should subclass from this class. 
    vtkGraphLayoutStrategy works as a plug-in to the vtkGraphLayout
    algorithm.  The Layout() function should perform some reasonable
    "chunk" of the layout. This allows the user to be able to see the
    progress of the layout. Use IsLayoutComplete() to tell the user when
    there is no more layout to perform.
    
    @par Thanks: Thanks to Brian Wylie from Sandia National Laboratories
    for adding incremental layout capabilities.
    """
    def GetEdgeWeightField(self):
        """
        V.GetEdgeWeightField() -> string
        C++: virtual char *GetEdgeWeightField()
        
        Set/Get the field to use for the edge weights.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWeightEdges(self):
        """
        V.GetWeightEdges() -> bool
        C++: virtual bool GetWeightEdges()
        
        Whether to use edge weights in the layout or not.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize()
        
        This method allows the layout strategy to do initialization of
        data structures or whatever else it might want to do.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsLayoutComplete(self):
        """
        V.IsLayoutComplete() -> int
        C++: virtual int IsLayoutComplete()
        
        If your concrete class is iterative than you should overload
        IsLayoutComplete() otherwise it simply returns 1 by default;
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: virtual void Layout()
        
        This is the layout method where the graph that was set in
        SetGraph() is laid out. The method can either entirely layout the
        graph or iteratively lay out the graph. If you have an iterative
        layout please implement the IsLayoutComplete() method.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphLayoutStrategy
        C++: vtkGraphLayoutStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphLayoutStrategy
        C++: static vtkGraphLayoutStrategy *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEdgeWeightField(self, string):
        """
        V.SetEdgeWeightField(string)
        C++: virtual void SetEdgeWeightField(const char *field)
        
        Set/Get the field to use for the edge weights.
        """
        ...
    
    def SetGraph(self, vtkGraph):
        """
        V.SetGraph(vtkGraph)
        C++: virtual void SetGraph(vtkGraph *graph)
        
        Setting the graph for the layout strategy
        """
        ...
    
    def SetWeightEdges(self, bool):
        """
        V.SetWeightEdges(bool)
        C++: virtual void SetWeightEdges(bool state)
        
        Whether to use edge weights in the layout or not.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


