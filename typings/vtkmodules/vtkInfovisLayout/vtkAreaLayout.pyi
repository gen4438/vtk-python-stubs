"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAreaLayout(__vtkmodules_vtkCommonExecutionModel.vtkTreeAlgorithm):
    """
    vtkAreaLayout - layout a vtkTree into a tree map
    
    Superclass: vtkTreeAlgorithm
    
    vtkAreaLayout assigns sector regions to each vertex in the tree,
    creating a tree ring.  The data is added as a data array with four
    components per tuple representing the location and size of the sector
    using the format (StartAngle, EndAngle, innerRadius, outerRadius).
    
    This algorithm relies on a helper class to perform the actual layout.
    This helper class is a subclass of vtkAreaLayoutStrategy.
    
    @par Thanks: Thanks to Jason Shepherd from Sandia National
    Laboratories for help developing this class.
    """
    def EdgeRoutingPointsOff(self):
        """
        V.EdgeRoutingPointsOff()
        C++: virtual void EdgeRoutingPointsOff()
        
        Whether to output a second output tree with vertex locations
        appropriate for routing bundled edges. Default is on.
        """
        ...
    
    def EdgeRoutingPointsOn(self):
        """
        V.EdgeRoutingPointsOn()
        C++: virtual void EdgeRoutingPointsOn()
        
        Whether to output a second output tree with vertex locations
        appropriate for routing bundled edges. Default is on.
        """
        ...
    
    def FindVertex(self, p_float=..., p_float=...):
        """
        V.FindVertex([float, float]) -> int
        C++: vtkIdType FindVertex(float pnt[2])
        
        Get the vertex whose area contains the point, or return -1 if no
        vertex area covers the point.
        """
        ...
    
    def GetAreaArrayName(self):
        """
        V.GetAreaArrayName() -> string
        C++: virtual char *GetAreaArrayName()
        
        The name for the array created for the area for each vertex. The
        rectangles are stored in a quadruple float array (startAngle,
        endAngle, innerRadius, outerRadius). For rectangular layouts,
        this is (minx, maxx, miny, maxy).
        """
        ...
    
    def GetBoundingArea(self, p_int, *float):
        """
        V.GetBoundingArea(int, [float, ...])
        C++: void GetBoundingArea(vtkIdType id, float *sinfo)
        
        The bounding area information for a certain vertex id.
        """
        ...
    
    def GetEdgeRoutingPoints(self):
        """
        V.GetEdgeRoutingPoints() -> bool
        C++: virtual bool GetEdgeRoutingPoints()
        
        Whether to output a second output tree with vertex locations
        appropriate for routing bundled edges. Default is on.
        """
        ...
    
    def GetLayoutStrategy(self):
        """
        V.GetLayoutStrategy() -> vtkAreaLayoutStrategy
        C++: virtual vtkAreaLayoutStrategy *GetLayoutStrategy()
        
        The strategy to use when laying out the tree map.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the modification time of the layout algorithm.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAreaLayout
        C++: vtkAreaLayout *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAreaLayout
        C++: static vtkAreaLayout *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAreaArrayName(self, string):
        """
        V.SetAreaArrayName(string)
        C++: virtual void SetAreaArrayName(const char *_arg)
        
        The name for the array created for the area for each vertex. The
        rectangles are stored in a quadruple float array (startAngle,
        endAngle, innerRadius, outerRadius). For rectangular layouts,
        this is (minx, maxx, miny, maxy).
        """
        ...
    
    def SetEdgeRoutingPoints(self, bool):
        """
        V.SetEdgeRoutingPoints(bool)
        C++: virtual void SetEdgeRoutingPoints(bool _arg)
        
        Whether to output a second output tree with vertex locations
        appropriate for routing bundled edges. Default is on.
        """
        ...
    
    def SetLayoutStrategy(self, vtkAreaLayoutStrategy):
        """
        V.SetLayoutStrategy(vtkAreaLayoutStrategy)
        C++: void SetLayoutStrategy(vtkAreaLayoutStrategy *strategy)
        
        The strategy to use when laying out the tree map.
        """
        ...
    
    def SetSizeArrayName(self, string):
        """
        V.SetSizeArrayName(string)
        C++: virtual void SetSizeArrayName(const char *name)
        
        The array name to use for retrieving the relative size of each
        vertex. If this array is not found, use constant size for each
        vertex.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


