"""
This type stub file was generated by pyright.
"""

from .vtkGraphLayoutStrategy import vtkGraphLayoutStrategy

class vtkAttributeClustering2DLayoutStrategy(vtkGraphLayoutStrategy):
    """
    vtkAttributeClustering2DLayoutStrategy - a simple fast 2D graph layout
    
    Superclass: vtkGraphLayoutStrategy
    
    This class is a density grid based force directed layout strategy.
    Also please note that 'fast' is relative to quite slow. :) The layout
    running time is O(V+E) with an extremely high constant.@par Thanks:
    Thanks to Godzilla for not eating my computer so that this class
    could be written.
    """
    def GetCoolDownRate(self):
        """
        V.GetCoolDownRate() -> float
        C++: virtual double GetCoolDownRate()
        
        Set/Get the Cool-down rate. The higher this number is, the longer
        it will take to "cool-down", and thus, the more the graph will be
        modified. The default is '10' for no particular reason. Note: The
        strong recommendation is that you do not change this parameter.
        :)
        """
        ...
    
    def GetCoolDownRateMaxValue(self):
        """
        V.GetCoolDownRateMaxValue() -> float
        C++: virtual double GetCoolDownRateMaxValue()
        
        Set/Get the Cool-down rate. The higher this number is, the longer
        it will take to "cool-down", and thus, the more the graph will be
        modified. The default is '10' for no particular reason. Note: The
        strong recommendation is that you do not change this parameter.
        :)
        """
        ...
    
    def GetCoolDownRateMinValue(self):
        """
        V.GetCoolDownRateMinValue() -> float
        C++: virtual double GetCoolDownRateMinValue()
        
        Set/Get the Cool-down rate. The higher this number is, the longer
        it will take to "cool-down", and thus, the more the graph will be
        modified. The default is '10' for no particular reason. Note: The
        strong recommendation is that you do not change this parameter.
        :)
        """
        ...
    
    def GetInitialTemperature(self):
        """
        V.GetInitialTemperature() -> float
        C++: virtual float GetInitialTemperature()
        
        Set the initial temperature.  The temperature default is '5' for
        no particular reason Note: The strong recommendation is that you
        do not change this parameter. :)
        """
        ...
    
    def GetInitialTemperatureMaxValue(self):
        """
        V.GetInitialTemperatureMaxValue() -> float
        C++: virtual float GetInitialTemperatureMaxValue()
        
        Set the initial temperature.  The temperature default is '5' for
        no particular reason Note: The strong recommendation is that you
        do not change this parameter. :)
        """
        ...
    
    def GetInitialTemperatureMinValue(self):
        """
        V.GetInitialTemperatureMinValue() -> float
        C++: virtual float GetInitialTemperatureMinValue()
        
        Set the initial temperature.  The temperature default is '5' for
        no particular reason Note: The strong recommendation is that you
        do not change this parameter. :)
        """
        ...
    
    def GetIterationsPerLayout(self):
        """
        V.GetIterationsPerLayout() -> int
        C++: virtual int GetIterationsPerLayout()
        
        Set/Get the number of iterations per layout. The only use for
        this ivar is for the application to do visualizations of the
        layout before it's complete. The default is '100' to match the
        default 'MaxNumberOfIterations' Note: Changing this parameter is
        just fine :)
        """
        ...
    
    def GetIterationsPerLayoutMaxValue(self):
        """
        V.GetIterationsPerLayoutMaxValue() -> int
        C++: virtual int GetIterationsPerLayoutMaxValue()
        
        Set/Get the number of iterations per layout. The only use for
        this ivar is for the application to do visualizations of the
        layout before it's complete. The default is '100' to match the
        default 'MaxNumberOfIterations' Note: Changing this parameter is
        just fine :)
        """
        ...
    
    def GetIterationsPerLayoutMinValue(self):
        """
        V.GetIterationsPerLayoutMinValue() -> int
        C++: virtual int GetIterationsPerLayoutMinValue()
        
        Set/Get the number of iterations per layout. The only use for
        this ivar is for the application to do visualizations of the
        layout before it's complete. The default is '100' to match the
        default 'MaxNumberOfIterations' Note: Changing this parameter is
        just fine :)
        """
        ...
    
    def GetMaxNumberOfIterations(self):
        """
        V.GetMaxNumberOfIterations() -> int
        C++: virtual int GetMaxNumberOfIterations()
        
        Set/Get the maximum number of iterations to be used. The higher
        this number, the more iterations through the algorithm is
        possible, and thus, the more the graph gets modified. The default
        is '100' for no particular reason Note: The strong recommendation
        is that you do not change this parameter. :)
        """
        ...
    
    def GetMaxNumberOfIterationsMaxValue(self):
        """
        V.GetMaxNumberOfIterationsMaxValue() -> int
        C++: virtual int GetMaxNumberOfIterationsMaxValue()
        
        Set/Get the maximum number of iterations to be used. The higher
        this number, the more iterations through the algorithm is
        possible, and thus, the more the graph gets modified. The default
        is '100' for no particular reason Note: The strong recommendation
        is that you do not change this parameter. :)
        """
        ...
    
    def GetMaxNumberOfIterationsMinValue(self):
        """
        V.GetMaxNumberOfIterationsMinValue() -> int
        C++: virtual int GetMaxNumberOfIterationsMinValue()
        
        Set/Get the maximum number of iterations to be used. The higher
        this number, the more iterations through the algorithm is
        possible, and thus, the more the graph gets modified. The default
        is '100' for no particular reason Note: The strong recommendation
        is that you do not change this parameter. :)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRandomSeed(self):
        """
        V.GetRandomSeed() -> int
        C++: virtual int GetRandomSeed()
        
        Seed the random number generator used to jitter point positions.
        This has a significant effect on their final positions when the
        layout is complete.
        """
        ...
    
    def GetRandomSeedMaxValue(self):
        """
        V.GetRandomSeedMaxValue() -> int
        C++: virtual int GetRandomSeedMaxValue()
        
        Seed the random number generator used to jitter point positions.
        This has a significant effect on their final positions when the
        layout is complete.
        """
        ...
    
    def GetRandomSeedMinValue(self):
        """
        V.GetRandomSeedMinValue() -> int
        C++: virtual int GetRandomSeedMinValue()
        
        Seed the random number generator used to jitter point positions.
        This has a significant effect on their final positions when the
        layout is complete.
        """
        ...
    
    def GetRestDistance(self):
        """
        V.GetRestDistance() -> float
        C++: virtual float GetRestDistance()
        
        Manually set the resting distance. Otherwise the distance is
        computed automatically.
        """
        ...
    
    def GetVertexAttribute(self):
        """
        V.GetVertexAttribute() -> string
        C++: virtual char *GetVertexAttribute()
        
        The name of the array on the vertices, whose values will be used
        for determining clusters.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize() override;
        
        This strategy sets up some data structures for faster processing
        of each Layout() call
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsLayoutComplete(self):
        """
        V.IsLayoutComplete() -> int
        C++: int IsLayoutComplete() override;
        
        I'm an iterative layout so this method lets the caller know if
        I'm done laying out the graph
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: void Layout() override;
        
        This is the layout method where the graph that was set in
        SetGraph() is laid out. The method can either entirely layout the
        graph or iteratively lay out the graph. If you have an iterative
        layout please implement the IsLayoutComplete() method.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAttributeClustering2DLayoutStrategy
        C++: vtkAttributeClustering2DLayoutStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkAttributeClustering2DLayoutStrategy
        C++: static vtkAttributeClustering2DLayoutStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCoolDownRate(self, p_float):
        """
        V.SetCoolDownRate(float)
        C++: virtual void SetCoolDownRate(double _arg)
        
        Set/Get the Cool-down rate. The higher this number is, the longer
        it will take to "cool-down", and thus, the more the graph will be
        modified. The default is '10' for no particular reason. Note: The
        strong recommendation is that you do not change this parameter.
        :)
        """
        ...
    
    def SetInitialTemperature(self, p_float):
        """
        V.SetInitialTemperature(float)
        C++: virtual void SetInitialTemperature(float _arg)
        
        Set the initial temperature.  The temperature default is '5' for
        no particular reason Note: The strong recommendation is that you
        do not change this parameter. :)
        """
        ...
    
    def SetIterationsPerLayout(self, p_int):
        """
        V.SetIterationsPerLayout(int)
        C++: virtual void SetIterationsPerLayout(int _arg)
        
        Set/Get the number of iterations per layout. The only use for
        this ivar is for the application to do visualizations of the
        layout before it's complete. The default is '100' to match the
        default 'MaxNumberOfIterations' Note: Changing this parameter is
        just fine :)
        """
        ...
    
    def SetMaxNumberOfIterations(self, p_int):
        """
        V.SetMaxNumberOfIterations(int)
        C++: virtual void SetMaxNumberOfIterations(int _arg)
        
        Set/Get the maximum number of iterations to be used. The higher
        this number, the more iterations through the algorithm is
        possible, and thus, the more the graph gets modified. The default
        is '100' for no particular reason Note: The strong recommendation
        is that you do not change this parameter. :)
        """
        ...
    
    def SetRandomSeed(self, p_int):
        """
        V.SetRandomSeed(int)
        C++: virtual void SetRandomSeed(int _arg)
        
        Seed the random number generator used to jitter point positions.
        This has a significant effect on their final positions when the
        layout is complete.
        """
        ...
    
    def SetRestDistance(self, p_float):
        """
        V.SetRestDistance(float)
        C++: virtual void SetRestDistance(float _arg)
        
        Manually set the resting distance. Otherwise the distance is
        computed automatically.
        """
        ...
    
    def SetVertexAttribute(self, string):
        """
        V.SetVertexAttribute(string)
        C++: void SetVertexAttribute(const char *)
        
        The name of the array on the vertices, whose values will be used
        for determining clusters.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


