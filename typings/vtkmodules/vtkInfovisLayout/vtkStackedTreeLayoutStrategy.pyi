"""
This type stub file was generated by pyright.
"""

from .vtkAreaLayoutStrategy import vtkAreaLayoutStrategy

class vtkStackedTreeLayoutStrategy(vtkAreaLayoutStrategy):
    """
    vtkStackedTreeLayoutStrategy - lays out tree in stacked boxes or rings
    
    Superclass: vtkAreaLayoutStrategy
    
    Performs a tree ring layout or "icicle" layout on a tree. This
    involves assigning a sector region to each vertex in the tree, and
    placing that information in a data array with four components per
    tuple representing (innerRadius, outerRadius, startAngle, endAngle).
    
    This class may be assigned as the layout strategy to vtkAreaLayout.
    
    @par Thanks: Thanks to Jason Shepherd from Sandia National
    Laboratories for help developing this class.
    """
    def FindVertex(self, vtkTree, vtkDataArray, p_float=..., p_float=...):
        """
        V.FindVertex(vtkTree, vtkDataArray, [float, float]) -> int
        C++: vtkIdType FindVertex(vtkTree *tree, vtkDataArray *array,
            float pnt[2]) override;
        
        Returns the vertex id that contains pnt (or -1 if no one contains
        it).
        """
        ...
    
    def GetInteriorLogSpacingValue(self):
        """
        V.GetInteriorLogSpacingValue() -> float
        C++: virtual double GetInteriorLogSpacingValue()
        
        The spacing of tree levels in the edge routing tree. Levels near
        zero give more space to levels near the root, while levels near
        one (the default) create evenly-spaced levels. Levels above one
        give more space to levels near the leaves.
        """
        ...
    
    def GetInteriorRadius(self):
        """
        V.GetInteriorRadius() -> float
        C++: virtual double GetInteriorRadius()
        
        Define the tree ring's interior radius.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReverse(self):
        """
        V.GetReverse() -> bool
        C++: virtual bool GetReverse()
        
        Define whether to reverse the order of the tree stacks from low
        to high.
        """
        ...
    
    def GetRingThickness(self):
        """
        V.GetRingThickness() -> float
        C++: virtual double GetRingThickness()
        
        Define the thickness of each of the tree rings.
        """
        ...
    
    def GetRootEndAngle(self):
        """
        V.GetRootEndAngle() -> float
        C++: virtual double GetRootEndAngle()
        
        Define the end angle for the root node. NOTE: It is assumed that
        the root end angle is greater than the root start angle and
        subtends no more than 360 degrees.
        """
        ...
    
    def GetRootStartAngle(self):
        """
        V.GetRootStartAngle() -> float
        C++: virtual double GetRootStartAngle()
        
        Define the start angle for the root node. NOTE: It is assumed
        that the root end angle is greater than the root start angle and
        subtends no more than 360 degrees.
        """
        ...
    
    def GetUseRectangularCoordinates(self):
        """
        V.GetUseRectangularCoordinates() -> bool
        C++: virtual bool GetUseRectangularCoordinates()
        
        Define whether or not rectangular coordinates are being used (as
        opposed to polar coordinates).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self, vtkTree, vtkDataArray, vtkDataArray_1):
        """
        V.Layout(vtkTree, vtkDataArray, vtkDataArray)
        C++: void Layout(vtkTree *inputTree, vtkDataArray *sectorArray,
            vtkDataArray *sizeArray) override;
        
        Perform the layout of the input tree, and store the sector bounds
        of each vertex as a tuple (innerRadius, outerRadius, startAngle,
        endAngle) in a data array.
        """
        ...
    
    def LayoutEdgePoints(self, vtkTree, vtkDataArray, vtkDataArray_1, vtkTree_1):
        """
        V.LayoutEdgePoints(vtkTree, vtkDataArray, vtkDataArray, vtkTree)
        C++: void LayoutEdgePoints(vtkTree *inputTree,
            vtkDataArray *sectorArray, vtkDataArray *sizeArray,
            vtkTree *edgeRoutingTree) override;
        
        Fill edgeRoutingTree with points suitable for routing edges of an
        overlaid graph.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStackedTreeLayoutStrategy
        C++: vtkStackedTreeLayoutStrategy *NewInstance()
        """
        ...
    
    def ReverseOff(self):
        """
        V.ReverseOff()
        C++: virtual void ReverseOff()
        
        Define whether to reverse the order of the tree stacks from low
        to high.
        """
        ...
    
    def ReverseOn(self):
        """
        V.ReverseOn()
        C++: virtual void ReverseOn()
        
        Define whether to reverse the order of the tree stacks from low
        to high.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStackedTreeLayoutStrategy
        C++: static vtkStackedTreeLayoutStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInteriorLogSpacingValue(self, p_float):
        """
        V.SetInteriorLogSpacingValue(float)
        C++: virtual void SetInteriorLogSpacingValue(double _arg)
        
        The spacing of tree levels in the edge routing tree. Levels near
        zero give more space to levels near the root, while levels near
        one (the default) create evenly-spaced levels. Levels above one
        give more space to levels near the leaves.
        """
        ...
    
    def SetInteriorRadius(self, p_float):
        """
        V.SetInteriorRadius(float)
        C++: virtual void SetInteriorRadius(double _arg)
        
        Define the tree ring's interior radius.
        """
        ...
    
    def SetReverse(self, bool):
        """
        V.SetReverse(bool)
        C++: virtual void SetReverse(bool _arg)
        
        Define whether to reverse the order of the tree stacks from low
        to high.
        """
        ...
    
    def SetRingThickness(self, p_float):
        """
        V.SetRingThickness(float)
        C++: virtual void SetRingThickness(double _arg)
        
        Define the thickness of each of the tree rings.
        """
        ...
    
    def SetRootEndAngle(self, p_float):
        """
        V.SetRootEndAngle(float)
        C++: virtual void SetRootEndAngle(double _arg)
        
        Define the end angle for the root node. NOTE: It is assumed that
        the root end angle is greater than the root start angle and
        subtends no more than 360 degrees.
        """
        ...
    
    def SetRootStartAngle(self, p_float):
        """
        V.SetRootStartAngle(float)
        C++: virtual void SetRootStartAngle(double _arg)
        
        Define the start angle for the root node. NOTE: It is assumed
        that the root end angle is greater than the root start angle and
        subtends no more than 360 degrees.
        """
        ...
    
    def SetUseRectangularCoordinates(self, bool):
        """
        V.SetUseRectangularCoordinates(bool)
        C++: virtual void SetUseRectangularCoordinates(bool _arg)
        
        Define whether or not rectangular coordinates are being used (as
        opposed to polar coordinates).
        """
        ...
    
    def UseRectangularCoordinatesOff(self):
        """
        V.UseRectangularCoordinatesOff()
        C++: virtual void UseRectangularCoordinatesOff()
        
        Define whether or not rectangular coordinates are being used (as
        opposed to polar coordinates).
        """
        ...
    
    def UseRectangularCoordinatesOn(self):
        """
        V.UseRectangularCoordinatesOn()
        C++: virtual void UseRectangularCoordinatesOn()
        
        Define whether or not rectangular coordinates are being used (as
        opposed to polar coordinates).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


