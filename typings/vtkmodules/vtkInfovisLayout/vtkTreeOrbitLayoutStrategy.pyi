"""
This type stub file was generated by pyright.
"""

from .vtkGraphLayoutStrategy import vtkGraphLayoutStrategy

class vtkTreeOrbitLayoutStrategy(vtkGraphLayoutStrategy):
    """
    vtkTreeOrbitLayoutStrategy - hierarchical orbital layout
    
    Superclass: vtkGraphLayoutStrategy
    
    Assigns points to the nodes of a tree to an orbital layout. Each
    parent is orbited by its children, recursively.
    
    @par Thanks: Thanks to the galaxy for inspiring this layout strategy.
    """
    def GetChildRadiusFactor(self):
        """
        V.GetChildRadiusFactor() -> float
        C++: virtual double GetChildRadiusFactor()
        
        This is a magic number right now. Controls the radius of the
        child layout, all of this should be fixed at some point with a
        more logical layout. Defaults to .5 :)
        """
        ...
    
    def GetLeafSpacing(self):
        """
        V.GetLeafSpacing() -> float
        C++: virtual double GetLeafSpacing()
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def GetLeafSpacingMaxValue(self):
        """
        V.GetLeafSpacingMaxValue() -> float
        C++: virtual double GetLeafSpacingMaxValue()
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def GetLeafSpacingMinValue(self):
        """
        V.GetLeafSpacingMinValue() -> float
        C++: virtual double GetLeafSpacingMinValue()
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def GetLogSpacingValue(self):
        """
        V.GetLogSpacingValue() -> float
        C++: virtual double GetLogSpacingValue()
        
        The spacing of orbital levels. Levels near zero give more space
        to levels near the root, while levels near one (the default)
        create evenly-spaced levels. Levels above one give more space to
        levels near the leaves.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: void Layout() override;
        
        Perform the orbital layout.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeOrbitLayoutStrategy
        C++: vtkTreeOrbitLayoutStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeOrbitLayoutStrategy
        C++: static vtkTreeOrbitLayoutStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetChildRadiusFactor(self, p_float):
        """
        V.SetChildRadiusFactor(float)
        C++: virtual void SetChildRadiusFactor(double _arg)
        
        This is a magic number right now. Controls the radius of the
        child layout, all of this should be fixed at some point with a
        more logical layout. Defaults to .5 :)
        """
        ...
    
    def SetLeafSpacing(self, p_float):
        """
        V.SetLeafSpacing(float)
        C++: virtual void SetLeafSpacing(double _arg)
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def SetLogSpacingValue(self, p_float):
        """
        V.SetLogSpacingValue(float)
        C++: virtual void SetLogSpacingValue(double _arg)
        
        The spacing of orbital levels. Levels near zero give more space
        to levels near the root, while levels near one (the default)
        create evenly-spaced levels. Levels above one give more space to
        levels near the leaves.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


