"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkKCoreLayout(__vtkmodules_vtkCommonExecutionModel.vtkGraphAlgorithm):
    """
    vtkKCoreLayout - Produces a layout for a graph labeled with K-Core
                           information.
    
    Superclass: vtkGraphAlgorithm
    
    vtkKCoreLayout creates coordinates for each vertex that can be used
    to perform a layout for a k-core view. Prerequisite:  Vertices must
    have an attribute array containing their
                   k-core number.  This layout is based on the algorithm
                   described in the paper: "k-core decomposition: a tool
                   for the visualization of large scale networks", by
                   Ignacio Alvarez-Hamelin et. al.
    
    
                   This graph algorithm appends either polar coordinates
    or cartesian coordinates
                   as vertex attributes to the graph giving the position
    of the vertex in a layout.
                   Input graphs must have the k-core number assigned to
    each vertex (default
                   attribute array storing kcore numbers is "kcore").
    
    
                   Epsilon - this factor is used to adjust the amount
    vertices are 'pulled' out of
                             their default ring radius based on the
    number of neighbors in higher
                             cores.  Default=0.2
                   UnitRadius - Tweaks the base unit radius value. 
    Default=1.0
    
    
                   Still TODO: Still need to work on the
    connected-components within each shell and
                               associated layout issues with that.
    
    Input port 0: graph
    
    @par Thanks: Thanks to William McLendon from Sandia National
    Laboratories for providing this implementation.
    """
    def CartesianOff(self):
        """
        V.CartesianOff()
        C++: virtual void CartesianOff()
        
        Set whether or not to convert output to cartesian coordinates. 
        If false, coordinates will be returned in polar coordinates
        (radius, angle). Default: True
        """
        ...
    
    def CartesianOn(self):
        """
        V.CartesianOn()
        C++: virtual void CartesianOn()
        
        Set whether or not to convert output to cartesian coordinates. 
        If false, coordinates will be returned in polar coordinates
        (radius, angle). Default: True
        """
        ...
    
    def FillInputPortInformation(self, p_int, vtkInformation):
        """
        V.FillInputPortInformation(int, vtkInformation) -> int
        C++: int FillInputPortInformation(int port, vtkInformation *info)
            override;
        
        Fill the input port information objects for this algorithm.  This
        is invoked by the first call to GetInputPortInformation for each
        port so subclasses can specify what they can handle.
        """
        ...
    
    def GetCartesian(self):
        """
        V.GetCartesian() -> bool
        C++: virtual bool GetCartesian()
        
        Set whether or not to convert output to cartesian coordinates. 
        If false, coordinates will be returned in polar coordinates
        (radius, angle). Default: True
        """
        ...
    
    def GetCartesianCoordsXArrayName(self):
        """
        V.GetCartesianCoordsXArrayName() -> string
        C++: virtual char *GetCartesianCoordsXArrayName()
        
        Cartesian coordinates array name for the X coordinates. This is
        only used if OutputCartesianCoordinates is True. Default: coord_x
        """
        ...
    
    def GetCartesianCoordsYArrayName(self):
        """
        V.GetCartesianCoordsYArrayName() -> string
        C++: virtual char *GetCartesianCoordsYArrayName()
        
        Cartesian coordinates array name for the Y coordinates. This is
        only used if OutputCartesianCoordinates is True. Default: coord_y
        """
        ...
    
    def GetEpsilon(self):
        """
        V.GetEpsilon() -> float
        C++: virtual float GetEpsilon()
        
        Epsilon value used in the algorithm. Default = 0.2
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPolar(self):
        """
        V.GetPolar() -> bool
        C++: virtual bool GetPolar()
        
        Output polar coordinates for vertices if True.  Default column
        names are coord_radius, coord_angle. Default: False
        """
        ...
    
    def GetPolarCoordsAngleArrayName(self):
        """
        V.GetPolarCoordsAngleArrayName() -> string
        C++: virtual char *GetPolarCoordsAngleArrayName()
        
        Polar coordinates array name for angle values in radians. This is
        only used if OutputCartesianCoordinates is False. Default:
        coord_angle
        """
        ...
    
    def GetPolarCoordsRadiusArrayName(self):
        """
        V.GetPolarCoordsRadiusArrayName() -> string
        C++: virtual char *GetPolarCoordsRadiusArrayName()
        
        Polar coordinates array name for radius values. This is only used
        if OutputCartesianCoordinates is False. Default: coord_radius
        """
        ...
    
    def GetUnitRadius(self):
        """
        V.GetUnitRadius() -> float
        C++: virtual float GetUnitRadius()
        
        Unit Radius value used in the algorithm. Default = 1.0
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkKCoreLayout
        C++: vtkKCoreLayout *NewInstance()
        """
        ...
    
    def PolarOff(self):
        """
        V.PolarOff()
        C++: virtual void PolarOff()
        
        Output polar coordinates for vertices if True.  Default column
        names are coord_radius, coord_angle. Default: False
        """
        ...
    
    def PolarOn(self):
        """
        V.PolarOn()
        C++: virtual void PolarOn()
        
        Output polar coordinates for vertices if True.  Default column
        names are coord_radius, coord_angle. Default: False
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkKCoreLayout
        C++: static vtkKCoreLayout *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCartesian(self, bool):
        """
        V.SetCartesian(bool)
        C++: virtual void SetCartesian(bool _arg)
        
        Set whether or not to convert output to cartesian coordinates. 
        If false, coordinates will be returned in polar coordinates
        (radius, angle). Default: True
        """
        ...
    
    def SetCartesianCoordsXArrayName(self, string):
        """
        V.SetCartesianCoordsXArrayName(string)
        C++: virtual void SetCartesianCoordsXArrayName(const char *_arg)
        
        Cartesian coordinates array name for the X coordinates. This is
        only used if OutputCartesianCoordinates is True. Default: coord_x
        """
        ...
    
    def SetCartesianCoordsYArrayName(self, string):
        """
        V.SetCartesianCoordsYArrayName(string)
        C++: virtual void SetCartesianCoordsYArrayName(const char *_arg)
        
        Cartesian coordinates array name for the Y coordinates. This is
        only used if OutputCartesianCoordinates is True. Default: coord_y
        """
        ...
    
    def SetEpsilon(self, p_float):
        """
        V.SetEpsilon(float)
        C++: virtual void SetEpsilon(float _arg)
        
        Epsilon value used in the algorithm. Default = 0.2
        """
        ...
    
    def SetGraphConnection(self, vtkAlgorithmOutput):
        """
        V.SetGraphConnection(vtkAlgorithmOutput)
        C++: void SetGraphConnection(vtkAlgorithmOutput *)
        
        Convenience function provided for setting the graph input.
        """
        ...
    
    def SetKCoreLabelArrayName(self, string):
        """
        V.SetKCoreLabelArrayName(string)
        C++: virtual void SetKCoreLabelArrayName(const char *_arg)
        
        Set the name of the vertex attribute array storing k-core labels.
        Default: kcore
        """
        ...
    
    def SetPolar(self, bool):
        """
        V.SetPolar(bool)
        C++: virtual void SetPolar(bool _arg)
        
        Output polar coordinates for vertices if True.  Default column
        names are coord_radius, coord_angle. Default: False
        """
        ...
    
    def SetPolarCoordsAngleArrayName(self, string):
        """
        V.SetPolarCoordsAngleArrayName(string)
        C++: virtual void SetPolarCoordsAngleArrayName(const char *_arg)
        
        Polar coordinates array name for angle values in radians. This is
        only used if OutputCartesianCoordinates is False. Default:
        coord_angle
        """
        ...
    
    def SetPolarCoordsRadiusArrayName(self, string):
        """
        V.SetPolarCoordsRadiusArrayName(string)
        C++: virtual void SetPolarCoordsRadiusArrayName(const char *_arg)
        
        Polar coordinates array name for radius values. This is only used
        if OutputCartesianCoordinates is False. Default: coord_radius
        """
        ...
    
    def SetUnitRadius(self, p_float):
        """
        V.SetUnitRadius(float)
        C++: virtual void SetUnitRadius(float _arg)
        
        Unit Radius value used in the algorithm. Default = 1.0
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


