"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkGeoMath(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGeoMath - Useful geographic calculations
    
    Superclass: vtkObject
    
    vtkGeoMath provides some useful geographic calculations.
    """
    def DistanceSquared(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.DistanceSquared([float, float, float], [float, float, float])
            -> float
        C++: static double DistanceSquared(double pt0[3], double pt1[3])
        
        Returns the squared distance between two points.
        """
        ...
    
    def EarthRadiusMeters(self):
        """
        V.EarthRadiusMeters() -> float
        C++: static double EarthRadiusMeters()
        
        Returns the average radius of the earth in meters.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LongLatAltToRect(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.LongLatAltToRect([float, float, float], [float, float, float])
        C++: static void LongLatAltToRect(double lla[3], double rect[3])
        
        Converts a (longitude, latitude, altitude) triple to world
        coordinates where the center of the earth is at the origin. Units
        are in meters. Note that having altitude realtive to sea level
        causes issues.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGeoMath
        C++: vtkGeoMath *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGeoMath
        C++: static vtkGeoMath *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


