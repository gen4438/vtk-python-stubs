"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTreeMapLayout(__vtkmodules_vtkCommonExecutionModel.vtkTreeAlgorithm):
    """
    vtkTreeMapLayout - layout a vtkTree into a tree map
    
    Superclass: vtkTreeAlgorithm
    
    vtkTreeMapLayout assigns rectangular regions to each vertex in the
    tree, creating a tree map.  The data is added as a data array with
    four components per tuple representing the location and size of the
    rectangle using the format (Xmin, Xmax, Ymin, Ymax).
    
    This algorithm relies on a helper class to perform the actual layout.
    This helper class is a subclass of vtkTreeMapLayoutStrategy.
    
    @par Thanks: Thanks to Brian Wylie and Ken Moreland from Sandia
    National Laboratories for help developing this class.
    
    @par Thanks: Tree map concept comes from: Shneiderman, B. 1992. Tree
    visualization with tree-maps: 2-d space-filling approach. ACM Trans.
    Graph. 11, 1 (Jan. 1992), 92-99.
    """
    def FindVertex(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindVertex([float, float], [float, ...]) -> int
        C++: vtkIdType FindVertex(float pnt[2], float *binfo=nullptr)
        
        Returns the vertex id that contains pnt (or -1 if no one contains
        it)
        """
        ...
    
    def GetBoundingBox(self, p_int, *float):
        """
        V.GetBoundingBox(int, [float, ...])
        C++: void GetBoundingBox(vtkIdType id, float *binfo)
        
        Return the min and max 2D points of the vertex's bounding box
        """
        ...
    
    def GetLayoutStrategy(self):
        """
        V.GetLayoutStrategy() -> vtkTreeMapLayoutStrategy
        C++: virtual vtkTreeMapLayoutStrategy *GetLayoutStrategy()
        
        The strategy to use when laying out the tree map.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the modification time of the layout algorithm.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRectanglesFieldName(self):
        """
        V.GetRectanglesFieldName() -> string
        C++: virtual char *GetRectanglesFieldName()
        
        The field name to use for storing the rectangles for each vertex.
        The rectangles are stored in a quadruple float array (minX, maxX,
        minY, maxY).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeMapLayout
        C++: vtkTreeMapLayout *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeMapLayout
        C++: static vtkTreeMapLayout *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLayoutStrategy(self, vtkTreeMapLayoutStrategy):
        """
        V.SetLayoutStrategy(vtkTreeMapLayoutStrategy)
        C++: void SetLayoutStrategy(vtkTreeMapLayoutStrategy *strategy)
        
        The strategy to use when laying out the tree map.
        """
        ...
    
    def SetRectanglesFieldName(self, string):
        """
        V.SetRectanglesFieldName(string)
        C++: virtual void SetRectanglesFieldName(const char *_arg)
        
        The field name to use for storing the rectangles for each vertex.
        The rectangles are stored in a quadruple float array (minX, maxX,
        minY, maxY).
        """
        ...
    
    def SetSizeArrayName(self, string):
        """
        V.SetSizeArrayName(string)
        C++: virtual void SetSizeArrayName(const char *name)
        
        The array to use for the size of each vertex.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


