"""
This type stub file was generated by pyright.
"""

from .vtkGraphLayoutStrategy import vtkGraphLayoutStrategy

class vtkTreeLayoutStrategy(vtkGraphLayoutStrategy):
    """
    vtkTreeLayoutStrategy - hierarchical layout
    
    Superclass: vtkGraphLayoutStrategy
    
    Assigns points to the nodes of a tree in either a standard or radial
    layout. The standard layout places each level on a horizontal line,
    while the radial layout places each level on a concentric circle. You
    may specify the sweep angle of the tree which constrains the tree to
    be contained within a wedge. Also, you may indicate the log scale of
    the tree, which diminishes the length of arcs at lower levels of the
    tree. Values near zero give a large proportion of the space to the
    tree levels near the root, while values near one give nearly equal
    proportions of space to all tree levels.
    
    The user may also specify an array to use to indicate the distance
    from the root, either vertically (for standard layout) or radially
    (for radial layout).  You specify this with SetDistanceArrayName().
    
    If the input is not a tree but a general graph, this strategy first
    extracts a tree from the graph using a breadth-first search starting
    at vertex ID 0.
    """
    def GetAngle(self):
        """
        V.GetAngle() -> float
        C++: virtual double GetAngle()
        
        The sweep angle of the tree. For a standard tree layout, this
        should be between 0 and 180. For a radial tree layout, this can
        be between 0 and 360.
        """
        ...
    
    def GetAngleMaxValue(self):
        """
        V.GetAngleMaxValue() -> float
        C++: virtual double GetAngleMaxValue()
        
        The sweep angle of the tree. For a standard tree layout, this
        should be between 0 and 180. For a radial tree layout, this can
        be between 0 and 360.
        """
        ...
    
    def GetAngleMinValue(self):
        """
        V.GetAngleMinValue() -> float
        C++: virtual double GetAngleMinValue()
        
        The sweep angle of the tree. For a standard tree layout, this
        should be between 0 and 180. For a radial tree layout, this can
        be between 0 and 360.
        """
        ...
    
    def GetDistanceArrayName(self):
        """
        V.GetDistanceArrayName() -> string
        C++: virtual char *GetDistanceArrayName()
        
        Get/Set the array to use to determine the distance from the root.
        """
        ...
    
    def GetLeafSpacing(self):
        """
        V.GetLeafSpacing() -> float
        C++: virtual double GetLeafSpacing()
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def GetLeafSpacingMaxValue(self):
        """
        V.GetLeafSpacingMaxValue() -> float
        C++: virtual double GetLeafSpacingMaxValue()
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def GetLeafSpacingMinValue(self):
        """
        V.GetLeafSpacingMinValue() -> float
        C++: virtual double GetLeafSpacingMinValue()
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def GetLogSpacingValue(self):
        """
        V.GetLogSpacingValue() -> float
        C++: virtual double GetLogSpacingValue()
        
        The spacing of tree levels. Levels near zero give more space to
        levels near the root, while levels near one (the default) create
        evenly-spaced levels. Levels above one give more space to levels
        near the leaves.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRadial(self):
        """
        V.GetRadial() -> bool
        C++: virtual bool GetRadial()
        
        If set, the tree is laid out with levels on concentric circles
        around the root. If unset (default), the tree is laid out with
        levels on horizontal lines.
        """
        ...
    
    def GetReverseEdges(self):
        """
        V.GetReverseEdges() -> bool
        C++: virtual bool GetReverseEdges()
        
        If set and the input is not a tree but a general graph, the
        filter will reverse the edges on the graph before extracting a
        tree using breadth first search.
        """
        ...
    
    def GetRotation(self):
        """
        V.GetRotation() -> float
        C++: virtual double GetRotation()
        
        The amount of counter-clockwise rotation to apply after the
        layout.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: void Layout() override;
        
        Perform the tree layout.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTreeLayoutStrategy
        C++: vtkTreeLayoutStrategy *NewInstance()
        """
        ...
    
    def RadialOff(self):
        """
        V.RadialOff()
        C++: virtual void RadialOff()
        
        If set, the tree is laid out with levels on concentric circles
        around the root. If unset (default), the tree is laid out with
        levels on horizontal lines.
        """
        ...
    
    def RadialOn(self):
        """
        V.RadialOn()
        C++: virtual void RadialOn()
        
        If set, the tree is laid out with levels on concentric circles
        around the root. If unset (default), the tree is laid out with
        levels on horizontal lines.
        """
        ...
    
    def ReverseEdgesOff(self):
        """
        V.ReverseEdgesOff()
        C++: virtual void ReverseEdgesOff()
        
        If set and the input is not a tree but a general graph, the
        filter will reverse the edges on the graph before extracting a
        tree using breadth first search.
        """
        ...
    
    def ReverseEdgesOn(self):
        """
        V.ReverseEdgesOn()
        C++: virtual void ReverseEdgesOn()
        
        If set and the input is not a tree but a general graph, the
        filter will reverse the edges on the graph before extracting a
        tree using breadth first search.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTreeLayoutStrategy
        C++: static vtkTreeLayoutStrategy *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAngle(self, p_float):
        """
        V.SetAngle(float)
        C++: virtual void SetAngle(double _arg)
        
        The sweep angle of the tree. For a standard tree layout, this
        should be between 0 and 180. For a radial tree layout, this can
        be between 0 and 360.
        """
        ...
    
    def SetDistanceArrayName(self, string):
        """
        V.SetDistanceArrayName(string)
        C++: virtual void SetDistanceArrayName(const char *_arg)
        
        Get/Set the array to use to determine the distance from the root.
        """
        ...
    
    def SetLeafSpacing(self, p_float):
        """
        V.SetLeafSpacing(float)
        C++: virtual void SetLeafSpacing(double _arg)
        
        The spacing of leaves.  Levels near one evenly space leaves with
        no gaps between subtrees.  Levels near zero creates large gaps
        between subtrees.
        """
        ...
    
    def SetLogSpacingValue(self, p_float):
        """
        V.SetLogSpacingValue(float)
        C++: virtual void SetLogSpacingValue(double _arg)
        
        The spacing of tree levels. Levels near zero give more space to
        levels near the root, while levels near one (the default) create
        evenly-spaced levels. Levels above one give more space to levels
        near the leaves.
        """
        ...
    
    def SetRadial(self, bool):
        """
        V.SetRadial(bool)
        C++: virtual void SetRadial(bool _arg)
        
        If set, the tree is laid out with levels on concentric circles
        around the root. If unset (default), the tree is laid out with
        levels on horizontal lines.
        """
        ...
    
    def SetReverseEdges(self, bool):
        """
        V.SetReverseEdges(bool)
        C++: virtual void SetReverseEdges(bool _arg)
        
        If set and the input is not a tree but a general graph, the
        filter will reverse the edges on the graph before extracting a
        tree using breadth first search.
        """
        ...
    
    def SetRotation(self, p_float):
        """
        V.SetRotation(float)
        C++: virtual void SetRotation(double _arg)
        
        The amount of counter-clockwise rotation to apply after the
        layout.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


