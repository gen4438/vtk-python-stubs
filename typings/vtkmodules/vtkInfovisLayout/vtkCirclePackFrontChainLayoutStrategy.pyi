"""
This type stub file was generated by pyright.
"""

from .vtkCirclePackLayoutStrategy import vtkCirclePackLayoutStrategy

class vtkCirclePackFrontChainLayoutStrategy(vtkCirclePackLayoutStrategy):
    """
    vtkCirclePackFrontChainLayoutStrategy - layout a vtkTree into packed
    circles using the front chain algorithm.
    
    Superclass: vtkCirclePackLayoutStrategy
    
    vtkCirclePackFrontChainLayoutStrategy assigns circles to each node of
    the input vtkTree using the front chain algorithm.  The algorithm
    packs circles by searching a "front chain" of circles around the
    perimeter of the circles that have already been packed for the
    current level in the tree hierarchy.  Searching the front chain is in
    general faster than searching all of the circles that have been
    packed at the current level.
    
    WARNING:  The algorithm tends to break down and produce packings with
    overlapping circles when there is a large difference in the radii of
    the circles at a given level of the tree hierarchy.  Roughly on the
    order a 1000:1 ratio of circle radii.
    
    Please see the following reference for more details on the algorithm.
    
    Title: "Visualization of large hierarchical data by circle packing"
    Authors:  Weixin Wang, Hui Wang, Guozhong Dai, Hongan Wang
    Conference: Proceedings of the SIGCHI conference on Human Factors in
    computing systems Year: 2006
    """
    def GetHeight(self):
        """
        V.GetHeight() -> int
        C++: virtual int GetHeight()
        
        Width and Height define the size of the output window that the
        circle packing is placed inside.  Defaults to Width 1, Height 1
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> int
        C++: virtual int GetWidth()
        
        Width and Height define the size of the output window that the
        circle packing is placed inside.  Defaults to Width 1, Height 1
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self, vtkTree, vtkDataArray, vtkDataArray_1):
        """
        V.Layout(vtkTree, vtkDataArray, vtkDataArray)
        C++: void Layout(vtkTree *inputTree, vtkDataArray *areaArray,
            vtkDataArray *sizeArray) override;
        
        Perform the layout of the input tree, and store the circle bounds
        of each vertex as a tuple in a data array. (Xcenter, Ycenter,
        Radius).
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCirclePackFrontChainLayoutStrategy
        C++: vtkCirclePackFrontChainLayoutStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkCirclePackFrontChainLayoutStrategy
        C++: static vtkCirclePackFrontChainLayoutStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetHeight(self, p_int):
        """
        V.SetHeight(int)
        C++: virtual void SetHeight(int _arg)
        
        Width and Height define the size of the output window that the
        circle packing is placed inside.  Defaults to Width 1, Height 1
        """
        ...
    
    def SetWidth(self, p_int):
        """
        V.SetWidth(int)
        C++: virtual void SetWidth(int _arg)
        
        Width and Height define the size of the output window that the
        circle packing is placed inside.  Defaults to Width 1, Height 1
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


