"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkCirclePackLayout(__vtkmodules_vtkCommonExecutionModel.vtkTreeAlgorithm):
    """
    vtkCirclePackLayout - layout a vtkTree as a circle packing.
    
    Superclass: vtkTreeAlgorithm
    
    vtkCirclePackLayout assigns circle shaped regions to each vertex in
    the tree, creating a circle packing layout.  The data is added as a
    data array with three components per tuple representing the center
    and radius of the circle using the format (Xcenter, Ycenter, Radius).
    
    This algorithm relies on a helper class to perform the actual layout.
    This helper class is a subclass of vtkCirclePackLayoutStrategy.
    
    An array by default called "size" can be attached to the input tree
    that specifies the size of each leaf node in the tree.  The filter
    will calculate the sizes of all interior nodes in the tree based on
    the sum of the leaf node sizes.  If no "size" array is given in the
    input vtkTree, a size of 1 is used for all leaf nodes to find the
    size of the interior nodes.
    
    @par Thanks: Thanks to Thomas Otahal from Sandia National
    Laboratories for help developing this class.
    """
    def FindVertex(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.FindVertex([float, float], [float, ...]) -> int
        C++: vtkIdType FindVertex(double pnt[2], double *cinfo=nullptr)
        
        Returns the vertex id that contains pnt (or -1 if no one contains
        it) pnt[0] is x, and pnt[1] is y. If cinfo[3] is provided, then
        (Xcenter, Ycenter, Radius) of the circle containing pnt[2] will
        be returned.
        """
        ...
    
    def GetBoundingCircle(self, p_int, *float):
        """
        V.GetBoundingCircle(int, [float, ...])
        C++: void GetBoundingCircle(vtkIdType id, double *cinfo)
        
        Return the Xcenter, Ycenter, and Radius of the vertex's bounding
        circle
        """
        ...
    
    def GetCirclesFieldName(self):
        """
        V.GetCirclesFieldName() -> string
        C++: virtual char *GetCirclesFieldName()
        
        The field name to use for storing the circles for each vertex.
        The rectangles are stored in a triple float array (Xcenter,
        Ycenter, Radius). Default name is "circles"
        """
        ...
    
    def GetLayoutStrategy(self):
        """
        V.GetLayoutStrategy() -> vtkCirclePackLayoutStrategy
        C++: virtual vtkCirclePackLayoutStrategy *GetLayoutStrategy()
        
        The strategy to use when laying out the tree map.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the modification time of the layout algorithm.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCirclePackLayout
        C++: vtkCirclePackLayout *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCirclePackLayout
        C++: static vtkCirclePackLayout *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCirclesFieldName(self, string):
        """
        V.SetCirclesFieldName(string)
        C++: virtual void SetCirclesFieldName(const char *_arg)
        
        The field name to use for storing the circles for each vertex.
        The rectangles are stored in a triple float array (Xcenter,
        Ycenter, Radius). Default name is "circles"
        """
        ...
    
    def SetLayoutStrategy(self, vtkCirclePackLayoutStrategy):
        """
        V.SetLayoutStrategy(vtkCirclePackLayoutStrategy)
        C++: void SetLayoutStrategy(vtkCirclePackLayoutStrategy *strategy)
        
        The strategy to use when laying out the tree map.
        """
        ...
    
    def SetSizeArrayName(self, string):
        """
        V.SetSizeArrayName(string)
        C++: virtual void SetSizeArrayName(const char *name)
        
        The array to use for the size of each vertex. Default name is
        "size".
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


