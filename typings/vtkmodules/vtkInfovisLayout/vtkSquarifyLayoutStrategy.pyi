"""
This type stub file was generated by pyright.
"""

from .vtkTreeMapLayoutStrategy import vtkTreeMapLayoutStrategy

class vtkSquarifyLayoutStrategy(vtkTreeMapLayoutStrategy):
    """
    vtkSquarifyLayoutStrategy - uses the squarify tree map layout
    algorithm
    
    Superclass: vtkTreeMapLayoutStrategy
    
    vtkSquarifyLayoutStrategy partitions the space for child vertices
    into regions that use all available space and are as close to squares
    as possible. The algorithm also takes into account the relative
    vertex size.
    
    @par Thanks: The squarified tree map algorithm comes from: Bruls,
    D.M., C. Huizing, J.J. van Wijk. Squarified Treemaps. In: W. de
    Leeuw, R. van Liere (eds.), Data Visualization 2000, Proceedings of
    the joint Eurographics and IEEE TCVG Symposium on Visualization,
    2000, Springer, Vienna, p. 33-42.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self, vtkTree, vtkDataArray, vtkDataArray_1):
        """
        V.Layout(vtkTree, vtkDataArray, vtkDataArray)
        C++: void Layout(vtkTree *inputTree, vtkDataArray *coordsArray,
            vtkDataArray *sizeArray) override;
        
        Perform the layout of a tree and place the results as 4-tuples in
        coordsArray (Xmin, Xmax, Ymin, Ymax).
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSquarifyLayoutStrategy
        C++: vtkSquarifyLayoutStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSquarifyLayoutStrategy
        C++: static vtkSquarifyLayoutStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


