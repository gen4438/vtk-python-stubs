"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkIncrementalForceLayout(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkIncrementalForceLayout - incremental force-directed layout.
    
    Superclass: vtkObject
    
    Performs an incremental force-directed layout of a graph. Set the
    graph then iteratively execute UpdatePositions() to update the vertex
    positions. Note that this directly modifies the vertex locations in
    the graph.
    
    This layout is modeled after D3's force layout described at
    https://github.com/mbostock/d3/wiki/Force-Layout
    """
    def GetAlpha(self):
        """
        V.GetAlpha() -> float
        C++: virtual float GetAlpha()
        
        Set the level of activity in the simulation. Default is 0.1.
        """
        ...
    
    def GetCharge(self):
        """
        V.GetCharge() -> float
        C++: virtual float GetCharge()
        
        Set the charge of each vertex. Higher negative values will repel
        vertices from each other more strongly. Default is -30.
        """
        ...
    
    def GetDistance(self):
        """
        V.GetDistance() -> float
        C++: virtual float GetDistance()
        
        Set the resting distance of each link in scene units, which is
        equal to pixels when there is no scene scaling. Default is 20.
        """
        ...
    
    def GetFixed(self):
        """
        V.GetFixed() -> int
        C++: virtual vtkIdType GetFixed()
        
        Set the id of the vertex that will not move during the
        simulation. Set to -1 to allow all the vertices to move.
        """
        ...
    
    def GetFriction(self):
        """
        V.GetFriction() -> float
        C++: virtual float GetFriction()
        
        Set the multiplier for scaling down velocity in the simulation,
        where values closer to 1 are more frictionless. Default is 0.95.
        """
        ...
    
    def GetGraph(self):
        """
        V.GetGraph() -> vtkGraph
        C++: virtual vtkGraph *GetGraph()
        
        Set the graph to be positioned.
        """
        ...
    
    def GetGravity(self):
        """
        V.GetGravity() -> float
        C++: virtual float GetGravity()
        
        Set the amount of gravitational pull toward the gravity point.
        Default is 0.01.
        """
        ...
    
    def GetGravityPoint(self):
        """
        V.GetGravityPoint() -> vtkVector2f
        C++: virtual vtkVector2f GetGravityPoint()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStrength(self):
        """
        V.GetStrength() -> float
        C++: virtual float GetStrength()
        
        Set the rigitity of links in the simulation. Default is 2.
        """
        ...
    
    def GetTheta(self):
        """
        V.GetTheta() -> float
        C++: virtual float GetTheta()
        
        Set the Barnes-Hut threshold for the simulation. Higher values
        will speed the simulation at the expense of some accuracy.
        Default is 0.8.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkIncrementalForceLayout
        C++: vtkIncrementalForceLayout *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkIncrementalForceLayout
        C++: static vtkIncrementalForceLayout *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAlpha(self, p_float):
        """
        V.SetAlpha(float)
        C++: virtual void SetAlpha(float _arg)
        
        Set the level of activity in the simulation. Default is 0.1.
        """
        ...
    
    def SetCharge(self, p_float):
        """
        V.SetCharge(float)
        C++: virtual void SetCharge(float _arg)
        
        Set the charge of each vertex. Higher negative values will repel
        vertices from each other more strongly. Default is -30.
        """
        ...
    
    def SetDistance(self, p_float):
        """
        V.SetDistance(float)
        C++: virtual void SetDistance(float _arg)
        
        Set the resting distance of each link in scene units, which is
        equal to pixels when there is no scene scaling. Default is 20.
        """
        ...
    
    def SetFixed(self, p_int):
        """
        V.SetFixed(int)
        C++: virtual void SetFixed(vtkIdType fixed)
        
        Set the id of the vertex that will not move during the
        simulation. Set to -1 to allow all the vertices to move.
        """
        ...
    
    def SetFriction(self, p_float):
        """
        V.SetFriction(float)
        C++: virtual void SetFriction(float _arg)
        
        Set the multiplier for scaling down velocity in the simulation,
        where values closer to 1 are more frictionless. Default is 0.95.
        """
        ...
    
    def SetGraph(self, vtkGraph):
        """
        V.SetGraph(vtkGraph)
        C++: virtual void SetGraph(vtkGraph *g)
        
        Set the graph to be positioned.
        """
        ...
    
    def SetGravity(self, p_float):
        """
        V.SetGravity(float)
        C++: virtual void SetGravity(float _arg)
        
        Set the amount of gravitational pull toward the gravity point.
        Default is 0.01.
        """
        ...
    
    def SetGravityPoint(self, vtkVector2f):
        """
        V.SetGravityPoint(vtkVector2f)
        C++: virtual void SetGravityPoint(const vtkVector2f &point)
        
        Set the gravity point where all vertices will migrate. Generally
        this should be set to the location in the center of the scene.
        Default location is (200, 200).
        """
        ...
    
    def SetStrength(self, p_float):
        """
        V.SetStrength(float)
        C++: virtual void SetStrength(float _arg)
        
        Set the rigitity of links in the simulation. Default is 2.
        """
        ...
    
    def SetTheta(self, p_float):
        """
        V.SetTheta(float)
        C++: virtual void SetTheta(float _arg)
        
        Set the Barnes-Hut threshold for the simulation. Higher values
        will speed the simulation at the expense of some accuracy.
        Default is 0.8.
        """
        ...
    
    def UpdatePositions(self):
        """
        V.UpdatePositions()
        C++: void UpdatePositions()
        
        Perform one iteration of the force-directed layout.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


