"""
This type stub file was generated by pyright.
"""

from .vtkEdgeLayoutStrategy import vtkEdgeLayoutStrategy

class vtkGeoEdgeStrategy(vtkEdgeLayoutStrategy):
    """
    vtkGeoEdgeStrategy - Layout graph edges on a globe as arcs.
    
    Superclass: vtkEdgeLayoutStrategy
    
    vtkGeoEdgeStrategy produces arcs for each edge in the input graph.
    This is useful for viewing lines on a sphere (e.g. the earth). The
    arcs may "jump" above the sphere's surface using ExplodeFactor.
    """
    def GetExplodeFactor(self):
        """
        V.GetExplodeFactor() -> float
        C++: virtual double GetExplodeFactor()
        
        Factor on which to "explode" the arcs away from the surface. A
        value of 0.0 keeps the values on the surface. Values larger than
        0.0 push the arcs away from the surface by a distance
        proportional to the distance between the points. The default is
        0.2.
        """
        ...
    
    def GetGlobeRadius(self):
        """
        V.GetGlobeRadius() -> float
        C++: virtual double GetGlobeRadius()
        
        The base radius used to determine the earth's surface. Default is
        the earth's radius in meters. TODO: Change this to take in a
        vtkGeoTerrain to get altitude.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfSubdivisions(self):
        """
        V.GetNumberOfSubdivisions() -> int
        C++: virtual int GetNumberOfSubdivisions()
        
        The number of subdivisions in the arc. The default is 20.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: void Layout() override;
        
        Perform the layout.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGeoEdgeStrategy
        C++: vtkGeoEdgeStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGeoEdgeStrategy
        C++: static vtkGeoEdgeStrategy *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetExplodeFactor(self, p_float):
        """
        V.SetExplodeFactor(float)
        C++: virtual void SetExplodeFactor(double _arg)
        
        Factor on which to "explode" the arcs away from the surface. A
        value of 0.0 keeps the values on the surface. Values larger than
        0.0 push the arcs away from the surface by a distance
        proportional to the distance between the points. The default is
        0.2.
        """
        ...
    
    def SetGlobeRadius(self, p_float):
        """
        V.SetGlobeRadius(float)
        C++: virtual void SetGlobeRadius(double _arg)
        
        The base radius used to determine the earth's surface. Default is
        the earth's radius in meters. TODO: Change this to take in a
        vtkGeoTerrain to get altitude.
        """
        ...
    
    def SetNumberOfSubdivisions(self, p_int):
        """
        V.SetNumberOfSubdivisions(int)
        C++: virtual void SetNumberOfSubdivisions(int _arg)
        
        The number of subdivisions in the arc. The default is 20.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


