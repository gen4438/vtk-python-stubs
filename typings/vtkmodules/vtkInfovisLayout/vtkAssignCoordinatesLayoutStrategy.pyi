"""
This type stub file was generated by pyright.
"""

from .vtkGraphLayoutStrategy import vtkGraphLayoutStrategy

class vtkAssignCoordinatesLayoutStrategy(vtkGraphLayoutStrategy):
    """
    vtkAssignCoordinatesLayoutStrategy - uses array values to set vertex
    locations
    
    Superclass: vtkGraphLayoutStrategy
    
    Uses vtkAssignCoordinates to use values from arrays as the x, y, and
    z coordinates.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetXCoordArrayName(self):
        """
        V.GetXCoordArrayName() -> string
        C++: virtual const char *GetXCoordArrayName()
        
        The array to use for the x coordinate values.
        """
        ...
    
    def GetYCoordArrayName(self):
        """
        V.GetYCoordArrayName() -> string
        C++: virtual const char *GetYCoordArrayName()
        
        The array to use for the y coordinate values.
        """
        ...
    
    def GetZCoordArrayName(self):
        """
        V.GetZCoordArrayName() -> string
        C++: virtual const char *GetZCoordArrayName()
        
        The array to use for the z coordinate values.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: void Layout() override;
        
        Perform the random layout.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAssignCoordinatesLayoutStrategy
        C++: vtkAssignCoordinatesLayoutStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkAssignCoordinatesLayoutStrategy
        C++: static vtkAssignCoordinatesLayoutStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetXCoordArrayName(self, string):
        """
        V.SetXCoordArrayName(string)
        C++: virtual void SetXCoordArrayName(const char *name)
        
        The array to use for the x coordinate values.
        """
        ...
    
    def SetYCoordArrayName(self, string):
        """
        V.SetYCoordArrayName(string)
        C++: virtual void SetYCoordArrayName(const char *name)
        
        The array to use for the y coordinate values.
        """
        ...
    
    def SetZCoordArrayName(self, string):
        """
        V.SetZCoordArrayName(string)
        C++: virtual void SetZCoordArrayName(const char *name)
        
        The array to use for the z coordinate values.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


