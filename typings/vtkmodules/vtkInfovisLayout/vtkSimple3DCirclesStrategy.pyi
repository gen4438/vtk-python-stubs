"""
This type stub file was generated by pyright.
"""

from .vtkGraphLayoutStrategy import vtkGraphLayoutStrategy

class vtkSimple3DCirclesStrategy(vtkGraphLayoutStrategy):
    """
    vtkSimple3DCirclesStrategy - places vertices on circles in 3D
    
    Superclass: vtkGraphLayoutStrategy
    
    Places vertices on circles depending on the graph vertices hierarchy
    level. The source graph could be vtkDirectedAcyclicGraph or
    vtkDirectedGraph if MarkedStartPoints array was added. The algorithm
    collects the standalone points, too and take them to a separated
    circle. If method is FixedRadiusMethod, the radius of the circles
    will be equal. If method is FixedDistanceMethod, the distance between
    the points on circles will be equal.
    
    In first step initial points are searched. A point is initial, if its
    in degree equal zero and out degree is greater than zero (or marked
    by MarkedStartVertices and out degree is greater than zero).
    Independent vertices (in and out degree equal zero) are collected
    separatelly. In second step the hierarchical level is generated for
    every vertex. In third step the hierarchical order is generated. If a
    vertex has no hierarchical level and it is not independent, the graph
    has loop so the algorithm exit with error message. Finally the
    vertices positions are calculated by the hierarchical order and by
    the vertices hierarchy levels.
    
    @par Thanks: Ferenc Nasztanovics, naszta
    
    aszta.hu, Budapest University of Technology and Economics, Department
    of Structural Mechanics
    
    @par References: in 3D rotation was used:
    http://en.citizendium.org/wiki/Rotation_matrix
    """
    def AutoHeightOff(self):
        """
        V.AutoHeightOff()
        C++: virtual void AutoHeightOff()
        
        Set or get auto height (Default: false). If AutoHeight is true,
        (r(i+1) - r(i-1))/Height will be smaller than tan(MinimumRadian).
        If you want equal distances and parallel circles, you should turn
        off AutoHeight.
        """
        ...
    
    def AutoHeightOn(self):
        """
        V.AutoHeightOn()
        C++: virtual void AutoHeightOn()
        
        Set or get auto height (Default: false). If AutoHeight is true,
        (r(i+1) - r(i-1))/Height will be smaller than tan(MinimumRadian).
        If you want equal distances and parallel circles, you should turn
        off AutoHeight.
        """
        ...
    
    def ForceToUseUniversalStartPointsFinderOff(self):
        """
        V.ForceToUseUniversalStartPointsFinderOff()
        C++: virtual void ForceToUseUniversalStartPointsFinderOff()
        
        Set or get ForceToUseUniversalStartPointsFinder. If
        ForceToUseUniversalStartPointsFinder is true, MarkedStartVertices
        won't be used. In this case the input graph must be
        vtkDirectedAcyclicGraph (Default: false).
        """
        ...
    
    def ForceToUseUniversalStartPointsFinderOn(self):
        """
        V.ForceToUseUniversalStartPointsFinderOn()
        C++: virtual void ForceToUseUniversalStartPointsFinderOn()
        
        Set or get ForceToUseUniversalStartPointsFinder. If
        ForceToUseUniversalStartPointsFinder is true, MarkedStartVertices
        won't be used. In this case the input graph must be
        vtkDirectedAcyclicGraph (Default: false).
        """
        ...
    
    def GetAutoHeight(self):
        """
        V.GetAutoHeight() -> int
        C++: virtual vtkTypeBool GetAutoHeight()
        
        Set or get auto height (Default: false). If AutoHeight is true,
        (r(i+1) - r(i-1))/Height will be smaller than tan(MinimumRadian).
        If you want equal distances and parallel circles, you should turn
        off AutoHeight.
        """
        ...
    
    def GetDirection(self):
        """
        V.GetDirection() -> (float, float, float)
        C++: virtual double *GetDirection()
        
        Set or get the normal vector of the circles plain. The height is
        growing in this direction. The direction must not be zero vector.
        The default vector is (0.0,0.0,1.0)
        """
        ...
    
    def GetForceToUseUniversalStartPointsFinder(self):
        """
        V.GetForceToUseUniversalStartPointsFinder() -> int
        C++: virtual vtkTypeBool GetForceToUseUniversalStartPointsFinder()
        
        Set or get ForceToUseUniversalStartPointsFinder. If
        ForceToUseUniversalStartPointsFinder is true, MarkedStartVertices
        won't be used. In this case the input graph must be
        vtkDirectedAcyclicGraph (Default: false).
        """
        ...
    
    def GetHeight(self):
        """
        V.GetHeight() -> float
        C++: virtual double GetHeight()
        
        Set or get the vertical (local z) distance between the circles.
        If AutoHeight is on, this is the minimal height between the
        circle layers
        """
        ...
    
    def GetHierarchicalLayers(self):
        """
        V.GetHierarchicalLayers() -> vtkIntArray
        C++: virtual vtkIntArray *GetHierarchicalLayers()
        
        Set or get hierarchical layers id by vertices (An usual vertex's
        layer id is greater or equal to zero. If a vertex is standalone,
        its layer id is -2.) If no HierarchicalLayers array is defined,
        vtkSimple3DCirclesStrategy will generate it automatically
        (default).
        """
        ...
    
    def GetHierarchicalOrder(self):
        """
        V.GetHierarchicalOrder() -> vtkIdTypeArray
        C++: virtual vtkIdTypeArray *GetHierarchicalOrder()
        
        Set or get hierarchical ordering of vertices (The array starts
        from the first vertex's id. All id must be greater or equal to
        zero!) If no HierarchicalOrder is defined,
        vtkSimple3DCirclesStrategy will generate it automatically
        (default).
        """
        ...
    
    def GetMarkedStartVertices(self):
        """
        V.GetMarkedStartVertices() -> vtkAbstractArray
        C++: virtual vtkAbstractArray *GetMarkedStartVertices()
        
        Set or get initial vertices. If MarkedStartVertices is added,
        loop is accepted in the graph. (If all of the loop start vertices
        are marked in MarkedStartVertices array.) MarkedStartVertices
        size must be equal with the number of the vertices in the graph.
        Start vertices must be marked by MarkedValue. (E.g.: if
        MarkedValue=3 and MarkedStartPoints is { 0, 3, 5, 3 }, the start
        points ids will be {1,3}.) )
        """
        ...
    
    def GetMarkedValue(self):
        """
        V.GetMarkedValue() -> vtkVariant
        C++: virtual vtkVariant GetMarkedValue(void)
        
        Set or get MarkedValue. See: MarkedStartVertices.
        """
        ...
    
    def GetMethod(self):
        """
        V.GetMethod() -> int
        C++: virtual int GetMethod()
        
        Set or get circle generating method
        (FixedRadiusMethod/FixedDistanceMethod). Default is
        FixedRadiusMethod.
        """
        ...
    
    def GetMinimumDegree(self):
        """
        V.GetMinimumDegree() -> float
        C++: virtual double GetMinimumDegree(void)
        
        Set or get minimum degree (used by auto height). There is no
        separated minimum degree, so minimum radian will be changed.
        """
        ...
    
    def GetMinimumRadian(self):
        """
        V.GetMinimumRadian() -> float
        C++: virtual double GetMinimumRadian()
        
        Set or get minimum radian (used by auto height).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrigin(self):
        """
        V.GetOrigin() -> (float, float, float)
        C++: virtual double *GetOrigin()
        
        Set or get the origin of the geometry. This is the center of the
        first circle. SetOrigin(x,y,z)
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        If Method is FixedRadiusMethod: Set or get the radius of the
        circles. If Method is FixedDistanceMethod: Set or get the
        distance of the points in the circle.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: void Layout(void) override;
        
        Standard layout method
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimple3DCirclesStrategy
        C++: vtkSimple3DCirclesStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimple3DCirclesStrategy
        C++: static vtkSimple3DCirclesStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAutoHeight(self, p_int):
        """
        V.SetAutoHeight(int)
        C++: virtual void SetAutoHeight(vtkTypeBool _arg)
        
        Set or get auto height (Default: false). If AutoHeight is true,
        (r(i+1) - r(i-1))/Height will be smaller than tan(MinimumRadian).
        If you want equal distances and parallel circles, you should turn
        off AutoHeight.
        """
        ...
    
    def SetDirection(self, p_float, p_float_1, p_float_2):
        """
        V.SetDirection(float, float, float)
        C++: virtual void SetDirection(double dx, double dy, double dz)
        V.SetDirection([float, float, float])
        C++: virtual void SetDirection(double d[3])
        
        Set or get the normal vector of the circles plain. The height is
        growing in this direction. The direction must not be zero vector.
        The default vector is (0.0,0.0,1.0)
        """
        ...
    
    def SetForceToUseUniversalStartPointsFinder(self, p_int):
        """
        V.SetForceToUseUniversalStartPointsFinder(int)
        C++: virtual void SetForceToUseUniversalStartPointsFinder(
            vtkTypeBool _arg)
        
        Set or get ForceToUseUniversalStartPointsFinder. If
        ForceToUseUniversalStartPointsFinder is true, MarkedStartVertices
        won't be used. In this case the input graph must be
        vtkDirectedAcyclicGraph (Default: false).
        """
        ...
    
    def SetGraph(self, vtkGraph):
        """
        V.SetGraph(vtkGraph)
        C++: void SetGraph(vtkGraph *graph) override;
        
        Set graph (warning: HierarchicalOrder and HierarchicalLayers will
        set to zero. These reference counts will be decreased!)
        """
        ...
    
    def SetHeight(self, p_float):
        """
        V.SetHeight(float)
        C++: virtual void SetHeight(double _arg)
        
        Set or get the vertical (local z) distance between the circles.
        If AutoHeight is on, this is the minimal height between the
        circle layers
        """
        ...
    
    def SetHierarchicalLayers(self, vtkIntArray):
        """
        V.SetHierarchicalLayers(vtkIntArray)
        C++: virtual void SetHierarchicalLayers(vtkIntArray *_arg)
        
        Set or get hierarchical layers id by vertices (An usual vertex's
        layer id is greater or equal to zero. If a vertex is standalone,
        its layer id is -2.) If no HierarchicalLayers array is defined,
        vtkSimple3DCirclesStrategy will generate it automatically
        (default).
        """
        ...
    
    def SetHierarchicalOrder(self, vtkIdTypeArray):
        """
        V.SetHierarchicalOrder(vtkIdTypeArray)
        C++: virtual void SetHierarchicalOrder(vtkIdTypeArray *_arg)
        
        Set or get hierarchical ordering of vertices (The array starts
        from the first vertex's id. All id must be greater or equal to
        zero!) If no HierarchicalOrder is defined,
        vtkSimple3DCirclesStrategy will generate it automatically
        (default).
        """
        ...
    
    def SetMarkedStartVertices(self, vtkAbstractArray):
        """
        V.SetMarkedStartVertices(vtkAbstractArray)
        C++: virtual void SetMarkedStartVertices(vtkAbstractArray *_arg)
        
        Set or get initial vertices. If MarkedStartVertices is added,
        loop is accepted in the graph. (If all of the loop start vertices
        are marked in MarkedStartVertices array.) MarkedStartVertices
        size must be equal with the number of the vertices in the graph.
        Start vertices must be marked by MarkedValue. (E.g.: if
        MarkedValue=3 and MarkedStartPoints is { 0, 3, 5, 3 }, the start
        points ids will be {1,3}.) )
        """
        ...
    
    def SetMarkedValue(self, vtkVariant):
        """
        V.SetMarkedValue(vtkVariant)
        C++: virtual void SetMarkedValue(vtkVariant _arg)
        
        Set or get MarkedValue. See: MarkedStartVertices.
        """
        ...
    
    def SetMethod(self, p_int):
        """
        V.SetMethod(int)
        C++: virtual void SetMethod(int _arg)
        
        Set or get circle generating method
        (FixedRadiusMethod/FixedDistanceMethod). Default is
        FixedRadiusMethod.
        """
        ...
    
    def SetMinimumDegree(self, p_float):
        """
        V.SetMinimumDegree(float)
        C++: virtual void SetMinimumDegree(double degree)
        
        Set or get minimum degree (used by auto height). There is no
        separated minimum degree, so minimum radian will be changed.
        """
        ...
    
    def SetMinimumRadian(self, p_float):
        """
        V.SetMinimumRadian(float)
        C++: virtual void SetMinimumRadian(double _arg)
        
        Set or get minimum radian (used by auto height).
        """
        ...
    
    def SetOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetOrigin(float, float, float)
        C++: virtual void SetOrigin(double _arg1, double _arg2,
            double _arg3)
        V.SetOrigin((float, float, float))
        C++: virtual void SetOrigin(const double _arg[3])
        
        Set or get the origin of the geometry. This is the center of the
        first circle. SetOrigin(x,y,z)
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        If Method is FixedRadiusMethod: Set or get the radius of the
        circles. If Method is FixedDistanceMethod: Set or get the
        distance of the points in the circle.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    FixedDistanceMethod = ...
    FixedRadiusMethod = ...
    __dict__ = ...
    __vtkname__ = ...


