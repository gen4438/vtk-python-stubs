"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSplineGraphEdges(__vtkmodules_vtkCommonExecutionModel.vtkGraphAlgorithm):
    """
    vtkSplineGraphEdges - subsample graph edges to make smooth curves
    
    Superclass: vtkGraphAlgorithm
    
    vtkSplineGraphEdges uses a vtkSpline to make edges into nicely
    sampled splines. By default, the filter will use an optimized
    b-spline. Otherwise, it will use a custom vtkSpline instance set by
    the user.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfSubdivisions(self):
        """
        V.GetNumberOfSubdivisions() -> int
        C++: virtual vtkIdType GetNumberOfSubdivisions()
        
        The number of subdivisions in the spline.
        """
        ...
    
    def GetSpline(self):
        """
        V.GetSpline() -> vtkSpline
        C++: virtual vtkSpline *GetSpline()
        
        If SplineType is CUSTOM, uses this spline.
        """
        ...
    
    def GetSplineType(self):
        """
        V.GetSplineType() -> int
        C++: virtual int GetSplineType()
        
        Spline type used by the filter. BSPLINE (0) - Use optimized
        b-spline (default). CUSTOM (1) - Use spline set with SetSpline.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSplineGraphEdges
        C++: vtkSplineGraphEdges *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSplineGraphEdges
        C++: static vtkSplineGraphEdges *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfSubdivisions(self, p_int):
        """
        V.SetNumberOfSubdivisions(int)
        C++: virtual void SetNumberOfSubdivisions(vtkIdType _arg)
        
        The number of subdivisions in the spline.
        """
        ...
    
    def SetSpline(self, vtkSpline):
        """
        V.SetSpline(vtkSpline)
        C++: virtual void SetSpline(vtkSpline *s)
        
        If SplineType is CUSTOM, uses this spline.
        """
        ...
    
    def SetSplineType(self, p_int):
        """
        V.SetSplineType(int)
        C++: virtual void SetSplineType(int _arg)
        
        Spline type used by the filter. BSPLINE (0) - Use optimized
        b-spline (default). CUSTOM (1) - Use spline set with SetSpline.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BSPLINE = ...
    CUSTOM = ...
    __dict__ = ...
    __vtkname__ = ...


