"""
This type stub file was generated by pyright.
"""

from .vtkEdgeLayoutStrategy import vtkEdgeLayoutStrategy

class vtkArcParallelEdgeStrategy(vtkEdgeLayoutStrategy):
    """
    vtkArcParallelEdgeStrategy - routes parallel edges as arcs
    
    Superclass: vtkEdgeLayoutStrategy
    
    Parallel edges are drawn as arcs, and self-loops are drawn as ovals.
    When only one edge connects two vertices it is drawn as a straight
    line.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfSubdivisions(self):
        """
        V.GetNumberOfSubdivisions() -> int
        C++: virtual int GetNumberOfSubdivisions()
        
        Get/Set the number of subdivisions on each edge.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Layout(self):
        """
        V.Layout()
        C++: void Layout() override;
        
        This is the layout method where the graph that was set in
        SetGraph() is laid out.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArcParallelEdgeStrategy
        C++: vtkArcParallelEdgeStrategy *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArcParallelEdgeStrategy
        C++: static vtkArcParallelEdgeStrategy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetNumberOfSubdivisions(self, p_int):
        """
        V.SetNumberOfSubdivisions(int)
        C++: virtual void SetNumberOfSubdivisions(int _arg)
        
        Get/Set the number of subdivisions on each edge.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


