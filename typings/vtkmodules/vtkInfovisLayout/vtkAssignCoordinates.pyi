"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAssignCoordinates(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkAssignCoordinates - Given two(or three) arrays take the values in
    those arrays and simply assign them to the coordinates of the
    vertices.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    Given two(or three) arrays take the values in those arrays and simply
    assign them to the coordinates of the vertices. Yes you could do this
    with the array calculator, but your mom wears army boots so we're not
    going to.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetXCoordArrayName(self):
        """
        V.GetXCoordArrayName() -> string
        C++: virtual char *GetXCoordArrayName()
        
        Set the x coordinate array name.
        """
        ...
    
    def GetYCoordArrayName(self):
        """
        V.GetYCoordArrayName() -> string
        C++: virtual char *GetYCoordArrayName()
        
        Set the y coordinate array name.
        """
        ...
    
    def GetZCoordArrayName(self):
        """
        V.GetZCoordArrayName() -> string
        C++: virtual char *GetZCoordArrayName()
        
        Set the z coordinate array name.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAssignCoordinates
        C++: vtkAssignCoordinates *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAssignCoordinates
        C++: static vtkAssignCoordinates *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetJitter(self, bool):
        """
        V.SetJitter(bool)
        C++: virtual void SetJitter(bool _arg)
        
        Set if you want a random jitter
        """
        ...
    
    def SetXCoordArrayName(self, string):
        """
        V.SetXCoordArrayName(string)
        C++: virtual void SetXCoordArrayName(const char *_arg)
        
        Set the x coordinate array name.
        """
        ...
    
    def SetYCoordArrayName(self, string):
        """
        V.SetYCoordArrayName(string)
        C++: virtual void SetYCoordArrayName(const char *_arg)
        
        Set the y coordinate array name.
        """
        ...
    
    def SetZCoordArrayName(self, string):
        """
        V.SetZCoordArrayName(string)
        C++: virtual void SetZCoordArrayName(const char *_arg)
        
        Set the z coordinate array name.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


