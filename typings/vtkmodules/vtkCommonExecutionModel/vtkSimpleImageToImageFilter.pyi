"""
This type stub file was generated by pyright.
"""

from .vtkImageAlgorithm import vtkImageAlgorithm

class vtkSimpleImageToImageFilter(vtkImageAlgorithm):
    """
    vtkSimpleImageToImageFilter - Generic image filter with one input.
    
    Superclass: vtkImageAlgorithm
    
    vtkSimpleImageToImageFilter is a filter which aims to avoid much of
    the complexity associated with vtkImageAlgorithm (i.e. support for
    pieces, multi-threaded operation). If you need to write a simple
    image-image filter which operates on the whole input, use this as the
    superclass. The subclass has to provide only an execute method which
    takes input and output as arguments. Memory allocation is handled in
    vtkSimpleImageToImageFilter. Also, you are guaranteed to have a valid
    input in the Execute(input, output) method. By default, this filter
    requests it's input's whole extent and copies the input's information
    (spacing, whole extent etc...) to the output. If the output's setup
    is different (for example, if it performs some sort of sub-sampling),
    ExecuteInformation has to be overwritten. As an example of how this
    can be done, you can look at vtkImageShrink3D::ExecuteInformation.
    For a complete example which uses templates to support generic data
    types, see vtkSimpleImageToImageFilter.
    
    @sa
    vtkImageAlgorithm vtkSimpleImageFilterExample
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimpleImageToImageFilter
        C++: vtkSimpleImageToImageFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimpleImageToImageFilter
        C++: static vtkSimpleImageToImageFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


