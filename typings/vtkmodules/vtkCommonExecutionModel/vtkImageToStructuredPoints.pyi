"""
This type stub file was generated by pyright.
"""

from .vtkImageAlgorithm import vtkImageAlgorithm

class vtkImageToStructuredPoints(vtkImageAlgorithm):
    """
    vtkImageToStructuredPoints - Attaches image pipeline to VTK.
    
    Superclass: vtkImageAlgorithm
    
    vtkImageToStructuredPoints changes an image cache format to a
    structured points dataset.  It takes an Input plus an optional
    VectorInput. The VectorInput converts the RGB scalar components of
    the VectorInput to vector pointdata attributes. This filter will try
    to reference count the data but in some cases it must make a copy.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetStructuredPointsOutput(self):
        """
        V.GetStructuredPointsOutput() -> vtkStructuredPoints
        C++: vtkStructuredPoints *GetStructuredPointsOutput()
        
        Get the output of the filter.
        """
        ...
    
    def GetVectorInput(self):
        """
        V.GetVectorInput() -> vtkImageData
        C++: vtkImageData *GetVectorInput()
        
        Set/Get the input object from the image pipeline.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageToStructuredPoints
        C++: vtkImageToStructuredPoints *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageToStructuredPoints
        C++: static vtkImageToStructuredPoints *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetVectorInputData(self, vtkImageData):
        """
        V.SetVectorInputData(vtkImageData)
        C++: void SetVectorInputData(vtkImageData *input)
        
        Set/Get the input object from the image pipeline.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


