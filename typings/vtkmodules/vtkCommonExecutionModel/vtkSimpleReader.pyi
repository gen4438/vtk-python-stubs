"""
This type stub file was generated by pyright.
"""

from .vtkReaderAlgorithm import vtkReaderAlgorithm

class vtkSimpleReader(vtkReaderAlgorithm):
    """
    vtkSimpleReader - Superclass for algorithms that are not time or
    parallel aware
    
    Superclass: vtkReaderAlgorithm
    """
    def AddFileName(self, string):
        """
        V.AddFileName(string)
        C++: void AddFileName(const char *fname)
        
        Add a filename to be read. Since this superclass handles file
        series to support time, multiple filenames can be added. Note
        that the time values are either integers growing sequentially, or
        are obtained from individual files as supported by the subclass.
        """
        ...
    
    def ClearFileNames(self):
        """
        V.ClearFileNames()
        C++: void ClearFileNames()
        
        Removes all filenames stored by the reader.
        """
        ...
    
    def GetCurrentFileName(self):
        """
        V.GetCurrentFileName() -> string
        C++: const char *GetCurrentFileName()
        
        Returns the filename that was last loaded by the reader. This is
        set internally in ReadMesh()
        """
        ...
    
    def GetFileName(self, p_int):
        """
        V.GetFileName(int) -> string
        C++: const char *GetFileName(int i)
        
        Returns a particular filename stored by the reader.
        """
        ...
    
    def GetNumberOfFileNames(self):
        """
        V.GetNumberOfFileNames() -> int
        C++: int GetNumberOfFileNames()
        
        Returns the number of filenames stored by the reader.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTimeValue(self, string):
        """
        V.GetTimeValue(string) -> float
        C++: virtual double GetTimeValue(const std::string &fname)
        
        A subclass can override this method to provide an actual time
        value for a given file (this method is called for each filename
        stored by the reader). If time values is not available, the
        subclass does not have to override. This will return
        vtkMath::NaN() if no time value is present in the file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSimpleReader
        C++: vtkSimpleReader *NewInstance()
        """
        ...
    
    def ReadArrays(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadArrays(int, int, int, int, vtkDataObject) -> int
        C++: int ReadArrays(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def ReadArraysSimple(self, string, vtkDataObject):
        """
        V.ReadArraysSimple(string, vtkDataObject) -> int
        C++: virtual int ReadArraysSimple(const std::string &fname,
            vtkDataObject *output)
        
        A method that needs to be override by the subclass to provide
        data arrays. Note that the filename is passed to this method and
        should be used by the subclass. The subclass directly adds data
        arrays to the provided data object.
        """
        ...
    
    def ReadMesh(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadMesh(int, int, int, int, vtkDataObject) -> int
        C++: int ReadMesh(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def ReadMeshSimple(self, string, vtkDataObject):
        """
        V.ReadMeshSimple(string, vtkDataObject) -> int
        C++: virtual int ReadMeshSimple(const std::string &fname,
            vtkDataObject *output)
        
        A method that needs to be override by the subclass to provide the
        mesh (topology). Note that the filename is passed to this method
        and should be used by the subclass. The subclass directly adds
        the structure/topology to the provided data object.
        """
        ...
    
    def ReadMetaData(self, vtkInformation):
        """
        V.ReadMetaData(vtkInformation) -> int
        C++: int ReadMetaData(vtkInformation *metadata) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def ReadMetaDataSimple(self, string, vtkInformation):
        """
        V.ReadMetaDataSimple(string, vtkInformation) -> int
        C++: virtual int ReadMetaDataSimple(const std::string &,
            vtkInformation *)
        
        A subclass can override this method to provide meta data specific
        to a particular file. In order for this method to be called,
        HasTemporalMetaData has to be set to true.
        """
        ...
    
    def ReadPoints(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadPoints(int, int, int, int, vtkDataObject) -> int
        C++: int ReadPoints(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def ReadPointsSimple(self, string, vtkDataObject):
        """
        V.ReadPointsSimple(string, vtkDataObject) -> int
        C++: virtual int ReadPointsSimple(const std::string &fname,
            vtkDataObject *output)
        
        A method that needs to be override by the subclass to provide the
        point coordinates. Note that the filename is passed to this
        method and should be used by the subclass. The subclass directly
        adds the coordinates to the provided data object.
        """
        ...
    
    def ReadTimeDependentMetaData(self, p_int, vtkInformation):
        """
        V.ReadTimeDependentMetaData(int, vtkInformation) -> int
        C++: int ReadTimeDependentMetaData(int timestep,
            vtkInformation *metadata) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSimpleReader
        C++: static vtkSimpleReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


