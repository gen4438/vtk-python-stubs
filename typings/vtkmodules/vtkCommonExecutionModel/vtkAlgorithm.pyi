"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkAlgorithm(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAlgorithm - Superclass for all sources, filters, and sinks in VTK.
    
    Superclass: vtkObject
    
    vtkAlgorithm is the superclass for all sources, filters, and sinks in
    VTK.  It defines a generalized interface for executing data
    processing algorithms.  Pipeline connections are associated with
    input and output ports that are independent of the type of data
    passing through the connections.
    
    Instances may be used independently or within pipelines with a
    variety of architectures and update mechanisms.  Pipelines are
    controlled by instances of vtkExecutive.  Every vtkAlgorithm instance
    has an associated vtkExecutive when it is used in a pipeline.  The
    executive is responsible for data flow.
    """
    def AbortExecuteOff(self):
        """
        V.AbortExecuteOff()
        C++: virtual void AbortExecuteOff()
        
        Set/Get the AbortExecute flag for the process object. Process
        objects may handle premature termination of execution in
        different ways.
        """
        ...
    
    def AbortExecuteOn(self):
        """
        V.AbortExecuteOn()
        C++: virtual void AbortExecuteOn()
        
        Set/Get the AbortExecute flag for the process object. Process
        objects may handle premature termination of execution in
        different ways.
        """
        ...
    
    def AddInputConnection(self, p_int, vtkAlgorithmOutput):
        """
        V.AddInputConnection(int, vtkAlgorithmOutput)
        C++: virtual void AddInputConnection(int port,
            vtkAlgorithmOutput *input)
        V.AddInputConnection(vtkAlgorithmOutput)
        C++: virtual void AddInputConnection(vtkAlgorithmOutput *input)
        
        Add a connection to the given input port index.  See
        SetInputConnection() for details on input connections.  This
        method is the complement to RemoveInputConnection() in that it
        adds only the connection specified without affecting other
        connections.  Typical usage is
        
        * filter2->AddInputConnection(0, filter1->GetOutputPort(0)).
        """
        ...
    
    def AddInputDataObject(self, p_int, vtkDataObject):
        """
        V.AddInputDataObject(int, vtkDataObject)
        C++: virtual void AddInputDataObject(int port,
            vtkDataObject *data)
        V.AddInputDataObject(vtkDataObject)
        C++: virtual void AddInputDataObject(vtkDataObject *data)
        
        Add the data-object as an input to this given port. This will add
        a new input connection on the specified port without affecting
        any existing connections on the same input port.
        """
        ...
    
    def CAN_HANDLE_PIECE_REQUEST(self):
        """
        V.CAN_HANDLE_PIECE_REQUEST() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *CAN_HANDLE_PIECE_REQUEST()
        
        Key that tells the pipeline that a particular algorithm can or
        cannot handle piece request. If a filter cannot handle piece
        requests and is asked for a piece, the executive will flag an
        error. If a structured data source cannot handle piece requests
        but can produce sub-extents (CAN_PRODUCE_SUB_EXTENT), the
        executive will use an extent translator to split the extent into
        pieces. Otherwise, if a source cannot handle piece requests, the
        executive will ask for the whole data for piece 0 and not execute
        the source for other pieces.\ingroup InformationKeys
        """
        ...
    
    def CAN_PRODUCE_SUB_EXTENT(self):
        """
        V.CAN_PRODUCE_SUB_EXTENT() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *CAN_PRODUCE_SUB_EXTENT()
        
        This key tells the executive that a particular output port is
        capable of producing an arbitrary subextent of the whole extent.
        Many image sources and readers fall into this category but some
        such as the legacy structured data readers cannot support this
        feature.\ingroup InformationKeys
        """
        ...
    
    def ConvertTotalInputToPortConnection(self, p_int, p_int_1, p_int_2):
        """
        V.ConvertTotalInputToPortConnection(int, int, int)
        C++: void ConvertTotalInputToPortConnection(int ind, int &port,
            int &conn)
        
        Convenience routine to convert from a linear ordering of input
        connections to a port/connection pair.
        """
        ...
    
    def GetAbortExecute(self):
        """
        V.GetAbortExecute() -> int
        C++: virtual vtkTypeBool GetAbortExecute()
        
        Set/Get the AbortExecute flag for the process object. Process
        objects may handle premature termination of execution in
        different ways.
        """
        ...
    
    def GetErrorCode(self):
        """
        V.GetErrorCode() -> int
        C++: virtual unsigned long GetErrorCode()
        
        The error code contains a possible error that occurred while
        reading or writing the file.
        """
        ...
    
    def GetExecutive(self):
        """
        V.GetExecutive() -> vtkExecutive
        C++: vtkExecutive *GetExecutive()
        
        Get this algorithm's executive.  If it has none, a default
        executive will be created.
        """
        ...
    
    def GetInformation(self):
        """
        V.GetInformation() -> vtkInformation
        C++: virtual vtkInformation *GetInformation()
        
        Set/Get the information object associated with this algorithm.
        """
        ...
    
    def GetInputAlgorithm(self, p_int, p_int_1, p_int_2):
        """
        V.GetInputAlgorithm(int, int, int) -> vtkAlgorithm
        C++: vtkAlgorithm *GetInputAlgorithm(int port, int index,
            int &algPort)
        V.GetInputAlgorithm(int, int) -> vtkAlgorithm
        C++: vtkAlgorithm *GetInputAlgorithm(int port, int index)
        V.GetInputAlgorithm() -> vtkAlgorithm
        C++: vtkAlgorithm *GetInputAlgorithm()
        
        Returns the algorithm and the output port index of that algorithm
        connected to a port-index pair.
        """
        ...
    
    def GetInputArrayInformation(self, p_int):
        """
        V.GetInputArrayInformation(int) -> vtkInformation
        C++: vtkInformation *GetInputArrayInformation(int idx)
        
        Get the info object for the specified input array to this
        algorithm
        """
        ...
    
    def GetInputConnection(self, p_int, p_int_1):
        """
        V.GetInputConnection(int, int) -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetInputConnection(int port, int index)
        
        Get the algorithm output port connected to an input port.
        """
        ...
    
    def GetInputDataObject(self, p_int, p_int_1):
        """
        V.GetInputDataObject(int, int) -> vtkDataObject
        C++: vtkDataObject *GetInputDataObject(int port, int connection)
        
        Get the data object that will contain the algorithm input for the
        given port and given connection.
        """
        ...
    
    def GetInputExecutive(self, p_int, p_int_1):
        """
        V.GetInputExecutive(int, int) -> vtkExecutive
        C++: vtkExecutive *GetInputExecutive(int port, int index)
        V.GetInputExecutive() -> vtkExecutive
        C++: vtkExecutive *GetInputExecutive()
        
        Returns the executive associated with a particular input
        connection.
        """
        ...
    
    def GetInputInformation(self, p_int, p_int_1):
        """
        V.GetInputInformation(int, int) -> vtkInformation
        C++: vtkInformation *GetInputInformation(int port, int index)
        V.GetInputInformation() -> vtkInformation
        C++: vtkInformation *GetInputInformation()
        
        Return the information object that is associated with a
        particular input connection. This can be used to get meta-data
        coming from the REQUEST_INFORMATION pass and set requests for the
        REQUEST_UPDATE_EXTENT pass. NOTE: Do not use this in any of the
        pipeline passes. Use the information objects passed as arguments
        instead.
        """
        ...
    
    def GetInputPortInformation(self, p_int):
        """
        V.GetInputPortInformation(int) -> vtkInformation
        C++: vtkInformation *GetInputPortInformation(int port)
        
        Get the information object associated with an input port.  There
        is one input port per kind of input to the algorithm.  Each input
        port tells executives what kind of data and downstream requests
        this algorithm can handle for that input.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfInputConnections(self, p_int):
        """
        V.GetNumberOfInputConnections(int) -> int
        C++: int GetNumberOfInputConnections(int port)
        
        Get the number of inputs currently connected to a port.
        """
        ...
    
    def GetNumberOfInputPorts(self):
        """
        V.GetNumberOfInputPorts() -> int
        C++: int GetNumberOfInputPorts()
        
        Get the number of input ports used by the algorithm.
        """
        ...
    
    def GetNumberOfOutputPorts(self):
        """
        V.GetNumberOfOutputPorts() -> int
        C++: int GetNumberOfOutputPorts()
        
        Get the number of output ports provided by the algorithm.
        """
        ...
    
    def GetOutputDataObject(self, p_int):
        """
        V.GetOutputDataObject(int) -> vtkDataObject
        C++: vtkDataObject *GetOutputDataObject(int port)
        
        Get the data object that will contain the algorithm output for
        the given port.
        """
        ...
    
    def GetOutputInformation(self, p_int):
        """
        V.GetOutputInformation(int) -> vtkInformation
        C++: vtkInformation *GetOutputInformation(int port)
        
        Return the information object that is associated with a
        particular output port. This can be used to set meta-data coming
        during the REQUEST_INFORMATION. NOTE: Do not use this in any of
        the pipeline passes. Use the information objects passed as
        arguments instead.
        """
        ...
    
    def GetOutputPort(self, p_int):
        """
        V.GetOutputPort(int) -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetOutputPort(int index)
        V.GetOutputPort() -> vtkAlgorithmOutput
        C++: vtkAlgorithmOutput *GetOutputPort()
        
        Get a proxy object corresponding to the given output port of this
        algorithm.  The proxy object can be passed to another algorithm's
        SetInputConnection(), AddInputConnection(), and
        RemoveInputConnection() methods to modify pipeline connectivity.
        """
        ...
    
    def GetOutputPortInformation(self, p_int):
        """
        V.GetOutputPortInformation(int) -> vtkInformation
        C++: vtkInformation *GetOutputPortInformation(int port)
        
        Get the information object associated with an output port.  There
        is one output port per output from the algorithm.  Each output
        port tells executives what kind of upstream requests this
        algorithm can handle for that output.
        """
        ...
    
    def GetProgress(self):
        """
        V.GetProgress() -> float
        C++: virtual double GetProgress()
        
        Get the execution progress of a process object.
        """
        ...
    
    def GetProgressObserver(self):
        """
        V.GetProgressObserver() -> vtkProgressObserver
        C++: virtual vtkProgressObserver *GetProgressObserver()
        
        If an ProgressObserver is set, the algorithm will report progress
        through it rather than directly. This means that it will call
        UpdateProgress() on the ProgressObserver rather than itself
        report it and set progress. This is most useful in situations
        where multiple threads are executing an algorithm at the same
        time and want to handle progress locally.
        """
        ...
    
    def GetProgressScale(self):
        """
        V.GetProgressScale() -> float
        C++: virtual double GetProgressScale()
        
        Specify the shift and scale values to use to apply to the
        progress amount when `UpdateProgress` is called. By default shift
        is set to 0, and scale is set to 1.0. This is useful when the
        vtkAlgorithm instance is used as an internal algorithm to solve
        only a part of a whole problem.
        
        If calling on a internal vtkAlgorithm, make sure you take into
        consideration that values set of the outer vtkAlgorithm as well
        since the outer vtkAlgorithm itself may be nested in another
        algorithm.
        
        ote SetProgressShiftScale does not modify the MTime of the
        algorithm.
        """
        ...
    
    def GetProgressShift(self):
        """
        V.GetProgressShift() -> float
        C++: virtual double GetProgressShift()
        
        Specify the shift and scale values to use to apply to the
        progress amount when `UpdateProgress` is called. By default shift
        is set to 0, and scale is set to 1.0. This is useful when the
        vtkAlgorithm instance is used as an internal algorithm to solve
        only a part of a whole problem.
        
        If calling on a internal vtkAlgorithm, make sure you take into
        consideration that values set of the outer vtkAlgorithm as well
        since the outer vtkAlgorithm itself may be nested in another
        algorithm.
        
        ote SetProgressShiftScale does not modify the MTime of the
        algorithm.
        """
        ...
    
    def GetProgressText(self):
        """
        V.GetProgressText() -> string
        C++: virtual char *GetProgressText()
        
        Set the current text message associated with the progress state.
        This may be used by a calling process/GUI. Note: Because
        SetProgressText() is called from inside RequestData() it does not
        modify the algorithm object. Algorithms are not allowed to modify
        themselves from inside RequestData().
        """
        ...
    
    def GetReleaseDataFlag(self):
        """
        V.GetReleaseDataFlag() -> int
        C++: virtual int GetReleaseDataFlag()
        
        Turn release data flag on or off for all output ports.
        """
        ...
    
    def GetTotalNumberOfInputConnections(self):
        """
        V.GetTotalNumberOfInputConnections() -> int
        C++: int GetTotalNumberOfInputConnections()
        
        Get the total number of inputs for this algorithm
        """
        ...
    
    def GetUpdateExtent(self):
        """
        V.GetUpdateExtent() -> (int, int, int, int, int, int)
        C++: int *GetUpdateExtent()
        V.GetUpdateExtent(int) -> (int, int, int, int, int, int)
        C++: int *GetUpdateExtent(int port)
        V.GetUpdateExtent(int, int, int, int, int, int)
        C++: void GetUpdateExtent(int &x0, int &x1, int &y0, int &y1,
            int &z0, int &z1)
        V.GetUpdateExtent(int, int, int, int, int, int, int)
        C++: void GetUpdateExtent(int port, int &x0, int &x1, int &y0,
            int &y1, int &z0, int &z1)
        V.GetUpdateExtent([int, int, int, int, int, int])
        C++: void GetUpdateExtent(int extent[6])
        V.GetUpdateExtent(int, [int, int, int, int, int, int])
        C++: void GetUpdateExtent(int port, int extent[6])
        
        These functions return the update extent for output ports that
        use 3D extents. Where port is not specified, it is assumed to be
        0.
        """
        ...
    
    def GetUpdateGhostLevel(self):
        """
        V.GetUpdateGhostLevel() -> int
        C++: int GetUpdateGhostLevel()
        V.GetUpdateGhostLevel(int) -> int
        C++: int GetUpdateGhostLevel(int port)
        
        These functions return the update extent for output ports that
        use piece extents. Where port is not specified, it is assumed to
        be 0.
        """
        ...
    
    def GetUpdateNumberOfPieces(self):
        """
        V.GetUpdateNumberOfPieces() -> int
        C++: int GetUpdateNumberOfPieces()
        V.GetUpdateNumberOfPieces(int) -> int
        C++: int GetUpdateNumberOfPieces(int port)
        
        These functions return the update extent for output ports that
        use piece extents. Where port is not specified, it is assumed to
        be 0.
        """
        ...
    
    def GetUpdatePiece(self):
        """
        V.GetUpdatePiece() -> int
        C++: int GetUpdatePiece()
        V.GetUpdatePiece(int) -> int
        C++: int GetUpdatePiece(int port)
        
        These functions return the update extent for output ports that
        use piece extents. Where port is not specified, it is assumed to
        be 0.
        """
        ...
    
    def HasExecutive(self):
        """
        V.HasExecutive() -> int
        C++: int HasExecutive()
        
        Check whether this algorithm has an assigned executive.  This
        will NOT create a default executive.
        """
        ...
    
    def INPUT_ARRAYS_TO_PROCESS(self):
        """
        V.INPUT_ARRAYS_TO_PROCESS() -> vtkInformationInformationVectorKey
        C++: static vtkInformationInformationVectorKey *INPUT_ARRAYS_TO_PROCESS(
            )
        
        \ingroup InformationKeys
        """
        ...
    
    def INPUT_CONNECTION(self):
        """
        V.INPUT_CONNECTION() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *INPUT_CONNECTION()
        
        \ingroup InformationKeys
        """
        ...
    
    def INPUT_IS_OPTIONAL(self):
        """
        V.INPUT_IS_OPTIONAL() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *INPUT_IS_OPTIONAL()
        
        Keys used to specify input port requirements.\ingroup
        InformationKeys
        """
        ...
    
    def INPUT_IS_REPEATABLE(self):
        """
        V.INPUT_IS_REPEATABLE() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *INPUT_IS_REPEATABLE()
        
        \ingroup InformationKeys
        """
        ...
    
    def INPUT_PORT(self):
        """
        V.INPUT_PORT() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *INPUT_PORT()
        
        \ingroup InformationKeys
        """
        ...
    
    def INPUT_REQUIRED_DATA_TYPE(self):
        """
        V.INPUT_REQUIRED_DATA_TYPE() -> vtkInformationStringVectorKey
        C++: static vtkInformationStringVectorKey *INPUT_REQUIRED_DATA_TYPE(
            )
        
        \ingroup InformationKeys
        """
        ...
    
    def INPUT_REQUIRED_FIELDS(self):
        """
        V.INPUT_REQUIRED_FIELDS() -> vtkInformationInformationVectorKey
        C++: static vtkInformationInformationVectorKey *INPUT_REQUIRED_FIELDS(
            )
        
        \ingroup InformationKeys
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def ModifyRequest(self, vtkInformation, p_int):
        """
        V.ModifyRequest(vtkInformation, int) -> int
        C++: virtual int ModifyRequest(vtkInformation *request, int when)
        
        This method gives the algorithm a chance to modify the contents
        of a request before or after (specified in the when argument) it
        is forwarded. The default implementation is empty. Returns 1 on
        success, 0 on failure. When can be either
        vtkExecutive::BeforeForward or vtkExecutive::AfterForward.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAlgorithm
        C++: vtkAlgorithm *NewInstance()
        """
        ...
    
    def ProcessRequest(self, vtkInformation, vtkCollection, vtkInformationVector):
        """
        V.ProcessRequest(vtkInformation, vtkCollection,
            vtkInformationVector) -> int
        C++: vtkTypeBool ProcessRequest(vtkInformation *request,
            vtkCollection *inInfo, vtkInformationVector *outInfo)
        
        Version of ProcessRequest() that is wrapped. This converts the
        collection to an array and calls the other version.
        """
        ...
    
    def PropagateUpdateExtent(self):
        """
        V.PropagateUpdateExtent()
        C++: virtual void PropagateUpdateExtent()
        
        Propagate meta-data upstream.
        """
        ...
    
    def ReleaseDataFlagOff(self):
        """
        V.ReleaseDataFlagOff()
        C++: void ReleaseDataFlagOff()
        
        Turn release data flag on or off for all output ports.
        """
        ...
    
    def ReleaseDataFlagOn(self):
        """
        V.ReleaseDataFlagOn()
        C++: void ReleaseDataFlagOn()
        
        Turn release data flag on or off for all output ports.
        """
        ...
    
    def RemoveAllInputConnections(self, p_int):
        """
        V.RemoveAllInputConnections(int)
        C++: virtual void RemoveAllInputConnections(int port)
        
        Removes all input connections.
        """
        ...
    
    def RemoveAllInputs(self):
        """
        V.RemoveAllInputs()
        C++: void RemoveAllInputs()
        
        Remove all the input data.
        """
        ...
    
    def RemoveInputConnection(self, p_int, vtkAlgorithmOutput):
        """
        V.RemoveInputConnection(int, vtkAlgorithmOutput)
        C++: virtual void RemoveInputConnection(int port,
            vtkAlgorithmOutput *input)
        V.RemoveInputConnection(int, int)
        C++: virtual void RemoveInputConnection(int port, int idx)
        
        Remove a connection from the given input port index.  See
        SetInputConnection() for details on input connection.  This
        method is the complement to AddInputConnection() in that it
        removes only the connection specified without affecting other
        connections.  Typical usage is
        
        * filter2->RemoveInputConnection(0, filter1->GetOutputPort(0)).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAlgorithm
        C++: static vtkAlgorithm *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAbortExecute(self, p_int):
        """
        V.SetAbortExecute(int)
        C++: virtual void SetAbortExecute(vtkTypeBool _arg)
        
        Set/Get the AbortExecute flag for the process object. Process
        objects may handle premature termination of execution in
        different ways.
        """
        ...
    
    def SetDefaultExecutivePrototype(self, vtkExecutive):
        """
        V.SetDefaultExecutivePrototype(vtkExecutive)
        C++: static void SetDefaultExecutivePrototype(vtkExecutive *proto)
        
        If the DefaultExecutivePrototype is set, a copy of it is created
        in CreateDefaultExecutive() using NewInstance().
        """
        ...
    
    def SetExecutive(self, vtkExecutive):
        """
        V.SetExecutive(vtkExecutive)
        C++: virtual void SetExecutive(vtkExecutive *executive)
        
        Set this algorithm's executive.  This algorithm is removed from
        any executive to which it has previously been assigned and then
        assigned to the given executive.
        """
        ...
    
    def SetInformation(self, vtkInformation):
        """
        V.SetInformation(vtkInformation)
        C++: virtual void SetInformation(vtkInformation *)
        
        Set/Get the information object associated with this algorithm.
        """
        ...
    
    def SetInputArrayToProcess(self, p_int, p_int_1, p_int_2, p_int_3, string):
        """
        V.SetInputArrayToProcess(int, int, int, int, string)
        C++: virtual void SetInputArrayToProcess(int idx, int port,
            int connection, int fieldAssociation, const char *name)
        V.SetInputArrayToProcess(int, int, int, int, int)
        C++: virtual void SetInputArrayToProcess(int idx, int port,
            int connection, int fieldAssociation, int fieldAttributeType)
        V.SetInputArrayToProcess(int, vtkInformation)
        C++: virtual void SetInputArrayToProcess(int idx,
            vtkInformation *info)
        V.SetInputArrayToProcess(int, int, int, string, string)
        C++: virtual void SetInputArrayToProcess(int idx, int port,
            int connection, const char *fieldAssociation,
            const char *attributeTypeorName)
        
        Set the input data arrays that this algorithm will process.
        Specifically the idx array that this algorithm will process
        (starting from 0) is the array on port, connection with the
        specified association and name or attribute type (such as
        SCALARS). The fieldAssociation refers to which field in the data
        object the array is stored. See vtkDataObject::FieldAssociations
        for detail.
        """
        ...
    
    def SetInputConnection(self, p_int, vtkAlgorithmOutput):
        """
        V.SetInputConnection(int, vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(int port,
            vtkAlgorithmOutput *input)
        V.SetInputConnection(vtkAlgorithmOutput)
        C++: virtual void SetInputConnection(vtkAlgorithmOutput *input)
        
        Set the connection for the given input port index.  Each input
        port of a filter has a specific purpose.  A port may have zero or
        more connections and the required number is specified by each
        filter.  Setting the connection with this method removes all
        other connections from the port.  To add more than one connection
        use AddInputConnection().
        
        * The input for the connection is the output port of another
        * filter, which is obtained with GetOutputPort().  Typical usage
          is
        
        * filter2->SetInputConnection(0, filter1->GetOutputPort(0)).
        """
        ...
    
    def SetInputDataObject(self, p_int, vtkDataObject):
        """
        V.SetInputDataObject(int, vtkDataObject)
        C++: virtual void SetInputDataObject(int port,
            vtkDataObject *data)
        V.SetInputDataObject(vtkDataObject)
        C++: virtual void SetInputDataObject(vtkDataObject *data)
        
        Sets the data-object as an input on the given port index. Setting
        the input with this method removes all other connections from the
        port. Internally, this method creates a vtkTrivialProducer
        instance and sets that as the input-connection for the given
        port. It is safe to call this method repeatedly with the same
        input data object. The MTime of the vtkAlgorithm will not change
        unless the data object changed.
        """
        ...
    
    def SetProgress(self, p_float):
        """
        V.SetProgress(float)
        C++: void SetProgress(double)
        
        `SetProgress` is deprecated. Subclasses should use
        `UpdateProgress` to report progress updates.
        """
        ...
    
    def SetProgressObserver(self, vtkProgressObserver):
        """
        V.SetProgressObserver(vtkProgressObserver)
        C++: void SetProgressObserver(vtkProgressObserver *)
        
        If an ProgressObserver is set, the algorithm will report progress
        through it rather than directly. This means that it will call
        UpdateProgress() on the ProgressObserver rather than itself
        report it and set progress. This is most useful in situations
        where multiple threads are executing an algorithm at the same
        time and want to handle progress locally.
        """
        ...
    
    def SetProgressShiftScale(self, p_float, p_float_1):
        """
        V.SetProgressShiftScale(float, float)
        C++: void SetProgressShiftScale(double shift, double scale)
        
        Specify the shift and scale values to use to apply to the
        progress amount when `UpdateProgress` is called. By default shift
        is set to 0, and scale is set to 1.0. This is useful when the
        vtkAlgorithm instance is used as an internal algorithm to solve
        only a part of a whole problem.
        
        If calling on a internal vtkAlgorithm, make sure you take into
        consideration that values set of the outer vtkAlgorithm as well
        since the outer vtkAlgorithm itself may be nested in another
        algorithm.
        
        ote SetProgressShiftScale does not modify the MTime of the
        algorithm.
        """
        ...
    
    def SetProgressText(self, string):
        """
        V.SetProgressText(string)
        C++: void SetProgressText(const char *ptext)
        
        Set the current text message associated with the progress state.
        This may be used by a calling process/GUI. Note: Because
        SetProgressText() is called from inside RequestData() it does not
        modify the algorithm object. Algorithms are not allowed to modify
        themselves from inside RequestData().
        """
        ...
    
    def SetReleaseDataFlag(self, p_int):
        """
        V.SetReleaseDataFlag(int)
        C++: virtual void SetReleaseDataFlag(int)
        
        Turn release data flag on or off for all output ports.
        """
        ...
    
    def Update(self, p_int):
        """
        V.Update(int)
        C++: virtual void Update(int port)
        V.Update()
        C++: virtual void Update()
        V.Update(int, vtkInformationVector) -> int
        C++: virtual vtkTypeBool Update(int port,
            vtkInformationVector *requests)
        V.Update(vtkInformation) -> int
        C++: virtual vtkTypeBool Update(vtkInformation *requests)
        
        Bring this algorithm's outputs up-to-date.
        """
        ...
    
    def UpdateDataObject(self):
        """
        V.UpdateDataObject()
        C++: virtual void UpdateDataObject()
        
        Create output object(s).
        """
        ...
    
    def UpdateExtent(self, ):
        """
        V.UpdateExtent((int, int, int, int, int, int)) -> int
        C++: virtual int UpdateExtent(const int extents[6])
        
        Convenience method to update an algorithm after passing requests
        to its first output port. Supports extent request.
        """
        ...
    
    def UpdateExtentIsEmpty(self, vtkInformation, vtkDataObject):
        """
        V.UpdateExtentIsEmpty(vtkInformation, vtkDataObject) -> int
        C++: int UpdateExtentIsEmpty(vtkInformation *pinfo,
            vtkDataObject *output)
        V.UpdateExtentIsEmpty(vtkInformation, int) -> int
        C++: int UpdateExtentIsEmpty(vtkInformation *pinfo,
            int extentType)
        
        This detects when the UpdateExtent will generate no data This
        condition is satisfied when the UpdateExtent has zero volume
        (0,-1,...) or the UpdateNumberOfPieces is 0. The source uses this
        call to determine whether to call Execute.
        """
        ...
    
    def UpdateInformation(self):
        """
        V.UpdateInformation()
        C++: virtual void UpdateInformation()
        
        Bring the algorithm's information up-to-date.
        """
        ...
    
    def UpdatePiece(self, p_int, p_int_1, p_int_2, ):
        """
        V.UpdatePiece(int, int, int, (int, int, int, int, int, int))
            -> int
        C++: virtual int UpdatePiece(int piece, int numPieces,
            int ghostLevels, const int extents[6]=nullptr)
        
        Convenience method to update an algorithm after passing requests
        to its first output port. See documentation for Update(int port,
        vtkInformationVector* requests) for details. Supports piece and
        extent (optional) requests.
        """
        ...
    
    def UpdateProgress(self, p_float):
        """
        V.UpdateProgress(float)
        C++: void UpdateProgress(double amount)
        
        Update the progress of the process object. If a ProgressMethod
        exists, executes it.  Then set the Progress ivar to amount. The
        parameter amount should range between (0,1).
        """
        ...
    
    def UpdateTimeStep(self, p_float, p_int, p_int_1, p_int_2, ):
        """
        V.UpdateTimeStep(float, int, int, int, (int, int, int, int, int,
            int)) -> int
        C++: virtual int UpdateTimeStep(double time, int piece=-1,
            int numPieces=1, int ghostLevels=0,
            const int extents[6]=nullptr)
        
        Convenience method to update an algorithm after passing requests
        to its first output port. See documentation for Update(int port,
        vtkInformationVector* requests) for details. Supports time, piece
        (optional) and extent (optional) requests.
        """
        ...
    
    def UpdateWholeExtent(self):
        """
        V.UpdateWholeExtent()
        C++: virtual void UpdateWholeExtent()
        
        Bring this algorithm's outputs up-to-date.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DEFAULT_PRECISION = ...
    DesiredOutputPrecision = ...
    DOUBLE_PRECISION = ...
    SINGLE_PRECISION = ...
    __dict__ = ...
    __vtkname__ = ...


