"""
This type stub file was generated by pyright.
"""

from .vtkStreamingDemandDrivenPipeline import vtkStreamingDemandDrivenPipeline

class vtkCompositeDataPipeline(vtkStreamingDemandDrivenPipeline):
    """
    vtkCompositeDataPipeline - Executive supporting composite datasets.
    
    Superclass: vtkStreamingDemandDrivenPipeline
    
    vtkCompositeDataPipeline is an executive that supports the processing
    of composite dataset. It supports algorithms that are aware of
    composite dataset as well as those that are not. Type checking is
    performed at run time. Algorithms that are not composite
    dataset-aware have to support all dataset types contained in the
    composite dataset. The pipeline execution can be summarized as
    follows:
    
    * REQUEST_INFORMATION: The producers have to provide information
      about the contents of the composite dataset in this pass. Sources
      that can produce more than one piece (note that a piece is
      different than a block; each piece consistes of 0 or more blocks)
      should set CAN_HANDLE_PIECE_REQUEST.
    
    * REQUEST_UPDATE_EXTENT: This pass is identical to the one
      implemented in vtkStreamingDemandDrivenPipeline
    
    * REQUEST_DATA: This is where the algorithms execute. If the
      vtkCompositeDataPipeline is assigned to a simple filter, it will
      invoke the  vtkStreamingDemandDrivenPipeline passes in a loop,
      passing a different block each time and will collect the results in
    a composite dataset.
    @sa
     vtkCompositeDataSet
    """
    def BLOCK_AMOUNT_OF_DETAIL(self):
        """
        V.BLOCK_AMOUNT_OF_DETAIL() -> vtkInformationDoubleKey
        C++: static vtkInformationDoubleKey *BLOCK_AMOUNT_OF_DETAIL()
        
        BLOCK_AMOUNT_OF_DETAIL is a key placed in the information about a
        multi-block dataset that indicates how complex the block is.  It
        is intended to work with multi-resolution streaming code.  For
        example in a multi-resolution dataset of points, this key might
        store the number of points.
        *** THIS IS AN EXPERIMENTAL FEATURE. IT MAY CHANGE WITHOUT NOTICE
        ***
        """
        ...
    
    def COMPOSITE_DATA_META_DATA(self):
        """
        V.COMPOSITE_DATA_META_DATA() -> vtkInformationObjectBaseKey
        C++: static vtkInformationObjectBaseKey *COMPOSITE_DATA_META_DATA(
            )
        
        COMPOSITE_DATA_META_DATA is a key placed in the output-port
        information by readers/sources producing composite datasets. This
        meta-data provides information about the structure of the
        composite dataset and things like data-bounds etc.
        *** THIS IS AN EXPERIMENTAL FEATURE. IT MAY CHANGE WITHOUT NOTICE
        ***
        """
        ...
    
    def GetCompositeOutputData(self, p_int):
        """
        V.GetCompositeOutputData(int) -> vtkDataObject
        C++: vtkDataObject *GetCompositeOutputData(int port)
        
        Returns the data object stored with the DATA_OBJECT() in the
        output port
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LOAD_REQUESTED_BLOCKS(self):
        """
        V.LOAD_REQUESTED_BLOCKS() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *LOAD_REQUESTED_BLOCKS()
        
        An integer key that indicates to the source to load all requested
        blocks specified in UPDATE_COMPOSITE_INDICES.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCompositeDataPipeline
        C++: vtkCompositeDataPipeline *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCompositeDataPipeline
        C++: static vtkCompositeDataPipeline *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def UPDATE_COMPOSITE_INDICES(self):
        """
        V.UPDATE_COMPOSITE_INDICES() -> vtkInformationIntegerVectorKey
        C++: static vtkInformationIntegerVectorKey *UPDATE_COMPOSITE_INDICES(
            )
        
        UPDATE_COMPOSITE_INDICES is a key placed in the request to
        request a set of composite indices from a reader/source producing
        composite dataset. Typically, the reader publishes its structure
        using COMPOSITE_DATA_META_DATA() and then the sink requests
        blocks of interest using UPDATE_COMPOSITE_INDICES(). Note that
        UPDATE_COMPOSITE_INDICES has to be sorted vector with increasing
        indices.
        *** THIS IS AN EXPERIMENTAL FEATURE. IT MAY CHANGE WITHOUT NOTICE
        ***
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


