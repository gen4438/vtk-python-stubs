"""
This type stub file was generated by pyright.
"""

from .vtkAlgorithm import vtkAlgorithm

class vtkEnsembleSource(vtkAlgorithm):
    """
    vtkEnsembleSource - source that manages dataset ensembles
    
    Superclass: vtkAlgorithm
    
    vtkEnsembleSource manages a collection of data sources in order to
    represent a dataset ensemble. It has the ability to provide meta-data
    about the ensemble in the form of a table, using the META_DATA key as
    well as accept a pipeline request using the UPDATE_MEMBER key. Note
    that it is expected that all ensemble members produce data of the
    same type.
    """
    def AddMember(self, vtkAlgorithm):
        """
        V.AddMember(vtkAlgorithm)
        C++: void AddMember(vtkAlgorithm *)
        
        Add an algorithm (source) that will produce the next ensemble
        member. This algorithm will be passed the REQUEST_INFORMATION,
        REQUEST_UPDATE_EXTENT and REQUEST_DATA pipeline passes for
        execution.
        """
        ...
    
    def GetCurrentMember(self):
        """
        V.GetCurrentMember() -> int
        C++: virtual unsigned int GetCurrentMember()
        
        Set/Get the current ensemble member to process. Note that this
        data member will not be used if the UPDATE_MEMBER key is present
        in the pipeline. Also, this data member may be removed in the
        future. Unless it is absolutely necessary to use this data
        member, use the UPDATE_MEMBER key instead.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfMembers(self):
        """
        V.GetNumberOfMembers() -> int
        C++: unsigned int GetNumberOfMembers()
        
        Returns the number of ensemble members.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def META_DATA(self):
        """
        V.META_DATA() -> vtkInformationDataObjectMetaDataKey
        C++: static vtkInformationDataObjectMetaDataKey *META_DATA()
        
        Meta-data for the ensemble. This is set with SetMetaData.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEnsembleSource
        C++: vtkEnsembleSource *NewInstance()
        """
        ...
    
    def RemoveAllMembers(self):
        """
        V.RemoveAllMembers()
        C++: void RemoveAllMembers()
        
        Removes all ensemble members.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEnsembleSource
        C++: static vtkEnsembleSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCurrentMember(self, p_int):
        """
        V.SetCurrentMember(int)
        C++: virtual void SetCurrentMember(unsigned int _arg)
        
        Set/Get the current ensemble member to process. Note that this
        data member will not be used if the UPDATE_MEMBER key is present
        in the pipeline. Also, this data member may be removed in the
        future. Unless it is absolutely necessary to use this data
        member, use the UPDATE_MEMBER key instead.
        """
        ...
    
    def SetMetaData(self, vtkTable):
        """
        V.SetMetaData(vtkTable)
        C++: void SetMetaData(vtkTable *)
        
        Set the meta-data that will be propagated downstream. Make sure
        that this table has as many rows as the ensemble members and the
        meta-data for each row matches the corresponding ensemble source.
        """
        ...
    
    def UPDATE_MEMBER(self):
        """
        V.UPDATE_MEMBER() -> vtkInformationIntegerRequestKey
        C++: static vtkInformationIntegerRequestKey *UPDATE_MEMBER()
        
        Key used to request a particular ensemble member.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


