"""
This type stub file was generated by pyright.
"""

from .vtkReaderAlgorithm import vtkReaderAlgorithm

class vtkParallelReader(vtkReaderAlgorithm):
    """
    vtkParallelReader - Superclass for algorithms that are parallel aware
    
    Superclass: vtkReaderAlgorithm
    
    vtkParallelReader is a vtkReaderAlgorithm subclass that provides a
    specialized API to develop readers that are parallel aware (i.e. can
    handle piece requests) but do not natively support time series. This
    reader adds support for file series in order to support time series.
    """
    def AddFileName(self, string):
        """
        V.AddFileName(string)
        C++: void AddFileName(const char *fname)
        
        Add a filename to be read. Since this superclass handles file
        series to support time, multiple filenames can be added. Note
        that the time values are either integers growing sequentially, or
        are obtained from individual files as supported by the subclass.
        """
        ...
    
    def ClearFileNames(self):
        """
        V.ClearFileNames()
        C++: void ClearFileNames()
        
        Removes all filenames stored by the reader.
        """
        ...
    
    def GetCurrentFileName(self):
        """
        V.GetCurrentFileName() -> string
        C++: const char *GetCurrentFileName()
        
        Returns the filename that was last loaded by the reader. This is
        set internally in ReadMesh()
        """
        ...
    
    def GetFileName(self, p_int):
        """
        V.GetFileName(int) -> string
        C++: const char *GetFileName(int i)
        
        Returns a particular filename stored by the reader.
        """
        ...
    
    def GetNumberOfFileNames(self):
        """
        V.GetNumberOfFileNames() -> int
        C++: int GetNumberOfFileNames()
        
        Returns the number of filenames stored by the reader.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkParallelReader
        C++: vtkParallelReader *NewInstance()
        """
        ...
    
    def ReadArrays(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadArrays(int, int, int, int, vtkDataObject) -> int
        C++: int ReadArrays(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def ReadMesh(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadMesh(int, int, int, int, vtkDataObject) -> int
        C++: int ReadMesh(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def ReadMetaData(self, vtkInformation):
        """
        V.ReadMetaData(vtkInformation) -> int
        C++: int ReadMetaData(vtkInformation *metadata) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def ReadPoints(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadPoints(int, int, int, int, vtkDataObject) -> int
        C++: int ReadPoints(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output) override;
        
        This is the superclass API overridden by this class to provide
        time support internally. Subclasses should not normally have to
        override these methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkParallelReader
        C++: static vtkParallelReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


