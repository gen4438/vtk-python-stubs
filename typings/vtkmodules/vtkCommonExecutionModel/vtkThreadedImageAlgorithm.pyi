"""
This type stub file was generated by pyright.
"""

from .vtkImageAlgorithm import vtkImageAlgorithm

class vtkThreadedImageAlgorithm(vtkImageAlgorithm):
    """
    vtkThreadedImageAlgorithm - Generic filter that has one input.
    
    Superclass: vtkImageAlgorithm
    
    vtkThreadedImageAlgorithm is a filter superclass that hides much of
    the pipeline complexity. It handles breaking the pipeline execution
    into smaller extents so that the vtkImageData limits are observed. It
    also provides support for multithreading. If you don't need any of
    this functionality, consider using vtkSimpleImageToImageAlgorithm
    instead.
    @sa
    vtkSimpleImageToImageAlgorithm
    """
    def GetDesiredBytesPerPiece(self):
        """
        V.GetDesiredBytesPerPiece() -> int
        C++: virtual vtkIdType GetDesiredBytesPerPiece()
        
        The desired bytes per piece when volume is split for execution.
        When SMP is enabled, this is used to subdivide the volume into
        pieces. Smaller pieces allow for better dynamic load balancing,
        but increase the total overhead. The default is 65536 bytes.
        """
        ...
    
    def GetEnableSMP(self):
        """
        V.GetEnableSMP() -> bool
        C++: virtual bool GetEnableSMP()
        
        Enable/Disable SMP for threading.
        """
        ...
    
    def GetGlobalDefaultEnableSMP(self):
        """
        V.GetGlobalDefaultEnableSMP() -> bool
        C++: static bool GetGlobalDefaultEnableSMP()
        
        Global Disable SMP for all derived Imaging filters.
        """
        ...
    
    def GetMinimumPieceSize(self):
        """
        V.GetMinimumPieceSize() -> (int, int, int)
        C++: virtual int *GetMinimumPieceSize()
        
        The minimum piece size when volume is split for execution. By
        default, the minimum size is (16,1,1).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfThreads(self):
        """
        V.GetNumberOfThreads() -> int
        C++: virtual int GetNumberOfThreads()
        
        Get/Set the number of threads to create when rendering. This is
        ignored if EnableSMP is On.
        """
        ...
    
    def GetNumberOfThreadsMaxValue(self):
        """
        V.GetNumberOfThreadsMaxValue() -> int
        C++: virtual int GetNumberOfThreadsMaxValue()
        
        Get/Set the number of threads to create when rendering. This is
        ignored if EnableSMP is On.
        """
        ...
    
    def GetNumberOfThreadsMinValue(self):
        """
        V.GetNumberOfThreadsMinValue() -> int
        C++: virtual int GetNumberOfThreadsMinValue()
        
        Get/Set the number of threads to create when rendering. This is
        ignored if EnableSMP is On.
        """
        ...
    
    def GetSplitMode(self):
        """
        V.GetSplitMode() -> int
        C++: virtual int GetSplitMode()
        
        Set the method used to divide the volume into pieces. Slab mode
        splits the volume along the Z direction first, Beam mode splits
        evenly along the Z and Y directions, and Block mode splits evenly
        along all three directions. Most filters use Slab mode as the
        default.
        """
        ...
    
    def GetSplitModeMaxValue(self):
        """
        V.GetSplitModeMaxValue() -> int
        C++: virtual int GetSplitModeMaxValue()
        
        Set the method used to divide the volume into pieces. Slab mode
        splits the volume along the Z direction first, Beam mode splits
        evenly along the Z and Y directions, and Block mode splits evenly
        along all three directions. Most filters use Slab mode as the
        default.
        """
        ...
    
    def GetSplitModeMinValue(self):
        """
        V.GetSplitModeMinValue() -> int
        C++: virtual int GetSplitModeMinValue()
        
        Set the method used to divide the volume into pieces. Slab mode
        splits the volume along the Z direction first, Beam mode splits
        evenly along the Z and Y directions, and Block mode splits evenly
        along all three directions. Most filters use Slab mode as the
        default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkThreadedImageAlgorithm
        C++: vtkThreadedImageAlgorithm *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkThreadedImageAlgorithm
        C++: static vtkThreadedImageAlgorithm *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetDesiredBytesPerPiece(self, p_int):
        """
        V.SetDesiredBytesPerPiece(int)
        C++: virtual void SetDesiredBytesPerPiece(vtkIdType _arg)
        
        The desired bytes per piece when volume is split for execution.
        When SMP is enabled, this is used to subdivide the volume into
        pieces. Smaller pieces allow for better dynamic load balancing,
        but increase the total overhead. The default is 65536 bytes.
        """
        ...
    
    def SetEnableSMP(self, bool):
        """
        V.SetEnableSMP(bool)
        C++: virtual void SetEnableSMP(bool _arg)
        
        Enable/Disable SMP for threading.
        """
        ...
    
    def SetGlobalDefaultEnableSMP(self, bool):
        """
        V.SetGlobalDefaultEnableSMP(bool)
        C++: static void SetGlobalDefaultEnableSMP(bool enable)
        
        Global Disable SMP for all derived Imaging filters.
        """
        ...
    
    def SetMinimumPieceSize(self, p_int, p_int_1, p_int_2):
        """
        V.SetMinimumPieceSize(int, int, int)
        C++: virtual void SetMinimumPieceSize(int _arg1, int _arg2,
            int _arg3)
        V.SetMinimumPieceSize((int, int, int))
        C++: virtual void SetMinimumPieceSize(const int _arg[3])
        
        The minimum piece size when volume is split for execution. By
        default, the minimum size is (16,1,1).
        """
        ...
    
    def SetNumberOfThreads(self, p_int):
        """
        V.SetNumberOfThreads(int)
        C++: virtual void SetNumberOfThreads(int _arg)
        
        Get/Set the number of threads to create when rendering. This is
        ignored if EnableSMP is On.
        """
        ...
    
    def SetSplitMode(self, p_int):
        """
        V.SetSplitMode(int)
        C++: virtual void SetSplitMode(int _arg)
        
        Set the method used to divide the volume into pieces. Slab mode
        splits the volume along the Z direction first, Beam mode splits
        evenly along the Z and Y directions, and Block mode splits evenly
        along all three directions. Most filters use Slab mode as the
        default.
        """
        ...
    
    def SetSplitModeToBeam(self):
        """
        V.SetSplitModeToBeam()
        C++: void SetSplitModeToBeam()
        
        Set the method used to divide the volume into pieces. Slab mode
        splits the volume along the Z direction first, Beam mode splits
        evenly along the Z and Y directions, and Block mode splits evenly
        along all three directions. Most filters use Slab mode as the
        default.
        """
        ...
    
    def SetSplitModeToBlock(self):
        """
        V.SetSplitModeToBlock()
        C++: void SetSplitModeToBlock()
        
        Set the method used to divide the volume into pieces. Slab mode
        splits the volume along the Z direction first, Beam mode splits
        evenly along the Z and Y directions, and Block mode splits evenly
        along all three directions. Most filters use Slab mode as the
        default.
        """
        ...
    
    def SetSplitModeToSlab(self):
        """
        V.SetSplitModeToSlab()
        C++: void SetSplitModeToSlab()
        
        Set the method used to divide the volume into pieces. Slab mode
        splits the volume along the Z direction first, Beam mode splits
        evenly along the Z and Y directions, and Block mode splits evenly
        along all three directions. Most filters use Slab mode as the
        default.
        """
        ...
    
    def SplitExtent(self, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.SplitExtent([int, int, int, int, int, int], [int, int, int, int,
             int, int], int, int) -> int
        C++: virtual int SplitExtent(int splitExt[6], int startExt[6],
            int num, int total)
        
        Putting this here until I merge graphics and imaging streaming.
        """
        ...
    
    def ThreadedExecute(self, vtkImageData, vtkImageData_1, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., *args, **kwargs):
        """
        V.ThreadedExecute(vtkImageData, vtkImageData, [int, int, int, int,
             int, int], int)
        C++: virtual void ThreadedExecute(vtkImageData *inData,
            vtkImageData *outData, int extent[6], int threadId)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


