"""
This type stub file was generated by pyright.
"""

from .vtkDataSetAlgorithm import vtkDataSetAlgorithm

class vtkCastToConcrete(vtkDataSetAlgorithm):
    """
    vtkCastToConcrete - works around type-checking limitations
    
    Superclass: vtkDataSetAlgorithm
    
    vtkCastToConcrete is a filter that works around type-checking
    limitations in the filter classes. Some filters generate abstract
    types on output, and cannot be connected to the input of filters
    requiring a concrete input type. For example, vtkElevationFilter
    generates vtkDataSet for output, and cannot be connected to
    vtkDecimate, because vtkDecimate requires vtkPolyData as input. This
    is true even though (in this example) the input to vtkElevationFilter
    is of type vtkPolyData, and you know the output of vtkElevationFilter
    is the same type as its input.
    
    vtkCastToConcrete performs run-time checking to insure that output
    type is of the right type. An error message will result if you try to
    cast an input type improperly. Otherwise, the filter performs the
    appropriate cast and returns the data.
    
    @warning
    You must specify the input before you can get the output. Otherwise
    an error results.
    
    @sa
    vtkDataSetAlgorithm vtkPointSetToPointSetFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCastToConcrete
        C++: vtkCastToConcrete *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCastToConcrete
        C++: static vtkCastToConcrete *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


