"""
This type stub file was generated by pyright.
"""

from .vtkDemandDrivenPipeline import vtkDemandDrivenPipeline

class vtkStreamingDemandDrivenPipeline(vtkDemandDrivenPipeline):
    """
    vtkStreamingDemandDrivenPipeline - Executive supporting partial
    updates.
    
    Superclass: vtkDemandDrivenPipeline
    
    vtkStreamingDemandDrivenPipeline is an executive that supports
    updating only a portion of the data set in the pipeline.  This is the
    style of pipeline update that is provided by the old-style VTK 4.x
    pipeline.  Instead of always updating an entire data set, this
    executive supports asking for pieces or sub-extents.
    """
    def BOUNDS(self):
        """
        V.BOUNDS() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *BOUNDS()
        
        key to record the bounds of a dataset.\ingroup InformationKeys
        """
        ...
    
    def COMBINED_UPDATE_EXTENT(self):
        """
        V.COMBINED_UPDATE_EXTENT() -> vtkInformationIntegerVectorKey
        C++: static vtkInformationIntegerVectorKey *COMBINED_UPDATE_EXTENT(
            )
        
        Key for combining the update extents requested by all consumers,
        so that the final extent that is produced satisfies all
        consumers.\ingroup InformationKeys
        """
        ...
    
    def CONTINUE_EXECUTING(self):
        """
        V.CONTINUE_EXECUTING() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *CONTINUE_EXECUTING()
        
        Key for an algorithm to store in a request to tell this executive
        to keep executing it.\ingroup InformationKeys
        """
        ...
    
    def EXACT_EXTENT(self):
        """
        V.EXACT_EXTENT() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *EXACT_EXTENT()
        
        Key to specify the request for exact extent in pipeline
        information.\ingroup InformationKeys
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRequestExactExtent(self, p_int):
        """
        V.GetRequestExactExtent(int) -> int
        C++: int GetRequestExactExtent(int port)
        
        This request flag indicates whether the requester can handle more
        data than requested for the given port.  Right now it is used in
        vtkImageData.  Image filters can return more data than requested.
        The consumer cannot handle this (i.e. DataSetToDataSetfilter) the
        image will crop itself.  This functionality used to be in
        ImageToStructuredPoints.
        """
        ...
    
    def GetUpdateExtent(self, vtkInformation, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetUpdateExtent(vtkInformation, [int, int, int, int, int, int])
        C++: static void GetUpdateExtent(vtkInformation *, int extent[6])
        V.GetUpdateExtent(vtkInformation) -> (int, ...)
        C++: static int *GetUpdateExtent(vtkInformation *)
        
        Get/Set the update extent for output ports that use 3D extents.
        """
        ...
    
    def GetUpdateGhostLevel(self, vtkInformation):
        """
        V.GetUpdateGhostLevel(vtkInformation) -> int
        C++: static int GetUpdateGhostLevel(vtkInformation *)
        
        Set/Get the update piece, update number of pieces, and update
        number of ghost levels for an output port.  Similar to update
        extent in 3D.
        """
        ...
    
    def GetUpdateNumberOfPieces(self, vtkInformation):
        """
        V.GetUpdateNumberOfPieces(vtkInformation) -> int
        C++: static int GetUpdateNumberOfPieces(vtkInformation *)
        
        Set/Get the update piece, update number of pieces, and update
        number of ghost levels for an output port.  Similar to update
        extent in 3D.
        """
        ...
    
    def GetUpdatePiece(self, vtkInformation):
        """
        V.GetUpdatePiece(vtkInformation) -> int
        C++: static int GetUpdatePiece(vtkInformation *)
        
        Set/Get the update piece, update number of pieces, and update
        number of ghost levels for an output port.  Similar to update
        extent in 3D.
        """
        ...
    
    def GetWholeExtent(self, vtkInformation, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetWholeExtent(vtkInformation, [int, int, int, int, int, int])
        C++: static void GetWholeExtent(vtkInformation *, int extent[6])
        V.GetWholeExtent(vtkInformation) -> (int, int, int, int, int, int)
        C++: static int *GetWholeExtent(vtkInformation *)
        
        Set/Get the whole extent of an output port.  The whole extent is
        meta data for structured data sets.  It gets set by the algorithm
        during the update information pass.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStreamingDemandDrivenPipeline
        C++: vtkStreamingDemandDrivenPipeline *NewInstance()
        """
        ...
    
    def PropagateTime(self, p_int):
        """
        V.PropagateTime(int) -> int
        C++: int PropagateTime(int outputPort)
        
        Propagate time through the pipeline. this is a special pass only
        necessary if there is temporal meta data that must be updated
        """
        ...
    
    def PropagateUpdateExtent(self, p_int):
        """
        V.PropagateUpdateExtent(int) -> int
        C++: int PropagateUpdateExtent(int outputPort)
        
        Propagate the update request from the given output port back
        through the pipeline.  Should be called only when information is
        up to date.
        """
        ...
    
    def REQUEST_TIME_DEPENDENT_INFORMATION(self):
        """
        V.REQUEST_TIME_DEPENDENT_INFORMATION() -> vtkInformationRequestKey
        C++: static vtkInformationRequestKey *REQUEST_TIME_DEPENDENT_INFORMATION(
            )
        
        Key defining a request to make sure the meta information is up to
        date.\ingroup InformationKeys
        """
        ...
    
    def REQUEST_UPDATE_EXTENT(self):
        """
        V.REQUEST_UPDATE_EXTENT() -> vtkInformationRequestKey
        C++: static vtkInformationRequestKey *REQUEST_UPDATE_EXTENT()
        
        Key defining a request to propagate the update extent
        upstream.\ingroup InformationKeys
        """
        ...
    
    def REQUEST_UPDATE_TIME(self):
        """
        V.REQUEST_UPDATE_TIME() -> vtkInformationRequestKey
        C++: static vtkInformationRequestKey *REQUEST_UPDATE_TIME()
        
        Key defining a request to propagate the update extent
        upstream.\ingroup InformationKeys
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStreamingDemandDrivenPipeline
        C++: static vtkStreamingDemandDrivenPipeline *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetRequestExactExtent(self, p_int, p_int_1):
        """
        V.SetRequestExactExtent(int, int) -> int
        C++: int SetRequestExactExtent(int port, int flag)
        
        This request flag indicates whether the requester can handle more
        data than requested for the given port.  Right now it is used in
        vtkImageData.  Image filters can return more data than requested.
        The consumer cannot handle this (i.e. DataSetToDataSetfilter) the
        image will crop itself.  This functionality used to be in
        ImageToStructuredPoints.
        """
        ...
    
    def SetWholeExtent(self, vtkInformation, p_int=..., p_int=..., p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetWholeExtent(vtkInformation, [int, int, int, int, int, int])
            -> int
        C++: static int SetWholeExtent(vtkInformation *, int extent[6])
        
        Set/Get the whole extent of an output port.  The whole extent is
        meta data for structured data sets.  It gets set by the algorithm
        during the update information pass.
        """
        ...
    
    def TIME_DEPENDENT_INFORMATION(self):
        """
        V.TIME_DEPENDENT_INFORMATION() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *TIME_DEPENDENT_INFORMATION()
        
        Whether there are time dependent meta information if there is,
        the pipeline will perform two extra passes to gather the time
        dependent information\ingroup InformationKeys
        """
        ...
    
    def TIME_RANGE(self):
        """
        V.TIME_RANGE() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *TIME_RANGE()
        
        Key to store available time range for continuous sources.\ingroup
        InformationKeys
        """
        ...
    
    def TIME_STEPS(self):
        """
        V.TIME_STEPS() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *TIME_STEPS()
        
        Key to store available time steps.\ingroup InformationKeys
        """
        ...
    
    def UNRESTRICTED_UPDATE_EXTENT(self):
        """
        V.UNRESTRICTED_UPDATE_EXTENT() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *UNRESTRICTED_UPDATE_EXTENT()
        
        This is set if the update extent is not restricted to the whole
        extent, for sources that can generate an extent of any requested
        size.\ingroup InformationKeys
        """
        ...
    
    def Update(self):
        """
        V.Update() -> int
        C++: vtkTypeBool Update() override;
        V.Update(int) -> int
        C++: vtkTypeBool Update(int port) override;
        V.Update(int, vtkInformationVector) -> int
        C++: virtual vtkTypeBool Update(int port,
            vtkInformationVector *requests)
        
        Bring the outputs up-to-date.
        """
        ...
    
    def UpdateTimeDependentInformation(self, p_int):
        """
        V.UpdateTimeDependentInformation(int) -> int
        C++: int UpdateTimeDependentInformation(int outputPort)
        
        Propagate time through the pipeline. this is a special pass only
        necessary if there is temporal meta data that must be updated
        """
        ...
    
    def UpdateWholeExtent(self):
        """
        V.UpdateWholeExtent() -> int
        C++: virtual vtkTypeBool UpdateWholeExtent()
        
        Bring the outputs up-to-date.
        """
        ...
    
    def UPDATE_EXTENT(self):
        """
        V.UPDATE_EXTENT() -> vtkInformationIntegerVectorKey
        C++: static vtkInformationIntegerVectorKey *UPDATE_EXTENT()
        
        \ingroup InformationKeys
        """
        ...
    
    def UPDATE_EXTENT_INITIALIZED(self):
        """
        V.UPDATE_EXTENT_INITIALIZED() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *UPDATE_EXTENT_INITIALIZED()
        
        Keys to store an update request in pipeline information.\ingroup
        InformationKeys
        """
        ...
    
    def UPDATE_NUMBER_OF_GHOST_LEVELS(self):
        """
        V.UPDATE_NUMBER_OF_GHOST_LEVELS() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *UPDATE_NUMBER_OF_GHOST_LEVELS(
            )
        
        \ingroup InformationKeys
        """
        ...
    
    def UPDATE_NUMBER_OF_PIECES(self):
        """
        V.UPDATE_NUMBER_OF_PIECES() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *UPDATE_NUMBER_OF_PIECES()
        
        \ingroup InformationKeys
        """
        ...
    
    def UPDATE_PIECE_NUMBER(self):
        """
        V.UPDATE_PIECE_NUMBER() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *UPDATE_PIECE_NUMBER()
        
        \ingroup InformationKeys
        """
        ...
    
    def UPDATE_TIME_STEP(self):
        """
        V.UPDATE_TIME_STEP() -> vtkInformationDoubleKey
        C++: static vtkInformationDoubleKey *UPDATE_TIME_STEP()
        
        Update time steps requested by the pipeline.\ingroup
        InformationKeys
        """
        ...
    
    def WHOLE_EXTENT(self):
        """
        V.WHOLE_EXTENT() -> vtkInformationIntegerVectorKey
        C++: static vtkInformationIntegerVectorKey *WHOLE_EXTENT()
        
        Key to store the whole extent provided in pipeline
        information.\ingroup InformationKeys
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


