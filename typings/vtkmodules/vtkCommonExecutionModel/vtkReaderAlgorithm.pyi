"""
This type stub file was generated by pyright.
"""

from .vtkAlgorithm import vtkAlgorithm

class vtkReaderAlgorithm(vtkAlgorithm):
    """
    vtkReaderAlgorithm - Superclass for readers that implement a
    simplified API.
    
    Superclass: vtkAlgorithm
    
    This class and associated subclasses were created to make it easier
    to develop readers. When directly subclassing from other algorithm
    classes one has to learn a general purpose API that somewhat
    obfuscates pipeline functionality behind information keys. One has to
    know how to find time and pieces requests using keys for example.
    Furthermore, these classes together with specialized executives can
    implement common reader functionality for things such as file series
    (for time and/or partitions), caching, mapping time requests to
    indices etc. This class implements the most basic API which is
    specialized as needed by subclasses (for file series for example).
    """
    def CreateOutput(self, vtkDataObject):
        """
        V.CreateOutput(vtkDataObject) -> vtkDataObject
        C++: virtual vtkDataObject *CreateOutput(
            vtkDataObject *currentOutput)
        
        This can be overridden by a subclass to create an output that is
        determined by the file being read. If the output is known at
        compile time, it is easier to override
        FillOutputPortInformation() to set
        vtkDataObject::DATA_TYPE_NAME(). The subclass should compare the
        new output type with the type of the currentOutput argument and
        return currentOutput without changing its reference count if the
        types are same.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkReaderAlgorithm
        C++: vtkReaderAlgorithm *NewInstance()
        """
        ...
    
    def ReadArrays(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadArrays(int, int, int, int, vtkDataObject) -> int
        C++: virtual int ReadArrays(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output)
        
        Read all the arrays (point, cell, field etc.). This is called
        after ReadPoints() so the data object should already contain the
        mesh and points.
        """
        ...
    
    def ReadMesh(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadMesh(int, int, int, int, vtkDataObject) -> int
        C++: virtual int ReadMesh(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output)
        
        Read the mesh (connectivity) for a given set of data
        partitioning, number of ghost levels and time step (index). The
        reader populates the data object passed in as the last argument.
        It is OK to read more than the mesh (points, arrays etc.).
        However, this may interfere with any caching implemented by the
        executive (i.e. cause more reads).
        """
        ...
    
    def ReadMetaData(self, vtkInformation):
        """
        V.ReadMetaData(vtkInformation) -> int
        C++: virtual int ReadMetaData(vtkInformation *metadata)
        
        Provide meta-data for the pipeline. This meta-data cannot vary
        over time as this method will not be called when only a request
        is changed. These include things like time steps. Subclasses may
        have specialized interfaces making this simpler.
        """
        ...
    
    def ReadPoints(self, p_int, p_int_1, p_int_2, p_int_3, vtkDataObject):
        """
        V.ReadPoints(int, int, int, int, vtkDataObject) -> int
        C++: virtual int ReadPoints(int piece, int npieces, int nghosts,
            int timestep, vtkDataObject *output)
        
        Read the points. The reader populates the input data object. This
        is called after ReadMesh() so the data object should already
        contain the mesh.
        """
        ...
    
    def ReadTimeDependentMetaData(self, p_int, vtkInformation):
        """
        V.ReadTimeDependentMetaData(int, vtkInformation) -> int
        C++: virtual int ReadTimeDependentMetaData(int, vtkInformation *)
        
        Provide meta-data for the pipeline. This meta-data can vary over
        time as this method will be called after a request is changed
        (such as time) These include things like whole extent. Subclasses
        may have specialized interfaces making this simpler.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkReaderAlgorithm
        C++: static vtkReaderAlgorithm *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


