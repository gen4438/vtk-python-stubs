"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkAbstractContextBufferId(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAbstractContextBufferId - 2D array of ids, used for picking.
    
    Superclass: vtkObject
    
    An 2D array where each element is the id of an entity drawn at the
    given pixel. The access is not specified in this class. The
    effective/concrete subclass vtkContextBufferId stores the whole
    buffer in RAM. The access to a value is fast and independent of the
    OpenGL. However it requires to first fill the whole buffer by
    transferring the buffer generated by OpenGL from the VRAM to the RAM.
    It is inefficient if the context of the scene changes during
    interaction.
    
    The effective/concrete subclass vtkOpenGLContextBufferId keeps the
    buffer id on the VRAM in a texture image. The access to a value is
    slower than a simple read access to an array but it does not require
    a large transfer of data from the VRAM to the RAM.
    
    @sa
    vtkContextBufferId, vtkOpenGLContextBufferId
    """
    def Allocate(self):
        """
        V.Allocate()
        C++: virtual void Allocate()
        
        Allocate the memory for at least Width*Height elements.
        \pre positive_width: GetWidth()>0
        \pre positive_height: GetHeight()>0
        """
        ...
    
    def GetContext(self):
        """
        V.GetContext() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetContext()
        
        Set/Get the OpenGL context owning the texture object resource.
        """
        ...
    
    def GetHeight(self):
        """
        V.GetHeight() -> int
        C++: virtual int GetHeight()
        
        Number of rows. Initial value is 0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPickedItem(self, p_int, p_int_1):
        """
        V.GetPickedItem(int, int) -> int
        C++: virtual vtkIdType GetPickedItem(int x, int y)
        
        Return item under abscissa x and ordinate y. Abscissa go from
        left to right. Ordinate go from bottom to top. The return value
        is -1 if there is no item.
        \pre is_allocated: IsAllocated()
        \post valid_result: result>=-1
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> int
        C++: virtual int GetWidth()
        
        Number of columns. Initial value is 0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsAllocated(self):
        """
        V.IsAllocated() -> bool
        C++: virtual bool IsAllocated()
        
        Tell if the buffer has been allocated.
        """
        ...
    
    def IsSupported(self):
        """
        V.IsSupported() -> bool
        C++: virtual bool IsSupported()
        
        Returns if the context supports the required extensions.
        \pre context_is_set: this->GetContext()!=0
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractContextBufferId
        C++: vtkAbstractContextBufferId *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: virtual void ReleaseGraphicsResources()
        
        Release any graphics resources that are being consumed by this
        object. Default implementation is empty.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractContextBufferId
        C++: static vtkAbstractContextBufferId *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetContext(self, vtkRenderWindow):
        """
        V.SetContext(vtkRenderWindow)
        C++: virtual void SetContext(vtkRenderWindow *context)
        
        Set/Get the OpenGL context owning the texture object resource.
        """
        ...
    
    def SetHeight(self, p_int):
        """
        V.SetHeight(int)
        C++: virtual void SetHeight(int _arg)
        
        Set the number of rows. Initial value is 0.
        """
        ...
    
    def SetValues(self, p_int, p_int_1):
        """
        V.SetValues(int, int)
        C++: virtual void SetValues(int srcXmin, int srcYmin)
        
        Copy the contents of the current read buffer to the internal
        structure starting at lower left corner of the framebuffer
        (srcXmin,srcYmin).
        \pre is_allocated: this->IsAllocated()
        """
        ...
    
    def SetWidth(self, p_int):
        """
        V.SetWidth(int)
        C++: virtual void SetWidth(int _arg)
        
        Set the number of columns. Initial value is 0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAbstractContextItem(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAbstractContextItem - base class for items that are part of a
    vtkContextScene.
    
    Superclass: vtkObject
    
    This class is the common base for all context scene items. You should
    generally derive from vtkContextItem, rather than this class, as it
    provides most of the commonly used API.
    """
    def AddItem(self, vtkAbstractContextItem):
        """
        V.AddItem(vtkAbstractContextItem) -> int
        C++: vtkIdType AddItem(vtkAbstractContextItem *item)
        
        Add child items to this item. Increments reference count of item.
        \return the index of the child item.
        """
        ...
    
    def ClearItems(self):
        """
        V.ClearItems()
        C++: void ClearItems()
        
        Remove all child items from this item.
        """
        ...
    
    def GetInteractive(self):
        """
        V.GetInteractive() -> bool
        C++: virtual bool GetInteractive()
        
        Get if the item is interactive (should respond to mouse events).
        """
        ...
    
    def GetItem(self, p_int):
        """
        V.GetItem(int) -> vtkAbstractContextItem
        C++: vtkAbstractContextItem *GetItem(vtkIdType index)
        
        Get the item at the specified index.
        \return the item at the specified index (null if index is
            invalid).
        """
        ...
    
    def GetItemIndex(self, vtkAbstractContextItem):
        """
        V.GetItemIndex(vtkAbstractContextItem) -> int
        C++: vtkIdType GetItemIndex(vtkAbstractContextItem *item)
        
        Get the index of the specified item in itemIndex.
        \return the item index if found or -1 if not.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfItems(self):
        """
        V.GetNumberOfItems() -> int
        C++: vtkIdType GetNumberOfItems()
        
        Get the number of child items.
        """
        ...
    
    def GetParent(self):
        """
        V.GetParent() -> vtkAbstractContextItem
        C++: vtkAbstractContextItem *GetParent()
        
        Get the parent item. The parent will be set for all items except
        top level items in a tree.
        """
        ...
    
    def GetPickedItem(self, vtkContextMouseEvent):
        """
        V.GetPickedItem(vtkContextMouseEvent) -> vtkAbstractContextItem
        C++: virtual vtkAbstractContextItem *GetPickedItem(
            const vtkContextMouseEvent &mouse)
        
        Return the item under the mouse. If no item is under the mouse,
        the method returns a null pointer.
        """
        ...
    
    def GetScene(self):
        """
        V.GetScene() -> vtkContextScene
        C++: vtkContextScene *GetScene()
        
        Get the vtkContextScene for the item, always set for an item in a
        scene.
        """
        ...
    
    def GetVisible(self):
        """
        V.GetVisible() -> bool
        C++: virtual bool GetVisible()
        
        Get the visibility of the item (should it be drawn).
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: virtual bool Hit(const vtkContextMouseEvent &mouse)
        
        Return true if the supplied x, y coordinate is inside the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def KeyPressEvent(self, vtkContextKeyEvent):
        """
        V.KeyPressEvent(vtkContextKeyEvent) -> bool
        C++: virtual bool KeyPressEvent(const vtkContextKeyEvent &key)
        
        Key press event.
        """
        ...
    
    def KeyReleaseEvent(self, vtkContextKeyEvent):
        """
        V.KeyReleaseEvent(vtkContextKeyEvent) -> bool
        C++: virtual bool KeyReleaseEvent(const vtkContextKeyEvent &key)
        
        Key release event.
        """
        ...
    
    def Lower(self, p_int):
        """
        V.Lower(int) -> int
        C++: vtkIdType Lower(vtkIdType index)
        
        Lowers the child to the bottom of the item's stack.
        \return The new index of the item
        \sa StackUnder(), Raise(), StackAbove()
        """
        ...
    
    def MapFromParent(self, vtkVector2f):
        """
        V.MapFromParent(vtkVector2f) -> vtkVector2f
        C++: virtual vtkVector2f MapFromParent(const vtkVector2f &point)
        
        Maps the point from the parent coordinate system.
        """
        ...
    
    def MapFromScene(self, vtkVector2f):
        """
        V.MapFromScene(vtkVector2f) -> vtkVector2f
        C++: virtual vtkVector2f MapFromScene(const vtkVector2f &point)
        
        Maps the point from the scene coordinate system.
        """
        ...
    
    def MapToParent(self, vtkVector2f):
        """
        V.MapToParent(vtkVector2f) -> vtkVector2f
        C++: virtual vtkVector2f MapToParent(const vtkVector2f &point)
        
        Maps the point to the parent coordinate system.
        """
        ...
    
    def MapToScene(self, vtkVector2f):
        """
        V.MapToScene(vtkVector2f) -> vtkVector2f
        C++: virtual vtkVector2f MapToScene(const vtkVector2f &point)
        
        Maps the point to the scene coordinate system.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: virtual bool MouseButtonPressEvent(
            const vtkContextMouseEvent &mouse)
        
        Mouse button down event Return true if the item holds the event,
        false if the event can be propagated to other items.
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: virtual bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse)
        
        Mouse button release event. Return true if the item holds the
        event, false if the event can be propagated to other items.
        """
        ...
    
    def MouseDoubleClickEvent(self, vtkContextMouseEvent):
        """
        V.MouseDoubleClickEvent(vtkContextMouseEvent) -> bool
        C++: virtual bool MouseDoubleClickEvent(
            const vtkContextMouseEvent &mouse)
        
        Mouse button double click event. Return true if the item holds
        the event, false if the event can be propagated to other items.
        """
        ...
    
    def MouseEnterEvent(self, vtkContextMouseEvent):
        """
        V.MouseEnterEvent(vtkContextMouseEvent) -> bool
        C++: virtual bool MouseEnterEvent(
            const vtkContextMouseEvent &mouse)
        
        Mouse enter event. Return true if the item holds the event, false
        if the event can be propagated to other items.
        """
        ...
    
    def MouseLeaveEvent(self, vtkContextMouseEvent):
        """
        V.MouseLeaveEvent(vtkContextMouseEvent) -> bool
        C++: virtual bool MouseLeaveEvent(
            const vtkContextMouseEvent &mouse)
        
        Mouse leave event. Return true if the item holds the event, false
        if the event can be propagated to other items.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: virtual bool MouseMoveEvent(
            const vtkContextMouseEvent &mouse)
        
        Mouse move event. Return true if the item holds the event, false
        if the event can be propagated to other items.
        """
        ...
    
    def MouseWheelEvent(self, vtkContextMouseEvent, p_int):
        """
        V.MouseWheelEvent(vtkContextMouseEvent, int) -> bool
        C++: virtual bool MouseWheelEvent(
            const vtkContextMouseEvent &mouse, int delta)
        
        Mouse wheel event, positive delta indicates forward movement of
        the wheel. Return true if the item holds the event, false if the
        event can be propagated to other items.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractContextItem
        C++: vtkAbstractContextItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: virtual bool Paint(vtkContext2D *painter)
        
        Paint event for the item, called whenever the item needs to be
        drawn.
        """
        ...
    
    def PaintChildren(self, vtkContext2D):
        """
        V.PaintChildren(vtkContext2D) -> bool
        C++: virtual bool PaintChildren(vtkContext2D *painter)
        
        Paint the children of the item, should be called whenever the
        children need to be rendered.
        """
        ...
    
    def Raise(self, p_int):
        """
        V.Raise(int) -> int
        C++: vtkIdType Raise(vtkIdType index)
        
        Raises the child to the top of the item's stack.
        \return The new index of the item
        \sa StackAbove(), Lower(), LowerUnder()
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: virtual void ReleaseGraphicsResources()
        
        Release graphics resources hold by the item. The default
        implementation is empty.
        """
        ...
    
    def RemoveItem(self, vtkAbstractContextItem):
        """
        V.RemoveItem(vtkAbstractContextItem) -> bool
        C++: bool RemoveItem(vtkAbstractContextItem *item)
        V.RemoveItem(int) -> bool
        C++: bool RemoveItem(vtkIdType index)
        
        Remove child item from this item. Decrements reference count of
        item.
        \param item the item to be removed.
        \return true on success, false otherwise.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractContextItem
        C++: static vtkAbstractContextItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInteractive(self, bool):
        """
        V.SetInteractive(bool)
        C++: virtual void SetInteractive(bool _arg)
        
        Set if the item is interactive (should respond to mouse events).
        """
        ...
    
    def SetParent(self, vtkAbstractContextItem):
        """
        V.SetParent(vtkAbstractContextItem)
        C++: virtual void SetParent(vtkAbstractContextItem *parent)
        
        Set the parent item. The parent will be set for all items except
        top level items in a scene.
        """
        ...
    
    def SetScene(self, vtkContextScene):
        """
        V.SetScene(vtkContextScene)
        C++: virtual void SetScene(vtkContextScene *scene)
        
        Set the vtkContextScene for the item, always set for an item in a
        scene.
        """
        ...
    
    def SetVisible(self, bool):
        """
        V.SetVisible(bool)
        C++: virtual void SetVisible(bool _arg)
        
        Set the visibility of the item (should it be drawn). Visible by
        default.
        """
        ...
    
    def StackAbove(self, p_int, p_int_1):
        """
        V.StackAbove(int, int) -> int
        C++: virtual vtkIdType StackAbove(vtkIdType index,
            vtkIdType under)
        
        Raises the child above the under sibling. If under is invalid,
        the item is raised to the top of the item's stack.
        \return The new index of the item
        \sa Raise(), Lower(), StackUnder()
        """
        ...
    
    def StackUnder(self, p_int, p_int_1):
        """
        V.StackUnder(int, int) -> int
        C++: virtual vtkIdType StackUnder(vtkIdType child,
            vtkIdType above)
        
        Lowers the child under the above sibling. If above is invalid,
        the item is lowered to the bottom of the item's stack
        \return The new index of the item
        \sa Lower(), Raise(), StackAbove()
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: virtual void Update()
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextItem(vtkAbstractContextItem):
    """
    vtkContextItem - base class for items that are part of a
    vtkContextScene.
    
    Superclass: vtkAbstractContextItem
    
    Derive from this class to create custom items that can be added to a
    vtkContextScene.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpacity(self):
        """
        V.GetOpacity() -> float
        C++: virtual double GetOpacity()
        
        Get the opacity of the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextItem
        C++: vtkContextItem *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextItem
        C++: static vtkContextItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOpacity(self, p_float):
        """
        V.SetOpacity(float)
        C++: virtual void SetOpacity(double _arg)
        
        Set the opacity of the item. 1.0 by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBlockItem(vtkContextItem):
    """
    vtkBlockItem - a vtkContextItem that draws a block (optional label).
    
    Superclass: vtkContextItem
    
    This is a vtkContextItem that can be placed into a vtkContextScene.
    It draws a block of the given dimensions, and reacts to mouse events.
    """
    def GetDimensions(self):
        """
        V.GetDimensions() -> (float, float, float, float)
        C++: virtual float *GetDimensions()
        
        Get the dimensions of the block, elements 0 and 1 are the x and y
        coordinate of the bottom corner. Elements 2 and 3 are the width
        and height. Initial value is (0,0,0,0)
        """
        ...
    
    def GetLabel(self):
        """
        V.GetLabel() -> string
        C++: virtual vtkStdString GetLabel()
        
        Get the block label.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the supplied x, y coordinate is inside the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse button down event.
        """
        ...
    
    def MouseButtonReleaseEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonReleaseEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonReleaseEvent(
            const vtkContextMouseEvent &mouse) override;
        
        Mouse button release event.
        """
        ...
    
    def MouseEnterEvent(self, vtkContextMouseEvent):
        """
        V.MouseEnterEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseEnterEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse enter event.
        """
        ...
    
    def MouseLeaveEvent(self, vtkContextMouseEvent):
        """
        V.MouseLeaveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseLeaveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse leave event.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBlockItem
        C++: vtkBlockItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBlockItem
        C++: static vtkBlockItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDimensions(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetDimensions(float, float, float, float)
        C++: virtual void SetDimensions(float _arg1, float _arg2,
            float _arg3, float _arg4)
        V.SetDimensions((float, float, float, float))
        C++: virtual void SetDimensions(const float _arg[4])
        
        Set the dimensions of the block, elements 0 and 1 are the x and y
        coordinate of the bottom corner. Elements 2 and 3 are the width
        and height. Initial value is (0,0,0,0).
        """
        ...
    
    def SetLabel(self, string):
        """
        V.SetLabel(string)
        C++: virtual void SetLabel(const vtkStdString &label)
        
        Set the block label.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBrush(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkBrush - provides a brush that fills shapes drawn by vtkContext2D.
    
    Superclass: vtkObject
    
    The vtkBrush defines the fill (or pattern) of shapes that are drawn
    by vtkContext2D. The color is stored as four unsigned chars (RGBA),
    where the opacity defaults to 255, but can be modified separately to
    the other components. Ideally we would use a lightweight color class
    to store and pass around colors.
    """
    def DeepCopy(self, vtkBrush):
        """
        V.DeepCopy(vtkBrush)
        C++: void DeepCopy(vtkBrush *brush)
        
        Make a deep copy of the supplied brush.
        """
        ...
    
    def GetColor(self, p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.GetColor([int, int, int, int])
        C++: void GetColor(unsigned char color[4])
        V.GetColor() -> (int, ...)
        C++: unsigned char *GetColor()
        
        Get the color of the brush - expects an unsigned char of length
        4.
        """
        ...
    
    def GetColorF(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetColorF([float, float, float, float])
        C++: void GetColorF(double color[4])
        
        Get the color of the brush - expects a double of length 4 to copy
        into.
        """
        ...
    
    def GetColorObject(self):
        """
        V.GetColorObject() -> vtkColor4ub
        C++: vtkColor4ub GetColorObject()
        
        Get the color of the brush.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpacity(self):
        """
        V.GetOpacity() -> int
        C++: unsigned char GetOpacity()
        
        Get the opacity ranging from 0 (transparent) to 255(opaque).
        """
        ...
    
    def GetOpacityF(self):
        """
        V.GetOpacityF() -> float
        C++: double GetOpacityF()
        
        Get the opacity ranging from 0.0 (transparent) to 1.0(opaque).
        """
        ...
    
    def GetTexture(self):
        """
        V.GetTexture() -> vtkImageData
        C++: virtual vtkImageData *GetTexture()
        
        Get the texture that is used to fill polygons
        """
        ...
    
    def GetTextureProperties(self):
        """
        V.GetTextureProperties() -> int
        C++: virtual int GetTextureProperties()
        
        Get the properties associated to the texture
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBrush
        C++: vtkBrush *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBrush
        C++: static vtkBrush *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColor(self, p_int=..., p_int=..., p_int=...):
        """
        V.SetColor([int, int, int])
        C++: void SetColor(unsigned char color[3])
        V.SetColor(int, int, int)
        C++: void SetColor(unsigned char r, unsigned char g,
            unsigned char b)
        V.SetColor(int, int, int, int)
        C++: void SetColor(unsigned char r, unsigned char g,
            unsigned char b, unsigned char a)
        V.SetColor(vtkColor4ub)
        C++: void SetColor(const vtkColor4ub &color)
        
        Set the color of the brush with three component unsigned chars
        (RGB), ranging from 0 to 255.
        """
        ...
    
    def SetColorF(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetColorF([float, float, float])
        C++: void SetColorF(double color[3])
        V.SetColorF(float, float, float)
        C++: void SetColorF(double r, double g, double b)
        V.SetColorF(float, float, float, float)
        C++: void SetColorF(double r, double g, double b, double a)
        
        Set the color of the brush with three component doubles (RGB),
        ranging from 0.0 to 1.0.
        """
        ...
    
    def SetOpacity(self, p_int):
        """
        V.SetOpacity(int)
        C++: void SetOpacity(unsigned char a)
        
        Set the opacity with an unsigned char, ranging from 0
        (transparent) to 255 (opaque).
        """
        ...
    
    def SetOpacityF(self, p_float):
        """
        V.SetOpacityF(float)
        C++: void SetOpacityF(double a)
        
        Set the opacity with a double, ranging from 0.0 (transparent) to
        1.0 (opaque).
        """
        ...
    
    def SetTexture(self, vtkImageData):
        """
        V.SetTexture(vtkImageData)
        C++: void SetTexture(vtkImageData *image)
        
        Set the texture that will be used to fill polygons By default, no
        texture is set. The image will be registered with the brush (ref
        count is incremented) To disable the texture, set Texture to 0.
        """
        ...
    
    def SetTextureProperties(self, p_int):
        """
        V.SetTextureProperties(int)
        C++: virtual void SetTextureProperties(int _arg)
        
        Set properties to the texture By default, the texture is linearly
        stretched. The behavior is undefined when Linear and Nearest are
        both set The behavior is undefined when Stretch and Repeat are
        both set The behavior is undefined if TextureProperties is 0
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Linear = ...
    Nearest = ...
    Repeat = ...
    Stretch = ...
    TextureProperty = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContext2D(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkContext2D - Class for drawing 2D primitives to a graphical context.
    
    Superclass: vtkObject
    
    This defines the interface for drawing onto a 2D context. The context
    must be set up with a vtkContextDevice2D derived class that provides
    the functions to facilitate the low level calls to the context.
    Currently only an OpenGL based device is provided, but this could be
    extended in the future.
    """
    def AppendTransform(self, vtkTransform2D):
        """
        V.AppendTransform(vtkTransform2D)
        C++: void AppendTransform(vtkTransform2D *transform)
        
        Append the transform for the context, the underlying device will
        use the matrix of the transform. Note, this is set immediately,
        later changes to the matrix will have no effect until it is set
        again. The matrix of the transform will multiply the current
        context transform.
        """
        ...
    
    def ApplyBrush(self, vtkBrush):
        """
        V.ApplyBrush(vtkBrush)
        C++: void ApplyBrush(vtkBrush *brush)
        
        Apply the supplied brush which controls the outlines of shapes,
        as well as lines, points and related primitives. This makes a
        deep copy of the vtkBrush object in the vtkContext2D, it does not
        hold a pointer to the supplied object.
        """
        ...
    
    def ApplyId(self, p_int):
        """
        V.ApplyId(int)
        C++: void ApplyId(vtkIdType id)
        
        Apply id as a color.
        """
        ...
    
    def ApplyPen(self, vtkPen):
        """
        V.ApplyPen(vtkPen)
        C++: void ApplyPen(vtkPen *pen)
        
        Apply the supplied pen which controls the outlines of shapes, as
        well as lines, points and related primitives. This makes a deep
        copy of the vtkPen object in the vtkContext2D, it does not hold a
        pointer to the supplied object.
        """
        ...
    
    def ApplyTextProp(self, vtkTextProperty):
        """
        V.ApplyTextProp(vtkTextProperty)
        C++: void ApplyTextProp(vtkTextProperty *prop)
        
        Apply the supplied text property which controls how text is
        rendered. This makes a deep copy of the vtkTextProperty object in
        the vtkContext2D, it does not hold a pointer to the supplied
        object.
        """
        ...
    
    def Begin(self, vtkContextDevice2D):
        """
        V.Begin(vtkContextDevice2D) -> bool
        C++: bool Begin(vtkContextDevice2D *device)
        
        Begin painting on a vtkContextDevice2D, no painting can occur
        before this call has been made. Only one painter is allowed at a
        time on any given paint device. Returns true if successful,
        otherwise false.
        """
        ...
    
    def BufferIdModeBegin(self, vtkAbstractContextBufferId):
        """
        V.BufferIdModeBegin(vtkAbstractContextBufferId)
        C++: void BufferIdModeBegin(vtkAbstractContextBufferId *bufferId)
        
        Start BufferId creation Mode.
        \pre not_yet: !GetBufferIdMode()
        \pre bufferId_exists: bufferId!=0
        \post started: GetBufferIdMode()
        """
        ...
    
    def BufferIdModeEnd(self):
        """
        V.BufferIdModeEnd()
        C++: void BufferIdModeEnd()
        
        Finalize BufferId creation Mode. It makes sure that the content
        of the bufferId passed in argument of BufferIdModeBegin() is
        correctly set.
        \pre started: GetBufferIdMode()
        \post done: !GetBufferIdMode()
        """
        ...
    
    def ComputeFontSizeForBoundedString(self, string, p_float, p_float_1):
        """
        V.ComputeFontSizeForBoundedString(string, float, float) -> int
        C++: int ComputeFontSizeForBoundedString(
            const vtkStdString &string, float width, float height)
        
        Calculate the largest possible font size where the supplied
        string will fit within the specified bounds.  In addition to
        being returned, this font size is also used to update the
        vtkTextProperty used by this object. NOTE: text rotation is
        ignored for the purposes of this function.
        """
        ...
    
    def ComputeJustifiedStringBounds(self, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeJustifiedStringBounds(string, [float, float, float,
            float])
        C++: void ComputeJustifiedStringBounds(const char *string,
            float bounds[4])
        
        Compute the bounds of the supplied string while taking into
        account the justification and rotation of the currently applied
        text property.
        """
        ...
    
    def ComputeStringBounds(self, string, vtkPoints2D):
        """
        V.ComputeStringBounds(string, vtkPoints2D)
        C++: void ComputeStringBounds(const vtkStdString &string,
            vtkPoints2D *bounds)
        V.ComputeStringBounds(string, [float, float, float, float])
        C++: void ComputeStringBounds(const vtkStdString &string,
            float bounds[4])
        V.ComputeStringBounds(unicode, vtkPoints2D)
        C++: void ComputeStringBounds(const vtkUnicodeString &string,
            vtkPoints2D *bounds)
        V.ComputeStringBounds(unicode, [float, float, float, float])
        C++: void ComputeStringBounds(const vtkUnicodeString &string,
            float bounds[4])
        
        Compute the bounds of the supplied string. The bounds will be
        copied to the supplied bounds variable, the first two elements
        are the bottom corner of the string, and the second two elements
        are the width and height of the bounding box.
        
        * NOTE:the text justification from the current text property is
        * NOT considered when computing these bounds.
        """
        ...
    
    def DrawArc(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4):
        """
        V.DrawArc(float, float, float, float, float)
        C++: void DrawArc(float x, float y, float r, float startAngle,
            float stopAngle)
        
        Draw a circular arc with center at x,y with radius r between
        angles startAngle and stopAngle (expressed in degrees).
        \pre positive_radius: r>=0
        """
        ...
    
    def DrawEllipse(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.DrawEllipse(float, float, float, float)
        C++: void DrawEllipse(float x, float y, float rx, float ry)
        
        Draw an ellipse with center at x, y and radii rx, ry.
        \pre positive_rx: rx>=0
        \pre positive_ry: ry>=0
        """
        ...
    
    def DrawEllipseWedge(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5, p_float_6, p_float_7):
        """
        V.DrawEllipseWedge(float, float, float, float, float, float,
            float, float)
        C++: void DrawEllipseWedge(float x, float y, float outRx,
            float outRy, float inRx, float inRy, float startAngle,
            float stopAngle)
        
        Draw an elliptic wedge with center at x, y, outer radii outRx,
        outRy, inner radii inRx, inRy between angles startAngle and
        stopAngle (expressed in degrees).
        \pre positive_outRx: outRx>=0
        \pre positive_outRy: outRy>=0
        \pre positive_inRx: inRx>=0
        \pre positive_inRy: inRy>=0
        \pre ordered_rx: inRx<=outRx
        \pre ordered_ry: inRy<=outRy
        """
        ...
    
    def DrawEllipticArc(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.DrawEllipticArc(float, float, float, float, float, float)
        C++: void DrawEllipticArc(float x, float y, float rX, float rY,
            float startAngle, float stopAngle)
        
        Draw an elliptic arc with center at x,y with radii rX and rY
        between angles startAngle and stopAngle (expressed in degrees).
        \pre positive_rX: rX>=0
        \pre positive_rY: rY>=0
        """
        ...
    
    def DrawImage(self, p_float, p_float_1, vtkImageData):
        """
        V.DrawImage(float, float, vtkImageData)
        C++: void DrawImage(float x, float y, vtkImageData *image)
        V.DrawImage(float, float, float, vtkImageData)
        C++: void DrawImage(float x, float y, float scale,
            vtkImageData *image)
        V.DrawImage(vtkRectf, vtkImageData)
        C++: void DrawImage(const vtkRectf &pos, vtkImageData *image)
        
        Draw the supplied image at the given x, y location (bottom
        corner).
        """
        ...
    
    def DrawLine(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.DrawLine(float, float, float, float)
        C++: void DrawLine(float x1, float y1, float x2, float y2)
        V.DrawLine([float, float, float, float])
        C++: void DrawLine(float p[4])
        V.DrawLine(vtkPoints2D)
        C++: void DrawLine(vtkPoints2D *points)
        
        Draw a line between the specified points.
        """
        ...
    
    def DrawLines(self, vtkPoints2D):
        """
        V.DrawLines(vtkPoints2D)
        C++: void DrawLines(vtkPoints2D *points)
        V.DrawLines([float, ...], int)
        C++: void DrawLines(float *points, int n)
        
        Draw multiple lines between the specified pairs of points.
        \sa DrawPoly()
        """
        ...
    
    def DrawMarkers(self, p_int, bool, *float, **kwargs):
        """
        V.DrawMarkers(int, bool, [float, ...], int, [int, ...], int)
        C++: virtual void DrawMarkers(int shape, bool highlight,
            float *points, int n, unsigned char *colors, int nc_comps)
        V.DrawMarkers(int, bool, [float, ...], int)
        C++: virtual void DrawMarkers(int shape, bool highlight,
            float *points, int n)
        V.DrawMarkers(int, bool, vtkPoints2D)
        C++: virtual void DrawMarkers(int shape, bool highlight,
            vtkPoints2D *points)
        V.DrawMarkers(int, bool, vtkPoints2D, vtkUnsignedCharArray)
        C++: virtual void DrawMarkers(int shape, bool highlight,
            vtkPoints2D *points, vtkUnsignedCharArray *colors)
        
        Draw a series of markers centered at the points supplied. The
        shape argument controls the marker shape, and can be one of
        - VTK_MARKER_CROSS
        - VTK_MARKER_PLUS
        - VTK_MARKER_SQUARE
        - VTK_MARKER_CIRCLE
        - VTK_MARKER_DIAMOND Marker size is determined by the current pen
        width.
        \param colors is an optional array of colors.
        \param nc_comps is the number of components for the color.
        """
        ...
    
    def DrawMathTextString(self, vtkPoints2D, string):
        """
        V.DrawMathTextString(vtkPoints2D, string)
        C++: void DrawMathTextString(vtkPoints2D *point,
            const vtkStdString &string)
        V.DrawMathTextString(float, float, string)
        C++: void DrawMathTextString(float x, float y,
            const vtkStdString &string)
        V.DrawMathTextString(vtkPoints2D, string, string)
        C++: void DrawMathTextString(vtkPoints2D *point,
            const vtkStdString &string, const vtkStdString &fallback)
        V.DrawMathTextString(float, float, string, string)
        C++: void DrawMathTextString(float x, float y,
            const vtkStdString &string, const vtkStdString &fallback)
        
        Draw a MathText formatted equation to the screen. See
        http://matplotlib.sourceforge.net/users/mathtext.html for more
        information. MathText requires matplotlib and python, and the
        vtkMatplotlib module must be enabled manually during build
        configuration. This method will do nothing but print a warning if
        vtkMathTextUtilities::GetInstance() returns NULL.
        """
        ...
    
    def DrawPoint(self, p_float, p_float_1):
        """
        V.DrawPoint(float, float)
        C++: void DrawPoint(float x, float y)
        
        Draw a point at the supplied x and y coordinate
        """
        ...
    
    def DrawPoints(self, *float, **kwargs):
        """
        V.DrawPoints([float, ...], [float, ...], int)
        C++: void DrawPoints(float *x, float *y, int n)
        V.DrawPoints(vtkPoints2D)
        C++: void DrawPoints(vtkPoints2D *points)
        V.DrawPoints([float, ...], int)
        C++: void DrawPoints(float *points, int n)
        
        Draw the specified number of points using the x and y arrays
        supplied
        """
        ...
    
    def DrawPointSprites(self, vtkImageData, vtkPoints2D):
        """
        V.DrawPointSprites(vtkImageData, vtkPoints2D)
        C++: void DrawPointSprites(vtkImageData *sprite,
            vtkPoints2D *points)
        V.DrawPointSprites(vtkImageData, vtkPoints2D,
            vtkUnsignedCharArray)
        C++: void DrawPointSprites(vtkImageData *sprite,
            vtkPoints2D *points, vtkUnsignedCharArray *colors)
        V.DrawPointSprites(vtkImageData, [float, ...], int, [int, ...],
            int)
        C++: void DrawPointSprites(vtkImageData *sprite, float *points,
            int n, unsigned char *colors, int nc_comps)
        V.DrawPointSprites(vtkImageData, [float, ...], int)
        C++: void DrawPointSprites(vtkImageData *sprite, float *points,
            int n)
        
        Draw a series of point sprites, images centred at the points
        supplied. The supplied vtkImageData is the sprite to be drawn,
        only squares will be drawn and the size is set using
        SetPointSize.
        """
        ...
    
    def DrawPoly(self, *float, **kwargs):
        """
        V.DrawPoly([float, ...], [float, ...], int)
        C++: void DrawPoly(float *x, float *y, int n)
        V.DrawPoly(vtkPoints2D)
        C++: void DrawPoly(vtkPoints2D *points)
        V.DrawPoly([float, ...], int)
        C++: void DrawPoly(float *points, int n)
        V.DrawPoly([float, ...], int, [int, ...], int)
        C++: void DrawPoly(float *points, int n, unsigned char *colors,
            int nc_comps)
        
        Draw a poly line between the specified points.
        """
        ...
    
    def DrawPolyData(self, p_float, p_float_1, vtkPolyData, vtkUnsignedCharArray, p_int):
        """
        V.DrawPolyData(float, float, vtkPolyData, vtkUnsignedCharArray,
            int)
        C++: void DrawPolyData(float x, float y, vtkPolyData *polyData,
            vtkUnsignedCharArray *colors, int scalarMode)
        
        Draw the supplied polyData at the given x, y position (bottom
        corner).
        
        ote Supports only 2D meshes.
        """
        ...
    
    def DrawPolygon(self, *float, **kwargs):
        """
        V.DrawPolygon([float, ...], [float, ...], int)
        C++: void DrawPolygon(float *x, float *y, int n)
        V.DrawPolygon(vtkPoints2D)
        C++: void DrawPolygon(vtkPoints2D *points)
        V.DrawPolygon([float, ...], int)
        C++: void DrawPolygon(float *points, int n)
        V.DrawPolygon([float, ...], [float, ...], int, [int, ...], int)
        C++: void DrawPolygon(float *x, float *y, int n,
            unsigned char *color, int nc_comps)
        V.DrawPolygon(vtkPoints2D, [int, ...], int)
        C++: void DrawPolygon(vtkPoints2D *points, unsigned char *color,
            int nc_comps)
        V.DrawPolygon([float, ...], int, [int, ...], int)
        C++: void DrawPolygon(float *points, int n, unsigned char *color,
            int nc_comps)
        
        Draw a polygon specified specified by the points using the x and
        y arrays supplied
        """
        ...
    
    def DrawQuad(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5, p_float_6, p_float_7):
        """
        V.DrawQuad(float, float, float, float, float, float, float, float)
        C++: void DrawQuad(float x1, float y1, float x2, float y2,
            float x3, float y3, float x4, float y4)
        V.DrawQuad([float, ...])
        C++: void DrawQuad(float *p)
        
        Draw a quadrilateral at the specified points (4 points, 8 floats
        in x, y).
        """
        ...
    
    def DrawQuadStrip(self, vtkPoints2D):
        """
        V.DrawQuadStrip(vtkPoints2D)
        C++: void DrawQuadStrip(vtkPoints2D *points)
        V.DrawQuadStrip([float, ...], int)
        C++: void DrawQuadStrip(float *p, int n)
        
        Draw a strip of quads
        """
        ...
    
    def DrawRect(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.DrawRect(float, float, float, float)
        C++: void DrawRect(float x, float y, float w, float h)
        
        Draw a rectangle with origin at x, y and width w, height h
        """
        ...
    
    def DrawString(self, vtkPoints2D, string):
        """
        V.DrawString(vtkPoints2D, string)
        C++: void DrawString(vtkPoints2D *point,
            const vtkStdString &string)
        V.DrawString(float, float, string)
        C++: void DrawString(float x, float y, const vtkStdString &string)
        V.DrawString(vtkPoints2D, unicode)
        C++: void DrawString(vtkPoints2D *point,
            const vtkUnicodeString &string)
        V.DrawString(float, float, unicode)
        C++: void DrawString(float x, float y,
            const vtkUnicodeString &string)
        
        Draw some text to the screen.
        """
        ...
    
    def DrawStringRect(self, vtkPoints2D, string):
        """
        V.DrawStringRect(vtkPoints2D, string)
        C++: void DrawStringRect(vtkPoints2D *rect,
            const vtkStdString &string)
        V.DrawStringRect(vtkPoints2D, unicode)
        C++: void DrawStringRect(vtkPoints2D *rect,
            const vtkUnicodeString &string)
        
        Draw some text to the screen in a bounding rectangle with the
        alignment of the text properties respecting the rectangle. The
        points should be supplied as bottom corner (x, y), width, height.
        """
        ...
    
    def DrawWedge(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.DrawWedge(float, float, float, float, float, float)
        C++: void DrawWedge(float x, float y, float outRadius,
            float inRadius, float startAngle, float stopAngle)
        
        Draw a circular wedge with center at x, y, outer radius
        outRadius, inner radius inRadius between angles startAngle and
        stopAngle (expressed in degrees).
        \pre positive_outRadius: outRadius>=0
        \pre positive_inRadius: inRadius>=0
        \pre ordered_radii: inRadius<=outRadius
        """
        ...
    
    def End(self):
        """
        V.End() -> bool
        C++: bool End()
        
        Ends painting on the device, you would not usually need to call
        this as it should be called by the destructor. Returns true if
        the painter is no longer active, otherwise false.
        """
        ...
    
    def FloatToInt(self, p_float):
        """
        V.FloatToInt(float) -> int
        C++: static int FloatToInt(float x)
        
        Float to int conversion, performs truncation but with a rounding
        tolerance for float values that are within 1/256 of their closest
        integer.
        """
        ...
    
    def GetBrush(self):
        """
        V.GetBrush() -> vtkBrush
        C++: vtkBrush *GetBrush()
        
        Get the pen which controls the outlines of shapes as well as
        lines, points and related primitives.
        """
        ...
    
    def GetBufferIdMode(self):
        """
        V.GetBufferIdMode() -> bool
        C++: bool GetBufferIdMode()
        
        Tell if the context is in BufferId creation mode. Initial value
        is false.
        """
        ...
    
    def GetContext3D(self):
        """
        V.GetContext3D() -> vtkContext3D
        C++: virtual vtkContext3D *GetContext3D()
        
        Get the vtkContext3D device, in order to do some 3D rendering.
        This API is very experimental, and may be moved around.
        """
        ...
    
    def GetDevice(self):
        """
        V.GetDevice() -> vtkContextDevice2D
        C++: virtual vtkContextDevice2D *GetDevice()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPen(self):
        """
        V.GetPen() -> vtkPen
        C++: vtkPen *GetPen()
        
        Get the pen which controls the outlines of shapes, as well as
        lines, points and related primitives. This object can be modified
        and the changes will be reflected in subsequent drawing
        operations.
        """
        ...
    
    def GetTextProp(self):
        """
        V.GetTextProp() -> vtkTextProperty
        C++: vtkTextProperty *GetTextProp()
        
        Get the text properties object for the vtkContext2D.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform2D
        C++: vtkTransform2D *GetTransform()
        
        Compute the current transform applied to the context.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MathTextIsSupported(self):
        """
        V.MathTextIsSupported() -> bool
        C++: bool MathTextIsSupported()
        
        Return true if MathText rendering available on the current
        device.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContext2D
        C++: vtkContext2D *NewInstance()
        """
        ...
    
    def PopMatrix(self):
        """
        V.PopMatrix()
        C++: void PopMatrix()
        
        Push/pop the transformation matrix for the painter (sets the
        underlying matrix for the device when available).
        """
        ...
    
    def PushMatrix(self):
        """
        V.PushMatrix()
        C++: void PushMatrix()
        
        Push/pop the transformation matrix for the painter (sets the
        underlying matrix for the device when available).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContext2D
        C++: static vtkContext2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetContext3D(self, vtkContext3D):
        """
        V.SetContext3D(vtkContext3D)
        C++: virtual void SetContext3D(vtkContext3D *context)
        
        Get the vtkContext3D device, in order to do some 3D rendering.
        This API is very experimental, and may be moved around.
        """
        ...
    
    def SetTransform(self, vtkTransform2D):
        """
        V.SetTransform(vtkTransform2D)
        C++: void SetTransform(vtkTransform2D *transform)
        
        Set the transform for the context, the underlying device will use
        the matrix of the transform. Note, this is set immediately, later
        changes to the matrix will have no effect until it is set again.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContext3D(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkContext3D - Class for drawing 3D primitives to a graphical context.
    
    Superclass: vtkObject
    
    This defines the interface for drawing onto a 3D context. The context
    must be set up with a vtkContextDevice3D derived class that provides
    the functions to facilitate the low level calls to the context.
    Currently only an OpenGL based device is provided.
    """
    def AppendTransform(self, vtkTransform):
        """
        V.AppendTransform(vtkTransform)
        C++: void AppendTransform(vtkTransform *transform)
        
        Append the transform for the context, the underlying device will
        use the matrix of the transform. Note, this is set immediately,
        later changes to the matrix will have no effect until it is set
        again. The matrix of the transform will multiply the current
        context transform.
        """
        ...
    
    def ApplyBrush(self, vtkBrush):
        """
        V.ApplyBrush(vtkBrush)
        C++: void ApplyBrush(vtkBrush *brush)
        
        Apply the supplied brush which controls the outlines of shapes,
        as well as lines, points and related primitives. This makes a
        deep copy of the vtkBrush object in the vtkContext2D, it does not
        hold a pointer to the supplied object.
        """
        ...
    
    def ApplyPen(self, vtkPen):
        """
        V.ApplyPen(vtkPen)
        C++: void ApplyPen(vtkPen *pen)
        
        Apply the supplied pen which controls the outlines of shapes, as
        well as lines, points and related primitives. This makes a deep
        copy of the vtkPen object in the vtkContext2D, it does not hold a
        pointer to the supplied object.
        """
        ...
    
    def Begin(self, vtkContextDevice3D):
        """
        V.Begin(vtkContextDevice3D) -> bool
        C++: bool Begin(vtkContextDevice3D *device)
        
        Begin painting on a vtkContextDevice3D, no painting can occur
        before this call has been made. Only one painter is allowed at a
        time on any given paint device. Returns true if successful,
        otherwise false.
        """
        ...
    
    def DisableClippingPlane(self, p_int):
        """
        V.DisableClippingPlane(int)
        C++: void DisableClippingPlane(int i)
        
        Enable/Disable the specified clipping plane. i is the index of
        the clipping plane being enabled or disabled (0 - 5).
        planeEquation points to the four coefficients of the equation for
        the clipping plane: Ax + By + Cz + D = 0.  This is the equation
        format expected by glClipPlane.
        """
        ...
    
    def DrawLine(self, vtkVector3f, vtkVector3f_1):
        """
        V.DrawLine(vtkVector3f, vtkVector3f)
        C++: void DrawLine(const vtkVector3f &start,
            const vtkVector3f &end)
        
        Draw a line between the specified points.
        """
        ...
    
    def DrawPoint(self, vtkVector3f):
        """
        V.DrawPoint(vtkVector3f)
        C++: void DrawPoint(const vtkVector3f &point)
        
        Draw a point at the point in 3D space.
        """
        ...
    
    def DrawPoints(self, float_tuple, p_int):
        """
        V.DrawPoints((float, ...), int)
        C++: void DrawPoints(const float *points, int n)
        V.DrawPoints((float, ...), int, [int, ...], int)
        C++: void DrawPoints(const float *points, int n,
            unsigned char *colors, int nc_comps)
        
        Draw a sequence of points at the specified locations.
        """
        ...
    
    def DrawPoly(self, float_tuple, p_int):
        """
        V.DrawPoly((float, ...), int)
        C++: void DrawPoly(const float *points, int n)
        
        Draw a poly line between the specified points.
        """
        ...
    
    def DrawTriangleMesh(self, float_tuple, p_int, int_tuple, p_int_1):
        """
        V.DrawTriangleMesh((float, ...), int, (int, ...), int)
        C++: void DrawTriangleMesh(const float *mesh, int n,
            const unsigned char *colors, int nc)
        
        Draw triangles to generate the specified mesh.
        """
        ...
    
    def EnableClippingPlane(self, p_int, *float):
        """
        V.EnableClippingPlane(int, [float, ...])
        C++: void EnableClippingPlane(int i, double *planeEquation)
        
        Enable/Disable the specified clipping plane. i is the index of
        the clipping plane being enabled or disabled (0 - 5).
        planeEquation points to the four coefficients of the equation for
        the clipping plane: Ax + By + Cz + D = 0.  This is the equation
        format expected by glClipPlane.
        """
        ...
    
    def End(self):
        """
        V.End() -> bool
        C++: bool End()
        
        Ends painting on the device, you would not usually need to call
        this as it should be called by the destructor. Returns true if
        the painter is no longer active, otherwise false.
        """
        ...
    
    def GetDevice(self):
        """
        V.GetDevice() -> vtkContextDevice3D
        C++: vtkContextDevice3D *GetDevice()
        
        Get access to the underlying 3D context.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform
        C++: vtkTransform *GetTransform()
        
        Compute the current transform applied to the context.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContext3D
        C++: vtkContext3D *NewInstance()
        """
        ...
    
    def PopMatrix(self):
        """
        V.PopMatrix()
        C++: void PopMatrix()
        
        Push/pop the transformation matrix for the painter (sets the
        underlying matrix for the device when available).
        """
        ...
    
    def PushMatrix(self):
        """
        V.PushMatrix()
        C++: void PushMatrix()
        
        Push/pop the transformation matrix for the painter (sets the
        underlying matrix for the device when available).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContext3D
        C++: static vtkContext3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetTransform(self, vtkTransform):
        """
        V.SetTransform(vtkTransform)
        C++: void SetTransform(vtkTransform *transform)
        
        Set the transform for the context, the underlying device will use
        the matrix of the transform. Note, this is set immediately, later
        changes to the matrix will have no effect until it is set again.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextActor(__vtkmodules_vtkRenderingCore.vtkProp):
    """
    vtkContextActor - provides a vtkProp derived object.
    
    Superclass: vtkProp
    
    This object provides the entry point for the vtkContextScene to be
    rendered in a vtkRenderer. Uses the RenderOverlay pass to render the
    2D vtkContextScene.
    """
    def GetContext(self):
        """
        V.GetContext() -> vtkContext2D
        C++: virtual vtkContext2D *GetContext()
        
        Get the vtkContext2D for the actor.
        """
        ...
    
    def GetForceDevice(self):
        """
        V.GetForceDevice() -> vtkContextDevice2D
        C++: virtual vtkContextDevice2D *GetForceDevice()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScene(self):
        """
        V.GetScene() -> vtkContextScene
        C++: vtkContextScene *GetScene()
        
        Get the chart object for the actor.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextActor
        C++: vtkContextActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *window) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: int RenderOverlay(vtkViewport *viewport) override;
        
        We only render in the overlay for the context scene.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextActor
        C++: static vtkContextActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetForceDevice(self, vtkContextDevice2D):
        """
        V.SetForceDevice(vtkContextDevice2D)
        C++: void SetForceDevice(vtkContextDevice2D *dev)
        """
        ...
    
    def SetScene(self, vtkContextScene):
        """
        V.SetScene(vtkContextScene)
        C++: void SetScene(vtkContextScene *scene)
        
        Set the scene for the actor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextClip(vtkAbstractContextItem):
    """
    vtkContextClip - all children of this item are clipped by the
    specified area.
    
    Superclass: vtkAbstractContextItem
    
    This class can be used to clip the rendering of an item inside a
    rectangular area.
    """
    def GetHeight(self):
        """
        V.GetHeight() -> float
        C++: virtual float GetHeight()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRect(self, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetRect([float, float, float, float])
        C++: virtual void GetRect(float rect[4])
        
        Get the clipping rectangle parameters in pixel coordinates:
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> float
        C++: virtual float GetWidth()
        """
        ...
    
    def GetX(self):
        """
        V.GetX() -> float
        C++: virtual float GetX()
        """
        ...
    
    def GetY(self):
        """
        V.GetY() -> float
        C++: virtual float GetY()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextClip
        C++: vtkContextClip *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item, called whenever the item needs to be
        drawn.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextClip
        C++: static vtkContextClip *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClip(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetClip(float, float, float, float)
        C++: virtual void SetClip(float x, float y, float width,
            float height)
        
        Set the origin, width and height of the clipping rectangle. These
        are in pixel coordinates.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextDevice2D(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkContextDevice2D - Abstract class for drawing 2D primitives.
    
    Superclass: vtkObject
    
    This defines the interface for a vtkContextDevice2D. In this sense a
    ContextDevice is a class used to paint 2D primitives onto a device,
    such as an OpenGL context or a QGraphicsView.
    """
    def ApplyBrush(self, vtkBrush):
        """
        V.ApplyBrush(vtkBrush)
        C++: virtual void ApplyBrush(vtkBrush *brush)
        
        Apply the supplied brush which controls the outlines of shapes,
        as well as lines, points and related primitives. This makes a
        deep copy of the vtkBrush object in the vtkContext2D, it does not
        hold a pointer to the supplied object.
        """
        ...
    
    def ApplyPen(self, vtkPen):
        """
        V.ApplyPen(vtkPen)
        C++: virtual void ApplyPen(vtkPen *pen)
        
        Apply the supplied pen which controls the outlines of shapes, as
        well as lines, points and related primitives. This makes a deep
        copy of the vtkPen object in the vtkContext2D, it does not hold a
        pointer to the supplied object.
        """
        ...
    
    def ApplyTextProp(self, vtkTextProperty):
        """
        V.ApplyTextProp(vtkTextProperty)
        C++: virtual void ApplyTextProp(vtkTextProperty *prop)
        
        Apply the supplied text property which controls how text is
        rendered. This makes a deep copy of the vtkTextProperty object in
        the vtkContext2D, it does not hold a pointer to the supplied
        object.
        """
        ...
    
    def Begin(self, vtkViewport):
        """
        V.Begin(vtkViewport)
        C++: virtual void Begin(vtkViewport *)
        
        Begin drawing, pass in the viewport to set up the view.
        """
        ...
    
    def BufferIdModeBegin(self, vtkAbstractContextBufferId):
        """
        V.BufferIdModeBegin(vtkAbstractContextBufferId)
        C++: virtual void BufferIdModeBegin(
            vtkAbstractContextBufferId *bufferId)
        
        Start BufferId creation Mode. The default implementation is
        empty.
        \pre not_yet: !GetBufferIdMode()
        \pre bufferId_exists: bufferId!=0
        \post started: GetBufferIdMode()
        """
        ...
    
    def BufferIdModeEnd(self):
        """
        V.BufferIdModeEnd()
        C++: virtual void BufferIdModeEnd()
        
        Finalize BufferId creation Mode. It makes sure that the content
        of the bufferId passed in argument of BufferIdModeBegin() is
        correctly set. The default implementation is empty.
        \pre started: GetBufferIdMode()
        \post done: !GetBufferIdMode()
        """
        ...
    
    def ComputeJustifiedStringBounds(self, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeJustifiedStringBounds(string, [float, float, float,
            float])
        C++: virtual void ComputeJustifiedStringBounds(const char *string,
             float bounds[4])
        
        Compute the bounds of the supplied string while taking into
        account the justification of the currently applied text property.
        Simple rotations (0, 90, 180, 270) are also correctly taken into
        account.
        """
        ...
    
    def ComputeStringBounds(self, string, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeStringBounds(string, [float, float, float, float])
        C++: virtual void ComputeStringBounds(const vtkStdString &string,
            float bounds[4])
        V.ComputeStringBounds(unicode, [float, float, float, float])
        C++: virtual void ComputeStringBounds(
            const vtkUnicodeString &string, float bounds[4])
        
        Compute the bounds of the supplied string. The bounds will be
        copied to the supplied bounds variable, the first two elements
        are the bottom corner of the string, and the second two elements
        are the width and height of the bounding box. NOTE: This function
        does not take account of the text rotation or justification.
        """
        ...
    
    def DisableClipping(self):
        """
        V.DisableClipping()
        C++: virtual void DisableClipping()
        
        Disable clipping of the display. Remove in a future release -
        retained for API compatibility.
        """
        ...
    
    def DrawColoredPolygon(self, *float, **kwargs):
        """
        V.DrawColoredPolygon([float, ...], int, [int, ...], int)
        C++: virtual void DrawColoredPolygon(float *points, int numPoints,
             unsigned char *colors=nullptr, int nc_comps=0)
        """
        ...
    
    def DrawEllipseWedge(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5, p_float_6, p_float_7):
        """
        V.DrawEllipseWedge(float, float, float, float, float, float,
            float, float)
        C++: virtual void DrawEllipseWedge(float x, float y, float outRx,
            float outRy, float inRx, float inRy, float startAngle,
            float stopAngle)
        
        Draw an elliptic wedge with center at x, y, outer radii outRx,
        outRy, inner radii inRx, inRy between angles startAngle and
        stopAngle (expressed in degrees).
        \pre positive_outRx: outRx>=0
        \pre positive_outRy: outRy>=0
        \pre positive_inRx: inRx>=0
        \pre positive_inRy: inRy>=0
        \pre ordered_rx: inRx<=outRx
        \pre ordered_ry: inRy<=outRy
        """
        ...
    
    def DrawEllipticArc(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.DrawEllipticArc(float, float, float, float, float, float)
        C++: virtual void DrawEllipticArc(float x, float y, float rX,
            float rY, float startAngle, float stopAngle)
        
        Draw an elliptic arc with center at x,y with radii rX and rY
        between angles startAngle and stopAngle (expressed in degrees).
        \pre positive_rX: rX>=0
        \pre positive_rY: rY>=0
        """
        ...
    
    def DrawImage(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.DrawImage([float, float], float, vtkImageData)
        C++: virtual void DrawImage(float p[2], float scale,
            vtkImageData *image)
        V.DrawImage(vtkRectf, vtkImageData)
        C++: virtual void DrawImage(const vtkRectf &pos,
            vtkImageData *image)
        
        Draw the supplied image at the given x, y (p[0], p[1]) (bottom
        corner), scaled by scale (1.0 would match the image).
        """
        ...
    
    def DrawLines(self, *float, **kwargs):
        """
        V.DrawLines([float, ...], int, [int, ...], int)
        C++: virtual void DrawLines(float *f, int n,
            unsigned char *colors=nullptr, int nc_comps=0)
        
        Draw lines using the points - memory layout is as follows:
        l1p1,l1p2,l2p1,l2p2... The lines will be colored by colors array
        which has nc_comps components (defining a single color).
        \sa DrawPoly()
        """
        ...
    
    def DrawMarkers(self, p_int, bool, *float, **kwargs):
        """
        V.DrawMarkers(int, bool, [float, ...], int, [int, ...], int)
        C++: virtual void DrawMarkers(int shape, bool highlight,
            float *points, int n, unsigned char *colors=nullptr,
            int nc_comps=0)
        
        Draw a series of markers centered at the points supplied. The
        shape argument controls the marker shape, and can be one of
        - VTK_MARKER_CROSS
        - VTK_MARKER_PLUS
        - VTK_MARKER_SQUARE
        - VTK_MARKER_CIRCLE
        - VTK_MARKER_DIAMOND
        \param colors is an optional array of colors.
        \param nc_comps is the number of components for the color.
        """
        ...
    
    def DrawMathTextString(self, *float, **kwargs):
        """
        V.DrawMathTextString([float, ...], string)
        C++: virtual void DrawMathTextString(float *point,
            const vtkStdString &string)
        
        Draw text using MathText markup for mathematical equations. See
        http://matplotlib.sourceforge.net/users/mathtext.html for more
        information.
        """
        ...
    
    def DrawPoints(self, *float, **kwargs):
        """
        V.DrawPoints([float, ...], int, [int, ...], int)
        C++: virtual void DrawPoints(float *points, int n,
            unsigned char *colors=nullptr, int nc_comps=0)
        
        Draw a series of points - fastest code path due to memory layout
        of the coordinates. The colors and nc_comps are optional - color
        array.
        """
        ...
    
    def DrawPointSprites(self, vtkImageData, *float, **kwargs):
        """
        V.DrawPointSprites(vtkImageData, [float, ...], int, [int, ...],
            int)
        C++: virtual void DrawPointSprites(vtkImageData *sprite,
            float *points, int n, unsigned char *colors=nullptr,
            int nc_comps=0)
        
        Draw a series of point sprites, images centred at the points
        supplied. The supplied vtkImageData is the sprite to be drawn,
        only squares will be drawn and the size is set using
        SetPointSize.
        \param colors is an optional array of colors.
        \param nc_comps is the number of components for the color.
        """
        ...
    
    def DrawPoly(self, *float, **kwargs):
        """
        V.DrawPoly([float, ...], int, [int, ...], int)
        C++: virtual void DrawPoly(float *points, int n,
            unsigned char *colors=nullptr, int nc_comps=0)
        
        Draw a poly line using the points - fastest code path due to
        memory layout of the coordinates. The line will be colored by the
        colors array, which must be have nc_comps components (defining a
        single color).
        \sa DrawLines()
        """
        ...
    
    def DrawPolyData(self, p_float=..., p_float=..., *args, **kwargs):
        """
        V.DrawPolyData([float, float], float, vtkPolyData,
            vtkUnsignedCharArray, int)
        C++: virtual void DrawPolyData(float p[2], float scale,
            vtkPolyData *polyData, vtkUnsignedCharArray *colors,
            int scalarMode)
        
        Draw the supplied PolyData at the given x, y (p[0], p[1]) (bottom
        corner), scaled by scale (1.0 would match the actual dataset).
        
        Only lines and polys are rendered. Only the x/y coordinates of
        the polydata are used.
        
        @param p Offset to apply to polydata.
        @param scale Isotropic scale for polydata. Applied after offset.
        @param polyData Draw lines and polys from this dataset.
        @param colors RGBA for points or cells, depending on value of
            scalarMode.
        Must not be NULL.
        @param scalarMode Must be either VTK_SCALAR_MODE_USE_POINT_DATA
            or
        VTK_SCALAR_MODE_USE_CELL_DATA.
        
        The base implementation breaks the polydata apart and renders
        each polygon individually using the device API. Subclasses should
        override this method with a batch-drawing implementation if
        performance is a concern.
        """
        ...
    
    def DrawPolygon(self, *float, **kwargs):
        """
        V.DrawPolygon([float, ...], int)
        C++: virtual void DrawPolygon(float *p, int n)
        """
        ...
    
    def DrawQuad(self, *float, **kwargs):
        """
        V.DrawQuad([float, ...], int)
        C++: virtual void DrawQuad(float *, int)
        
        Draw a quad using the specified number of points.
        """
        ...
    
    def DrawQuadStrip(self, *float, **kwargs):
        """
        V.DrawQuadStrip([float, ...], int)
        C++: virtual void DrawQuadStrip(float *, int)
        
        Draw a quad using the specified number of points.
        """
        ...
    
    def DrawString(self, *float, **kwargs):
        """
        V.DrawString([float, ...], string)
        C++: virtual void DrawString(float *point,
            const vtkStdString &string)
        V.DrawString([float, ...], unicode)
        C++: virtual void DrawString(float *point,
            const vtkUnicodeString &string)
        
        Draw some text to the screen.
        """
        ...
    
    def EnableClipping(self, bool):
        """
        V.EnableClipping(bool)
        C++: virtual void EnableClipping(bool enable)
        
        Enable or disable the clipping of the scene.
        """
        ...
    
    def End(self):
        """
        V.End()
        C++: virtual void End()
        
        End drawing, clean up the view.
        """
        ...
    
    def GetBrush(self):
        """
        V.GetBrush() -> vtkBrush
        C++: virtual vtkBrush *GetBrush()
        
        Get the pen which controls the outlines of shapes as well as
        lines, points and related primitives.
        """
        ...
    
    def GetBufferIdMode(self):
        """
        V.GetBufferIdMode() -> bool
        C++: virtual bool GetBufferIdMode()
        
        Tell if the device context is in BufferId creation mode. Initial
        value is false.
        """
        ...
    
    def GetHeight(self):
        """
        V.GetHeight() -> int
        C++: virtual int GetHeight()
        
        Get the width of the device in pixels.
        """
        ...
    
    def GetMatrix(self, vtkMatrix3x3):
        """
        V.GetMatrix(vtkMatrix3x3)
        C++: virtual void GetMatrix(vtkMatrix3x3 *m)
        
        Set the model view matrix for the display
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPen(self):
        """
        V.GetPen() -> vtkPen
        C++: virtual vtkPen *GetPen()
        
        Get the pen which controls the outlines of shapes, as well as
        lines, points and related primitives. This object can be modified
        and the changes will be reflected in subsequent drawing
        operations.
        """
        ...
    
    def GetTextProp(self):
        """
        V.GetTextProp() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProp()
        
        Get the text properties object for the vtkContext2D.
        """
        ...
    
    def GetViewportRect(self):
        """
        V.GetViewportRect() -> vtkRecti
        C++: virtual vtkRecti GetViewportRect()
        """
        ...
    
    def GetViewportSize(self):
        """
        V.GetViewportSize() -> vtkVector2i
        C++: virtual vtkVector2i GetViewportSize()
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> int
        C++: virtual int GetWidth()
        
        Get the width of the device in pixels.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MathTextIsSupported(self):
        """
        V.MathTextIsSupported() -> bool
        C++: virtual bool MathTextIsSupported()
        
        Return true if MathText rendering available on this device.
        """
        ...
    
    def MultiplyMatrix(self, vtkMatrix3x3):
        """
        V.MultiplyMatrix(vtkMatrix3x3)
        C++: virtual void MultiplyMatrix(vtkMatrix3x3 *m)
        
        Multiply the current model view matrix by the supplied one
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextDevice2D
        C++: vtkContextDevice2D *NewInstance()
        """
        ...
    
    def PopMatrix(self):
        """
        V.PopMatrix()
        C++: virtual void PopMatrix()
        
        Pop the current matrix off of the stack.
        """
        ...
    
    def PushMatrix(self):
        """
        V.PushMatrix()
        C++: virtual void PushMatrix()
        
        Push the current matrix onto the stack.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextDevice2D
        C++: static vtkContextDevice2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClipping(self, *int):
        """
        V.SetClipping([int, ...])
        C++: virtual void SetClipping(int *x)
        
        Supply an int array of length 4 with x1, y1, width, height
        specifying clipping region for the device in pixels.
        """
        ...
    
    def SetColor4(self, p_int=..., p_int=..., p_int=..., p_int=...):
        """
        V.SetColor4([int, int, int, int])
        C++: virtual void SetColor4(unsigned char color[4])
        
        Set the color for the device using unsigned char of length 4,
        RGBA.
        """
        ...
    
    def SetLineType(self, p_int):
        """
        V.SetLineType(int)
        C++: virtual void SetLineType(int type)
        
        Set the line type type (using anonymous enum in vtkPen).
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: virtual void SetLineWidth(float width)
        
        Set the line width.
        """
        ...
    
    def SetMatrix(self, vtkMatrix3x3):
        """
        V.SetMatrix(vtkMatrix3x3)
        C++: virtual void SetMatrix(vtkMatrix3x3 *m)
        
        Set the model view matrix for the display
        """
        ...
    
    def SetPointSize(self, p_float):
        """
        V.SetPointSize(float)
        C++: virtual void SetPointSize(float size)
        
        Set the point size for glyphs/sprites.
        """
        ...
    
    def SetTexture(self, vtkImageData, p_int):
        """
        V.SetTexture(vtkImageData, int)
        C++: virtual void SetTexture(vtkImageData *image, int properties)
        
        Set the texture for the device, it is used to fill the polygons
        """
        ...
    
    def SetViewportRect(self, vtkRecti):
        """
        V.SetViewportRect(vtkRecti)
        C++: virtual void SetViewportRect(const vtkRecti &rect)
        """
        ...
    
    def SetViewportSize(self, vtkVector2i):
        """
        V.SetViewportSize(vtkVector2i)
        C++: virtual void SetViewportSize(const vtkVector2i &size)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    Linear = ...
    Nearest = ...
    Repeat = ...
    Stretch = ...
    TextureProperty = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextDevice3D(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkContextDevice3D - Abstract class for drawing 3D primitives.
    
    Superclass: vtkObject
    
    This defines the interface for a vtkContextDevice3D. In this sense a
    ContextDevice is a class used to paint 3D primitives onto a device,
    such as an OpenGL context.
    
    This is private API, and should not be used outside of the
    vtkContext3D.
    """
    def ApplyBrush(self, vtkBrush):
        """
        V.ApplyBrush(vtkBrush)
        C++: virtual void ApplyBrush(vtkBrush *brush)
        
        Apply the supplied brush which controls the outlines of shapes,
        as well as lines, points and related primitives. This makes a
        deep copy of the vtkBrush object in the vtkContext2D, it does not
        hold a pointer to the supplied object.
        """
        ...
    
    def ApplyPen(self, vtkPen):
        """
        V.ApplyPen(vtkPen)
        C++: virtual void ApplyPen(vtkPen *pen)
        
        Apply the supplied pen which controls the outlines of shapes, as
        well as lines, points and related primitives. This makes a deep
        copy of the vtkPen object in the vtkContext2D, it does not hold a
        pointer to the supplied object.
        """
        ...
    
    def DisableClipping(self):
        """
        V.DisableClipping()
        C++: virtual void DisableClipping()
        
        Disable clipping of the display. Remove in a future release -
        retained for API compatibility.
        """
        ...
    
    def DisableClippingPlane(self, p_int):
        """
        V.DisableClippingPlane(int)
        C++: virtual void DisableClippingPlane(int i)
        
        Enable/Disable the specified clipping plane.
        """
        ...
    
    def DrawLines(self, float_tuple, p_int, int_tuple, p_int_1):
        """
        V.DrawLines((float, ...), int, (int, ...), int)
        C++: virtual void DrawLines(const float *verts, int n,
            const unsigned char *colors=nullptr, int nc=0)
        
        Draw lines defined by specified pair of points.
        \sa DrawPoly()
        """
        ...
    
    def DrawPoints(self, float_tuple, p_int, int_tuple, p_int_1):
        """
        V.DrawPoints((float, ...), int, (int, ...), int)
        C++: virtual void DrawPoints(const float *verts, int n,
            const unsigned char *colors=nullptr, int nc=0)
        
        Draw points at the vertex positions specified.
        """
        ...
    
    def DrawPoly(self, float_tuple, p_int, int_tuple, p_int_1):
        """
        V.DrawPoly((float, ...), int, (int, ...), int)
        C++: virtual void DrawPoly(const float *verts, int n,
            const unsigned char *colors=nullptr, int nc=0)
        
        Draw a polyline between the specified points.
        \sa DrawLines()
        """
        ...
    
    def DrawTriangleMesh(self, float_tuple, p_int, int_tuple, p_int_1):
        """
        V.DrawTriangleMesh((float, ...), int, (int, ...), int)
        C++: virtual void DrawTriangleMesh(const float *mesh, int n,
            const unsigned char *colors, int nc)
        
        Draw triangles to generate the specified mesh.
        """
        ...
    
    def EnableClipping(self, bool):
        """
        V.EnableClipping(bool)
        C++: virtual void EnableClipping(bool enable)
        
        Enable or disable the clipping of the scene.
        """
        ...
    
    def EnableClippingPlane(self, p_int, *float):
        """
        V.EnableClippingPlane(int, [float, ...])
        C++: virtual void EnableClippingPlane(int i,
            double *planeEquation)
        
        Enable/Disable the specified clipping plane.
        """
        ...
    
    def GetMatrix(self, vtkMatrix4x4):
        """
        V.GetMatrix(vtkMatrix4x4)
        C++: virtual void GetMatrix(vtkMatrix4x4 *m)
        
        Set the model view matrix for the display
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MultiplyMatrix(self, vtkMatrix4x4):
        """
        V.MultiplyMatrix(vtkMatrix4x4)
        C++: virtual void MultiplyMatrix(vtkMatrix4x4 *m)
        
        Multiply the current model view matrix by the supplied one
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextDevice3D
        C++: vtkContextDevice3D *NewInstance()
        """
        ...
    
    def PopMatrix(self):
        """
        V.PopMatrix()
        C++: virtual void PopMatrix()
        
        Pop the current matrix off of the stack.
        """
        ...
    
    def PushMatrix(self):
        """
        V.PushMatrix()
        C++: virtual void PushMatrix()
        
        Push the current matrix onto the stack.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextDevice3D
        C++: static vtkContextDevice3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClipping(self, vtkRecti):
        """
        V.SetClipping(vtkRecti)
        C++: virtual void SetClipping(const vtkRecti &rect)
        
        Supply a float array of length 4 with x1, y1, width, height
        specifying clipping region for the device in pixels.
        """
        ...
    
    def SetMatrix(self, vtkMatrix4x4):
        """
        V.SetMatrix(vtkMatrix4x4)
        C++: virtual void SetMatrix(vtkMatrix4x4 *m)
        
        Set the model view matrix for the display
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextKeyEvent(object):
    """
    vtkContextKeyEvent - data structure to represent key events.
    
    Provides a convenient data structure to represent key events in the
    vtkContextScene. Passed to vtkAbstractContextItem objects.
    
    vtkContextKeyEvent()
    vtkContextKeyEvent(const &vtkContextKeyEvent)
    """
    def GetInteractor(self):
        """
        V.GetInteractor() -> vtkRenderWindowInteractor
        C++: vtkRenderWindowInteractor *GetInteractor()
        
        Get the interactor for the key event. This can be null, and is
        provided only for convenience.
        """
        ...
    
    def GetKeyCode(self):
        """
        V.GetKeyCode() -> char
        C++: char GetKeyCode()
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> vtkVector2i
        C++: vtkVector2i GetPosition()
        
        Get the position of the mouse when the key was pressed.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *interactor)
        
        Set the interactor for the key event.
        """
        ...
    
    def SetPosition(self, vtkVector2i):
        """
        V.SetPosition(vtkVector2i)
        C++: void SetPosition(const vtkVector2i &position)
        
        Set the position of the mouse when the key was pressed.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkContextMapper2D(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkContextMapper2D - Abstract class for 2D context mappers.
    
    Superclass: vtkAlgorithm
    
    This class provides an abstract base for 2D context mappers. They
    currently only accept vtkTable objects as input.
    """
    def GetInput(self):
        """
        V.GetInput() -> vtkTable
        C++: virtual vtkTable *GetInput()
        
        Set/Get the input for this object - only accepts vtkTable as
        input.
        """
        ...
    
    def GetInputAbstractArrayToProcess(self, p_int, vtkDataObject):
        """
        V.GetInputAbstractArrayToProcess(int, vtkDataObject)
            -> vtkAbstractArray
        C++: vtkAbstractArray *GetInputAbstractArrayToProcess(int idx,
            vtkDataObject *input)
        
        Filters that have multiple connections on one port can use this
        signature. This will override the connection id that the user set
        in SetInputArrayToProcess() with the connection id passed. This
        way, the user specifies one array to process and that information
        is used to obtain arrays for all the connection on the port with
        the appropriate connection id substituted.
        """
        ...
    
    def GetInputArrayToProcess(self, p_int, vtkDataObject):
        """
        V.GetInputArrayToProcess(int, vtkDataObject) -> vtkDataArray
        C++: vtkDataArray *GetInputArrayToProcess(int idx,
            vtkDataObject *input)
        
        Make the arrays accessible to the plot objects.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextMapper2D
        C++: vtkContextMapper2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextMapper2D
        C++: static vtkContextMapper2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInputData(self, vtkTable):
        """
        V.SetInputData(vtkTable)
        C++: virtual void SetInputData(vtkTable *input)
        
        Set/Get the input for this object - only accepts vtkTable as
        input.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextMouseEvent(object):
    """
    vtkContextMouseEvent - data structure to represent mouse events.
    
    Provides a convenient data structure to represent mouse events in the
    vtkContextScene. Passed to vtkAbstractContextItem objects.
    
    vtkContextMouseEvent()
    vtkContextMouseEvent(const &vtkContextMouseEvent)
    """
    def GetButton(self):
        """
        V.GetButton() -> int
        C++: int GetButton()
        """
        ...
    
    def GetInteractor(self):
        """
        V.GetInteractor() -> vtkRenderWindowInteractor
        C++: vtkRenderWindowInteractor *GetInteractor()
        
        Get the interactor for the mouse event. This can be null, and is
        provided only for convenience.
        """
        ...
    
    def GetLastPos(self):
        """
        V.GetLastPos() -> vtkVector2f
        C++: vtkVector2f GetLastPos()
        """
        ...
    
    def GetLastScenePos(self):
        """
        V.GetLastScenePos() -> vtkVector2f
        C++: vtkVector2f GetLastScenePos()
        """
        ...
    
    def GetLastScreenPos(self):
        """
        V.GetLastScreenPos() -> vtkVector2i
        C++: vtkVector2i GetLastScreenPos()
        """
        ...
    
    def GetModifiers(self):
        """
        V.GetModifiers() -> int
        C++: int GetModifiers()
        
        Return the modifier keys, if any, ORed together. Valid modifier
        enum values are NO_MODIFIER, ALT_MODIFIER, SHIFT_MODIFIER and/or
        CONTROL_MODIFIER.
        """
        ...
    
    def GetPos(self):
        """
        V.GetPos() -> vtkVector2f
        C++: vtkVector2f GetPos()
        """
        ...
    
    def GetScenePos(self):
        """
        V.GetScenePos() -> vtkVector2f
        C++: vtkVector2f GetScenePos()
        """
        ...
    
    def GetScreenPos(self):
        """
        V.GetScreenPos() -> vtkVector2i
        C++: vtkVector2i GetScreenPos()
        """
        ...
    
    def SetButton(self, p_int):
        """
        V.SetButton(int)
        C++: void SetButton(int button)
        
        Set/get the mouse button that caused the event, with possible
        values being NO_BUTTON, LEFT_BUTTON, MIDDLE_BUTTON and
        RIGHT_BUTTON.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *interactor)
        
        Set the interactor for the mouse event.
        """
        ...
    
    def SetLastPos(self, vtkVector2f):
        """
        V.SetLastPos(vtkVector2f)
        C++: void SetLastPos(const vtkVector2f &pos)
        
        Set/get the position of the mouse in the item's coordinates.
        """
        ...
    
    def SetLastScenePos(self, vtkVector2f):
        """
        V.SetLastScenePos(vtkVector2f)
        C++: void SetLastScenePos(const vtkVector2f &pos)
        
        Set/get the position of the mouse in scene coordinates.
        """
        ...
    
    def SetLastScreenPos(self, vtkVector2i):
        """
        V.SetLastScreenPos(vtkVector2i)
        C++: void SetLastScreenPos(const vtkVector2i &pos)
        
        Set/get the position of the mouse in screen coordinates.
        """
        ...
    
    def SetPos(self, vtkVector2f):
        """
        V.SetPos(vtkVector2f)
        C++: void SetPos(const vtkVector2f &pos)
        
        Set/get the position of the mouse in the item's coordinates.
        """
        ...
    
    def SetScenePos(self, vtkVector2f):
        """
        V.SetScenePos(vtkVector2f)
        C++: void SetScenePos(const vtkVector2f &pos)
        
        Set/get the position of the mouse in scene coordinates.
        """
        ...
    
    def SetScreenPos(self, vtkVector2i):
        """
        V.SetScreenPos(vtkVector2i)
        C++: void SetScreenPos(const vtkVector2i &pos)
        
        Set/get the position of the mouse in screen coordinates.
        """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    ALT_MODIFIER = ...
    CONTROL_MODIFIER = ...
    LEFT_BUTTON = ...
    MIDDLE_BUTTON = ...
    NO_BUTTON = ...
    NO_MODIFIER = ...
    RIGHT_BUTTON = ...
    SHIFT_MODIFIER = ...


class vtkContextScene(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkContextScene - Provides a 2D scene for vtkContextItem objects.
    
    Superclass: vtkObject
    
    Provides a 2D scene that vtkContextItem objects can be added to.
    Manages the items, ensures that they are rendered at the right times
    and passes on mouse events.
    """
    def AddItem(self, vtkAbstractContextItem):
        """
        V.AddItem(vtkAbstractContextItem) -> int
        C++: unsigned int AddItem(vtkAbstractContextItem *item)
        
        Add child items to this item. Increments reference count of item.
        \return the index of the child item.
        """
        ...
    
    def ClearItems(self):
        """
        V.ClearItems()
        C++: void ClearItems()
        
        Remove all child items from this item.
        """
        ...
    
    def GetAnnotationLink(self):
        """
        V.GetAnnotationLink() -> vtkAnnotationLink
        C++: virtual vtkAnnotationLink *GetAnnotationLink()
        
        Get the vtkAnnotationLink for the chart.
        """
        ...
    
    def GetBufferId(self):
        """
        V.GetBufferId() -> vtkAbstractContextBufferId
        C++: vtkAbstractContextBufferId *GetBufferId()
        
        Return buffer id. Not part of the end-user API. Can be used by
        context items to initialize their own colorbuffer id (when a
        context item is a container).
        """
        ...
    
    def GetDirty(self):
        """
        V.GetDirty() -> bool
        C++: bool GetDirty()
        
        Inform the scene that something changed that requires a repaint
        of the scene. This should only be used by the vtkContextItem
        derived objects in a scene in their event handlers.
        """
        ...
    
    def GetGeometry(self):
        """
        V.GetGeometry() -> (int, int)
        C++: virtual int *GetGeometry()
        
        Get the width and height of the scene in pixels.
        """
        ...
    
    def GetItem(self, p_int):
        """
        V.GetItem(int) -> vtkAbstractContextItem
        C++: vtkAbstractContextItem *GetItem(unsigned int index)
        
        Get the item at the specified index.
        \return the item at the specified index (null if index is
            invalid).
        """
        ...
    
    def GetLastPainter(self):
        """
        V.GetLastPainter() -> vtkWeakPointer_I12vtkContext2DE
        C++: vtkWeakPointer<vtkContext2D> GetLastPainter()
        
        Last painter used. Not part of the end-user API. Can be used by
        context items to create their own colorbuffer id (when a context
        item is a container).
        """
        ...
    
    def GetLogicalTileScale(self):
        """
        V.GetLogicalTileScale() -> vtkVector2i
        C++: vtkVector2i GetLogicalTileScale()
        
        The tile scale of the target vtkRenderWindow. Hardcoded pixel
        offsets, etc should properly account for these <x, y> scale
        factors. This will simply return vtkVector2i(1, 1) if ScaleTiles
        is false or if this->Renderer is NULL.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfItems(self):
        """
        V.GetNumberOfItems() -> int
        C++: unsigned int GetNumberOfItems()
        
        Get the number of child items.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        This should not be necessary as the context view should take care
        of rendering.
        """
        ...
    
    def GetScaleTiles(self):
        """
        V.GetScaleTiles() -> bool
        C++: virtual bool GetScaleTiles()
        
        Whether to scale the scene transform when tiling, for example
        when using vtkWindowToImageFilter to take a large screenshot. The
        default is true.
        """
        ...
    
    def GetSceneHeight(self):
        """
        V.GetSceneHeight() -> int
        C++: int GetSceneHeight()
        
        Get the height of the scene.
        """
        ...
    
    def GetSceneWidth(self):
        """
        V.GetSceneWidth() -> int
        C++: int GetSceneWidth()
        
        Get the width of the scene.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform2D
        C++: vtkTransform2D *GetTransform()
        
        Get the transform for the scene.
        """
        ...
    
    def GetUseBufferId(self):
        """
        V.GetUseBufferId() -> bool
        C++: virtual bool GetUseBufferId()
        
        Get whether the scene is using the color buffer. Default is true.
        """
        ...
    
    def GetViewHeight(self):
        """
        V.GetViewHeight() -> int
        C++: virtual int GetViewHeight()
        
        Get the height of the view
        """
        ...
    
    def GetViewWidth(self):
        """
        V.GetViewWidth() -> int
        C++: virtual int GetViewWidth()
        
        Get the width of the view
        """
        ...
    
    def HasTransform(self):
        """
        V.HasTransform() -> bool
        C++: bool HasTransform()
        
        Check whether the scene has a transform.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextScene
        C++: vtkContextScene *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: virtual bool Paint(vtkContext2D *painter)
        
        Paint event for the chart, called whenever the chart needs to be
        drawn
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: void ReleaseGraphicsResources()
        
        Release graphics resources hold by the scene.
        """
        ...
    
    def RemoveItem(self, vtkAbstractContextItem):
        """
        V.RemoveItem(vtkAbstractContextItem) -> bool
        C++: bool RemoveItem(vtkAbstractContextItem *item)
        V.RemoveItem(int) -> bool
        C++: bool RemoveItem(unsigned int index)
        
        Remove child item from this item. Decrements reference count of
        item.
        \param item the item to be removed.
        \return true on success, false otherwise.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextScene
        C++: static vtkContextScene *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScaleTilesOff(self):
        """
        V.ScaleTilesOff()
        C++: virtual void ScaleTilesOff()
        
        Whether to scale the scene transform when tiling, for example
        when using vtkWindowToImageFilter to take a large screenshot. The
        default is true.
        """
        ...
    
    def ScaleTilesOn(self):
        """
        V.ScaleTilesOn()
        C++: virtual void ScaleTilesOn()
        
        Whether to scale the scene transform when tiling, for example
        when using vtkWindowToImageFilter to take a large screenshot. The
        default is true.
        """
        ...
    
    def SetAnnotationLink(self, vtkAnnotationLink):
        """
        V.SetAnnotationLink(vtkAnnotationLink)
        C++: virtual void SetAnnotationLink(vtkAnnotationLink *link)
        
        Set the vtkAnnotationLink for the chart.
        """
        ...
    
    def SetDirty(self, bool):
        """
        V.SetDirty(bool)
        C++: void SetDirty(bool isDirty)
        
        Inform the scene that something changed that requires a repaint
        of the scene. This should only be used by the vtkContextItem
        derived objects in a scene in their event handlers.
        """
        ...
    
    def SetGeometry(self, p_int, p_int_1):
        """
        V.SetGeometry(int, int)
        C++: virtual void SetGeometry(int _arg1, int _arg2)
        V.SetGeometry((int, int))
        C++: void SetGeometry(const int _arg[2])
        
        Set the width and height of the scene in pixels.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: virtual void SetRenderer(vtkRenderer *renderer)
        
        This should not be necessary as the context view should take care
        of rendering.
        """
        ...
    
    def SetScaleTiles(self, bool):
        """
        V.SetScaleTiles(bool)
        C++: virtual void SetScaleTiles(bool _arg)
        
        Whether to scale the scene transform when tiling, for example
        when using vtkWindowToImageFilter to take a large screenshot. The
        default is true.
        """
        ...
    
    def SetTransform(self, vtkTransform2D):
        """
        V.SetTransform(vtkTransform2D)
        C++: virtual void SetTransform(vtkTransform2D *transform)
        
        Set the transform for the scene.
        """
        ...
    
    def SetUseBufferId(self, bool):
        """
        V.SetUseBufferId(bool)
        C++: virtual void SetUseBufferId(bool _arg)
        
        Set whether the scene should use the color buffer. Default is
        true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    SELECTION_ADDITION = ...
    SELECTION_DEFAULT = ...
    SELECTION_NONE = ...
    SELECTION_SUBTRACTION = ...
    SELECTION_TOGGLE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkContextTransform(vtkAbstractContextItem):
    """
    vtkContextTransform - all children of this item are transformed by
    the vtkTransform2D of this item.
    
    Superclass: vtkAbstractContextItem
    
    This class can be used to transform all child items of this class.
    The default transform is the identity.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPanModifier(self):
        """
        V.GetPanModifier() -> int
        C++: virtual int GetPanModifier()
        
        The modifier from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::NO_MODIFIER.
        """
        ...
    
    def GetPanMouseButton(self):
        """
        V.GetPanMouseButton() -> int
        C++: virtual int GetPanMouseButton()
        
        The mouse button from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::LEFT_BUTTON.
        """
        ...
    
    def GetPanYOnMouseWheel(self):
        """
        V.GetPanYOnMouseWheel() -> bool
        C++: virtual bool GetPanYOnMouseWheel()
        
        Whether to pan in the Y direction on mouse wheels. Default is
        false.
        """
        ...
    
    def GetSecondaryPanModifier(self):
        """
        V.GetSecondaryPanModifier() -> int
        C++: virtual int GetSecondaryPanModifier()
        
        A secondary modifier from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::NO_MODIFIER.
        """
        ...
    
    def GetSecondaryPanMouseButton(self):
        """
        V.GetSecondaryPanMouseButton() -> int
        C++: virtual int GetSecondaryPanMouseButton()
        
        A secondary mouse button from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::NO_BUTTON (disabled).
        """
        ...
    
    def GetSecondaryZoomModifier(self):
        """
        V.GetSecondaryZoomModifier() -> int
        C++: virtual int GetSecondaryZoomModifier()
        
        A secondary modifier from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::SHIFT_MODIFIER.
        """
        ...
    
    def GetSecondaryZoomMouseButton(self):
        """
        V.GetSecondaryZoomMouseButton() -> int
        C++: virtual int GetSecondaryZoomMouseButton()
        
        A secondary mouse button from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::LEFT_BUTTON.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform2D
        C++: virtual vtkTransform2D *GetTransform()
        
        Access the vtkTransform2D that controls object transformation.
        """
        ...
    
    def GetZoomModifier(self):
        """
        V.GetZoomModifier() -> int
        C++: virtual int GetZoomModifier()
        
        The modifier from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::NO_MODIFIER.
        """
        ...
    
    def GetZoomMouseButton(self):
        """
        V.GetZoomMouseButton() -> int
        C++: virtual int GetZoomMouseButton()
        
        The mouse button from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::RIGHT_BUTTON.
        """
        ...
    
    def GetZoomOnMouseWheel(self):
        """
        V.GetZoomOnMouseWheel() -> bool
        C++: virtual bool GetZoomOnMouseWheel()
        
        Whether to zoom on mouse wheels. Default is true.
        """
        ...
    
    def Hit(self, vtkContextMouseEvent):
        """
        V.Hit(vtkContextMouseEvent) -> bool
        C++: bool Hit(const vtkContextMouseEvent &mouse) override;
        
        Returns true if the transform is interactive, false otherwise.
        """
        ...
    
    def Identity(self):
        """
        V.Identity()
        C++: virtual void Identity()
        
        Reset the transform to the identity transformation.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapFromParent(self, vtkVector2f):
        """
        V.MapFromParent(vtkVector2f) -> vtkVector2f
        C++: vtkVector2f MapFromParent(const vtkVector2f &point) override;
        
        Transforms a point from the parent coordinate system.
        """
        ...
    
    def MapToParent(self, vtkVector2f):
        """
        V.MapToParent(vtkVector2f) -> vtkVector2f
        C++: vtkVector2f MapToParent(const vtkVector2f &point) override;
        
        Transforms a point to the parent coordinate system.
        """
        ...
    
    def MouseButtonPressEvent(self, vtkContextMouseEvent):
        """
        V.MouseButtonPressEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseButtonPressEvent(const vtkContextMouseEvent &mouse)
             override;
        
        Mouse press event. Keep track of zoom anchor position.
        """
        ...
    
    def MouseMoveEvent(self, vtkContextMouseEvent):
        """
        V.MouseMoveEvent(vtkContextMouseEvent) -> bool
        C++: bool MouseMoveEvent(const vtkContextMouseEvent &mouse)
            override;
        
        Mouse move event. Perform pan or zoom as specified by the mouse
        bindings.
        """
        ...
    
    def MouseWheelEvent(self, vtkContextMouseEvent, p_int):
        """
        V.MouseWheelEvent(vtkContextMouseEvent, int) -> bool
        C++: bool MouseWheelEvent(const vtkContextMouseEvent &mouse,
            int delta) override;
        
        Mouse wheel event. Perform pan or zoom as specified by mouse
        bindings.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkContextTransform
        C++: vtkContextTransform *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item, called whenever the item needs to be
        drawn.
        """
        ...
    
    def PanYOnMouseWheelOff(self):
        """
        V.PanYOnMouseWheelOff()
        C++: virtual void PanYOnMouseWheelOff()
        
        Whether to pan in the Y direction on mouse wheels. Default is
        false.
        """
        ...
    
    def PanYOnMouseWheelOn(self):
        """
        V.PanYOnMouseWheelOn()
        C++: virtual void PanYOnMouseWheelOn()
        
        Whether to pan in the Y direction on mouse wheels. Default is
        false.
        """
        ...
    
    def Rotate(self, p_float):
        """
        V.Rotate(float)
        C++: virtual void Rotate(float angle)
        
        Rotate the item by the specified angle.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkContextTransform
        C++: static vtkContextTransform *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Scale(self, p_float, p_float_1):
        """
        V.Scale(float, float)
        C++: virtual void Scale(float dx, float dy)
        
        Scale the item by the specified amounts dx and dy in the x and y
        directions.
        """
        ...
    
    def SetPanModifier(self, p_int):
        """
        V.SetPanModifier(int)
        C++: virtual void SetPanModifier(int _arg)
        
        The modifier from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::NO_MODIFIER.
        """
        ...
    
    def SetPanMouseButton(self, p_int):
        """
        V.SetPanMouseButton(int)
        C++: virtual void SetPanMouseButton(int _arg)
        
        The mouse button from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::LEFT_BUTTON.
        """
        ...
    
    def SetPanYOnMouseWheel(self, bool):
        """
        V.SetPanYOnMouseWheel(bool)
        C++: virtual void SetPanYOnMouseWheel(bool _arg)
        
        Whether to pan in the Y direction on mouse wheels. Default is
        false.
        """
        ...
    
    def SetSecondaryPanModifier(self, p_int):
        """
        V.SetSecondaryPanModifier(int)
        C++: virtual void SetSecondaryPanModifier(int _arg)
        
        A secondary modifier from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::NO_MODIFIER.
        """
        ...
    
    def SetSecondaryPanMouseButton(self, p_int):
        """
        V.SetSecondaryPanMouseButton(int)
        C++: virtual void SetSecondaryPanMouseButton(int _arg)
        
        A secondary mouse button from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::NO_BUTTON (disabled).
        """
        ...
    
    def SetSecondaryZoomModifier(self, p_int):
        """
        V.SetSecondaryZoomModifier(int)
        C++: virtual void SetSecondaryZoomModifier(int _arg)
        
        A secondary modifier from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::SHIFT_MODIFIER.
        """
        ...
    
    def SetSecondaryZoomMouseButton(self, p_int):
        """
        V.SetSecondaryZoomMouseButton(int)
        C++: virtual void SetSecondaryZoomMouseButton(int _arg)
        
        A secondary mouse button from vtkContextMouseEvent to use for
        panning. Default is vtkContextMouseEvent::LEFT_BUTTON.
        """
        ...
    
    def SetZoomModifier(self, p_int):
        """
        V.SetZoomModifier(int)
        C++: virtual void SetZoomModifier(int _arg)
        
        The modifier from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::NO_MODIFIER.
        """
        ...
    
    def SetZoomMouseButton(self, p_int):
        """
        V.SetZoomMouseButton(int)
        C++: virtual void SetZoomMouseButton(int _arg)
        
        The mouse button from vtkContextMouseEvent to use for panning.
        Default is vtkContextMouseEvent::RIGHT_BUTTON.
        """
        ...
    
    def SetZoomOnMouseWheel(self, bool):
        """
        V.SetZoomOnMouseWheel(bool)
        C++: virtual void SetZoomOnMouseWheel(bool _arg)
        
        Whether to zoom on mouse wheels. Default is true.
        """
        ...
    
    def Translate(self, p_float, p_float_1):
        """
        V.Translate(float, float)
        C++: virtual void Translate(float dx, float dy)
        
        Translate the item by the specified amounts dx and dy in the x
        and y directions.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Perform any updates to the item that may be necessary before
        rendering. The scene should take care of calling this on all
        items before their Paint function is invoked.
        """
        ...
    
    def ZoomOnMouseWheelOff(self):
        """
        V.ZoomOnMouseWheelOff()
        C++: virtual void ZoomOnMouseWheelOff()
        
        Whether to zoom on mouse wheels. Default is true.
        """
        ...
    
    def ZoomOnMouseWheelOn(self):
        """
        V.ZoomOnMouseWheelOn()
        C++: virtual void ZoomOnMouseWheelOn()
        
        Whether to zoom on mouse wheels. Default is true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageItem(vtkContextItem):
    """
    vtkImageItem - a vtkContextItem that draws a supplied image in the
    scene.
    
    Superclass: vtkContextItem
    
    This vtkContextItem draws the supplied image in the scene.
    """
    def GetImage(self):
        """
        V.GetImage() -> vtkImageData
        C++: virtual vtkImageData *GetImage()
        
        Get the image of the item.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float)
        C++: virtual float *GetPosition()
        
        Get the position of the bottom corner of the image.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageItem
        C++: vtkImageItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageItem
        C++: static vtkImageItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetImage(self, vtkImageData):
        """
        V.SetImage(vtkImageData)
        C++: void SetImage(vtkImageData *image)
        
        Set the image of the item.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1):
        """
        V.SetPosition(float, float)
        C++: virtual void SetPosition(float _arg1, float _arg2)
        V.SetPosition((float, float))
        C++: void SetPosition(const float _arg[2])
        
        Set the position of the bottom corner of the image.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPolyDataItem(vtkContextItem):
    """
    vtkPolyDataItem - Filter that translate a vtkPolyData 2D mesh into
    vtkContextItems.
    
    Superclass: vtkContextItem
    
    @warning
    The input vtkPolyData should be a 2D mesh.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPolyData(self):
        """
        V.GetPolyData() -> vtkPolyData
        C++: virtual vtkPolyData *GetPolyData()
        
        Get the image of the item.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataItem
        C++: vtkPolyDataItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataItem
        C++: static vtkPolyDataItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMappedColors(self, vtkUnsignedCharArray):
        """
        V.SetMappedColors(vtkUnsignedCharArray)
        C++: void SetMappedColors(vtkUnsignedCharArray *colors)
        
        Set mapped colors. User-selected scalars are mapped to a color
        lookup table externally.
        """
        ...
    
    def SetPolyData(self, vtkPolyData):
        """
        V.SetPolyData(vtkPolyData)
        C++: void SetPolyData(vtkPolyData *polyData)
        
        Set the PolyData of the item.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1):
        """
        V.SetPosition(float, float)
        C++: virtual void SetPosition(float _arg1, float _arg2)
        V.SetPosition((float, float))
        C++: void SetPosition(const float _arg[2])
        
        Set the position of the bottom corner of the image.
        """
        ...
    
    def SetScalarMode(self, p_int):
        """
        V.SetScalarMode(int)
        C++: virtual void SetScalarMode(int _arg)
        
        Set the data scalar mode.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLabeledContourPolyDataItem(vtkPolyDataItem):
    """
    vtkLabeledContourPolyDataItem - Filter that translate a vtkPolyData
    2D mesh into vtkContextItems.
    
    Superclass: vtkPolyDataItem
    
    @warning
    The input vtkPolyData should be a 2D mesh.
    """
    def GetLabelVisibility(self):
        """
        V.GetLabelVisibility() -> bool
        C++: virtual bool GetLabelVisibility()
        
        If true, labels will be placed and drawn during rendering.
        Otherwise, only the mapper returned by GetPolyDataMapper() will
        be rendered. The default is to draw labels.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSkipDistance(self):
        """
        V.GetSkipDistance() -> float
        C++: virtual double GetSkipDistance()
        
        Ensure that there are at least SkipDistance pixels between
        labels. This is only enforced on labels along the same line. The
        default is 0.
        """
        ...
    
    def GetTextProperties(self):
        """
        V.GetTextProperties() -> vtkTextPropertyCollection
        C++: virtual vtkTextPropertyCollection *GetTextProperties()
        
        The text properties used to label the lines. Note that both
        vertical and horizontal justifications will be reset to
        "Centered" prior to rendering.
        
        * If the TextPropertyMapping array exists, then it is used to
          identify which
        * text property to use for each label as follows: If the scalar
          value of a
        * line is found in the mapping, the index of the value in mapping
        is used to
        * lookup the text property in the collection. If there are more
          mapping
        * values than properties, the properties are looped through until
        the
        * mapping is exhausted.
        
        * Lines with scalar values missing from the mapping are assigned
          text
        * properties in a round-robin fashion starting from the beginning
        of the
        * collection, repeating from the start of the collection as
          necessary.
        * @sa SetTextProperty
        * @sa SetTextPropertyMapping
        """
        ...
    
    def GetTextPropertyMapping(self):
        """
        V.GetTextPropertyMapping() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetTextPropertyMapping()
        
        Values in this array correspond to vtkTextProperty objects in the
        TextProperties collection. If a contour line's scalar value
        exists in this array, the corresponding text property is used for
        the label. See SetTextProperties for more information.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LabelVisibilityOff(self):
        """
        V.LabelVisibilityOff()
        C++: virtual void LabelVisibilityOff()
        
        If true, labels will be placed and drawn during rendering.
        Otherwise, only the mapper returned by GetPolyDataMapper() will
        be rendered. The default is to draw labels.
        """
        ...
    
    def LabelVisibilityOn(self):
        """
        V.LabelVisibilityOn()
        C++: virtual void LabelVisibilityOn()
        
        If true, labels will be placed and drawn during rendering.
        Otherwise, only the mapper returned by GetPolyDataMapper() will
        be rendered. The default is to draw labels.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLabeledContourPolyDataItem
        C++: vtkLabeledContourPolyDataItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLabeledContourPolyDataItem
        C++: static vtkLabeledContourPolyDataItem *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetLabelVisibility(self, bool):
        """
        V.SetLabelVisibility(bool)
        C++: virtual void SetLabelVisibility(bool _arg)
        
        If true, labels will be placed and drawn during rendering.
        Otherwise, only the mapper returned by GetPolyDataMapper() will
        be rendered. The default is to draw labels.
        """
        ...
    
    def SetSkipDistance(self, p_float):
        """
        V.SetSkipDistance(float)
        C++: virtual void SetSkipDistance(double _arg)
        
        Ensure that there are at least SkipDistance pixels between
        labels. This is only enforced on labels along the same line. The
        default is 0.
        """
        ...
    
    def SetTextProperties(self, vtkTextPropertyCollection):
        """
        V.SetTextProperties(vtkTextPropertyCollection)
        C++: virtual void SetTextProperties(
            vtkTextPropertyCollection *coll)
        
        The text properties used to label the lines. Note that both
        vertical and horizontal justifications will be reset to
        "Centered" prior to rendering.
        
        * If the TextPropertyMapping array exists, then it is used to
          identify which
        * text property to use for each label as follows: If the scalar
          value of a
        * line is found in the mapping, the index of the value in mapping
        is used to
        * lookup the text property in the collection. If there are more
          mapping
        * values than properties, the properties are looped through until
        the
        * mapping is exhausted.
        
        * Lines with scalar values missing from the mapping are assigned
          text
        * properties in a round-robin fashion starting from the beginning
        of the
        * collection, repeating from the start of the collection as
          necessary.
        * @sa SetTextProperty
        * @sa SetTextPropertyMapping
        """
        ...
    
    def SetTextProperty(self, vtkTextProperty):
        """
        V.SetTextProperty(vtkTextProperty)
        C++: virtual void SetTextProperty(vtkTextProperty *tprop)
        
        The text property used to label the lines. Note that both
        vertical and horizontal justifications will be reset to
        "Centered" prior to rendering.
        
        ote This is a convenience method that clears TextProperties and
        inserts the argument as the only property in the collection.
        @sa SetTextProperties
        """
        ...
    
    def SetTextPropertyMapping(self, vtkDoubleArray):
        """
        V.SetTextPropertyMapping(vtkDoubleArray)
        C++: virtual void SetTextPropertyMapping(vtkDoubleArray *mapping)
        
        Values in this array correspond to vtkTextProperty objects in the
        TextProperties collection. If a contour line's scalar value
        exists in this array, the corresponding text property is used for
        the label. See SetTextProperties for more information.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMarkerUtilities(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkMarkerUtilities - Utilities for generating marker images
    
    Superclass: vtkObject
    
    This class programmatically generates markers of a specified size for
    various marker styles.
    
    @sa
    vtkPlotLine, vtkPlotPoints
    """
    def GenerateMarker(self, vtkImageData, p_int, p_int_1):
        """
        V.GenerateMarker(vtkImageData, int, int)
        C++: static void GenerateMarker(vtkImageData *data, int style,
            int width)
        
        Generate the requested symbol of a particular style and size.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMarkerUtilities
        C++: vtkMarkerUtilities *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMarkerUtilities
        C++: static vtkMarkerUtilities *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CIRCLE = ...
    CROSS = ...
    DIAMOND = ...
    NONE = ...
    PLUS = ...
    SQUARE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPen(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkPen - provides a pen that draws the outlines of shapes drawn by
    vtkContext2D.
    
    Superclass: vtkObject
    
    The vtkPen defines the outline of shapes that are drawn by
    vtkContext2D. The color is stored as four unsigned chars (RGBA),
    where the opacity defaults to 255, but can be modified separately to
    the other components. Ideally we would use a lightweight color class
    to store and pass around colors.
    """
    def DeepCopy(self, vtkPen):
        """
        V.DeepCopy(vtkPen)
        C++: void DeepCopy(vtkPen *pen)
        
        Make a deep copy of the supplied pen.
        """
        ...
    
    def GetColor(self, p_int=..., p_int=..., p_int=...):
        """
        V.GetColor([int, int, int])
        C++: void GetColor(unsigned char color[3])
        V.GetColor() -> (int, ...)
        C++: unsigned char *GetColor()
        
        Get the color of the brush - expects an unsigned char of length
        3.
        """
        ...
    
    def GetColorF(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetColorF([float, float, float])
        C++: void GetColorF(double color[3])
        
        Get the color of the brush - expects a double of length 3 to copy
        into.
        """
        ...
    
    def GetColorObject(self):
        """
        V.GetColorObject() -> vtkColor4ub
        C++: vtkColor4ub GetColorObject()
        
        Get the color of the pen.
        """
        ...
    
    def GetLineType(self):
        """
        V.GetLineType() -> int
        C++: int GetLineType()
        
        Get the type of line that the pen will draw.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpacity(self):
        """
        V.GetOpacity() -> int
        C++: unsigned char GetOpacity()
        
        Get the opacity (unsigned char), ranging from 0 (transparent) to
        255 (opaque).
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> float
        C++: virtual float GetWidth()
        
        Set/Get the width of the pen.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPen
        C++: vtkPen *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPen
        C++: static vtkPen *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColor(self, p_int=..., p_int=..., p_int=...):
        """
        V.SetColor([int, int, int])
        C++: void SetColor(unsigned char color[3])
        V.SetColor(int, int, int)
        C++: void SetColor(unsigned char r, unsigned char g,
            unsigned char b)
        V.SetColor(int, int, int, int)
        C++: void SetColor(unsigned char r, unsigned char g,
            unsigned char b, unsigned char a)
        V.SetColor(vtkColor4ub)
        C++: void SetColor(const vtkColor4ub &color)
        
        Set the color of the brush with three component unsigned chars
        (RGB), ranging from 0 to 255.
        """
        ...
    
    def SetColorF(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetColorF([float, float, float])
        C++: void SetColorF(double color[3])
        V.SetColorF(float, float, float)
        C++: void SetColorF(double r, double g, double b)
        V.SetColorF(float, float, float, float)
        C++: void SetColorF(double r, double g, double b, double a)
        
        Set the color of the brush with three component doubles (RGB),
        ranging from 0.0 to 1.0.
        """
        ...
    
    def SetLineType(self, p_int):
        """
        V.SetLineType(int)
        C++: void SetLineType(int type)
        
        Set the type of line that the pen should draw. The default is
        solid (1).
        """
        ...
    
    def SetOpacity(self, p_int):
        """
        V.SetOpacity(int)
        C++: void SetOpacity(unsigned char a)
        
        Set the opacity with an unsigned char, ranging from 0
        (transparent) to 255 (opaque).
        """
        ...
    
    def SetOpacityF(self, p_float):
        """
        V.SetOpacityF(float)
        C++: void SetOpacityF(double a)
        
        Set the opacity with a double, ranging from 0.0 (transparent) to
        1.0 (opaque).
        """
        ...
    
    def SetWidth(self, p_float):
        """
        V.SetWidth(float)
        C++: virtual void SetWidth(float _arg)
        
        Set/Get the width of the pen.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DASH_DOT_DOT_LINE = ...
    DASH_DOT_LINE = ...
    DASH_LINE = ...
    DENSE_DOT_LINE = ...
    DOT_LINE = ...
    NO_PEN = ...
    SOLID_LINE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkPropItem(vtkAbstractContextItem):
    """
    vtkPropItem - Embed a vtkProp in a vtkContextScene.
    
    Superclass: vtkAbstractContextItem
    
    This class allows vtkProp objects to be drawn inside a
    vtkContextScene. This is especially useful for constructing layered
    scenes that need to ignore depth testing.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPropObject(self):
        """
        V.GetPropObject() -> vtkProp
        C++: virtual vtkProp *GetPropObject()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPropItem
        C++: vtkPropItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the item, called whenever the item needs to be
        drawn.
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: void ReleaseGraphicsResources() override;
        
        Release graphics resources hold by the item. The default
        implementation is empty.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPropItem
        C++: static vtkPropItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPropObject(self, vtkProp):
        """
        V.SetPropObject(vtkProp)
        C++: virtual void SetPropObject(vtkProp *PropObject)
        
        The actor to render.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTooltipItem(vtkContextItem):
    """
    vtkTooltipItem - takes care of drawing 2D axes
    
    Superclass: vtkContextItem
    
    The vtkTooltipItem is drawn in screen coordinates. It is used to
    display a tooltip on a scene, giving additional information about an
    element on the scene, such as in vtkChartXY. It takes care of
    ensuring that it draws itself within the bounds of the screen.
    """
    def GetBrush(self):
        """
        V.GetBrush() -> vtkBrush
        C++: virtual vtkBrush *GetBrush()
        
        Get a pointer to the vtkPen object.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPen(self):
        """
        V.GetPen() -> vtkPen
        C++: virtual vtkPen *GetPen()
        
        Get a pointer to the vtkTextProperty object that controls the way
        the text is rendered.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float)
        C++: virtual float *GetPosition()
        
        Get position of the axis (in pixels).
        """
        ...
    
    def GetPositionVector(self):
        """
        V.GetPositionVector() -> vtkVector2f
        C++: vtkVector2f GetPositionVector()
        
        Get position of the axis (in pixels).
        """
        ...
    
    def GetText(self):
        """
        V.GetText() -> string
        C++: virtual vtkStdString GetText()
        
        Get/set the text of the item.
        """
        ...
    
    def GetTextProperties(self):
        """
        V.GetTextProperties() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperties()
        
        Get the vtkTextProperty that governs how the tooltip text is
        displayed.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTooltipItem
        C++: vtkTooltipItem *NewInstance()
        """
        ...
    
    def Paint(self, vtkContext2D):
        """
        V.Paint(vtkContext2D) -> bool
        C++: bool Paint(vtkContext2D *painter) override;
        
        Paint event for the tooltip.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTooltipItem
        C++: static vtkTooltipItem *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPosition(self, p_float, p_float_1):
        """
        V.SetPosition(float, float)
        C++: virtual void SetPosition(float _arg1, float _arg2)
        V.SetPosition((float, float))
        C++: void SetPosition(const float _arg[2])
        V.SetPosition(vtkVector2f)
        C++: void SetPosition(const vtkVector2f &pos)
        
        Set the position of the tooltip (in pixels).
        """
        ...
    
    def SetText(self, string):
        """
        V.SetText(string)
        C++: virtual void SetText(const vtkStdString &title)
        
        Get/set the text of the item.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: void Update() override;
        
        Update the geometry of the tooltip.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
