"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkIOCore as __vtkmodules_vtkIOCore
import vtkmodules.vtkIOImage as __vtkmodules_vtkIOImage

class vtkMINCImageAttributes(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkMINCImageAttributes - A container for a MINC image header.
    
    Superclass: vtkObject
    
    This class provides methods to access all of the information
    contained in the MINC header.  If you read a MINC file into VTK and
    then write it out again, you can use
    writer->SetImageAttributes(reader->GetImageAttributes) to ensure that
    all of the medical information contained in the file is transferred
    from the reader to the writer.  If you want to change any of the
    header information, you must use ShallowCopy to make a copy of the
    reader's attributes and then modify only the copy.
    @sa
    vtkMINCImageReader vtkMINCImageWriter@par Thanks: Thanks to David
    Gobbi for writing this class and Atamai Inc. for contributing it to
    VTK.
    """
    def AddDimension(self, string):
        """
        V.AddDimension(string)
        C++: virtual void AddDimension(const char *dimension)
        V.AddDimension(string, int)
        C++: virtual void AddDimension(const char *dimension,
            vtkIdType length)
        
        Add the names of up to five dimensions. The ordering of these
        dimensions will determine the dimension order of the file.  If no
        DimensionNames are set, the writer will set the dimension order
        of the file to be the same as the dimension order in memory.
        """
        ...
    
    def FindImageRange(self, p_float=..., p_float=...):
        """
        V.FindImageRange([float, float])
        C++: virtual void FindImageRange(double range[2])
        
        Find the image range of the data from the information stored in
        the attributes.
        """
        ...
    
    def FindValidRange(self, p_float=..., p_float=...):
        """
        V.FindValidRange([float, float])
        C++: virtual void FindValidRange(double range[2])
        
        Find the valid range of the data from the information stored in
        the attributes.
        """
        ...
    
    def GetAttributeNames(self, string):
        """
        V.GetAttributeNames(string) -> vtkStringArray
        C++: virtual vtkStringArray *GetAttributeNames(
            const char *variable)
        
        List the attribute names for a variable.  Set the variable to the
        empty string to get a list of the global attributes.
        """
        ...
    
    def GetAttributeValueAsArray(self, string, string_1):
        """
        V.GetAttributeValueAsArray(string, string) -> vtkDataArray
        C++: virtual vtkDataArray *GetAttributeValueAsArray(
            const char *variable, const char *attribute)
        
        Set attribute values for a variable as a vtkDataArray. Set the
        variable to the empty string to access global attributes.
        """
        ...
    
    def GetAttributeValueAsDouble(self, string, string_1):
        """
        V.GetAttributeValueAsDouble(string, string) -> float
        C++: virtual double GetAttributeValueAsDouble(
            const char *variable, const char *attribute)
        
        Set an attribute value as a double.  Set the variable to the
        empty string to access global attributes. If you specify a
        variable that does not exist, it will be created.
        """
        ...
    
    def GetAttributeValueAsInt(self, string, string_1):
        """
        V.GetAttributeValueAsInt(string, string) -> int
        C++: virtual int GetAttributeValueAsInt(const char *variable,
            const char *attribute)
        
        Set an attribute value as an int. Set the variable to the empty
        string to access global attributes. If you specify a variable
        that does not exist, it will be created.
        """
        ...
    
    def GetAttributeValueAsString(self, string, string_1):
        """
        V.GetAttributeValueAsString(string, string) -> string
        C++: virtual const char *GetAttributeValueAsString(
            const char *variable, const char *attribute)
        
        Set an attribute value as a string.  Set the variable to the
        empty string to access global attributes. If you specify a
        variable that does not exist, it will be created.
        """
        ...
    
    def GetDataType(self):
        """
        V.GetDataType() -> int
        C++: virtual int GetDataType()
        
        Get the image data type, as stored on disk.  This information is
        useful if the file was converted to floating-point when it was
        loaded.  When writing a file from float or double image data, you
        can use this method to prescribe the output type.
        """
        ...
    
    def GetDimensionLengths(self):
        """
        V.GetDimensionLengths() -> vtkIdTypeArray
        C++: virtual vtkIdTypeArray *GetDimensionLengths()
        
        Get the lengths of all the dimensions.  The dimension lengths are
        informative, the vtkMINCImageWriter does not look at these values
        but instead uses the dimension sizes of its input.
        """
        ...
    
    def GetDimensionNames(self):
        """
        V.GetDimensionNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetDimensionNames()
        
        Get the dimension names.  The dimension names are same order as
        written in the file, starting with the slowest-varying dimension.
         Use this method to get the array if you need to change "space"
        dimensions to "frequency" after performing a Fourier transform.
        """
        ...
    
    def GetImageMax(self):
        """
        V.GetImageMax() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetImageMax()
        
        Get the image min and max arrays. These are set by the reader,
        but they aren't used by the writer except to compute the full
        real data range of the original file.
        """
        ...
    
    def GetImageMin(self):
        """
        V.GetImageMin() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetImageMin()
        
        Get the image min and max arrays. These are set by the reader,
        but they aren't used by the writer except to compute the full
        real data range of the original file.
        """
        ...
    
    def GetName(self):
        """
        V.GetName() -> string
        C++: virtual char *GetName()
        
        Get the name of the image, not including the path or the
        extension.  This is only needed for printing the header and there
        is usually no need to set it.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfImageMinMaxDimensions(self):
        """
        V.GetNumberOfImageMinMaxDimensions() -> int
        C++: virtual int GetNumberOfImageMinMaxDimensions()
        
        Get the number of ImageMinMax dimensions.
        """
        ...
    
    def GetValidateAttributes(self):
        """
        V.GetValidateAttributes() -> int
        C++: virtual vtkTypeBool GetValidateAttributes()
        
        Set this to Off if you do not want to automatically validate
        every attribute that is set.
        """
        ...
    
    def GetVariableNames(self):
        """
        V.GetVariableNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetVariableNames()
        
        Get the names of all the variables.
        """
        ...
    
    def HasAttribute(self, string, string_1):
        """
        V.HasAttribute(string, string) -> int
        C++: virtual int HasAttribute(const char *variable,
            const char *attribute)
        
        Check to see if a particular attribute exists.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMINCImageAttributes
        C++: vtkMINCImageAttributes *NewInstance()
        """
        ...
    
    def PrintFileHeader(self):
        """
        V.PrintFileHeader()
        C++: virtual void PrintFileHeader()
        
        A diagnostic function.  Print the header of the file in the same
        format as ncdump or mincheader.
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: virtual void Reset()
        
        Reset all the attributes in preparation for loading new
        information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMINCImageAttributes
        C++: static vtkMINCImageAttributes *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAttributeValueAsArray(self, string, string_1, vtkDataArray):
        """
        V.SetAttributeValueAsArray(string, string, vtkDataArray)
        C++: virtual void SetAttributeValueAsArray(const char *variable,
            const char *attribute, vtkDataArray *array)
        
        Set attribute values for a variable as a vtkDataArray. Set the
        variable to the empty string to access global attributes.
        """
        ...
    
    def SetAttributeValueAsDouble(self, string, string_1, p_float):
        """
        V.SetAttributeValueAsDouble(string, string, float)
        C++: virtual void SetAttributeValueAsDouble(const char *variable,
            const char *attribute, double value)
        
        Set an attribute value as a double.  Set the variable to the
        empty string to access global attributes. If you specify a
        variable that does not exist, it will be created.
        """
        ...
    
    def SetAttributeValueAsInt(self, string, string_1, p_int):
        """
        V.SetAttributeValueAsInt(string, string, int)
        C++: virtual void SetAttributeValueAsInt(const char *variable,
            const char *attribute, int value)
        
        Set an attribute value as an int. Set the variable to the empty
        string to access global attributes. If you specify a variable
        that does not exist, it will be created.
        """
        ...
    
    def SetAttributeValueAsString(self, string, string_1, string_2):
        """
        V.SetAttributeValueAsString(string, string, string)
        C++: virtual void SetAttributeValueAsString(const char *variable,
            const char *attribute, const char *value)
        
        Set an attribute value as a string.  Set the variable to the
        empty string to access global attributes. If you specify a
        variable that does not exist, it will be created.
        """
        ...
    
    def SetDataType(self, p_int):
        """
        V.SetDataType(int)
        C++: virtual void SetDataType(int _arg)
        
        Get the image data type, as stored on disk.  This information is
        useful if the file was converted to floating-point when it was
        loaded.  When writing a file from float or double image data, you
        can use this method to prescribe the output type.
        """
        ...
    
    def SetImageMax(self, vtkDoubleArray):
        """
        V.SetImageMax(vtkDoubleArray)
        C++: virtual void SetImageMax(vtkDoubleArray *imageMax)
        
        Get the image min and max arrays. These are set by the reader,
        but they aren't used by the writer except to compute the full
        real data range of the original file.
        """
        ...
    
    def SetImageMin(self, vtkDoubleArray):
        """
        V.SetImageMin(vtkDoubleArray)
        C++: virtual void SetImageMin(vtkDoubleArray *imageMin)
        
        Get the image min and max arrays. These are set by the reader,
        but they aren't used by the writer except to compute the full
        real data range of the original file.
        """
        ...
    
    def SetName(self, string):
        """
        V.SetName(string)
        C++: virtual void SetName(const char *_arg)
        
        Get the name of the image, not including the path or the
        extension.  This is only needed for printing the header and there
        is usually no need to set it.
        """
        ...
    
    def SetNumberOfImageMinMaxDimensions(self, p_int):
        """
        V.SetNumberOfImageMinMaxDimensions(int)
        C++: virtual void SetNumberOfImageMinMaxDimensions(int _arg)
        
        Get the number of ImageMinMax dimensions.
        """
        ...
    
    def SetValidateAttributes(self, p_int):
        """
        V.SetValidateAttributes(int)
        C++: virtual void SetValidateAttributes(vtkTypeBool _arg)
        
        Set this to Off if you do not want to automatically validate
        every attribute that is set.
        """
        ...
    
    def ShallowCopy(self, vtkMINCImageAttributes):
        """
        V.ShallowCopy(vtkMINCImageAttributes)
        C++: virtual void ShallowCopy(vtkMINCImageAttributes *source)
        
        Do a shallow copy.  This will copy all the attributes from the
        source.  It is much more efficient than a DeepCopy would be,
        since it only copies pointers to the attribute values instead of
        copying the arrays themselves.  You must use this method to make
        a copy if you want to modify any MINC attributes from a
        MINCReader before you pass them to a MINCWriter.
        """
        ...
    
    def ValidateAttribute(self, string, string_1, vtkDataArray):
        """
        V.ValidateAttribute(string, string, vtkDataArray) -> int
        C++: virtual int ValidateAttribute(const char *varname,
            const char *attname, vtkDataArray *array)
        
        Validate a particular attribute.  This involves checking that the
        attribute is a MINC standard attribute, and checking whether it
        can be set (as opposed to being set automatically from the image
        information).  The return values is 0 if the attribute is set
        automatically and therefore should not be copied from here, 1 if
        this attribute is valid and should be set, and 2 if the attribute
        is non-standard.
        """
        ...
    
    def ValidateAttributesOff(self):
        """
        V.ValidateAttributesOff()
        C++: virtual void ValidateAttributesOff()
        
        Set this to Off if you do not want to automatically validate
        every attribute that is set.
        """
        ...
    
    def ValidateAttributesOn(self):
        """
        V.ValidateAttributesOn()
        C++: virtual void ValidateAttributesOn()
        
        Set this to Off if you do not want to automatically validate
        every attribute that is set.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMINCImageReader(__vtkmodules_vtkIOImage.vtkImageReader2):
    """
    vtkMINCImageReader - A reader for MINC files.
    
    Superclass: vtkImageReader2
    
    MINC is a NetCDF-based medical image file format that was developed
    at the Montreal Neurological Institute in 1992. This class will read
    a MINC file into VTK, rearranging the data to match the VTK x, y, and
    z dimensions, and optionally rescaling real-valued data to VTK_FLOAT
    if RescaleRealValuesOn() is set. If RescaleRealValues is off, then
    the data will be stored in its original data type and the
    GetRescaleSlope(), GetRescaleIntercept() method can be used to
    retrieve global rescaling parameters. If the original file had a time
    dimension, the SetTimeStep() method can be used to specify a time
    step to read. All of the original header information can be accessed
    though the GetImageAttributes() method.
    @sa
    vtkMINCImageWriter vtkMINCImageAttributes@par Thanks: Thanks to David
    Gobbi for writing this class and Atamai Inc. for contributing it to
    VTK.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: int CanReadFile(const char *name) override;
        
        Test whether the specified file can be read.
        """
        ...
    
    def GetDataRange(self):
        """
        V.GetDataRange() -> (float, float)
        C++: virtual double *GetDataRange()
        V.GetDataRange([float, float])
        C++: virtual void GetDataRange(double range[2])
        
        Get the scalar range of the output from the information in the
        file header.  This is more efficient that computing the scalar
        range, but in some cases the MINC file stores an incorrect
        valid_range and the DataRange will be incorrect.
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: const char *GetDescriptiveName() override;
        
        Get the name of this file format.
        """
        ...
    
    def GetDirectionCosines(self):
        """
        V.GetDirectionCosines() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetDirectionCosines()
        
        Get a matrix that describes the orientation of the data. The
        three columns of the matrix are the direction cosines for the x,
        y and z dimensions respectively.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: const char *GetFileExtensions() override;
        
        Get the extension for this file format.
        """
        ...
    
    def GetImageAttributes(self):
        """
        V.GetImageAttributes() -> vtkMINCImageAttributes
        C++: virtual vtkMINCImageAttributes *GetImageAttributes()
        
        Get the image attributes, which contain patient information and
        other useful metadata.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTimeSteps(self):
        """
        V.GetNumberOfTimeSteps() -> int
        C++: virtual int GetNumberOfTimeSteps()
        
        Get the number of time steps in the file.
        """
        ...
    
    def GetRescaleIntercept(self):
        """
        V.GetRescaleIntercept() -> float
        C++: virtual double GetRescaleIntercept()
        
        Get the slope and intercept for rescaling the scalar values to
        real data values.  To convert scalar values to real values, use
        the equation y = x*RescaleSlope + RescaleIntercept.
        """
        ...
    
    def GetRescaleRealValues(self):
        """
        V.GetRescaleRealValues() -> int
        C++: virtual vtkTypeBool GetRescaleRealValues()
        
        Rescale real data values to float.  If this is done, the
        RescaleSlope and RescaleIntercept will be set to 1 and 0
        respectively.  This is off by default.
        """
        ...
    
    def GetRescaleSlope(self):
        """
        V.GetRescaleSlope() -> float
        C++: virtual double GetRescaleSlope()
        
        Get the slope and intercept for rescaling the scalar values to
        real data values.  To convert scalar values to real values, use
        the equation y = x*RescaleSlope + RescaleIntercept.
        """
        ...
    
    def GetTimeStep(self):
        """
        V.GetTimeStep() -> int
        C++: virtual int GetTimeStep()
        
        Set the time step to read.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMINCImageReader
        C++: vtkMINCImageReader *NewInstance()
        """
        ...
    
    def RescaleRealValuesOff(self):
        """
        V.RescaleRealValuesOff()
        C++: virtual void RescaleRealValuesOff()
        
        Rescale real data values to float.  If this is done, the
        RescaleSlope and RescaleIntercept will be set to 1 and 0
        respectively.  This is off by default.
        """
        ...
    
    def RescaleRealValuesOn(self):
        """
        V.RescaleRealValuesOn()
        C++: virtual void RescaleRealValuesOn()
        
        Rescale real data values to float.  If this is done, the
        RescaleSlope and RescaleIntercept will be set to 1 and 0
        respectively.  This is off by default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMINCImageReader
        C++: static vtkMINCImageReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *name) override;
        
        Set the file name.
        """
        ...
    
    def SetRescaleRealValues(self, p_int):
        """
        V.SetRescaleRealValues(int)
        C++: virtual void SetRescaleRealValues(vtkTypeBool _arg)
        
        Rescale real data values to float.  If this is done, the
        RescaleSlope and RescaleIntercept will be set to 1 and 0
        respectively.  This is off by default.
        """
        ...
    
    def SetTimeStep(self, p_int):
        """
        V.SetTimeStep(int)
        C++: virtual void SetTimeStep(int _arg)
        
        Set the time step to read.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMINCImageWriter(__vtkmodules_vtkIOImage.vtkImageWriter):
    """
    vtkMINCImageWriter - A writer for MINC files.
    
    Superclass: vtkImageWriter
    
    MINC is a NetCDF-based medical image file format that was developed
    at the Montreal Neurological Institute in 1992. The data is written
    slice-by-slice, and this writer is therefore suitable for streaming
    MINC data that is larger than the memory size through VTK.  This
    writer can also produce files with up to 4 dimensions, where the
    fourth dimension is provided by using AddInput() to specify multiple
    input data sets.  If you want to set header information for the file,
    you must supply a vtkMINCImageAttributes
    @sa
    vtkMINCImageReader vtkMINCImageAttributes@par Thanks: Thanks to David
    Gobbi for writing this class and Atamai Inc. for contributing it to
    VTK.
    """
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: virtual const char *GetDescriptiveName()
        
        Get the name of this file format.
        """
        ...
    
    def GetDirectionCosines(self):
        """
        V.GetDirectionCosines() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetDirectionCosines()
        
        Set a matrix that describes the orientation of the data.  The
        three columns of this matrix should give the unit-vector
        directions for the VTK x, y and z dimensions respectively. The
        writer will use this information to determine how to map the VTK
        dimensions to the canonical MINC dimensions, and if necessary,
        the writer will re-order one or more dimensions back-to-front to
        ensure that no MINC dimension ends up with a direction cosines
        vector whose dot product with the canonical unit vector for that
        dimension is negative.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: virtual const char *GetFileExtensions()
        
        Get the extension for this file format.
        """
        ...
    
    def GetHistoryAddition(self):
        """
        V.GetHistoryAddition() -> string
        C++: virtual char *GetHistoryAddition()
        
        Set a string value to append to the history of the file.  This
        string should describe, briefly, how the file was processed.
        """
        ...
    
    def GetImageAttributes(self):
        """
        V.GetImageAttributes() -> vtkMINCImageAttributes
        C++: virtual vtkMINCImageAttributes *GetImageAttributes()
        
        Set the image attributes, which contain patient information and
        other useful metadata.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRescaleIntercept(self):
        """
        V.GetRescaleIntercept() -> float
        C++: virtual double GetRescaleIntercept()
        
        Set the slope and intercept for rescaling the intensities.  The
        default values are zero, which indicates to the reader that no
        rescaling is to be performed.
        """
        ...
    
    def GetRescaleSlope(self):
        """
        V.GetRescaleSlope() -> float
        C++: virtual double GetRescaleSlope()
        
        Set the slope and intercept for rescaling the intensities.  The
        default values are zero, which indicates to the reader that no
        rescaling is to be performed.
        """
        ...
    
    def GetStrictValidation(self):
        """
        V.GetStrictValidation() -> int
        C++: virtual vtkTypeBool GetStrictValidation()
        
        Set whether to validate that all variable attributes that have
        been set are ones that are listed in the MINC standard.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMINCImageWriter
        C++: vtkMINCImageWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMINCImageWriter
        C++: static vtkMINCImageWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDirectionCosines(self, vtkMatrix4x4):
        """
        V.SetDirectionCosines(vtkMatrix4x4)
        C++: virtual void SetDirectionCosines(vtkMatrix4x4 *matrix)
        
        Set a matrix that describes the orientation of the data.  The
        three columns of this matrix should give the unit-vector
        directions for the VTK x, y and z dimensions respectively. The
        writer will use this information to determine how to map the VTK
        dimensions to the canonical MINC dimensions, and if necessary,
        the writer will re-order one or more dimensions back-to-front to
        ensure that no MINC dimension ends up with a direction cosines
        vector whose dot product with the canonical unit vector for that
        dimension is negative.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: void SetFileName(const char *name) override;
        
        Set the file name.
        """
        ...
    
    def SetHistoryAddition(self, string):
        """
        V.SetHistoryAddition(string)
        C++: virtual void SetHistoryAddition(const char *_arg)
        
        Set a string value to append to the history of the file.  This
        string should describe, briefly, how the file was processed.
        """
        ...
    
    def SetImageAttributes(self, vtkMINCImageAttributes):
        """
        V.SetImageAttributes(vtkMINCImageAttributes)
        C++: virtual void SetImageAttributes(
            vtkMINCImageAttributes *attributes)
        
        Set the image attributes, which contain patient information and
        other useful metadata.
        """
        ...
    
    def SetRescaleIntercept(self, p_float):
        """
        V.SetRescaleIntercept(float)
        C++: virtual void SetRescaleIntercept(double _arg)
        
        Set the slope and intercept for rescaling the intensities.  The
        default values are zero, which indicates to the reader that no
        rescaling is to be performed.
        """
        ...
    
    def SetRescaleSlope(self, p_float):
        """
        V.SetRescaleSlope(float)
        C++: virtual void SetRescaleSlope(double _arg)
        
        Set the slope and intercept for rescaling the intensities.  The
        default values are zero, which indicates to the reader that no
        rescaling is to be performed.
        """
        ...
    
    def SetStrictValidation(self, p_int):
        """
        V.SetStrictValidation(int)
        C++: virtual void SetStrictValidation(vtkTypeBool _arg)
        
        Set whether to validate that all variable attributes that have
        been set are ones that are listed in the MINC standard.
        """
        ...
    
    def StrictValidationOff(self):
        """
        V.StrictValidationOff()
        C++: virtual void StrictValidationOff()
        
        Set whether to validate that all variable attributes that have
        been set are ones that are listed in the MINC standard.
        """
        ...
    
    def StrictValidationOn(self):
        """
        V.StrictValidationOn()
        C++: virtual void StrictValidationOn()
        
        Set whether to validate that all variable attributes that have
        been set are ones that are listed in the MINC standard.
        """
        ...
    
    def Write(self):
        """
        V.Write()
        C++: void Write() override;
        
        Write the data.  This will attempt to stream the data
        slice-by-slice through the pipeline and out to the file, unless
        the whole extent of the input has already been updated.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMNIObjectReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkMNIObjectReader - A reader for MNI surface mesh files.
    
    Superclass: vtkPolyDataAlgorithm
    
    The MNI .obj file format is used to store geometrical data.  This
    file format was developed at the McConnell Brain Imaging Centre at
    the Montreal Neurological Institute and is used by their software.
    Only polygon and line files are supported by this reader, but for
    those formats, all data elements are read including normals, colors,
    and surface properties.  ASCII and binary file types are supported.
    @sa
    vtkMINCImageReader vtkMNIObjectWriter vtkMNITransformReader@par
    Thanks: Thanks to David Gobbi for writing this class and Atamai Inc.
    for contributing it to VTK.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: virtual int CanReadFile(const char *name)
        
        Test whether the specified file can be read.
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: virtual const char *GetDescriptiveName()
        
        Get the name of this file format.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: virtual const char *GetFileExtensions()
        
        Get the extension for this file format.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set the file name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        Get the property associated with the object.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMNIObjectReader
        C++: vtkMNIObjectReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMNIObjectReader
        C++: static vtkMNIObjectReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set the file name.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMNIObjectWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkMNIObjectWriter - A writer for MNI surface mesh files.
    
    Superclass: vtkWriter
    
    The MNI .obj file format is used to store geometrical data.  This
    file format was developed at the McConnell Brain Imaging Centre at
    the Montreal Neurological Institute and is used by their software.
    Only polygon and line files are supported by this writer.  For these
    formats, all data elements are written including normals, colors, and
    surface properties.  ASCII and binary file types are supported.
    @sa
    vtkMINCImageReader vtkMNIObjectReader vtkMNITransformReader@par
    Thanks: Thanks to David Gobbi for writing this class and Atamai Inc.
    for contributing it to VTK.
    """
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: virtual const char *GetDescriptiveName()
        
        Get the name of this file format.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: virtual const char *GetFileExtensions()
        
        Get the extension for this file format.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def GetFileType(self):
        """
        V.GetFileType() -> int
        C++: virtual int GetFileType()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetFileTypeMaxValue(self):
        """
        V.GetFileTypeMaxValue() -> int
        C++: virtual int GetFileTypeMaxValue()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetFileTypeMinValue(self):
        """
        V.GetFileTypeMinValue() -> int
        C++: virtual int GetFileTypeMinValue()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        V.GetInput(int) -> vtkPolyData
        C++: vtkPolyData *GetInput(int port)
        
        Get the input to this writer.
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkLookupTable
        C++: virtual vtkLookupTable *GetLookupTable()
        
        Set the lookup table associated with the object.  This will be
        used to convert scalar values to colors, if a mapper is not set.
        """
        ...
    
    def GetMapper(self):
        """
        V.GetMapper() -> vtkMapper
        C++: virtual vtkMapper *GetMapper()
        
        Set the mapper associated with the object.  Optional. This is
        useful for exporting an actor with the same colors that are used
        to display the actor within VTK.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetProperty(self):
        """
        V.GetProperty() -> vtkProperty
        C++: virtual vtkProperty *GetProperty()
        
        Set the property associated with the object.  Optional. This is
        useful for exporting an actor.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMNIObjectWriter
        C++: vtkMNIObjectWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMNIObjectWriter
        C++: static vtkMNIObjectWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def SetFileType(self, p_int):
        """
        V.SetFileType(int)
        C++: virtual void SetFileType(int _arg)
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetFileTypeToASCII(self):
        """
        V.SetFileTypeToASCII()
        C++: void SetFileTypeToASCII()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetFileTypeToBinary(self):
        """
        V.SetFileTypeToBinary()
        C++: void SetFileTypeToBinary()
        
        Specify file type (ASCII or BINARY) for vtk data file.
        """
        ...
    
    def SetLookupTable(self, vtkLookupTable):
        """
        V.SetLookupTable(vtkLookupTable)
        C++: virtual void SetLookupTable(vtkLookupTable *table)
        
        Set the lookup table associated with the object.  This will be
        used to convert scalar values to colors, if a mapper is not set.
        """
        ...
    
    def SetMapper(self, vtkMapper):
        """
        V.SetMapper(vtkMapper)
        C++: virtual void SetMapper(vtkMapper *mapper)
        
        Set the mapper associated with the object.  Optional. This is
        useful for exporting an actor with the same colors that are used
        to display the actor within VTK.
        """
        ...
    
    def SetProperty(self, vtkProperty):
        """
        V.SetProperty(vtkProperty)
        C++: virtual void SetProperty(vtkProperty *property)
        
        Set the property associated with the object.  Optional. This is
        useful for exporting an actor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMNITagPointReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkMNITagPointReader - A reader for MNI tag files.
    
    Superclass: vtkPolyDataAlgorithm
    
    The MNI .tag file format is used to store labeled points, it can
    store either one or two point sets.  All point sets must have the
    same number of points and they will share the same labels.  This file
    format was developed at the McConnell Brain Imaging Centre at the
    Montreal Neurological Institute and is used by their software. The
    labels are stored as a vtkStringArray in the PointData of the output
    dataset, which is a vtkPolyData.
    @sa
    vtkMINCImageReader vtkMNIObjectReader vtkMNITransformReader@par
    Thanks: Thanks to David Gobbi for contributing this class.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: virtual int CanReadFile(const char *name)
        
        Test whether the specified file can be read.
        """
        ...
    
    def GetComments(self):
        """
        V.GetComments() -> string
        C++: virtual const char *GetComments()
        
        Get any comments that are included in the file.
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: virtual const char *GetDescriptiveName()
        
        Get the name of this file format.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: virtual const char *GetFileExtensions()
        
        Get the extension for this file format.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set the file name.
        """
        ...
    
    def GetLabelText(self):
        """
        V.GetLabelText() -> vtkStringArray
        C++: virtual vtkStringArray *GetLabelText()
        
        Get the labels.  These same labels are provided in the output
        point sets, as the PointData data array named "LabelText". This
        will return nullptr if there were no labels in the file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfVolumes(self):
        """
        V.GetNumberOfVolumes() -> int
        C++: virtual int GetNumberOfVolumes()
        
        Get the number of volumes specified by the file, which will be
        equal to one or two.  There will be an output point set for each
        volume, so really, this parameter just tells you the number of
        outputs to expect from this reader.
        """
        ...
    
    def GetPatientIds(self):
        """
        V.GetPatientIds() -> vtkIntArray
        C++: virtual vtkIntArray *GetPatientIds()
        
        Get the patient ids.  These are also provided in the output point
        sets, as the PointData data array named "PatientIds". This will
        return nullptr if there were no ids in the file.
        """
        ...
    
    def GetPoints(self, p_int):
        """
        V.GetPoints(int) -> vtkPoints
        C++: virtual vtkPoints *GetPoints(int port)
        V.GetPoints() -> vtkPoints
        C++: virtual vtkPoints *GetPoints()
        
        Get the points.  These are also provided in the first and second
        output ports of the reader.  This method will return nullptr if
        there is no data.
        """
        ...
    
    def GetStructureIds(self):
        """
        V.GetStructureIds() -> vtkIntArray
        C++: virtual vtkIntArray *GetStructureIds()
        
        Get the structure ids.  These are also provided in the output
        point sets, as the PointData data array named "StructureIds".
        This will return nullptr if there were no ids in the file.
        """
        ...
    
    def GetWeights(self):
        """
        V.GetWeights() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetWeights()
        
        Get the weights.  These are also provided in the output point
        sets, as the PointData data array named "Weights". This will
        return nullptr if there were no weights in the file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMNITagPointReader
        C++: vtkMNITagPointReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMNITagPointReader
        C++: static vtkMNITagPointReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set the file name.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMNITagPointWriter(__vtkmodules_vtkIOCore.vtkWriter):
    """
    vtkMNITagPointWriter - A writer for MNI tag point files.
    
    Superclass: vtkWriter
    
    The MNI .tag file format is used to store tag points, for use in
    either registration or labeling of data volumes.  This file format
    was developed at the McConnell Brain Imaging Centre at the Montreal
    Neurological Institute and is used by their software. Tag points can
    be stored for either one volume or two volumes, and this filter can
    take one or two inputs.  Alternatively, the points to be written can
    be specified by calling SetPoints().
    @sa
    vtkMINCImageReader vtkMNIObjectReader vtkMNITransformReader@par
    Thanks: Thanks to David Gobbi for contributing this class to VTK.
    """
    def GetComments(self):
        """
        V.GetComments() -> string
        C++: virtual char *GetComments()
        
        Set comments to be added to the file.
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: virtual const char *GetDescriptiveName()
        
        Get the name of this file format.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: virtual const char *GetFileExtensions()
        
        Get the extension for this file format.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def GetLabelText(self):
        """
        V.GetLabelText() -> vtkStringArray
        C++: virtual vtkStringArray *GetLabelText()
        
        Set the labels (unless the input PointData has an array called
        LabelText). Labels are optional.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the MTime.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPatientIds(self):
        """
        V.GetPatientIds() -> vtkIntArray
        C++: virtual vtkIntArray *GetPatientIds()
        
        Set the structure ids (unless the input PointData has an array
        called PatientIds).  These are optional.
        """
        ...
    
    def GetPoints(self, p_int):
        """
        V.GetPoints(int) -> vtkPoints
        C++: virtual vtkPoints *GetPoints(int port)
        V.GetPoints() -> vtkPoints
        C++: virtual vtkPoints *GetPoints()
        
        Set the points (unless you set them as inputs).
        """
        ...
    
    def GetStructureIds(self):
        """
        V.GetStructureIds() -> vtkIntArray
        C++: virtual vtkIntArray *GetStructureIds()
        
        Set the structure ids (unless the input PointData has an array
        called StructureIds).  These are optional.
        """
        ...
    
    def GetWeights(self):
        """
        V.GetWeights() -> vtkDoubleArray
        C++: virtual vtkDoubleArray *GetWeights()
        
        Set the weights (unless the input PointData has an array called
        Weights).  Weights are optional.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMNITagPointWriter
        C++: vtkMNITagPointWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMNITagPointWriter
        C++: static vtkMNITagPointWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComments(self, string):
        """
        V.SetComments(string)
        C++: virtual void SetComments(const char *_arg)
        
        Set comments to be added to the file.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of vtk polygon data file to write.
        """
        ...
    
    def SetLabelText(self, vtkStringArray):
        """
        V.SetLabelText(vtkStringArray)
        C++: virtual void SetLabelText(vtkStringArray *a)
        
        Set the labels (unless the input PointData has an array called
        LabelText). Labels are optional.
        """
        ...
    
    def SetPatientIds(self, vtkIntArray):
        """
        V.SetPatientIds(vtkIntArray)
        C++: virtual void SetPatientIds(vtkIntArray *a)
        
        Set the structure ids (unless the input PointData has an array
        called PatientIds).  These are optional.
        """
        ...
    
    def SetPoints(self, p_int, vtkPoints):
        """
        V.SetPoints(int, vtkPoints)
        C++: virtual void SetPoints(int port, vtkPoints *points)
        V.SetPoints(vtkPoints)
        C++: virtual void SetPoints(vtkPoints *points)
        
        Set the points (unless you set them as inputs).
        """
        ...
    
    def SetStructureIds(self, vtkIntArray):
        """
        V.SetStructureIds(vtkIntArray)
        C++: virtual void SetStructureIds(vtkIntArray *a)
        
        Set the structure ids (unless the input PointData has an array
        called StructureIds).  These are optional.
        """
        ...
    
    def SetWeights(self, vtkDoubleArray):
        """
        V.SetWeights(vtkDoubleArray)
        C++: virtual void SetWeights(vtkDoubleArray *a)
        
        Set the weights (unless the input PointData has an array called
        Weights).  Weights are optional.
        """
        ...
    
    def Write(self):
        """
        V.Write() -> int
        C++: int Write() override;
        
        Write the file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMNITransformReader(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkMNITransformReader - A reader for MNI transformation files.
    
    Superclass: vtkAlgorithm
    
    The MNI .xfm file format is used to store geometrical
    transformations.  Three kinds of transformations are supported by the
    file format: affine, thin-plate spline, and grid transformations.
    This file format was developed at the McConnell Brain Imaging Centre
    at the Montreal Neurological Institute and is used by their software.
    @sa
    vtkMINCImageReader vtkMNITransformWriter@par Thanks: Thanks to David
    Gobbi for writing this class and Atamai Inc. for contributing it to
    VTK.
    """
    def CanReadFile(self, string):
        """
        V.CanReadFile(string) -> int
        C++: virtual int CanReadFile(const char *name)
        
        Test whether the specified file can be read.
        """
        ...
    
    def GetComments(self):
        """
        V.GetComments() -> string
        C++: virtual const char *GetComments()
        
        Get any comments that are included in the file.
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: virtual const char *GetDescriptiveName()
        
        Get the name of this file format.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: virtual const char *GetFileExtensions()
        
        Get the extension for this file format.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set the file name.
        """
        ...
    
    def GetNthTransform(self, p_int):
        """
        V.GetNthTransform(int) -> vtkAbstractTransform
        C++: virtual vtkAbstractTransform *GetNthTransform(int i)
        
        Get one of the transforms listed in the file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTransforms(self):
        """
        V.GetNumberOfTransforms() -> int
        C++: virtual int GetNumberOfTransforms()
        
        Get the number of transforms in the file.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkAbstractTransform
        C++: virtual vtkAbstractTransform *GetTransform()
        
        Get the transform that results from concatenating all of the
        transforms in the file.  This will return null if you have not
        specified a file name.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMNITransformReader
        C++: vtkMNITransformReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMNITransformReader
        C++: static vtkMNITransformReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set the file name.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkMNITransformWriter(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkMNITransformWriter - A writer for MNI transformation files.
    
    Superclass: vtkAlgorithm
    
    The MNI .xfm file format is used to store geometrical
    transformations.  Three kinds of transformations are supported by the
    file format: affine, thin-plate spline, and grid transformations.
    This file format was developed at the McConnell Brain Imaging Centre
    at the Montreal Neurological Institute and is used by their software.
    @sa
    vtkMINCImageWriter vtkMNITransformReader@par Thanks: Thanks to David
    Gobbi for writing this class and Atamai Inc. for contributing it to
    VTK.
    """
    def AddTransform(self, vtkAbstractTransform):
        """
        V.AddTransform(vtkAbstractTransform)
        C++: virtual void AddTransform(vtkAbstractTransform *transform)
        
        Add another transform to the file.  The next time that
        SetTransform is called, all added transforms will be removed.
        """
        ...
    
    def GetComments(self):
        """
        V.GetComments() -> string
        C++: virtual char *GetComments()
        
        Set comments to be added to the file.
        """
        ...
    
    def GetDescriptiveName(self):
        """
        V.GetDescriptiveName() -> string
        C++: virtual const char *GetDescriptiveName()
        
        Get the name of this file format.
        """
        ...
    
    def GetFileExtensions(self):
        """
        V.GetFileExtensions() -> string
        C++: virtual const char *GetFileExtensions()
        
        Get the extension for this file format.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set the file name.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTransforms(self):
        """
        V.GetNumberOfTransforms() -> int
        C++: virtual int GetNumberOfTransforms()
        
        Get the number of transforms that will be written.
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkAbstractTransform
        C++: virtual vtkAbstractTransform *GetTransform()
        
        Set the transform.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMNITransformWriter
        C++: vtkMNITransformWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMNITransformWriter
        C++: static vtkMNITransformWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetComments(self, string):
        """
        V.SetComments(string)
        C++: virtual void SetComments(const char *_arg)
        
        Set comments to be added to the file.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set the file name.
        """
        ...
    
    def SetTransform(self, vtkAbstractTransform):
        """
        V.SetTransform(vtkAbstractTransform)
        C++: virtual void SetTransform(vtkAbstractTransform *transform)
        
        Set the transform.
        """
        ...
    
    def Write(self):
        """
        V.Write()
        C++: virtual void Write()
        
        Write the file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
