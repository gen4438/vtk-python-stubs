"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkRibbonFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkRibbonFilter - create oriented ribbons from lines defined in
    polygonal dataset
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkRibbonFilter is a filter to create oriented ribbons from lines
    defined in polygonal dataset. The orientation of the ribbon is along
    the line segments and perpendicular to "projected" line normals.
    Projected line normals are the original line normals projected to be
    perpendicular to the local line segment. An offset angle can be
    specified to rotate the ribbon with respect to the normal.
    
    @warning
    The input line must not have duplicate points, or normals at points
    that are parallel to the incoming/outgoing line segments. (Duplicate
    points can be removed with vtkCleanPolyData.) If a line does not meet
    this criteria, then that line is not tubed.
    
    @sa
    vtkTubeFilter
    """
    def GetAngle(self):
        """
        V.GetAngle() -> float
        C++: virtual double GetAngle()
        
        Set the offset angle of the ribbon from the line normal. (The
        angle is expressed in degrees.) The default is 0.0
        """
        ...
    
    def GetAngleMaxValue(self):
        """
        V.GetAngleMaxValue() -> float
        C++: virtual double GetAngleMaxValue()
        
        Set the offset angle of the ribbon from the line normal. (The
        angle is expressed in degrees.) The default is 0.0
        """
        ...
    
    def GetAngleMinValue(self):
        """
        V.GetAngleMinValue() -> float
        C++: virtual double GetAngleMinValue()
        
        Set the offset angle of the ribbon from the line normal. (The
        angle is expressed in degrees.) The default is 0.0
        """
        ...
    
    def GetDefaultNormal(self):
        """
        V.GetDefaultNormal() -> (float, float, float)
        C++: virtual double *GetDefaultNormal()
        
        Set the default normal to use if no normals are supplied, and
        DefaultNormalOn is set. The default is (0,0,1)
        """
        ...
    
    def GetGenerateTCoords(self):
        """
        V.GetGenerateTCoords() -> int
        C++: virtual int GetGenerateTCoords()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def GetGenerateTCoordsAsString(self):
        """
        V.GetGenerateTCoordsAsString() -> string
        C++: const char *GetGenerateTCoordsAsString()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def GetGenerateTCoordsMaxValue(self):
        """
        V.GetGenerateTCoordsMaxValue() -> int
        C++: virtual int GetGenerateTCoordsMaxValue()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def GetGenerateTCoordsMinValue(self):
        """
        V.GetGenerateTCoordsMinValue() -> int
        C++: virtual int GetGenerateTCoordsMinValue()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTextureLength(self):
        """
        V.GetTextureLength() -> float
        C++: virtual double GetTextureLength()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space. The default is 1.0
        """
        ...
    
    def GetTextureLengthMaxValue(self):
        """
        V.GetTextureLengthMaxValue() -> float
        C++: virtual double GetTextureLengthMaxValue()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space. The default is 1.0
        """
        ...
    
    def GetTextureLengthMinValue(self):
        """
        V.GetTextureLengthMinValue() -> float
        C++: virtual double GetTextureLengthMinValue()
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space. The default is 1.0
        """
        ...
    
    def GetUseDefaultNormal(self):
        """
        V.GetUseDefaultNormal() -> int
        C++: virtual vtkTypeBool GetUseDefaultNormal()
        
        Set a boolean to control whether to use default normals. The
        default is Off
        """
        ...
    
    def GetVaryWidth(self):
        """
        V.GetVaryWidth() -> int
        C++: virtual vtkTypeBool GetVaryWidth()
        
        Turn on/off the variation of ribbon width with scalar value. The
        default is Off
        """
        ...
    
    def GetWidth(self):
        """
        V.GetWidth() -> float
        C++: virtual double GetWidth()
        
        Set the "half" width of the ribbon. If the width is allowed to
        vary, this is the minimum width. The default is 0.5
        """
        ...
    
    def GetWidthFactor(self):
        """
        V.GetWidthFactor() -> float
        C++: virtual double GetWidthFactor()
        
        Set the maximum ribbon width in terms of a multiple of the
        minimum width. The default is 2.0
        """
        ...
    
    def GetWidthMaxValue(self):
        """
        V.GetWidthMaxValue() -> float
        C++: virtual double GetWidthMaxValue()
        
        Set the "half" width of the ribbon. If the width is allowed to
        vary, this is the minimum width. The default is 0.5
        """
        ...
    
    def GetWidthMinValue(self):
        """
        V.GetWidthMinValue() -> float
        C++: virtual double GetWidthMinValue()
        
        Set the "half" width of the ribbon. If the width is allowed to
        vary, this is the minimum width. The default is 0.5
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRibbonFilter
        C++: vtkRibbonFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRibbonFilter
        C++: static vtkRibbonFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAngle(self, p_float):
        """
        V.SetAngle(float)
        C++: virtual void SetAngle(double _arg)
        
        Set the offset angle of the ribbon from the line normal. (The
        angle is expressed in degrees.) The default is 0.0
        """
        ...
    
    def SetDefaultNormal(self, p_float, p_float_1, p_float_2):
        """
        V.SetDefaultNormal(float, float, float)
        C++: virtual void SetDefaultNormal(double _arg1, double _arg2,
            double _arg3)
        V.SetDefaultNormal((float, float, float))
        C++: virtual void SetDefaultNormal(const double _arg[3])
        
        Set the default normal to use if no normals are supplied, and
        DefaultNormalOn is set. The default is (0,0,1)
        """
        ...
    
    def SetGenerateTCoords(self, p_int):
        """
        V.SetGenerateTCoords(int)
        C++: virtual void SetGenerateTCoords(int _arg)
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def SetGenerateTCoordsToNormalizedLength(self):
        """
        V.SetGenerateTCoordsToNormalizedLength()
        C++: void SetGenerateTCoordsToNormalizedLength()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def SetGenerateTCoordsToOff(self):
        """
        V.SetGenerateTCoordsToOff()
        C++: void SetGenerateTCoordsToOff()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def SetGenerateTCoordsToUseLength(self):
        """
        V.SetGenerateTCoordsToUseLength()
        C++: void SetGenerateTCoordsToUseLength()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def SetGenerateTCoordsToUseScalars(self):
        """
        V.SetGenerateTCoordsToUseScalars()
        C++: void SetGenerateTCoordsToUseScalars()
        
        Control whether and how texture coordinates are produced. This is
        useful for striping the ribbon with time textures, etc.
        """
        ...
    
    def SetTextureLength(self, p_float):
        """
        V.SetTextureLength(float)
        C++: virtual void SetTextureLength(double _arg)
        
        Control the conversion of units during the texture coordinates
        calculation. The TextureLength indicates what length (whether
        calculated from scalars or length) is mapped to the [0,1) texture
        space. The default is 1.0
        """
        ...
    
    def SetUseDefaultNormal(self, p_int):
        """
        V.SetUseDefaultNormal(int)
        C++: virtual void SetUseDefaultNormal(vtkTypeBool _arg)
        
        Set a boolean to control whether to use default normals. The
        default is Off
        """
        ...
    
    def SetVaryWidth(self, p_int):
        """
        V.SetVaryWidth(int)
        C++: virtual void SetVaryWidth(vtkTypeBool _arg)
        
        Turn on/off the variation of ribbon width with scalar value. The
        default is Off
        """
        ...
    
    def SetWidth(self, p_float):
        """
        V.SetWidth(float)
        C++: virtual void SetWidth(double _arg)
        
        Set the "half" width of the ribbon. If the width is allowed to
        vary, this is the minimum width. The default is 0.5
        """
        ...
    
    def SetWidthFactor(self, p_float):
        """
        V.SetWidthFactor(float)
        C++: virtual void SetWidthFactor(double _arg)
        
        Set the maximum ribbon width in terms of a multiple of the
        minimum width. The default is 2.0
        """
        ...
    
    def UseDefaultNormalOff(self):
        """
        V.UseDefaultNormalOff()
        C++: virtual void UseDefaultNormalOff()
        
        Set a boolean to control whether to use default normals. The
        default is Off
        """
        ...
    
    def UseDefaultNormalOn(self):
        """
        V.UseDefaultNormalOn()
        C++: virtual void UseDefaultNormalOn()
        
        Set a boolean to control whether to use default normals. The
        default is Off
        """
        ...
    
    def VaryWidthOff(self):
        """
        V.VaryWidthOff()
        C++: virtual void VaryWidthOff()
        
        Turn on/off the variation of ribbon width with scalar value. The
        default is Off
        """
        ...
    
    def VaryWidthOn(self):
        """
        V.VaryWidthOn()
        C++: virtual void VaryWidthOn()
        
        Turn on/off the variation of ribbon width with scalar value. The
        default is Off
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


