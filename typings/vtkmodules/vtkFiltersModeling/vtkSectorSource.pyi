"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSectorSource(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSectorSource - create a sector of a disk
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSectorSource creates a sector of a polygonal disk. The disk has
    zero height. The user can specify the inner and outer radius of the
    disk, the z-coordinate, and the radial and circumferential resolution
    of the polygonal representation.
    @sa
    vtkLinearExtrusionFilter
    """
    def GetCircumferentialResolution(self):
        """
        V.GetCircumferentialResolution() -> int
        C++: virtual int GetCircumferentialResolution()
        
        Set the number of points in circumferential direction.
        """
        ...
    
    def GetCircumferentialResolutionMaxValue(self):
        """
        V.GetCircumferentialResolutionMaxValue() -> int
        C++: virtual int GetCircumferentialResolutionMaxValue()
        
        Set the number of points in circumferential direction.
        """
        ...
    
    def GetCircumferentialResolutionMinValue(self):
        """
        V.GetCircumferentialResolutionMinValue() -> int
        C++: virtual int GetCircumferentialResolutionMinValue()
        
        Set the number of points in circumferential direction.
        """
        ...
    
    def GetEndAngle(self):
        """
        V.GetEndAngle() -> float
        C++: virtual double GetEndAngle()
        
        Set the end angle of the sector.
        """
        ...
    
    def GetEndAngleMaxValue(self):
        """
        V.GetEndAngleMaxValue() -> float
        C++: virtual double GetEndAngleMaxValue()
        
        Set the end angle of the sector.
        """
        ...
    
    def GetEndAngleMinValue(self):
        """
        V.GetEndAngleMinValue() -> float
        C++: virtual double GetEndAngleMinValue()
        
        Set the end angle of the sector.
        """
        ...
    
    def GetInnerRadius(self):
        """
        V.GetInnerRadius() -> float
        C++: virtual double GetInnerRadius()
        
        Specify inner radius of the sector.
        """
        ...
    
    def GetInnerRadiusMaxValue(self):
        """
        V.GetInnerRadiusMaxValue() -> float
        C++: virtual double GetInnerRadiusMaxValue()
        
        Specify inner radius of the sector.
        """
        ...
    
    def GetInnerRadiusMinValue(self):
        """
        V.GetInnerRadiusMinValue() -> float
        C++: virtual double GetInnerRadiusMinValue()
        
        Specify inner radius of the sector.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOuterRadius(self):
        """
        V.GetOuterRadius() -> float
        C++: virtual double GetOuterRadius()
        
        Specify outer radius of the sector.
        """
        ...
    
    def GetOuterRadiusMaxValue(self):
        """
        V.GetOuterRadiusMaxValue() -> float
        C++: virtual double GetOuterRadiusMaxValue()
        
        Specify outer radius of the sector.
        """
        ...
    
    def GetOuterRadiusMinValue(self):
        """
        V.GetOuterRadiusMinValue() -> float
        C++: virtual double GetOuterRadiusMinValue()
        
        Specify outer radius of the sector.
        """
        ...
    
    def GetRadialResolution(self):
        """
        V.GetRadialResolution() -> int
        C++: virtual int GetRadialResolution()
        
        Set the number of points in radius direction.
        """
        ...
    
    def GetRadialResolutionMaxValue(self):
        """
        V.GetRadialResolutionMaxValue() -> int
        C++: virtual int GetRadialResolutionMaxValue()
        
        Set the number of points in radius direction.
        """
        ...
    
    def GetRadialResolutionMinValue(self):
        """
        V.GetRadialResolutionMinValue() -> int
        C++: virtual int GetRadialResolutionMinValue()
        
        Set the number of points in radius direction.
        """
        ...
    
    def GetStartAngle(self):
        """
        V.GetStartAngle() -> float
        C++: virtual double GetStartAngle()
        
        Set the start angle of the sector.
        """
        ...
    
    def GetStartAngleMaxValue(self):
        """
        V.GetStartAngleMaxValue() -> float
        C++: virtual double GetStartAngleMaxValue()
        
        Set the start angle of the sector.
        """
        ...
    
    def GetStartAngleMinValue(self):
        """
        V.GetStartAngleMinValue() -> float
        C++: virtual double GetStartAngleMinValue()
        
        Set the start angle of the sector.
        """
        ...
    
    def GetZCoord(self):
        """
        V.GetZCoord() -> float
        C++: virtual double GetZCoord()
        
        Specify the z coordinate of the sector.
        """
        ...
    
    def GetZCoordMaxValue(self):
        """
        V.GetZCoordMaxValue() -> float
        C++: virtual double GetZCoordMaxValue()
        
        Specify the z coordinate of the sector.
        """
        ...
    
    def GetZCoordMinValue(self):
        """
        V.GetZCoordMinValue() -> float
        C++: virtual double GetZCoordMinValue()
        
        Specify the z coordinate of the sector.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSectorSource
        C++: vtkSectorSource *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSectorSource
        C++: static vtkSectorSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCircumferentialResolution(self, p_int):
        """
        V.SetCircumferentialResolution(int)
        C++: virtual void SetCircumferentialResolution(int _arg)
        
        Set the number of points in circumferential direction.
        """
        ...
    
    def SetEndAngle(self, p_float):
        """
        V.SetEndAngle(float)
        C++: virtual void SetEndAngle(double _arg)
        
        Set the end angle of the sector.
        """
        ...
    
    def SetInnerRadius(self, p_float):
        """
        V.SetInnerRadius(float)
        C++: virtual void SetInnerRadius(double _arg)
        
        Specify inner radius of the sector.
        """
        ...
    
    def SetOuterRadius(self, p_float):
        """
        V.SetOuterRadius(float)
        C++: virtual void SetOuterRadius(double _arg)
        
        Specify outer radius of the sector.
        """
        ...
    
    def SetRadialResolution(self, p_int):
        """
        V.SetRadialResolution(int)
        C++: virtual void SetRadialResolution(int _arg)
        
        Set the number of points in radius direction.
        """
        ...
    
    def SetStartAngle(self, p_float):
        """
        V.SetStartAngle(float)
        C++: virtual void SetStartAngle(double _arg)
        
        Set the start angle of the sector.
        """
        ...
    
    def SetZCoord(self, p_float):
        """
        V.SetZCoord(float)
        C++: virtual void SetZCoord(double _arg)
        
        Specify the z coordinate of the sector.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


