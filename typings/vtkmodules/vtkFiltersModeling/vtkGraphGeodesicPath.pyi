"""
This type stub file was generated by pyright.
"""

from .vtkGeodesicPath import vtkGeodesicPath

class vtkGraphGeodesicPath(vtkGeodesicPath):
    """
    vtkGraphGeodesicPath - Abstract base for classes that generate a
    geodesic path on a graph (mesh).
    
    Superclass: vtkGeodesicPath
    
    Serves as a base class for algorithms that trace a geodesic on a
    polygonal dataset treating it as a graph. ie points connecting the
    vertices of the graph
    """
    def GetEndVertex(self):
        """
        V.GetEndVertex() -> int
        C++: virtual vtkIdType GetEndVertex()
        
        The vertex at the end of the shortest path
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def GetStartVertex(self):
        """
        V.GetStartVertex() -> int
        C++: virtual vtkIdType GetStartVertex()
        
        The vertex at the start of the shortest path
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphGeodesicPath
        C++: vtkGraphGeodesicPath *NewInstance()
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphGeodesicPath
        C++: static vtkGraphGeodesicPath *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def SetEndVertex(self, p_int):
        """
        V.SetEndVertex(int)
        C++: virtual void SetEndVertex(vtkIdType _arg)
        
        The vertex at the end of the shortest path
        """
        ...
    
    def SetStartVertex(self, p_int):
        """
        V.SetStartVertex(int)
        C++: virtual void SetStartVertex(vtkIdType _arg)
        
        The vertex at the start of the shortest path
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


