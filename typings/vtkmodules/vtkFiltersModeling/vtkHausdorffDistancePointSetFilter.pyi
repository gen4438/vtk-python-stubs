"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkHausdorffDistancePointSetFilter(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkHausdorffDistancePointSetFilter - Compute Hausdorff distance
    between two point sets
    
    Superclass: vtkPointSetAlgorithm
    
    This class computes the relative and hausdorff distances from two
    point sets (input port 0 and input port 1). If no topology is
    specified (ie. vtkPointSet or vtkPolyData without vtkPolys), the
    distances are computed between point location. If polys exist (ie
    triangulation), the TargetDistanceMethod allows for an interpolation
    of the cells to ensure a better minimal distance exploration.
    
    The outputs (port 0 and 1) have the same geometry and topology as its
    respective input port. Two FieldData arrays are added :
    HausdorffDistance and RelativeDistance. The former is equal on both
    outputs whereas the latter may differ. A PointData containing the
    specific point minimal distance is also added to both outputs.
    
    @author Frederic Commandeur@author Jerome Velut@author LTSI
    
    @see https://www.vtkjournal.org/browse/publication/839
    """
    def GetHausdorffDistance(self):
        """
        V.GetHausdorffDistance() -> float
        C++: virtual double GetHausdorffDistance()
        
        Get the Hausdorff Distance.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for construction, type and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for construction, type and printing.
        """
        ...
    
    def GetRelativeDistance(self):
        """
        V.GetRelativeDistance() -> (float, float)
        C++: virtual double *GetRelativeDistance()
        
        Get the Relative Distance from A to B and B to A.
        """
        ...
    
    def GetTargetDistanceMethod(self):
        """
        V.GetTargetDistanceMethod() -> int
        C++: virtual int GetTargetDistanceMethod()
        
        Specify the strategy for computing the distance. If no topology
        is specified (ie. vtkPointSet or vtkPolyData without vtkPolys),
        the distances are computed between point location. If polys exist
        (i.e. triangulation), the TargetDistanceMethod allows for an
        interpolation of the cells to ensure a better minimal distance
        exploration.
        """
        ...
    
    def GetTargetDistanceMethodAsString(self):
        """
        V.GetTargetDistanceMethodAsString() -> string
        C++: const char *GetTargetDistanceMethodAsString()
        
        Specify the strategy for computing the distance. If no topology
        is specified (ie. vtkPointSet or vtkPolyData without vtkPolys),
        the distances are computed between point location. If polys exist
        (i.e. triangulation), the TargetDistanceMethod allows for an
        interpolation of the cells to ensure a better minimal distance
        exploration.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for construction, type and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for construction, type and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHausdorffDistancePointSetFilter
        C++: vtkHausdorffDistancePointSetFilter *NewInstance()
        
        Standard methods for construction, type and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkHausdorffDistancePointSetFilter
        C++: static vtkHausdorffDistancePointSetFilter *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for construction, type and printing.
        """
        ...
    
    def SetTargetDistanceMethod(self, p_int):
        """
        V.SetTargetDistanceMethod(int)
        C++: virtual void SetTargetDistanceMethod(int _arg)
        
        Specify the strategy for computing the distance. If no topology
        is specified (ie. vtkPointSet or vtkPolyData without vtkPolys),
        the distances are computed between point location. If polys exist
        (i.e. triangulation), the TargetDistanceMethod allows for an
        interpolation of the cells to ensure a better minimal distance
        exploration.
        """
        ...
    
    def SetTargetDistanceMethodToPointToCell(self):
        """
        V.SetTargetDistanceMethodToPointToCell()
        C++: void SetTargetDistanceMethodToPointToCell()
        
        Specify the strategy for computing the distance. If no topology
        is specified (ie. vtkPointSet or vtkPolyData without vtkPolys),
        the distances are computed between point location. If polys exist
        (i.e. triangulation), the TargetDistanceMethod allows for an
        interpolation of the cells to ensure a better minimal distance
        exploration.
        """
        ...
    
    def SetTargetDistanceMethodToPointToPoint(self):
        """
        V.SetTargetDistanceMethodToPointToPoint()
        C++: void SetTargetDistanceMethodToPointToPoint()
        
        Specify the strategy for computing the distance. If no topology
        is specified (ie. vtkPointSet or vtkPolyData without vtkPolys),
        the distances are computed between point location. If polys exist
        (i.e. triangulation), the TargetDistanceMethod allows for an
        interpolation of the cells to ensure a better minimal distance
        exploration.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    DistanceMethod = ...
    POINT_TO_CELL = ...
    POINT_TO_POINT = ...
    __dict__ = ...
    __vtkname__ = ...


