"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSpherePuzzle(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkSpherePuzzle - create a polygonal sphere centered at the origin
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkSpherePuzzle creates
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetState(self):
        """
        V.GetState() -> (int, ...)
        C++: int *GetState()
        
        For drawing state as arrows.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MoveHorizontal(self, p_int, p_int_1, p_int_2):
        """
        V.MoveHorizontal(int, int, int)
        C++: void MoveHorizontal(int section, int percentage,
            int rightFlag)
        
        Move the top/bottom half one segment either direction.
        """
        ...
    
    def MovePoint(self, p_int):
        """
        V.MovePoint(int)
        C++: void MovePoint(int percentage)
        
        Move actually implements the pending move. When percentage is
        100, the pending move becomes inactive, and SetPoint will have to
        be called again to setup another move.
        """
        ...
    
    def MoveVertical(self, p_int, p_int_1, p_int_2):
        """
        V.MoveVertical(int, int, int)
        C++: void MoveVertical(int section, int percentage, int rightFlag)
        
        Rotate vertical half of sphere along one of the longitude lines.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSpherePuzzle
        C++: vtkSpherePuzzle *NewInstance()
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reset the state of this puzzle back to its original state.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSpherePuzzle
        C++: static vtkSpherePuzzle *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPoint(self, p_float, p_float_1, p_float_2):
        """
        V.SetPoint(float, float, float) -> int
        C++: int SetPoint(double x, double y, double z)
        
        SetPoint will be called as the mouse moves over the screen. The
        output will change to indicate the pending move. SetPoint returns
        zero if move is not activated by point. Otherwise it encodes the
        move into a unique integer so that the caller can determine if
        the move state has changed. This will answer the question, "Should I
        render."
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


