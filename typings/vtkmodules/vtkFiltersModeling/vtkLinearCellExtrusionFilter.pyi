"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkLinearCellExtrusionFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkLinearCellExtrusionFilter - extrude polygonal data to create 3D
    cells from 2D cells
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkLinearCellExtrusionFilter is a modeling filter. It takes polygonal
    data as input and generates an unstructured grid data on output. The
    input dataset is swept according to the input cell data array value
    along the cell normal and creates new 3D primitives. Triangles will
    become Wedges, Quads will become Hexahedrons, and Polygons will
    become Polyhedrons. This filter currently takes into account only
    polys and discard vertices, lines and strips. Unlike the
    vtkLinearExtrusionFilter, this filter is designed to extrude each
    cell independently using its normal and its scalar value.
    
    @sa
    vtkLinearExtrusionFilter
    """
    def CreateDefaultLocator(self):
        """
        V.CreateDefaultLocator()
        C++: void CreateDefaultLocator()
        
        Create default locator. Used to create one when none is
        specified. The locator is used to merge coincident points.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkIncrementalPointLocator
        C++: virtual vtkIncrementalPointLocator *GetLocator()
        
        Specify a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def GetMergeDuplicatePoints(self):
        """
        V.GetMergeDuplicatePoints() -> bool
        C++: virtual bool GetMergeDuplicatePoints()
        
        Specify if the algorithm should merge duplicate points. Default
        is false
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Specify the scale factor applied on the cell value during
        extrusion. Default is 1.0
        """
        ...
    
    def GetUserVector(self):
        """
        V.GetUserVector() -> (float, float, float)
        C++: virtual double *GetUserVector()
        
        Specify the scale factor applied on the cell value during
        extrusion.
        """
        ...
    
    def GetUseUserVector(self):
        """
        V.GetUseUserVector() -> bool
        C++: virtual bool GetUseUserVector()
        
        Specify if the algorithm should use the specified vector instead
        of cell normals. Default is false
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergeDuplicatePointsOff(self):
        """
        V.MergeDuplicatePointsOff()
        C++: virtual void MergeDuplicatePointsOff()
        
        Specify if the algorithm should merge duplicate points. Default
        is false
        """
        ...
    
    def MergeDuplicatePointsOn(self):
        """
        V.MergeDuplicatePointsOn()
        C++: virtual void MergeDuplicatePointsOn()
        
        Specify if the algorithm should merge duplicate points. Default
        is false
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLinearCellExtrusionFilter
        C++: vtkLinearCellExtrusionFilter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLinearCellExtrusionFilter
        C++: static vtkLinearCellExtrusionFilter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetLocator(self, vtkIncrementalPointLocator):
        """
        V.SetLocator(vtkIncrementalPointLocator)
        C++: virtual void SetLocator(vtkIncrementalPointLocator *_arg)
        
        Specify a spatial locator for merging points. By default, an
        instance of vtkMergePoints is used.
        """
        ...
    
    def SetMergeDuplicatePoints(self, bool):
        """
        V.SetMergeDuplicatePoints(bool)
        C++: virtual void SetMergeDuplicatePoints(bool _arg)
        
        Specify if the algorithm should merge duplicate points. Default
        is false
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Specify the scale factor applied on the cell value during
        extrusion. Default is 1.0
        """
        ...
    
    def SetUserVector(self, p_float, p_float_1, p_float_2):
        """
        V.SetUserVector(float, float, float)
        C++: virtual void SetUserVector(double _arg1, double _arg2,
            double _arg3)
        V.SetUserVector((float, float, float))
        C++: virtual void SetUserVector(const double _arg[3])
        
        Specify the scale factor applied on the cell value during
        extrusion.
        """
        ...
    
    def SetUseUserVector(self, bool):
        """
        V.SetUseUserVector(bool)
        C++: virtual void SetUseUserVector(bool _arg)
        
        Specify if the algorithm should use the specified vector instead
        of cell normals. Default is false
        """
        ...
    
    def UseUserVectorOff(self):
        """
        V.UseUserVectorOff()
        C++: virtual void UseUserVectorOff()
        
        Specify if the algorithm should use the specified vector instead
        of cell normals. Default is false
        """
        ...
    
    def UseUserVectorOn(self):
        """
        V.UseUserVectorOn()
        C++: virtual void UseUserVectorOn()
        
        Specify if the algorithm should use the specified vector instead
        of cell normals. Default is false
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


