"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkOutlineFilter(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkOutlineFilter - create wireframe outline for an arbitrary data set
    or composite dataset
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkOutlineFilter is a filter that generates a wireframe outline of
    any dataset or composite dataset. An outline consists of the twelve
    edges of the dataset bounding box. An option exists for generating
    faces instead of a wireframe outline.
    
    @warning
    When an input composite dataset is provided, options exist for
    producing different styles of outline(s). Also, if the composite
    dataset has non-geometric members (like tables) the result is
    unpredictable.
    """
    def AddIndex(self, p_int):
        """
        V.AddIndex(int)
        C++: void AddIndex(unsigned int index)
        
        If the composite style is set to SpecifiedIndex, then one or more
        flat indices can be specified, and bounding boxes will be drawn
        around those pieces of the composite dataset. (Recall that the
        flat index is a non-negative integer, with root index=0,
        increasing in perorder (depth-first) traversal order.
        """
        ...
    
    def GenerateFacesOff(self):
        """
        V.GenerateFacesOff()
        C++: virtual void GenerateFacesOff()
        
        Generate solid faces for the box. This is off by default.
        """
        ...
    
    def GenerateFacesOn(self):
        """
        V.GenerateFacesOn()
        C++: virtual void GenerateFacesOn()
        
        Generate solid faces for the box. This is off by default.
        """
        ...
    
    def GetCompositeStyle(self):
        """
        V.GetCompositeStyle() -> int
        C++: virtual int GetCompositeStyle()
        
        Specify a style for creating bounding boxes around input
        composite datasets. (If the filter input is a vtkDataSet type
        these options have no effect.) There are four choices: 1) place a
        bounding box around the root of the vtkCompositeDataSet (i.e.,
        all of the data); 2) place separate bounding boxes around each
        vtkDataSet leaf of the composite dataset; 3) place a bounding box
        around the root and all dataset leaves; and 4) place a bounding
        box around each (flat) index of the composite dataset. The
        default behavior is both root and leafs.
        """
        ...
    
    def GetGenerateFaces(self):
        """
        V.GetGenerateFaces() -> int
        C++: virtual vtkTypeBool GetGenerateFaces()
        
        Generate solid faces for the box. This is off by default.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation. type information, and
        printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation. type information, and
        printing.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation. type information, and
        printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation. type information, and
        printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOutlineFilter
        C++: vtkOutlineFilter *NewInstance()
        
        Standard methods for instantiation. type information, and
        printing.
        """
        ...
    
    def RemoveAllIndices(self):
        """
        V.RemoveAllIndices()
        C++: void RemoveAllIndices()
        
        If the composite style is set to SpecifiedIndex, then one or more
        flat indices can be specified, and bounding boxes will be drawn
        around those pieces of the composite dataset. (Recall that the
        flat index is a non-negative integer, with root index=0,
        increasing in perorder (depth-first) traversal order.
        """
        ...
    
    def RemoveIndex(self, p_int):
        """
        V.RemoveIndex(int)
        C++: void RemoveIndex(unsigned int index)
        
        If the composite style is set to SpecifiedIndex, then one or more
        flat indices can be specified, and bounding boxes will be drawn
        around those pieces of the composite dataset. (Recall that the
        flat index is a non-negative integer, with root index=0,
        increasing in perorder (depth-first) traversal order.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOutlineFilter
        C++: static vtkOutlineFilter *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiation. type information, and
        printing.
        """
        ...
    
    def SetCompositeStyle(self, p_int):
        """
        V.SetCompositeStyle(int)
        C++: virtual void SetCompositeStyle(int _arg)
        
        Specify a style for creating bounding boxes around input
        composite datasets. (If the filter input is a vtkDataSet type
        these options have no effect.) There are four choices: 1) place a
        bounding box around the root of the vtkCompositeDataSet (i.e.,
        all of the data); 2) place separate bounding boxes around each
        vtkDataSet leaf of the composite dataset; 3) place a bounding box
        around the root and all dataset leaves; and 4) place a bounding
        box around each (flat) index of the composite dataset. The
        default behavior is both root and leafs.
        """
        ...
    
    def SetCompositeStyleToLeafs(self):
        """
        V.SetCompositeStyleToLeafs()
        C++: void SetCompositeStyleToLeafs()
        
        Specify a style for creating bounding boxes around input
        composite datasets. (If the filter input is a vtkDataSet type
        these options have no effect.) There are four choices: 1) place a
        bounding box around the root of the vtkCompositeDataSet (i.e.,
        all of the data); 2) place separate bounding boxes around each
        vtkDataSet leaf of the composite dataset; 3) place a bounding box
        around the root and all dataset leaves; and 4) place a bounding
        box around each (flat) index of the composite dataset. The
        default behavior is both root and leafs.
        """
        ...
    
    def SetCompositeStyleToRoot(self):
        """
        V.SetCompositeStyleToRoot()
        C++: void SetCompositeStyleToRoot()
        
        Specify a style for creating bounding boxes around input
        composite datasets. (If the filter input is a vtkDataSet type
        these options have no effect.) There are four choices: 1) place a
        bounding box around the root of the vtkCompositeDataSet (i.e.,
        all of the data); 2) place separate bounding boxes around each
        vtkDataSet leaf of the composite dataset; 3) place a bounding box
        around the root and all dataset leaves; and 4) place a bounding
        box around each (flat) index of the composite dataset. The
        default behavior is both root and leafs.
        """
        ...
    
    def SetCompositeStyleToRootAndLeafs(self):
        """
        V.SetCompositeStyleToRootAndLeafs()
        C++: void SetCompositeStyleToRootAndLeafs()
        
        Specify a style for creating bounding boxes around input
        composite datasets. (If the filter input is a vtkDataSet type
        these options have no effect.) There are four choices: 1) place a
        bounding box around the root of the vtkCompositeDataSet (i.e.,
        all of the data); 2) place separate bounding boxes around each
        vtkDataSet leaf of the composite dataset; 3) place a bounding box
        around the root and all dataset leaves; and 4) place a bounding
        box around each (flat) index of the composite dataset. The
        default behavior is both root and leafs.
        """
        ...
    
    def SetCompositeStyleToSpecifiedIndex(self):
        """
        V.SetCompositeStyleToSpecifiedIndex()
        C++: void SetCompositeStyleToSpecifiedIndex()
        
        Specify a style for creating bounding boxes around input
        composite datasets. (If the filter input is a vtkDataSet type
        these options have no effect.) There are four choices: 1) place a
        bounding box around the root of the vtkCompositeDataSet (i.e.,
        all of the data); 2) place separate bounding boxes around each
        vtkDataSet leaf of the composite dataset; 3) place a bounding box
        around the root and all dataset leaves; and 4) place a bounding
        box around each (flat) index of the composite dataset. The
        default behavior is both root and leafs.
        """
        ...
    
    def SetGenerateFaces(self, p_int):
        """
        V.SetGenerateFaces(int)
        C++: virtual void SetGenerateFaces(vtkTypeBool _arg)
        
        Generate solid faces for the box. This is off by default.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output points.
        vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating
        point. vtkAlgorithm::DOUBLE_PRECISION - Output double-precision
        floating point.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CompositeOutlineStyle = ...
    LEAF_DATASETS = ...
    ROOT_AND_LEAFS = ...
    ROOT_LEVEL = ...
    SPECIFIED_INDEX = ...
    __dict__ = ...
    __vtkname__ = ...


