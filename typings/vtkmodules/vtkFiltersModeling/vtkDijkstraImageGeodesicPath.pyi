"""
This type stub file was generated by pyright.
"""

from .vtkDijkstraGraphGeodesicPath import vtkDijkstraGraphGeodesicPath

class vtkDijkstraImageGeodesicPath(vtkDijkstraGraphGeodesicPath):
    """
    vtkDijkstraImageGeodesicPath - Dijkstra algorithm to compute the
    graph geodesic.
    
    Superclass: vtkDijkstraGraphGeodesicPath
    
    Takes as input a polyline and an image representing a 2D cost
    function and performs a single source shortest path calculation.
    Dijkstra's algorithm is used. The implementation is similar to the
    one described in Introduction to Algorithms (Second Edition) by
    Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Cliff
    Stein, published by MIT Press and McGraw-Hill. Some minor enhancement
    are added though. All vertices are not pushed on the heap at start,
    instead a front set is maintained. The heap is implemented as a
    binary heap. The output of the filter is a set of lines describing
    the shortest path from StartVertex to EndVertex.  See parent class
    vtkDijkstraGraphGeodesicPath for the implementation.
    
    @warning
    The input cost image must have only VTK_PIXEL cells: i.e., a 2D image
    or slice of a 3D volume. A cost function for a gray scale image might
    be generated by the following pipeline:
    vtkImageData->vtkImageGradientMagnitude->vtkImageShiftScale wherein
    the gradient magnitude image is inverted so that strong edges have
    low cost value.  Costs in moving from a vertex v to a vertex u are
    calculated using a weighted additive scheme: cost = Iw*f(I) +
    Ew*f(u,v) + Cw*f(t,u,v) where Iw is the weight associated with f(I):
    the normalized image cost, Ew is the weight associated with f(u,v):
    the normalized distance between vertices u and v, and Cw is the
    weight associated with f(t,u,v): the normalized curvature calculated
    from the vertex t which precedes vertex u, and vertices u and v.  All
    weights range from 0 to 1.
    
    @par Thanks: The class was contributed by Dean Inglis.
    """
    def GetCurvatureWeight(self):
        """
        V.GetCurvatureWeight() -> float
        C++: virtual double GetCurvatureWeight()
        
        Curvature cost weight.
        """
        ...
    
    def GetCurvatureWeightMaxValue(self):
        """
        V.GetCurvatureWeightMaxValue() -> float
        C++: virtual double GetCurvatureWeightMaxValue()
        
        Curvature cost weight.
        """
        ...
    
    def GetCurvatureWeightMinValue(self):
        """
        V.GetCurvatureWeightMinValue() -> float
        C++: virtual double GetCurvatureWeightMinValue()
        
        Curvature cost weight.
        """
        ...
    
    def GetEdgeLengthWeight(self):
        """
        V.GetEdgeLengthWeight() -> float
        C++: virtual double GetEdgeLengthWeight()
        
        Edge length cost weight.
        """
        ...
    
    def GetImageWeight(self):
        """
        V.GetImageWeight() -> float
        C++: virtual double GetImageWeight()
        
        Image cost weight.
        """
        ...
    
    def GetInputAsImageData(self):
        """
        V.GetInputAsImageData() -> vtkImageData
        C++: vtkImageData *GetInputAsImageData()
        
        Specify the image object which is used as a cost function.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDijkstraImageGeodesicPath
        C++: vtkDijkstraImageGeodesicPath *NewInstance()
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDijkstraImageGeodesicPath
        C++: static vtkDijkstraImageGeodesicPath *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for printing and determining type information.
        """
        ...
    
    def SetCurvatureWeight(self, p_float):
        """
        V.SetCurvatureWeight(float)
        C++: virtual void SetCurvatureWeight(double _arg)
        
        Curvature cost weight.
        """
        ...
    
    def SetEdgeLengthWeight(self, p_float):
        """
        V.SetEdgeLengthWeight(float)
        C++: void SetEdgeLengthWeight(double)
        
        Edge length cost weight.
        """
        ...
    
    def SetImageWeight(self, p_float):
        """
        V.SetImageWeight(float)
        C++: void SetImageWeight(double)
        
        Image cost weight.
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: void SetInputData(vtkDataObject *)
        
        Specify the image object which is used as a cost function.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


