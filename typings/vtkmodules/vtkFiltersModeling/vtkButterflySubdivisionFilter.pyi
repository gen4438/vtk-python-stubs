"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkFiltersGeneral as __vtkmodules_vtkFiltersGeneral

class vtkButterflySubdivisionFilter(__vtkmodules_vtkFiltersGeneral.vtkInterpolatingSubdivisionFilter):
    """
    vtkButterflySubdivisionFilter - generate a subdivision surface using
    the Butterfly Scheme
    
    Superclass: vtkInterpolatingSubdivisionFilter
    
    vtkButterflySubdivisionFilter is an interpolating subdivision scheme
    that creates four new triangles for each triangle in the mesh. The
    user can specify the NumberOfSubdivisions. This filter implements the
    8-point butterfly scheme described in: Zorin, D., Schroder, P., and
    Sweldens, W., "Interpolating Subdivisions for Meshes with Arbitrary
    Topology," Computer Graphics Proceedings, Annual Conference Series,
    1996, ACM SIGGRAPH, pp.189-192. This scheme improves previous
    butterfly subdivisions with special treatment of vertices with
    valence other than 6.
    
    Currently, the filter only operates on triangles. Users should use
    the vtkTriangleFilter to triangulate meshes that contain polygons or
    triangle strips.
    
    The filter interpolates point data using the same scheme. New
    triangles created at a subdivision step will have the cell data of
    their parent cell.
    
    @par Thanks: This work was supported by PHS Research Grant No. 1 P41
    RR13218-01 from the National Center for Research Resources.
    
    @sa
    vtkInterpolatingSubdivisionFilter vtkLinearSubdivisionFilter
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Construct object with NumberOfSubdivisions set to 1.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Construct object with NumberOfSubdivisions set to 1.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Construct object with NumberOfSubdivisions set to 1.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Construct object with NumberOfSubdivisions set to 1.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkButterflySubdivisionFilter
        C++: vtkButterflySubdivisionFilter *NewInstance()
        
        Construct object with NumberOfSubdivisions set to 1.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkButterflySubdivisionFilter
        C++: static vtkButterflySubdivisionFilter *SafeDownCast(
            vtkObjectBase *o)
        
        Construct object with NumberOfSubdivisions set to 1.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


