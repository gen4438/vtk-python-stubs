"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkRenderingCore as __vtkmodules_vtkRenderingCore

class vtkLODActor(__vtkmodules_vtkRenderingCore.vtkActor):
    """
    vtkLODActor - an actor that supports multiple levels of detail
    
    Superclass: vtkActor
    
    vtkLODActor is an actor that stores multiple levels of detail (LOD)
    and can automatically switch between them. It selects which level of
    detail to use based on how much time it has been allocated to render.
    Currently a very simple method of TotalTime/NumberOfActors is used.
    (In the future this should be modified to dynamically allocate the
    rendering time between different actors based on their needs.)
    
    There are three levels of detail by default. The top level is just
    the normal data. The lowest level of detail is a simple bounding box
    outline of the actor. The middle level of detail is a point cloud of
    a fixed number of points that have been randomly sampled from the
    mapper's input data. Point attributes are copied over to the point
    cloud. These two lower levels of detail are accomplished by creating
    instances of a vtkOutlineFilter (low-res) and vtkMaskPoints
    (medium-res). Additional levels of detail can be add using the
    AddLODMapper() method.
    
    To control the frame rate, you typically set the
    vtkRenderWindowInteractor DesiredUpdateRate and StillUpdateRate. This
    then will cause vtkLODActor to adjust its LOD to fulfill the
    requested update rate.
    
    For greater control on levels of detail, see also vtkLODProp3D. That
    class allows arbitrary definition of each LOD.
    
    @warning
    If you provide your own mappers, you are responsible for setting its
    ivars correctly, such as ScalarRange, LookupTable, and so on.
    
    @warning
    On some systems the point cloud rendering (the default, medium level
    of detail) can result in points so small that they can hardly be
    seen. In this case, use the GetProperty()->SetPointSize() method to
    increase the rendered size of the points.
    
    @sa
    vtkActor vtkRenderer vtkLODProp3D
    """
    def AddLODMapper(self, vtkMapper):
        """
        V.AddLODMapper(vtkMapper)
        C++: void AddLODMapper(vtkMapper *mapper)
        
        Add another level of detail. They do not have to be in any order
        of complexity.
        """
        ...
    
    def GetLODMappers(self):
        """
        V.GetLODMappers() -> vtkMapperCollection
        C++: virtual vtkMapperCollection *GetLODMappers()
        
        All the mappers for different LODs are stored here. The order is
        not important.
        """
        ...
    
    def GetLowResFilter(self):
        """
        V.GetLowResFilter() -> vtkPolyDataAlgorithm
        C++: virtual vtkPolyDataAlgorithm *GetLowResFilter()
        
        You may plug in your own filters to decimate/subsample the input.
        The default is to use a vtkOutlineFilter (low-res) and
        vtkMaskPoints (medium-res).
        """
        ...
    
    def GetMediumResFilter(self):
        """
        V.GetMediumResFilter() -> vtkPolyDataAlgorithm
        C++: virtual vtkPolyDataAlgorithm *GetMediumResFilter()
        
        You may plug in your own filters to decimate/subsample the input.
        The default is to use a vtkOutlineFilter (low-res) and
        vtkMaskPoints (medium-res).
        """
        ...
    
    def GetNumberOfCloudPoints(self):
        """
        V.GetNumberOfCloudPoints() -> int
        C++: virtual int GetNumberOfCloudPoints()
        
        Set/Get the number of random points for the point cloud.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Modified(self):
        """
        V.Modified()
        C++: void Modified() override;
        
        When this objects gets modified, this method also modifies the
        object.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLODActor
        C++: vtkLODActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def Render(self, vtkRenderer, vtkMapper):
        """
        V.Render(vtkRenderer, vtkMapper)
        C++: void Render(vtkRenderer *, vtkMapper *) override;
        
        This causes the actor to be rendered. It, in turn, will render
        the actor's property and then mapper.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        This method is used internally by the rendering process. We
        override the superclass method to properly set the estimated
        render time.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLODActor
        C++: static vtkLODActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLowResFilter(self, vtkPolyDataAlgorithm):
        """
        V.SetLowResFilter(vtkPolyDataAlgorithm)
        C++: virtual void SetLowResFilter(vtkPolyDataAlgorithm *)
        
        You may plug in your own filters to decimate/subsample the input.
        The default is to use a vtkOutlineFilter (low-res) and
        vtkMaskPoints (medium-res).
        """
        ...
    
    def SetMediumResFilter(self, vtkPolyDataAlgorithm):
        """
        V.SetMediumResFilter(vtkPolyDataAlgorithm)
        C++: virtual void SetMediumResFilter(vtkPolyDataAlgorithm *)
        
        You may plug in your own filters to decimate/subsample the input.
        The default is to use a vtkOutlineFilter (low-res) and
        vtkMaskPoints (medium-res).
        """
        ...
    
    def SetNumberOfCloudPoints(self, p_int):
        """
        V.SetNumberOfCloudPoints(int)
        C++: virtual void SetNumberOfCloudPoints(int _arg)
        
        Set/Get the number of random points for the point cloud.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of an LOD actor. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkQuadricLODActor(__vtkmodules_vtkRenderingCore.vtkActor):
    """
    vtkQuadricLODActor - a specific level-of-detail strategy using the
    quadric clustering decimation algorithm
    
    Superclass: vtkActor
    
    vtkQuadricLODActor implements a specific strategy for level-of-detail
    using the vtkQuadricClustering decimation algorithm. It supports only
    two levels of detail: full resolution and a decimated version. The
    decimated LOD is generated using a tuned strategy to produce output
    consistent with the requested interactive frame rate (i.e., the
    vtkRenderWindowInteractor's DesiredUpdateRate). It also makes use of
    display lists for performance, and adjusts the vtkQuadricClustering
    algorithm to take into account the dimensionality of the data (e.g.,
    2D, x-y surfaces may be binned into n x n x 1 to reduce extra
    polygons in the z-direction). Finally, the filter may optionally be
    set in "Static" mode (this works with the vtkMapper::SetStatic()
    method). `Enabling Static results in a one time execution of the
    Mapper's pipeline. After that, the pipeline no longer updated (unless
    manually forced to do so).
    
    @warning
    By default the algorithm is set up to pre-compute the LODs. That is,
    on the first render (whether a full resolution render or interactive
    render) the LOD is computed. This behavior can be changed so that the
    LOD construction is deferred until the first interactive render.
    Either way, when the LOD is constructed, the user may notice a short
    pause.
    
    @warning
    This class can be used as a direct replacement for vtkActor. It may
    also be used as a replacement for vtkFollower's (the ability to track
    a camera is provided).
    
    @sa
    vtkLODActor vtkQuadricClustering
    """
    def DeferLODConstructionOff(self):
        """
        V.DeferLODConstructionOff()
        C++: virtual void DeferLODConstructionOff()
        
        Specify whether to build the LOD immediately (i.e., on the first
        render) or to wait until the LOD is requested in a subsequent
        render. By default, LOD construction is not deferred
        (DeferLODConstruction is false).
        """
        ...
    
    def DeferLODConstructionOn(self):
        """
        V.DeferLODConstructionOn()
        C++: virtual void DeferLODConstructionOn()
        
        Specify whether to build the LOD immediately (i.e., on the first
        render) or to wait until the LOD is requested in a subsequent
        render. By default, LOD construction is not deferred
        (DeferLODConstruction is false).
        """
        ...
    
    def GetCamera(self):
        """
        V.GetCamera() -> vtkCamera
        C++: virtual vtkCamera *GetCamera()
        
        Set/Get the camera to follow. This method is only applicable when
        the prop type is set to a vtkFollower.
        """
        ...
    
    def GetCollapseDimensionRatio(self):
        """
        V.GetCollapseDimensionRatio() -> float
        C++: virtual double GetCollapseDimensionRatio()
        
        If the data configuration is set to UNKNOWN, this class attempts
        to figure out the dimensionality of the data using
        CollapseDimensionRatio. This ivar is the ratio of short edge of
        the input bounding box to its long edge, which is then used to
        collapse the data dimension (and set the quadric bin size in that
        direction to one). By default, this value is 0.05.
        """
        ...
    
    def GetCollapseDimensionRatioMaxValue(self):
        """
        V.GetCollapseDimensionRatioMaxValue() -> float
        C++: virtual double GetCollapseDimensionRatioMaxValue()
        
        If the data configuration is set to UNKNOWN, this class attempts
        to figure out the dimensionality of the data using
        CollapseDimensionRatio. This ivar is the ratio of short edge of
        the input bounding box to its long edge, which is then used to
        collapse the data dimension (and set the quadric bin size in that
        direction to one). By default, this value is 0.05.
        """
        ...
    
    def GetCollapseDimensionRatioMinValue(self):
        """
        V.GetCollapseDimensionRatioMinValue() -> float
        C++: virtual double GetCollapseDimensionRatioMinValue()
        
        If the data configuration is set to UNKNOWN, this class attempts
        to figure out the dimensionality of the data using
        CollapseDimensionRatio. This ivar is the ratio of short edge of
        the input bounding box to its long edge, which is then used to
        collapse the data dimension (and set the quadric bin size in that
        direction to one). By default, this value is 0.05.
        """
        ...
    
    def GetDataConfiguration(self):
        """
        V.GetDataConfiguration() -> int
        C++: virtual int GetDataConfiguration()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def GetDataConfigurationMaxValue(self):
        """
        V.GetDataConfigurationMaxValue() -> int
        C++: virtual int GetDataConfigurationMaxValue()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def GetDataConfigurationMinValue(self):
        """
        V.GetDataConfigurationMinValue() -> int
        C++: virtual int GetDataConfigurationMinValue()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def GetDeferLODConstruction(self):
        """
        V.GetDeferLODConstruction() -> int
        C++: virtual vtkTypeBool GetDeferLODConstruction()
        
        Specify whether to build the LOD immediately (i.e., on the first
        render) or to wait until the LOD is requested in a subsequent
        render. By default, LOD construction is not deferred
        (DeferLODConstruction is false).
        """
        ...
    
    def GetLODFilter(self):
        """
        V.GetLODFilter() -> vtkQuadricClustering
        C++: virtual vtkQuadricClustering *GetLODFilter()
        
        This class will create a vtkQuadricClustering algorithm
        automatically. However, if you would like to specify the filter
        to use, or to access it and configure it, these method provide
        access to the filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard class methods.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard class methods.
        """
        ...
    
    def GetPropType(self):
        """
        V.GetPropType() -> int
        C++: virtual int GetPropType()
        
        Indicate that this actor is actually a follower. By default, the
        prop type is a vtkActor.
        """
        ...
    
    def GetPropTypeMaxValue(self):
        """
        V.GetPropTypeMaxValue() -> int
        C++: virtual int GetPropTypeMaxValue()
        
        Indicate that this actor is actually a follower. By default, the
        prop type is a vtkActor.
        """
        ...
    
    def GetPropTypeMinValue(self):
        """
        V.GetPropTypeMinValue() -> int
        C++: virtual int GetPropTypeMinValue()
        
        Indicate that this actor is actually a follower. By default, the
        prop type is a vtkActor.
        """
        ...
    
    def GetStatic(self):
        """
        V.GetStatic() -> int
        C++: virtual vtkTypeBool GetStatic()
        
        Turn on/off a flag to control whether the underlying pipeline is
        static. If static, this means that the data pipeline executes
        once and then not again until the user manually modifies this
        class. By default, Static is off because trying to debug this is
        tricky, and you should only use it when you know what you are
        doing.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard class methods.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard class methods.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkQuadricLODActor
        C++: vtkQuadricLODActor *NewInstance()
        
        Standard class methods.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def Render(self, vtkRenderer, vtkMapper):
        """
        V.Render(vtkRenderer, vtkMapper)
        C++: void Render(vtkRenderer *, vtkMapper *) override;
        
        This causes the actor to be rendered. Depending on the frame rate
        request, it will use either a full resolution render or an
        interactive render (i.e., it will use the decimated geometry).
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        This method is used internally by the rendering process. We
        override the superclass method to properly set the estimated
        render time.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkQuadricLODActor
        C++: static vtkQuadricLODActor *SafeDownCast(vtkObjectBase *o)
        
        Standard class methods.
        """
        ...
    
    def SetCamera(self, vtkCamera):
        """
        V.SetCamera(vtkCamera)
        C++: void SetCamera(vtkCamera *)
        
        Set/Get the camera to follow. This method is only applicable when
        the prop type is set to a vtkFollower.
        """
        ...
    
    def SetCollapseDimensionRatio(self, p_float):
        """
        V.SetCollapseDimensionRatio(float)
        C++: virtual void SetCollapseDimensionRatio(double _arg)
        
        If the data configuration is set to UNKNOWN, this class attempts
        to figure out the dimensionality of the data using
        CollapseDimensionRatio. This ivar is the ratio of short edge of
        the input bounding box to its long edge, which is then used to
        collapse the data dimension (and set the quadric bin size in that
        direction to one). By default, this value is 0.05.
        """
        ...
    
    def SetDataConfiguration(self, p_int):
        """
        V.SetDataConfiguration(int)
        C++: virtual void SetDataConfiguration(int _arg)
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToUnknown(self):
        """
        V.SetDataConfigurationToUnknown()
        C++: void SetDataConfigurationToUnknown()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToXLine(self):
        """
        V.SetDataConfigurationToXLine()
        C++: void SetDataConfigurationToXLine()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToXYPlane(self):
        """
        V.SetDataConfigurationToXYPlane()
        C++: void SetDataConfigurationToXYPlane()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToXYZVolume(self):
        """
        V.SetDataConfigurationToXYZVolume()
        C++: void SetDataConfigurationToXYZVolume()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToXZPlane(self):
        """
        V.SetDataConfigurationToXZPlane()
        C++: void SetDataConfigurationToXZPlane()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToYLine(self):
        """
        V.SetDataConfigurationToYLine()
        C++: void SetDataConfigurationToYLine()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToYZPlane(self):
        """
        V.SetDataConfigurationToYZPlane()
        C++: void SetDataConfigurationToYZPlane()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDataConfigurationToZLine(self):
        """
        V.SetDataConfigurationToZLine()
        C++: void SetDataConfigurationToZLine()
        
        Force the binning of the quadric clustering according to
        application knowledge relative to the dimension of the data. For
        example, if you know your data lies in a 2D x-y plane, the
        performance of the quadric clustering algorithm can be greatly
        improved by indicating this (i.e., the number of resulting
        triangles, and the quality of the decimation version is better).
        Setting this parameter forces the binning to be configured
        consistent with the dimnesionality of the data, and the collapse
        dimension ratio is ignored. Specifying the value of
        DataConfiguration to UNKNOWN (the default value) means that the
        class will attempt to figure the dimension of the class
        automatically using the CollapseDimensionRatio ivar.
        """
        ...
    
    def SetDeferLODConstruction(self, p_int):
        """
        V.SetDeferLODConstruction(int)
        C++: virtual void SetDeferLODConstruction(vtkTypeBool _arg)
        
        Specify whether to build the LOD immediately (i.e., on the first
        render) or to wait until the LOD is requested in a subsequent
        render. By default, LOD construction is not deferred
        (DeferLODConstruction is false).
        """
        ...
    
    def SetLODFilter(self, vtkQuadricClustering):
        """
        V.SetLODFilter(vtkQuadricClustering)
        C++: void SetLODFilter(vtkQuadricClustering *lodFilter)
        
        This class will create a vtkQuadricClustering algorithm
        automatically. However, if you would like to specify the filter
        to use, or to access it and configure it, these method provide
        access to the filter.
        """
        ...
    
    def SetPropType(self, p_int):
        """
        V.SetPropType(int)
        C++: virtual void SetPropType(int _arg)
        
        Indicate that this actor is actually a follower. By default, the
        prop type is a vtkActor.
        """
        ...
    
    def SetPropTypeToActor(self):
        """
        V.SetPropTypeToActor()
        C++: void SetPropTypeToActor()
        
        Indicate that this actor is actually a follower. By default, the
        prop type is a vtkActor.
        """
        ...
    
    def SetPropTypeToFollower(self):
        """
        V.SetPropTypeToFollower()
        C++: void SetPropTypeToFollower()
        
        Indicate that this actor is actually a follower. By default, the
        prop type is a vtkActor.
        """
        ...
    
    def SetStatic(self, p_int):
        """
        V.SetStatic(int)
        C++: virtual void SetStatic(vtkTypeBool _arg)
        
        Turn on/off a flag to control whether the underlying pipeline is
        static. If static, this means that the data pipeline executes
        once and then not again until the user manually modifies this
        class. By default, Static is off because trying to debug this is
        tricky, and you should only use it when you know what you are
        doing.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of an LOD actor. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def StaticOff(self):
        """
        V.StaticOff()
        C++: virtual void StaticOff()
        
        Turn on/off a flag to control whether the underlying pipeline is
        static. If static, this means that the data pipeline executes
        once and then not again until the user manually modifies this
        class. By default, Static is off because trying to debug this is
        tricky, and you should only use it when you know what you are
        doing.
        """
        ...
    
    def StaticOn(self):
        """
        V.StaticOn()
        C++: virtual void StaticOn()
        
        Turn on/off a flag to control whether the underlying pipeline is
        static. If static, this means that the data pipeline executes
        once and then not again until the user manually modifies this
        class. By default, Static is off because trying to debug this is
        tricky, and you should only use it when you know what you are
        doing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ACTOR = ...
    DataConfigurationEnum = ...
    FOLLOWER = ...
    PropTypeEnum = ...
    UNKNOWN = ...
    XLINE = ...
    XYPLANE = ...
    XYZVOLUME = ...
    XZPLANE = ...
    YLINE = ...
    YZPLANE = ...
    ZLINE = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
