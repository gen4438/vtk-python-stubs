"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

VTK_ASCII = ...
VTK_BINARY = ...
class vtkWriter(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkWriter - abstract class to write data to file(s)
    
    Superclass: vtkAlgorithm
    
    vtkWriter is an abstract class for mapper objects that write their
    data to disk (or into a communications port). All writers respond to
    Write() method. This method insures that there is input and input is
    up to date.
    
    @warning
    Every subclass of vtkWriter must implement a WriteData() method. Most
    likely will have to create SetInput() method as well.
    
    @sa
    vtkXMLDataSetWriter vtkDataSetWriter vtkImageWriter vtkMCubesWriter
    """
    def EncodeString(self, string, string_1, bool):
        """
        V.EncodeString(string, string, bool)
        C++: void EncodeString(char *resname, const char *name,
            bool doublePercent)
        
        Encode the string so that the reader will not have problems. The
        resulting string is up to three times the size of the input
        string.  doublePercent indicates whether to output a double '%'
        before escaped characters so the string may be used as a printf
        format string.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkDataObject
        C++: vtkDataObject *GetInput()
        V.GetInput(int) -> vtkDataObject
        C++: vtkDataObject *GetInput(int port)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWriter
        C++: vtkWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWriter
        C++: static vtkWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: void SetInputData(vtkDataObject *input)
        V.SetInputData(int, vtkDataObject)
        C++: void SetInputData(int index, vtkDataObject *input)
        
        Set/get the input to this writer.
        """
        ...
    
    def Write(self):
        """
        V.Write() -> int
        C++: virtual int Write()
        
        Write data to output. Method executes subclasses WriteData()
        method, as well as StartMethod() and EndMethod() methods. Returns
        1 on success and 0 on failure.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAbstractParticleWriter(vtkWriter):
    """
    vtkAbstractParticleWriter - abstract class to write particle data to
    file
    
    Superclass: vtkWriter
    
    vtkAbstractParticleWriter is an abstract class which is used by
    vtkParticleTracerBase to write particles out during simulations. This
    class is abstract and provides a TimeStep and FileName. Subclasses of
    this should provide the necessary IO.
    
    @warning
    See vtkWriter
    
    @sa
    vtkParticleTracerBase
    """
    def CloseFile(self):
        """
        V.CloseFile()
        C++: virtual void CloseFile()
        
        Close the file after a write. This is optional but may protect
        against data loss in between steps
        """
        ...
    
    def GetCollectiveIO(self):
        """
        V.GetCollectiveIO() -> int
        C++: virtual int GetCollectiveIO()
        
        When running in parallel, this writer may be capable of
        Collective IO operations (HDF5). By default, this is off.
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/get the FileName that is being written to
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTimeStep(self):
        """
        V.GetTimeStep() -> int
        C++: virtual int GetTimeStep()
        
        Set/get the TimeStep that is being written
        """
        ...
    
    def GetTimeValue(self):
        """
        V.GetTimeValue() -> float
        C++: virtual double GetTimeValue()
        
        Before writing the current data out, set the TimeValue (optional)
        The TimeValue is a float/double value that corresponds to the
        real time of the data, it may not be regular, whereas the
        TimeSteps are simple increments.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractParticleWriter
        C++: vtkAbstractParticleWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractParticleWriter
        C++: static vtkAbstractParticleWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCollectiveIO(self, p_int):
        """
        V.SetCollectiveIO(int)
        C++: virtual void SetCollectiveIO(int _arg)
        
        When running in parallel, this writer may be capable of
        Collective IO operations (HDF5). By default, this is off.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/get the FileName that is being written to
        """
        ...
    
    def SetTimeStep(self, p_int):
        """
        V.SetTimeStep(int)
        C++: virtual void SetTimeStep(int _arg)
        
        Set/get the TimeStep that is being written
        """
        ...
    
    def SetTimeValue(self, p_float):
        """
        V.SetTimeValue(float)
        C++: virtual void SetTimeValue(double _arg)
        
        Before writing the current data out, set the TimeValue (optional)
        The TimeValue is a float/double value that corresponds to the
        real time of the data, it may not be regular, whereas the
        TimeSteps are simple increments.
        """
        ...
    
    def SetWriteModeToCollective(self):
        """
        V.SetWriteModeToCollective()
        C++: void SetWriteModeToCollective()
        
        When running in parallel, this writer may be capable of
        Collective IO operations (HDF5). By default, this is off.
        """
        ...
    
    def SetWriteModeToIndependent(self):
        """
        V.SetWriteModeToIndependent()
        C++: void SetWriteModeToIndependent()
        
        When running in parallel, this writer may be capable of
        Collective IO operations (HDF5). By default, this is off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkAbstractPolyDataReader(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkAbstractPolyDataReader - Superclass for algorithms that read
    models from a file.
    
    Superclass: vtkPolyDataAlgorithm
    
    This class allows to use a single base class to manage
    AbstractPolyData reader classes in a uniform manner without needing
    to know the actual type of the reader. i.e. makes it possible to
    create maps to associate filename extension and
    vtkAbstractPolyDataReader object.
    
    @sa
    vtkOBJReader vtkPLYReader vtkSTLReader
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Specify file name of AbstractPolyData file (obj / ply / stl).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractPolyDataReader
        C++: vtkAbstractPolyDataReader *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractPolyDataReader
        C++: static vtkAbstractPolyDataReader *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Specify file name of AbstractPolyData file (obj / ply / stl).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkArrayDataReader(__vtkmodules_vtkCommonExecutionModel.vtkArrayDataAlgorithm):
    """
    vtkArrayDataReader - Reads vtkArrayData written by vtkArrayDataWriter.
    
    Superclass: vtkArrayDataAlgorithm
    
    Reads vtkArrayData data written with vtkArrayDataWriter.
    
    Outputs:
      Output port 0: vtkArrayData containing a collection of vtkArrays.
    
    @sa
    vtkArrayDataWriter
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set the filesystem location from which data will be read.
        """
        ...
    
    def GetInputString(self):
        """
        V.GetInputString() -> string
        C++: virtual vtkStdString GetInputString()
        
        The input string to parse. If you set the input string, you must
        also set the ReadFromInputString flag to parse the string instead
        of a file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReadFromInputString(self):
        """
        V.GetReadFromInputString() -> bool
        C++: virtual bool GetReadFromInputString()
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArrayDataReader
        C++: vtkArrayDataReader *NewInstance()
        """
        ...
    
    def Read(self, string):
        """
        V.Read(string) -> vtkArrayData
        C++: static vtkArrayData *Read(const vtkStdString &str)
        
        Read an arbitrary array from a string.
        """
        ...
    
    def ReadFromInputStringOff(self):
        """
        V.ReadFromInputStringOff()
        C++: virtual void ReadFromInputStringOff()
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def ReadFromInputStringOn(self):
        """
        V.ReadFromInputStringOn()
        C++: virtual void ReadFromInputStringOn()
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArrayDataReader
        C++: static vtkArrayDataReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set the filesystem location from which data will be read.
        """
        ...
    
    def SetInputString(self, string):
        """
        V.SetInputString(string)
        C++: virtual void SetInputString(const vtkStdString &string)
        
        The input string to parse. If you set the input string, you must
        also set the ReadFromInputString flag to parse the string instead
        of a file.
        """
        ...
    
    def SetReadFromInputString(self, bool):
        """
        V.SetReadFromInputString(bool)
        C++: virtual void SetReadFromInputString(bool _arg)
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkArrayDataWriter(vtkWriter):
    """
    vtkArrayDataWriter - Serialize vtkArrayData to a file or stream.
    
    Superclass: vtkWriter
    
    vtkArrayDataWriter serializes vtkArrayData using a text-based format
    that is human-readable and easily parsed (default option).  The
    WriteBinary array option can be used to serialize the vtkArrayData
    using a binary format that is optimized for rapid throughput.
    
    vtkArrayDataWriter can be used in two distinct ways: first, it can be
    used as a normal pipeline filter, which writes its inputs to a file. 
    Alternatively, static methods are provided for writing vtkArrayData
    instances to files or arbitrary c++ streams.
    
    Inputs:
      Input port 0: (required) vtkArrayData object.
    
    Output Format:
      See
    http://www.kitware.com/InfovisWiki/index.php/N-Way_Array_File_Formats
    for
      details on how vtkArrayDataWriter encodes data.
    
    @sa
    vtkArrayDataReader
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    """
    def BinaryOff(self):
        """
        V.BinaryOff()
        C++: virtual void BinaryOff()
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def BinaryOn(self):
        """
        V.BinaryOn()
        C++: virtual void BinaryOn()
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def GetBinary(self):
        """
        V.GetBinary() -> int
        C++: virtual vtkTypeBool GetBinary()
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get / set the filename where data will be stored (when used as a
        filter).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputString(self):
        """
        V.GetOutputString() -> string
        C++: virtual vtkStdString GetOutputString()
        
        The output string. This is only set when WriteToOutputString is
        set.
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> bool
        C++: virtual bool GetWriteToOutputString()
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArrayDataWriter
        C++: vtkArrayDataWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArrayDataWriter
        C++: static vtkArrayDataWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBinary(self, p_int):
        """
        V.SetBinary(int)
        C++: virtual void SetBinary(vtkTypeBool _arg)
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get / set the filename where data will be stored (when used as a
        filter).
        """
        ...
    
    def SetWriteToOutputString(self, bool):
        """
        V.SetWriteToOutputString(bool)
        C++: virtual void SetWriteToOutputString(bool _arg)
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def Write(self):
        """
        V.Write() -> int
        C++: int Write() override;
        V.Write(string, bool) -> bool
        C++: bool Write(const vtkStdString &FileName,
            bool WriteBinary=false)
        V.Write(vtkArrayData, string, bool) -> bool
        C++: static bool Write(vtkArrayData *array,
            const vtkStdString &file_name, bool WriteBinary=false)
        V.Write(bool) -> string
        C++: vtkStdString Write(bool WriteBinary)
        V.Write(vtkArrayData, bool) -> string
        C++: static vtkStdString Write(vtkArrayData *array,
            bool WriteBinary=false)
        
        Write data to output. Method executes subclasses WriteData()
        method, as well as StartMethod() and EndMethod() methods. Returns
        1 on success and 0 on failure.
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: virtual void WriteToOutputStringOff()
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: virtual void WriteToOutputStringOn()
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkArrayReader(__vtkmodules_vtkCommonExecutionModel.vtkArrayDataAlgorithm):
    """
    vtkArrayReader - Reads sparse and dense vtkArray data written by
    vtkArrayWriter.
    
    Superclass: vtkArrayDataAlgorithm
    
    Reads sparse and dense vtkArray data written with vtkArrayWriter.
    
    Outputs:
      Output port 0: vtkArrayData containing a dense or sparse array.
    
    @sa
    vtkArrayWriter
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set the filesystem location from which data will be read.
        """
        ...
    
    def GetInputString(self):
        """
        V.GetInputString() -> string
        C++: virtual vtkStdString GetInputString()
        
        The input string to parse. If you set the input string, you must
        also set the ReadFromInputString flag to parse the string instead
        of a file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReadFromInputString(self):
        """
        V.GetReadFromInputString() -> bool
        C++: virtual bool GetReadFromInputString()
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArrayReader
        C++: vtkArrayReader *NewInstance()
        """
        ...
    
    def Read(self, string):
        """
        V.Read(string) -> vtkArray
        C++: static vtkArray *Read(const vtkStdString &str)
        
        Read an arbitrary array from a string.
        """
        ...
    
    def ReadFromInputStringOff(self):
        """
        V.ReadFromInputStringOff()
        C++: virtual void ReadFromInputStringOff()
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def ReadFromInputStringOn(self):
        """
        V.ReadFromInputStringOn()
        C++: virtual void ReadFromInputStringOn()
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArrayReader
        C++: static vtkArrayReader *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set the filesystem location from which data will be read.
        """
        ...
    
    def SetInputString(self, string):
        """
        V.SetInputString(string)
        C++: virtual void SetInputString(const vtkStdString &string)
        
        The input string to parse. If you set the input string, you must
        also set the ReadFromInputString flag to parse the string instead
        of a file.
        """
        ...
    
    def SetReadFromInputString(self, bool):
        """
        V.SetReadFromInputString(bool)
        C++: virtual void SetReadFromInputString(bool _arg)
        
        Whether to read from an input string as opposed to a file, which
        is the default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkArrayWriter(vtkWriter):
    """
    vtkArrayWriter - Serialize sparse and dense arrays to a file or
    stream.
    
    Superclass: vtkWriter
    
    vtkArrayWriter serializes sparse and dense array data using a
    text-based format that is human-readable and easily parsed (default
    option).  The WriteBinary array option can be used to serialize the
    sparse and dense array data using a binary format that is optimized
    for rapid throughput.
    
    vtkArrayWriter can be used in two distinct ways: first, it can be
    used as a normal pipeline filter, which writes its inputs to a file. 
    Alternatively, static methods are provided for writing vtkArray
    instances to files or arbitrary c++ streams.
    
    Inputs:
      Input port 0: (required) vtkArrayData object containing a single
    sparse or dense
                               array.
    
    Output Format:
      See
    http://www.kitware.com/InfovisWiki/index.php/N-Way_Array_File_Formats
    for
      details on how vtkArrayWriter encodes data.
    
    @sa
    vtkArrayReader
    
    @par Thanks: Developed by Timothy M. Shead (tshead@sandia.gov) at
    Sandia National Laboratories.
    """
    def BinaryOff(self):
        """
        V.BinaryOff()
        C++: virtual void BinaryOff()
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def BinaryOn(self):
        """
        V.BinaryOn()
        C++: virtual void BinaryOn()
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def GetBinary(self):
        """
        V.GetBinary() -> int
        C++: virtual vtkTypeBool GetBinary()
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get / set the filename where data will be stored (when used as a
        filter).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputString(self):
        """
        V.GetOutputString() -> string
        C++: virtual vtkStdString GetOutputString()
        
        The output string. This is only set when WriteToOutputString is
        set.
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> bool
        C++: virtual bool GetWriteToOutputString()
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkArrayWriter
        C++: vtkArrayWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkArrayWriter
        C++: static vtkArrayWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBinary(self, p_int):
        """
        V.SetBinary(int)
        C++: virtual void SetBinary(vtkTypeBool _arg)
        
        Get / set whether data will be written in binary format (when
        used as a filter).
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get / set the filename where data will be stored (when used as a
        filter).
        """
        ...
    
    def SetWriteToOutputString(self, bool):
        """
        V.SetWriteToOutputString(bool)
        C++: virtual void SetWriteToOutputString(bool _arg)
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def Write(self):
        """
        V.Write() -> int
        C++: int Write() override;
        V.Write(string, bool) -> bool
        C++: bool Write(const vtkStdString &FileName,
            bool WriteBinary=false)
        V.Write(vtkArray, string, bool) -> bool
        C++: static bool Write(vtkArray *array,
            const vtkStdString &file_name, bool WriteBinary=false)
        V.Write(bool) -> string
        C++: vtkStdString Write(bool WriteBinary)
        V.Write(vtkArray, bool) -> string
        C++: static vtkStdString Write(vtkArray *array,
            bool WriteBinary=false)
        
        Write data to output. Method executes subclasses WriteData()
        method, as well as StartMethod() and EndMethod() methods. Returns
        1 on success and 0 on failure.
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: virtual void WriteToOutputStringOff()
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: virtual void WriteToOutputStringOn()
        
        Whether to output to a string instead of to a file, which is the
        default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTextCodec(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkTextCodec - Virtual class to act as an interface for all text
    codecs
    
    Superclass: vtkObject
    
    A virtual class interface for codecs that readers/writers can rely on
    
    @par Thanks: Thanks to Tim Shed from Sandia National Laboratories for
    his work on the concepts and to Marcus Hanwell and Jeff Baumes of
    Kitware for keeping me out of the weeds
    
    @sa
    vtkTextCodecFactory
    """
    def CanHandle(self, string):
        """
        V.CanHandle(string) -> bool
        C++: virtual bool CanHandle(const char *NameString)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Name(self):
        """
        V.Name() -> string
        C++: virtual const char *Name()
        
        The name this codec goes by - should match the string the factory
        will take to create it
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTextCodec
        C++: vtkTextCodec *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTextCodec
        C++: static vtkTextCodec *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkASCIITextCodec(vtkTextCodec):
    """
    vtkASCIITextCodec - Class to read/write ascii text.
    
    Superclass: vtkTextCodec
    
    A virtual class interface for codecs that readers/writers can rely on
    
    @par Thanks: Thanks to Tim Shed from Sandia National Laboratories for
    his work on the concepts and to Marcus Hanwell and Jeff Baumes of
    Kitware for keeping me out of the weeds
    
    @sa
    vtkASCIITextCodecFactory
    """
    def CanHandle(self, string):
        """
        V.CanHandle(string) -> bool
        C++: bool CanHandle(const char *NameString) override;
        
        The name this codec goes by - should match the string the factory
        will take to create it
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Name(self):
        """
        V.Name() -> string
        C++: const char *Name() override;
        
        The name this codec goes by - should match the string the factory
        will take to create it
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkASCIITextCodec
        C++: vtkASCIITextCodec *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkASCIITextCodec
        C++: static vtkASCIITextCodec *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkInputStream(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkInputStream - Wraps a binary input stream with a VTK interface.
    
    Superclass: vtkObject
    
    vtkInputStream provides a VTK-style interface wrapping around a
    standard input stream.  The access methods are virtual so that
    subclasses can transparently provide decoding of an encoded stream.
    Data lengths for Seek and Read calls refer to the length of the input
    data.  The actual length in the stream may differ for subclasses that
    implement an encoding scheme.
    """
    def EndReading(self):
        """
        V.EndReading()
        C++: virtual void EndReading()
        
        Called after all desired calls to Seek and Read have been made.
        After this call, the caller is free to change the position of the
        stream.  Additional reads should not be done until after another
        call to StartReading.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInputStream
        C++: vtkInputStream *NewInstance()
        """
        ...
    
    def Read(self, void, p_int):
        """
        V.Read(void, int) -> int
        C++: virtual size_t Read(void *data, size_t length)
        
        Read input data of the given length.  Returns amount actually
        read.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInputStream
        C++: static vtkInputStream *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Seek(self, p_int):
        """
        V.Seek(int) -> int
        C++: virtual int Seek(vtkTypeInt64 offset)
        
        Seek to the given offset in the input data.  Returns 1 for
        success, 0 for failure.
        """
        ...
    
    def StartReading(self):
        """
        V.StartReading()
        C++: virtual void StartReading()
        
        Called after the stream position has been set by the caller, but
        before any Seek or Read calls.  The stream position should not be
        adjusted by the caller until after an EndReading call.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBase64InputStream(vtkInputStream):
    """
    vtkBase64InputStream - Reads base64-encoded input from a stream.
    
    Superclass: vtkInputStream
    
    vtkBase64InputStream implements base64 decoding with the
    vtkInputStream interface.
    """
    def EndReading(self):
        """
        V.EndReading()
        C++: void EndReading() override;
        
        Called after all desired calls to Seek and Read have been made.
        After this call, the caller is free to change the position of the
        stream.  Additional reads should not be done until after another
        call to StartReading.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBase64InputStream
        C++: vtkBase64InputStream *NewInstance()
        """
        ...
    
    def Read(self, void, p_int):
        """
        V.Read(void, int) -> int
        C++: size_t Read(void *data, size_t length) override;
        
        Read input data of the given length.  Returns amount actually
        read.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBase64InputStream
        C++: static vtkBase64InputStream *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def Seek(self, p_int):
        """
        V.Seek(int) -> int
        C++: int Seek(vtkTypeInt64 offset) override;
        
        Seek to the given offset in the input data.  Returns 1 for
        success, 0 for failure.
        """
        ...
    
    def StartReading(self):
        """
        V.StartReading()
        C++: void StartReading() override;
        
        Called after the stream position has been set by the caller, but
        before any Seek or Read calls.  The stream position should not be
        adjusted by the caller until after an EndReading call.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOutputStream(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkOutputStream - Wraps a binary output stream with a VTK interface.
    
    Superclass: vtkObject
    
    vtkOutputStream provides a VTK-style interface wrapping around a
    standard output stream.  The access methods are virtual so that
    subclasses can transparently provide encoding of the output.  Data
    lengths for Write calls refer to the length of the data in memory.
    The actual length in the stream may differ for subclasses that
    implement an encoding scheme.
    """
    def EndWriting(self):
        """
        V.EndWriting() -> int
        C++: virtual int EndWriting()
        
        Called after all desired calls to Write have been made.  After
        this call, the caller is free to change the position of the
        stream.  Additional writes should not be done until after another
        call to StartWriting.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOutputStream
        C++: vtkOutputStream *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOutputStream
        C++: static vtkOutputStream *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def StartWriting(self):
        """
        V.StartWriting() -> int
        C++: virtual int StartWriting()
        
        Called after the stream position has been set by the caller, but
        before any Write calls.  The stream position should not be
        adjusted by the caller until after an EndWriting call.
        """
        ...
    
    def Write(self, void, p_int):
        """
        V.Write(void, int) -> int
        C++: virtual int Write(void const *data, size_t length)
        
        Write output data of the given length.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBase64OutputStream(vtkOutputStream):
    """
    vtkBase64OutputStream - Writes base64-encoded output to a stream.
    
    Superclass: vtkOutputStream
    
    vtkBase64OutputStream implements base64 encoding with the
    vtkOutputStream interface.
    """
    def EndWriting(self):
        """
        V.EndWriting() -> int
        C++: int EndWriting() override;
        
        Called after all desired calls to Write have been made.  After
        this call, the caller is free to change the position of the
        stream.  Additional writes should not be done until after another
        call to StartWriting.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBase64OutputStream
        C++: vtkBase64OutputStream *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBase64OutputStream
        C++: static vtkBase64OutputStream *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def StartWriting(self):
        """
        V.StartWriting() -> int
        C++: int StartWriting() override;
        
        Called after the stream position has been set by the caller, but
        before any Write calls.  The stream position should not be
        adjusted by the caller until after an EndWriting call.
        """
        ...
    
    def Write(self, void, p_int):
        """
        V.Write(void, int) -> int
        C++: int Write(void const *data, size_t length) override;
        
        Write output data of the given length.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkBase64Utilities(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkBase64Utilities - base64 encode and decode utilities.
    
    Superclass: vtkObject
    
    vtkBase64Utilities implements base64 encoding and decoding.
    """
    def DecodeSafely(self, int_tuple, p_int, *int, **kwargs):
        """
        V.DecodeSafely((int, ...), int, [int, ...], int) -> int
        C++: static size_t DecodeSafely(const unsigned char *input,
            size_t inputLen, unsigned char *output, size_t outputLen)
        
        Decode 4 bytes at a time from the input buffer and store the
        decoded stream into the output buffer. The required output buffer
        size must be determined and allocated by the caller. The needed
        output space is always less than the input buffer size, so a good
        first order approximation is to allocate the same size. Base64
        encoding is about 4/3 overhead, so a tighter bound is possible.
        Return the number of bytes atually placed into the output buffer.
        """
        ...
    
    def DecodeTriplet(self, p_int, p_int_1, p_int_2, p_int_3, *int, **kwargs):
        """
        V.DecodeTriplet(int, int, int, int, [int, ...], [int, ...], [int,
            ...]) -> int
        C++: static int DecodeTriplet(unsigned char i0, unsigned char i1,
            unsigned char i2, unsigned char i3, unsigned char *o0,
            unsigned char *o1, unsigned char *o2)
        
        Decode 4 bytes into 3 bytes. Return the number of bytes actually
        decoded (0 to 3, inclusive).
        """
        ...
    
    def Encode(self, int_tuple, p_int, *int, **kwargs):
        """
        V.Encode((int, ...), int, [int, ...], int) -> int
        C++: static unsigned long Encode(const unsigned char *input,
            unsigned long length, unsigned char *output, int mark_end=0)
        
        Encode 'length' bytes from the input buffer and store the encoded
        stream into the output buffer. Return the length of the encoded
        stream. Note that the output buffer must be allocated by the
        caller (length * 1.5 should be a safe estimate). If 'mark_end' is
        true then an extra set of 4 bytes is added to the end of the
        stream if the input is a multiple of 3 bytes. These bytes are
        invalid chars and therefore they will stop the decoder thus
        enabling the caller to decode a stream without actually knowing
        how much data to expect (if the input is not a multiple of 3
        bytes then the extra padding needed to complete the encode 4
        bytes will stop the decoding anyway).
        """
        ...
    
    def EncodePair(self, p_int, p_int_1, *int, **kwargs):
        """
        V.EncodePair(int, int, [int, ...], [int, ...], [int, ...], [int,
            ...])
        C++: static void EncodePair(unsigned char i0, unsigned char i1,
            unsigned char *o0, unsigned char *o1, unsigned char *o2,
            unsigned char *o3)
        
        Encode 2 bytes into 4 bytes
        """
        ...
    
    def EncodeSingle(self, p_int, *int, **kwargs):
        """
        V.EncodeSingle(int, [int, ...], [int, ...], [int, ...], [int,
            ...])
        C++: static void EncodeSingle(unsigned char i0, unsigned char *o0,
             unsigned char *o1, unsigned char *o2, unsigned char *o3)
        
        Encode 1 byte into 4 bytes
        """
        ...
    
    def EncodeTriplet(self, p_int, p_int_1, p_int_2, *int, **kwargs):
        """
        V.EncodeTriplet(int, int, int, [int, ...], [int, ...], [int, ...],
             [int, ...])
        C++: static void EncodeTriplet(unsigned char i0, unsigned char i1,
             unsigned char i2, unsigned char *o0, unsigned char *o1,
            unsigned char *o2, unsigned char *o3)
        
        Encode 3 bytes into 4 bytes
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkBase64Utilities
        C++: vtkBase64Utilities *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkBase64Utilities
        C++: static vtkBase64Utilities *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDataCompressor(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkDataCompressor - Abstract interface for data compression classes.
    
    Superclass: vtkObject
    
    vtkDataCompressor provides a universal interface for data
    compression.  Subclasses provide one compression method and one
    decompression method.  The public interface to all compressors
    remains the same, and is defined by this class.
    
    @par Note: vtkDataCompressor CompressionLevel maye take on values 1
    to 9. With values of 1 giving best compression write performance, and
    a value of 9 giving best compression ratio. Subclasses of
    vtkDataCompressor objects should be implemented with this in mind to
    provide a predictable compressor interface for vtkDataCompressor
    users.
    
    @pat Thanks: Homogeneous CompressionLevel behavior contributed by
    Quincy Wofford (qwofford@lanl.gov) and John Patchett
    (patchett@lanl.gov)
    """
    def Compress(self, int_tuple, p_int, *int, **kwargs):
        """
        V.Compress((int, ...), int, [int, ...], int) -> int
        C++: size_t Compress(unsigned char const *uncompressedData,
            size_t uncompressedSize, unsigned char *compressedData,
            size_t compressionSpace)
        V.Compress((int, ...), int) -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *Compress(
            unsigned char const *uncompressedData,
            size_t uncompressedSize)
        
        Compress the given input data buffer into the given output
        buffer.  The size of the output buffer must be at least as large
        as the value given by GetMaximumCompressionSpace for the given
        input size.
        """
        ...
    
    def GetCompressionLevel(self):
        """
        V.GetCompressionLevel() -> int
        C++: virtual int GetCompressionLevel()
        """
        ...
    
    def GetMaximumCompressionSpace(self, p_int):
        """
        V.GetMaximumCompressionSpace(int) -> int
        C++: virtual size_t GetMaximumCompressionSpace(size_t size)
        
        Get the maximum space that may be needed to store data of the
        given uncompressed size after compression.  This is the minimum
        size of the output buffer that can be passed to the four-argument
        Compress method.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDataCompressor
        C++: vtkDataCompressor *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDataCompressor
        C++: static vtkDataCompressor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCompressionLevel(self, p_int):
        """
        V.SetCompressionLevel(int)
        C++: virtual void SetCompressionLevel(int compressionLevel)
        
        Compression performance varies greatly with compression level
        Require level setting from any vtkDataCompressor Different
        compressors handle performance parameters differently
        vtkDataCompressors should take a value between 1 and 9 where 1 is
        fastest compression, and 9 is best compression.
        """
        ...
    
    def Uncompress(self, int_tuple, p_int, *int, **kwargs):
        """
        V.Uncompress((int, ...), int, [int, ...], int) -> int
        C++: size_t Uncompress(unsigned char const *compressedData,
            size_t compressedSize, unsigned char *uncompressedData,
            size_t uncompressedSize)
        V.Uncompress((int, ...), int, int) -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *Uncompress(
            unsigned char const *compressedData, size_t compressedSize,
            size_t uncompressedSize)
        
        Uncompress the given input data into the given output buffer. The
        size of the uncompressed data must be known by the caller. It
        should be transmitted from the compressor by a means outside of
        this class.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDelimitedTextWriter(vtkWriter):
    """
    vtkDelimitedTextWriter - Delimited text writer for vtkTable
    
    Superclass: vtkWriter
    
    Writes a vtkTable as a delimited text file (such as CSV).
    """
    def GetFieldDelimiter(self):
        """
        V.GetFieldDelimiter() -> string
        C++: virtual char *GetFieldDelimiter()
        
        Get/Set the delimiter use to separate fields ("," by default.)
        """
        ...
    
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the filename for the file.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetString(self, string):
        """
        V.GetString(string) -> string
        C++: vtkStdString GetString(vtkStdString string)
        
        Internal method: Returns the "string" with the "StringDelimiter"
        if UseStringDelimiter is true.
        """
        ...
    
    def GetStringDelimiter(self):
        """
        V.GetStringDelimiter() -> string
        C++: virtual char *GetStringDelimiter()
        
        Get/Set the delimiter used for string data, if any eg. double
        quotes(").
        """
        ...
    
    def GetUseStringDelimiter(self):
        """
        V.GetUseStringDelimiter() -> bool
        C++: virtual bool GetUseStringDelimiter()
        
        Get/Set if StringDelimiter must be used for string data. True by
        default.
        """
        ...
    
    def GetWriteToOutputString(self):
        """
        V.GetWriteToOutputString() -> bool
        C++: virtual bool GetWriteToOutputString()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDelimitedTextWriter
        C++: vtkDelimitedTextWriter *NewInstance()
        """
        ...
    
    def RegisterAndGetOutputString(self):
        """
        V.RegisterAndGetOutputString() -> string
        C++: char *RegisterAndGetOutputString()
        
        This convenience method returns the string, sets the IVAR to
        nullptr, so that the user is responsible for deleting the string.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDelimitedTextWriter
        C++: static vtkDelimitedTextWriter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFieldDelimiter(self, string):
        """
        V.SetFieldDelimiter(string)
        C++: virtual void SetFieldDelimiter(const char *_arg)
        
        Get/Set the delimiter use to separate fields ("," by default.)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the filename for the file.
        """
        ...
    
    def SetStringDelimiter(self, string):
        """
        V.SetStringDelimiter(string)
        C++: virtual void SetStringDelimiter(const char *_arg)
        
        Get/Set the delimiter used for string data, if any eg. double
        quotes(").
        """
        ...
    
    def SetUseStringDelimiter(self, bool):
        """
        V.SetUseStringDelimiter(bool)
        C++: virtual void SetUseStringDelimiter(bool _arg)
        
        Get/Set if StringDelimiter must be used for string data. True by
        default.
        """
        ...
    
    def SetWriteToOutputString(self, bool):
        """
        V.SetWriteToOutputString(bool)
        C++: virtual void SetWriteToOutputString(bool _arg)
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteToOutputStringOff(self):
        """
        V.WriteToOutputStringOff()
        C++: virtual void WriteToOutputStringOff()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def WriteToOutputStringOn(self):
        """
        V.WriteToOutputStringOn()
        C++: virtual void WriteToOutputStringOn()
        
        Enable writing to an OutputString instead of the default, a file.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkGlobFileNames(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGlobFileNames - find files that match a wildcard pattern
    
    Superclass: vtkObject
    
    vtkGlobFileNames is a utility for finding files and directories that
    match a given wildcard pattern.  Allowed wildcards are
    *, ?, [...], [!...]. The "*" wildcard matches any substring, the "?"
       matches any single character, the [...] matches any one of the
       enclosed characters, e.g. [abc] will match one of a, b, or c,
       while [0-9] will match any digit, and [!...] will match any single
       character except for the ones within the brackets.  Special
       treatment is given to "/" (or "\" on Windows) because these are
       path separators.  These are never matched by a wildcard, they are
       only matched with another file separator.
    @warning
    This function performs case-sensitive matches on UNIX and
    case-insensitive matches on Windows.
    @sa
    vtkDirectory
    """
    def AddFileNames(self, string):
        """
        V.AddFileNames(string) -> int
        C++: int AddFileNames(const char *pattern)
        
        Search for all files that match the given expression, sort them,
        and add them to the output.  This method can be called repeatedly
        to add files matching additional patterns. Returns 1 if
        successful, otherwise returns zero.
        """
        ...
    
    def GetDirectory(self):
        """
        V.GetDirectory() -> string
        C++: virtual char *GetDirectory()
        
        Set the directory in which to perform the glob.  If this is not
        set, then the current directory will be used.  Also, if you use a
        glob pattern that contains absolute path (one that starts with
        "/" or a drive letter) then that absolute path will be used and
        Directory will be ignored.
        """
        ...
    
    def GetFileNames(self):
        """
        V.GetFileNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetFileNames()
        
        Get an array that contains all the file names.
        """
        ...
    
    def GetNthFileName(self, p_int):
        """
        V.GetNthFileName(int) -> string
        C++: const char *GetNthFileName(int index)
        
        Return the file at the given index, the indexing is 0 based.
        """
        ...
    
    def GetNumberOfFileNames(self):
        """
        V.GetNumberOfFileNames() -> int
        C++: int GetNumberOfFileNames()
        
        Return the number of files found.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Return the class name as a string.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Return the class name as a string.
        """
        ...
    
    def GetRecurse(self):
        """
        V.GetRecurse() -> int
        C++: virtual vtkTypeBool GetRecurse()
        
        Recurse into subdirectories.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return the class name as a string.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return the class name as a string.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGlobFileNames
        C++: vtkGlobFileNames *NewInstance()
        
        Return the class name as a string.
        """
        ...
    
    def RecurseOff(self):
        """
        V.RecurseOff()
        C++: virtual void RecurseOff()
        
        Recurse into subdirectories.
        """
        ...
    
    def RecurseOn(self):
        """
        V.RecurseOn()
        C++: virtual void RecurseOn()
        
        Recurse into subdirectories.
        """
        ...
    
    def Reset(self):
        """
        V.Reset()
        C++: void Reset()
        
        Reset the glob by clearing the list of output filenames.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGlobFileNames
        C++: static vtkGlobFileNames *SafeDownCast(vtkObjectBase *o)
        
        Return the class name as a string.
        """
        ...
    
    def SetDirectory(self, string):
        """
        V.SetDirectory(string)
        C++: virtual void SetDirectory(const char *_arg)
        
        Set the directory in which to perform the glob.  If this is not
        set, then the current directory will be used.  Also, if you use a
        glob pattern that contains absolute path (one that starts with
        "/" or a drive letter) then that absolute path will be used and
        Directory will be ignored.
        """
        ...
    
    def SetRecurse(self, p_int):
        """
        V.SetRecurse(int)
        C++: virtual void SetRecurse(vtkTypeBool _arg)
        
        Recurse into subdirectories.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkJavaScriptDataWriter(vtkWriter):
    """
    vtkJavaScriptDataWriter - A Javascript data writer for vtkTable
    
    Superclass: vtkWriter
    
    Writes a vtkTable into a Javascript data format.
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Get/Set the filename for the file.
        """
        ...
    
    def GetIncludeFieldNames(self):
        """
        V.GetIncludeFieldNames() -> bool
        C++: virtual bool GetIncludeFieldNames()
        
        Get/Set the whether or not to include field names When field
        names are on you will get data output that looks like this: var
        data=[ {foo:3,time:"2009-11-04 16:09:42",bar:1 }, {foo:5,time:"2009-11-04
        16:11:22",bar:0 }, without field names the data will be an array
        of arrays like this: var data=[ [3,"2009-11-04 16:09:42",1], [5,"2009-11-04
        16:11:22",0],
        
        * Default is ON (true)
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetVariableName(self):
        """
        V.GetVariableName() -> string
        C++: virtual char *GetVariableName()
        
        Get/set the name of the Javascript variable that the dataset will
        be assigned to. The default value is "data", so the javascript
        code generated by the filter will look like this: "var data = [ ...
        ];". If VariableName is set to nullptr, then no assignment
        statement will be generated (i.e., only "[ ... ];" will be
        generated).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkJavaScriptDataWriter
        C++: vtkJavaScriptDataWriter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkJavaScriptDataWriter
        C++: static vtkJavaScriptDataWriter *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Get/Set the filename for the file.
        """
        ...
    
    def SetIncludeFieldNames(self, bool):
        """
        V.SetIncludeFieldNames(bool)
        C++: virtual void SetIncludeFieldNames(bool _arg)
        
        Get/Set the whether or not to include field names When field
        names are on you will get data output that looks like this: var
        data=[ {foo:3,time:"2009-11-04 16:09:42",bar:1 }, {foo:5,time:"2009-11-04
        16:11:22",bar:0 }, without field names the data will be an array
        of arrays like this: var data=[ [3,"2009-11-04 16:09:42",1], [5,"2009-11-04
        16:11:22",0],
        
        * Default is ON (true)
        """
        ...
    
    def SetVariableName(self, string):
        """
        V.SetVariableName(string)
        C++: virtual void SetVariableName(const char *_arg)
        
        Get/set the name of the Javascript variable that the dataset will
        be assigned to. The default value is "data", so the javascript
        code generated by the filter will look like this: "var data = [ ...
        ];". If VariableName is set to nullptr, then no assignment
        statement will be generated (i.e., only "[ ... ];" will be
        generated).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLZ4DataCompressor(vtkDataCompressor):
    """
    vtkLZ4DataCompressor - Data compression using LZ4.
    
    Superclass: vtkDataCompressor
    
    vtkLZ4DataCompressor provides a concrete vtkDataCompressor class
    using LZ4 for compressing and uncompressing data.
    """
    def GetAccelerationLevel(self):
        """
        V.GetAccelerationLevel() -> int
        C++: virtual int GetAccelerationLevel()
        """
        ...
    
    def GetAccelerationLevelMaxValue(self):
        """
        V.GetAccelerationLevelMaxValue() -> int
        C++: virtual int GetAccelerationLevelMaxValue()
        """
        ...
    
    def GetAccelerationLevelMinValue(self):
        """
        V.GetAccelerationLevelMinValue() -> int
        C++: virtual int GetAccelerationLevelMinValue()
        """
        ...
    
    def GetCompressionLevel(self):
        """
        V.GetCompressionLevel() -> int
        C++: int GetCompressionLevel() override;
        
        Get/Set the compression level.
        """
        ...
    
    def GetMaximumCompressionSpace(self, p_int):
        """
        V.GetMaximumCompressionSpace(int) -> int
        C++: size_t GetMaximumCompressionSpace(size_t size) override;
        
        Get the maximum space that may be needed to store data of the
        given uncompressed size after compression.  This is the minimum
        size of the output buffer that can be passed to the four-argument
        Compress method.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLZ4DataCompressor
        C++: vtkLZ4DataCompressor *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLZ4DataCompressor
        C++: static vtkLZ4DataCompressor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAccelerationLevel(self, p_int):
        """
        V.SetAccelerationLevel(int)
        C++: virtual void SetAccelerationLevel(int _arg)
        """
        ...
    
    def SetCompressionLevel(self, p_int):
        """
        V.SetCompressionLevel(int)
        C++: void SetCompressionLevel(int compressionLevel) override;
        
        Compression performance varies greatly with compression level
        Require level setting from any vtkDataCompressor Different
        compressors handle performance parameters differently
        vtkDataCompressors should take a value between 1 and 9 where 1 is
        fastest compression, and 9 is best compression.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkLZMADataCompressor(vtkDataCompressor):
    """
    vtkLZMADataCompressor - Data compression using LZMA Utils.
    
    Superclass: vtkDataCompressor
    
    vtkLZMADataCompressor provides a concrete vtkDataCompressor class
    using LZMA for compressing and uncompressing data.
    
    @par Thanks: This vtkDataCompressor contributed by Quincy Wofford
    (qwofford@lanl.gov) and John Patchett (patchett@lanl.gov), Los Alamos
    National Laboratory (2017)
    """
    def GetCompressionLevel(self):
        """
        V.GetCompressionLevel() -> int
        C++: int GetCompressionLevel() override;
        """
        ...
    
    def GetMaximumCompressionSpace(self, p_int):
        """
        V.GetMaximumCompressionSpace(int) -> int
        C++: size_t GetMaximumCompressionSpace(size_t size) override;
        
        Get the maximum space that may be needed to store data of the
        given uncompressed size after compression.  This is the minimum
        size of the output buffer that can be passed to the four-argument
        Compress method.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLZMADataCompressor
        C++: vtkLZMADataCompressor *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLZMADataCompressor
        C++: static vtkLZMADataCompressor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCompressionLevel(self, p_int):
        """
        V.SetCompressionLevel(int)
        C++: void SetCompressionLevel(int compressionLevel) override;
        
        Get/Set the compression level.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkNumberToString(object):
    """
    vtkNumberToString - Convert floating and fixed point numbers to
    strings
    
    This class uses the double-conversion library to convert floating
    point and fixed point numbers to ASCII versions that are represented
    without numerical precision errors.
    
    Typical use:
    
    {cpp}
    #include "vtkNumberToString.h"
     vtkNumberToString convert;
     float a = 1.0f/3.0f;
     std::cout << convert(a) << std::endl;
    
    vtkNumberToString()
    vtkNumberToString(const &vtkNumberToString)
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkSortFileNames(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkSortFileNames - Group and sort a set of filenames
    
    Superclass: vtkObject
    
    vtkSortFileNames will take a list of filenames (e.g. from a file load
    dialog) and sort them into one or more series.  If the input list of
    filenames contains any directories, these can be removed before
    sorting using the SkipDirectories flag.  This class should be used
    where information about the series groupings can be determined by the
    filenames, but it might not be successful in cases where the
    information about the series groupings is stored in the files
    themselves (e.g DICOM).
    @sa
    vtkImageReader2
    """
    def GetFileNames(self):
        """
        V.GetFileNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetFileNames()
        
        Get the full list of sorted filenames.
        """
        ...
    
    def GetGrouping(self):
        """
        V.GetGrouping() -> int
        C++: virtual vtkTypeBool GetGrouping()
        
        Sort the file names into groups, according to similarity in
        filename name and path.  Files in different directories, or with
        different extensions, or which do not fit into the same numbered
        series will be placed into different groups.  This is off by
        default.
        """
        ...
    
    def GetIgnoreCase(self):
        """
        V.GetIgnoreCase() -> int
        C++: virtual vtkTypeBool GetIgnoreCase()
        
        Ignore case when sorting.  This flag is honored by both the
        sorting and the grouping. This is off by default.
        """
        ...
    
    def GetInputFileNames(self):
        """
        V.GetInputFileNames() -> vtkStringArray
        C++: virtual vtkStringArray *GetInputFileNames()
        
        Set a list of file names to group and sort.
        """
        ...
    
    def GetNthGroup(self, p_int):
        """
        V.GetNthGroup(int) -> vtkStringArray
        C++: virtual vtkStringArray *GetNthGroup(int i)
        
        Get the Nth group of file names.  This method should only be used
        if grouping is on.  If grouping is off, it will always return
        null.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGroups(self):
        """
        V.GetNumberOfGroups() -> int
        C++: virtual int GetNumberOfGroups()
        
        Get the number of groups that the names were split into, if
        grouping is on.  The filenames are automatically split into
        groups, where the filenames in each group will be identical
        except for their series numbers.  If grouping is not on, this
        method will return zero.
        """
        ...
    
    def GetNumericSort(self):
        """
        V.GetNumericSort() -> int
        C++: virtual vtkTypeBool GetNumericSort()
        
        Sort the files numerically, rather than lexicographically. For
        filenames that contain numbers, this means the order will be
        ["file8.dat", "file9.dat", "file10.dat"] instead of the usual
        alphabetic sorting order ["file10.dat" "file8.dat", "file9.dat"].
        NumericSort is off by default.
        """
        ...
    
    def GetSkipDirectories(self):
        """
        V.GetSkipDirectories() -> int
        C++: virtual vtkTypeBool GetSkipDirectories()
        
        Skip directories. If this flag is set, any input item that is a
        directory rather than a file will not be included in the output. 
        This is off by default.
        """
        ...
    
    def GroupingOff(self):
        """
        V.GroupingOff()
        C++: virtual void GroupingOff()
        
        Sort the file names into groups, according to similarity in
        filename name and path.  Files in different directories, or with
        different extensions, or which do not fit into the same numbered
        series will be placed into different groups.  This is off by
        default.
        """
        ...
    
    def GroupingOn(self):
        """
        V.GroupingOn()
        C++: virtual void GroupingOn()
        
        Sort the file names into groups, according to similarity in
        filename name and path.  Files in different directories, or with
        different extensions, or which do not fit into the same numbered
        series will be placed into different groups.  This is off by
        default.
        """
        ...
    
    def IgnoreCaseOff(self):
        """
        V.IgnoreCaseOff()
        C++: virtual void IgnoreCaseOff()
        
        Ignore case when sorting.  This flag is honored by both the
        sorting and the grouping. This is off by default.
        """
        ...
    
    def IgnoreCaseOn(self):
        """
        V.IgnoreCaseOn()
        C++: virtual void IgnoreCaseOn()
        
        Ignore case when sorting.  This flag is honored by both the
        sorting and the grouping. This is off by default.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSortFileNames
        C++: vtkSortFileNames *NewInstance()
        """
        ...
    
    def NumericSortOff(self):
        """
        V.NumericSortOff()
        C++: virtual void NumericSortOff()
        
        Sort the files numerically, rather than lexicographically. For
        filenames that contain numbers, this means the order will be
        ["file8.dat", "file9.dat", "file10.dat"] instead of the usual
        alphabetic sorting order ["file10.dat" "file8.dat", "file9.dat"].
        NumericSort is off by default.
        """
        ...
    
    def NumericSortOn(self):
        """
        V.NumericSortOn()
        C++: virtual void NumericSortOn()
        
        Sort the files numerically, rather than lexicographically. For
        filenames that contain numbers, this means the order will be
        ["file8.dat", "file9.dat", "file10.dat"] instead of the usual
        alphabetic sorting order ["file10.dat" "file8.dat", "file9.dat"].
        NumericSort is off by default.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSortFileNames
        C++: static vtkSortFileNames *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetGrouping(self, p_int):
        """
        V.SetGrouping(int)
        C++: virtual void SetGrouping(vtkTypeBool _arg)
        
        Sort the file names into groups, according to similarity in
        filename name and path.  Files in different directories, or with
        different extensions, or which do not fit into the same numbered
        series will be placed into different groups.  This is off by
        default.
        """
        ...
    
    def SetIgnoreCase(self, p_int):
        """
        V.SetIgnoreCase(int)
        C++: virtual void SetIgnoreCase(vtkTypeBool _arg)
        
        Ignore case when sorting.  This flag is honored by both the
        sorting and the grouping. This is off by default.
        """
        ...
    
    def SetInputFileNames(self, vtkStringArray):
        """
        V.SetInputFileNames(vtkStringArray)
        C++: void SetInputFileNames(vtkStringArray *input)
        
        Set a list of file names to group and sort.
        """
        ...
    
    def SetNumericSort(self, p_int):
        """
        V.SetNumericSort(int)
        C++: virtual void SetNumericSort(vtkTypeBool _arg)
        
        Sort the files numerically, rather than lexicographically. For
        filenames that contain numbers, this means the order will be
        ["file8.dat", "file9.dat", "file10.dat"] instead of the usual
        alphabetic sorting order ["file10.dat" "file8.dat", "file9.dat"].
        NumericSort is off by default.
        """
        ...
    
    def SetSkipDirectories(self, p_int):
        """
        V.SetSkipDirectories(int)
        C++: virtual void SetSkipDirectories(vtkTypeBool _arg)
        
        Skip directories. If this flag is set, any input item that is a
        directory rather than a file will not be included in the output. 
        This is off by default.
        """
        ...
    
    def SkipDirectoriesOff(self):
        """
        V.SkipDirectoriesOff()
        C++: virtual void SkipDirectoriesOff()
        
        Skip directories. If this flag is set, any input item that is a
        directory rather than a file will not be included in the output. 
        This is off by default.
        """
        ...
    
    def SkipDirectoriesOn(self):
        """
        V.SkipDirectoriesOn()
        C++: virtual void SkipDirectoriesOn()
        
        Skip directories. If this flag is set, any input item that is a
        directory rather than a file will not be included in the output. 
        This is off by default.
        """
        ...
    
    def Update(self):
        """
        V.Update()
        C++: virtual void Update()
        
        Update the output filenames from the input filenames. This method
        is called automatically by GetFileNames() and GetNumberOfGroups()
        if the input names have changed.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTextCodecFactory(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkTextCodecFactory - maintain a list of text codecs and return
    instances
    
    Superclass: vtkObject
    
    A single class to hold registered codecs and return instances of them
    based on either a decriptive name (UTF16 or latin-1) or by asking who
    can handle a given std::vector<unsigned char>
    
    @par Thanks: Thanks to Tim Shed from Sandia National Laboratories for
    his work on the concepts and to Marcus Hanwell and Jeff Baumes of
    Kitware for keeping me out of the weeds
    
    @sa
    vtkTextCodec
    """
    def CodecForName(self, string):
        """
        V.CodecForName(string) -> vtkTextCodec
        C++: static vtkTextCodec *CodecForName(const char *CodecName)
        
        Given a codec/storage name try to find one of our registered
        codecs that can handle it.  This is non-deterministic, very messy
        and should not be your first thing to try. The registered
        callbacks are tried in the order they are registered.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: static void Initialize()
        
        Initialize core text codecs - needed for the static compilation
        case.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTextCodecFactory
        C++: vtkTextCodecFactory *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTextCodecFactory
        C++: static vtkTextCodecFactory *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def UnRegisterAllCreateCallbacks(self):
        """
        V.UnRegisterAllCreateCallbacks()
        C++: static void UnRegisterAllCreateCallbacks()
        
        Provides mechanism to register/unregister additional callbacks to
        create concrete subclasses of vtkTextCodecFactory to handle
        different protocols. The registered callbacks are tried in the
        order they are registered.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkUTF16TextCodec(vtkTextCodec):
    """
    vtkUTF16TextCodec - Class to read/write ascii text.
    
    Superclass: vtkTextCodec
    
    A virtual class interface for codecs that readers/writers can rely on
    
    @par Thanks: Thanks to Tim Shed from Sandia National Laboratories for
    his work on the concepts and to Marcus Hanwell and Jeff Baumes of
    Kitware for keeping me out of the weeds
    
    @sa
    vtkUTF16TextCodecFactory
    """
    def CanHandle(self, string):
        """
        V.CanHandle(string) -> bool
        C++: bool CanHandle(const char *NameString) override;
        
        The name this codec goes by - should match the string the factory
        will take to create it
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Name(self):
        """
        V.Name() -> string
        C++: const char *Name() override;
        
        The name this codec goes by - should match the string the factory
        will take to create it
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUTF16TextCodec
        C++: vtkUTF16TextCodec *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUTF16TextCodec
        C++: static vtkUTF16TextCodec *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBigEndian(self, bool):
        """
        V.SetBigEndian(bool)
        C++: void SetBigEndian(bool)
        
        Set the endianness - true if Big false is little
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkUTF8TextCodec(vtkTextCodec):
    """
    vtkUTF8TextCodec - Class to read/write UTF-8 text
    
    Superclass: vtkTextCodec
    
    A virtual class interface for codecs that readers/writers can rely on
    
    @par Thanks: Thanks to Tim Shed from Sandia National Laboratories for
    his work on the concepts and to Marcus Hanwell and Jeff Baumes of
    Kitware for keeping me out of the weeds
    
    @sa
    vtkUTF8TextCodecFactory
    """
    def CanHandle(self, string):
        """
        V.CanHandle(string) -> bool
        C++: bool CanHandle(const char *testStr) override;
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Name(self):
        """
        V.Name() -> string
        C++: const char *Name() override;
        
        The name this codec goes by - should match the string the factory
        will take to create it
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkUTF8TextCodec
        C++: vtkUTF8TextCodec *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkUTF8TextCodec
        C++: static vtkUTF8TextCodec *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkZLibDataCompressor(vtkDataCompressor):
    """
    vtkZLibDataCompressor - Data compression using zlib.
    
    Superclass: vtkDataCompressor
    
    vtkZLibDataCompressor provides a concrete vtkDataCompressor class
    using zlib for compressing and uncompressing data.
    """
    def GetCompressionLevel(self):
        """
        V.GetCompressionLevel() -> int
        C++: int GetCompressionLevel() override;
        
        Get/Set the compression level.
        """
        ...
    
    def GetMaximumCompressionSpace(self, p_int):
        """
        V.GetMaximumCompressionSpace(int) -> int
        C++: size_t GetMaximumCompressionSpace(size_t size) override;
        
        Get the maximum space that may be needed to store data of the
        given uncompressed size after compression.  This is the minimum
        size of the output buffer that can be passed to the four-argument
        Compress method.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkZLibDataCompressor
        C++: vtkZLibDataCompressor *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkZLibDataCompressor
        C++: static vtkZLibDataCompressor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCompressionLevel(self, p_int):
        """
        V.SetCompressionLevel(int)
        C++: void SetCompressionLevel(int compressionLevel) override;
        
        Compression performance varies greatly with compression level
        Require level setting from any vtkDataCompressor Different
        compressors handle performance parameters differently
        vtkDataCompressors should take a value between 1 and 9 where 1 is
        fastest compression, and 9 is best compression.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
