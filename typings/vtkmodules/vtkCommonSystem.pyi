"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkSocket(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkSocket - BSD socket encapsulation.
    
    Superclass: vtkObject
    
    This abstract class encapsulates a BSD socket. It provides an API for
    basic socket operations.
    """
    def CloseSocket(self):
        """
        V.CloseSocket()
        C++: void CloseSocket()
        
        Close the socket.
        """
        ...
    
    def GetConnected(self):
        """
        V.GetConnected() -> int
        C++: int GetConnected()
        
        Check is the socket is alive.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSocketDescriptor(self):
        """
        V.GetSocketDescriptor() -> int
        C++: virtual int GetSocketDescriptor()
        
        Provides access to the internal socket descriptor. This is valid
        only when GetConnected() returns true.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSocket
        C++: vtkSocket *NewInstance()
        """
        ...
    
    def Receive(self, void, p_int, p_int_1):
        """
        V.Receive(void, int, int) -> int
        C++: int Receive(void *data, int length, int readFully=1)
        
        Receive data from the socket. This call blocks until some data is
        read from the socket. When readFully is set, this call will block
        until all the requested data is read from the socket. 0 on error,
        else number of bytes read is returned. On error,
        vtkCommand::ErrorEvent is raised.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSocket
        C++: static vtkSocket *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SelectSockets(self, int_tuple, p_int, p_int_1, *int):
        """
        V.SelectSockets((int, ...), int, int, [int, ...]) -> int
        C++: static int SelectSockets(const int *sockets_to_select,
            int size, unsigned long msec, int *selected_index)
        
        Selects set of sockets. Returns 0 on timeout, -1 on error. 1 on
        success. Selected socket's index is returned through
        selected_index
        """
        ...
    
    def Send(self, void, p_int):
        """
        V.Send(void, int) -> int
        C++: int Send(const void *data, int length)
        
        These methods send data over the socket. Returns 1 on success, 0
        on error and raises vtkCommand::ErrorEvent.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkClientSocket(vtkSocket):
    """
    vtkClientSocket - Encapsulates a client socket.
    
    Superclass: vtkSocket
    """
    def ConnectToServer(self, string, p_int):
        """
        V.ConnectToServer(string, int) -> int
        C++: int ConnectToServer(const char *hostname, int port)
        
        Connects to host. Returns 0 on success, -1 on error.
        """
        ...
    
    def GetConnectingSide(self):
        """
        V.GetConnectingSide() -> bool
        C++: virtual bool GetConnectingSide()
        
        Returns if the socket is on the connecting side (the side that
        requests a ConnectToServer() or on the connected side (the side
        that was waiting for the client to connect). This is used to
        disambiguate the two ends of a socket connection.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkClientSocket
        C++: vtkClientSocket *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkClientSocket
        C++: static vtkClientSocket *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkDirectory(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkDirectory - OS independent class for access and manipulation of
    system directories
    
    Superclass: vtkObject
    
    vtkDirectory provides a portable way of finding the names of the
    files in a system directory.  It also provides methods of
    manipulating directories.
    
    @warning
    vtkDirectory works with windows and unix only.
    """
    def DeleteDirectory(self, string):
        """
        V.DeleteDirectory(string) -> int
        C++: static int DeleteDirectory(const char *dir)
        
        Remove a directory.
        """
        ...
    
    def FileIsDirectory(self, string):
        """
        V.FileIsDirectory(string) -> int
        C++: int FileIsDirectory(const char *name)
        
        Return true if the file is a directory.  If the file is not an
        absolute path, it is assumed to be relative to the opened
        directory. If no directory has been opened, it is assumed to be
        relative to the current working directory.
        """
        ...
    
    def GetCurrentWorkingDirectory(self, string, p_int):
        """
        V.GetCurrentWorkingDirectory(string, int) -> string
        C++: static const char *GetCurrentWorkingDirectory(char *buf,
            unsigned int len)
        
        Get the current working directory.
        """
        ...
    
    def GetFile(self, p_int):
        """
        V.GetFile(int) -> string
        C++: const char *GetFile(vtkIdType index)
        
        Return the file at the given index, the indexing is 0 based
        """
        ...
    
    def GetFiles(self):
        """
        V.GetFiles() -> vtkStringArray
        C++: virtual vtkStringArray *GetFiles()
        
        Get an array that contains all the file names.
        """
        ...
    
    def GetNumberOfFiles(self):
        """
        V.GetNumberOfFiles() -> int
        C++: vtkIdType GetNumberOfFiles()
        
        Return the number of files in the current directory.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Return the class name as a string.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Return the class name as a string.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return the class name as a string.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return the class name as a string.
        """
        ...
    
    def MakeDirectory(self, string):
        """
        V.MakeDirectory(string) -> int
        C++: static int MakeDirectory(const char *dir)
        
        Create directory.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDirectory
        C++: vtkDirectory *NewInstance()
        
        Return the class name as a string.
        """
        ...
    
    def Open(self, string):
        """
        V.Open(string) -> int
        C++: int Open(const char *dir)
        
        Open the specified directory and load the names of the files in
        that directory. 0 is returned if the directory can not be opened,
        1 if it is opened.
        """
        ...
    
    def Rename(self, string, string_1):
        """
        V.Rename(string, string) -> int
        C++: static int Rename(const char *oldname, const char *newname)
        
        Rename a file or directory.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDirectory
        C++: static vtkDirectory *SafeDownCast(vtkObjectBase *o)
        
        Return the class name as a string.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkServerSocket(vtkSocket):
    """
    vtkServerSocket - Encapsulate a socket that accepts connections.
    
    Superclass: vtkSocket
    """
    def CreateServer(self, p_int):
        """
        V.CreateServer(int) -> int
        C++: int CreateServer(int port)
        
        Creates a server socket at a given port and binds to it. Returns
        -1 on error. 0 on success.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetServerPort(self):
        """
        V.GetServerPort() -> int
        C++: int GetServerPort()
        
        Returns the port on which the server is running.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkServerSocket
        C++: vtkServerSocket *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkServerSocket
        C++: static vtkServerSocket *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def WaitForConnection(self, p_int):
        """
        V.WaitForConnection(int) -> vtkClientSocket
        C++: vtkClientSocket *WaitForConnection(unsigned long msec=0)
        
        Waits for a connection. When a connection is received a new
        vtkClientSocket object is created and returned. Returns nullptr
        on timeout.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSocketCollection(__vtkmodules_vtkCommonCore.vtkCollection):
    """
    vtkSocketCollection - a collection for sockets.
    
    Superclass: vtkCollection
    
    Apart from being vtkCollection subclass for sockets, this class
    provides means to wait for activity on all the sockets in the
    collection simultaneously.
    """
    def AddItem(self, vtkSocket):
        """
        V.AddItem(vtkSocket)
        C++: void AddItem(vtkSocket *soc)
        """
        ...
    
    def GetLastSelectedSocket(self):
        """
        V.GetLastSelectedSocket() -> vtkSocket
        C++: vtkSocket *GetLastSelectedSocket()
        
        Returns the socket selected during the last SelectSockets(), if
        any. nullptr otherwise.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSocketCollection
        C++: vtkSocketCollection *NewInstance()
        """
        ...
    
    def RemoveAllItems(self):
        """
        V.RemoveAllItems()
        C++: void RemoveAllItems()
        
        Overridden to unset SelectedSocket.
        """
        ...
    
    def RemoveItem(self, p_int):
        """
        V.RemoveItem(int)
        C++: void RemoveItem(int i)
        V.RemoveItem(vtkObject)
        C++: void RemoveItem(vtkObject *)
        
        Overridden to unset SelectedSocket.
        """
        ...
    
    def ReplaceItem(self, p_int, vtkObject):
        """
        V.ReplaceItem(int, vtkObject)
        C++: void ReplaceItem(int i, vtkObject *)
        
        Overridden to unset SelectedSocket.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSocketCollection
        C++: static vtkSocketCollection *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SelectSockets(self, p_int):
        """
        V.SelectSockets(int) -> int
        C++: int SelectSockets(unsigned long msec=0)
        
        Select all Connected sockets in the collection. If msec is
        specified, it timesout after msec milliseconds on inactivity.
        Returns 0 on timeout, -1 on error; 1 is a socket was selected.
        The selected socket can be retrieved by GetLastSelectedSocket().
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkThreadMessager(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkThreadMessager - A class for performing inter-thread messaging
    
    Superclass: vtkObject
    
    vtkThreadMessager is a class that provides support for messaging
    between threads multithreaded using pthreads or Windows messaging.
    """
    def DisableWaitForReceiver(self):
        """
        V.DisableWaitForReceiver()
        C++: void DisableWaitForReceiver()
        
        pthreads only. If the wait is enabled, the thread who is to call
        WaitForMessage() will block until a receiver thread is ready to
        receive.
        """
        ...
    
    def EnableWaitForReceiver(self):
        """
        V.EnableWaitForReceiver()
        C++: void EnableWaitForReceiver()
        
        pthreads only. If the wait is enabled, the thread who is to call
        WaitForMessage() will block until a receiver thread is ready to
        receive.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkThreadMessager
        C++: vtkThreadMessager *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkThreadMessager
        C++: static vtkThreadMessager *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SendWakeMessage(self):
        """
        V.SendWakeMessage()
        C++: void SendWakeMessage()
        
        Send a message to all threads who are waiting via
        WaitForMessage().
        """
        ...
    
    def WaitForMessage(self):
        """
        V.WaitForMessage()
        C++: void WaitForMessage()
        
        Wait (block, non-busy) until another thread sends a message.
        """
        ...
    
    def WaitForReceiver(self):
        """
        V.WaitForReceiver()
        C++: void WaitForReceiver()
        
        pthreads only. If wait is enable, this will block until one
        thread is ready to receive a message.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTimerLog(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkTimerLog - Timer support and logging
    
    Superclass: vtkObject
    
    vtkTimerLog contains walltime and cputime measurements associated
    with a given event.  These results can be later analyzed when "dumping
    out" the table.
    
    In addition, vtkTimerLog allows the user to simply get the current
    time, and to start/stop a simple timer separate from the timing table
    logging.
    """
    def CleanupLog(self):
        """
        V.CleanupLog()
        C++: static void CleanupLog()
        
        Remove timer log.
        """
        ...
    
    def DumpLog(self, string):
        """
        V.DumpLog(string)
        C++: static void DumpLog(const char *filename)
        
        Write the timing table out to a file.  Calculate some helpful
        statistics (deltas and percentages) in the process.
        """
        ...
    
    def GetCPUTime(self):
        """
        V.GetCPUTime() -> float
        C++: static double GetCPUTime()
        
        Returns the CPU time for this process On Win32 platforms this
        actually returns wall time.
        """
        ...
    
    def GetElapsedTime(self):
        """
        V.GetElapsedTime() -> float
        C++: double GetElapsedTime()
        
        Returns the difference between StartTime and EndTime as a
        doubleing point value indicating the elapsed time in seconds.
        """
        ...
    
    def GetEventIndent(self, p_int):
        """
        V.GetEventIndent(int) -> int
        C++: static int GetEventIndent(int i)
        
        Programmatic access to events.  Indexed from 0 to num-1.
        """
        ...
    
    def GetEventString(self, p_int):
        """
        V.GetEventString(int) -> string
        C++: static const char *GetEventString(int i)
        
        Programmatic access to events.  Indexed from 0 to num-1.
        """
        ...
    
    def GetEventType(self, p_int):
        """
        V.GetEventType(int) -> vtkTimerLogEntry.LogEntryType
        C++: static vtkTimerLogEntry::LogEntryType GetEventType(int i)
        
        Programmatic access to events.  Indexed from 0 to num-1.
        """
        ...
    
    def GetEventWallTime(self, p_int):
        """
        V.GetEventWallTime(int) -> float
        C++: static double GetEventWallTime(int i)
        
        Programmatic access to events.  Indexed from 0 to num-1.
        """
        ...
    
    def GetLogging(self):
        """
        V.GetLogging() -> int
        C++: static int GetLogging()
        """
        ...
    
    def GetMaxEntries(self):
        """
        V.GetMaxEntries() -> int
        C++: static int GetMaxEntries()
        
        Set/Get the maximum number of entries allowed in the timer log
        """
        ...
    
    def GetNumberOfEvents(self):
        """
        V.GetNumberOfEvents() -> int
        C++: static int GetNumberOfEvents()
        
        Programmatic access to events.  Indexed from 0 to num-1.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetUniversalTime(self):
        """
        V.GetUniversalTime() -> float
        C++: static double GetUniversalTime()
        
        Returns the elapsed number of seconds since 00:00:00 Coordinated
        Universal Time (UTC), Thursday, 1 January 1970. This is also
        called Unix Time.
        """
        ...
    
    def InsertTimedEvent(self, string, p_float, p_int):
        """
        V.InsertTimedEvent(string, float, int)
        C++: static void InsertTimedEvent(const char *EventString,
            double time, int cpuTicks)
        
        Insert an event with a known wall time value (in seconds) and
        cpuTicks.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LoggingOff(self):
        """
        V.LoggingOff()
        C++: static void LoggingOff()
        """
        ...
    
    def LoggingOn(self):
        """
        V.LoggingOn()
        C++: static void LoggingOn()
        """
        ...
    
    def MarkEndEvent(self, string):
        """
        V.MarkEndEvent(string)
        C++: static void MarkEndEvent(const char *EventString)
        
        I want to time events, so I am creating this interface to mark
        events that have a start and an end.  These events can be,
        nested. The standard Dumplog ignores the indents.
        """
        ...
    
    def MarkEvent(self, string):
        """
        V.MarkEvent(string)
        C++: static void MarkEvent(const char *EventString)
        
        Record a timing event and capture wall time and cpu ticks.
        """
        ...
    
    def MarkStartEvent(self, string):
        """
        V.MarkStartEvent(string)
        C++: static void MarkStartEvent(const char *EventString)
        
        I want to time events, so I am creating this interface to mark
        events that have a start and an end.  These events can be,
        nested. The standard Dumplog ignores the indents.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTimerLog
        C++: vtkTimerLog *NewInstance()
        """
        ...
    
    def ResetLog(self):
        """
        V.ResetLog()
        C++: static void ResetLog()
        
        Clear the timing table.  walltime and cputime will also be set to
        zero when the first new event is recorded.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTimerLog
        C++: static vtkTimerLog *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetLogging(self, p_int):
        """
        V.SetLogging(int)
        C++: static void SetLogging(int v)
        
        This flag will turn logging of events off or on. By default,
        logging is on.
        """
        ...
    
    def SetMaxEntries(self, p_int):
        """
        V.SetMaxEntries(int)
        C++: static void SetMaxEntries(int a)
        
        Set/Get the maximum number of entries allowed in the timer log
        """
        ...
    
    def StartTimer(self):
        """
        V.StartTimer()
        C++: void StartTimer()
        
        Set the StartTime to the current time. Used with
        GetElapsedTime().
        """
        ...
    
    def StopTimer(self):
        """
        V.StopTimer()
        C++: void StopTimer()
        
        Sets EndTime to the current time. Used with GetElapsedTime().
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkTimerLogEntry(object):
    """
    vtkTimerLogEntry - no description provided.
    
    vtkTimerLogEntry()
    vtkTimerLogEntry(const &vtkTimerLogEntry)
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    END = ...
    INSERTED = ...
    INVALID = ...
    LogEntryType = ...
    STANDALONE = ...
    START = ...


class vtkTimerLogScope(object):
    """
    vtkTimerLogScope - Helper class to log time within scope
    
    vtkTimerLogScope(const char *eventString)
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, const_char, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


__loader__ = ...
__spec__ = ...
