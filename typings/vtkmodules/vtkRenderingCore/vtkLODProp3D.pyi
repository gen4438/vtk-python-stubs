"""
This type stub file was generated by pyright.
"""

from .vtkProp3D import vtkProp3D

class vtkLODProp3D(vtkProp3D):
    """
    vtkLODProp3D - level of detail 3D prop
    
    Superclass: vtkProp3D
    
    vtkLODProp3D is a class to support level of detail rendering for
    Prop3D. Any number of mapper/property/texture items can be added to
    this object. Render time will be measured, and will be used to select
    a LOD based on the AllocatedRenderTime of this Prop3D. Depending on
    the type of the mapper/property, a vtkActor or a vtkVolume will be
    created behind the scenes.
    
    @sa
    vtkProp3D vtkActor vtkVolume vtkLODActor
    """
    def AddEstimatedRenderTime(self, p_float, vtkViewport):
        """
        V.AddEstimatedRenderTime(float, vtkViewport)
        C++: void AddEstimatedRenderTime(double t, vtkViewport *vp)
            override;
        
        Override method from vtkProp in order to push this call down to
        the selected LOD as well.
        """
        ...
    
    def AddLOD(self, vtkMapper, vtkProperty, vtkProperty_1, vtkTexture, p_float):
        """
        V.AddLOD(vtkMapper, vtkProperty, vtkProperty, vtkTexture, float)
            -> int
        C++: int AddLOD(vtkMapper *m, vtkProperty *p, vtkProperty *back,
            vtkTexture *t, double time)
        V.AddLOD(vtkMapper, vtkProperty, vtkTexture, float) -> int
        C++: int AddLOD(vtkMapper *m, vtkProperty *p, vtkTexture *t,
            double time)
        V.AddLOD(vtkMapper, vtkProperty, vtkProperty, float) -> int
        C++: int AddLOD(vtkMapper *m, vtkProperty *p, vtkProperty *back,
            double time)
        V.AddLOD(vtkMapper, vtkProperty, float) -> int
        C++: int AddLOD(vtkMapper *m, vtkProperty *p, double time)
        V.AddLOD(vtkMapper, vtkTexture, float) -> int
        C++: int AddLOD(vtkMapper *m, vtkTexture *t, double time)
        V.AddLOD(vtkMapper, float) -> int
        C++: int AddLOD(vtkMapper *m, double time)
        V.AddLOD(vtkAbstractVolumeMapper, vtkVolumeProperty, float) -> int
        C++: int AddLOD(vtkAbstractVolumeMapper *m, vtkVolumeProperty *p,
            double time)
        V.AddLOD(vtkAbstractVolumeMapper, float) -> int
        C++: int AddLOD(vtkAbstractVolumeMapper *m, double time)
        V.AddLOD(vtkImageMapper3D, vtkImageProperty, float) -> int
        C++: int AddLOD(vtkImageMapper3D *m, vtkImageProperty *p,
            double time)
        V.AddLOD(vtkImageMapper3D, float) -> int
        C++: int AddLOD(vtkImageMapper3D *m, double time)
        
        Add a level of detail with a given mapper, property, backface
        property, texture, and guess of rendering time.  The property and
        texture fields can be set to NULL (the other methods are included
        for script access where null variables are not allowed). The time
        field can be set to 0.0 indicating that no initial guess for
        rendering time is being supplied. The returned integer value is
        an ID that can be used later to delete this LOD, or set it as the
        selected LOD.
        """
        ...
    
    def AutomaticLODSelectionOff(self):
        """
        V.AutomaticLODSelectionOff()
        C++: virtual void AutomaticLODSelectionOff()
        
        Turn on / off automatic selection of LOD. This is on by default.
        If it is off, then the SelectedLODID is rendered regardless of
        rendering time or desired update rate.
        """
        ...
    
    def AutomaticLODSelectionOn(self):
        """
        V.AutomaticLODSelectionOn()
        C++: virtual void AutomaticLODSelectionOn()
        
        Turn on / off automatic selection of LOD. This is on by default.
        If it is off, then the SelectedLODID is rendered regardless of
        rendering time or desired update rate.
        """
        ...
    
    def AutomaticPickLODSelectionOff(self):
        """
        V.AutomaticPickLODSelectionOff()
        C++: virtual void AutomaticPickLODSelectionOff()
        
        Turn on / off automatic selection of picking LOD. This is on by
        default. If it is off, then the SelectedLODID is rendered
        regardless of rendering time or desired update rate.
        """
        ...
    
    def AutomaticPickLODSelectionOn(self):
        """
        V.AutomaticPickLODSelectionOn()
        C++: virtual void AutomaticPickLODSelectionOn()
        
        Turn on / off automatic selection of picking LOD. This is on by
        default. If it is off, then the SelectedLODID is rendered
        regardless of rendering time or desired update rate.
        """
        ...
    
    def DisableLOD(self, p_int):
        """
        V.DisableLOD(int)
        C++: void DisableLOD(int id)
        
        Enable / disable a particular LOD. If it is disabled, it will not
        be used during automatic selection, but can be selected as the
        LOD if automatic LOD selection is off.
        """
        ...
    
    def EnableLOD(self, p_int):
        """
        V.EnableLOD(int)
        C++: void EnableLOD(int id)
        
        Enable / disable a particular LOD. If it is disabled, it will not
        be used during automatic selection, but can be selected as the
        LOD if automatic LOD selection is off.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        For some exporters and other other operations we must be able to
        collect all the actors or volumes. These methods are used in that
        process.
        """
        ...
    
    def GetAutomaticLODSelection(self):
        """
        V.GetAutomaticLODSelection() -> int
        C++: virtual vtkTypeBool GetAutomaticLODSelection()
        
        Turn on / off automatic selection of LOD. This is on by default.
        If it is off, then the SelectedLODID is rendered regardless of
        rendering time or desired update rate.
        """
        ...
    
    def GetAutomaticLODSelectionMaxValue(self):
        """
        V.GetAutomaticLODSelectionMaxValue() -> int
        C++: virtual vtkTypeBool GetAutomaticLODSelectionMaxValue()
        
        Turn on / off automatic selection of LOD. This is on by default.
        If it is off, then the SelectedLODID is rendered regardless of
        rendering time or desired update rate.
        """
        ...
    
    def GetAutomaticLODSelectionMinValue(self):
        """
        V.GetAutomaticLODSelectionMinValue() -> int
        C++: virtual vtkTypeBool GetAutomaticLODSelectionMinValue()
        
        Turn on / off automatic selection of LOD. This is on by default.
        If it is off, then the SelectedLODID is rendered regardless of
        rendering time or desired update rate.
        """
        ...
    
    def GetAutomaticPickLODSelection(self):
        """
        V.GetAutomaticPickLODSelection() -> int
        C++: virtual vtkTypeBool GetAutomaticPickLODSelection()
        
        Turn on / off automatic selection of picking LOD. This is on by
        default. If it is off, then the SelectedLODID is rendered
        regardless of rendering time or desired update rate.
        """
        ...
    
    def GetAutomaticPickLODSelectionMaxValue(self):
        """
        V.GetAutomaticPickLODSelectionMaxValue() -> int
        C++: virtual vtkTypeBool GetAutomaticPickLODSelectionMaxValue()
        
        Turn on / off automatic selection of picking LOD. This is on by
        default. If it is off, then the SelectedLODID is rendered
        regardless of rendering time or desired update rate.
        """
        ...
    
    def GetAutomaticPickLODSelectionMinValue(self):
        """
        V.GetAutomaticPickLODSelectionMinValue() -> int
        C++: virtual vtkTypeBool GetAutomaticPickLODSelectionMinValue()
        
        Turn on / off automatic selection of picking LOD. This is on by
        default. If it is off, then the SelectedLODID is rendered
        regardless of rendering time or desired update rate.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Standard vtkProp method to get 3D bounds of a 3D prop
        """
        ...
    
    def GetCurrentIndex(self):
        """
        V.GetCurrentIndex() -> int
        C++: virtual int GetCurrentIndex()
        
        Get the current index, used to determine the ID of the next LOD
        that is added.  Useful for guessing what IDs have been used (with
        NumberOfLODs, without depending on the constructor initialization
        to 1000.
        """
        ...
    
    def GetLastRenderedLODID(self):
        """
        V.GetLastRenderedLODID() -> int
        C++: int GetLastRenderedLODID()
        
        Get the ID of the previously (during the last render) selected
        LOD index
        """
        ...
    
    def GetLODEstimatedRenderTime(self, p_int):
        """
        V.GetLODEstimatedRenderTime(int) -> float
        C++: double GetLODEstimatedRenderTime(int id)
        
        Access method that can be used to find out the estimated render
        time (the thing used to select an LOD) for a given LOD ID or
        index. Value is returned in seconds.
        """
        ...
    
    def GetLODIndexEstimatedRenderTime(self, p_int):
        """
        V.GetLODIndexEstimatedRenderTime(int) -> float
        C++: double GetLODIndexEstimatedRenderTime(int index)
        
        Access method that can be used to find out the estimated render
        time (the thing used to select an LOD) for a given LOD ID or
        index. Value is returned in seconds.
        """
        ...
    
    def GetLODIndexLevel(self, p_int):
        """
        V.GetLODIndexLevel(int) -> float
        C++: double GetLODIndexLevel(int index)
        
        Set the level of a particular LOD. When a LOD is selected for
        rendering because it has the largest render time that fits within
        the allocated time, all LOD are then checked to see if any one
        can render faster but has a lower (more resolution/better) level.
        This quantity is a double to ensure that a level can be inserted
        between 2 and 3.
        """
        ...
    
    def GetLODLevel(self, p_int):
        """
        V.GetLODLevel(int) -> float
        C++: double GetLODLevel(int id)
        
        Set the level of a particular LOD. When a LOD is selected for
        rendering because it has the largest render time that fits within
        the allocated time, all LOD are then checked to see if any one
        can render faster but has a lower (more resolution/better) level.
        This quantity is a double to ensure that a level can be inserted
        between 2 and 3.
        """
        ...
    
    def GetLODMapper(self, p_int):
        """
        V.GetLODMapper(int) -> vtkAbstractMapper3D
        C++: vtkAbstractMapper3D *GetLODMapper(int id)
        
        Get the LODMapper as an vtkAbstractMapper3D.  It is the user's
        respondibility to safe down cast this to a vtkMapper or
        vtkVolumeMapper as appropriate.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfLODs(self):
        """
        V.GetNumberOfLODs() -> int
        C++: virtual int GetNumberOfLODs()
        
        Get the current number of LODs.
        """
        ...
    
    def GetPickLODID(self):
        """
        V.GetPickLODID() -> int
        C++: int GetPickLODID(void)
        
        Get the ID of the appropriate pick LOD index
        """
        ...
    
    def GetSelectedLODID(self):
        """
        V.GetSelectedLODID() -> int
        C++: virtual int GetSelectedLODID()
        
        Set the id of the LOD that is to be drawn when automatic LOD
        selection is turned off.
        """
        ...
    
    def GetSelectedPickLODID(self):
        """
        V.GetSelectedPickLODID() -> int
        C++: virtual int GetSelectedPickLODID()
        
        Set the id of the LOD that is to be used for picking when
        automatic LOD pick selection is turned off.
        """
        ...
    
    def GetVolumes(self, vtkPropCollection):
        """
        V.GetVolumes(vtkPropCollection)
        C++: void GetVolumes(vtkPropCollection *) override;
        
        For some exporters and other other operations we must be able to
        collect all the actors or volumes. These methods are used in that
        process.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsLODEnabled(self, p_int):
        """
        V.IsLODEnabled(int) -> int
        C++: int IsLODEnabled(int id)
        
        Enable / disable a particular LOD. If it is disabled, it will not
        be used during automatic selection, but can be selected as the
        LOD if automatic LOD selection is off.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLODProp3D
        C++: vtkLODProp3D *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RemoveLOD(self, p_int):
        """
        V.RemoveLOD(int)
        C++: void RemoveLOD(int id)
        
        Delete a level of detail given an ID. This is the ID returned by
        the AddLOD method
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Support the standard render methods.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *ren)
            override;
        
        Support the standard render methods.
        """
        ...
    
    def RenderVolumetricGeometry(self, vtkViewport):
        """
        V.RenderVolumetricGeometry(vtkViewport) -> int
        C++: int RenderVolumetricGeometry(vtkViewport *ren) override;
        
        Support the standard render methods.
        """
        ...
    
    def RestoreEstimatedRenderTime(self):
        """
        V.RestoreEstimatedRenderTime()
        C++: void RestoreEstimatedRenderTime() override;
        
        Used when the render process is aborted to restore the previous
        estimated render time. Overridden here to allow previous time for
        a particular LOD to be restored - otherwise the time for the last
        rendered LOD will be copied into the currently selected LOD.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLODProp3D
        C++: static vtkLODProp3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllocatedRenderTime(self, p_float, vtkViewport):
        """
        V.SetAllocatedRenderTime(float, vtkViewport)
        C++: void SetAllocatedRenderTime(double t, vtkViewport *vp)
            override;
        
        Used by the culler / renderer to set the allocated render time
        for this prop. This is based on the desired update rate, and
        possibly some other properties such as potential screen coverage
        of this prop.
        """
        ...
    
    def SetAutomaticLODSelection(self, p_int):
        """
        V.SetAutomaticLODSelection(int)
        C++: virtual void SetAutomaticLODSelection(vtkTypeBool _arg)
        
        Turn on / off automatic selection of LOD. This is on by default.
        If it is off, then the SelectedLODID is rendered regardless of
        rendering time or desired update rate.
        """
        ...
    
    def SetAutomaticPickLODSelection(self, p_int):
        """
        V.SetAutomaticPickLODSelection(int)
        C++: virtual void SetAutomaticPickLODSelection(vtkTypeBool _arg)
        
        Turn on / off automatic selection of picking LOD. This is on by
        default. If it is off, then the SelectedLODID is rendered
        regardless of rendering time or desired update rate.
        """
        ...
    
    def SetLODBackfaceProperty(self, p_int, vtkProperty):
        """
        V.SetLODBackfaceProperty(int, vtkProperty)
        C++: void SetLODBackfaceProperty(int id, vtkProperty *t)
        
        Methods to set / get the backface property of an LOD. This method
        is only valid for LOD ids that are Actors (not Volumes)
        """
        ...
    
    def SetLODLevel(self, p_int, p_float):
        """
        V.SetLODLevel(int, float)
        C++: void SetLODLevel(int id, double level)
        
        Set the level of a particular LOD. When a LOD is selected for
        rendering because it has the largest render time that fits within
        the allocated time, all LOD are then checked to see if any one
        can render faster but has a lower (more resolution/better) level.
        This quantity is a double to ensure that a level can be inserted
        between 2 and 3.
        """
        ...
    
    def SetLODMapper(self, p_int, vtkMapper):
        """
        V.SetLODMapper(int, vtkMapper)
        C++: void SetLODMapper(int id, vtkMapper *m)
        V.SetLODMapper(int, vtkAbstractVolumeMapper)
        C++: void SetLODMapper(int id, vtkAbstractVolumeMapper *m)
        V.SetLODMapper(int, vtkImageMapper3D)
        C++: void SetLODMapper(int id, vtkImageMapper3D *m)
        
        Methods to set / get the mapper of an LOD. Since the LOD could be
        a volume or an actor, you have to pass in the pointer to the
        mapper to get it. The returned mapper will be NULL if the id is
        not valid, or the mapper is of the wrong type for the
        corresponding Prop3D.
        """
        ...
    
    def SetLODProperty(self, p_int, vtkProperty):
        """
        V.SetLODProperty(int, vtkProperty)
        C++: void SetLODProperty(int id, vtkProperty *p)
        V.SetLODProperty(int, vtkVolumeProperty)
        C++: void SetLODProperty(int id, vtkVolumeProperty *p)
        V.SetLODProperty(int, vtkImageProperty)
        C++: void SetLODProperty(int id, vtkImageProperty *p)
        
        Methods to set / get the property of an LOD. Since the LOD could
        be a volume or an actor, you have to pass in the pointer to the
        property to get it. The returned property will be NULL if the id
        is not valid, or the property is of the wrong type for the
        corresponding Prop3D.
        """
        ...
    
    def SetLODTexture(self, p_int, vtkTexture):
        """
        V.SetLODTexture(int, vtkTexture)
        C++: void SetLODTexture(int id, vtkTexture *t)
        
        Methods to set / get the texture of an LOD. This method is only
        valid for LOD ids that are Actors (not Volumes)
        """
        ...
    
    def SetSelectedLODID(self, p_int):
        """
        V.SetSelectedLODID(int)
        C++: virtual void SetSelectedLODID(int _arg)
        
        Set the id of the LOD that is to be drawn when automatic LOD
        selection is turned off.
        """
        ...
    
    def SetSelectedPickLODID(self, p_int):
        """
        V.SetSelectedPickLODID(int)
        C++: void SetSelectedPickLODID(int id)
        
        Set the id of the LOD that is to be used for picking when
        automatic LOD pick selection is turned off.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of this vtkLODProp3D.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


