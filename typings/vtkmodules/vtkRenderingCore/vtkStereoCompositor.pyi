"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkStereoCompositor(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkStereoCompositor - helper class to generate composited stereo
    images.
    
    Superclass: vtkObject
    
    vtkStereoCompositor is used by vtkRenderWindow to composite left and
    right eye rendering results into a single color buffer.
    
    Note that all methods on vtkStereoCompositor take in pointers to the
    left and right rendering results and generate the result in the
    buffer passed for the left eye.
    """
    def Anaglyph(self, vtkUnsignedCharArray, vtkUnsignedCharArray_1, p_float, ):
        """
        V.Anaglyph(vtkUnsignedCharArray, vtkUnsignedCharArray, float, (
            int, int)) -> bool
        C++: bool Anaglyph(vtkUnsignedCharArray *rgbLeftNResult,
            vtkUnsignedCharArray *rgbRight, float colorSaturation,
            const int colorMask[2])
        
        Methods for compositing left and right eye images based on
        various supported modes. See vtkRenderWindow::SetStereoType for
        explanation of each of these modes. Note that all these methods
        generate the result in the buffer passed for the left eye.
        """
        ...
    
    def Checkerboard(self, vtkUnsignedCharArray, vtkUnsignedCharArray_1, ):
        """
        V.Checkerboard(vtkUnsignedCharArray, vtkUnsignedCharArray, (int,
            int)) -> bool
        C++: bool Checkerboard(vtkUnsignedCharArray *rgbLeftNResult,
            vtkUnsignedCharArray *rgbRight, const int size[2])
        
        Methods for compositing left and right eye images based on
        various supported modes. See vtkRenderWindow::SetStereoType for
        explanation of each of these modes. Note that all these methods
        generate the result in the buffer passed for the left eye.
        """
        ...
    
    def Dresden(self, vtkUnsignedCharArray, vtkUnsignedCharArray_1, ):
        """
        V.Dresden(vtkUnsignedCharArray, vtkUnsignedCharArray, (int, int))
            -> bool
        C++: bool Dresden(vtkUnsignedCharArray *rgbLeftNResult,
            vtkUnsignedCharArray *rgbRight, const int size[2])
        
        Methods for compositing left and right eye images based on
        various supported modes. See vtkRenderWindow::SetStereoType for
        explanation of each of these modes. Note that all these methods
        generate the result in the buffer passed for the left eye.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Interlaced(self, vtkUnsignedCharArray, vtkUnsignedCharArray_1, ):
        """
        V.Interlaced(vtkUnsignedCharArray, vtkUnsignedCharArray, (int,
            int)) -> bool
        C++: bool Interlaced(vtkUnsignedCharArray *rgbLeftNResult,
            vtkUnsignedCharArray *rgbRight, const int size[2])
        
        Methods for compositing left and right eye images based on
        various supported modes. See vtkRenderWindow::SetStereoType for
        explanation of each of these modes. Note that all these methods
        generate the result in the buffer passed for the left eye.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStereoCompositor
        C++: vtkStereoCompositor *NewInstance()
        """
        ...
    
    def RedBlue(self, vtkUnsignedCharArray, vtkUnsignedCharArray_1):
        """
        V.RedBlue(vtkUnsignedCharArray, vtkUnsignedCharArray) -> bool
        C++: bool RedBlue(vtkUnsignedCharArray *rgbLeftNResult,
            vtkUnsignedCharArray *rgbRight)
        
        Methods for compositing left and right eye images based on
        various supported modes. See vtkRenderWindow::SetStereoType for
        explanation of each of these modes. Note that all these methods
        generate the result in the buffer passed for the left eye.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStereoCompositor
        C++: static vtkStereoCompositor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SplitViewportHorizontal(self, vtkUnsignedCharArray, vtkUnsignedCharArray_1, ):
        """
        V.SplitViewportHorizontal(vtkUnsignedCharArray,
            vtkUnsignedCharArray, (int, int)) -> bool
        C++: bool SplitViewportHorizontal(
            vtkUnsignedCharArray *rgbLeftNResult,
            vtkUnsignedCharArray *rgbRight, const int size[2])
        
        Methods for compositing left and right eye images based on
        various supported modes. See vtkRenderWindow::SetStereoType for
        explanation of each of these modes. Note that all these methods
        generate the result in the buffer passed for the left eye.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


