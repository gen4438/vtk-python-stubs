"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkPickingManager(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkPickingManager - Class defines API to manage the picking process.
    
    Superclass: vtkObject
    
    The Picking Manager (PM) coordinates picking across widgets
    simultaneously. It maintains a collection of registered pickers; when
    the manager is picked (e.g. vtkPickingManager::Pick()), a pick is run
    on each picker but only the best picker (e.g. closest to camera
    point) is selected. It finally returns the widget/representation or
    picker that was selected.
    @warning
    Every time a vtkWidget and/or a vtkWidgetRepresentation is
    instantiated, it automatically registers its picker(s) and start
    being managed by delegating all its pick calls to the picking
    manager. It is possible to customize with the management in two ways:
    * at the widget level, the "ManagesPicking" variable can be changed
      from the widget/representation class to tell whether to use the
      manager or not.
    * Directly disable the picking manager itself with the boolean
      variable
    \sa Enabled using vtkPickingManager::EnabledOn(), EnabledOff(),
    SetEnabled(bool).@par Important: The picking manager is not active by
    default as it slightly reduces the performances when interacting with
    the scene.@par Important: When registering pickers, a null object is
    considered valid because we can managed picker without any associated
    object. It is really important to note that a null object is
    different from one to an other !! This has been done to allow adding
    multiple times the same picker to the manager by not passing the
    referenced object to not force the suppression of all pickers
    """
    def AddPicker(self, vtkAbstractPicker, vtkObject):
        """
        V.AddPicker(vtkAbstractPicker, vtkObject)
        C++: void AddPicker(vtkAbstractPicker *picker,
            vtkObject *object=nullptr)
        
        Register a picker into the picking manager. It can be internally
        associated (optional) with an object. This allows the removal of
        all the pickers of the given object. Note that a picker can be
        registered multiple times with different objects.
        \sa RemovePicker(), RemoveObject().
        """
        ...
    
    def EnabledOff(self):
        """
        V.EnabledOff()
        C++: virtual void EnabledOff()
        
        Enable/Disable management. When disabled, it redirects every pick
        on the picker. By default the picking manager is disabled when
        initialized.
        """
        ...
    
    def EnabledOn(self):
        """
        V.EnabledOn()
        C++: virtual void EnabledOn()
        
        Enable/Disable management. When disabled, it redirects every pick
        on the picker. By default the picking manager is disabled when
        initialized.
        """
        ...
    
    def GetAssemblyPath(self, p_float, p_float_1, p_float_2, vtkAbstractPropPicker, vtkRenderer, vtkObject):
        """
        V.GetAssemblyPath(float, float, float, vtkAbstractPropPicker,
            vtkRenderer, vtkObject) -> vtkAssemblyPath
        C++: vtkAssemblyPath *GetAssemblyPath(double X, double Y,
            double Z, vtkAbstractPropPicker *picker,
            vtkRenderer *renderer, vtkObject *obj)
        
        If the picking manager is enabled, it runs the picking selection
        process and return the assembly path associated to the picker
        passed as argument if it is the one mediated. Otherwise it simply
        proceeds to a pick using the given renderer and returns the
        corresponding assembly path.
        """
        ...
    
    def GetEnabled(self):
        """
        V.GetEnabled() -> bool
        C++: virtual bool GetEnabled()
        
        Enable/Disable management. When disabled, it redirects every pick
        on the picker. By default the picking manager is disabled when
        initialized.
        """
        ...
    
    def GetInteractor(self):
        """
        V.GetInteractor() -> vtkRenderWindowInteractor
        C++: virtual vtkRenderWindowInteractor *GetInteractor()
        
        Set the window interactor associated with the manager.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfObjectsLinked(self, vtkAbstractPicker):
        """
        V.GetNumberOfObjectsLinked(vtkAbstractPicker) -> int
        C++: int GetNumberOfObjectsLinked(vtkAbstractPicker *picker)
        
        Return the number of objects linked with a given picker. Note: a
        null object is counted as an associated object.
        """
        ...
    
    def GetNumberOfPickers(self):
        """
        V.GetNumberOfPickers() -> int
        C++: int GetNumberOfPickers()
        
        Return the number of pickers registered. If the same picker is
        added multiple times with different objects, it is counted once.
        """
        ...
    
    def GetOptimizeOnInteractorEvents(self):
        """
        V.GetOptimizeOnInteractorEvents() -> bool
        C++: virtual bool GetOptimizeOnInteractorEvents()
        
        Enable/Disable optimization depending on the
        renderWindowInteractor events. The mechanism keeps in cache the
        last selected picker as well as the last render time to recompute
        the selection only if a new render event occurred after the last
        selection; otherwise, it simply returns the last picker selected.
        By default pickingManagers does use the optimization. Warning:
        Turning off the caching significantly decreases performance.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPickingManager
        C++: vtkPickingManager *NewInstance()
        """
        ...
    
    def Pick(self, vtkAbstractPicker, vtkObject):
        """
        V.Pick(vtkAbstractPicker, vtkObject) -> bool
        C++: bool Pick(vtkAbstractPicker *picker, vtkObject *object)
        V.Pick(vtkObject) -> bool
        C++: bool Pick(vtkObject *object)
        V.Pick(vtkAbstractPicker) -> bool
        C++: bool Pick(vtkAbstractPicker *picker)
        
        Run the picking selection process and return true if the object
        is associated with the given picker if it is the best one, false
        otherwise. If OptimizeOnInteractorEvents is true, the pick can
        reuse cached information.
        """
        ...
    
    def RemoveObject(self, vtkObject):
        """
        V.RemoveObject(vtkObject)
        C++: void RemoveObject(vtkObject *object)
        
        Remove all occurrence of the object from the registered list. If
        a picker associated with the object is not also associated with
        any other object, it is removed from the list as well.
        """
        ...
    
    def RemovePicker(self, vtkAbstractPicker, vtkObject):
        """
        V.RemovePicker(vtkAbstractPicker, vtkObject)
        C++: void RemovePicker(vtkAbstractPicker *picker,
            vtkObject *object=nullptr)
        
        Unregister the picker from the picking manager. If object is non
        null, only the pair ( picker, object) is removed.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPickingManager
        C++: static vtkPickingManager *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetEnabled(self, bool):
        """
        V.SetEnabled(bool)
        C++: virtual void SetEnabled(bool _arg)
        
        Enable/Disable management. When disabled, it redirects every pick
        on the picker. By default the picking manager is disabled when
        initialized.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *iren)
        
        Set the window interactor associated with the manager.
        """
        ...
    
    def SetOptimizeOnInteractorEvents(self, bool):
        """
        V.SetOptimizeOnInteractorEvents(bool)
        C++: void SetOptimizeOnInteractorEvents(bool optimize)
        
        Enable/Disable optimization depending on the
        renderWindowInteractor events. The mechanism keeps in cache the
        last selected picker as well as the last render time to recompute
        the selection only if a new render event occurred after the last
        selection; otherwise, it simply returns the last picker selected.
        By default pickingManagers does use the optimization. Warning:
        Turning off the caching significantly decreases performance.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


