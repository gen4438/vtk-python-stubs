"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkInteractorObserver(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkInteractorObserver - an abstract superclass for classes observing
    events invoked by vtkRenderWindowInteractor
    
    Superclass: vtkObject
    
    vtkInteractorObserver is an abstract superclass for subclasses that
    observe events invoked by vtkRenderWindowInteractor. These subclasses
    are typically things like 3D widgets; objects that interact with
    actors in the scene, or interactively probe the scene for
    information.
    
    vtkInteractorObserver defines the method SetInteractor() and enables
    and disables the processing of events by the vtkInteractorObserver.
    Use the methods EnabledOn() or SetEnabled(1) to turn on the
    interactor observer, and the methods EnabledOff() or SetEnabled(0) to
    turn off the interactor. Initial value is 0.
    
    To support interactive manipulation of objects, this class (and
    subclasses) invoke the events StartInteractionEvent,
    InteractionEvent, and EndInteractionEvent.  These events are invoked
    when the vtkInteractorObserver enters a state where rapid response is
    desired: mouse motion, etc. The events can be used, for example, to
    set the desired update frame rate (StartInteractionEvent), operate on
    data or update a pipeline (InteractionEvent), and set the desired
    frame rate back to normal values (EndInteractionEvent). Two other
    events, EnableEvent and DisableEvent, are invoked when the interactor
    observer is enabled or disabled.
    
    @sa
    vtk3DWidget vtkBoxWidget vtkLineWidget
    """
    def ComputeDisplayToWorld(self, vtkRenderer, p_float, p_float_1, p_float_2, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeDisplayToWorld(vtkRenderer, float, float, float, [float,
            float, float, float])
        C++: static void ComputeDisplayToWorld(vtkRenderer *ren, double x,
             double y, double z, double worldPt[4])
        
        Convenience methods for outside classes. Make sure that the
        parameter "ren" is not-null.
        """
        ...
    
    def ComputeWorldToDisplay(self, vtkRenderer, p_float, p_float_1, p_float_2, p_float=..., p_float=..., p_float=...):
        """
        V.ComputeWorldToDisplay(vtkRenderer, float, float, float, [float,
            float, float])
        C++: static void ComputeWorldToDisplay(vtkRenderer *ren, double x,
             double y, double z, double displayPt[3])
        
        Convenience methods for outside classes. Make sure that the
        parameter "ren" is not-null.
        """
        ...
    
    def EnabledOff(self):
        """
        V.EnabledOff()
        C++: void EnabledOff()
        """
        ...
    
    def EnabledOn(self):
        """
        V.EnabledOn()
        C++: void EnabledOn()
        """
        ...
    
    def GetCurrentRenderer(self):
        """
        V.GetCurrentRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetCurrentRenderer()
        
        Set/Get the current renderer. Normally when the widget is
        activated (SetEnabled(1) or when keypress activation takes
        place), the renderer over which the mouse pointer is positioned
        is used and assigned to this Ivar. Alternatively, you might want
        to set the CurrentRenderer explicitly. This is especially true
        with multiple viewports (renderers). WARNING: note that if the
        DefaultRenderer Ivar is set (see above), it will always override
        the parameter passed to SetCurrentRenderer, unless it is NULL.
        (i.e., SetCurrentRenderer(foo) =
        SetCurrentRenderer(DefaultRenderer).
        """
        ...
    
    def GetDefaultRenderer(self):
        """
        V.GetDefaultRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetDefaultRenderer()
        
        Set/Get the default renderer to use when activating the
        interactor observer. Normally when the widget is activated
        (SetEnabled(1) or when keypress activation takes place), the
        renderer over which the mouse pointer is positioned is used.
        Alternatively, you can specify the renderer to bind the
        interactor to when the interactor observer is activated.
        """
        ...
    
    def GetEnabled(self):
        """
        V.GetEnabled() -> int
        C++: int GetEnabled()
        """
        ...
    
    def GetInteractor(self):
        """
        V.GetInteractor() -> vtkRenderWindowInteractor
        C++: virtual vtkRenderWindowInteractor *GetInteractor()
        
        This method is used to associate the widget with the render
        window interactor.  Observers of the appropriate events invoked
        in the render window interactor are set up as a result of this
        method invocation. The SetInteractor() method must be invoked
        prior to enabling the vtkInteractorObserver. It automatically
        registers available pickers to the Picking Manager.
        """
        ...
    
    def GetKeyPressActivation(self):
        """
        V.GetKeyPressActivation() -> int
        C++: virtual vtkTypeBool GetKeyPressActivation()
        
        Enable/Disable of the use of a keypress to turn on and off the
        interactor observer. (By default, the keypress is 'i' for
        "interactor observer".)  Set the KeyPressActivationValue to
        change which key activates the widget.)
        """
        ...
    
    def GetKeyPressActivationValue(self):
        """
        V.GetKeyPressActivationValue() -> char
        C++: virtual char GetKeyPressActivationValue()
        
        Specify which key press value to use to activate the interactor
        observer (if key press activation is enabled). By default, the
        key press activation value is 'i'. Note: once the SetInteractor()
        method is invoked, changing the key press activation value will
        not affect the key press until
        SetInteractor(NULL)/SetInteractor(iren) is called.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPickingManaged(self):
        """
        V.GetPickingManaged() -> bool
        C++: virtual bool GetPickingManaged()
        
        Enable/Disable the use of a manager to process the picking.
        Enabled by default.
        """
        ...
    
    def GetPriority(self):
        """
        V.GetPriority() -> float
        C++: virtual float GetPriority()
        
        Set/Get the priority at which events are processed. This is used
        when multiple interactor observers are used simultaneously. The
        default value is 0.0 (lowest priority.) Note that when multiple
        interactor observer have the same priority, then the last
        observer added will process the event first. (Note: once the
        SetInteractor() method has been called, changing the priority
        does not effect event processing. You will have to
        SetInteractor(NULL), change priority, and then
        SetInteractor(iren) to have the priority take effect.)
        """
        ...
    
    def GetPriorityMaxValue(self):
        """
        V.GetPriorityMaxValue() -> float
        C++: virtual float GetPriorityMaxValue()
        
        Set/Get the priority at which events are processed. This is used
        when multiple interactor observers are used simultaneously. The
        default value is 0.0 (lowest priority.) Note that when multiple
        interactor observer have the same priority, then the last
        observer added will process the event first. (Note: once the
        SetInteractor() method has been called, changing the priority
        does not effect event processing. You will have to
        SetInteractor(NULL), change priority, and then
        SetInteractor(iren) to have the priority take effect.)
        """
        ...
    
    def GetPriorityMinValue(self):
        """
        V.GetPriorityMinValue() -> float
        C++: virtual float GetPriorityMinValue()
        
        Set/Get the priority at which events are processed. This is used
        when multiple interactor observers are used simultaneously. The
        default value is 0.0 (lowest priority.) Note that when multiple
        interactor observer have the same priority, then the last
        observer added will process the event first. (Note: once the
        SetInteractor() method has been called, changing the priority
        does not effect event processing. You will have to
        SetInteractor(NULL), change priority, and then
        SetInteractor(iren) to have the priority take effect.)
        """
        ...
    
    def GrabFocus(self, vtkCommand, vtkCommand_1):
        """
        V.GrabFocus(vtkCommand, vtkCommand)
        C++: void GrabFocus(vtkCommand *mouseEvents,
            vtkCommand *keypressEvents=nullptr)
        
        These methods enable an interactor observer to exclusively grab
        all events invoked by its associated vtkRenderWindowInteractor.
        (This method is typically used by widgets to grab events once an
        event sequence begins.) The GrabFocus() signature takes up to two
        vtkCommands corresponding to mouse events and keypress events.
        (These two commands are separated so that the widget can listen
        for its activation keypress, as well as listening for
        DeleteEvents, without actually having to process mouse events.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def KeyPressActivationOff(self):
        """
        V.KeyPressActivationOff()
        C++: virtual void KeyPressActivationOff()
        
        Enable/Disable of the use of a keypress to turn on and off the
        interactor observer. (By default, the keypress is 'i' for
        "interactor observer".)  Set the KeyPressActivationValue to
        change which key activates the widget.)
        """
        ...
    
    def KeyPressActivationOn(self):
        """
        V.KeyPressActivationOn()
        C++: virtual void KeyPressActivationOn()
        
        Enable/Disable of the use of a keypress to turn on and off the
        interactor observer. (By default, the keypress is 'i' for
        "interactor observer".)  Set the KeyPressActivationValue to
        change which key activates the widget.)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInteractorObserver
        C++: vtkInteractorObserver *NewInstance()
        """
        ...
    
    def Off(self):
        """
        V.Off()
        C++: void Off()
        """
        ...
    
    def On(self):
        """
        V.On()
        C++: void On()
        """
        ...
    
    def OnChar(self):
        """
        V.OnChar()
        C++: virtual void OnChar()
        
        Sets up the keypress-i event.
        """
        ...
    
    def PickingManagedOff(self):
        """
        V.PickingManagedOff()
        C++: virtual void PickingManagedOff()
        
        Enable/Disable the use of a manager to process the picking.
        Enabled by default.
        """
        ...
    
    def PickingManagedOn(self):
        """
        V.PickingManagedOn()
        C++: virtual void PickingManagedOn()
        
        Enable/Disable the use of a manager to process the picking.
        Enabled by default.
        """
        ...
    
    def ReleaseFocus(self):
        """
        V.ReleaseFocus()
        C++: void ReleaseFocus()
        
        These methods enable an interactor observer to exclusively grab
        all events invoked by its associated vtkRenderWindowInteractor.
        (This method is typically used by widgets to grab events once an
        event sequence begins.) The GrabFocus() signature takes up to two
        vtkCommands corresponding to mouse events and keypress events.
        (These two commands are separated so that the widget can listen
        for its activation keypress, as well as listening for
        DeleteEvents, without actually having to process mouse events.)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInteractorObserver
        C++: static vtkInteractorObserver *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCurrentRenderer(self, vtkRenderer):
        """
        V.SetCurrentRenderer(vtkRenderer)
        C++: virtual void SetCurrentRenderer(vtkRenderer *)
        
        Set/Get the current renderer. Normally when the widget is
        activated (SetEnabled(1) or when keypress activation takes
        place), the renderer over which the mouse pointer is positioned
        is used and assigned to this Ivar. Alternatively, you might want
        to set the CurrentRenderer explicitly. This is especially true
        with multiple viewports (renderers). WARNING: note that if the
        DefaultRenderer Ivar is set (see above), it will always override
        the parameter passed to SetCurrentRenderer, unless it is NULL.
        (i.e., SetCurrentRenderer(foo) =
        SetCurrentRenderer(DefaultRenderer).
        """
        ...
    
    def SetDefaultRenderer(self, vtkRenderer):
        """
        V.SetDefaultRenderer(vtkRenderer)
        C++: virtual void SetDefaultRenderer(vtkRenderer *)
        
        Set/Get the default renderer to use when activating the
        interactor observer. Normally when the widget is activated
        (SetEnabled(1) or when keypress activation takes place), the
        renderer over which the mouse pointer is positioned is used.
        Alternatively, you can specify the renderer to bind the
        interactor to when the interactor observer is activated.
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: virtual void SetEnabled(int)
        
        Methods for turning the interactor observer on and off, and
        determining its state. All subclasses must provide the
        SetEnabled() method. Enabling a vtkInteractorObserver has the
        side effect of adding observers; disabling it removes the
        observers. Prior to enabling the vtkInteractorObserver you must
        set the render window interactor (via SetInteractor()). Initial
        value is 0.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: virtual void SetInteractor(vtkRenderWindowInteractor *iren)
        
        This method is used to associate the widget with the render
        window interactor.  Observers of the appropriate events invoked
        in the render window interactor are set up as a result of this
        method invocation. The SetInteractor() method must be invoked
        prior to enabling the vtkInteractorObserver. It automatically
        registers available pickers to the Picking Manager.
        """
        ...
    
    def SetKeyPressActivation(self, p_int):
        """
        V.SetKeyPressActivation(int)
        C++: virtual void SetKeyPressActivation(vtkTypeBool _arg)
        
        Enable/Disable of the use of a keypress to turn on and off the
        interactor observer. (By default, the keypress is 'i' for
        "interactor observer".)  Set the KeyPressActivationValue to
        change which key activates the widget.)
        """
        ...
    
    def SetKeyPressActivationValue(self, char):
        """
        V.SetKeyPressActivationValue(char)
        C++: virtual void SetKeyPressActivationValue(char _arg)
        
        Specify which key press value to use to activate the interactor
        observer (if key press activation is enabled). By default, the
        key press activation value is 'i'. Note: once the SetInteractor()
        method is invoked, changing the key press activation value will
        not affect the key press until
        SetInteractor(NULL)/SetInteractor(iren) is called.
        """
        ...
    
    def SetPickingManaged(self, bool):
        """
        V.SetPickingManaged(bool)
        C++: virtual void SetPickingManaged(bool managed)
        
        Enable/Disable the use of a manager to process the picking.
        Enabled by default.
        """
        ...
    
    def SetPriority(self, p_float):
        """
        V.SetPriority(float)
        C++: virtual void SetPriority(float _arg)
        
        Set/Get the priority at which events are processed. This is used
        when multiple interactor observers are used simultaneously. The
        default value is 0.0 (lowest priority.) Note that when multiple
        interactor observer have the same priority, then the last
        observer added will process the event first. (Note: once the
        SetInteractor() method has been called, changing the priority
        does not effect event processing. You will have to
        SetInteractor(NULL), change priority, and then
        SetInteractor(iren) to have the priority take effect.)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


