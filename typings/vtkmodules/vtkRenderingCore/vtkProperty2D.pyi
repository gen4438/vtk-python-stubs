"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkProperty2D(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkProperty2D - represent surface properties of a 2D image
    
    Superclass: vtkObject
    
    vtkProperty2D contains properties used to render two dimensional
    images and annotations.
    
    @sa
    vtkActor2D
    """
    def DeepCopy(self, vtkProperty2D):
        """
        V.DeepCopy(vtkProperty2D)
        C++: void DeepCopy(vtkProperty2D *p)
        
        Assign one property to another.
        """
        ...
    
    def GetColor(self):
        """
        V.GetColor() -> (float, float, float)
        C++: virtual double *GetColor()
        
        Set/Get the RGB color of this property.
        """
        ...
    
    def GetDisplayLocation(self):
        """
        V.GetDisplayLocation() -> int
        C++: virtual int GetDisplayLocation()
        
        The DisplayLocation is either background or foreground. If it is
        background, then this 2D actor will be drawn behind all 3D props
        or foreground 2D actors. If it is background, then this 2D actor
        will be drawn in front of all 3D props and background 2D actors.
        Within 2D actors of the same DisplayLocation type, order is
        determined by the order in which the 2D actors were added to the
        viewport.
        """
        ...
    
    def GetDisplayLocationMaxValue(self):
        """
        V.GetDisplayLocationMaxValue() -> int
        C++: virtual int GetDisplayLocationMaxValue()
        
        The DisplayLocation is either background or foreground. If it is
        background, then this 2D actor will be drawn behind all 3D props
        or foreground 2D actors. If it is background, then this 2D actor
        will be drawn in front of all 3D props and background 2D actors.
        Within 2D actors of the same DisplayLocation type, order is
        determined by the order in which the 2D actors were added to the
        viewport.
        """
        ...
    
    def GetDisplayLocationMinValue(self):
        """
        V.GetDisplayLocationMinValue() -> int
        C++: virtual int GetDisplayLocationMinValue()
        
        The DisplayLocation is either background or foreground. If it is
        background, then this 2D actor will be drawn behind all 3D props
        or foreground 2D actors. If it is background, then this 2D actor
        will be drawn in front of all 3D props and background 2D actors.
        Within 2D actors of the same DisplayLocation type, order is
        determined by the order in which the 2D actors were added to the
        viewport.
        """
        ...
    
    def GetLineStipplePattern(self):
        """
        V.GetLineStipplePattern() -> int
        C++: virtual int GetLineStipplePattern()
        
        Set/Get the stippling pattern of a Line, as a 16-bit binary
        pattern (1 = pixel on, 0 = pixel off). This is only implemented
        for OpenGL, not OpenGL2. The default is 0xFFFF.
        """
        ...
    
    def GetLineStippleRepeatFactor(self):
        """
        V.GetLineStippleRepeatFactor() -> int
        C++: virtual int GetLineStippleRepeatFactor()
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def GetLineStippleRepeatFactorMaxValue(self):
        """
        V.GetLineStippleRepeatFactorMaxValue() -> int
        C++: virtual int GetLineStippleRepeatFactorMaxValue()
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def GetLineStippleRepeatFactorMinValue(self):
        """
        V.GetLineStippleRepeatFactorMinValue() -> int
        C++: virtual int GetLineStippleRepeatFactorMinValue()
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def GetLineWidth(self):
        """
        V.GetLineWidth() -> float
        C++: virtual float GetLineWidth()
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetLineWidthMaxValue(self):
        """
        V.GetLineWidthMaxValue() -> float
        C++: virtual float GetLineWidthMaxValue()
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetLineWidthMinValue(self):
        """
        V.GetLineWidthMinValue() -> float
        C++: virtual float GetLineWidthMinValue()
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOpacity(self):
        """
        V.GetOpacity() -> float
        C++: virtual double GetOpacity()
        
        Set/Get the Opacity of this property.
        """
        ...
    
    def GetPointSize(self):
        """
        V.GetPointSize() -> float
        C++: virtual float GetPointSize()
        
        Set/Get the diameter of a Point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetPointSizeMaxValue(self):
        """
        V.GetPointSizeMaxValue() -> float
        C++: virtual float GetPointSizeMaxValue()
        
        Set/Get the diameter of a Point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetPointSizeMinValue(self):
        """
        V.GetPointSizeMinValue() -> float
        C++: virtual float GetPointSizeMinValue()
        
        Set/Get the diameter of a Point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProperty2D
        C++: vtkProperty2D *NewInstance()
        """
        ...
    
    def Render(self, vtkViewport):
        """
        V.Render(vtkViewport)
        C++: virtual void Render(vtkViewport *viewport)
        
        Have the device specific subclass render this property.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProperty2D
        C++: static vtkProperty2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetColor(float, float, float)
        C++: virtual void SetColor(double _arg1, double _arg2,
            double _arg3)
        V.SetColor((float, float, float))
        C++: virtual void SetColor(const double _arg[3])
        
        Set/Get the RGB color of this property.
        """
        ...
    
    def SetDisplayLocation(self, p_int):
        """
        V.SetDisplayLocation(int)
        C++: virtual void SetDisplayLocation(int _arg)
        
        The DisplayLocation is either background or foreground. If it is
        background, then this 2D actor will be drawn behind all 3D props
        or foreground 2D actors. If it is background, then this 2D actor
        will be drawn in front of all 3D props and background 2D actors.
        Within 2D actors of the same DisplayLocation type, order is
        determined by the order in which the 2D actors were added to the
        viewport.
        """
        ...
    
    def SetDisplayLocationToBackground(self):
        """
        V.SetDisplayLocationToBackground()
        C++: void SetDisplayLocationToBackground()
        
        The DisplayLocation is either background or foreground. If it is
        background, then this 2D actor will be drawn behind all 3D props
        or foreground 2D actors. If it is background, then this 2D actor
        will be drawn in front of all 3D props and background 2D actors.
        Within 2D actors of the same DisplayLocation type, order is
        determined by the order in which the 2D actors were added to the
        viewport.
        """
        ...
    
    def SetDisplayLocationToForeground(self):
        """
        V.SetDisplayLocationToForeground()
        C++: void SetDisplayLocationToForeground()
        
        The DisplayLocation is either background or foreground. If it is
        background, then this 2D actor will be drawn behind all 3D props
        or foreground 2D actors. If it is background, then this 2D actor
        will be drawn in front of all 3D props and background 2D actors.
        Within 2D actors of the same DisplayLocation type, order is
        determined by the order in which the 2D actors were added to the
        viewport.
        """
        ...
    
    def SetLineStipplePattern(self, p_int):
        """
        V.SetLineStipplePattern(int)
        C++: virtual void SetLineStipplePattern(int _arg)
        
        Set/Get the stippling pattern of a Line, as a 16-bit binary
        pattern (1 = pixel on, 0 = pixel off). This is only implemented
        for OpenGL, not OpenGL2. The default is 0xFFFF.
        """
        ...
    
    def SetLineStippleRepeatFactor(self, p_int):
        """
        V.SetLineStippleRepeatFactor(int)
        C++: virtual void SetLineStippleRepeatFactor(int _arg)
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: virtual void SetLineWidth(float _arg)
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def SetOpacity(self, p_float):
        """
        V.SetOpacity(float)
        C++: virtual void SetOpacity(double _arg)
        
        Set/Get the Opacity of this property.
        """
        ...
    
    def SetPointSize(self, p_float):
        """
        V.SetPointSize(float)
        C++: virtual void SetPointSize(float _arg)
        
        Set/Get the diameter of a Point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


