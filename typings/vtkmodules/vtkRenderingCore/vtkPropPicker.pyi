"""
This type stub file was generated by pyright.
"""

from .vtkAbstractPropPicker import vtkAbstractPropPicker

class vtkPropPicker(vtkAbstractPropPicker):
    """
    vtkPropPicker - pick an actor/prop using graphics hardware
    
    Superclass: vtkAbstractPropPicker
    
    vtkPropPicker is used to pick an actor/prop given a selection point
    (in display coordinates) and a renderer. This class uses graphics
    hardware/rendering system to pick rapidly (as compared to using ray
    casting as does vtkCellPicker and vtkPointPicker). This class
    determines the actor/prop and pick position in world coordinates;
    point and cell ids are not determined.
    
    @sa
    vtkPicker vtkWorldPointPicker vtkCellPicker vtkPointPicker
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPropPicker
        C++: vtkPropPicker *NewInstance()
        """
        ...
    
    def Pick(self, p_float, p_float_1, p_float_2, vtkRenderer):
        """
        V.Pick(float, float, float, vtkRenderer) -> int
        C++: int Pick(double selectionX, double selectionY,
            double selectionZ, vtkRenderer *renderer) override;
        V.Pick([float, float, float], vtkRenderer) -> int
        C++: int Pick(double selectionPt[3], vtkRenderer *renderer)
        
        override superclasses' Pick() method.
        """
        ...
    
    def Pick3DPoint(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Pick3DPoint([float, float, float], vtkRenderer) -> int
        C++: int Pick3DPoint(double selectionPt[3], vtkRenderer *ren)
            override;
        
        Perform pick operation with selection point provided. The
        selectionPt is in world coordinates. Return non-zero if something
        was successfully picked.
        """
        ...
    
    def Pick3DRay(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Pick3DRay([float, float, float], [float, float, float, float],
            vtkRenderer) -> int
        C++: int Pick3DRay(double selectionPt[3], double orient[4],
            vtkRenderer *ren) override;
        
        Perform pick operation with selection point provided. The
        selectionPt is in world coordinates. Return non-zero if something
        was successfully picked.
        """
        ...
    
    def PickProp(self, p_float, p_float_1, vtkRenderer):
        """
        V.PickProp(float, float, vtkRenderer) -> int
        C++: int PickProp(double selectionX, double selectionY,
            vtkRenderer *renderer)
        V.PickProp(float, float, vtkRenderer, vtkPropCollection) -> int
        C++: int PickProp(double selectionX, double selectionY,
            vtkRenderer *renderer, vtkPropCollection *pickfrom)
        
        Perform the pick and set the PickedProp ivar. If something is
        picked, a 1 is returned, otherwise 0 is returned.  Use the
        GetViewProp() method to get the instance of vtkProp that was
        picked.  Props are picked from the renderers list of pickable
        Props.
        """
        ...
    
    def PickProp3DPoint(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.PickProp3DPoint([float, float, float], vtkRenderer) -> int
        C++: int PickProp3DPoint(double pos[3], vtkRenderer *renderer)
        V.PickProp3DPoint([float, float, float], vtkRenderer,
            vtkPropCollection) -> int
        C++: int PickProp3DPoint(double pos[3], vtkRenderer *renderer,
            vtkPropCollection *pickfrom)
        
        Perform the pick and set the PickedProp ivar. If something is
        picked, a 1 is returned, otherwise 0 is returned.  Use the
        GetViewProp() method to get the instance of vtkProp that was
        picked.  Props are picked from the renderers list of pickable
        Props.
        """
        ...
    
    def PickProp3DRay(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.PickProp3DRay([float, float, float], [float, float, float,
            float], vtkRenderer, vtkPropCollection) -> int
        C++: virtual int PickProp3DRay(double selectionPt[3],
            double eventWorldOrientation[4], vtkRenderer *renderer,
            vtkPropCollection *pickfrom)
        
        Perform a pick from the user-provided list of vtkProps.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPropPicker
        C++: static vtkPropPicker *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


