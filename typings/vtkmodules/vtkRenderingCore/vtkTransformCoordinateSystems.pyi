"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTransformCoordinateSystems(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkTransformCoordinateSystems - transform points into different
    coordinate systems
    
    Superclass: vtkPointSetAlgorithm
    
    This filter transforms points from one coordinate system to another.
    The user must specify the coordinate systems in which the input and
    output are specified. The user must also specify the VTK viewport
    (i.e., renderer) in which the transformation occurs.
    
    @sa
    vtkCoordinate vtkTransformFilter vtkTransformPolyData
    vtkPolyDataMapper2D
    """
    def GetInputCoordinateSystem(self):
        """
        V.GetInputCoordinateSystem() -> int
        C++: virtual int GetInputCoordinateSystem()
        
        Set/get the coordinate system in which the input is specified.
        The current options are World, Viewport, and Display. By default
        the input coordinate system is World.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the instance of vtkCoordinate.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def GetOutputCoordinateSystem(self):
        """
        V.GetOutputCoordinateSystem() -> int
        C++: virtual int GetOutputCoordinateSystem()
        
        Set/get the coordinate system to which to transform the output.
        The current options are World, Viewport, and Display. By default
        the output coordinate system is Display.
        """
        ...
    
    def GetViewport(self):
        """
        V.GetViewport() -> vtkViewport
        C++: virtual vtkViewport *GetViewport()
        
        In order for a successful coordinate transformation to occur, an
        instance of vtkViewport (e.g., a VTK renderer) must be specified.
        NOTE: this is a raw pointer, not a weak pointer nor a reference
        counted object, to avoid reference cycle loop between rendering
        classes and filter classes.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type information and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type information and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTransformCoordinateSystems
        C++: vtkTransformCoordinateSystems *NewInstance()
        
        Standard methods for type information and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTransformCoordinateSystems
        C++: static vtkTransformCoordinateSystems *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for type information and printing.
        """
        ...
    
    def SetInputCoordinateSystem(self, p_int):
        """
        V.SetInputCoordinateSystem(int)
        C++: virtual void SetInputCoordinateSystem(int _arg)
        
        Set/get the coordinate system in which the input is specified.
        The current options are World, Viewport, and Display. By default
        the input coordinate system is World.
        """
        ...
    
    def SetInputCoordinateSystemToDisplay(self):
        """
        V.SetInputCoordinateSystemToDisplay()
        C++: void SetInputCoordinateSystemToDisplay()
        
        Set/get the coordinate system in which the input is specified.
        The current options are World, Viewport, and Display. By default
        the input coordinate system is World.
        """
        ...
    
    def SetInputCoordinateSystemToViewport(self):
        """
        V.SetInputCoordinateSystemToViewport()
        C++: void SetInputCoordinateSystemToViewport()
        
        Set/get the coordinate system in which the input is specified.
        The current options are World, Viewport, and Display. By default
        the input coordinate system is World.
        """
        ...
    
    def SetInputCoordinateSystemToWorld(self):
        """
        V.SetInputCoordinateSystemToWorld()
        C++: void SetInputCoordinateSystemToWorld()
        
        Set/get the coordinate system in which the input is specified.
        The current options are World, Viewport, and Display. By default
        the input coordinate system is World.
        """
        ...
    
    def SetOutputCoordinateSystem(self, p_int):
        """
        V.SetOutputCoordinateSystem(int)
        C++: virtual void SetOutputCoordinateSystem(int _arg)
        
        Set/get the coordinate system to which to transform the output.
        The current options are World, Viewport, and Display. By default
        the output coordinate system is Display.
        """
        ...
    
    def SetOutputCoordinateSystemToDisplay(self):
        """
        V.SetOutputCoordinateSystemToDisplay()
        C++: void SetOutputCoordinateSystemToDisplay()
        
        Set/get the coordinate system to which to transform the output.
        The current options are World, Viewport, and Display. By default
        the output coordinate system is Display.
        """
        ...
    
    def SetOutputCoordinateSystemToViewport(self):
        """
        V.SetOutputCoordinateSystemToViewport()
        C++: void SetOutputCoordinateSystemToViewport()
        
        Set/get the coordinate system to which to transform the output.
        The current options are World, Viewport, and Display. By default
        the output coordinate system is Display.
        """
        ...
    
    def SetOutputCoordinateSystemToWorld(self):
        """
        V.SetOutputCoordinateSystemToWorld()
        C++: void SetOutputCoordinateSystemToWorld()
        
        Set/get the coordinate system to which to transform the output.
        The current options are World, Viewport, and Display. By default
        the output coordinate system is Display.
        """
        ...
    
    def SetViewport(self, vtkViewport):
        """
        V.SetViewport(vtkViewport)
        C++: void SetViewport(vtkViewport *viewport)
        
        In order for a successful coordinate transformation to occur, an
        instance of vtkViewport (e.g., a VTK renderer) must be specified.
        NOTE: this is a raw pointer, not a weak pointer nor a reference
        counted object, to avoid reference cycle loop between rendering
        classes and filter classes.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


