"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkCamera(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkCamera - a virtual camera for 3D rendering
    
    Superclass: vtkObject
    
    vtkCamera is a virtual camera for 3D rendering. It provides methods
    to position and orient the view point and focal point. Convenience
    methods for moving about the focal point also are provided. More
    complex methods allow the manipulation of the computer graphics model
    including view up vector, clipping planes, and camera perspective.
    @sa
    vtkPerspectiveTransform
    """
    def ApplyTransform(self, vtkTransform):
        """
        V.ApplyTransform(vtkTransform)
        C++: void ApplyTransform(vtkTransform *t)
        
        Apply a transform to the camera.  The camera position,
        focal-point, and view-up are re-calculated using the transform's
        matrix to multiply the old points by the new transform.
        """
        ...
    
    def Azimuth(self, p_float):
        """
        V.Azimuth(float)
        C++: void Azimuth(double angle)
        
        Rotate the camera about the view up vector centered at the focal
        point. Note that the view up vector is whatever was set via
        SetViewUp, and is not necessarily perpendicular to the direction
        of projection.  The result is a horizontal rotation of the
        camera.
        """
        ...
    
    def ComputeViewPlaneNormal(self):
        """
        V.ComputeViewPlaneNormal()
        C++: void ComputeViewPlaneNormal()
        
        This method is called automatically whenever necessary, it should
        never be used outside of vtkCamera.cxx.
        """
        ...
    
    def DeepCopy(self, vtkCamera):
        """
        V.DeepCopy(vtkCamera)
        C++: void DeepCopy(vtkCamera *source)
        
        Copy the properties of `source' into `this'. Copy the contents of
        the matrices.
        \pre source_exists!=0
        \pre not_this: source!=this
        """
        ...
    
    def Dolly(self, p_float):
        """
        V.Dolly(float)
        C++: void Dolly(double value)
        
        Divide the camera's distance from the focal point by the given
        dolly value.  Use a value greater than one to dolly-in toward the
        focal point, and use a value less than one to dolly-out away from
        the focal point.
        """
        ...
    
    def Elevation(self, p_float):
        """
        V.Elevation(float)
        C++: void Elevation(double angle)
        
        Rotate the camera about the cross product of the negative of the
        direction of projection and the view up vector, using the focal
        point as the center of rotation.  The result is a vertical
        rotation of the scene.
        """
        ...
    
    def GetCameraLightTransformMatrix(self):
        """
        V.GetCameraLightTransformMatrix() -> vtkMatrix4x4
        C++: vtkMatrix4x4 *GetCameraLightTransformMatrix()
        
        Returns a transformation matrix for a coordinate frame attached
        to the camera, where the camera is located at (0, 0, 1) looking
        at the focal point at (0, 0, 0), with up being (0, 1, 0).
        """
        ...
    
    def GetClippingRange(self):
        """
        V.GetClippingRange() -> (float, float)
        C++: virtual double *GetClippingRange()
        
        Set/Get the location of the near and far clipping planes along
        the direction of projection.  Both of these values must be
        positive. How the clipping planes are set can have a large impact
        on how well z-buffering works.  In particular the front clipping
        plane can make a very big difference. Setting it to 0.01 when it
        really could be 1.0 can have a big impact on your z-buffer
        resolution farther away.  The default clipping range is
        (0.1,1000). Clipping distance is measured in world coordinate
        unless a scale factor exists in camera's ModelTransformMatrix.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetCompositeProjectionTransformMatrix(self, p_float, p_float_1, p_float_2):
        """
        V.GetCompositeProjectionTransformMatrix(float, float, float)
            -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetCompositeProjectionTransformMatrix(
            double aspect, double nearz, double farz)
        
        Return the concatenation of the ViewTransform and the
        ProjectionTransform. This transform will convert world
        coordinates to viewport coordinates. The 'aspect' is the
        width/height for the viewport, and the nearz and farz are the
        Z-buffer values that map to the near and far clipping planes. The
        viewport coordinates of a point located inside the frustum are in
        the range ([-1,+1],[-1,+1],[nearz,farz]).
        @sa ExplicitProjectionTransformMatrix
        """
        ...
    
    def GetDirectionOfProjection(self):
        """
        V.GetDirectionOfProjection() -> (float, float, float)
        C++: virtual double *GetDirectionOfProjection()
        
        Get the vector in the direction from the camera position to the
        focal point.  This is usually the opposite of the
        ViewPlaneNormal, the vector perpendicular to the screen, unless
        the view is oblique.
        """
        ...
    
    def GetDistance(self):
        """
        V.GetDistance() -> float
        C++: virtual double GetDistance()
        
        Return the distance from the camera position to the focal point.
        This distance is positive.
        """
        ...
    
    def GetExplicitProjectionTransformMatrix(self):
        """
        V.GetExplicitProjectionTransformMatrix() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetExplicitProjectionTransformMatrix()
        """
        ...
    
    def GetEyeAngle(self):
        """
        V.GetEyeAngle() -> float
        C++: virtual double GetEyeAngle()
        
        Set/Get the separation between eyes (in degrees). This is used
        when generating stereo images.
        """
        ...
    
    def GetEyePlaneNormal(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetEyePlaneNormal([float, float, float])
        C++: void GetEyePlaneNormal(double normal[3])
        
        Get normal vector from eye to screen rotated by
        EyeTransformMatrix. This will be used only for offaxis frustum
        calculation.
        """
        ...
    
    def GetEyePosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.GetEyePosition([float, float, float])
        C++: void GetEyePosition(double eyePosition[3])
        
        Set/Get the eye position (center point between two eyes). This is
        a convenience function that sets the translation component of
        EyeTransformMatrix. This will be used only for offaxis frustum
        calculation.
        """
        ...
    
    def GetEyeSeparation(self):
        """
        V.GetEyeSeparation() -> float
        C++: virtual double GetEyeSeparation()
        
        Set/Get distance between the eyes. This will be used only for
        offaxis frustum calculation. Default is 0.06.
        """
        ...
    
    def GetEyeTransformMatrix(self):
        """
        V.GetEyeTransformMatrix() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetEyeTransformMatrix()
        
        Set/Get eye transformation matrix. This is the transformation
        matrix for the point between eyes. This will be used only for
        offaxis frustum calculation. Default is identity.
        """
        ...
    
    def GetFocalDisk(self):
        """
        V.GetFocalDisk() -> float
        C++: virtual double GetFocalDisk()
        
        Set the size of the cameras lens in world coordinates. This is
        only used when the renderer is doing focal depth rendering. When
        that is being done the size of the focal disk will effect how
        significant the depth effects will be.
        """
        ...
    
    def GetFocalDistance(self):
        """
        V.GetFocalDistance() -> float
        C++: virtual double GetFocalDistance()
        
        Sets the distance at which rendering is in focus. This is
        currently only used by the ray tracing renderers. 0 (default)
        disables ray traced depth of field. Not to be confused with
        FocalPoint that is the camera target and is centered on screen.
        Using a separate focal distance property enables out-of-focus
        areas anywhere on screen.
        """
        ...
    
    def GetFocalPoint(self):
        """
        V.GetFocalPoint() -> (float, float, float)
        C++: virtual double *GetFocalPoint()
        
        Set/Get the focal of the camera in world coordinates. The default
        focal point is the origin.
        """
        ...
    
    def GetFreezeFocalPoint(self):
        """
        V.GetFreezeFocalPoint() -> bool
        C++: virtual bool GetFreezeFocalPoint()
        
        Set/Get the value of the FreezeDolly instance variable. This
        determines if the camera should move the focal point with the
        camera position. HACK!!!
        """
        ...
    
    def GetFrustumPlanes(self, p_float, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetFrustumPlanes(float, [float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float])
        C++: virtual void GetFrustumPlanes(double aspect,
            double planes[24])
        
        Get the plane equations that bound the view frustum. The plane
        normals point inward. The planes array contains six plane
        equations of the form (Ax+By+Cz+D=0), the first four values are
        (A,B,C,D) which repeats for each of the planes. The planes are
        given in the following order: -x,+x,-y,+y,-z,+z. Warning: it
        means left,right,bottom,top,far,near (NOT near,far) The aspect of
        the viewport is needed to correctly compute the planes
        """
        ...
    
    def GetInformation(self):
        """
        V.GetInformation() -> vtkInformation
        C++: virtual vtkInformation *GetInformation()
        
        Set/Get the information object associated with this camera.
        """
        ...
    
    def GetLeftEye(self):
        """
        V.GetLeftEye() -> int
        C++: virtual int GetLeftEye()
        
        Set the Left Eye setting
        """
        ...
    
    def GetModelTransformMatrix(self):
        """
        V.GetModelTransformMatrix() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetModelTransformMatrix()
        
        Set/Get model transformation matrix. This matrix could be used
        for model related transformations such as scale, shear, rotations
        and translations.
        """
        ...
    
    def GetModelViewTransformMatrix(self):
        """
        V.GetModelViewTransformMatrix() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetModelViewTransformMatrix()
        
        Return the model view matrix of model view transform.
        """
        ...
    
    def GetModelViewTransformObject(self):
        """
        V.GetModelViewTransformObject() -> vtkTransform
        C++: virtual vtkTransform *GetModelViewTransformObject()
        
        Return the model view transform.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> (float, float, float)
        C++: double *GetOrientation()
        
        Get the orientation of the camera.
        """
        ...
    
    def GetOrientationWXYZ(self):
        """
        V.GetOrientationWXYZ() -> (float, float, float, float)
        C++: double *GetOrientationWXYZ()
        
        Get the orientation of the camera.
        """
        ...
    
    def GetParallelProjection(self):
        """
        V.GetParallelProjection() -> int
        C++: virtual vtkTypeBool GetParallelProjection()
        
        Set/Get the value of the ParallelProjection instance variable.
        This determines if the camera should do a perspective or parallel
        projection.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetParallelScale(self):
        """
        V.GetParallelScale() -> float
        C++: virtual double GetParallelScale()
        
        Set/Get the scaling used for a parallel projection, i.e. the
        height of the viewport in world-coordinate distances. The default
        is 1. Note that the "scale" parameter works as an "inverse scale"
        --- larger numbers produce smaller images. This method has no
        effect in perspective projection mode.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float, float)
        C++: virtual double *GetPosition()
        
        Set/Get the position of the camera in world coordinates. The
        default position is (0,0,1).
        """
        ...
    
    def GetProjectionTransformMatrix(self, p_float, p_float_1, p_float_2):
        """
        V.GetProjectionTransformMatrix(float, float, float)
            -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetProjectionTransformMatrix(
            double aspect, double nearz, double farz)
        V.GetProjectionTransformMatrix(vtkRenderer) -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetProjectionTransformMatrix(
            vtkRenderer *ren)
        
        Return the projection transform matrix, which converts from
        camera coordinates to viewport coordinates.  The 'aspect' is the
        width/height for the viewport, and the nearz and farz are the
        Z-buffer values that map to the near and far clipping planes. The
        viewport coordinates of a point located inside the frustum are in
        the range ([-1,+1],[-1,+1],[nearz,farz]).
        @sa ExplicitProjectionTransformMatrix
        """
        ...
    
    def GetProjectionTransformObject(self, p_float, p_float_1, p_float_2):
        """
        V.GetProjectionTransformObject(float, float, float)
            -> vtkPerspectiveTransform
        C++: virtual vtkPerspectiveTransform *GetProjectionTransformObject(
            double aspect, double nearz, double farz)
        
        Return the projection transform matrix, which converts from
        camera coordinates to viewport coordinates. The 'aspect' is the
        width/height for the viewport, and the nearz and farz are the
        Z-buffer values that map to the near and far clipping planes. The
        viewport coordinates of a point located inside the frustum are in
        the range ([-1,+1],[-1,+1],[nearz,farz]).
        @sa ExplicitProjectionTransformMatrix
        """
        ...
    
    def GetRoll(self):
        """
        V.GetRoll() -> float
        C++: double GetRoll()
        
        Set the roll angle of the camera about the direction of
        projection.
        """
        ...
    
    def GetScissorRect(self, vtkRecti):
        """
        V.GetScissorRect(vtkRecti)
        C++: void GetScissorRect(vtkRecti &scissorRect)
        
        Set/Get the vtkRect value of the scissor
        """
        ...
    
    def GetScreenBottomLeft(self):
        """
        V.GetScreenBottomLeft() -> (float, float, float)
        C++: virtual double *GetScreenBottomLeft()
        
        Set/Get top left corner point of the screen. This will be used
        only for offaxis frustum calculation. Default is (-1.0, -1.0,
        -1.0).
        """
        ...
    
    def GetScreenBottomRight(self):
        """
        V.GetScreenBottomRight() -> (float, float, float)
        C++: virtual double *GetScreenBottomRight()
        
        Set/Get bottom left corner point of the screen. This will be used
        only for offaxis frustum calculation. Default is (1.0, -1.0,
        -1.0).
        """
        ...
    
    def GetScreenTopRight(self):
        """
        V.GetScreenTopRight() -> (float, float, float)
        C++: virtual double *GetScreenTopRight()
        
        Set/Get top right corner point of the screen. This will be used
        only for offaxis frustum calculation. Default is (1.0, 1.0,
        -1.0).
        """
        ...
    
    def GetThickness(self):
        """
        V.GetThickness() -> float
        C++: virtual double GetThickness()
        
        Set the distance between clipping planes.  This method adjusts
        the far clipping plane to be set a distance 'thickness' beyond
        the near clipping plane.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetUseExplicitProjectionTransformMatrix(self):
        """
        V.GetUseExplicitProjectionTransformMatrix() -> bool
        C++: virtual bool GetUseExplicitProjectionTransformMatrix()
        """
        ...
    
    def GetUseHorizontalViewAngle(self):
        """
        V.GetUseHorizontalViewAngle() -> int
        C++: virtual vtkTypeBool GetUseHorizontalViewAngle()
        
        Set/Get the value of the UseHorizontalViewAngle instance
        variable. If set, the camera's view angle represents a horizontal
        view angle, rather than the default vertical view angle. This is
        useful if the application uses a display device which whose specs
        indicate a particular horizontal view angle, or if the
        application varies the window height but wants to keep the
        perspective transform unchanges.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetUseOffAxisProjection(self):
        """
        V.GetUseOffAxisProjection() -> int
        C++: virtual vtkTypeBool GetUseOffAxisProjection()
        
        Set/Get use offaxis frustum. OffAxis frustum is used for off-axis
        frustum calculations specifically for stereo rendering. For
        reference see "High Resolution Virtual Reality", in Proc.
        SIGGRAPH '92, Computer Graphics, pages 195-202, 1992.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetUserTransform(self):
        """
        V.GetUserTransform() -> vtkHomogeneousTransform
        C++: virtual vtkHomogeneousTransform *GetUserTransform()
        
        In addition to the instance variables such as position and
        orientation, you can add an additional transformation for your
        own use. This transformation is concatenated to the camera's
        ProjectionTransform
        """
        ...
    
    def GetUserViewTransform(self):
        """
        V.GetUserViewTransform() -> vtkHomogeneousTransform
        C++: virtual vtkHomogeneousTransform *GetUserViewTransform()
        
        In addition to the instance variables such as position and
        orientation, you can add an additional transformation for your
        own use.  This transformation is concatenated to the camera's
        ViewTransform
        """
        ...
    
    def GetUseScissor(self):
        """
        V.GetUseScissor() -> bool
        C++: virtual bool GetUseScissor()
        
        Enable/Disable the scissor
        """
        ...
    
    def GetViewAngle(self):
        """
        V.GetViewAngle() -> float
        C++: virtual double GetViewAngle()
        
        Set/Get the camera view angle, which is the angular height of the
        camera view measured in degrees.  The default angle is 30
        degrees. This method has no effect in parallel projection mode.
        The formula for setting the angle up for perfect perspective
        viewing is: angle = 2*atan((h/2)/d) where h is the height of the
        RenderWindow (measured by holding a ruler up to your screen) and
        d is the distance from your eyes to the screen.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetViewingRaysMTime(self):
        """
        V.GetViewingRaysMTime() -> int
        C++: vtkMTimeType GetViewingRaysMTime()
        
        Return the MTime that concerns recomputing the view rays of the
        camera.
        """
        ...
    
    def GetViewPlaneNormal(self):
        """
        V.GetViewPlaneNormal() -> (float, float, float)
        C++: virtual double *GetViewPlaneNormal()
        
        Get the ViewPlaneNormal.  This vector will point opposite to the
        direction of projection, unless you have created a sheared output
        view using SetViewShear/SetObliqueAngles.
        """
        ...
    
    def GetViewShear(self):
        """
        V.GetViewShear() -> (float, float, float)
        C++: virtual double *GetViewShear()
        
        Set/get the shear transform of the viewing frustum.  Parameters
        are dx/dz, dy/dz, and center.  center is a factor that describes
        where to shear around. The distance dshear from the camera where
        no shear occurs is given by (dshear = center * FocalDistance).
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def GetViewTransformMatrix(self):
        """
        V.GetViewTransformMatrix() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetViewTransformMatrix()
        
        For backward compatibility. Use GetModelViewTransformMatrix()
        now. Return the matrix of the view transform. The ViewTransform
        depends on only three ivars:  the Position, the FocalPoint, and
        the ViewUp vector.  All the other methods are there simply for
        the sake of the users' convenience.
        """
        ...
    
    def GetViewTransformObject(self):
        """
        V.GetViewTransformObject() -> vtkTransform
        C++: virtual vtkTransform *GetViewTransformObject()
        
        For backward compatibility. Use GetModelViewTransformObject()
        now. Return the view transform. If the camera's
        ModelTransformMatrix is identity then the ViewTransform depends
        on only three ivars: the Position, the FocalPoint, and the ViewUp
        vector. All the other methods are there simply for the sake of
        the users' convenience.
        """
        ...
    
    def GetViewUp(self):
        """
        V.GetViewUp() -> (float, float, float)
        C++: virtual double *GetViewUp()
        
        Set/Get the view up direction for the camera.  The default is
        (0,1,0).
        """
        ...
    
    def GetWindowCenter(self):
        """
        V.GetWindowCenter() -> (float, float)
        C++: virtual double *GetWindowCenter()
        
        Set/Get the center of the window in viewport coordinates. The
        viewport coordinate range is ([-1,+1],[-1,+1]).  This method is
        for if you have one window which consists of several viewports,
        or if you have several screens which you want to act together as
        one large screen.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCamera
        C++: vtkCamera *NewInstance()
        """
        ...
    
    def OrthogonalizeViewUp(self):
        """
        V.OrthogonalizeViewUp()
        C++: void OrthogonalizeViewUp()
        
        Recompute the ViewUp vector to force it to be perpendicular to
        camera->focalpoint vector.  Unless you are going to use Yaw or
        Azimuth on the camera, there is no need to do this.
        """
        ...
    
    def ParallelProjectionOff(self):
        """
        V.ParallelProjectionOff()
        C++: virtual void ParallelProjectionOff()
        
        Set/Get the value of the ParallelProjection instance variable.
        This determines if the camera should do a perspective or parallel
        projection.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def ParallelProjectionOn(self):
        """
        V.ParallelProjectionOn()
        C++: virtual void ParallelProjectionOn()
        
        Set/Get the value of the ParallelProjection instance variable.
        This determines if the camera should do a perspective or parallel
        projection.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def Pitch(self, p_float):
        """
        V.Pitch(float)
        C++: void Pitch(double angle)
        
        Rotate the focal point about the cross product of the view up
        vector and the direction of projection, using the camera's
        position as the center of rotation.  The result is a vertical
        rotation of the camera.
        """
        ...
    
    def Render(self, vtkRenderer):
        """
        V.Render(vtkRenderer)
        C++: virtual void Render(vtkRenderer *)
        
        This method causes the camera to set up whatever is required for
        viewing the scene. This is actually handled by an subclass of
        vtkCamera, which is created through New()
        """
        ...
    
    def Roll(self, p_float):
        """
        V.Roll(float)
        C++: void Roll(double angle)
        
        Rotate the camera about the direction of projection.  This will
        spin the camera about its axis.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCamera
        C++: static vtkCamera *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClippingRange(self, p_float, p_float_1):
        """
        V.SetClippingRange(float, float)
        C++: void SetClippingRange(double dNear, double dFar)
        V.SetClippingRange((float, float))
        C++: void SetClippingRange(const double a[2])
        
        Set/Get the location of the near and far clipping planes along
        the direction of projection.  Both of these values must be
        positive. How the clipping planes are set can have a large impact
        on how well z-buffering works.  In particular the front clipping
        plane can make a very big difference. Setting it to 0.01 when it
        really could be 1.0 can have a big impact on your z-buffer
        resolution farther away.  The default clipping range is
        (0.1,1000). Clipping distance is measured in world coordinate
        unless a scale factor exists in camera's ModelTransformMatrix.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetDistance(self, p_float):
        """
        V.SetDistance(float)
        C++: void SetDistance(double)
        
        Move the focal point so that it is the specified distance from
        the camera position.  This distance must be positive.
        """
        ...
    
    def SetExplicitProjectionTransformMatrix(self, vtkMatrix4x4):
        """
        V.SetExplicitProjectionTransformMatrix(vtkMatrix4x4)
        C++: virtual void SetExplicitProjectionTransformMatrix(
            vtkMatrix4x4 *)
        """
        ...
    
    def SetEyeAngle(self, p_float):
        """
        V.SetEyeAngle(float)
        C++: virtual void SetEyeAngle(double _arg)
        
        Set/Get the separation between eyes (in degrees). This is used
        when generating stereo images.
        """
        ...
    
    def SetEyePosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetEyePosition([float, float, float])
        C++: void SetEyePosition(double eyePosition[3])
        
        Set/Get the eye position (center point between two eyes). This is
        a convenience function that sets the translation component of
        EyeTransformMatrix. This will be used only for offaxis frustum
        calculation.
        """
        ...
    
    def SetEyeSeparation(self, p_float):
        """
        V.SetEyeSeparation(float)
        C++: virtual void SetEyeSeparation(double _arg)
        
        Set/Get distance between the eyes. This will be used only for
        offaxis frustum calculation. Default is 0.06.
        """
        ...
    
    def SetEyeTransformMatrix(self, vtkMatrix4x4):
        """
        V.SetEyeTransformMatrix(vtkMatrix4x4)
        C++: void SetEyeTransformMatrix(vtkMatrix4x4 *matrix)
        V.SetEyeTransformMatrix((float, float, float, float, float, float,
             float, float, float, float, float, float, float, float,
            float, float))
        C++: void SetEyeTransformMatrix(const double elements[16])
        
        Set/Get eye transformation matrix. This is the transformation
        matrix for the point between eyes. This will be used only for
        offaxis frustum calculation. Default is identity.
        """
        ...
    
    def SetFocalDisk(self, p_float):
        """
        V.SetFocalDisk(float)
        C++: virtual void SetFocalDisk(double _arg)
        
        Set the size of the cameras lens in world coordinates. This is
        only used when the renderer is doing focal depth rendering. When
        that is being done the size of the focal disk will effect how
        significant the depth effects will be.
        """
        ...
    
    def SetFocalDistance(self, p_float):
        """
        V.SetFocalDistance(float)
        C++: virtual void SetFocalDistance(double _arg)
        
        Sets the distance at which rendering is in focus. This is
        currently only used by the ray tracing renderers. 0 (default)
        disables ray traced depth of field. Not to be confused with
        FocalPoint that is the camera target and is centered on screen.
        Using a separate focal distance property enables out-of-focus
        areas anywhere on screen.
        """
        ...
    
    def SetFocalPoint(self, p_float, p_float_1, p_float_2):
        """
        V.SetFocalPoint(float, float, float)
        C++: void SetFocalPoint(double x, double y, double z)
        V.SetFocalPoint((float, float, float))
        C++: void SetFocalPoint(const double a[3])
        
        Set/Get the focal of the camera in world coordinates. The default
        focal point is the origin.
        """
        ...
    
    def SetFreezeFocalPoint(self, bool):
        """
        V.SetFreezeFocalPoint(bool)
        C++: virtual void SetFreezeFocalPoint(bool _arg)
        
        Set/Get the value of the FreezeDolly instance variable. This
        determines if the camera should move the focal point with the
        camera position. HACK!!!
        """
        ...
    
    def SetInformation(self, vtkInformation):
        """
        V.SetInformation(vtkInformation)
        C++: virtual void SetInformation(vtkInformation *)
        
        Set/Get the information object associated with this camera.
        """
        ...
    
    def SetLeftEye(self, p_int):
        """
        V.SetLeftEye(int)
        C++: virtual void SetLeftEye(int _arg)
        
        Set the Left Eye setting
        """
        ...
    
    def SetModelTransformMatrix(self, vtkMatrix4x4):
        """
        V.SetModelTransformMatrix(vtkMatrix4x4)
        C++: void SetModelTransformMatrix(vtkMatrix4x4 *matrix)
        V.SetModelTransformMatrix((float, float, float, float, float,
            float, float, float, float, float, float, float, float, float,
             float, float))
        C++: void SetModelTransformMatrix(const double elements[16])
        
        Set/Get model transformation matrix. This matrix could be used
        for model related transformations such as scale, shear, rotations
        and translations.
        """
        ...
    
    def SetObliqueAngles(self, p_float, p_float_1):
        """
        V.SetObliqueAngles(float, float)
        C++: void SetObliqueAngles(double alpha, double beta)
        
        Get/Set the oblique viewing angles.  The first angle, alpha, is
        the angle (measured from the horizontal) that rays along the
        direction of projection will follow once projected onto the 2D
        screen. The second angle, beta, is the angle between the view
        plane and the direction of projection.  This creates a shear
        transform x' = x + dz*cos(alpha)/tan(beta), y' =
        dz*sin(alpha)/tan(beta) where dz is the distance of the point
        from the focal plane. The angles are (45,90) by default.  Oblique
        projections commonly use (30,63.435).
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetParallelProjection(self, p_int):
        """
        V.SetParallelProjection(int)
        C++: void SetParallelProjection(vtkTypeBool flag)
        
        Set/Get the value of the ParallelProjection instance variable.
        This determines if the camera should do a perspective or parallel
        projection.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetParallelScale(self, p_float):
        """
        V.SetParallelScale(float)
        C++: void SetParallelScale(double scale)
        
        Set/Get the scaling used for a parallel projection, i.e. the
        height of the viewport in world-coordinate distances. The default
        is 1. Note that the "scale" parameter works as an "inverse scale"
        --- larger numbers produce smaller images. This method has no
        effect in perspective projection mode.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetPosition(float, float, float)
        C++: void SetPosition(double x, double y, double z)
        V.SetPosition((float, float, float))
        C++: void SetPosition(const double a[3])
        
        Set/Get the position of the camera in world coordinates. The
        default position is (0,0,1).
        """
        ...
    
    def SetRoll(self, p_float):
        """
        V.SetRoll(float)
        C++: void SetRoll(double angle)
        
        Set the roll angle of the camera about the direction of
        projection.
        """
        ...
    
    def SetScissorRect(self, vtkRecti):
        """
        V.SetScissorRect(vtkRecti)
        C++: void SetScissorRect(vtkRecti scissorRect)
        
        Set/Get the vtkRect value of the scissor
        """
        ...
    
    def SetScreenBottomLeft(self, p_float, p_float_1, p_float_2):
        """
        V.SetScreenBottomLeft(float, float, float)
        C++: virtual void SetScreenBottomLeft(double _arg1, double _arg2,
            double _arg3)
        V.SetScreenBottomLeft((float, float, float))
        C++: virtual void SetScreenBottomLeft(const double _arg[3])
        
        Set/Get top left corner point of the screen. This will be used
        only for offaxis frustum calculation. Default is (-1.0, -1.0,
        -1.0).
        """
        ...
    
    def SetScreenBottomRight(self, p_float, p_float_1, p_float_2):
        """
        V.SetScreenBottomRight(float, float, float)
        C++: virtual void SetScreenBottomRight(double _arg1, double _arg2,
             double _arg3)
        V.SetScreenBottomRight((float, float, float))
        C++: virtual void SetScreenBottomRight(const double _arg[3])
        
        Set/Get bottom left corner point of the screen. This will be used
        only for offaxis frustum calculation. Default is (1.0, -1.0,
        -1.0).
        """
        ...
    
    def SetScreenTopRight(self, p_float, p_float_1, p_float_2):
        """
        V.SetScreenTopRight(float, float, float)
        C++: virtual void SetScreenTopRight(double _arg1, double _arg2,
            double _arg3)
        V.SetScreenTopRight((float, float, float))
        C++: virtual void SetScreenTopRight(const double _arg[3])
        
        Set/Get top right corner point of the screen. This will be used
        only for offaxis frustum calculation. Default is (1.0, 1.0,
        -1.0).
        """
        ...
    
    def SetThickness(self, p_float):
        """
        V.SetThickness(float)
        C++: void SetThickness(double)
        
        Set the distance between clipping planes.  This method adjusts
        the far clipping plane to be set a distance 'thickness' beyond
        the near clipping plane.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetUseExplicitProjectionTransformMatrix(self, bool):
        """
        V.SetUseExplicitProjectionTransformMatrix(bool)
        C++: virtual void SetUseExplicitProjectionTransformMatrix(
            bool _arg)
        """
        ...
    
    def SetUseHorizontalViewAngle(self, p_int):
        """
        V.SetUseHorizontalViewAngle(int)
        C++: void SetUseHorizontalViewAngle(vtkTypeBool flag)
        
        Set/Get the value of the UseHorizontalViewAngle instance
        variable. If set, the camera's view angle represents a horizontal
        view angle, rather than the default vertical view angle. This is
        useful if the application uses a display device which whose specs
        indicate a particular horizontal view angle, or if the
        application varies the window height but wants to keep the
        perspective transform unchanges.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetUseOffAxisProjection(self, p_int):
        """
        V.SetUseOffAxisProjection(int)
        C++: virtual void SetUseOffAxisProjection(vtkTypeBool _arg)
        
        Set/Get use offaxis frustum. OffAxis frustum is used for off-axis
        frustum calculations specifically for stereo rendering. For
        reference see "High Resolution Virtual Reality", in Proc.
        SIGGRAPH '92, Computer Graphics, pages 195-202, 1992.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetUserTransform(self, vtkHomogeneousTransform):
        """
        V.SetUserTransform(vtkHomogeneousTransform)
        C++: void SetUserTransform(vtkHomogeneousTransform *transform)
        
        In addition to the instance variables such as position and
        orientation, you can add an additional transformation for your
        own use. This transformation is concatenated to the camera's
        ProjectionTransform
        """
        ...
    
    def SetUserViewTransform(self, vtkHomogeneousTransform):
        """
        V.SetUserViewTransform(vtkHomogeneousTransform)
        C++: void SetUserViewTransform(vtkHomogeneousTransform *transform)
        
        In addition to the instance variables such as position and
        orientation, you can add an additional transformation for your
        own use.  This transformation is concatenated to the camera's
        ViewTransform
        """
        ...
    
    def SetUseScissor(self, bool):
        """
        V.SetUseScissor(bool)
        C++: virtual void SetUseScissor(bool _arg)
        
        Enable/Disable the scissor
        """
        ...
    
    def SetViewAngle(self, p_float):
        """
        V.SetViewAngle(float)
        C++: void SetViewAngle(double angle)
        
        Set/Get the camera view angle, which is the angular height of the
        camera view measured in degrees.  The default angle is 30
        degrees. This method has no effect in parallel projection mode.
        The formula for setting the angle up for perfect perspective
        viewing is: angle = 2*atan((h/2)/d) where h is the height of the
        RenderWindow (measured by holding a ruler up to your screen) and
        d is the distance from your eyes to the screen.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetViewShear(self, p_float, p_float_1, p_float_2):
        """
        V.SetViewShear(float, float, float)
        C++: void SetViewShear(double dxdz, double dydz, double center)
        V.SetViewShear([float, float, float])
        C++: void SetViewShear(double d[3])
        
        Set/get the shear transform of the viewing frustum.  Parameters
        are dx/dz, dy/dz, and center.  center is a factor that describes
        where to shear around. The distance dshear from the camera where
        no shear occurs is given by (dshear = center * FocalDistance).
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def SetViewUp(self, p_float, p_float_1, p_float_2):
        """
        V.SetViewUp(float, float, float)
        C++: void SetViewUp(double vx, double vy, double vz)
        V.SetViewUp((float, float, float))
        C++: void SetViewUp(const double a[3])
        
        Set/Get the view up direction for the camera.  The default is
        (0,1,0).
        """
        ...
    
    def SetWindowCenter(self, p_float, p_float_1):
        """
        V.SetWindowCenter(float, float)
        C++: void SetWindowCenter(double x, double y)
        
        Set/Get the center of the window in viewport coordinates. The
        viewport coordinate range is ([-1,+1],[-1,+1]).  This method is
        for if you have one window which consists of several viewports,
        or if you have several screens which you want to act together as
        one large screen.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def ShallowCopy(self, vtkCamera):
        """
        V.ShallowCopy(vtkCamera)
        C++: void ShallowCopy(vtkCamera *source)
        
        Copy the properties of `source' into `this'. Copy pointers of
        matrices.
        \pre source_exists!=0
        \pre not_this: source!=this
        """
        ...
    
    def UpdateViewport(self, vtkRenderer):
        """
        V.UpdateViewport(vtkRenderer)
        C++: virtual void UpdateViewport(vtkRenderer *ren)
        
        Update the viewport
        """
        ...
    
    def UseExplicitProjectionTransformMatrixOff(self):
        """
        V.UseExplicitProjectionTransformMatrixOff()
        C++: virtual void UseExplicitProjectionTransformMatrixOff()
        """
        ...
    
    def UseExplicitProjectionTransformMatrixOn(self):
        """
        V.UseExplicitProjectionTransformMatrixOn()
        C++: virtual void UseExplicitProjectionTransformMatrixOn()
        """
        ...
    
    def UseHorizontalViewAngleOff(self):
        """
        V.UseHorizontalViewAngleOff()
        C++: virtual void UseHorizontalViewAngleOff()
        
        Set/Get the value of the UseHorizontalViewAngle instance
        variable. If set, the camera's view angle represents a horizontal
        view angle, rather than the default vertical view angle. This is
        useful if the application uses a display device which whose specs
        indicate a particular horizontal view angle, or if the
        application varies the window height but wants to keep the
        perspective transform unchanges.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def UseHorizontalViewAngleOn(self):
        """
        V.UseHorizontalViewAngleOn()
        C++: virtual void UseHorizontalViewAngleOn()
        
        Set/Get the value of the UseHorizontalViewAngle instance
        variable. If set, the camera's view angle represents a horizontal
        view angle, rather than the default vertical view angle. This is
        useful if the application uses a display device which whose specs
        indicate a particular horizontal view angle, or if the
        application varies the window height but wants to keep the
        perspective transform unchanges.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def UseOffAxisProjectionOff(self):
        """
        V.UseOffAxisProjectionOff()
        C++: virtual void UseOffAxisProjectionOff()
        
        Set/Get use offaxis frustum. OffAxis frustum is used for off-axis
        frustum calculations specifically for stereo rendering. For
        reference see "High Resolution Virtual Reality", in Proc.
        SIGGRAPH '92, Computer Graphics, pages 195-202, 1992.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def UseOffAxisProjectionOn(self):
        """
        V.UseOffAxisProjectionOn()
        C++: virtual void UseOffAxisProjectionOn()
        
        Set/Get use offaxis frustum. OffAxis frustum is used for off-axis
        frustum calculations specifically for stereo rendering. For
        reference see "High Resolution Virtual Reality", in Proc.
        SIGGRAPH '92, Computer Graphics, pages 195-202, 1992.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def ViewingRaysModified(self):
        """
        V.ViewingRaysModified()
        C++: void ViewingRaysModified()
        
        Mark that something has changed which requires the view rays to
        be recomputed.
        """
        ...
    
    def Yaw(self, p_float):
        """
        V.Yaw(float)
        C++: void Yaw(double angle)
        
        Rotate the focal point about the view up vector, using the
        camera's position as the center of rotation. Note that the view
        up vector is whatever was set via SetViewUp, and is not
        necessarily perpendicular to the direction of projection.  The
        result is a horizontal rotation of the scene.
        """
        ...
    
    def Zoom(self, p_float):
        """
        V.Zoom(float)
        C++: void Zoom(double factor)
        
        In perspective mode, decrease the view angle by the specified
        factor. In parallel mode, decrease the parallel scale by the
        specified factor. A value greater than 1 is a zoom-in, a value
        less than 1 is a zoom-out.
        
        ote This setting is ignored when
        UseExplicitProjectionTransformMatrix is true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


