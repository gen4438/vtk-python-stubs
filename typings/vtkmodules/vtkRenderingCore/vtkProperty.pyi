"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkProperty(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkProperty - represent surface properties of a geometric object
    
    Superclass: vtkObject
    
    vtkProperty is an object that represents lighting and other surface
    properties of a geometric object. The primary properties that can be
    set are colors (overall, ambient, diffuse, specular, and edge color);
    specular power; opacity of the object; the representation of the
    object (points, wireframe, or surface); and the shading method to be
    used (flat, Gouraud, and Phong). Also, some special graphics features
    like backface properties can be set and manipulated with this object.
    
    @sa
    vtkActor vtkPropertyDevice
    """
    def AddShaderVariable(self, string, p_int, *int):
        """
        V.AddShaderVariable(string, int, [int, ...])
        C++: virtual void AddShaderVariable(const char *name, int numVars,
             int *x)
        V.AddShaderVariable(string, int, [float, ...])
        C++: virtual void AddShaderVariable(const char *name, int numVars,
             double *x)
        V.AddShaderVariable(string, int)
        C++: void AddShaderVariable(const char *name, int v)
        V.AddShaderVariable(string, float)
        C++: void AddShaderVariable(const char *name, double v)
        V.AddShaderVariable(string, int, int)
        C++: void AddShaderVariable(const char *name, int v1, int v2)
        V.AddShaderVariable(string, float, float)
        C++: void AddShaderVariable(const char *name, double v1,
            double v2)
        V.AddShaderVariable(string, int, int, int)
        C++: void AddShaderVariable(const char *name, int v1, int v2,
            int v3)
        V.AddShaderVariable(string, float, float, float)
        C++: void AddShaderVariable(const char *name, double v1,
            double v2, double v3)
        
        Provide values to initialize shader variables. Useful to
        initialize shader variables that change over time (animation, GUI
        widgets inputs, etc. )
        - name - hardware name of the uniform variable
        - numVars - number of variables being set
        - x - values
        """
        ...
    
    def BackfaceCullingOff(self):
        """
        V.BackfaceCullingOff()
        C++: virtual void BackfaceCullingOff()
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If backface culling is on,
        polygons facing away from camera are not drawn.
        """
        ...
    
    def BackfaceCullingOn(self):
        """
        V.BackfaceCullingOn()
        C++: virtual void BackfaceCullingOn()
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If backface culling is on,
        polygons facing away from camera are not drawn.
        """
        ...
    
    def BackfaceRender(self, vtkActor, vtkRenderer):
        """
        V.BackfaceRender(vtkActor, vtkRenderer)
        C++: virtual void BackfaceRender(vtkActor *, vtkRenderer *)
        
        This method renders the property as a backface property.
        TwoSidedLighting must be turned off to see any backface
        properties. Note that only colors and opacity are used for
        backface properties. Other properties such as Representation,
        Culling are specified by the Property.
        """
        ...
    
    def DeepCopy(self, vtkProperty):
        """
        V.DeepCopy(vtkProperty)
        C++: void DeepCopy(vtkProperty *p)
        
        Assign one property to another.
        """
        ...
    
    def EdgeVisibilityOff(self):
        """
        V.EdgeVisibilityOff()
        C++: virtual void EdgeVisibilityOff()
        
        Turn on/off the visibility of edges. On some renderers it is
        possible to render the edges of geometric primitives separately
        from the interior.
        """
        ...
    
    def EdgeVisibilityOn(self):
        """
        V.EdgeVisibilityOn()
        C++: virtual void EdgeVisibilityOn()
        
        Turn on/off the visibility of edges. On some renderers it is
        possible to render the edges of geometric primitives separately
        from the interior.
        """
        ...
    
    def FrontfaceCullingOff(self):
        """
        V.FrontfaceCullingOff()
        C++: virtual void FrontfaceCullingOff()
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If frontface culling is on,
        polygons facing towards camera are not drawn.
        """
        ...
    
    def FrontfaceCullingOn(self):
        """
        V.FrontfaceCullingOn()
        C++: virtual void FrontfaceCullingOn()
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If frontface culling is on,
        polygons facing towards camera are not drawn.
        """
        ...
    
    def GetAmbient(self):
        """
        V.GetAmbient() -> float
        C++: virtual double GetAmbient()
        
        Set/Get the ambient lighting coefficient.
        """
        ...
    
    def GetAmbientColor(self):
        """
        V.GetAmbientColor() -> (float, float, float)
        C++: virtual double *GetAmbientColor()
        
        Set/Get the ambient surface color. Not all renderers support
        separate ambient and diffuse colors. From a physical standpoint
        it really doesn't make too much sense to have both. For the
        rendering libraries that don't support both, the diffuse color is
        used.
        """
        ...
    
    def GetAmbientMaxValue(self):
        """
        V.GetAmbientMaxValue() -> float
        C++: virtual double GetAmbientMaxValue()
        
        Set/Get the ambient lighting coefficient.
        """
        ...
    
    def GetAmbientMinValue(self):
        """
        V.GetAmbientMinValue() -> float
        C++: virtual double GetAmbientMinValue()
        
        Set/Get the ambient lighting coefficient.
        """
        ...
    
    def GetBackfaceCulling(self):
        """
        V.GetBackfaceCulling() -> int
        C++: virtual vtkTypeBool GetBackfaceCulling()
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If backface culling is on,
        polygons facing away from camera are not drawn.
        """
        ...
    
    def GetColor(self):
        """
        V.GetColor() -> (float, float, float)
        C++: double *GetColor()
        V.GetColor([float, float, float])
        C++: void GetColor(double rgb[3])
        V.GetColor(float, float, float)
        C++: void GetColor(double &r, double &g, double &b)
        
        Set the color of the object. Has the side effect of setting the
        ambient diffuse and specular colors as well. This is basically a
        quick overall color setting method.
        """
        ...
    
    def GetDiffuse(self):
        """
        V.GetDiffuse() -> float
        C++: virtual double GetDiffuse()
        
        Set/Get the diffuse lighting coefficient.
        """
        ...
    
    def GetDiffuseColor(self):
        """
        V.GetDiffuseColor() -> (float, float, float)
        C++: virtual double *GetDiffuseColor()
        
        Set/Get the diffuse surface color. For PBR Interpolation,
        DiffuseColor is used as the base color
        """
        ...
    
    def GetDiffuseMaxValue(self):
        """
        V.GetDiffuseMaxValue() -> float
        C++: virtual double GetDiffuseMaxValue()
        
        Set/Get the diffuse lighting coefficient.
        """
        ...
    
    def GetDiffuseMinValue(self):
        """
        V.GetDiffuseMinValue() -> float
        C++: virtual double GetDiffuseMinValue()
        
        Set/Get the diffuse lighting coefficient.
        """
        ...
    
    def GetEdgeColor(self):
        """
        V.GetEdgeColor() -> (float, float, float)
        C++: virtual double *GetEdgeColor()
        
        Set/Get the color of primitive edges (if edge visibility is
        enabled).
        """
        ...
    
    def GetEdgeVisibility(self):
        """
        V.GetEdgeVisibility() -> int
        C++: virtual vtkTypeBool GetEdgeVisibility()
        
        Turn on/off the visibility of edges. On some renderers it is
        possible to render the edges of geometric primitives separately
        from the interior.
        """
        ...
    
    def GetEmissiveFactor(self):
        """
        V.GetEmissiveFactor() -> (float, float, float)
        C++: virtual double *GetEmissiveFactor()
        
        Set/Get the emissive factor. This value is multiplied with the
        emissive color when an emissive texture is present. This
        parameter is only used by PBR Interpolation. Default value is
        [1.0, 1.0, 1.0]
        """
        ...
    
    def GetFrontfaceCulling(self):
        """
        V.GetFrontfaceCulling() -> int
        C++: virtual vtkTypeBool GetFrontfaceCulling()
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If frontface culling is on,
        polygons facing towards camera are not drawn.
        """
        ...
    
    def GetInformation(self):
        """
        V.GetInformation() -> vtkInformation
        C++: virtual vtkInformation *GetInformation()
        
        Set/Get the information object associated with the Property.
        """
        ...
    
    def GetInterpolation(self):
        """
        V.GetInterpolation() -> int
        C++: virtual int GetInterpolation()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def GetInterpolationAsString(self):
        """
        V.GetInterpolationAsString() -> string
        C++: const char *GetInterpolationAsString()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def GetInterpolationMaxValue(self):
        """
        V.GetInterpolationMaxValue() -> int
        C++: virtual int GetInterpolationMaxValue()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def GetInterpolationMinValue(self):
        """
        V.GetInterpolationMinValue() -> int
        C++: virtual int GetInterpolationMinValue()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def GetLighting(self):
        """
        V.GetLighting() -> bool
        C++: virtual bool GetLighting()
        
        Set/Get lighting flag for an object. Initial value is true.
        """
        ...
    
    def GetLineStipplePattern(self):
        """
        V.GetLineStipplePattern() -> int
        C++: virtual int GetLineStipplePattern()
        
        Set/Get the stippling pattern of a Line, as a 16-bit binary
        pattern (1 = pixel on, 0 = pixel off). This is only implemented
        for OpenGL, not OpenGL2. The default is 0xFFFF.
        """
        ...
    
    def GetLineStippleRepeatFactor(self):
        """
        V.GetLineStippleRepeatFactor() -> int
        C++: virtual int GetLineStippleRepeatFactor()
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def GetLineStippleRepeatFactorMaxValue(self):
        """
        V.GetLineStippleRepeatFactorMaxValue() -> int
        C++: virtual int GetLineStippleRepeatFactorMaxValue()
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def GetLineStippleRepeatFactorMinValue(self):
        """
        V.GetLineStippleRepeatFactorMinValue() -> int
        C++: virtual int GetLineStippleRepeatFactorMinValue()
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def GetLineWidth(self):
        """
        V.GetLineWidth() -> float
        C++: virtual float GetLineWidth()
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetLineWidthMaxValue(self):
        """
        V.GetLineWidthMaxValue() -> float
        C++: virtual float GetLineWidthMaxValue()
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetLineWidthMinValue(self):
        """
        V.GetLineWidthMinValue() -> float
        C++: virtual float GetLineWidthMinValue()
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetMaterialName(self):
        """
        V.GetMaterialName() -> string
        C++: virtual char *GetMaterialName()
        
        Returns the name of the material currently loaded, if any.
        """
        ...
    
    def GetMetallic(self):
        """
        V.GetMetallic() -> float
        C++: virtual double GetMetallic()
        
        Set/Get the metallic coefficient. Usually this value is either 0
        or 1 for real material but any value in between is valid. This
        parameter is only used by PBR Interpolation. Default value is 0.0
        """
        ...
    
    def GetMetallicMaxValue(self):
        """
        V.GetMetallicMaxValue() -> float
        C++: virtual double GetMetallicMaxValue()
        
        Set/Get the metallic coefficient. Usually this value is either 0
        or 1 for real material but any value in between is valid. This
        parameter is only used by PBR Interpolation. Default value is 0.0
        """
        ...
    
    def GetMetallicMinValue(self):
        """
        V.GetMetallicMinValue() -> float
        C++: virtual double GetMetallicMinValue()
        
        Set/Get the metallic coefficient. Usually this value is either 0
        or 1 for real material but any value in between is valid. This
        parameter is only used by PBR Interpolation. Default value is 0.0
        """
        ...
    
    def GetNormalScale(self):
        """
        V.GetNormalScale() -> float
        C++: virtual double GetNormalScale()
        
        Set/Get the normal scale coefficient. This value affects the
        strength of the normal deviation from the texture. Default value
        is 1.0
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTextures(self):
        """
        V.GetNumberOfTextures() -> int
        C++: int GetNumberOfTextures()
        
        Returns the number of textures in this property.
        """
        ...
    
    def GetOcclusionStrength(self):
        """
        V.GetOcclusionStrength() -> float
        C++: virtual double GetOcclusionStrength()
        
        Set/Get the occlusion strength coefficient. This value affects
        the strength of the occlusion if a material texture is present.
        This parameter is only used by PBR Interpolation. Default value
        is 1.0
        """
        ...
    
    def GetOcclusionStrengthMaxValue(self):
        """
        V.GetOcclusionStrengthMaxValue() -> float
        C++: virtual double GetOcclusionStrengthMaxValue()
        
        Set/Get the occlusion strength coefficient. This value affects
        the strength of the occlusion if a material texture is present.
        This parameter is only used by PBR Interpolation. Default value
        is 1.0
        """
        ...
    
    def GetOcclusionStrengthMinValue(self):
        """
        V.GetOcclusionStrengthMinValue() -> float
        C++: virtual double GetOcclusionStrengthMinValue()
        
        Set/Get the occlusion strength coefficient. This value affects
        the strength of the occlusion if a material texture is present.
        This parameter is only used by PBR Interpolation. Default value
        is 1.0
        """
        ...
    
    def GetOpacity(self):
        """
        V.GetOpacity() -> float
        C++: virtual double GetOpacity()
        
        Set/Get the object's opacity. 1.0 is totally opaque and 0.0 is
        completely transparent.
        """
        ...
    
    def GetOpacityMaxValue(self):
        """
        V.GetOpacityMaxValue() -> float
        C++: virtual double GetOpacityMaxValue()
        
        Set/Get the object's opacity. 1.0 is totally opaque and 0.0 is
        completely transparent.
        """
        ...
    
    def GetOpacityMinValue(self):
        """
        V.GetOpacityMinValue() -> float
        C++: virtual double GetOpacityMinValue()
        
        Set/Get the object's opacity. 1.0 is totally opaque and 0.0 is
        completely transparent.
        """
        ...
    
    def GetPointSize(self):
        """
        V.GetPointSize() -> float
        C++: virtual float GetPointSize()
        
        Set/Get the diameter of a point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetPointSizeMaxValue(self):
        """
        V.GetPointSizeMaxValue() -> float
        C++: virtual float GetPointSizeMaxValue()
        
        Set/Get the diameter of a point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetPointSizeMinValue(self):
        """
        V.GetPointSizeMinValue() -> float
        C++: virtual float GetPointSizeMinValue()
        
        Set/Get the diameter of a point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def GetRenderLinesAsTubes(self):
        """
        V.GetRenderLinesAsTubes() -> bool
        C++: virtual bool GetRenderLinesAsTubes()
        
        Set/Get rendering of lines as tubes. The width of the line in
        pixels is controlled by the LineWidth attribute. May not be
        supported on every platform and the implementation may be half
        tubes, or something only tube like in appearance.
        """
        ...
    
    def GetRenderPointsAsSpheres(self):
        """
        V.GetRenderPointsAsSpheres() -> bool
        C++: virtual bool GetRenderPointsAsSpheres()
        
        Set/Get rendering of points as spheres. The size of the sphere in
        pixels is controlled by the PointSize attribute. Note that half
        spheres may be rendered instead of spheres.
        """
        ...
    
    def GetRepresentation(self):
        """
        V.GetRepresentation() -> int
        C++: virtual int GetRepresentation()
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def GetRepresentationAsString(self):
        """
        V.GetRepresentationAsString() -> string
        C++: const char *GetRepresentationAsString()
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def GetRepresentationMaxValue(self):
        """
        V.GetRepresentationMaxValue() -> int
        C++: virtual int GetRepresentationMaxValue()
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def GetRepresentationMinValue(self):
        """
        V.GetRepresentationMinValue() -> int
        C++: virtual int GetRepresentationMinValue()
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def GetRoughness(self):
        """
        V.GetRoughness() -> float
        C++: virtual double GetRoughness()
        
        Set/Get the roughness coefficient. This value have to be between
        0 (glossy) and 1 (rough). A glossy material have reflections and
        a high specular part. This parameter is only used by PBR
        Interpolation. Default value is 0.5
        """
        ...
    
    def GetRoughnessMaxValue(self):
        """
        V.GetRoughnessMaxValue() -> float
        C++: virtual double GetRoughnessMaxValue()
        
        Set/Get the roughness coefficient. This value have to be between
        0 (glossy) and 1 (rough). A glossy material have reflections and
        a high specular part. This parameter is only used by PBR
        Interpolation. Default value is 0.5
        """
        ...
    
    def GetRoughnessMinValue(self):
        """
        V.GetRoughnessMinValue() -> float
        C++: virtual double GetRoughnessMinValue()
        
        Set/Get the roughness coefficient. This value have to be between
        0 (glossy) and 1 (rough). A glossy material have reflections and
        a high specular part. This parameter is only used by PBR
        Interpolation. Default value is 0.5
        """
        ...
    
    def GetShading(self):
        """
        V.GetShading() -> int
        C++: virtual vtkTypeBool GetShading()
        
        Enable/Disable shading. When shading is enabled, the Material
        must be set.
        """
        ...
    
    def GetSpecular(self):
        """
        V.GetSpecular() -> float
        C++: virtual double GetSpecular()
        
        Set/Get the specular lighting coefficient.
        """
        ...
    
    def GetSpecularColor(self):
        """
        V.GetSpecularColor() -> (float, float, float)
        C++: virtual double *GetSpecularColor()
        
        Set/Get the specular surface color.
        """
        ...
    
    def GetSpecularMaxValue(self):
        """
        V.GetSpecularMaxValue() -> float
        C++: virtual double GetSpecularMaxValue()
        
        Set/Get the specular lighting coefficient.
        """
        ...
    
    def GetSpecularMinValue(self):
        """
        V.GetSpecularMinValue() -> float
        C++: virtual double GetSpecularMinValue()
        
        Set/Get the specular lighting coefficient.
        """
        ...
    
    def GetSpecularPower(self):
        """
        V.GetSpecularPower() -> float
        C++: virtual double GetSpecularPower()
        
        Set/Get the specular power.
        """
        ...
    
    def GetSpecularPowerMaxValue(self):
        """
        V.GetSpecularPowerMaxValue() -> float
        C++: virtual double GetSpecularPowerMaxValue()
        
        Set/Get the specular power.
        """
        ...
    
    def GetSpecularPowerMinValue(self):
        """
        V.GetSpecularPowerMinValue() -> float
        C++: virtual double GetSpecularPowerMinValue()
        
        Set/Get the specular power.
        """
        ...
    
    def GetTexture(self, string):
        """
        V.GetTexture(string) -> vtkTexture
        C++: vtkTexture *GetTexture(const char *name)
        
        Set/Get the texture object to control rendering texture maps.
        This will be a vtkTexture object. A property does not need to
        have an associated texture map and multiple properties can share
        one texture. Textures must be assigned unique names. Note that
        for texture blending the textures will be rendering is
        alphabetical order and after any texture defined in the actor.
        There exists 4 special textures with reserved names: "albedoTex",
        "materialTex", "normalTex" and "emissiveTex". While these
        textures can be added with the regular SetTexture method, it is
        prefered to use to method SetBaseColorTexture, SetORMTexture,
        SetNormalTexture and SetEmissiveTexture respectively.
        """
        ...
    
    def GetVertexColor(self):
        """
        V.GetVertexColor() -> (float, float, float)
        C++: virtual double *GetVertexColor()
        
        Set/Get the color of primitive vertices (if vertex visibility is
        enabled).
        """
        ...
    
    def GetVertexVisibility(self):
        """
        V.GetVertexVisibility() -> int
        C++: virtual vtkTypeBool GetVertexVisibility()
        
        Turn on/off the visibility of vertices. On some renderers it is
        possible to render the vertices of geometric primitives
        separately from the interior.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LightingOff(self):
        """
        V.LightingOff()
        C++: virtual void LightingOff()
        
        Set/Get lighting flag for an object. Initial value is true.
        """
        ...
    
    def LightingOn(self):
        """
        V.LightingOn()
        C++: virtual void LightingOn()
        
        Set/Get lighting flag for an object. Initial value is true.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProperty
        C++: vtkProperty *NewInstance()
        """
        ...
    
    def PostRender(self, vtkActor, vtkRenderer):
        """
        V.PostRender(vtkActor, vtkRenderer)
        C++: virtual void PostRender(vtkActor *, vtkRenderer *)
        
        This method is called after the actor has been rendered. Don't
        call this directly. This method cleans up any shaders allocated.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *win)
        
        Release any graphics resources that are being consumed by this
        property. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RemoveAllTextures(self):
        """
        V.RemoveAllTextures()
        C++: void RemoveAllTextures()
        
        Remove all the textures.
        """
        ...
    
    def RemoveTexture(self, string):
        """
        V.RemoveTexture(string)
        C++: void RemoveTexture(const char *name)
        
        Remove a texture from the collection.
        """
        ...
    
    def Render(self, vtkActor, vtkRenderer):
        """
        V.Render(vtkActor, vtkRenderer)
        C++: virtual void Render(vtkActor *, vtkRenderer *)
        
        This method causes the property to set up whatever is required
        for its instance variables. This is actually handled by a
        subclass of vtkProperty, which is created automatically. This
        method includes the invoking actor as an argument which can be
        used by property devices that require the actor.
        """
        ...
    
    def RenderLinesAsTubesOff(self):
        """
        V.RenderLinesAsTubesOff()
        C++: virtual void RenderLinesAsTubesOff()
        
        Set/Get rendering of lines as tubes. The width of the line in
        pixels is controlled by the LineWidth attribute. May not be
        supported on every platform and the implementation may be half
        tubes, or something only tube like in appearance.
        """
        ...
    
    def RenderLinesAsTubesOn(self):
        """
        V.RenderLinesAsTubesOn()
        C++: virtual void RenderLinesAsTubesOn()
        
        Set/Get rendering of lines as tubes. The width of the line in
        pixels is controlled by the LineWidth attribute. May not be
        supported on every platform and the implementation may be half
        tubes, or something only tube like in appearance.
        """
        ...
    
    def RenderPointsAsSpheresOff(self):
        """
        V.RenderPointsAsSpheresOff()
        C++: virtual void RenderPointsAsSpheresOff()
        
        Set/Get rendering of points as spheres. The size of the sphere in
        pixels is controlled by the PointSize attribute. Note that half
        spheres may be rendered instead of spheres.
        """
        ...
    
    def RenderPointsAsSpheresOn(self):
        """
        V.RenderPointsAsSpheresOn()
        C++: virtual void RenderPointsAsSpheresOn()
        
        Set/Get rendering of points as spheres. The size of the sphere in
        pixels is controlled by the PointSize attribute. Note that half
        spheres may be rendered instead of spheres.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProperty
        C++: static vtkProperty *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAmbient(self, p_float):
        """
        V.SetAmbient(float)
        C++: virtual void SetAmbient(double _arg)
        
        Set/Get the ambient lighting coefficient.
        """
        ...
    
    def SetAmbientColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetAmbientColor(float, float, float)
        C++: virtual void SetAmbientColor(double _arg1, double _arg2,
            double _arg3)
        V.SetAmbientColor((float, float, float))
        C++: virtual void SetAmbientColor(const double _arg[3])
        
        Set/Get the ambient surface color. Not all renderers support
        separate ambient and diffuse colors. From a physical standpoint
        it really doesn't make too much sense to have both. For the
        rendering libraries that don't support both, the diffuse color is
        used.
        """
        ...
    
    def SetBackfaceCulling(self, p_int):
        """
        V.SetBackfaceCulling(int)
        C++: virtual void SetBackfaceCulling(vtkTypeBool _arg)
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If backface culling is on,
        polygons facing away from camera are not drawn.
        """
        ...
    
    def SetBaseColorTexture(self, vtkTexture):
        """
        V.SetBaseColorTexture(vtkTexture)
        C++: void SetBaseColorTexture(vtkTexture *texture)
        
        Set the base color texture. Also called albedo, this texture is
        only used while rendering with PBR interpolation. This is the
        color of the object. This texture must be in sRGB color space.
        @sa SetInterpolationToPBR vtkTexture::UseSRGBColorSpaceOn
        """
        ...
    
    def SetColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetColor(float, float, float)
        C++: virtual void SetColor(double r, double g, double b)
        V.SetColor([float, float, float])
        C++: virtual void SetColor(double a[3])
        
        Set the color of the object. Has the side effect of setting the
        ambient diffuse and specular colors as well. This is basically a
        quick overall color setting method.
        """
        ...
    
    def SetDiffuse(self, p_float):
        """
        V.SetDiffuse(float)
        C++: virtual void SetDiffuse(double _arg)
        
        Set/Get the diffuse lighting coefficient.
        """
        ...
    
    def SetDiffuseColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetDiffuseColor(float, float, float)
        C++: virtual void SetDiffuseColor(double _arg1, double _arg2,
            double _arg3)
        V.SetDiffuseColor((float, float, float))
        C++: virtual void SetDiffuseColor(const double _arg[3])
        
        Set/Get the diffuse surface color. For PBR Interpolation,
        DiffuseColor is used as the base color
        """
        ...
    
    def SetEdgeColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetEdgeColor(float, float, float)
        C++: virtual void SetEdgeColor(double _arg1, double _arg2,
            double _arg3)
        V.SetEdgeColor((float, float, float))
        C++: virtual void SetEdgeColor(const double _arg[3])
        
        Set/Get the color of primitive edges (if edge visibility is
        enabled).
        """
        ...
    
    def SetEdgeVisibility(self, p_int):
        """
        V.SetEdgeVisibility(int)
        C++: virtual void SetEdgeVisibility(vtkTypeBool _arg)
        
        Turn on/off the visibility of edges. On some renderers it is
        possible to render the edges of geometric primitives separately
        from the interior.
        """
        ...
    
    def SetEmissiveFactor(self, p_float, p_float_1, p_float_2):
        """
        V.SetEmissiveFactor(float, float, float)
        C++: virtual void SetEmissiveFactor(double _arg1, double _arg2,
            double _arg3)
        V.SetEmissiveFactor((float, float, float))
        C++: virtual void SetEmissiveFactor(const double _arg[3])
        
        Set/Get the emissive factor. This value is multiplied with the
        emissive color when an emissive texture is present. This
        parameter is only used by PBR Interpolation. Default value is
        [1.0, 1.0, 1.0]
        """
        ...
    
    def SetEmissiveTexture(self, vtkTexture):
        """
        V.SetEmissiveTexture(vtkTexture)
        C++: void SetEmissiveTexture(vtkTexture *texture)
        
        Set the emissive texture. When present, this RGB texture provides
        location and color to the shader where the vtkPolyData should
        emit light. Emited light is scaled by EmissiveFactor. This is
        only supported by PBR interpolation model. This texture must be
        in sRGB color space.
        @sa SetInterpolationToPBR SetEmissiveFactor
            vtkTexture::UseSRGBColorSpaceOn
        """
        ...
    
    def SetFrontfaceCulling(self, p_int):
        """
        V.SetFrontfaceCulling(int)
        C++: virtual void SetFrontfaceCulling(vtkTypeBool _arg)
        
        Turn on/off fast culling of polygons based on orientation of
        normal with respect to camera. If frontface culling is on,
        polygons facing towards camera are not drawn.
        """
        ...
    
    def SetInformation(self, vtkInformation):
        """
        V.SetInformation(vtkInformation)
        C++: virtual void SetInformation(vtkInformation *)
        
        Set/Get the information object associated with the Property.
        """
        ...
    
    def SetInterpolation(self, p_int):
        """
        V.SetInterpolation(int)
        C++: virtual void SetInterpolation(int _arg)
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def SetInterpolationToFlat(self):
        """
        V.SetInterpolationToFlat()
        C++: void SetInterpolationToFlat()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def SetInterpolationToGouraud(self):
        """
        V.SetInterpolationToGouraud()
        C++: void SetInterpolationToGouraud()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def SetInterpolationToPBR(self):
        """
        V.SetInterpolationToPBR()
        C++: void SetInterpolationToPBR()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def SetInterpolationToPhong(self):
        """
        V.SetInterpolationToPhong()
        C++: void SetInterpolationToPhong()
        
        Set the shading interpolation method for an object.
        """
        ...
    
    def SetLighting(self, bool):
        """
        V.SetLighting(bool)
        C++: virtual void SetLighting(bool _arg)
        
        Set/Get lighting flag for an object. Initial value is true.
        """
        ...
    
    def SetLineStipplePattern(self, p_int):
        """
        V.SetLineStipplePattern(int)
        C++: virtual void SetLineStipplePattern(int _arg)
        
        Set/Get the stippling pattern of a Line, as a 16-bit binary
        pattern (1 = pixel on, 0 = pixel off). This is only implemented
        for OpenGL, not OpenGL2. The default is 0xFFFF.
        """
        ...
    
    def SetLineStippleRepeatFactor(self, p_int):
        """
        V.SetLineStippleRepeatFactor(int)
        C++: virtual void SetLineStippleRepeatFactor(int _arg)
        
        Set/Get the stippling repeat factor of a Line, which specifies
        how many times each bit in the pattern is to be repeated. This is
        only implemented for OpenGL, not OpenGL2. The default is 1.
        """
        ...
    
    def SetLineWidth(self, p_float):
        """
        V.SetLineWidth(float)
        C++: virtual void SetLineWidth(float _arg)
        
        Set/Get the width of a Line. The width is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def SetMaterialName(self, string):
        """
        V.SetMaterialName(string)
        C++: virtual void SetMaterialName(const char *_arg)
        
        Returns the name of the material currently loaded, if any.
        """
        ...
    
    def SetMetallic(self, p_float):
        """
        V.SetMetallic(float)
        C++: virtual void SetMetallic(double _arg)
        
        Set/Get the metallic coefficient. Usually this value is either 0
        or 1 for real material but any value in between is valid. This
        parameter is only used by PBR Interpolation. Default value is 0.0
        """
        ...
    
    def SetNormalScale(self, p_float):
        """
        V.SetNormalScale(float)
        C++: virtual void SetNormalScale(double _arg)
        
        Set/Get the normal scale coefficient. This value affects the
        strength of the normal deviation from the texture. Default value
        is 1.0
        """
        ...
    
    def SetNormalTexture(self, vtkTexture):
        """
        V.SetNormalTexture(vtkTexture)
        C++: void SetNormalTexture(vtkTexture *texture)
        
        Set the normal texture. This texture is required for normal
        mapping. It is valid for both PBR and Phong interpolation. The
        normal mapping is enabled if this texture is present and both
        normals and tangents are presents in the vtkPolyData. This
        texture must be in linear color space.
        @sa vtkPolyDataTangents SetNormalScale
        """
        ...
    
    def SetOcclusionStrength(self, p_float):
        """
        V.SetOcclusionStrength(float)
        C++: virtual void SetOcclusionStrength(double _arg)
        
        Set/Get the occlusion strength coefficient. This value affects
        the strength of the occlusion if a material texture is present.
        This parameter is only used by PBR Interpolation. Default value
        is 1.0
        """
        ...
    
    def SetOpacity(self, p_float):
        """
        V.SetOpacity(float)
        C++: virtual void SetOpacity(double _arg)
        
        Set/Get the object's opacity. 1.0 is totally opaque and 0.0 is
        completely transparent.
        """
        ...
    
    def SetORMTexture(self, vtkTexture):
        """
        V.SetORMTexture(vtkTexture)
        C++: void SetORMTexture(vtkTexture *texture)
        
        Set the ORM texture. This texture contains three RGB independent
        components corresponding to the Occlusion value, Roughness value
        and Metallic value respectively. Each texture value is scaled by
        the Occlusion strength, roughness coefficient and metallic
        coefficient. This texture must be in linear color space. This is
        only used by the PBR shading model.
        @sa SetInterpolationToPBR SetOcclusionStrength SetMetallic
            SetRoughness
        """
        ...
    
    def SetPointSize(self, p_float):
        """
        V.SetPointSize(float)
        C++: virtual void SetPointSize(float _arg)
        
        Set/Get the diameter of a point. The size is expressed in screen
        units. This is only implemented for OpenGL. The default is 1.0.
        """
        ...
    
    def SetRenderLinesAsTubes(self, bool):
        """
        V.SetRenderLinesAsTubes(bool)
        C++: virtual void SetRenderLinesAsTubes(bool _arg)
        
        Set/Get rendering of lines as tubes. The width of the line in
        pixels is controlled by the LineWidth attribute. May not be
        supported on every platform and the implementation may be half
        tubes, or something only tube like in appearance.
        """
        ...
    
    def SetRenderPointsAsSpheres(self, bool):
        """
        V.SetRenderPointsAsSpheres(bool)
        C++: virtual void SetRenderPointsAsSpheres(bool _arg)
        
        Set/Get rendering of points as spheres. The size of the sphere in
        pixels is controlled by the PointSize attribute. Note that half
        spheres may be rendered instead of spheres.
        """
        ...
    
    def SetRepresentation(self, p_int):
        """
        V.SetRepresentation(int)
        C++: virtual void SetRepresentation(int _arg)
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def SetRepresentationToPoints(self):
        """
        V.SetRepresentationToPoints()
        C++: void SetRepresentationToPoints()
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def SetRepresentationToSurface(self):
        """
        V.SetRepresentationToSurface()
        C++: void SetRepresentationToSurface()
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def SetRepresentationToWireframe(self):
        """
        V.SetRepresentationToWireframe()
        C++: void SetRepresentationToWireframe()
        
        Control the surface geometry representation for the object.
        """
        ...
    
    def SetRoughness(self, p_float):
        """
        V.SetRoughness(float)
        C++: virtual void SetRoughness(double _arg)
        
        Set/Get the roughness coefficient. This value have to be between
        0 (glossy) and 1 (rough). A glossy material have reflections and
        a high specular part. This parameter is only used by PBR
        Interpolation. Default value is 0.5
        """
        ...
    
    def SetShading(self, p_int):
        """
        V.SetShading(int)
        C++: virtual void SetShading(vtkTypeBool _arg)
        
        Enable/Disable shading. When shading is enabled, the Material
        must be set.
        """
        ...
    
    def SetSpecular(self, p_float):
        """
        V.SetSpecular(float)
        C++: virtual void SetSpecular(double _arg)
        
        Set/Get the specular lighting coefficient.
        """
        ...
    
    def SetSpecularColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetSpecularColor(float, float, float)
        C++: virtual void SetSpecularColor(double _arg1, double _arg2,
            double _arg3)
        V.SetSpecularColor((float, float, float))
        C++: virtual void SetSpecularColor(const double _arg[3])
        
        Set/Get the specular surface color.
        """
        ...
    
    def SetSpecularPower(self, p_float):
        """
        V.SetSpecularPower(float)
        C++: virtual void SetSpecularPower(double _arg)
        
        Set/Get the specular power.
        """
        ...
    
    def SetTexture(self, string, vtkTexture):
        """
        V.SetTexture(string, vtkTexture)
        C++: void SetTexture(const char *name, vtkTexture *texture)
        
        Set/Get the texture object to control rendering texture maps.
        This will be a vtkTexture object. A property does not need to
        have an associated texture map and multiple properties can share
        one texture. Textures must be assigned unique names. Note that
        for texture blending the textures will be rendering is
        alphabetical order and after any texture defined in the actor.
        There exists 4 special textures with reserved names: "albedoTex",
        "materialTex", "normalTex" and "emissiveTex". While these
        textures can be added with the regular SetTexture method, it is
        prefered to use to method SetBaseColorTexture, SetORMTexture,
        SetNormalTexture and SetEmissiveTexture respectively.
        """
        ...
    
    def SetVertexColor(self, p_float, p_float_1, p_float_2):
        """
        V.SetVertexColor(float, float, float)
        C++: virtual void SetVertexColor(double _arg1, double _arg2,
            double _arg3)
        V.SetVertexColor((float, float, float))
        C++: virtual void SetVertexColor(const double _arg[3])
        
        Set/Get the color of primitive vertices (if vertex visibility is
        enabled).
        """
        ...
    
    def SetVertexVisibility(self, p_int):
        """
        V.SetVertexVisibility(int)
        C++: virtual void SetVertexVisibility(vtkTypeBool _arg)
        
        Turn on/off the visibility of vertices. On some renderers it is
        possible to render the vertices of geometric primitives
        separately from the interior.
        """
        ...
    
    def ShadingOff(self):
        """
        V.ShadingOff()
        C++: virtual void ShadingOff()
        
        Enable/Disable shading. When shading is enabled, the Material
        must be set.
        """
        ...
    
    def ShadingOn(self):
        """
        V.ShadingOn()
        C++: virtual void ShadingOn()
        
        Enable/Disable shading. When shading is enabled, the Material
        must be set.
        """
        ...
    
    def VertexVisibilityOff(self):
        """
        V.VertexVisibilityOff()
        C++: virtual void VertexVisibilityOff()
        
        Turn on/off the visibility of vertices. On some renderers it is
        possible to render the vertices of geometric primitives
        separately from the interior.
        """
        ...
    
    def VertexVisibilityOn(self):
        """
        V.VertexVisibilityOn()
        C++: virtual void VertexVisibilityOn()
        
        Turn on/off the visibility of vertices. On some renderers it is
        possible to render the vertices of geometric primitives
        separately from the interior.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


