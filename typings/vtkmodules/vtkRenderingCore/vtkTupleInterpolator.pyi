"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkTupleInterpolator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkTupleInterpolator - interpolate a tuple of arbitrary size
    
    Superclass: vtkObject
    
    This class is used to interpolate a tuple which may have an arbitrary
    number of components (but at least one component). The interpolation
    may be linear in form, or via a subclasses of vtkSpline.
    
    To use this class, begin by specifying the number of components of
    the tuple and the interpolation function to use. Then specify at
    least one pair of (t,tuple) with the AddTuple() method.  Next
    interpolate the tuples with the InterpolateTuple(t,tuple) method,
    where "t" must be in the range of (t_min,t_max) parameter values
    specified by the AddTuple() method (if not then t is clamped), and
    tuple[] is filled in by the method (make sure that tuple [] is long
    enough to hold the interpolated data).
    
    You can control the type of interpolation to use. By default, the
    interpolation is based on a Kochanek spline. However, other types of
    splines can be specified. You can also set the interpolation method
    to linear, in which case the specified spline has no effect on the
    interpolation.
    
    @warning
    Setting the number of components or changing the type of
    interpolation causes the list of tuples to be reset, so any data
    inserted up to that point is lost. Bisection methods are used to
    speed up the search for the interpolation interval.
    """
    def AddTuple(self, p_float, *float):
        """
        V.AddTuple(float, [float, ...])
        C++: void AddTuple(double t, double tuple[])
        
        Add another tuple to the list of tuples to be interpolated.  Note
        that using the same time t value more than once replaces the
        previous tuple value at t.  At least two tuples must be added to
        define an interpolation function.
        """
        ...
    
    def GetInterpolatingSpline(self):
        """
        V.GetInterpolatingSpline() -> vtkSpline
        C++: virtual vtkSpline *GetInterpolatingSpline()
        
        If the InterpolationType is set to spline, then this method
        applies. By default Kochanek interpolation is used, but you can
        specify any instance of vtkSpline to use. Note that the actual
        interpolating splines are created by invoking NewInstance()
        followed by DeepCopy() on the interpolating spline specified
        here, for each tuple component to interpolate.
        """
        ...
    
    def GetInterpolationType(self):
        """
        V.GetInterpolationType() -> int
        C++: virtual int GetInterpolationType()
        
        Specify which type of function to use for interpolation. By
        default spline interpolation (SetInterpolationFunctionToSpline())
        is used (i.e., a Kochanek spline) and the InterpolatingSpline
        instance variable is used to birth the actual interpolation
        splines via a combination of NewInstance() and DeepCopy(). You
        may also choose to use linear interpolation by invoking
        SetInterpolationFunctionToLinear(). Note that changing the type
        of interpolation causes previously inserted data to be discarded.
        """
        ...
    
    def GetMaximumT(self):
        """
        V.GetMaximumT() -> float
        C++: double GetMaximumT()
        
        Obtain some information about the interpolation range. The
        numbers returned (corresponding to parameter t, usually thought
        of as time) are undefined if the list of transforms is empty.
        This is a convenience method for interpolation.
        """
        ...
    
    def GetMinimumT(self):
        """
        V.GetMinimumT() -> float
        C++: double GetMinimumT()
        
        Obtain some information about the interpolation range. The
        numbers returned (corresponding to parameter t, usually thought
        of as time) are undefined if the list of transforms is empty.
        This is a convenience method for interpolation.
        """
        ...
    
    def GetNumberOfComponents(self):
        """
        V.GetNumberOfComponents() -> int
        C++: virtual int GetNumberOfComponents()
        
        Specify the number of tuple components to interpolate. Note that
        setting this value discards any previously inserted data.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTuples(self):
        """
        V.GetNumberOfTuples() -> int
        C++: int GetNumberOfTuples()
        
        Return the number of tuples in the list of tuples to be
        interpolated.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Reset the class so that it contains no (t,tuple) information.
        """
        ...
    
    def InterpolateTuple(self, p_float, *float):
        """
        V.InterpolateTuple(float, [float, ...])
        C++: void InterpolateTuple(double t, double tuple[])
        
        Interpolate the list of tuples and determine a new tuple (i.e.,
        fill in the tuple provided). If t is outside the range of
        (min,max) values, then t is clamped. Note that each component of
        tuple[] is interpolated independently.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTupleInterpolator
        C++: vtkTupleInterpolator *NewInstance()
        """
        ...
    
    def RemoveTuple(self, p_float):
        """
        V.RemoveTuple(float)
        C++: void RemoveTuple(double t)
        
        Delete the tuple at a particular parameter t. If there is no
        tuple defined at t, then the method does nothing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTupleInterpolator
        C++: static vtkTupleInterpolator *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetInterpolatingSpline(self, vtkSpline):
        """
        V.SetInterpolatingSpline(vtkSpline)
        C++: void SetInterpolatingSpline(vtkSpline *)
        
        If the InterpolationType is set to spline, then this method
        applies. By default Kochanek interpolation is used, but you can
        specify any instance of vtkSpline to use. Note that the actual
        interpolating splines are created by invoking NewInstance()
        followed by DeepCopy() on the interpolating spline specified
        here, for each tuple component to interpolate.
        """
        ...
    
    def SetInterpolationType(self, p_int):
        """
        V.SetInterpolationType(int)
        C++: void SetInterpolationType(int type)
        
        Specify which type of function to use for interpolation. By
        default spline interpolation (SetInterpolationFunctionToSpline())
        is used (i.e., a Kochanek spline) and the InterpolatingSpline
        instance variable is used to birth the actual interpolation
        splines via a combination of NewInstance() and DeepCopy(). You
        may also choose to use linear interpolation by invoking
        SetInterpolationFunctionToLinear(). Note that changing the type
        of interpolation causes previously inserted data to be discarded.
        """
        ...
    
    def SetInterpolationTypeToLinear(self):
        """
        V.SetInterpolationTypeToLinear()
        C++: void SetInterpolationTypeToLinear()
        
        Specify which type of function to use for interpolation. By
        default spline interpolation (SetInterpolationFunctionToSpline())
        is used (i.e., a Kochanek spline) and the InterpolatingSpline
        instance variable is used to birth the actual interpolation
        splines via a combination of NewInstance() and DeepCopy(). You
        may also choose to use linear interpolation by invoking
        SetInterpolationFunctionToLinear(). Note that changing the type
        of interpolation causes previously inserted data to be discarded.
        """
        ...
    
    def SetInterpolationTypeToSpline(self):
        """
        V.SetInterpolationTypeToSpline()
        C++: void SetInterpolationTypeToSpline()
        
        Specify which type of function to use for interpolation. By
        default spline interpolation (SetInterpolationFunctionToSpline())
        is used (i.e., a Kochanek spline) and the InterpolatingSpline
        instance variable is used to birth the actual interpolation
        splines via a combination of NewInstance() and DeepCopy(). You
        may also choose to use linear interpolation by invoking
        SetInterpolationFunctionToLinear(). Note that changing the type
        of interpolation causes previously inserted data to be discarded.
        """
        ...
    
    def SetNumberOfComponents(self, p_int):
        """
        V.SetNumberOfComponents(int)
        C++: void SetNumberOfComponents(int numComp)
        
        Specify the number of tuple components to interpolate. Note that
        setting this value discards any previously inserted data.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    INTERPOLATION_TYPE_LINEAR = ...
    INTERPOLATION_TYPE_SPLINE = ...
    __dict__ = ...
    __vtkname__ = ...


