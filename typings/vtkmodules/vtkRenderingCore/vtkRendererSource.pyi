"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkRendererSource(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkRendererSource - take a renderer's image and/or depth map into the
    pipeline
    
    Superclass: vtkAlgorithm
    
    vtkRendererSource is a source object whose input is a renderer's
    image and/or depth map, which is then used to produce an output
    image. This output can then be used in the visualization pipeline.
    You must explicitly send a Modify() to this object to get it to
    reload its data from the renderer. Consider also using
    vtkWindowToImageFilter instead of this class.
    
    By default, the data placed into the output is the renderer's image
    RGB values (these color scalars are represented by unsigned chars,
    one per color channel). Optionally, you can also grab the image depth
    (e.g., z-buffer) values, and include it in the output in one of three
    ways. 1) First, when the data member DepthValues is enabled, a
    separate float array of these depth values is included in the output
    point data with array name "ZBuffer". 2) If DepthValuesInScalars is
    enabled, then the z-buffer values are shifted and scaled to fit into
    an unsigned char and included in the output image (so the output
    image pixels are four components RGBZ). Note that DepthValues and and
    DepthValuesInScalars can be enabled simultaneously if desired.
    Finally 3) if DepthValuesOnly is enabled, then the output image
    consists only of the z-buffer values represented by a single
    component float array; and the data members DepthValues and
    DepthValuesInScalars are ignored.
    
    @sa
    vtkWindowToImageFilter vtkRendererPointCloudSource vtkRenderer
    vtkImageData vtkDepthImageToPointCloud
    """
    def DepthValuesInScalarsOff(self):
        """
        V.DepthValuesInScalarsOff()
        C++: virtual void DepthValuesInScalarsOff()
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed in
        the scalars as a fourth Z component (shift and scaled to map the
        full 0..255 range).
        """
        ...
    
    def DepthValuesInScalarsOn(self):
        """
        V.DepthValuesInScalarsOn()
        C++: virtual void DepthValuesInScalarsOn()
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed in
        the scalars as a fourth Z component (shift and scaled to map the
        full 0..255 range).
        """
        ...
    
    def DepthValuesOff(self):
        """
        V.DepthValuesOff()
        C++: virtual void DepthValuesOff()
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed
        into a field data attributes named "ZBuffer" .
        """
        ...
    
    def DepthValuesOn(self):
        """
        V.DepthValuesOn()
        C++: virtual void DepthValuesOn()
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed
        into a field data attributes named "ZBuffer" .
        """
        ...
    
    def DepthValuesOnlyOff(self):
        """
        V.DepthValuesOnlyOff()
        C++: virtual void DepthValuesOnlyOff()
        
        A boolean value to control whether to grab only the z-buffer
        (i.e., depth values) without the associated image (color scalars)
        data. If enabled, the output data contains only a depth image
        which is the z-buffer values represented by float values. By
        default, this is disabled. Note that if enabled, then the
        DepthValues and DepthValuesInScalars are ignored.
        """
        ...
    
    def DepthValuesOnlyOn(self):
        """
        V.DepthValuesOnlyOn()
        C++: virtual void DepthValuesOnlyOn()
        
        A boolean value to control whether to grab only the z-buffer
        (i.e., depth values) without the associated image (color scalars)
        data. If enabled, the output data contains only a depth image
        which is the z-buffer values represented by float values. By
        default, this is disabled. Note that if enabled, then the
        DepthValues and DepthValuesInScalars are ignored.
        """
        ...
    
    def GetDepthValues(self):
        """
        V.GetDepthValues() -> int
        C++: virtual vtkTypeBool GetDepthValues()
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed
        into a field data attributes named "ZBuffer" .
        """
        ...
    
    def GetDepthValuesInScalars(self):
        """
        V.GetDepthValuesInScalars() -> int
        C++: virtual vtkTypeBool GetDepthValuesInScalars()
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed in
        the scalars as a fourth Z component (shift and scaled to map the
        full 0..255 range).
        """
        ...
    
    def GetDepthValuesOnly(self):
        """
        V.GetDepthValuesOnly() -> int
        C++: virtual vtkTypeBool GetDepthValuesOnly()
        
        A boolean value to control whether to grab only the z-buffer
        (i.e., depth values) without the associated image (color scalars)
        data. If enabled, the output data contains only a depth image
        which is the z-buffer values represented by float values. By
        default, this is disabled. Note that if enabled, then the
        DepthValues and DepthValuesInScalars are ignored.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkRenderer
        C++: virtual vtkRenderer *GetInput()
        
        Returns which renderer is being used as the source for the pixel
        data.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Return the MTime also considering the Renderer.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkImageData
        C++: vtkImageData *GetOutput()
        
        Get the output data object for a port on this algorithm.
        """
        ...
    
    def GetRenderFlag(self):
        """
        V.GetRenderFlag() -> int
        C++: virtual vtkTypeBool GetRenderFlag()
        
        If this flag is on, then filter execution causes a render first.
        """
        ...
    
    def GetWholeWindow(self):
        """
        V.GetWholeWindow() -> int
        C++: virtual vtkTypeBool GetWholeWindow()
        
        Use the entire RenderWindow as a data source or just the
        Renderer. The default is zero, just the Renderer.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRendererSource
        C++: vtkRendererSource *NewInstance()
        """
        ...
    
    def RenderFlagOff(self):
        """
        V.RenderFlagOff()
        C++: virtual void RenderFlagOff()
        
        If this flag is on, then filter execution causes a render first.
        """
        ...
    
    def RenderFlagOn(self):
        """
        V.RenderFlagOn()
        C++: virtual void RenderFlagOn()
        
        If this flag is on, then filter execution causes a render first.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRendererSource
        C++: static vtkRendererSource *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetDepthValues(self, p_int):
        """
        V.SetDepthValues(int)
        C++: virtual void SetDepthValues(vtkTypeBool _arg)
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed
        into a field data attributes named "ZBuffer" .
        """
        ...
    
    def SetDepthValuesInScalars(self, p_int):
        """
        V.SetDepthValuesInScalars(int)
        C++: virtual void SetDepthValuesInScalars(vtkTypeBool _arg)
        
        A boolean value to control whether to grab z-buffer (i.e., depth
        values) along with the image data. The z-buffer data is placed in
        the scalars as a fourth Z component (shift and scaled to map the
        full 0..255 range).
        """
        ...
    
    def SetDepthValuesOnly(self, p_int):
        """
        V.SetDepthValuesOnly(int)
        C++: virtual void SetDepthValuesOnly(vtkTypeBool _arg)
        
        A boolean value to control whether to grab only the z-buffer
        (i.e., depth values) without the associated image (color scalars)
        data. If enabled, the output data contains only a depth image
        which is the z-buffer values represented by float values. By
        default, this is disabled. Note that if enabled, then the
        DepthValues and DepthValuesInScalars are ignored.
        """
        ...
    
    def SetInput(self, vtkRenderer):
        """
        V.SetInput(vtkRenderer)
        C++: void SetInput(vtkRenderer *)
        
        Indicates what renderer to get the pixel data from.
        """
        ...
    
    def SetRenderFlag(self, p_int):
        """
        V.SetRenderFlag(int)
        C++: virtual void SetRenderFlag(vtkTypeBool _arg)
        
        If this flag is on, then filter execution causes a render first.
        """
        ...
    
    def SetWholeWindow(self, p_int):
        """
        V.SetWholeWindow(int)
        C++: virtual void SetWholeWindow(vtkTypeBool _arg)
        
        Use the entire RenderWindow as a data source or just the
        Renderer. The default is zero, just the Renderer.
        """
        ...
    
    def WholeWindowOff(self):
        """
        V.WholeWindowOff()
        C++: virtual void WholeWindowOff()
        
        Use the entire RenderWindow as a data source or just the
        Renderer. The default is zero, just the Renderer.
        """
        ...
    
    def WholeWindowOn(self):
        """
        V.WholeWindowOn()
        C++: virtual void WholeWindowOn()
        
        Use the entire RenderWindow as a data source or just the
        Renderer. The default is zero, just the Renderer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


