"""
This type stub file was generated by pyright.
"""

from .vtkMapper2D import vtkMapper2D

class vtkPolyDataMapper2D(vtkMapper2D):
    """
    vtkPolyDataMapper2D - draw vtkPolyData onto the image plane
    
    Superclass: vtkMapper2D
    
    vtkPolyDataMapper2D is a mapper that renders 3D polygonal data
    (vtkPolyData) onto the 2D image plane (i.e., the renderer's
    viewport). By default, the 3D data is transformed into 2D data by
    ignoring the z-coordinate of the 3D points in vtkPolyData, and taking
    the x-y values as local display values (i.e., pixel coordinates).
    Alternatively, you can provide a vtkCoordinate object that will
    transform the data into local display coordinates (use the
    vtkCoordinate::SetCoordinateSystem() methods to indicate which
    coordinate system you are transforming the data from).
    
    @sa
    vtkMapper2D vtkActor2D
    """
    def ColorByArrayComponent(self, p_int, p_int_1):
        """
        V.ColorByArrayComponent(int, int)
        C++: void ColorByArrayComponent(int arrayNum, int component)
        V.ColorByArrayComponent(string, int)
        C++: void ColorByArrayComponent(const char *arrayName,
            int component)
        
        Choose which component of which field data array to color by.
        """
        ...
    
    def CreateDefaultLookupTable(self):
        """
        V.CreateDefaultLookupTable()
        C++: virtual void CreateDefaultLookupTable()
        
        Create default lookup table. Generally used to create one when
        none is available with the scalar data.
        """
        ...
    
    def GetArrayAccessMode(self):
        """
        V.GetArrayAccessMode() -> int
        C++: int GetArrayAccessMode()
        """
        ...
    
    def GetArrayComponent(self):
        """
        V.GetArrayComponent() -> int
        C++: int GetArrayComponent()
        """
        ...
    
    def GetArrayId(self):
        """
        V.GetArrayId() -> int
        C++: int GetArrayId()
        """
        ...
    
    def GetArrayName(self):
        """
        V.GetArrayName() -> string
        C++: const char *GetArrayName()
        
        Get the array name or number and component to color by.
        """
        ...
    
    def GetColorMode(self):
        """
        V.GetColorMode() -> int
        C++: virtual int GetColorMode()
        
        Control how the scalar data is mapped to colors.  By default
        (ColorModeToDefault), unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table, while everything
        else is. ColorModeToDirectScalar extends ColorModeToDefault such
        that all integer types are treated as colors with values in the
        range 0-255 and floating types are treated as colors with values
        in the range 0.0-1.0. Setting ColorModeToMapScalars means that
        all scalar data will be mapped through the lookup table.  (Note
        that for multi-component scalars, the particular component to use
        for mapping can be specified using the ColorByArrayComponent()
        method.)
        """
        ...
    
    def GetColorModeAsString(self):
        """
        V.GetColorModeAsString() -> string
        C++: const char *GetColorModeAsString()
        
        Return the method of coloring scalar data.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        
        Set the input to the mapper.
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: vtkScalarsToColors *GetLookupTable()
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Overload standard modified time function. If lookup table is
        modified, then this object is modified as well.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalarMode(self):
        """
        V.GetScalarMode() -> int
        C++: virtual int GetScalarMode()
        
        Control how the filter works with scalar point data and cell
        attribute data.  By default (ScalarModeToDefault), the filter
        will use point data, and if no point data is available, then cell
        data is used. Alternatively you can explicitly set the filter to
        use point data (ScalarModeToUsePointData) or cell data
        (ScalarModeToUseCellData). You can also choose to get the scalars
        from an array in point field data (ScalarModeToUsePointFieldData)
        or cell field data (ScalarModeToUseCellFieldData).  If scalars
        are coming from a field data array, you must call
        ColorByArrayComponent before you call GetColors.
        """
        ...
    
    def GetScalarRange(self):
        """
        V.GetScalarRange() -> (float, float)
        C++: virtual double *GetScalarRange()
        
        Specify range in terms of scalar minimum and maximum (smin,smax).
        These values are used to map scalars into lookup table. Has no
        effect when UseLookupTableScalarRange is true.
        """
        ...
    
    def GetScalarVisibility(self):
        """
        V.GetScalarVisibility() -> int
        C++: virtual vtkTypeBool GetScalarVisibility()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def GetTransformCoordinate(self):
        """
        V.GetTransformCoordinate() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetTransformCoordinate()
        
        Specify a vtkCoordinate object to be used to transform the
        vtkPolyData point coordinates. By default (no vtkCoordinate
        specified), the point coordinates are taken as viewport
        coordinates (pixels in the viewport into which the mapper is
        rendering).
        """
        ...
    
    def GetTransformCoordinateUseDouble(self):
        """
        V.GetTransformCoordinateUseDouble() -> bool
        C++: virtual bool GetTransformCoordinateUseDouble()
        
        Specify whether or not rounding to integers the transformed
        points when TransformCoordinate is set. By default, it does not
        use double precision.
        """
        ...
    
    def GetUseLookupTableScalarRange(self):
        """
        V.GetUseLookupTableScalarRange() -> int
        C++: virtual vtkTypeBool GetUseLookupTableScalarRange()
        
        Control whether the mapper sets the lookuptable range based on
        its own ScalarRange, or whether it will use the LookupTable
        ScalarRange regardless of it's own setting. By default the Mapper
        is allowed to set the LookupTable range, but users who are
        sharing LookupTables between mappers/actors will probably wish to
        force the mapper to use the LookupTable unchanged.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapScalars(self, p_float):
        """
        V.MapScalars(float) -> vtkUnsignedCharArray
        C++: vtkUnsignedCharArray *MapScalars(double alpha)
        
        Map the scalars (if there are any scalars and ScalarVisibility is
        on) through the lookup table, returning an unsigned char RGBA
        array. This is typically done as part of the rendering process.
        The alpha parameter allows the blending of the scalars with an
        additional alpha (typically which comes from a vtkActor, etc.)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataMapper2D
        C++: vtkPolyDataMapper2D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataMapper2D
        C++: static vtkPolyDataMapper2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalarVisibilityOff(self):
        """
        V.ScalarVisibilityOff()
        C++: virtual void ScalarVisibilityOff()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def ScalarVisibilityOn(self):
        """
        V.ScalarVisibilityOn()
        C++: virtual void ScalarVisibilityOn()
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def SetColorMode(self, p_int):
        """
        V.SetColorMode(int)
        C++: virtual void SetColorMode(int _arg)
        
        Control how the scalar data is mapped to colors.  By default
        (ColorModeToDefault), unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table, while everything
        else is. ColorModeToDirectScalar extends ColorModeToDefault such
        that all integer types are treated as colors with values in the
        range 0-255 and floating types are treated as colors with values
        in the range 0.0-1.0. Setting ColorModeToMapScalars means that
        all scalar data will be mapped through the lookup table.  (Note
        that for multi-component scalars, the particular component to use
        for mapping can be specified using the ColorByArrayComponent()
        method.)
        """
        ...
    
    def SetColorModeToDefault(self):
        """
        V.SetColorModeToDefault()
        C++: void SetColorModeToDefault()
        
        Control how the scalar data is mapped to colors.  By default
        (ColorModeToDefault), unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table, while everything
        else is. ColorModeToDirectScalar extends ColorModeToDefault such
        that all integer types are treated as colors with values in the
        range 0-255 and floating types are treated as colors with values
        in the range 0.0-1.0. Setting ColorModeToMapScalars means that
        all scalar data will be mapped through the lookup table.  (Note
        that for multi-component scalars, the particular component to use
        for mapping can be specified using the ColorByArrayComponent()
        method.)
        """
        ...
    
    def SetColorModeToDirectScalars(self):
        """
        V.SetColorModeToDirectScalars()
        C++: void SetColorModeToDirectScalars()
        
        Control how the scalar data is mapped to colors.  By default
        (ColorModeToDefault), unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table, while everything
        else is. ColorModeToDirectScalar extends ColorModeToDefault such
        that all integer types are treated as colors with values in the
        range 0-255 and floating types are treated as colors with values
        in the range 0.0-1.0. Setting ColorModeToMapScalars means that
        all scalar data will be mapped through the lookup table.  (Note
        that for multi-component scalars, the particular component to use
        for mapping can be specified using the ColorByArrayComponent()
        method.)
        """
        ...
    
    def SetColorModeToMapScalars(self):
        """
        V.SetColorModeToMapScalars()
        C++: void SetColorModeToMapScalars()
        
        Control how the scalar data is mapped to colors.  By default
        (ColorModeToDefault), unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table, while everything
        else is. ColorModeToDirectScalar extends ColorModeToDefault such
        that all integer types are treated as colors with values in the
        range 0-255 and floating types are treated as colors with values
        in the range 0.0-1.0. Setting ColorModeToMapScalars means that
        all scalar data will be mapped through the lookup table.  (Note
        that for multi-component scalars, the particular component to use
        for mapping can be specified using the ColorByArrayComponent()
        method.)
        """
        ...
    
    def SetInputData(self, vtkPolyData):
        """
        V.SetInputData(vtkPolyData)
        C++: void SetInputData(vtkPolyData *in)
        
        Set the input to the mapper.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: void SetLookupTable(vtkScalarsToColors *lut)
        
        Specify a lookup table for the mapper to use.
        """
        ...
    
    def SetScalarMode(self, p_int):
        """
        V.SetScalarMode(int)
        C++: virtual void SetScalarMode(int _arg)
        
        Control how the filter works with scalar point data and cell
        attribute data.  By default (ScalarModeToDefault), the filter
        will use point data, and if no point data is available, then cell
        data is used. Alternatively you can explicitly set the filter to
        use point data (ScalarModeToUsePointData) or cell data
        (ScalarModeToUseCellData). You can also choose to get the scalars
        from an array in point field data (ScalarModeToUsePointFieldData)
        or cell field data (ScalarModeToUseCellFieldData).  If scalars
        are coming from a field data array, you must call
        ColorByArrayComponent before you call GetColors.
        """
        ...
    
    def SetScalarModeToDefault(self):
        """
        V.SetScalarModeToDefault()
        C++: void SetScalarModeToDefault()
        
        Control how the filter works with scalar point data and cell
        attribute data.  By default (ScalarModeToDefault), the filter
        will use point data, and if no point data is available, then cell
        data is used. Alternatively you can explicitly set the filter to
        use point data (ScalarModeToUsePointData) or cell data
        (ScalarModeToUseCellData). You can also choose to get the scalars
        from an array in point field data (ScalarModeToUsePointFieldData)
        or cell field data (ScalarModeToUseCellFieldData).  If scalars
        are coming from a field data array, you must call
        ColorByArrayComponent before you call GetColors.
        """
        ...
    
    def SetScalarModeToUseCellData(self):
        """
        V.SetScalarModeToUseCellData()
        C++: void SetScalarModeToUseCellData()
        
        Control how the filter works with scalar point data and cell
        attribute data.  By default (ScalarModeToDefault), the filter
        will use point data, and if no point data is available, then cell
        data is used. Alternatively you can explicitly set the filter to
        use point data (ScalarModeToUsePointData) or cell data
        (ScalarModeToUseCellData). You can also choose to get the scalars
        from an array in point field data (ScalarModeToUsePointFieldData)
        or cell field data (ScalarModeToUseCellFieldData).  If scalars
        are coming from a field data array, you must call
        ColorByArrayComponent before you call GetColors.
        """
        ...
    
    def SetScalarModeToUseCellFieldData(self):
        """
        V.SetScalarModeToUseCellFieldData()
        C++: void SetScalarModeToUseCellFieldData()
        
        Control how the filter works with scalar point data and cell
        attribute data.  By default (ScalarModeToDefault), the filter
        will use point data, and if no point data is available, then cell
        data is used. Alternatively you can explicitly set the filter to
        use point data (ScalarModeToUsePointData) or cell data
        (ScalarModeToUseCellData). You can also choose to get the scalars
        from an array in point field data (ScalarModeToUsePointFieldData)
        or cell field data (ScalarModeToUseCellFieldData).  If scalars
        are coming from a field data array, you must call
        ColorByArrayComponent before you call GetColors.
        """
        ...
    
    def SetScalarModeToUsePointData(self):
        """
        V.SetScalarModeToUsePointData()
        C++: void SetScalarModeToUsePointData()
        
        Control how the filter works with scalar point data and cell
        attribute data.  By default (ScalarModeToDefault), the filter
        will use point data, and if no point data is available, then cell
        data is used. Alternatively you can explicitly set the filter to
        use point data (ScalarModeToUsePointData) or cell data
        (ScalarModeToUseCellData). You can also choose to get the scalars
        from an array in point field data (ScalarModeToUsePointFieldData)
        or cell field data (ScalarModeToUseCellFieldData).  If scalars
        are coming from a field data array, you must call
        ColorByArrayComponent before you call GetColors.
        """
        ...
    
    def SetScalarModeToUsePointFieldData(self):
        """
        V.SetScalarModeToUsePointFieldData()
        C++: void SetScalarModeToUsePointFieldData()
        
        Control how the filter works with scalar point data and cell
        attribute data.  By default (ScalarModeToDefault), the filter
        will use point data, and if no point data is available, then cell
        data is used. Alternatively you can explicitly set the filter to
        use point data (ScalarModeToUsePointData) or cell data
        (ScalarModeToUseCellData). You can also choose to get the scalars
        from an array in point field data (ScalarModeToUsePointFieldData)
        or cell field data (ScalarModeToUseCellFieldData).  If scalars
        are coming from a field data array, you must call
        ColorByArrayComponent before you call GetColors.
        """
        ...
    
    def SetScalarRange(self, p_float, p_float_1):
        """
        V.SetScalarRange(float, float)
        C++: virtual void SetScalarRange(double _arg1, double _arg2)
        V.SetScalarRange((float, float))
        C++: void SetScalarRange(const double _arg[2])
        
        Specify range in terms of scalar minimum and maximum (smin,smax).
        These values are used to map scalars into lookup table. Has no
        effect when UseLookupTableScalarRange is true.
        """
        ...
    
    def SetScalarVisibility(self, p_int):
        """
        V.SetScalarVisibility(int)
        C++: virtual void SetScalarVisibility(vtkTypeBool _arg)
        
        Turn on/off flag to control whether scalar data is used to color
        objects.
        """
        ...
    
    def SetTransformCoordinate(self, vtkCoordinate):
        """
        V.SetTransformCoordinate(vtkCoordinate)
        C++: virtual void SetTransformCoordinate(vtkCoordinate *)
        
        Specify a vtkCoordinate object to be used to transform the
        vtkPolyData point coordinates. By default (no vtkCoordinate
        specified), the point coordinates are taken as viewport
        coordinates (pixels in the viewport into which the mapper is
        rendering).
        """
        ...
    
    def SetTransformCoordinateUseDouble(self, bool):
        """
        V.SetTransformCoordinateUseDouble(bool)
        C++: virtual void SetTransformCoordinateUseDouble(bool _arg)
        
        Specify whether or not rounding to integers the transformed
        points when TransformCoordinate is set. By default, it does not
        use double precision.
        """
        ...
    
    def SetUseLookupTableScalarRange(self, p_int):
        """
        V.SetUseLookupTableScalarRange(int)
        C++: virtual void SetUseLookupTableScalarRange(vtkTypeBool _arg)
        
        Control whether the mapper sets the lookuptable range based on
        its own ScalarRange, or whether it will use the LookupTable
        ScalarRange regardless of it's own setting. By default the Mapper
        is allowed to set the LookupTable range, but users who are
        sharing LookupTables between mappers/actors will probably wish to
        force the mapper to use the LookupTable unchanged.
        """
        ...
    
    def ShallowCopy(self, vtkAbstractMapper):
        """
        V.ShallowCopy(vtkAbstractMapper)
        C++: void ShallowCopy(vtkAbstractMapper *m) override;
        
        Make a shallow copy of this mapper.
        """
        ...
    
    def TransformCoordinateUseDoubleOff(self):
        """
        V.TransformCoordinateUseDoubleOff()
        C++: virtual void TransformCoordinateUseDoubleOff()
        
        Specify whether or not rounding to integers the transformed
        points when TransformCoordinate is set. By default, it does not
        use double precision.
        """
        ...
    
    def TransformCoordinateUseDoubleOn(self):
        """
        V.TransformCoordinateUseDoubleOn()
        C++: virtual void TransformCoordinateUseDoubleOn()
        
        Specify whether or not rounding to integers the transformed
        points when TransformCoordinate is set. By default, it does not
        use double precision.
        """
        ...
    
    def UseLookupTableScalarRangeOff(self):
        """
        V.UseLookupTableScalarRangeOff()
        C++: virtual void UseLookupTableScalarRangeOff()
        
        Control whether the mapper sets the lookuptable range based on
        its own ScalarRange, or whether it will use the LookupTable
        ScalarRange regardless of it's own setting. By default the Mapper
        is allowed to set the LookupTable range, but users who are
        sharing LookupTables between mappers/actors will probably wish to
        force the mapper to use the LookupTable unchanged.
        """
        ...
    
    def UseLookupTableScalarRangeOn(self):
        """
        V.UseLookupTableScalarRangeOn()
        C++: virtual void UseLookupTableScalarRangeOn()
        
        Control whether the mapper sets the lookuptable range based on
        its own ScalarRange, or whether it will use the LookupTable
        ScalarRange regardless of it's own setting. By default the Mapper
        is allowed to set the LookupTable range, but users who are
        sharing LookupTables between mappers/actors will probably wish to
        force the mapper to use the LookupTable unchanged.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


