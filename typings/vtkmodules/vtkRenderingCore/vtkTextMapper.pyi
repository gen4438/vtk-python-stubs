"""
This type stub file was generated by pyright.
"""

from .vtkMapper2D import vtkMapper2D

class vtkTextMapper(vtkMapper2D):
    """
    vtkTextMapper - 2D text annotation
    
    Superclass: vtkMapper2D
    
    vtkTextMapper provides 2D text annotation support for VTK.  It is a
    vtkMapper2D that can be associated with a vtkActor2D and placed into
    a vtkRenderer.
    
    To use vtkTextMapper, specify an input text string.
    
    @sa
    vtkActor2D vtkTextActor vtkTextActor3D vtkTextProperty
    vtkTextRenderer
    """
    def GetHeight(self, vtkViewport):
        """
        V.GetHeight(vtkViewport) -> int
        C++: virtual int GetHeight(vtkViewport *v)
        
        Return the size[2]/width/height of the rectangle required to draw
        this mapper (in pixels).
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> string
        C++: virtual char *GetInput()
        
        The input text string to the mapper.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override Modifiedtime as we have added Clipping planes
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSize(self, vtkViewport, p_int=..., p_int=...):
        """
        V.GetSize(vtkViewport, [int, int])
        C++: virtual void GetSize(vtkViewport *, int size[2])
        
        Return the size[2]/width/height of the rectangle required to draw
        this mapper (in pixels).
        """
        ...
    
    def GetTextProperty(self):
        """
        V.GetTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperty()
        
        Set/Get the text property.
        """
        ...
    
    def GetWidth(self, vtkViewport):
        """
        V.GetWidth(vtkViewport) -> int
        C++: virtual int GetWidth(vtkViewport *v)
        
        Return the size[2]/width/height of the rectangle required to draw
        this mapper (in pixels).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTextMapper
        C++: vtkTextMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        mapper. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOverlay(self, vtkViewport, vtkActor2D):
        """
        V.RenderOverlay(vtkViewport, vtkActor2D)
        C++: void RenderOverlay(vtkViewport *, vtkActor2D *) override;
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTextMapper
        C++: static vtkTextMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetConstrainedFontSize(self, vtkViewport, p_int, p_int_1):
        """
        V.SetConstrainedFontSize(vtkViewport, int, int) -> int
        C++: virtual int SetConstrainedFontSize(vtkViewport *,
            int targetWidth, int targetHeight)
        V.SetConstrainedFontSize(vtkTextMapper, vtkViewport, int, int)
            -> int
        C++: static int SetConstrainedFontSize(vtkTextMapper *,
            vtkViewport *, int targetWidth, int targetHeight)
        
        Set and return the font size (in points) required to make this
        mapper fit in a given target rectangle (width x height, in
        pixels). A static version of the method is also available for
        convenience to other classes (e.g., widgets).
        """
        ...
    
    def SetInput(self, string):
        """
        V.SetInput(string)
        C++: virtual void SetInput(const char *_arg)
        
        The input text string to the mapper.
        """
        ...
    
    def SetRelativeFontSize(self, vtkTextMapper, vtkViewport, int_tuple, *int, **kwargs):
        """
        V.SetRelativeFontSize(vtkTextMapper, vtkViewport, (int, ...),
            [int, ...], float) -> int
        C++: static int SetRelativeFontSize(vtkTextMapper *,
            vtkViewport *, const int *winSize, int *stringSize,
            float sizeFactor=0.0)
        
        Use these methods when setting font size relative to the
        renderer's size. These methods are static so that external
        classes (e.g., widgets) can easily use them.
        """
        ...
    
    def SetTextProperty(self, vtkTextProperty):
        """
        V.SetTextProperty(vtkTextProperty)
        C++: virtual void SetTextProperty(vtkTextProperty *p)
        
        Set/Get the text property.
        """
        ...
    
    def ShallowCopy(self, vtkAbstractMapper):
        """
        V.ShallowCopy(vtkAbstractMapper)
        C++: void ShallowCopy(vtkAbstractMapper *m) override;
        
        Shallow copy of an actor.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


