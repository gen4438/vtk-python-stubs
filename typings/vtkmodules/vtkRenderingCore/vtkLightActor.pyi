"""
This type stub file was generated by pyright.
"""

from .vtkProp3D import vtkProp3D

class vtkLightActor(vtkProp3D):
    """
    vtkLightActor - a cone and a frustum to represent a spotlight.
    
    Superclass: vtkProp3D
    
    vtkLightActor is a composite actor used to represent a spotlight. The
    cone angle is equal to the spotlight angle, the cone apex is at the
    position of the light, the direction of the light goes from the cone
    apex to the center of the base of the cone. The square frustum
    position is the light position, the frustum focal point is in the
    direction of the light direction. The frustum vertical view angle
    (aperture) (this is also the horizontal view angle as the frustum is
    square) is equal to twice the cone angle. The clipping range of the
    frustum is arbitrary set by the user (initially at 0.5,11.0).
    
    @warning
    Right now only spotlight are supported but directional light might be
    supported in the future.
    
    @sa
    vtkLight vtkConeSource vtkFrustumSource vtkCameraActor
    """
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Get the bounds for this Actor as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        """
        ...
    
    def GetClippingRange(self):
        """
        V.GetClippingRange() -> (float, float)
        C++: virtual double *GetClippingRange()
        
        Set/Get the location of the near and far clipping planes along
        the direction of projection.  Both of these values must be
        positive. Initial values are  (0.5,11.0)
        """
        ...
    
    def GetLight(self):
        """
        V.GetLight() -> vtkLight
        C++: virtual vtkLight *GetLight()
        
        The spotlight to represent. Initial value is NULL.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the actors mtime plus consider its properties and texture if
        set.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry? No.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLightActor
        C++: vtkLightActor *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *viewport) override;
        
        Support the standard render methods.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLightActor
        C++: static vtkLightActor *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClippingRange(self, p_float, p_float_1):
        """
        V.SetClippingRange(float, float)
        C++: void SetClippingRange(double dNear, double dFar)
        V.SetClippingRange((float, float))
        C++: void SetClippingRange(const double a[2])
        
        Set/Get the location of the near and far clipping planes along
        the direction of projection.  Both of these values must be
        positive. Initial values are  (0.5,11.0)
        """
        ...
    
    def SetLight(self, vtkLight):
        """
        V.SetLight(vtkLight)
        C++: void SetLight(vtkLight *light)
        
        The spotlight to represent. Initial value is NULL.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


