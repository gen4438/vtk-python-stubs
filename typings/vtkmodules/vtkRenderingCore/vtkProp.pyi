"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkProp(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkProp - abstract superclass for all actors, volumes and annotations
    
    Superclass: vtkObject
    
    vtkProp is an abstract superclass for any objects that can exist in a
    rendered scene (either 2D or 3D). Instances of vtkProp may respond to
    various render methods (e.g., RenderOpaqueGeometry()). vtkProp also
    defines the API for picking, LOD manipulation, and common instance
    variables that control visibility, picking, and dragging.
    @sa
    vtkActor2D vtkActor vtkVolume vtkProp3D
    """
    def AddConsumer(self, vtkObject):
        """
        V.AddConsumer(vtkObject)
        C++: void AddConsumer(vtkObject *c)
        
        Add or remove or get or check a consumer,
        """
        ...
    
    def AddEstimatedRenderTime(self, p_float, vtkViewport):
        """
        V.AddEstimatedRenderTime(float, vtkViewport)
        C++: virtual void AddEstimatedRenderTime(double t,
            vtkViewport *vp)
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS This method is
        intended to allow the renderer to add to the EstimatedRenderTime
        in props that require information that the renderer has in order
        to do this. For example, props that are rendered with a ray
        casting method do not know themselves how long it took for them
        to render. We don't want to cause a this->Modified() when we set
        this value since it is not really a modification to the object.
        (For example, we don't want to rebuild matrices at every render
        because the estimated render time is changing)
        """
        ...
    
    def BuildPaths(self, vtkAssemblyPaths, vtkAssemblyPath):
        """
        V.BuildPaths(vtkAssemblyPaths, vtkAssemblyPath)
        C++: virtual void BuildPaths(vtkAssemblyPaths *paths,
            vtkAssemblyPath *path)
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS Used to
        construct assembly paths and perform part traversal.
        """
        ...
    
    def DragableOff(self):
        """
        V.DragableOff()
        C++: virtual void DragableOff()
        
        Set/Get the value of the dragable instance variable. This
        determines if an Prop, once picked, can be dragged (translated)
        through space. This is typically done through an interactive
        mouse interface. This does not affect methods such as
        SetPosition, which will continue to work.  It is just intended to
        prevent some vtkProp'ss from being dragged from within a user
        interface. Initial value is true.
        """
        ...
    
    def DragableOn(self):
        """
        V.DragableOn()
        C++: virtual void DragableOn()
        
        Set/Get the value of the dragable instance variable. This
        determines if an Prop, once picked, can be dragged (translated)
        through space. This is typically done through an interactive
        mouse interface. This does not affect methods such as
        SetPosition, which will continue to work.  It is just intended to
        prevent some vtkProp'ss from being dragged from within a user
        interface. Initial value is true.
        """
        ...
    
    def GeneralTextureTransform(self):
        """
        V.GeneralTextureTransform() -> vtkInformationDoubleVectorKey
        C++: static vtkInformationDoubleVectorKey *GeneralTextureTransform(
            )
        
        Optional Key Indicating the texture transform for general texture
        mapping Old OpenGL was a state machine where you would push or
        pop items. The new OpenGL design is more mapper centric. Some
        classes push a texture and then assume a mapper will use it. The
        new design wants explicit communication of when a texture is
        being used.  This key can be used to pass that information down
        to a mapper.
        """
        ...
    
    def GeneralTextureUnit(self):
        """
        V.GeneralTextureUnit() -> vtkInformationIntegerKey
        C++: static vtkInformationIntegerKey *GeneralTextureUnit()
        
        Optional Key Indicating the texture unit for general texture
        mapping Old OpenGL was a state machine where you would push or
        pop items. The new OpenGL design is more mapper centric. Some
        classes push a texture and then assume a mapper will use it. The
        new design wants explicit communication of when a texture is
        being used.  This key can be used to pass that information down
        to a mapper.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: virtual void GetActors(vtkPropCollection *)
        
        For some exporters and other other operations we must be able to
        collect all the actors or volumes. These methods are used in that
        process.
        """
        ...
    
    def GetActors2D(self, vtkPropCollection):
        """
        V.GetActors2D(vtkPropCollection)
        C++: virtual void GetActors2D(vtkPropCollection *)
        """
        ...
    
    def GetAllocatedRenderTime(self):
        """
        V.GetAllocatedRenderTime() -> float
        C++: virtual double GetAllocatedRenderTime()
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetBounds()
        
        Get the bounds for this Prop as (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        in world coordinates. NULL means that the bounds are not defined.
        """
        ...
    
    def GetConsumer(self, p_int):
        """
        V.GetConsumer(int) -> vtkObject
        C++: vtkObject *GetConsumer(int i)
        
        Add or remove or get or check a consumer,
        """
        ...
    
    def GetDragable(self):
        """
        V.GetDragable() -> int
        C++: virtual vtkTypeBool GetDragable()
        
        Set/Get the value of the dragable instance variable. This
        determines if an Prop, once picked, can be dragged (translated)
        through space. This is typically done through an interactive
        mouse interface. This does not affect methods such as
        SetPosition, which will continue to work.  It is just intended to
        prevent some vtkProp'ss from being dragged from within a user
        interface. Initial value is true.
        """
        ...
    
    def GetEstimatedRenderTime(self, vtkViewport):
        """
        V.GetEstimatedRenderTime(vtkViewport) -> float
        C++: virtual double GetEstimatedRenderTime(vtkViewport *)
        V.GetEstimatedRenderTime() -> float
        C++: virtual double GetEstimatedRenderTime()
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THESE METHODS OUTSIDE OF THE RENDERING PROCESS The
        EstimatedRenderTime may be used to select between different
        props, for example in LODProp it is used to select the
        level-of-detail. The value is returned in seconds. For simple
        geometry the accuracy may not be great due to buffering. For ray
        casting, which is already multi-resolution, the current
        resolution of the image is factored into the time. We need the
        viewport for viewing parameters that affect timing. The
        no-arguments version simply returns the value of the variable
        with no estimation.
        """
        ...
    
    def GetMatrix(self):
        """
        V.GetMatrix() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetMatrix()
        """
        ...
    
    def GetNextPath(self):
        """
        V.GetNextPath() -> vtkAssemblyPath
        C++: virtual vtkAssemblyPath *GetNextPath()
        
        vtkProp and its subclasses can be picked by subclasses of
        vtkAbstractPicker (e.g., vtkPropPicker). The following methods
        interface with the picking classes and return "pick paths". A
        pick path is a hierarchical, ordered list of props that form an
        assembly.  Most often, when a vtkProp is picked, its path
        consists of a single node (i.e., the prop). However, classes like
        vtkAssembly and vtkPropAssembly can return more than one path,
        each path being several layers deep. (See vtkAssemblyPath for
        more information.)  To use these methods - first invoke
        InitPathTraversal() followed by repeated calls to GetNextPath().
        GetNextPath() returns a NULL pointer when the list is exhausted.
        """
        ...
    
    def GetNumberOfConsumers(self):
        """
        V.GetNumberOfConsumers() -> int
        C++: virtual int GetNumberOfConsumers()
        
        Get the number of consumers
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPaths(self):
        """
        V.GetNumberOfPaths() -> int
        C++: virtual int GetNumberOfPaths()
        
        vtkProp and its subclasses can be picked by subclasses of
        vtkAbstractPicker (e.g., vtkPropPicker). The following methods
        interface with the picking classes and return "pick paths". A
        pick path is a hierarchical, ordered list of props that form an
        assembly.  Most often, when a vtkProp is picked, its path
        consists of a single node (i.e., the prop). However, classes like
        vtkAssembly and vtkPropAssembly can return more than one path,
        each path being several layers deep. (See vtkAssemblyPath for
        more information.)  To use these methods - first invoke
        InitPathTraversal() followed by repeated calls to GetNextPath().
        GetNextPath() returns a NULL pointer when the list is exhausted.
        """
        ...
    
    def GetPickable(self):
        """
        V.GetPickable() -> int
        C++: virtual vtkTypeBool GetPickable()
        
        Set/Get the pickable instance variable.  This determines if the
        vtkProp can be picked (typically using the mouse). Also see
        dragable. Initial value is true.
        """
        ...
    
    def GetPropertyKeys(self):
        """
        V.GetPropertyKeys() -> vtkInformation
        C++: virtual vtkInformation *GetPropertyKeys()
        
        Set/Get property keys. Property keys can be digest by some
        rendering passes. For instance, the user may mark a prop as a
        shadow caster for a shadow mapping render pass. Keys are
        documented in render pass classes. Initial value is NULL.
        """
        ...
    
    def GetRedrawMTime(self):
        """
        V.GetRedrawMTime() -> int
        C++: virtual vtkMTimeType GetRedrawMTime()
        
        Return the mtime of anything that would cause the rendered image
        to appear differently. Usually this involves checking the mtime
        of the prop plus anything else it depends on such as properties,
        textures etc.
        """
        ...
    
    def GetRenderTimeMultiplier(self):
        """
        V.GetRenderTimeMultiplier() -> float
        C++: virtual double GetRenderTimeMultiplier()
        """
        ...
    
    def GetShaderProperty(self):
        """
        V.GetShaderProperty() -> vtkShaderProperty
        C++: virtual vtkShaderProperty *GetShaderProperty()
        
        Set/Get the shader property.
        """
        ...
    
    def GetSupportsSelection(self):
        """
        V.GetSupportsSelection() -> bool
        C++: virtual bool GetSupportsSelection()
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS Used by
        vtkHardwareSelector to determine if the prop supports hardware
        selection.
        """
        ...
    
    def GetUseBounds(self):
        """
        V.GetUseBounds() -> bool
        C++: virtual bool GetUseBounds()
        
        In case the Visibility flag is true, tell if the bounds of this
        prop should be taken into account or ignored during the
        computation of other bounding boxes, like in
        vtkRenderer::ResetCamera(). Initial value is true.
        """
        ...
    
    def GetVisibility(self):
        """
        V.GetVisibility() -> int
        C++: virtual vtkTypeBool GetVisibility()
        
        Set/Get visibility of this vtkProp. Initial value is true.
        """
        ...
    
    def GetVolumes(self, vtkPropCollection):
        """
        V.GetVolumes(vtkPropCollection)
        C++: virtual void GetVolumes(vtkPropCollection *)
        """
        ...
    
    def HasKeys(self, vtkInformation):
        """
        V.HasKeys(vtkInformation) -> bool
        C++: virtual bool HasKeys(vtkInformation *requiredKeys)
        
        Tells if the prop has all the required keys.
        \pre keys_can_be_null: requiredKeys==0 || requiredKeys!=0
        """
        ...
    
    def HasOpaqueGeometry(self):
        """
        V.HasOpaqueGeometry() -> int
        C++: virtual vtkTypeBool HasOpaqueGeometry()
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THESE METHODS OUTSIDE OF THE RENDERING PROCESS Does this prop
        have some opaque geometry? This method is called during the
        rendering process to know if there is some opaque geometry. A
        simple prop that has some opaque geometry will return true. A
        composite prop (like vtkAssembly) that has at least one sub-prop
        that has some opaque polygonal geometry will return true. Default
        implementation return true.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: virtual vtkTypeBool HasTranslucentPolygonalGeometry()
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THESE METHODS OUTSIDE OF THE RENDERING PROCESS Does this prop
        have some translucent polygonal geometry? This method is called
        during the rendering process to know if there is some translucent
        polygonal geometry. A simple prop that has some translucent
        polygonal geometry will return true. A composite prop (like
        vtkAssembly) that has at least one sub-prop that has some
        translucent polygonal geometry will return true. Default
        implementation return false.
        """
        ...
    
    def InitPathTraversal(self):
        """
        V.InitPathTraversal()
        C++: virtual void InitPathTraversal()
        
        vtkProp and its subclasses can be picked by subclasses of
        vtkAbstractPicker (e.g., vtkPropPicker). The following methods
        interface with the picking classes and return "pick paths". A
        pick path is a hierarchical, ordered list of props that form an
        assembly.  Most often, when a vtkProp is picked, its path
        consists of a single node (i.e., the prop). However, classes like
        vtkAssembly and vtkPropAssembly can return more than one path,
        each path being several layers deep. (See vtkAssemblyPath for
        more information.)  To use these methods - first invoke
        InitPathTraversal() followed by repeated calls to GetNextPath().
        GetNextPath() returns a NULL pointer when the list is exhausted.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsConsumer(self, vtkObject):
        """
        V.IsConsumer(vtkObject) -> int
        C++: int IsConsumer(vtkObject *c)
        
        Add or remove or get or check a consumer,
        """
        ...
    
    def IsRenderingTranslucentPolygonalGeometry(self):
        """
        V.IsRenderingTranslucentPolygonalGeometry() -> bool
        C++: virtual bool IsRenderingTranslucentPolygonalGeometry()
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProp
        C++: vtkProp *NewInstance()
        """
        ...
    
    def Pick(self):
        """
        V.Pick()
        C++: virtual void Pick()
        
        Method fires PickEvent if the prop is picked.
        """
        ...
    
    def PickableOff(self):
        """
        V.PickableOff()
        C++: virtual void PickableOff()
        
        Set/Get the pickable instance variable.  This determines if the
        vtkProp can be picked (typically using the mouse). Also see
        dragable. Initial value is true.
        """
        ...
    
    def PickableOn(self):
        """
        V.PickableOn()
        C++: virtual void PickableOn()
        
        Set/Get the pickable instance variable.  This determines if the
        vtkProp can be picked (typically using the mouse). Also see
        dragable. Initial value is true.
        """
        ...
    
    def PokeMatrix(self, vtkMatrix4x4):
        """
        V.PokeMatrix(vtkMatrix4x4)
        C++: virtual void PokeMatrix(vtkMatrix4x4 *matrix)
        
        These methods are used by subclasses to place a matrix (if any)
        in the prop prior to rendering. Generally used only for picking.
        See vtkProp3D for more information.
        """
        ...
    
    def ProcessSelectorPixelBuffers(self, vtkHardwareSelector, Stvector_IjE):
        """
        V.ProcessSelectorPixelBuffers(vtkHardwareSelector, Stvector_IjE)
        C++: virtual void ProcessSelectorPixelBuffers(
            vtkHardwareSelector *, std::vector<unsigned int> &)
        
        allows a prop to update a selections color buffers
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *)
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE Release
        any graphics resources that are being consumed by this actor. The
        parameter window could be used to determine which graphic
        resources to release.
        """
        ...
    
    def RemoveConsumer(self, vtkObject):
        """
        V.RemoveConsumer(vtkObject)
        C++: void RemoveConsumer(vtkObject *c)
        
        Add or remove or get or check a consumer,
        """
        ...
    
    def RenderFilteredOpaqueGeometry(self, vtkViewport, vtkInformation):
        """
        V.RenderFilteredOpaqueGeometry(vtkViewport, vtkInformation)
            -> bool
        C++: virtual bool RenderFilteredOpaqueGeometry(vtkViewport *v,
            vtkInformation *requiredKeys)
        
        Render the opaque geometry only if the prop has all the
        requiredKeys. This is recursive for composite props like
        vtkAssembly. An implementation is provided in vtkProp but each
        composite prop must override it. It returns if the rendering was
        performed.
        \pre v_exists: v!=0
        \pre keys_can_be_null: requiredKeys==0 || requiredKeys!=0
        """
        ...
    
    def RenderFilteredOverlay(self, vtkViewport, vtkInformation):
        """
        V.RenderFilteredOverlay(vtkViewport, vtkInformation) -> bool
        C++: virtual bool RenderFilteredOverlay(vtkViewport *v,
            vtkInformation *requiredKeys)
        
        Render in the overlay of the viewport only if the prop has all
        the requiredKeys. This is recursive for composite props like
        vtkAssembly. An implementation is provided in vtkProp but each
        composite prop must override it. It returns if the rendering was
        performed.
        \pre v_exists: v!=0
        \pre keys_can_be_null: requiredKeys==0 || requiredKeys!=0
        """
        ...
    
    def RenderFilteredTranslucentPolygonalGeometry(self, vtkViewport, vtkInformation):
        """
        V.RenderFilteredTranslucentPolygonalGeometry(vtkViewport,
            vtkInformation) -> bool
        C++: virtual bool RenderFilteredTranslucentPolygonalGeometry(
            vtkViewport *v, vtkInformation *requiredKeys)
        
        Render the translucent polygonal geometry only if the prop has
        all the requiredKeys. This is recursive for composite props like
        vtkAssembly. An implementation is provided in vtkProp but each
        composite prop must override it. It returns if the rendering was
        performed.
        \pre v_exists: v!=0
        \pre keys_can_be_null: requiredKeys==0 || requiredKeys!=0
        """
        ...
    
    def RenderFilteredVolumetricGeometry(self, vtkViewport, vtkInformation):
        """
        V.RenderFilteredVolumetricGeometry(vtkViewport, vtkInformation)
            -> bool
        C++: virtual bool RenderFilteredVolumetricGeometry(vtkViewport *v,
             vtkInformation *requiredKeys)
        
        Render the volumetric geometry only if the prop has all the
        requiredKeys. This is recursive for composite props like
        vtkAssembly. An implementation is provided in vtkProp but each
        composite prop must override it. It returns if the rendering was
        performed.
        \pre v_exists: v!=0
        \pre keys_can_be_null: requiredKeys==0 || requiredKeys!=0
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: virtual int RenderOpaqueGeometry(vtkViewport *)
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THESE METHODS OUTSIDE OF THE RENDERING PROCESS All concrete
        subclasses must be able to render themselves. There are four key
        render methods in vtk and they correspond to four different
        points in the rendering cycle. Any given prop may implement one
        or more of these methods. The first method is intended for
        rendering all opaque geometry. The second method is intended for
        rendering all translucent polygonal geometry. The third one is
        intended for rendering all translucent volumetric geometry. Most
        of the volume rendering mappers draw their results during this
        third method. The last method is to render any 2D annotation or
        overlays. Each of these methods return an integer value
        indicating whether or not this render method was applied to this
        data.
        """
        ...
    
    def RenderOverlay(self, vtkViewport):
        """
        V.RenderOverlay(vtkViewport) -> int
        C++: virtual int RenderOverlay(vtkViewport *)
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: virtual int RenderTranslucentPolygonalGeometry(vtkViewport *)
        """
        ...
    
    def RenderVolumetricGeometry(self, vtkViewport):
        """
        V.RenderVolumetricGeometry(vtkViewport) -> int
        C++: virtual int RenderVolumetricGeometry(vtkViewport *)
        """
        ...
    
    def RestoreEstimatedRenderTime(self):
        """
        V.RestoreEstimatedRenderTime()
        C++: virtual void RestoreEstimatedRenderTime()
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THESE METHODS OUTSIDE OF THE RENDERING PROCESS When the
        EstimatedRenderTime is first set to 0.0 (in the
        SetAllocatedRenderTime method) the old value is saved. This
        method is used to restore that old value should the render be
        aborted.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProp
        C++: static vtkProp *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetAllocatedRenderTime(self, p_float, vtkViewport):
        """
        V.SetAllocatedRenderTime(float, vtkViewport)
        C++: virtual void SetAllocatedRenderTime(double t, vtkViewport *v)
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS The renderer may
        use the allocated rendering time to determine how to render this
        actor. Therefore it might need the information provided in the
        viewport. A side effect of this method is to reset the
        EstimatedRenderTime to 0.0. This way, each of the ways that this
        prop may be rendered can be timed and added together into this
        value.
        """
        ...
    
    def SetDragable(self, p_int):
        """
        V.SetDragable(int)
        C++: virtual void SetDragable(vtkTypeBool _arg)
        
        Set/Get the value of the dragable instance variable. This
        determines if an Prop, once picked, can be dragged (translated)
        through space. This is typically done through an interactive
        mouse interface. This does not affect methods such as
        SetPosition, which will continue to work.  It is just intended to
        prevent some vtkProp'ss from being dragged from within a user
        interface. Initial value is true.
        """
        ...
    
    def SetEstimatedRenderTime(self, p_float):
        """
        V.SetEstimatedRenderTime(float)
        C++: virtual void SetEstimatedRenderTime(double t)
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THESE METHODS OUTSIDE OF THE RENDERING PROCESS This method is
        used by, for example, the vtkLODProp3D in order to initialize the
        estimated render time at start-up to some user defined value.
        """
        ...
    
    def SetPickable(self, p_int):
        """
        V.SetPickable(int)
        C++: virtual void SetPickable(vtkTypeBool _arg)
        
        Set/Get the pickable instance variable.  This determines if the
        vtkProp can be picked (typically using the mouse). Also see
        dragable. Initial value is true.
        """
        ...
    
    def SetPropertyKeys(self, vtkInformation):
        """
        V.SetPropertyKeys(vtkInformation)
        C++: virtual void SetPropertyKeys(vtkInformation *keys)
        
        Set/Get property keys. Property keys can be digest by some
        rendering passes. For instance, the user may mark a prop as a
        shadow caster for a shadow mapping render pass. Keys are
        documented in render pass classes. Initial value is NULL.
        """
        ...
    
    def SetRenderTimeMultiplier(self, p_float):
        """
        V.SetRenderTimeMultiplier(float)
        C++: void SetRenderTimeMultiplier(double t)
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS Get/Set the
        multiplier for the render time. This is used for culling and is a
        number between 0 and 1. It is used to create the allocated render
        time value.
        """
        ...
    
    def SetShaderProperty(self, vtkShaderProperty):
        """
        V.SetShaderProperty(vtkShaderProperty)
        C++: virtual void SetShaderProperty(vtkShaderProperty *property)
        
        Set/Get the shader property.
        """
        ...
    
    def SetUseBounds(self, bool):
        """
        V.SetUseBounds(bool)
        C++: virtual void SetUseBounds(bool _arg)
        
        In case the Visibility flag is true, tell if the bounds of this
        prop should be taken into account or ignored during the
        computation of other bounding boxes, like in
        vtkRenderer::ResetCamera(). Initial value is true.
        """
        ...
    
    def SetVisibility(self, p_int):
        """
        V.SetVisibility(int)
        C++: virtual void SetVisibility(vtkTypeBool _arg)
        
        Set/Get visibility of this vtkProp. Initial value is true.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: virtual void ShallowCopy(vtkProp *prop)
        
        Shallow copy of this vtkProp.
        """
        ...
    
    def UseBoundsOff(self):
        """
        V.UseBoundsOff()
        C++: virtual void UseBoundsOff()
        
        In case the Visibility flag is true, tell if the bounds of this
        prop should be taken into account or ignored during the
        computation of other bounding boxes, like in
        vtkRenderer::ResetCamera(). Initial value is true.
        """
        ...
    
    def UseBoundsOn(self):
        """
        V.UseBoundsOn()
        C++: virtual void UseBoundsOn()
        
        In case the Visibility flag is true, tell if the bounds of this
        prop should be taken into account or ignored during the
        computation of other bounding boxes, like in
        vtkRenderer::ResetCamera(). Initial value is true.
        """
        ...
    
    def VisibilityOff(self):
        """
        V.VisibilityOff()
        C++: virtual void VisibilityOff()
        
        Set/Get visibility of this vtkProp. Initial value is true.
        """
        ...
    
    def VisibilityOn(self):
        """
        V.VisibilityOn()
        C++: virtual void VisibilityOn()
        
        Set/Get visibility of this vtkProp. Initial value is true.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


