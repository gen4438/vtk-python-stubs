"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkTransformInterpolator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkTransformInterpolator - interpolate a series of transformation
    matrices
    
    Superclass: vtkObject
    
    This class is used to interpolate a series of 4x4 transformation
    matrices. Position, scale and orientation (i.e., rotations) are
    interpolated separately, and can be interpolated linearly or with a
    spline function. Note that orientation is interpolated using
    quaternions via SLERP (spherical linear interpolation) or the special
    vtkQuaternionSpline class.
    
    To use this class, specify at least two pairs of (t,transformation
    matrix) with the AddTransform() method.  Then interpolated the
    transforms with the InterpolateTransform(t,transform) method, where
    "t" must be in the range of (min,max) times specified by the
    AddTransform() method.
    
    By default, spline interpolation is used for the interpolation of the
    transformation matrices. The position, scale and orientation of the
    matrices are interpolated with instances of the classes
    vtkTupleInterpolator (position,scale) and vtkQuaternionInterpolator
    (rotation). The user can override the interpolation behavior by
    gaining access to these separate interpolation classes.  These
    interpolator classes (vtkTupleInterpolator and
    vtkQuaternionInterpolator) can be modified to perform linear versus
    spline interpolation, and/or different spline basis functions can be
    specified.
    
    @warning
    The interpolator classes are initialized when the
    InterpolateTransform() is called. Any changes to the interpolators,
    or additions to the list of transforms to be interpolated, causes a
    reinitialization of the interpolators the next time
    InterpolateTransform() is invoked. Thus the best performance is
    obtained by 1) configuring the interpolators, 2) adding all the
    transforms, and 3) finally performing interpolation.
    """
    def AddTransform(self, p_float, vtkTransform):
        """
        V.AddTransform(float, vtkTransform)
        C++: void AddTransform(double t, vtkTransform *xform)
        V.AddTransform(float, vtkMatrix4x4)
        C++: void AddTransform(double t, vtkMatrix4x4 *matrix)
        V.AddTransform(float, vtkProp3D)
        C++: void AddTransform(double t, vtkProp3D *prop3D)
        
        Add another transform to the list of transformations defining the
        transform function. Note that using the same time t value more
        than once replaces the previous transform value at t. At least
        two transforms must be added to define a function. There are
        variants to this method depending on whether you are adding a
        vtkTransform, vtkMaxtirx4x4, and/or vtkProp3D.
        """
        ...
    
    def GetInterpolationType(self):
        """
        V.GetInterpolationType() -> int
        C++: virtual int GetInterpolationType()
        
        These are convenience methods to switch between linear and spline
        interpolation. The methods simply forward the request for linear
        or spline interpolation to the position, scale and orientation
        interpolators. Note that if the InterpolationType is set to
        "Manual", then the interpolators are expected to be directly
        manipulated and this class does not forward the request for
        interpolation type to its interpolators.
        """
        ...
    
    def GetInterpolationTypeMaxValue(self):
        """
        V.GetInterpolationTypeMaxValue() -> int
        C++: virtual int GetInterpolationTypeMaxValue()
        
        These are convenience methods to switch between linear and spline
        interpolation. The methods simply forward the request for linear
        or spline interpolation to the position, scale and orientation
        interpolators. Note that if the InterpolationType is set to
        "Manual", then the interpolators are expected to be directly
        manipulated and this class does not forward the request for
        interpolation type to its interpolators.
        """
        ...
    
    def GetInterpolationTypeMinValue(self):
        """
        V.GetInterpolationTypeMinValue() -> int
        C++: virtual int GetInterpolationTypeMinValue()
        
        These are convenience methods to switch between linear and spline
        interpolation. The methods simply forward the request for linear
        or spline interpolation to the position, scale and orientation
        interpolators. Note that if the InterpolationType is set to
        "Manual", then the interpolators are expected to be directly
        manipulated and this class does not forward the request for
        interpolation type to its interpolators.
        """
        ...
    
    def GetMaximumT(self):
        """
        V.GetMaximumT() -> float
        C++: double GetMaximumT()
        
        Obtain some information about the interpolation range. The
        numbers returned (corresponding to parameter t, usually thought
        of as time) are undefined if the list of transforms is empty.
        """
        ...
    
    def GetMinimumT(self):
        """
        V.GetMinimumT() -> float
        C++: double GetMinimumT()
        
        Obtain some information about the interpolation range. The
        numbers returned (corresponding to parameter t, usually thought
        of as time) are undefined if the list of transforms is empty.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override GetMTime() because we depend on the interpolators which
        may be modified outside of this class.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfTransforms(self):
        """
        V.GetNumberOfTransforms() -> int
        C++: int GetNumberOfTransforms()
        
        Return the number of transforms in the list of transforms.
        """
        ...
    
    def GetPositionInterpolator(self):
        """
        V.GetPositionInterpolator() -> vtkTupleInterpolator
        C++: virtual vtkTupleInterpolator *GetPositionInterpolator()
        
        Set/Get the tuple interpolator used to interpolate the position
        portion of the transformation matrix. Note that you can modify
        the behavior of the interpolator (linear vs spline interpolation;
        change spline basis) by manipulating the interpolator instances.
        """
        ...
    
    def GetRotationInterpolator(self):
        """
        V.GetRotationInterpolator() -> vtkQuaternionInterpolator
        C++: virtual vtkQuaternionInterpolator *GetRotationInterpolator()
        
        Set/Get the tuple interpolator used to interpolate the
        orientation portion of the transformation matrix. Note that you
        can modify the behavior of the interpolator (linear vs spline
        interpolation; change spline basis) by manipulating the
        interpolator instances.
        """
        ...
    
    def GetScaleInterpolator(self):
        """
        V.GetScaleInterpolator() -> vtkTupleInterpolator
        C++: virtual vtkTupleInterpolator *GetScaleInterpolator()
        
        Set/Get the tuple interpolator used to interpolate the scale
        portion of the transformation matrix. Note that you can modify
        the behavior of the interpolator (linear vs spline interpolation;
        change spline basis) by manipulating the interpolator instances.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        
        Clear the list of transforms.
        """
        ...
    
    def InterpolateTransform(self, p_float, vtkTransform):
        """
        V.InterpolateTransform(float, vtkTransform)
        C++: void InterpolateTransform(double t, vtkTransform *xform)
        
        Interpolate the list of transforms and determine a new transform
        (i.e., fill in the transformation provided). If t is outside the
        range of (min,max) values, then t is clamped.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTransformInterpolator
        C++: vtkTransformInterpolator *NewInstance()
        """
        ...
    
    def RemoveTransform(self, p_float):
        """
        V.RemoveTransform(float)
        C++: void RemoveTransform(double t)
        
        Delete the transform at a particular parameter t. If there is no
        transform defined at location t, then the method does nothing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTransformInterpolator
        C++: static vtkTransformInterpolator *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetInterpolationType(self, p_int):
        """
        V.SetInterpolationType(int)
        C++: virtual void SetInterpolationType(int _arg)
        
        These are convenience methods to switch between linear and spline
        interpolation. The methods simply forward the request for linear
        or spline interpolation to the position, scale and orientation
        interpolators. Note that if the InterpolationType is set to
        "Manual", then the interpolators are expected to be directly
        manipulated and this class does not forward the request for
        interpolation type to its interpolators.
        """
        ...
    
    def SetInterpolationTypeToLinear(self):
        """
        V.SetInterpolationTypeToLinear()
        C++: void SetInterpolationTypeToLinear()
        
        These are convenience methods to switch between linear and spline
        interpolation. The methods simply forward the request for linear
        or spline interpolation to the position, scale and orientation
        interpolators. Note that if the InterpolationType is set to
        "Manual", then the interpolators are expected to be directly
        manipulated and this class does not forward the request for
        interpolation type to its interpolators.
        """
        ...
    
    def SetInterpolationTypeToManual(self):
        """
        V.SetInterpolationTypeToManual()
        C++: void SetInterpolationTypeToManual()
        
        These are convenience methods to switch between linear and spline
        interpolation. The methods simply forward the request for linear
        or spline interpolation to the position, scale and orientation
        interpolators. Note that if the InterpolationType is set to
        "Manual", then the interpolators are expected to be directly
        manipulated and this class does not forward the request for
        interpolation type to its interpolators.
        """
        ...
    
    def SetInterpolationTypeToSpline(self):
        """
        V.SetInterpolationTypeToSpline()
        C++: void SetInterpolationTypeToSpline()
        
        These are convenience methods to switch between linear and spline
        interpolation. The methods simply forward the request for linear
        or spline interpolation to the position, scale and orientation
        interpolators. Note that if the InterpolationType is set to
        "Manual", then the interpolators are expected to be directly
        manipulated and this class does not forward the request for
        interpolation type to its interpolators.
        """
        ...
    
    def SetPositionInterpolator(self, vtkTupleInterpolator):
        """
        V.SetPositionInterpolator(vtkTupleInterpolator)
        C++: virtual void SetPositionInterpolator(vtkTupleInterpolator *)
        
        Set/Get the tuple interpolator used to interpolate the position
        portion of the transformation matrix. Note that you can modify
        the behavior of the interpolator (linear vs spline interpolation;
        change spline basis) by manipulating the interpolator instances.
        """
        ...
    
    def SetRotationInterpolator(self, vtkQuaternionInterpolator):
        """
        V.SetRotationInterpolator(vtkQuaternionInterpolator)
        C++: virtual void SetRotationInterpolator(
            vtkQuaternionInterpolator *)
        
        Set/Get the tuple interpolator used to interpolate the
        orientation portion of the transformation matrix. Note that you
        can modify the behavior of the interpolator (linear vs spline
        interpolation; change spline basis) by manipulating the
        interpolator instances.
        """
        ...
    
    def SetScaleInterpolator(self, vtkTupleInterpolator):
        """
        V.SetScaleInterpolator(vtkTupleInterpolator)
        C++: virtual void SetScaleInterpolator(vtkTupleInterpolator *)
        
        Set/Get the tuple interpolator used to interpolate the scale
        portion of the transformation matrix. Note that you can modify
        the behavior of the interpolator (linear vs spline interpolation;
        change spline basis) by manipulating the interpolator instances.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    INTERPOLATION_TYPE_LINEAR = ...
    INTERPOLATION_TYPE_MANUAL = ...
    INTERPOLATION_TYPE_SPLINE = ...
    __dict__ = ...
    __vtkname__ = ...


