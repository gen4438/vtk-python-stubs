"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkGenericVertexAttributeMapping(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkGenericVertexAttributeMapping - stores mapping for data arrays to
    generic vertex attributes.
    
    Superclass: vtkObject
    
    vtkGenericVertexAttributeMapping stores mapping between data arrays
    and generic vertex attributes. It is used by vtkPainterPolyDataMapper
    to pass the mappings to the painter which rendering the
    attributes.@par Thanks: Support for generic vertex attributes in VTK
    was contributed in collaboration with Stephane Ploix at EDF.
    """
    def AddMapping(self, string, string_1, p_int, p_int_1):
        """
        V.AddMapping(string, string, int, int)
        C++: void AddMapping(const char *attributeName,
            const char *arrayName, int fieldAssociation, int component)
        V.AddMapping(int, string, int, int)
        C++: void AddMapping(int unit, const char *arrayName,
            int fieldAssociation, int component)
        
        Select a data array from the point/cell data and map it to a
        generic vertex attribute. Note that indices change when a mapping
        is added/removed.
        """
        ...
    
    def GetArrayName(self, p_int):
        """
        V.GetArrayName(int) -> string
        C++: const char *GetArrayName(unsigned int index)
        
        Get the array name at the given index.
        """
        ...
    
    def GetAttributeName(self, p_int):
        """
        V.GetAttributeName(int) -> string
        C++: const char *GetAttributeName(unsigned int index)
        
        Get the attribute name at the given index.
        """
        ...
    
    def GetComponent(self, p_int):
        """
        V.GetComponent(int) -> int
        C++: int GetComponent(unsigned int index)
        
        Get the component no. at the given index.
        """
        ...
    
    def GetFieldAssociation(self, p_int):
        """
        V.GetFieldAssociation(int) -> int
        C++: int GetFieldAssociation(unsigned int index)
        
        Get the field association at the given index.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfMappings(self):
        """
        V.GetNumberOfMappings() -> int
        C++: unsigned int GetNumberOfMappings()
        
        Get number of mappings.
        """
        ...
    
    def GetTextureUnit(self, p_int):
        """
        V.GetTextureUnit(int) -> int
        C++: int GetTextureUnit(unsigned int index)
        
        Get the component no. at the given index.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGenericVertexAttributeMapping
        C++: vtkGenericVertexAttributeMapping *NewInstance()
        """
        ...
    
    def RemoveAllMappings(self):
        """
        V.RemoveAllMappings()
        C++: void RemoveAllMappings()
        
        Remove all mappings.
        """
        ...
    
    def RemoveMapping(self, string):
        """
        V.RemoveMapping(string) -> bool
        C++: bool RemoveMapping(const char *attributeName)
        
        Remove a vertex attribute mapping.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGenericVertexAttributeMapping
        C++: static vtkGenericVertexAttributeMapping *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


