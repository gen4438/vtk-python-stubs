"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkDistanceToCamera(__vtkmodules_vtkCommonExecutionModel.vtkPointSetAlgorithm):
    """
    vtkDistanceToCamera - calculates distance from points to the camera.
    
    Superclass: vtkPointSetAlgorithm
    
    This filter adds a double array containing the distance from each
    point to the camera. If Scaling is on, it will use the values in the
    input array to process in order to scale the size of the points.
    ScreenSize sets the size in screen pixels that you would want a
    rendered rectangle at that point to be, if it was scaled by the
    output array.
    """
    def GetDistanceArrayName(self):
        """
        V.GetDistanceArrayName() -> string
        C++: virtual char *GetDistanceArrayName()
        
        The name of the distance array. If not set, the array is named
        'DistanceToCamera'.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        The modified time of this filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        The renderer which will ultimately render these points.
        """
        ...
    
    def GetScaling(self):
        """
        V.GetScaling() -> bool
        C++: virtual bool GetScaling()
        
        Whether to scale the distance by the input array to process.
        """
        ...
    
    def GetScreenSize(self):
        """
        V.GetScreenSize() -> float
        C++: virtual double GetScreenSize()
        
        The desired screen size obtained by scaling glyphs by the
        distance array. It assumes the glyph at each point will be unit
        size.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkDistanceToCamera
        C++: vtkDistanceToCamera *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkDistanceToCamera
        C++: static vtkDistanceToCamera *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalingOff(self):
        """
        V.ScalingOff()
        C++: virtual void ScalingOff()
        
        Whether to scale the distance by the input array to process.
        """
        ...
    
    def ScalingOn(self):
        """
        V.ScalingOn()
        C++: virtual void ScalingOn()
        
        Whether to scale the distance by the input array to process.
        """
        ...
    
    def SetDistanceArrayName(self, string):
        """
        V.SetDistanceArrayName(string)
        C++: virtual void SetDistanceArrayName(const char *_arg)
        
        The name of the distance array. If not set, the array is named
        'DistanceToCamera'.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: void SetRenderer(vtkRenderer *ren)
        
        The renderer which will ultimately render these points.
        """
        ...
    
    def SetScaling(self, bool):
        """
        V.SetScaling(bool)
        C++: virtual void SetScaling(bool _arg)
        
        Whether to scale the distance by the input array to process.
        """
        ...
    
    def SetScreenSize(self, p_float):
        """
        V.SetScreenSize(float)
        C++: virtual void SetScreenSize(double _arg)
        
        The desired screen size obtained by scaling glyphs by the
        distance array. It assumes the glyph at each point will be unit
        size.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


