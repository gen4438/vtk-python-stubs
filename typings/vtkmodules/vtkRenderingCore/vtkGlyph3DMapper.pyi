"""
This type stub file was generated by pyright.
"""

from .vtkMapper import vtkMapper

class vtkGlyph3DMapper(vtkMapper):
    """
    vtkGlyph3DMapper - vtkGlyph3D on the GPU.
    
    Superclass: vtkMapper
    
    Do the same job than vtkGlyph3D but on the GPU. For this reason, it
    is a mapper not a vtkPolyDataAlgorithm. Also, some methods of
    vtkGlyph3D don't make sense in vtkGlyph3DMapper: GeneratePointIds,
    old-style SetSource, PointIdsName, IsPointVisible.
    
    @sa
    vtkGlyph3D
    """
    def ClampingOff(self):
        """
        V.ClampingOff()
        C++: virtual void ClampingOff()
        
        Turn on/off clamping of data values to scale with to the
        specified range.
        """
        ...
    
    def ClampingOn(self):
        """
        V.ClampingOn()
        C++: virtual void ClampingOn()
        
        Turn on/off clamping of data values to scale with to the
        specified range.
        """
        ...
    
    def GetBlockAttributes(self):
        """
        V.GetBlockAttributes() -> vtkCompositeDataDisplayAttributes
        C++: virtual vtkCompositeDataDisplayAttributes *GetBlockAttributes(
            )
        
        When the input data object (not the source) is composite data, it
        is possible to control visibility and pickability on a per-block
        basis by passing the mapper a vtkCompositeDataDisplayAttributes
        instance. The color and opacity in the display-attributes
        instance are ignored for now. By default, the mapper does not own
        a display-attributes instance. The value of BlockAttributes has
        no effect when the input is a poly-data object.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6]) override;
        
        Redefined to take into account the bounds of the scaled glyphs.
        """
        ...
    
    def GetClamping(self):
        """
        V.GetClamping() -> bool
        C++: virtual bool GetClamping()
        
        Turn on/off clamping of data values to scale with to the
        specified range.
        """
        ...
    
    def GetCullingAndLOD(self):
        """
        V.GetCullingAndLOD() -> bool
        C++: virtual bool GetCullingAndLOD()
        
        Enable or disable frustum culling and LOD of the instances. When
        enabled, an OpenGL driver supporting GL_ARB_gpu_shader5 extension
        is mandatory.
        """
        ...
    
    def GetLODColoring(self):
        """
        V.GetLODColoring() -> bool
        C++: virtual bool GetLODColoring()
        
        Enable LOD coloring. It can be useful to configure properly the
        LODs. Each LOD have a unique color, based on its index.
        """
        ...
    
    def GetMasking(self):
        """
        V.GetMasking() -> bool
        C++: virtual bool GetMasking()
        
        Tells the mapper to skip glyphing input points that haves false
        values in the mask array. If there is no mask array (id access
        mode is set and there is no such id, or array name access mode is
        set and the there is no such name), masking is silently ignored.
        A mask array is a vtkBitArray with only one component. Initial
        value is false.
        """
        ...
    
    def GetMaxNumberOfLOD(self):
        """
        V.GetMaxNumberOfLOD() -> int
        C++: virtual vtkIdType GetMaxNumberOfLOD()
        
        Get the maximum number of LOD. OpenGL context must be bound. The
        maximum number of LOD depends on GPU capabilities. This method is
        intended to be reimplemented in inherited classes, current
        implementation always returns zero.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrient(self):
        """
        V.GetOrient() -> bool
        C++: virtual bool GetOrient()
        
        Turn on/off orienting of input geometry. When turned on, the
        orientation array specified using SetOrientationArray() will be
        used.
        """
        ...
    
    def GetOrientationMode(self):
        """
        V.GetOrientationMode() -> int
        C++: virtual int GetOrientationMode()
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def GetOrientationModeAsString(self):
        """
        V.GetOrientationModeAsString() -> string
        C++: const char *GetOrientationModeAsString()
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def GetOrientationModeMaxValue(self):
        """
        V.GetOrientationModeMaxValue() -> int
        C++: virtual int GetOrientationModeMaxValue()
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def GetOrientationModeMinValue(self):
        """
        V.GetOrientationModeMinValue() -> int
        C++: virtual int GetOrientationModeMinValue()
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def GetRange(self):
        """
        V.GetRange() -> (float, float)
        C++: virtual double *GetRange()
        
        Specify range to map scalar values into.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Specify scale factor to scale object by. This is used only when
        Scaling is On.
        """
        ...
    
    def GetScaleMode(self):
        """
        V.GetScaleMode() -> int
        C++: virtual int GetScaleMode()
        
        Either scale by individual components (SCALE_BY_COMPONENTS) or
        magnitude (SCALE_BY_MAGNITUDE) of the chosen array to SCALE with
        or disable scaling using data array all together
        (NO_DATA_SCALING). Default is NO_DATA_SCALING.
        """
        ...
    
    def GetScaleModeAsString(self):
        """
        V.GetScaleModeAsString() -> string
        C++: const char *GetScaleModeAsString()
        """
        ...
    
    def GetScaling(self):
        """
        V.GetScaling() -> bool
        C++: virtual bool GetScaling()
        
        Turn on/off scaling of source geometry. When turned on,
        ScaleFactor controls the scale applied. To scale with some data
        array, ScaleMode should be set accordingly.
        """
        ...
    
    def GetSelectionColorId(self):
        """
        V.GetSelectionColorId() -> int
        C++: virtual unsigned int GetSelectionColorId()
        
        For selection by color id mode (not for end-user, called by
        vtkGlyphSelectionRenderMode). 0 is reserved for miss. it has to
        start at 1. Initial value is 1.
        """
        ...
    
    def GetSource(self, p_int):
        """
        V.GetSource(int) -> vtkPolyData
        C++: vtkPolyData *GetSource(int idx=0)
        
        Get a pointer to a source object at a specified table location.
        """
        ...
    
    def GetSourceIndexing(self):
        """
        V.GetSourceIndexing() -> bool
        C++: virtual bool GetSourceIndexing()
        
        Enable/disable indexing into table of the glyph sources. When
        disabled, only the 1st source input will be used to generate the
        glyph. Otherwise the source index array will be used to select
        the glyph source. The source index array can be specified using
        SetSourceIndexArray().
        """
        ...
    
    def GetSourceTableTree(self):
        """
        V.GetSourceTableTree() -> vtkDataObjectTree
        C++: vtkDataObjectTree *GetSourceTableTree()
        
        Convenience method to get the source table tree, if it exists.
        """
        ...
    
    def GetSupportsSelection(self):
        """
        V.GetSupportsSelection() -> bool
        C++: bool GetSupportsSelection() override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS Used by
        vtkHardwareSelector to determine if the prop supports hardware
        selection.
        """
        ...
    
    def GetUseSelectionIds(self):
        """
        V.GetUseSelectionIds() -> bool
        C++: virtual bool GetUseSelectionIds()
        
        Turn on/off custom selection ids. If enabled, the id values set
        with SetSelectionIdArray are returned from pick events.
        """
        ...
    
    def GetUseSourceTableTree(self):
        """
        V.GetUseSourceTableTree() -> bool
        C++: virtual bool GetUseSourceTableTree()
        
        If true, and the glyph source dataset is a subclass of
        vtkDataObjectTree, the top-level members of the tree will be
        mapped to the glyph source table used for SourceIndexing.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MaskingOff(self):
        """
        V.MaskingOff()
        C++: virtual void MaskingOff()
        
        Tells the mapper to skip glyphing input points that haves false
        values in the mask array. If there is no mask array (id access
        mode is set and there is no such id, or array name access mode is
        set and the there is no such name), masking is silently ignored.
        A mask array is a vtkBitArray with only one component. Initial
        value is false.
        """
        ...
    
    def MaskingOn(self):
        """
        V.MaskingOn()
        C++: virtual void MaskingOn()
        
        Tells the mapper to skip glyphing input points that haves false
        values in the mask array. If there is no mask array (id access
        mode is set and there is no such id, or array name access mode is
        set and the there is no such name), masking is silently ignored.
        A mask array is a vtkBitArray with only one component. Initial
        value is false.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGlyph3DMapper
        C++: vtkGlyph3DMapper *NewInstance()
        """
        ...
    
    def OrientOff(self):
        """
        V.OrientOff()
        C++: virtual void OrientOff()
        
        Turn on/off orienting of input geometry. When turned on, the
        orientation array specified using SetOrientationArray() will be
        used.
        """
        ...
    
    def OrientOn(self):
        """
        V.OrientOn()
        C++: virtual void OrientOn()
        
        Turn on/off orienting of input geometry. When turned on, the
        orientation array specified using SetOrientationArray() will be
        used.
        """
        ...
    
    def Render(self, vtkRenderer, vtkActor):
        """
        V.Render(vtkRenderer, vtkActor)
        C++: void Render(vtkRenderer *ren, vtkActor *act) override;
        
        All the work is done is derived classes.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGlyph3DMapper
        C++: static vtkGlyph3DMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScalingOff(self):
        """
        V.ScalingOff()
        C++: virtual void ScalingOff()
        
        Turn on/off scaling of source geometry. When turned on,
        ScaleFactor controls the scale applied. To scale with some data
        array, ScaleMode should be set accordingly.
        """
        ...
    
    def ScalingOn(self):
        """
        V.ScalingOn()
        C++: virtual void ScalingOn()
        
        Turn on/off scaling of source geometry. When turned on,
        ScaleFactor controls the scale applied. To scale with some data
        array, ScaleMode should be set accordingly.
        """
        ...
    
    def SetBlockAttributes(self, vtkCompositeDataDisplayAttributes):
        """
        V.SetBlockAttributes(vtkCompositeDataDisplayAttributes)
        C++: virtual void SetBlockAttributes(
            vtkCompositeDataDisplayAttributes *attr)
        
        When the input data object (not the source) is composite data, it
        is possible to control visibility and pickability on a per-block
        basis by passing the mapper a vtkCompositeDataDisplayAttributes
        instance. The color and opacity in the display-attributes
        instance are ignored for now. By default, the mapper does not own
        a display-attributes instance. The value of BlockAttributes has
        no effect when the input is a poly-data object.
        """
        ...
    
    def SetClamping(self, bool):
        """
        V.SetClamping(bool)
        C++: virtual void SetClamping(bool _arg)
        
        Turn on/off clamping of data values to scale with to the
        specified range.
        """
        ...
    
    def SetCullingAndLOD(self, bool):
        """
        V.SetCullingAndLOD(bool)
        C++: virtual void SetCullingAndLOD(bool _arg)
        
        Enable or disable frustum culling and LOD of the instances. When
        enabled, an OpenGL driver supporting GL_ARB_gpu_shader5 extension
        is mandatory.
        """
        ...
    
    def SetInputData(self, vtkDataObject):
        """
        V.SetInputData(vtkDataObject)
        C++: void SetInputData(vtkDataObject *)
        
        Assign a data object as input. Note that this method does not
        establish a pipeline connection. Use SetInputConnection() to
        setup a pipeline connection.
        """
        ...
    
    def SetLODColoring(self, bool):
        """
        V.SetLODColoring(bool)
        C++: virtual void SetLODColoring(bool _arg)
        
        Enable LOD coloring. It can be useful to configure properly the
        LODs. Each LOD have a unique color, based on its index.
        """
        ...
    
    def SetLODDistanceAndTargetReduction(self, p_int, p_float, p_float_1):
        """
        V.SetLODDistanceAndTargetReduction(int, float, float)
        C++: virtual void SetLODDistanceAndTargetReduction(
            vtkIdType index, float distance, float targetReduction)
        
        Configure LODs. Culling must be enabled. distance have to be a
        positive value, it is the distance to the camera scaled by the
        instanced geometry bounding box. targetReduction have to be
        between 0 and 1, 0 disable decimation, 1 draw a point. This
        method is intended to be reimplemented in inherited classes,
        current implementation does nothing.
        
        @sa vtkDecimatePro::SetTargetReduction
        """
        ...
    
    def SetMaskArray(self, string):
        """
        V.SetMaskArray(string)
        C++: void SetMaskArray(const char *maskarrayname)
        V.SetMaskArray(int)
        C++: void SetMaskArray(int fieldAttributeType)
        
        Set the name of the point array to use as a mask for generating
        the glyphs. This is a convenience method. The same effect can be
        achieved by using SetInputArrayToProcess(vtkGlyph3DMapper::MASK,
        0, 0, vtkDataObject::FIELD_ASSOCIATION_POINTS, maskarrayname)
        """
        ...
    
    def SetMasking(self, bool):
        """
        V.SetMasking(bool)
        C++: virtual void SetMasking(bool _arg)
        
        Tells the mapper to skip glyphing input points that haves false
        values in the mask array. If there is no mask array (id access
        mode is set and there is no such id, or array name access mode is
        set and the there is no such name), masking is silently ignored.
        A mask array is a vtkBitArray with only one component. Initial
        value is false.
        """
        ...
    
    def SetNumberOfLOD(self, p_int):
        """
        V.SetNumberOfLOD(int)
        C++: virtual void SetNumberOfLOD(vtkIdType nb)
        
        Set the number of LOD. This method is intended to be
        reimplemented in inherited classes, current implementation does
        nothing.
        """
        ...
    
    def SetOrient(self, bool):
        """
        V.SetOrient(bool)
        C++: virtual void SetOrient(bool _arg)
        
        Turn on/off orienting of input geometry. When turned on, the
        orientation array specified using SetOrientationArray() will be
        used.
        """
        ...
    
    def SetOrientationArray(self, string):
        """
        V.SetOrientationArray(string)
        C++: void SetOrientationArray(const char *orientationarrayname)
        V.SetOrientationArray(int)
        C++: void SetOrientationArray(int fieldAttributeType)
        
        Tells the mapper to use an orientation array if Orient is true.
        An orientation array is a vtkDataArray with 3 components. The
        first component is the angle of rotation along the X axis. The
        second component is the angle of rotation along the Y axis. The
        third component is the angle of rotation along the Z axis.
        Orientation is specified in X,Y,Z order but the rotations are
        performed in Z,X an Y. This definition is compliant with
        SetOrientation method on vtkProp3D. By using vector or normal
        there is a degree of freedom or rotation left (underconstrained).
        With the orientation array, there is no degree of freedom left.
        This is convenience method. The same effect can be achieved by
        using SetInputArrayToProcess(vtkGlyph3DMapper::ORIENTATION, 0, 0,
        vtkDataObject::FIELD_ASSOCIATION_POINTS, orientationarrayname);
        """
        ...
    
    def SetOrientationMode(self, p_int):
        """
        V.SetOrientationMode(int)
        C++: virtual void SetOrientationMode(int _arg)
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def SetOrientationModeToDirection(self):
        """
        V.SetOrientationModeToDirection()
        C++: void SetOrientationModeToDirection()
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def SetOrientationModeToQuaternion(self):
        """
        V.SetOrientationModeToQuaternion()
        C++: void SetOrientationModeToQuaternion()
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def SetOrientationModeToRotation(self):
        """
        V.SetOrientationModeToRotation()
        C++: void SetOrientationModeToRotation()
        
        Orientation mode indicates if the OrientationArray provides the
        direction vector for the orientation or the rotations around each
        axes. Default is DIRECTION
        """
        ...
    
    def SetRange(self, p_float, p_float_1):
        """
        V.SetRange(float, float)
        C++: virtual void SetRange(double _arg1, double _arg2)
        V.SetRange((float, float))
        C++: void SetRange(const double _arg[2])
        
        Specify range to map scalar values into.
        """
        ...
    
    def SetScaleArray(self, string):
        """
        V.SetScaleArray(string)
        C++: void SetScaleArray(const char *scalarsarrayname)
        V.SetScaleArray(int)
        C++: void SetScaleArray(int fieldAttributeType)
        
        Convenience method to set the array to scale with. This is same
        as calling SetInputArrayToProcess(vtkGlyph3DMapper::SCALE, 0, 0,
        vtkDataObject::FIELD_ASSOCIATION_POINTS, scalarsarrayname).
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Specify scale factor to scale object by. This is used only when
        Scaling is On.
        """
        ...
    
    def SetScaleMode(self, p_int):
        """
        V.SetScaleMode(int)
        C++: virtual void SetScaleMode(int _arg)
        
        Either scale by individual components (SCALE_BY_COMPONENTS) or
        magnitude (SCALE_BY_MAGNITUDE) of the chosen array to SCALE with
        or disable scaling using data array all together
        (NO_DATA_SCALING). Default is NO_DATA_SCALING.
        """
        ...
    
    def SetScaleModeToNoDataScaling(self):
        """
        V.SetScaleModeToNoDataScaling()
        C++: void SetScaleModeToNoDataScaling()
        """
        ...
    
    def SetScaleModeToScaleByMagnitude(self):
        """
        V.SetScaleModeToScaleByMagnitude()
        C++: void SetScaleModeToScaleByMagnitude()
        """
        ...
    
    def SetScaleModeToScaleByVectorComponents(self):
        """
        V.SetScaleModeToScaleByVectorComponents()
        C++: void SetScaleModeToScaleByVectorComponents()
        """
        ...
    
    def SetScaling(self, bool):
        """
        V.SetScaling(bool)
        C++: virtual void SetScaling(bool _arg)
        
        Turn on/off scaling of source geometry. When turned on,
        ScaleFactor controls the scale applied. To scale with some data
        array, ScaleMode should be set accordingly.
        """
        ...
    
    def SetSelectionColorId(self, p_int):
        """
        V.SetSelectionColorId(int)
        C++: virtual void SetSelectionColorId(unsigned int _arg)
        
        For selection by color id mode (not for end-user, called by
        vtkGlyphSelectionRenderMode). 0 is reserved for miss. it has to
        start at 1. Initial value is 1.
        """
        ...
    
    def SetSelectionIdArray(self, string):
        """
        V.SetSelectionIdArray(string)
        C++: void SetSelectionIdArray(const char *selectionIdArrayName)
        V.SetSelectionIdArray(int)
        C++: void SetSelectionIdArray(int fieldAttributeType)
        
        Convenience method to set the array used for selection IDs. This
        is same as calling
        SetInputArrayToProcess(vtkGlyph3DMapper::SELECTIONID, 0, 0,
        vtkDataObject::FIELD_ASSOCIATION_POINTS, selectionidarrayname).
        
        * If no selection id array is specified, the index of the glyph
          point is
        * used.
        """
        ...
    
    def SetSourceConnection(self, p_int, vtkAlgorithmOutput):
        """
        V.SetSourceConnection(int, vtkAlgorithmOutput)
        C++: void SetSourceConnection(int idx,
            vtkAlgorithmOutput *algOutput)
        V.SetSourceConnection(vtkAlgorithmOutput)
        C++: void SetSourceConnection(vtkAlgorithmOutput *algOutput)
        
        Specify a source object at a specified table location. New style.
        Source connection is stored in port 1. This method is equivalent
        to SetInputConnection(1, id, outputPort).
        """
        ...
    
    def SetSourceData(self, p_int, vtkPolyData):
        """
        V.SetSourceData(int, vtkPolyData)
        C++: void SetSourceData(int idx, vtkPolyData *pd)
        V.SetSourceData(vtkPolyData)
        C++: void SetSourceData(vtkPolyData *pd)
        
        Specify a source object at a specified table location.
        """
        ...
    
    def SetSourceIndexArray(self, string):
        """
        V.SetSourceIndexArray(string)
        C++: void SetSourceIndexArray(const char *arrayname)
        V.SetSourceIndexArray(int)
        C++: void SetSourceIndexArray(int fieldAttributeType)
        
        Convenience method to set the array to use as index within the
        sources. This is same as calling
        SetInputArrayToProcess(vtkGlyph3DMapper::SOURCE_INDEX, 0, 0,
        vtkDataObject::FIELD_ASSOCIATION_POINTS, arrayname).
        """
        ...
    
    def SetSourceIndexing(self, bool):
        """
        V.SetSourceIndexing(bool)
        C++: virtual void SetSourceIndexing(bool _arg)
        
        Enable/disable indexing into table of the glyph sources. When
        disabled, only the 1st source input will be used to generate the
        glyph. Otherwise the source index array will be used to select
        the glyph source. The source index array can be specified using
        SetSourceIndexArray().
        """
        ...
    
    def SetSourceTableTree(self, vtkDataObjectTree):
        """
        V.SetSourceTableTree(vtkDataObjectTree)
        C++: void SetSourceTableTree(vtkDataObjectTree *tree)
        
        Specify a data object tree that will be used for the source
        table. Requires UseSourceTableTree to be true. The top-level
        nodes of the tree are mapped to the source data inputs.
        
        Must only contain vtkPolyData instances on the OpenGL backend.
        May contain vtkCompositeDataSets with vtkPolyData leaves on
        OpenGL2.
        """
        ...
    
    def SetUseSelectionIds(self, bool):
        """
        V.SetUseSelectionIds(bool)
        C++: virtual void SetUseSelectionIds(bool _arg)
        
        Turn on/off custom selection ids. If enabled, the id values set
        with SetSelectionIdArray are returned from pick events.
        """
        ...
    
    def SetUseSourceTableTree(self, bool):
        """
        V.SetUseSourceTableTree(bool)
        C++: virtual void SetUseSourceTableTree(bool _arg)
        
        If true, and the glyph source dataset is a subclass of
        vtkDataObjectTree, the top-level members of the tree will be
        mapped to the glyph source table used for SourceIndexing.
        """
        ...
    
    def SourceIndexingOff(self):
        """
        V.SourceIndexingOff()
        C++: virtual void SourceIndexingOff()
        
        Enable/disable indexing into table of the glyph sources. When
        disabled, only the 1st source input will be used to generate the
        glyph. Otherwise the source index array will be used to select
        the glyph source. The source index array can be specified using
        SetSourceIndexArray().
        """
        ...
    
    def SourceIndexingOn(self):
        """
        V.SourceIndexingOn()
        C++: virtual void SourceIndexingOn()
        
        Enable/disable indexing into table of the glyph sources. When
        disabled, only the 1st source input will be used to generate the
        glyph. Otherwise the source index array will be used to select
        the glyph source. The source index array can be specified using
        SetSourceIndexArray().
        """
        ...
    
    def UseSelectionIdsOff(self):
        """
        V.UseSelectionIdsOff()
        C++: virtual void UseSelectionIdsOff()
        
        Turn on/off custom selection ids. If enabled, the id values set
        with SetSelectionIdArray are returned from pick events.
        """
        ...
    
    def UseSelectionIdsOn(self):
        """
        V.UseSelectionIdsOn()
        C++: virtual void UseSelectionIdsOn()
        
        Turn on/off custom selection ids. If enabled, the id values set
        with SetSelectionIdArray are returned from pick events.
        """
        ...
    
    def UseSourceTableTreeOff(self):
        """
        V.UseSourceTableTreeOff()
        C++: virtual void UseSourceTableTreeOff()
        
        If true, and the glyph source dataset is a subclass of
        vtkDataObjectTree, the top-level members of the tree will be
        mapped to the glyph source table used for SourceIndexing.
        """
        ...
    
    def UseSourceTableTreeOn(self):
        """
        V.UseSourceTableTreeOn()
        C++: virtual void UseSourceTableTreeOn()
        
        If true, and the glyph source dataset is a subclass of
        vtkDataObjectTree, the top-level members of the tree will be
        mapped to the glyph source table used for SourceIndexing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ArrayIndexes = ...
    DIRECTION = ...
    MASK = ...
    NO_DATA_SCALING = ...
    ORIENTATION = ...
    OrientationModes = ...
    QUATERNION = ...
    ROTATION = ...
    SCALE = ...
    ScaleModes = ...
    SCALE_BY_COMPONENTS = ...
    SCALE_BY_MAGNITUDE = ...
    SELECTIONID = ...
    SOURCE_INDEX = ...
    __dict__ = ...
    __vtkname__ = ...


