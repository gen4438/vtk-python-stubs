"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkAssemblyNode(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAssemblyNode - represent a node in an assembly
    
    Superclass: vtkObject
    
    vtkAssemblyNode represents a node in an assembly. It is used by
    vtkAssemblyPath to create hierarchical assemblies of props. The props
    can be either 2D or 3D.
    
    An assembly node refers to a vtkProp, and possibly a vtkMatrix4x4.
    Nodes are used by vtkAssemblyPath to build fully evaluated path
    (matrices are concatenated through the path) that is used by picking
    and other operations involving assemblies.
    
    @warning
    The assembly node is guaranteed to contain a reference to an instance
    of vtkMatrix4x4 if the prop referred to by the node is of type
    vtkProp3D (or subclass). The matrix is evaluated through the assembly
    path, so the assembly node's matrix is a function of its location in
    the vtkAssemblyPath.
    
    @warning
    vtkAssemblyNode does not reference count its association with
    vtkProp. Therefore, do not create an assembly node, associate a prop
    with it, delete the prop, and then try to dereference the prop. The
    program will break! (Reason: vtkAssemblyPath (which uses
    vtkAssemblyNode) create self-referencing loops that destroy reference
    counting.)
    
    @sa
    vtkAssemblyPath vtkProp vtkPicker vtkMatrix4x4
    """
    def GetMatrix(self):
        """
        V.GetMatrix() -> vtkMatrix4x4
        C++: virtual vtkMatrix4x4 *GetMatrix()
        
        Specify a transformation matrix associated with the prop. Note:
        if the prop is not a type of vtkProp3D, then the transformation
        matrix is ignored (and expected to be NULL). Also, internal to
        this object the matrix is copied because the matrix is used for
        computation by vtkAssemblyPath.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override the standard GetMTime() to check for the modified times
        of the prop and matrix.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetViewProp(self):
        """
        V.GetViewProp() -> vtkProp
        C++: virtual vtkProp *GetViewProp()
        
        Set/Get the prop that this assembly node refers to.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAssemblyNode
        C++: vtkAssemblyNode *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAssemblyNode
        C++: static vtkAssemblyNode *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMatrix(self, vtkMatrix4x4):
        """
        V.SetMatrix(vtkMatrix4x4)
        C++: void SetMatrix(vtkMatrix4x4 *matrix)
        
        Specify a transformation matrix associated with the prop. Note:
        if the prop is not a type of vtkProp3D, then the transformation
        matrix is ignored (and expected to be NULL). Also, internal to
        this object the matrix is copied because the matrix is used for
        computation by vtkAssemblyPath.
        """
        ...
    
    def SetViewProp(self, vtkProp):
        """
        V.SetViewProp(vtkProp)
        C++: virtual void SetViewProp(vtkProp *prop)
        
        Set/Get the prop that this assembly node refers to.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


