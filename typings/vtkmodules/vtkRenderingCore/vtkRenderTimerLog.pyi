"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkRenderTimerLog(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkRenderTimerLog - Asynchronously measures GPU execution times for a
    series of events.
    
    Superclass: vtkObject
    
    This class measures the time it takes for events to occur on the GPU
    by posting timing events into the rendering command stream. This can
    be used to compute the time spent doing work on the GPU without
    stalling the CPU.
    
    To aid asynchronous usage, this class uses the concepts "Event" and
    "Frame", where a Frame is a logical collection of Events. The timer
    log can manage multiple Frames at a time:
    - The current Frame, where new Events are created.
    - Pending Frames, for which all Events have been marked, but the
      results are not available (the timer requests are still waiting to
      be processed by the graphics device).
    - Ready Frames, which have been completed by the graphics device and
      may be retrieved.
    
    Call MarkFrame() to begin a new Frame. This pushes the current Frame
    to the collection of pending Frames, and creates a new one to store
    future Events.
    
    Call MarkStartEvent() and MarkEndEvent() to mark the beginning and
    end of an Event. These Events may be nested, but all child Events
    must have their end marked before the parent Event ends.
    
    Use FrameReady() and PopFirstReadyFrame() to check for completed
    Frames and retrieve results.
    
    This is currently only implemented for the OpenGL2 backend. The
    IsSupported() method can be used to detect if there is a valid
    implementation available.
    """
    def FrameReady(self):
        """
        V.FrameReady() -> bool
        C++: virtual bool FrameReady()
        
        Returns true if there are any frames ready with complete timing
        info.
        """
        ...
    
    def GetFrameLimit(self):
        """
        V.GetFrameLimit() -> int
        C++: virtual unsigned int GetFrameLimit()
        """
        ...
    
    def GetLoggingEnabled(self):
        """
        V.GetLoggingEnabled() -> bool
        C++: virtual bool GetLoggingEnabled()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsSupported(self):
        """
        V.IsSupported() -> bool
        C++: virtual bool IsSupported()
        
        Returns true if stream timings are implemented for the current
        graphics backend.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LoggingEnabledOff(self):
        """
        V.LoggingEnabledOff()
        C++: virtual void LoggingEnabledOff()
        """
        ...
    
    def LoggingEnabledOn(self):
        """
        V.LoggingEnabledOn()
        C++: virtual void LoggingEnabledOn()
        """
        ...
    
    def MarkEndEvent(self):
        """
        V.MarkEndEvent()
        C++: virtual void MarkEndEvent()
        """
        ...
    
    def MarkFrame(self):
        """
        V.MarkFrame()
        C++: virtual void MarkFrame()
        
        Call to mark the start of a new frame, or the end of an old one.
        Does nothing if no events have been recorded in the current
        frame.
        """
        ...
    
    def MarkStartEvent(self, string):
        """
        V.MarkStartEvent(string)
        C++: virtual void MarkStartEvent(const std::string &name)
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderTimerLog
        C++: vtkRenderTimerLog *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self):
        """
        V.ReleaseGraphicsResources()
        C++: virtual void ReleaseGraphicsResources()
        
        Releases any resources allocated on the graphics device.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderTimerLog
        C++: static vtkRenderTimerLog *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFrameLimit(self, p_int):
        """
        V.SetFrameLimit(int)
        C++: virtual void SetFrameLimit(unsigned int _arg)
        """
        ...
    
    def SetLoggingEnabled(self, bool):
        """
        V.SetLoggingEnabled(bool)
        C++: virtual void SetLoggingEnabled(bool _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


