"""
This type stub file was generated by pyright.
"""

from .vtkAbstractMapper import vtkAbstractMapper

class vtkMapper2D(vtkAbstractMapper):
    """
    vtkMapper2D - abstract class specifies interface for objects which
    render 2D actors
    
    Superclass: vtkAbstractMapper
    
    vtkMapper2D is an abstract class which defines the interface for
    objects which render two dimensional actors (vtkActor2D).
    
    @sa
    vtkActor2D
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: virtual vtkTypeBool HasTranslucentPolygonalGeometry()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMapper2D
        C++: vtkMapper2D *NewInstance()
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport, vtkActor2D):
        """
        V.RenderOpaqueGeometry(vtkViewport, vtkActor2D)
        C++: virtual void RenderOpaqueGeometry(vtkViewport *,
            vtkActor2D *)
        """
        ...
    
    def RenderOverlay(self, vtkViewport, vtkActor2D):
        """
        V.RenderOverlay(vtkViewport, vtkActor2D)
        C++: virtual void RenderOverlay(vtkViewport *, vtkActor2D *)
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport, vtkActor2D):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport, vtkActor2D)
        C++: virtual void RenderTranslucentPolygonalGeometry(
            vtkViewport *, vtkActor2D *)
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMapper2D
        C++: static vtkMapper2D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


