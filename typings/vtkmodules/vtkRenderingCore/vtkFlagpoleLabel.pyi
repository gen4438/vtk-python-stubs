"""
This type stub file was generated by pyright.
"""

from .vtkActor import vtkActor

class vtkFlagpoleLabel(vtkActor):
    """
    vtkFlagpoleLabel - Renders a flagpole (line) with a label at the top
    that faces the camera
    
    Superclass: vtkActor
    
    This class draws a line from the base to the top of the flagpole. It
    then places a text annotation at the top, centered horizontally. The
    text is always oriented with the flagpole but will rotate aroundthe
    flagpole to face the camera.
    """
    def ForceOpaqueOff(self):
        """
        V.ForceOpaqueOff()
        C++: void ForceOpaqueOff() override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def ForceOpaqueOn(self):
        """
        V.ForceOpaqueOn()
        C++: void ForceOpaqueOn() override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def ForceTranslucentOff(self):
        """
        V.ForceTranslucentOff()
        C++: void ForceTranslucentOff() override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def ForceTranslucentOn(self):
        """
        V.ForceTranslucentOn()
        C++: void ForceTranslucentOn() override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def GetBasePosition(self):
        """
        V.GetBasePosition() -> (float, float, float)
        C++: virtual double *GetBasePosition()
        
        Set/Get the world coordinate position of the base
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        
        Get the bounds for this Prop3D as
        (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        """
        ...
    
    def GetFlagSize(self):
        """
        V.GetFlagSize() -> float
        C++: virtual double GetFlagSize()
        
        Set/Get the size of the flag. 1.0 is the default size which
        corresponds to a preset texels/window value. Adjust this to
        increase or decrease the default size.
        """
        ...
    
    def GetForceOpaque(self):
        """
        V.GetForceOpaque() -> bool
        C++: bool GetForceOpaque() override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def GetForceTranslucent(self):
        """
        V.GetForceTranslucent() -> bool
        C++: bool GetForceTranslucent() override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> string
        C++: virtual char *GetInput()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetTextProperty(self):
        """
        V.GetTextProperty() -> vtkTextProperty
        C++: virtual vtkTextProperty *GetTextProperty()
        """
        ...
    
    def GetTopPosition(self):
        """
        V.GetTopPosition() -> (float, float, float)
        C++: virtual double *GetTopPosition()
        
        Set/Get the world coordinate position of the top
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Defers to internal actor.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkFlagpoleLabel
        C++: vtkFlagpoleLabel *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *win) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *vp) override;
        
        Check/update geometry/texture in opaque pass, since it only
        happens once.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *vp)
            override;
        
        Just render in translucent pass, since it can execute multiple
        times (depth peeling, for instance).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkFlagpoleLabel
        C++: static vtkFlagpoleLabel *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBasePosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetBasePosition(float, float, float)
        C++: void SetBasePosition(double x, double y, double z)
        """
        ...
    
    def SetFlagSize(self, p_float):
        """
        V.SetFlagSize(float)
        C++: virtual void SetFlagSize(double _arg)
        """
        ...
    
    def SetForceOpaque(self, bool):
        """
        V.SetForceOpaque(bool)
        C++: void SetForceOpaque(bool opaque) override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def SetForceTranslucent(self, bool):
        """
        V.SetForceTranslucent(bool)
        C++: void SetForceTranslucent(bool trans) override;
        
        Force the actor to be treated as opaque or translucent
        """
        ...
    
    def SetInput(self, string):
        """
        V.SetInput(string)
        C++: void SetInput(const char *in)
        """
        ...
    
    def SetTextProperty(self, vtkTextProperty):
        """
        V.SetTextProperty(vtkTextProperty)
        C++: void SetTextProperty(vtkTextProperty *tprop)
        """
        ...
    
    def SetTopPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetTopPosition(float, float, float)
        C++: void SetTopPosition(double x, double y, double z)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


