"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkTexture(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkTexture - handles properties associated with a texture map
    
    Superclass: vtkImageAlgorithm
    
    vtkTexture is an object that handles loading and binding of texture
    maps. It obtains its data from an input image data dataset type. Thus
    you can create visualization pipelines to read, process, and
    construct textures. Note that textures will only work if texture
    coordinates are also defined, and if the rendering system supports
    texture.
    
    Instances of vtkTexture are associated with actors via the actor's
    SetTexture() method. Actors can share texture maps (this is
    encouraged to save memory resources.)
    
    @warning
    Currently only 2D texture maps are supported, even though the data
    pipeline supports 1,2, and 3D texture coordinates.
    
    @warning
    Some renderers such as old OpenGL require that the texture map
    dimensions are a power of two in each direction. If a non-power of
    two texture map is used, it is automatically resampled to a power of
    two in one or more directions, at the cost of an expensive
    computation. If the OpenGL implementation is recent enough
    (OpenGL>=2.0 or extension GL_ARB_texture_non_power_of_two exists)
    there is no such restriction and no extra computational cost.
    @sa
    vtkActor vtkRenderer vtkOpenGLTexture
    """
    def CubeMapOff(self):
        """
        V.CubeMapOff()
        C++: virtual void CubeMapOff()
        
        Is this texture a cube map, if so it needs 6 inputs one for each
        side of the cube. You must set this before connecting the inputs.
        The inputs must all have the same size, data type, and depth
        """
        ...
    
    def CubeMapOn(self):
        """
        V.CubeMapOn()
        C++: virtual void CubeMapOn()
        
        Is this texture a cube map, if so it needs 6 inputs one for each
        side of the cube. You must set this before connecting the inputs.
        The inputs must all have the same size, data type, and depth
        """
        ...
    
    def EdgeClampOff(self):
        """
        V.EdgeClampOff()
        C++: virtual void EdgeClampOff()
        
        Turn on/off the clamping of the texture map when the texture
        coords extend beyond the [0,1] range. Only used when Repeat is
        off, and edge clamping is supported by the graphics card.
        """
        ...
    
    def EdgeClampOn(self):
        """
        V.EdgeClampOn()
        C++: virtual void EdgeClampOn()
        
        Turn on/off the clamping of the texture map when the texture
        coords extend beyond the [0,1] range. Only used when Repeat is
        off, and edge clamping is supported by the graphics card.
        """
        ...
    
    def GetBlendingMode(self):
        """
        V.GetBlendingMode() -> int
        C++: virtual int GetBlendingMode()
        
        Used to specify how the texture will blend its RGB and Alpha
        values with other textures and the fragment the texture is
        rendered upon.
        """
        ...
    
    def GetColorMode(self):
        """
        V.GetColorMode() -> int
        C++: virtual int GetColorMode()
        
        Default: ColorModeToDefault. unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table (set with
        SetLookupTable), while other kinds of scalars are.
        ColorModeToDirectScalar extends ColorModeToDefault such that all
        integer types are treated as colors with values in the range
        0-255 and floating types are treated as colors with values in the
        range 0.0-1.0. Setting ColorModeToMapScalars means that all
        scalar data will be mapped through the lookup table.
        """
        ...
    
    def GetCubeMap(self):
        """
        V.GetCubeMap() -> bool
        C++: virtual bool GetCubeMap()
        
        Is this texture a cube map, if so it needs 6 inputs one for each
        side of the cube. You must set this before connecting the inputs.
        The inputs must all have the same size, data type, and depth
        """
        ...
    
    def GetEdgeClamp(self):
        """
        V.GetEdgeClamp() -> int
        C++: virtual vtkTypeBool GetEdgeClamp()
        
        Turn on/off the clamping of the texture map when the texture
        coords extend beyond the [0,1] range. Only used when Repeat is
        off, and edge clamping is supported by the graphics card.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: vtkImageData *GetInput()
        
        Get the input as a vtkImageData object.  This method is for
        backwards compatibility.
        """
        ...
    
    def GetInterpolate(self):
        """
        V.GetInterpolate() -> int
        C++: virtual vtkTypeBool GetInterpolate()
        
        Turn on/off linear interpolation of the texture map when
        rendering.
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkScalarsToColors
        C++: virtual vtkScalarsToColors *GetLookupTable()
        
        Specify the lookup table to convert scalars if necessary
        """
        ...
    
    def GetMappedScalars(self):
        """
        V.GetMappedScalars() -> vtkUnsignedCharArray
        C++: virtual vtkUnsignedCharArray *GetMappedScalars()
        
        Get Mapped Scalars
        """
        ...
    
    def GetMaximumAnisotropicFiltering(self):
        """
        V.GetMaximumAnisotropicFiltering() -> float
        C++: virtual float GetMaximumAnisotropicFiltering()
        
        Set/Get the maximum anisotropic filtering to use. 1.0 means use
        no anisotropic filtering. The default value is 4.0 and a high
        value would be 16. This setting is only applied when mipmaps are
        used. This might not be supported on all machines.
        """
        ...
    
    def GetMipmap(self):
        """
        V.GetMipmap() -> bool
        C++: virtual bool GetMipmap()
        
        Turn on/off use of mipmaps when rendering.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPremultipliedAlpha(self):
        """
        V.GetPremultipliedAlpha() -> bool
        C++: virtual bool GetPremultipliedAlpha()
        
        Whether the texture colors are premultiplied by alpha. Initial
        value is false.
        """
        ...
    
    def GetQuality(self):
        """
        V.GetQuality() -> int
        C++: virtual int GetQuality()
        
        Force texture quality to 16-bit or 32-bit. This might not be
        supported on all machines.
        """
        ...
    
    def GetRepeat(self):
        """
        V.GetRepeat() -> int
        C++: virtual vtkTypeBool GetRepeat()
        
        Turn on/off the repetition of the texture map when the texture
        coords extend beyond the [0,1] range.
        """
        ...
    
    def GetRestrictPowerOf2ImageSmaller(self):
        """
        V.GetRestrictPowerOf2ImageSmaller() -> int
        C++: virtual vtkTypeBool GetRestrictPowerOf2ImageSmaller()
        
        When the texture is forced to be a power of 2, the default
        behavior is for the "new" image's dimensions to be greater than
        or equal to with respects to the original.  Setting
        RestrictPowerOf2ImageSmaller to be 1 (or ON) with force the new
        image's dimensions to be less than or equal to with respects to
        the original.
        """
        ...
    
    def GetTextureUnit(self):
        """
        V.GetTextureUnit() -> int
        C++: virtual int GetTextureUnit()
        
        Return the texture unit used for this texture
        """
        ...
    
    def GetTransform(self):
        """
        V.GetTransform() -> vtkTransform
        C++: virtual vtkTransform *GetTransform()
        
        Set a transform on the texture which allows one to scale, rotate
        and translate the texture.
        """
        ...
    
    def GetUseSRGBColorSpace(self):
        """
        V.GetUseSRGBColorSpace() -> bool
        C++: virtual bool GetUseSRGBColorSpace()
        
        Is this texture using the sRGB color space. If you are using a
        sRGB framebuffer or window then you probably also want to be
        using sRGB color textures for proper handling of gamma and
        associated color mixing.
        """
        ...
    
    def InterpolateOff(self):
        """
        V.InterpolateOff()
        C++: virtual void InterpolateOff()
        
        Turn on/off linear interpolation of the texture map when
        rendering.
        """
        ...
    
    def InterpolateOn(self):
        """
        V.InterpolateOn()
        C++: virtual void InterpolateOn()
        
        Turn on/off linear interpolation of the texture map when
        rendering.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTranslucent(self):
        """
        V.IsTranslucent() -> int
        C++: virtual int IsTranslucent()
        
        Is this Texture Translucent? returns false (0) if the texture is
        either fully opaque or has only fully transparent pixels and
        fully opaque pixels and the Interpolate flag is turn off.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def Load(self, vtkRenderer):
        """
        V.Load(vtkRenderer)
        C++: virtual void Load(vtkRenderer *)
        
        Abstract interface to renderer. Each concrete subclass of
        vtkTexture will load its data into graphics system in response to
        this method invocation.
        """
        ...
    
    def MapScalarsToColors(self, vtkDataArray):
        """
        V.MapScalarsToColors(vtkDataArray) -> (int, ...)
        C++: unsigned char *MapScalarsToColors(vtkDataArray *scalars)
        
        Map scalar values into color scalars.
        """
        ...
    
    def MipmapOff(self):
        """
        V.MipmapOff()
        C++: virtual void MipmapOff()
        
        Turn on/off use of mipmaps when rendering.
        """
        ...
    
    def MipmapOn(self):
        """
        V.MipmapOn()
        C++: virtual void MipmapOn()
        
        Turn on/off use of mipmaps when rendering.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkTexture
        C++: vtkTexture *NewInstance()
        """
        ...
    
    def PostRender(self, vtkRenderer):
        """
        V.PostRender(vtkRenderer)
        C++: virtual void PostRender(vtkRenderer *)
        
        Cleans up after the texture rendering to restore the state of the
        graphics context.
        """
        ...
    
    def PremultipliedAlphaOff(self):
        """
        V.PremultipliedAlphaOff()
        C++: virtual void PremultipliedAlphaOff()
        
        Whether the texture colors are premultiplied by alpha. Initial
        value is false.
        """
        ...
    
    def PremultipliedAlphaOn(self):
        """
        V.PremultipliedAlphaOn()
        C++: virtual void PremultipliedAlphaOn()
        
        Whether the texture colors are premultiplied by alpha. Initial
        value is false.
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *)
        
        Release any graphics resources that are being consumed by this
        texture. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def Render(self, vtkRenderer):
        """
        V.Render(vtkRenderer)
        C++: virtual void Render(vtkRenderer *ren)
        
        Renders a texture map. It first checks the object's modified time
        to make sure the texture maps Input is valid, then it invokes the
        Load() method.
        """
        ...
    
    def RepeatOff(self):
        """
        V.RepeatOff()
        C++: virtual void RepeatOff()
        
        Turn on/off the repetition of the texture map when the texture
        coords extend beyond the [0,1] range.
        """
        ...
    
    def RepeatOn(self):
        """
        V.RepeatOn()
        C++: virtual void RepeatOn()
        
        Turn on/off the repetition of the texture map when the texture
        coords extend beyond the [0,1] range.
        """
        ...
    
    def RestrictPowerOf2ImageSmallerOff(self):
        """
        V.RestrictPowerOf2ImageSmallerOff()
        C++: virtual void RestrictPowerOf2ImageSmallerOff()
        
        When the texture is forced to be a power of 2, the default
        behavior is for the "new" image's dimensions to be greater than
        or equal to with respects to the original.  Setting
        RestrictPowerOf2ImageSmaller to be 1 (or ON) with force the new
        image's dimensions to be less than or equal to with respects to
        the original.
        """
        ...
    
    def RestrictPowerOf2ImageSmallerOn(self):
        """
        V.RestrictPowerOf2ImageSmallerOn()
        C++: virtual void RestrictPowerOf2ImageSmallerOn()
        
        When the texture is forced to be a power of 2, the default
        behavior is for the "new" image's dimensions to be greater than
        or equal to with respects to the original.  Setting
        RestrictPowerOf2ImageSmaller to be 1 (or ON) with force the new
        image's dimensions to be less than or equal to with respects to
        the original.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkTexture
        C++: static vtkTexture *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBlendingMode(self, p_int):
        """
        V.SetBlendingMode(int)
        C++: virtual void SetBlendingMode(int _arg)
        
        Used to specify how the texture will blend its RGB and Alpha
        values with other textures and the fragment the texture is
        rendered upon.
        """
        ...
    
    def SetColorMode(self, p_int):
        """
        V.SetColorMode(int)
        C++: virtual void SetColorMode(int _arg)
        
        Default: ColorModeToDefault. unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table (set with
        SetLookupTable), while other kinds of scalars are.
        ColorModeToDirectScalar extends ColorModeToDefault such that all
        integer types are treated as colors with values in the range
        0-255 and floating types are treated as colors with values in the
        range 0.0-1.0. Setting ColorModeToMapScalars means that all
        scalar data will be mapped through the lookup table.
        """
        ...
    
    def SetColorModeToDefault(self):
        """
        V.SetColorModeToDefault()
        C++: void SetColorModeToDefault()
        
        Default: ColorModeToDefault. unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table (set with
        SetLookupTable), while other kinds of scalars are.
        ColorModeToDirectScalar extends ColorModeToDefault such that all
        integer types are treated as colors with values in the range
        0-255 and floating types are treated as colors with values in the
        range 0.0-1.0. Setting ColorModeToMapScalars means that all
        scalar data will be mapped through the lookup table.
        """
        ...
    
    def SetColorModeToDirectScalars(self):
        """
        V.SetColorModeToDirectScalars()
        C++: void SetColorModeToDirectScalars()
        
        Default: ColorModeToDefault. unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table (set with
        SetLookupTable), while other kinds of scalars are.
        ColorModeToDirectScalar extends ColorModeToDefault such that all
        integer types are treated as colors with values in the range
        0-255 and floating types are treated as colors with values in the
        range 0.0-1.0. Setting ColorModeToMapScalars means that all
        scalar data will be mapped through the lookup table.
        """
        ...
    
    def SetColorModeToMapScalars(self):
        """
        V.SetColorModeToMapScalars()
        C++: void SetColorModeToMapScalars()
        
        Default: ColorModeToDefault. unsigned char scalars are treated as
        colors, and NOT mapped through the lookup table (set with
        SetLookupTable), while other kinds of scalars are.
        ColorModeToDirectScalar extends ColorModeToDefault such that all
        integer types are treated as colors with values in the range
        0-255 and floating types are treated as colors with values in the
        range 0.0-1.0. Setting ColorModeToMapScalars means that all
        scalar data will be mapped through the lookup table.
        """
        ...
    
    def SetCubeMap(self, bool):
        """
        V.SetCubeMap(bool)
        C++: void SetCubeMap(bool val)
        
        Is this texture a cube map, if so it needs 6 inputs one for each
        side of the cube. You must set this before connecting the inputs.
        The inputs must all have the same size, data type, and depth
        """
        ...
    
    def SetEdgeClamp(self, p_int):
        """
        V.SetEdgeClamp(int)
        C++: virtual void SetEdgeClamp(vtkTypeBool _arg)
        
        Turn on/off the clamping of the texture map when the texture
        coords extend beyond the [0,1] range. Only used when Repeat is
        off, and edge clamping is supported by the graphics card.
        """
        ...
    
    def SetInterpolate(self, p_int):
        """
        V.SetInterpolate(int)
        C++: virtual void SetInterpolate(vtkTypeBool _arg)
        
        Turn on/off linear interpolation of the texture map when
        rendering.
        """
        ...
    
    def SetLookupTable(self, vtkScalarsToColors):
        """
        V.SetLookupTable(vtkScalarsToColors)
        C++: void SetLookupTable(vtkScalarsToColors *)
        
        Specify the lookup table to convert scalars if necessary
        """
        ...
    
    def SetMaximumAnisotropicFiltering(self, p_float):
        """
        V.SetMaximumAnisotropicFiltering(float)
        C++: virtual void SetMaximumAnisotropicFiltering(float _arg)
        
        Set/Get the maximum anisotropic filtering to use. 1.0 means use
        no anisotropic filtering. The default value is 4.0 and a high
        value would be 16. This setting is only applied when mipmaps are
        used. This might not be supported on all machines.
        """
        ...
    
    def SetMipmap(self, bool):
        """
        V.SetMipmap(bool)
        C++: virtual void SetMipmap(bool _arg)
        
        Turn on/off use of mipmaps when rendering.
        """
        ...
    
    def SetPremultipliedAlpha(self, bool):
        """
        V.SetPremultipliedAlpha(bool)
        C++: virtual void SetPremultipliedAlpha(bool _arg)
        
        Whether the texture colors are premultiplied by alpha. Initial
        value is false.
        """
        ...
    
    def SetQuality(self, p_int):
        """
        V.SetQuality(int)
        C++: virtual void SetQuality(int _arg)
        
        Force texture quality to 16-bit or 32-bit. This might not be
        supported on all machines.
        """
        ...
    
    def SetQualityTo16Bit(self):
        """
        V.SetQualityTo16Bit()
        C++: void SetQualityTo16Bit()
        
        Force texture quality to 16-bit or 32-bit. This might not be
        supported on all machines.
        """
        ...
    
    def SetQualityTo32Bit(self):
        """
        V.SetQualityTo32Bit()
        C++: void SetQualityTo32Bit()
        
        Force texture quality to 16-bit or 32-bit. This might not be
        supported on all machines.
        """
        ...
    
    def SetQualityToDefault(self):
        """
        V.SetQualityToDefault()
        C++: void SetQualityToDefault()
        
        Force texture quality to 16-bit or 32-bit. This might not be
        supported on all machines.
        """
        ...
    
    def SetRepeat(self, p_int):
        """
        V.SetRepeat(int)
        C++: virtual void SetRepeat(vtkTypeBool _arg)
        
        Turn on/off the repetition of the texture map when the texture
        coords extend beyond the [0,1] range.
        """
        ...
    
    def SetRestrictPowerOf2ImageSmaller(self, p_int):
        """
        V.SetRestrictPowerOf2ImageSmaller(int)
        C++: virtual void SetRestrictPowerOf2ImageSmaller(
            vtkTypeBool _arg)
        
        When the texture is forced to be a power of 2, the default
        behavior is for the "new" image's dimensions to be greater than
        or equal to with respects to the original.  Setting
        RestrictPowerOf2ImageSmaller to be 1 (or ON) with force the new
        image's dimensions to be less than or equal to with respects to
        the original.
        """
        ...
    
    def SetTransform(self, vtkTransform):
        """
        V.SetTransform(vtkTransform)
        C++: void SetTransform(vtkTransform *transform)
        
        Set a transform on the texture which allows one to scale, rotate
        and translate the texture.
        """
        ...
    
    def SetUseSRGBColorSpace(self, bool):
        """
        V.SetUseSRGBColorSpace(bool)
        C++: virtual void SetUseSRGBColorSpace(bool _arg)
        
        Is this texture using the sRGB color space. If you are using a
        sRGB framebuffer or window then you probably also want to be
        using sRGB color textures for proper handling of gamma and
        associated color mixing.
        """
        ...
    
    def UseSRGBColorSpaceOff(self):
        """
        V.UseSRGBColorSpaceOff()
        C++: virtual void UseSRGBColorSpaceOff()
        
        Is this texture using the sRGB color space. If you are using a
        sRGB framebuffer or window then you probably also want to be
        using sRGB color textures for proper handling of gamma and
        associated color mixing.
        """
        ...
    
    def UseSRGBColorSpaceOn(self):
        """
        V.UseSRGBColorSpaceOn()
        C++: virtual void UseSRGBColorSpaceOn()
        
        Is this texture using the sRGB color space. If you are using a
        sRGB framebuffer or window then you probably also want to be
        using sRGB color textures for proper handling of gamma and
        associated color mixing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    VTKTextureBlendingMode = ...
    VTK_TEXTURE_BLENDING_MODE_ADD = ...
    VTK_TEXTURE_BLENDING_MODE_ADD_SIGNED = ...
    VTK_TEXTURE_BLENDING_MODE_INTERPOLATE = ...
    VTK_TEXTURE_BLENDING_MODE_MODULATE = ...
    VTK_TEXTURE_BLENDING_MODE_NONE = ...
    VTK_TEXTURE_BLENDING_MODE_REPLACE = ...
    VTK_TEXTURE_BLENDING_MODE_SUBTRACT = ...
    __dict__ = ...
    __vtkname__ = ...


