"""
This type stub file was generated by pyright.
"""

from .vtkImageMapper3D import vtkImageMapper3D

class vtkImageSliceMapper(vtkImageMapper3D):
    """
    vtkImageSliceMapper - map a slice of a vtkImageData to the screen
    
    Superclass: vtkImageMapper3D
    
    vtkImageSliceMapper is a mapper that will draw a 2D image, or a slice
    of a 3D image.  For 3D images, the slice may be oriented in the X, Y,
    or Z direction.  This mapper works via 2D textures with accelerated
    zoom and pan operations.@par Thanks: Thanks to David Gobbi at the
    Seaman Family MR Centre and Dept. of Clinical Neurosciences,
    Foothills Medical Centre, Calgary, for providing this class.
    @sa
    vtkImageSlice vtkImageProperty vtkImageResliceMapper
    """
    def CroppingOff(self):
        """
        V.CroppingOff()
        C++: virtual void CroppingOff()
        
        Use the specified CroppingRegion.  The default is to display the
        full slice.
        """
        ...
    
    def CroppingOn(self):
        """
        V.CroppingOn()
        C++: virtual void CroppingOn()
        
        Use the specified CroppingRegion.  The default is to display the
        full slice.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6]) override;
        
        The bounding box (array of six doubles) of data expressed as
        (xmin,xmax, ymin,ymax, zmin,zmax).
        """
        ...
    
    def GetCropping(self):
        """
        V.GetCropping() -> int
        C++: virtual vtkTypeBool GetCropping()
        
        Use the specified CroppingRegion.  The default is to display the
        full slice.
        """
        ...
    
    def GetCroppingRegion(self):
        """
        V.GetCroppingRegion() -> (int, int, int, int, int, int)
        C++: virtual int *GetCroppingRegion()
        
        Set the display extent.  This is ignored unless Cropping is set.
        """
        ...
    
    def GetIndexBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetIndexBounds([float, float, float, float, float, float])
        C++: void GetIndexBounds(double extent[6]) override;
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the mtime for the mapper.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> int
        C++: virtual int GetOrientation()
        
        Set the orientation of the slices to display.  The default
        orientation is 2, which is K. Not the orientaiton here is in
        index space. Not physical or world.
        """
        ...
    
    def GetOrientationMaxValue(self):
        """
        V.GetOrientationMaxValue() -> int
        C++: virtual int GetOrientationMaxValue()
        
        Set the orientation of the slices to display.  The default
        orientation is 2, which is K. Not the orientaiton here is in
        index space. Not physical or world.
        """
        ...
    
    def GetOrientationMinValue(self):
        """
        V.GetOrientationMinValue() -> int
        C++: virtual int GetOrientationMinValue()
        
        Set the orientation of the slices to display.  The default
        orientation is 2, which is K. Not the orientaiton here is in
        index space. Not physical or world.
        """
        ...
    
    def GetSliceNumber(self):
        """
        V.GetSliceNumber() -> int
        C++: virtual int GetSliceNumber()
        
        The slice to display, if there are multiple slices.
        """
        ...
    
    def GetSliceNumberMaxValue(self):
        """
        V.GetSliceNumberMaxValue() -> int
        C++: virtual int GetSliceNumberMaxValue()
        
        Use GetSliceNumberMinValue() and GetSliceNumberMaxValue() to get
        the range of allowed slices.  These methods call
        UpdateInformation as a side-effect.
        """
        ...
    
    def GetSliceNumberMinValue(self):
        """
        V.GetSliceNumberMinValue() -> int
        C++: virtual int GetSliceNumberMinValue()
        
        Use GetSliceNumberMinValue() and GetSliceNumberMaxValue() to get
        the range of allowed slices.  These methods call
        UpdateInformation as a side-effect.
        """
        ...
    
    def GetSlicePlaneInDataCoords(self, vtkMatrix4x4, p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetSlicePlaneInDataCoords(vtkMatrix4x4, [float, float, float,
            float])
        C++: void GetSlicePlaneInDataCoords(vtkMatrix4x4 *propMatrix,
            double plane[4]) override;
        
        Get the plane as a homogeneous 4-vector that gives the plane
        equation coefficients.  It is computed from the Orientation and
        SliceNumber, the propMatrix is unused and can be zero.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageSliceMapper
        C++: vtkImageSliceMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        mapper.  The parameter window is used to determine which graphic
        resources to release.
        """
        ...
    
    def Render(self, vtkRenderer, vtkImageSlice):
        """
        V.Render(vtkRenderer, vtkImageSlice)
        C++: void Render(vtkRenderer *renderer, vtkImageSlice *prop)
            override;
        
        This should only be called by the renderer.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageSliceMapper
        C++: static vtkImageSliceMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCropping(self, p_int):
        """
        V.SetCropping(int)
        C++: virtual void SetCropping(vtkTypeBool _arg)
        
        Use the specified CroppingRegion.  The default is to display the
        full slice.
        """
        ...
    
    def SetCroppingRegion(self, p_int, p_int_1, p_int_2, p_int_3, p_int_4, p_int_5):
        """
        V.SetCroppingRegion(int, int, int, int, int, int)
        C++: virtual void SetCroppingRegion(int _arg1, int _arg2,
            int _arg3, int _arg4, int _arg5, int _arg6)
        V.SetCroppingRegion((int, int, int, int, int, int))
        C++: virtual void SetCroppingRegion(const int _arg[6])
        
        Set the display extent.  This is ignored unless Cropping is set.
        """
        ...
    
    def SetOrientation(self, p_int):
        """
        V.SetOrientation(int)
        C++: virtual void SetOrientation(int _arg)
        
        Set the orientation of the slices to display.  The default
        orientation is 2, which is K. Not the orientaiton here is in
        index space. Not physical or world.
        """
        ...
    
    def SetOrientationToI(self):
        """
        V.SetOrientationToI()
        C++: void SetOrientationToI()
        
        Set the orientation of the slices to display.  The default
        orientation is 2, which is K. Not the orientaiton here is in
        index space. Not physical or world.
        """
        ...
    
    def SetOrientationToJ(self):
        """
        V.SetOrientationToJ()
        C++: void SetOrientationToJ()
        
        Set the orientation of the slices to display.  The default
        orientation is 2, which is K. Not the orientaiton here is in
        index space. Not physical or world.
        """
        ...
    
    def SetOrientationToK(self):
        """
        V.SetOrientationToK()
        C++: void SetOrientationToK()
        
        Set the orientation of the slices to display.  The default
        orientation is 2, which is K. Not the orientaiton here is in
        index space. Not physical or world.
        """
        ...
    
    def SetOrientationToX(self):
        """
        V.SetOrientationToX()
        C++: void SetOrientationToX()
        """
        ...
    
    def SetOrientationToY(self):
        """
        V.SetOrientationToY()
        C++: void SetOrientationToY()
        """
        ...
    
    def SetOrientationToZ(self):
        """
        V.SetOrientationToZ()
        C++: void SetOrientationToZ()
        """
        ...
    
    def SetSliceNumber(self, p_int):
        """
        V.SetSliceNumber(int)
        C++: virtual void SetSliceNumber(int slice)
        
        The slice to display, if there are multiple slices.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


