"""
This type stub file was generated by pyright.
"""

from .vtkMapper import vtkMapper

class vtkPolyDataMapper(vtkMapper):
    """
    vtkPolyDataMapper - map vtkPolyData to graphics primitives
    
    Superclass: vtkMapper
    
    vtkPolyDataMapper is a class that maps polygonal data (i.e.,
    vtkPolyData) to graphics primitives. vtkPolyDataMapper serves as a
    superclass for device-specific poly data mappers, that actually do
    the mapping to the rendering/graphics hardware/software.
    """
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6]) override;
        
        Return bounding box (array of six doubles) of data expressed as
        (xmin,xmax, ymin,ymax, zmin,zmax).
        """
        ...
    
    def GetGhostLevel(self):
        """
        V.GetGhostLevel() -> int
        C++: virtual int GetGhostLevel()
        
        Set the number of ghost cells to return.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkPolyData
        C++: vtkPolyData *GetInput()
        
        Specify the input data to map.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPieces(self):
        """
        V.GetNumberOfPieces() -> int
        C++: virtual int GetNumberOfPieces()
        
        If you want only a part of the data, specify by setting the
        piece.
        """
        ...
    
    def GetNumberOfSubPieces(self):
        """
        V.GetNumberOfSubPieces() -> int
        C++: virtual int GetNumberOfSubPieces()
        
        If you want only a part of the data, specify by setting the
        piece.
        """
        ...
    
    def GetPiece(self):
        """
        V.GetPiece() -> int
        C++: virtual int GetPiece()
        
        If you want only a part of the data, specify by setting the
        piece.
        """
        ...
    
    def GetSeamlessU(self):
        """
        V.GetSeamlessU() -> bool
        C++: virtual bool GetSeamlessU()
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def GetSeamlessV(self):
        """
        V.GetSeamlessV() -> bool
        C++: virtual bool GetSeamlessV()
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapDataArrayToMultiTextureAttribute(self, string, string_1, p_int, p_int_1):
        """
        V.MapDataArrayToMultiTextureAttribute(string, string, int, int)
        C++: virtual void MapDataArrayToMultiTextureAttribute(
            const char *textureName, const char *dataArrayName,
            int fieldAssociation, int componentno=-1)
        """
        ...
    
    def MapDataArrayToVertexAttribute(self, string, string_1, p_int, p_int_1):
        """
        V.MapDataArrayToVertexAttribute(string, string, int, int)
        C++: virtual void MapDataArrayToVertexAttribute(
            const char *vertexAttributeName, const char *dataArrayName,
            int fieldAssociation, int componentno=-1)
        
        Select a data array from the point/cell data and map it to a
        generic vertex attribute. vertexAttributeName is the name of the
        vertex attribute. dataArrayName is the name of the data array.
        fieldAssociation indicates when the data array is a point data
        array or cell data array (vtkDataObject::FIELD_ASSOCIATION_POINTS
        or (vtkDataObject::FIELD_ASSOCIATION_CELLS). componentno
        indicates which component from the data array must be passed as
        the attribute. If -1, then all components are passed. Currently
        only point data is supported.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPolyDataMapper
        C++: vtkPolyDataMapper *NewInstance()
        """
        ...
    
    def RemoveAllVertexAttributeMappings(self):
        """
        V.RemoveAllVertexAttributeMappings()
        C++: virtual void RemoveAllVertexAttributeMappings()
        
        Remove all vertex attributes.
        """
        ...
    
    def RemoveVertexAttributeMapping(self, string):
        """
        V.RemoveVertexAttributeMapping(string)
        C++: virtual void RemoveVertexAttributeMapping(
            const char *vertexAttributeName)
        
        Remove a vertex attribute mapping.
        """
        ...
    
    def Render(self, vtkRenderer, vtkActor):
        """
        V.Render(vtkRenderer, vtkActor)
        C++: void Render(vtkRenderer *ren, vtkActor *act) override;
        
        This calls RenderPiece (in a for loop if streaming is necessary).
        """
        ...
    
    def RenderPiece(self, vtkRenderer, vtkActor):
        """
        V.RenderPiece(vtkRenderer, vtkActor)
        C++: virtual void RenderPiece(vtkRenderer *, vtkActor *)
        
        Implemented by sub classes. Actual rendering is done here.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPolyDataMapper
        C++: static vtkPolyDataMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SeamlessUOff(self):
        """
        V.SeamlessUOff()
        C++: virtual void SeamlessUOff()
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def SeamlessUOn(self):
        """
        V.SeamlessUOn()
        C++: virtual void SeamlessUOn()
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def SeamlessVOff(self):
        """
        V.SeamlessVOff()
        C++: virtual void SeamlessVOff()
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def SeamlessVOn(self):
        """
        V.SeamlessVOn()
        C++: virtual void SeamlessVOn()
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def SetGhostLevel(self, p_int):
        """
        V.SetGhostLevel(int)
        C++: virtual void SetGhostLevel(int _arg)
        
        Set the number of ghost cells to return.
        """
        ...
    
    def SetInputData(self, vtkPolyData):
        """
        V.SetInputData(vtkPolyData)
        C++: void SetInputData(vtkPolyData *in)
        
        Specify the input data to map.
        """
        ...
    
    def SetNumberOfPieces(self, p_int):
        """
        V.SetNumberOfPieces(int)
        C++: virtual void SetNumberOfPieces(int _arg)
        
        If you want only a part of the data, specify by setting the
        piece.
        """
        ...
    
    def SetNumberOfSubPieces(self, p_int):
        """
        V.SetNumberOfSubPieces(int)
        C++: virtual void SetNumberOfSubPieces(int _arg)
        
        If you want only a part of the data, specify by setting the
        piece.
        """
        ...
    
    def SetPiece(self, p_int):
        """
        V.SetPiece(int)
        C++: virtual void SetPiece(int _arg)
        
        If you want only a part of the data, specify by setting the
        piece.
        """
        ...
    
    def SetSeamlessU(self, bool):
        """
        V.SetSeamlessU(bool)
        C++: virtual void SetSeamlessU(bool _arg)
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def SetSeamlessV(self, bool):
        """
        V.SetSeamlessV(bool)
        C++: virtual void SetSeamlessV(bool _arg)
        
        Accessors / Mutators for handling seams on wrapping surfaces.
        Letters U and V stand for texture coordinates (u,v).
        
        ote Implementation taken from the work of Marco Tarini:
        Cylindrical and Toroidal Parameterizations Without Vertex Seams
        Journal of Graphics Tools, 2012, number 3, volume 16, pages
        144-150.
        """
        ...
    
    def ShallowCopy(self, vtkAbstractMapper):
        """
        V.ShallowCopy(vtkAbstractMapper)
        C++: void ShallowCopy(vtkAbstractMapper *m) override;
        
        Make a shallow copy of this mapper.
        """
        ...
    
    def Update(self, p_int):
        """
        V.Update(int)
        C++: void Update(int port) override;
        V.Update()
        C++: void Update() override;
        V.Update(int, vtkInformationVector) -> int
        C++: vtkTypeBool Update(int port, vtkInformationVector *requests)
            override;
        V.Update(vtkInformation) -> int
        C++: vtkTypeBool Update(vtkInformation *requests) override;
        
        Bring this algorithm's outputs up-to-date.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


