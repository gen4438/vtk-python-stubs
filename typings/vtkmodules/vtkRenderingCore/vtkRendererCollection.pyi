"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkRendererCollection(__vtkmodules_vtkCommonCore.vtkCollection):
    """
    vtkRendererCollection - an ordered list of renderers
    
    Superclass: vtkCollection
    
    vtkRendererCollection represents and provides methods to manipulate a
    list of renderers (i.e., vtkRenderer and subclasses). The list is
    ordered and duplicate entries are not prevented.
    
    @sa
    vtkRenderer vtkCollection
    """
    def AddItem(self, vtkRenderer):
        """
        V.AddItem(vtkRenderer)
        C++: void AddItem(vtkRenderer *a)
        
        Add a Renderer to the bottom of the list.
        """
        ...
    
    def GetFirstRenderer(self):
        """
        V.GetFirstRenderer() -> vtkRenderer
        C++: vtkRenderer *GetFirstRenderer()
        
        Get the first Renderer in the list. Return NULL when at the end
        of the list.
        """
        ...
    
    def GetNextItem(self):
        """
        V.GetNextItem() -> vtkRenderer
        C++: vtkRenderer *GetNextItem()
        
        Get the next Renderer in the list. Return NULL when at the end of
        the list.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRendererCollection
        C++: vtkRendererCollection *NewInstance()
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: void Render()
        
        Forward the Render() method to each renderer in the list.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRendererCollection
        C++: static vtkRendererCollection *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


