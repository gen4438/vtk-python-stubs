"""
This type stub file was generated by pyright.
"""

from .vtkInteractorObserver import vtkInteractorObserver

class vtkInteractorEventRecorder(vtkInteractorObserver):
    """
    vtkInteractorEventRecorder - record and play VTK events passing
    through a vtkRenderWindowInteractor
    
    Superclass: vtkInteractorObserver
    
    vtkInteractorEventRecorder records all VTK events invoked from a
    vtkRenderWindowInteractor. The events are recorded to a file.
    vtkInteractorEventRecorder can also be used to play those events back
    and invoke them on an vtkRenderWindowInteractor. (Note: the events
    can also be played back from a file or string.)
    
    The format of the event file is simple. It is:
     EventName X Y ctrl shift keycode repeatCount keySym The format also
    allows "#" comments.
    
    @sa
    vtkInteractorObserver vtkCallback
    """
    def GetFileName(self):
        """
        V.GetFileName() -> string
        C++: virtual char *GetFileName()
        
        Set/Get the name of a file events should be written to/from.
        """
        ...
    
    def GetInputString(self):
        """
        V.GetInputString() -> string
        C++: virtual char *GetInputString()
        
        Set/Get the string to read from.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReadFromInputString(self):
        """
        V.GetReadFromInputString() -> int
        C++: virtual vtkTypeBool GetReadFromInputString()
        
        Enable reading from an InputString as compared to the default
        behavior, which is to read from a file.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInteractorEventRecorder
        C++: vtkInteractorEventRecorder *NewInstance()
        """
        ...
    
    def Play(self):
        """
        V.Play()
        C++: void Play()
        
        Invoke this method to begin playing events from the current
        position. The events will be played back from the filename
        indicated.
        """
        ...
    
    def ReadFromInputStringOff(self):
        """
        V.ReadFromInputStringOff()
        C++: virtual void ReadFromInputStringOff()
        
        Enable reading from an InputString as compared to the default
        behavior, which is to read from a file.
        """
        ...
    
    def ReadFromInputStringOn(self):
        """
        V.ReadFromInputStringOn()
        C++: virtual void ReadFromInputStringOn()
        
        Enable reading from an InputString as compared to the default
        behavior, which is to read from a file.
        """
        ...
    
    def Record(self):
        """
        V.Record()
        C++: void Record()
        
        Invoke this method to begin recording events. The events will be
        recorded to the filename indicated.
        """
        ...
    
    def Rewind(self):
        """
        V.Rewind()
        C++: void Rewind()
        
        Rewind to the beginning of the file.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInteractorEventRecorder
        C++: static vtkInteractorEventRecorder *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetEnabled(self, p_int):
        """
        V.SetEnabled(int)
        C++: void SetEnabled(int) override;
        
        Methods for turning the interactor observer on and off, and
        determining its state. All subclasses must provide the
        SetEnabled() method. Enabling a vtkInteractorObserver has the
        side effect of adding observers; disabling it removes the
        observers. Prior to enabling the vtkInteractorObserver you must
        set the render window interactor (via SetInteractor()). Initial
        value is 0.
        """
        ...
    
    def SetFileName(self, string):
        """
        V.SetFileName(string)
        C++: virtual void SetFileName(const char *_arg)
        
        Set/Get the name of a file events should be written to/from.
        """
        ...
    
    def SetInputString(self, string):
        """
        V.SetInputString(string)
        C++: virtual void SetInputString(const char *_arg)
        
        Set/Get the string to read from.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *iren) override;
        
        This method is used to associate the widget with the render
        window interactor.  Observers of the appropriate events invoked
        in the render window interactor are set up as a result of this
        method invocation. The SetInteractor() method must be invoked
        prior to enabling the vtkInteractorObserver. It automatically
        registers available pickers to the Picking Manager.
        """
        ...
    
    def SetReadFromInputString(self, p_int):
        """
        V.SetReadFromInputString(int)
        C++: virtual void SetReadFromInputString(vtkTypeBool _arg)
        
        Enable reading from an InputString as compared to the default
        behavior, which is to read from a file.
        """
        ...
    
    def Stop(self):
        """
        V.Stop()
        C++: void Stop()
        
        Invoke this method to stop recording/playing events.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


