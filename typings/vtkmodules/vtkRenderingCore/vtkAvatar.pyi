"""
This type stub file was generated by pyright.
"""

from .vtkActor import vtkActor

class vtkAvatar(vtkActor):
    """
    vtkAvatar - Renders head and hands for a user in VR
    
    Superclass: vtkActor
    
    Set position and orientation for the head and two hands, shows an
    observer where the avatar is looking and pointing.
    """
    def GetHeadOrientation(self):
        """
        V.GetHeadOrientation() -> (float, float, float)
        C++: virtual double *GetHeadOrientation()
        """
        ...
    
    def GetHeadPosition(self):
        """
        V.GetHeadPosition() -> (float, float, float)
        C++: virtual double *GetHeadPosition()
        
        Set/Get the head and hand transforms.
        """
        ...
    
    def GetLeftHandOrientation(self):
        """
        V.GetLeftHandOrientation() -> (float, float, float)
        C++: virtual double *GetLeftHandOrientation()
        """
        ...
    
    def GetLeftHandPosition(self):
        """
        V.GetLeftHandPosition() -> (float, float, float)
        C++: virtual double *GetLeftHandPosition()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRightHandOrientation(self):
        """
        V.GetRightHandOrientation() -> (float, float, float)
        C++: virtual double *GetRightHandOrientation()
        """
        ...
    
    def GetRightHandPosition(self):
        """
        V.GetRightHandPosition() -> (float, float, float)
        C++: virtual double *GetRightHandPosition()
        """
        ...
    
    def GetShowHandsOnly(self):
        """
        V.GetShowHandsOnly() -> bool
        C++: virtual bool GetShowHandsOnly()
        
        Show just the hands. Default false.
        """
        ...
    
    def GetUpVector(self):
        """
        V.GetUpVector() -> (float, float, float)
        C++: virtual double *GetUpVector()
        
        Up vector, in world coords. Must be normalized.
        """
        ...
    
    def GetUseLeftHand(self):
        """
        V.GetUseLeftHand() -> bool
        C++: virtual bool GetUseLeftHand()
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def GetUseRightHand(self):
        """
        V.GetUseRightHand() -> bool
        C++: virtual bool GetUseRightHand()
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAvatar
        C++: vtkAvatar *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAvatar
        C++: static vtkAvatar *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetHeadOrientation(self, p_float, p_float_1, p_float_2):
        """
        V.SetHeadOrientation(float, float, float)
        C++: virtual void SetHeadOrientation(double _arg1, double _arg2,
            double _arg3)
        V.SetHeadOrientation((float, float, float))
        C++: virtual void SetHeadOrientation(const double _arg[3])
        """
        ...
    
    def SetHeadPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetHeadPosition(float, float, float)
        C++: virtual void SetHeadPosition(double _arg1, double _arg2,
            double _arg3)
        V.SetHeadPosition((float, float, float))
        C++: virtual void SetHeadPosition(const double _arg[3])
        """
        ...
    
    def SetLeftHandOrientation(self, p_float, p_float_1, p_float_2):
        """
        V.SetLeftHandOrientation(float, float, float)
        C++: virtual void SetLeftHandOrientation(double _arg1,
            double _arg2, double _arg3)
        V.SetLeftHandOrientation((float, float, float))
        C++: virtual void SetLeftHandOrientation(const double _arg[3])
        """
        ...
    
    def SetLeftHandPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetLeftHandPosition(float, float, float)
        C++: virtual void SetLeftHandPosition(double _arg1, double _arg2,
            double _arg3)
        V.SetLeftHandPosition((float, float, float))
        C++: virtual void SetLeftHandPosition(const double _arg[3])
        """
        ...
    
    def SetRightHandOrientation(self, p_float, p_float_1, p_float_2):
        """
        V.SetRightHandOrientation(float, float, float)
        C++: virtual void SetRightHandOrientation(double _arg1,
            double _arg2, double _arg3)
        V.SetRightHandOrientation((float, float, float))
        C++: virtual void SetRightHandOrientation(const double _arg[3])
        """
        ...
    
    def SetRightHandPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetRightHandPosition(float, float, float)
        C++: virtual void SetRightHandPosition(double _arg1, double _arg2,
             double _arg3)
        V.SetRightHandPosition((float, float, float))
        C++: virtual void SetRightHandPosition(const double _arg[3])
        """
        ...
    
    def SetShowHandsOnly(self, bool):
        """
        V.SetShowHandsOnly(bool)
        C++: virtual void SetShowHandsOnly(bool _arg)
        
        Show just the hands. Default false.
        """
        ...
    
    def SetUpVector(self, p_float, p_float_1, p_float_2):
        """
        V.SetUpVector(float, float, float)
        C++: virtual void SetUpVector(double _arg1, double _arg2,
            double _arg3)
        V.SetUpVector((float, float, float))
        C++: virtual void SetUpVector(const double _arg[3])
        """
        ...
    
    def SetUseLeftHand(self, bool):
        """
        V.SetUseLeftHand(bool)
        C++: virtual void SetUseLeftHand(bool _arg)
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def SetUseRightHand(self, bool):
        """
        V.SetUseRightHand(bool)
        C++: virtual void SetUseRightHand(bool _arg)
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def ShowHandsOnlyOff(self):
        """
        V.ShowHandsOnlyOff()
        C++: virtual void ShowHandsOnlyOff()
        
        Show just the hands. Default false.
        """
        ...
    
    def ShowHandsOnlyOn(self):
        """
        V.ShowHandsOnlyOn()
        C++: virtual void ShowHandsOnlyOn()
        
        Show just the hands. Default false.
        """
        ...
    
    def UseLeftHandOff(self):
        """
        V.UseLeftHandOff()
        C++: virtual void UseLeftHandOff()
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def UseLeftHandOn(self):
        """
        V.UseLeftHandOn()
        C++: virtual void UseLeftHandOn()
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def UseRightHandOff(self):
        """
        V.UseRightHandOff()
        C++: virtual void UseRightHandOff()
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def UseRightHandOn(self):
        """
        V.UseRightHandOn()
        C++: virtual void UseRightHandOn()
        
        Normally, hand position/orientation is set explicitly. If set to
        false, hand and arm will follow the torso in a neutral position.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


