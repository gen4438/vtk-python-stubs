"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkAbstractMapper(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkAbstractMapper - abstract class specifies interface to map data
    
    Superclass: vtkAlgorithm
    
    vtkAbstractMapper is an abstract class to specify interface between
    data and graphics primitives or software rendering techniques.
    Subclasses of vtkAbstractMapper can be used for rendering 2D data,
    geometry, or volumetric data.
    
    @sa
    vtkAbstractMapper3D vtkMapper vtkPolyDataMapper vtkVolumeMapper
    """
    def AddClippingPlane(self, vtkPlane):
        """
        V.AddClippingPlane(vtkPlane)
        C++: void AddClippingPlane(vtkPlane *plane)
        
        Specify clipping planes to be applied when the data is mapped (at
        most 6 clipping planes can be specified).
        """
        ...
    
    def GetAbstractScalars(self, vtkDataSet, p_int, p_int_1, p_int_2, string, p_int_3):
        """
        V.GetAbstractScalars(vtkDataSet, int, int, int, string, int)
            -> vtkAbstractArray
        C++: static vtkAbstractArray *GetAbstractScalars(
            vtkDataSet *input, int scalarMode, int arrayAccessMode,
            int arrayId, const char *arrayName, int &cellFlag)
        
        Internal helper function for getting the active scalars as an
        abstract array. The scalar mode indicates where the scalars come
        from.  The cellFlag is a return value that is set when the
        scalars actually are cell scalars.  (0 for point scalars, 1 for
        cell scalars, 2 for field scalars) The arrayAccessMode is used to
        indicate how to retrieve the scalars from field data, per id or
        per name (if the scalarMode indicates that).
        """
        ...
    
    def GetClippingPlanes(self):
        """
        V.GetClippingPlanes() -> vtkPlaneCollection
        C++: virtual vtkPlaneCollection *GetClippingPlanes()
        
        Get/Set the vtkPlaneCollection which specifies the clipping
        planes.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override Modifiedtime as we have added Clipping planes
        """
        ...
    
    def GetNumberOfClippingPlanes(self):
        """
        V.GetNumberOfClippingPlanes() -> int
        C++: int GetNumberOfClippingPlanes()
        
        Get the number of clipping planes.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScalars(self, vtkDataSet, p_int, p_int_1, p_int_2, string, p_int_3):
        """
        V.GetScalars(vtkDataSet, int, int, int, string, int)
            -> vtkDataArray
        C++: static vtkDataArray *GetScalars(vtkDataSet *input,
            int scalarMode, int arrayAccessMode, int arrayId,
            const char *arrayName, int &cellFlag)
        
        Internal helper function for getting the active scalars. The
        scalar mode indicates where the scalars come from.  The cellFlag
        is a return value that is set when the scalars actually are cell
        scalars. (0 for point scalars, 1 for cell scalars, 2 for field
        scalars) The arrayAccessMode is used to indicate how to retrieve
        the scalars from field data, per id or per name (if the
        scalarMode indicates that).
        """
        ...
    
    def GetTimeToDraw(self):
        """
        V.GetTimeToDraw() -> float
        C++: virtual double GetTimeToDraw()
        
        Get the time required to draw the geometry last time it was
        rendered
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractMapper
        C++: vtkAbstractMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *)
        
        Release any graphics resources that are being consumed by this
        mapper. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RemoveAllClippingPlanes(self):
        """
        V.RemoveAllClippingPlanes()
        C++: void RemoveAllClippingPlanes()
        
        Specify clipping planes to be applied when the data is mapped (at
        most 6 clipping planes can be specified).
        """
        ...
    
    def RemoveClippingPlane(self, vtkPlane):
        """
        V.RemoveClippingPlane(vtkPlane)
        C++: void RemoveClippingPlane(vtkPlane *plane)
        
        Specify clipping planes to be applied when the data is mapped (at
        most 6 clipping planes can be specified).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractMapper
        C++: static vtkAbstractMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetClippingPlanes(self, vtkPlaneCollection):
        """
        V.SetClippingPlanes(vtkPlaneCollection)
        C++: virtual void SetClippingPlanes(vtkPlaneCollection *)
        V.SetClippingPlanes(vtkPlanes)
        C++: void SetClippingPlanes(vtkPlanes *planes)
        
        Get/Set the vtkPlaneCollection which specifies the clipping
        planes.
        """
        ...
    
    def ShallowCopy(self, vtkAbstractMapper):
        """
        V.ShallowCopy(vtkAbstractMapper)
        C++: virtual void ShallowCopy(vtkAbstractMapper *m)
        
        Make a shallow copy of this mapper.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


