"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkObserverMediator(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkObserverMediator - manage contention for cursors and other
    resources
    
    Superclass: vtkObject
    
    The vtkObserverMediator is a helper class that manages requests for
    cursor changes from multiple interactor observers (e.g. widgets). It
    keeps a list of widgets (and their priorities) and their current
    requests for cursor shape. It then satisfies requests based on widget
    priority and the relative importance of the request (e.g., a lower
    priority widget requesting a particular cursor shape will overrule a
    higher priority widget requesting a default shape).
    
    @sa
    vtkAbstractWidget vtkWidgetRepresentation
    """
    def GetInteractor(self):
        """
        V.GetInteractor() -> vtkRenderWindowInteractor
        C++: virtual vtkRenderWindowInteractor *GetInteractor()
        
        Specify the instance of vtkRenderWindow whose cursor shape is to
        be managed.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard macros.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard macros.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard macros.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard macros.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkObserverMediator
        C++: vtkObserverMediator *NewInstance()
        
        Standard macros.
        """
        ...
    
    def RemoveAllCursorShapeRequests(self, vtkInteractorObserver):
        """
        V.RemoveAllCursorShapeRequests(vtkInteractorObserver)
        C++: void RemoveAllCursorShapeRequests(vtkInteractorObserver *)
        
        Remove all requests for cursor shape from a given interactor.
        """
        ...
    
    def RequestCursorShape(self, vtkInteractorObserver, p_int):
        """
        V.RequestCursorShape(vtkInteractorObserver, int) -> int
        C++: int RequestCursorShape(vtkInteractorObserver *,
            int cursorShape)
        
        Method used to request a cursor shape. Note that the shape is
        specified using one of the integral values determined in
        vtkRenderWindow.h. The method returns a non-zero value if the
        shape was successfully changed.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkObserverMediator
        C++: static vtkObserverMediator *SafeDownCast(vtkObjectBase *o)
        
        Standard macros.
        """
        ...
    
    def SetInteractor(self, vtkRenderWindowInteractor):
        """
        V.SetInteractor(vtkRenderWindowInteractor)
        C++: void SetInteractor(vtkRenderWindowInteractor *iren)
        
        Specify the instance of vtkRenderWindow whose cursor shape is to
        be managed.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


