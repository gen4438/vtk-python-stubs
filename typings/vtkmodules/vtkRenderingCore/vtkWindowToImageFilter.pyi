"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkWindowToImageFilter(__vtkmodules_vtkCommonExecutionModel.vtkAlgorithm):
    """
    vtkWindowToImageFilter - Use a vtkWindow as input to image pipeline
    
    Superclass: vtkAlgorithm
    
    vtkWindowToImageFilter provides methods needed to read the data in a
    vtkWindow and use it as input to the imaging pipeline. This is useful
    for saving an image to a file for example. The window can be read as
    either RGB or RGBA pixels;  in addition, the depth buffer can also be
    read.   RGB and RGBA pixels are of type unsigned char, while Z-Buffer
    data is returned as floats.  Use this filter to convert RenderWindows
    or ImageWindows to an image format.
    
    @warning
    A vtkWindow doesn't behave like other parts of the VTK pipeline: its
    modification time doesn't get updated when an image is rendered.  As
    a result, naive use of vtkWindowToImageFilter will produce an image
    of the first image that the window rendered, but which is never
    updated on subsequent window updates.  This behavior is unexpected
    and in general undesirable.
    
    @warning
    To force an update of the output image, call vtkWindowToImageFilter's
    Modified method after rendering to the window.
    
    @warning
    In VTK versions 4 and later, this filter is part of the canonical way
    to output an image of a window to a file (replacing the obsolete
    SaveImageAsPPM method for vtkRenderWindows that existed in 3.2 and
    earlier).  Connect this filter to the output of the window, and
    filter's output to a writer such as vtkPNGWriter.
    
    @warning
    Reading back alpha planes is dependent on the correct operation of
    the render window's GetRGBACharPixelData method, which in turn is
    dependent on the configuration of the window's alpha planes.  As of
    VTK 4.4+, machine-independent behavior is not automatically assured
    because of these dependencies.
    
    @sa
    vtkRendererSource vtkRendererPointCloudSource vtkWindow
    vtkRenderLargeImage
    """
    def FixBoundaryOff(self):
        """
        V.FixBoundaryOff()
        C++: virtual void FixBoundaryOff()
        
        When scale factor > 1, this class render the full image in tiles.
        Sometimes that results in artificial artifacts at internal tile
        seams. To overcome this issue, set this flag to true.
        """
        ...
    
    def FixBoundaryOn(self):
        """
        V.FixBoundaryOn()
        C++: virtual void FixBoundaryOn()
        
        When scale factor > 1, this class render the full image in tiles.
        Sometimes that results in artificial artifacts at internal tile
        seams. To overcome this issue, set this flag to true.
        """
        ...
    
    def GetFixBoundary(self):
        """
        V.GetFixBoundary() -> bool
        C++: virtual bool GetFixBoundary()
        
        When scale factor > 1, this class render the full image in tiles.
        Sometimes that results in artificial artifacts at internal tile
        seams. To overcome this issue, set this flag to true.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkWindow
        C++: virtual vtkWindow *GetInput()
        
        Returns which renderer is being used as the source for the pixel
        data. Initial value is 0.
        """
        ...
    
    def GetInputBufferType(self):
        """
        V.GetInputBufferType() -> int
        C++: virtual int GetInputBufferType()
        
        Set/get the window buffer from which data will be read.  Choices
        include VTK_RGB (read the color image from the window), VTK_RGBA
        (same, but include the alpha channel), and VTK_ZBUFFER (depth
        buffer, returned as a float array). Initial value is VTK_RGB.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutput(self):
        """
        V.GetOutput() -> vtkImageData
        C++: vtkImageData *GetOutput()
        
        Get the output data object for a port on this algorithm.
        """
        ...
    
    def GetReadFrontBuffer(self):
        """
        V.GetReadFrontBuffer() -> int
        C++: virtual vtkTypeBool GetReadFrontBuffer()
        
        Set/Get the flag that determines which buffer to read from. The
        default is to read from the front buffer.
        """
        ...
    
    def GetScale(self):
        """
        V.GetScale() -> (int, int)
        C++: virtual int *GetScale()
        
        Get/Set the scale (or magnification) factors in X and Y.
        """
        ...
    
    def GetShouldRerender(self):
        """
        V.GetShouldRerender() -> int
        C++: virtual vtkTypeBool GetShouldRerender()
        
        Set/get whether to re-render the input window. Initial value is
        true. (This option makes no difference if scale factor > 1.)
        """
        ...
    
    def GetViewport(self):
        """
        V.GetViewport() -> (float, float, float, float)
        C++: virtual double *GetViewport()
        
        Set/get the extents to be used to generate the image. Initial
        value is {0,0,1,1} (This option does not work if scale factor >
        1.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkWindowToImageFilter
        C++: vtkWindowToImageFilter *NewInstance()
        """
        ...
    
    def ReadFrontBufferOff(self):
        """
        V.ReadFrontBufferOff()
        C++: virtual void ReadFrontBufferOff()
        
        Set/Get the flag that determines which buffer to read from. The
        default is to read from the front buffer.
        """
        ...
    
    def ReadFrontBufferOn(self):
        """
        V.ReadFrontBufferOn()
        C++: virtual void ReadFrontBufferOn()
        
        Set/Get the flag that determines which buffer to read from. The
        default is to read from the front buffer.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkWindowToImageFilter
        C++: static vtkWindowToImageFilter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFixBoundary(self, bool):
        """
        V.SetFixBoundary(bool)
        C++: virtual void SetFixBoundary(bool _arg)
        
        When scale factor > 1, this class render the full image in tiles.
        Sometimes that results in artificial artifacts at internal tile
        seams. To overcome this issue, set this flag to true.
        """
        ...
    
    def SetInput(self, vtkWindow):
        """
        V.SetInput(vtkWindow)
        C++: void SetInput(vtkWindow *input)
        
        Indicates what renderer to get the pixel data from. Initial value
        is 0.
        """
        ...
    
    def SetInputBufferType(self, p_int):
        """
        V.SetInputBufferType(int)
        C++: virtual void SetInputBufferType(int _arg)
        
        Set/get the window buffer from which data will be read.  Choices
        include VTK_RGB (read the color image from the window), VTK_RGBA
        (same, but include the alpha channel), and VTK_ZBUFFER (depth
        buffer, returned as a float array). Initial value is VTK_RGB.
        """
        ...
    
    def SetInputBufferTypeToRGB(self):
        """
        V.SetInputBufferTypeToRGB()
        C++: void SetInputBufferTypeToRGB()
        
        Set/get the window buffer from which data will be read.  Choices
        include VTK_RGB (read the color image from the window), VTK_RGBA
        (same, but include the alpha channel), and VTK_ZBUFFER (depth
        buffer, returned as a float array). Initial value is VTK_RGB.
        """
        ...
    
    def SetInputBufferTypeToRGBA(self):
        """
        V.SetInputBufferTypeToRGBA()
        C++: void SetInputBufferTypeToRGBA()
        
        Set/get the window buffer from which data will be read.  Choices
        include VTK_RGB (read the color image from the window), VTK_RGBA
        (same, but include the alpha channel), and VTK_ZBUFFER (depth
        buffer, returned as a float array). Initial value is VTK_RGB.
        """
        ...
    
    def SetInputBufferTypeToZBuffer(self):
        """
        V.SetInputBufferTypeToZBuffer()
        C++: void SetInputBufferTypeToZBuffer()
        
        Set/get the window buffer from which data will be read.  Choices
        include VTK_RGB (read the color image from the window), VTK_RGBA
        (same, but include the alpha channel), and VTK_ZBUFFER (depth
        buffer, returned as a float array). Initial value is VTK_RGB.
        """
        ...
    
    def SetReadFrontBuffer(self, p_int):
        """
        V.SetReadFrontBuffer(int)
        C++: virtual void SetReadFrontBuffer(vtkTypeBool _arg)
        
        Set/Get the flag that determines which buffer to read from. The
        default is to read from the front buffer.
        """
        ...
    
    def SetScale(self, p_int, p_int_1):
        """
        V.SetScale(int, int)
        C++: virtual void SetScale(int _arg1, int _arg2)
        V.SetScale((int, int))
        C++: void SetScale(const int _arg[2])
        V.SetScale(int)
        C++: void SetScale(int scale)
        
        Get/Set the scale (or magnification) factors in X and Y.
        """
        ...
    
    def SetShouldRerender(self, p_int):
        """
        V.SetShouldRerender(int)
        C++: virtual void SetShouldRerender(vtkTypeBool _arg)
        
        Set/get whether to re-render the input window. Initial value is
        true. (This option makes no difference if scale factor > 1.)
        """
        ...
    
    def SetViewport(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.SetViewport(float, float, float, float)
        C++: void SetViewport(double, double, double, double)
        V.SetViewport([float, ...])
        C++: void SetViewport(double *)
        
        Set/get the extents to be used to generate the image. Initial
        value is {0,0,1,1} (This option does not work if scale factor >
        1.)
        """
        ...
    
    def ShouldRerenderOff(self):
        """
        V.ShouldRerenderOff()
        C++: virtual void ShouldRerenderOff()
        
        Set/get whether to re-render the input window. Initial value is
        true. (This option makes no difference if scale factor > 1.)
        """
        ...
    
    def ShouldRerenderOn(self):
        """
        V.ShouldRerenderOn()
        C++: virtual void ShouldRerenderOn()
        
        Set/get whether to re-render the input window. Initial value is
        true. (This option makes no difference if scale factor > 1.)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


