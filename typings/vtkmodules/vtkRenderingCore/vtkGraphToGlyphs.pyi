"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkGraphToGlyphs(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkGraphToGlyphs - create glyphs for graph vertices
    
    Superclass: vtkPolyDataAlgorithm
    
    Converts a vtkGraph to a vtkPolyData containing a glyph for each
    vertex. This assumes that the points of the graph have already been
    filled (perhaps by vtkGraphLayout). The glyphs will automatically be
    scaled to be the same size in screen coordinates. To do this the
    filter requires a pointer to the renderer into which the glyphs will
    be rendered.
    """
    def FilledOff(self):
        """
        V.FilledOff()
        C++: virtual void FilledOff()
        
        Whether to fill the glyph, or to just render the outline.
        """
        ...
    
    def FilledOn(self):
        """
        V.FilledOn()
        C++: virtual void FilledOn()
        
        Whether to fill the glyph, or to just render the outline.
        """
        ...
    
    def GetFilled(self):
        """
        V.GetFilled() -> bool
        C++: virtual bool GetFilled()
        
        Whether to fill the glyph, or to just render the outline.
        """
        ...
    
    def GetGlyphType(self):
        """
        V.GetGlyphType() -> int
        C++: virtual int GetGlyphType()
        
        The glyph type, specified as one of the enumerated values in this
        class. VERTEX is a special glyph that cannot be scaled, but
        instead is rendered as an OpenGL vertex primitive. This may
        appear as a box or circle depending on the hardware.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        The modified time of this filter.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        The renderer in which the glyphs will be placed.
        """
        ...
    
    def GetScaling(self):
        """
        V.GetScaling() -> bool
        C++: virtual bool GetScaling()
        
        Whether to use the input array to process in order to scale the
        vertices.
        """
        ...
    
    def GetScreenSize(self):
        """
        V.GetScreenSize() -> float
        C++: virtual double GetScreenSize()
        
        Set the desired screen size of each glyph. If you are using
        scaling, this will be the size of the glyph when rendering an
        object with scaling value 1.0.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphToGlyphs
        C++: vtkGraphToGlyphs *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphToGlyphs
        C++: static vtkGraphToGlyphs *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFilled(self, bool):
        """
        V.SetFilled(bool)
        C++: virtual void SetFilled(bool _arg)
        
        Whether to fill the glyph, or to just render the outline.
        """
        ...
    
    def SetGlyphType(self, p_int):
        """
        V.SetGlyphType(int)
        C++: virtual void SetGlyphType(int _arg)
        
        The glyph type, specified as one of the enumerated values in this
        class. VERTEX is a special glyph that cannot be scaled, but
        instead is rendered as an OpenGL vertex primitive. This may
        appear as a box or circle depending on the hardware.
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: virtual void SetRenderer(vtkRenderer *ren)
        
        The renderer in which the glyphs will be placed.
        """
        ...
    
    def SetScaling(self, bool):
        """
        V.SetScaling(bool)
        C++: virtual void SetScaling(bool b)
        
        Whether to use the input array to process in order to scale the
        vertices.
        """
        ...
    
    def SetScreenSize(self, p_float):
        """
        V.SetScreenSize(float)
        C++: virtual void SetScreenSize(double _arg)
        
        Set the desired screen size of each glyph. If you are using
        scaling, this will be the size of the glyph when rendering an
        object with scaling value 1.0.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CIRCLE = ...
    CROSS = ...
    DASH = ...
    DIAMOND = ...
    SPHERE = ...
    SQUARE = ...
    THICKCROSS = ...
    TRIANGLE = ...
    VERTEX = ...
    __dict__ = ...
    __vtkname__ = ...


