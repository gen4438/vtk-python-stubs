"""
This type stub file was generated by pyright.
"""

from .vtkRenderWindowInteractor import vtkRenderWindowInteractor

class vtkRenderWindowInteractor3D(vtkRenderWindowInteractor):
    """
    vtkRenderWindowInteractor3D - adds support for 3D events to
    vtkRenderWindowInteractor.
    
    Superclass: vtkRenderWindowInteractor
    
    vtkRenderWindowInteractor3D provides a platform-independent
    interaction support for 3D events including 3D clicks and 3D
    controller orientations. It follows the same basic model as
    vtkRenderWindowInteractor but adds methods to set and get 3D event
    locations and orientations. VR systems will subclass this class to
    provide the code to set these values based on events from their VR
    controllers.
    """
    def Disable(self):
        """
        V.Disable()
        C++: void Disable() override;
        
        Enable/Disable interactions.  By default interactors are enabled
        when initialized.  Initialize() must be called prior to
        enabling/disabling interaction. These methods are used when a
        window/widget is being shared by multiple renderers and
        interactors.  This allows a "modal" display where one interactor
        is active when its data is to be displayed and all other
        interactors associated with the widget are disabled when their
        data is not displayed.
        """
        ...
    
    def Enable(self):
        """
        V.Enable()
        C++: void Enable() override;
        
        Enable/Disable interactions.  By default interactors are enabled
        when initialized.  Initialize() must be called prior to
        enabling/disabling interaction. These methods are used when a
        window/widget is being shared by multiple renderers and
        interactors.  This allows a "modal" display where one interactor
        is active when its data is to be displayed and all other
        interactors associated with the widget are disabled when their
        data is not displayed.
        """
        ...
    
    def GetLastPhysicalEventPose(self, vtkMatrix4x4, p_int):
        """
        V.GetLastPhysicalEventPose(vtkMatrix4x4, int)
        C++: virtual void GetLastPhysicalEventPose(
            vtkMatrix4x4 *poseMatrix, int pointerIndex)
        
        With VR we know the physical/room coordinate positions and
        orientations of events. These methods support getting them.
        """
        ...
    
    def GetLastTranslation3D(self):
        """
        V.GetLastTranslation3D() -> (float, float, float)
        C++: virtual double *GetLastTranslation3D()
        
        Set/get the translation for pan/swipe gestures, update
        LastTranslation
        """
        ...
    
    def GetLastWorldEventOrientation(self, p_int):
        """
        V.GetLastWorldEventOrientation(int) -> (float, ...)
        C++: virtual double *GetLastWorldEventOrientation(
            int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support querying them instead of going
        through a display X,Y coordinate approach as is standard for
        mouse/touch events
        """
        ...
    
    def GetLastWorldEventPose(self, vtkMatrix4x4, p_int):
        """
        V.GetLastWorldEventPose(vtkMatrix4x4, int)
        C++: virtual void GetLastWorldEventPose(vtkMatrix4x4 *poseMatrix,
            int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support querying them instead of going
        through a display X,Y coordinate approach as is standard for
        mouse/touch events
        """
        ...
    
    def GetLastWorldEventPosition(self, p_int):
        """
        V.GetLastWorldEventPosition(int) -> (float, ...)
        C++: virtual double *GetLastWorldEventPosition(int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support querying them instead of going
        through a display X,Y coordinate approach as is standard for
        mouse/touch events
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPhysicalEventPose(self, vtkMatrix4x4, p_int):
        """
        V.GetPhysicalEventPose(vtkMatrix4x4, int)
        C++: virtual void GetPhysicalEventPose(vtkMatrix4x4 *poseMatrix,
            int pointerIndex)
        
        With VR we know the physical/room coordinate positions and
        orientations of events. These methods support getting them.
        """
        ...
    
    def GetPhysicalScale(self):
        """
        V.GetPhysicalScale() -> float
        C++: virtual double GetPhysicalScale()
        
        Set/Get the optional scale translation to map world coordinates
        into the 3D physical space (meters, 0,0,0).
        """
        ...
    
    def GetPhysicalTranslation(self, vtkCamera):
        """
        V.GetPhysicalTranslation(vtkCamera) -> (float, ...)
        C++: virtual double *GetPhysicalTranslation(vtkCamera *)
        
        Set/Get the optional scale translation to map world coordinates
        into the 3D physical space (meters, 0,0,0).
        """
        ...
    
    def GetStartingPhysicalEventPose(self, vtkMatrix4x4, p_int):
        """
        V.GetStartingPhysicalEventPose(vtkMatrix4x4, int)
        C++: virtual void GetStartingPhysicalEventPose(
            vtkMatrix4x4 *poseMatrix, int pointerIndex)
        
        With VR we know the physical/room coordinate positions and
        orientations of events. These methods support getting them.
        """
        ...
    
    def GetTouchPadPosition(self, vtkEventDataDevice, vtkEventDataDeviceInput, p_float=..., p_float=..., p_float=...):
        """
        V.GetTouchPadPosition(vtkEventDataDevice, vtkEventDataDeviceInput,
             [float, float, float])
        C++: virtual void GetTouchPadPosition(vtkEventDataDevice,
            vtkEventDataDeviceInput, float[3])
        
        Get the latest touchpad or joystick position for a device
        """
        ...
    
    def GetTranslation3D(self):
        """
        V.GetTranslation3D() -> (float, float, float)
        C++: virtual double *GetTranslation3D()
        
        Set/get the translation for pan/swipe gestures, update
        LastTranslation
        """
        ...
    
    def GetWorldEventOrientation(self, p_int):
        """
        V.GetWorldEventOrientation(int) -> (float, ...)
        C++: virtual double *GetWorldEventOrientation(int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support querying them instead of going
        through a display X,Y coordinate approach as is standard for
        mouse/touch events
        """
        ...
    
    def GetWorldEventPose(self, vtkMatrix4x4, p_int):
        """
        V.GetWorldEventPose(vtkMatrix4x4, int)
        C++: virtual void GetWorldEventPose(vtkMatrix4x4 *poseMatrix,
            int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support querying them instead of going
        through a display X,Y coordinate approach as is standard for
        mouse/touch events
        """
        ...
    
    def GetWorldEventPosition(self, p_int):
        """
        V.GetWorldEventPosition(int) -> (float, ...)
        C++: virtual double *GetWorldEventPosition(int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support querying them instead of going
        through a display X,Y coordinate approach as is standard for
        mouse/touch events
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MiddleButtonPressEvent(self):
        """
        V.MiddleButtonPressEvent()
        C++: void MiddleButtonPressEvent() override;
        
        Override to set pointers down
        """
        ...
    
    def MiddleButtonReleaseEvent(self):
        """
        V.MiddleButtonReleaseEvent()
        C++: void MiddleButtonReleaseEvent() override;
        
        Override to set pointers down
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderWindowInteractor3D
        C++: vtkRenderWindowInteractor3D *NewInstance()
        """
        ...
    
    def RightButtonPressEvent(self):
        """
        V.RightButtonPressEvent()
        C++: void RightButtonPressEvent() override;
        
        Override to set pointers down
        """
        ...
    
    def RightButtonReleaseEvent(self):
        """
        V.RightButtonReleaseEvent()
        C++: void RightButtonReleaseEvent() override;
        
        Override to set pointers down
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderWindowInteractor3D
        C++: static vtkRenderWindowInteractor3D *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetPhysicalEventPose(self, vtkMatrix4x4, p_int):
        """
        V.SetPhysicalEventPose(vtkMatrix4x4, int)
        C++: virtual void SetPhysicalEventPose(vtkMatrix4x4 *poseMatrix,
            int pointerIndex)
        
        With VR we know the physical/room coordinate positions and
        orientations of events. These methods support setting them.
        """
        ...
    
    def SetPhysicalEventPosition(self, p_float, p_float_1, p_float_2, p_int):
        """
        V.SetPhysicalEventPosition(float, float, float, int)
        C++: virtual void SetPhysicalEventPosition(double x, double y,
            double z, int pointerIndex)
        
        With VR we know the physical/room coordinate positions and
        orientations of events. These methods support setting them.
        """
        ...
    
    def SetPhysicalScale(self, p_float):
        """
        V.SetPhysicalScale(float)
        C++: virtual void SetPhysicalScale(double)
        
        Set/Get the optional scale translation to map world coordinates
        into the 3D physical space (meters, 0,0,0).
        """
        ...
    
    def SetPhysicalTranslation(self, vtkCamera, p_float, p_float_1, p_float_2):
        """
        V.SetPhysicalTranslation(vtkCamera, float, float, float)
        C++: virtual void SetPhysicalTranslation(vtkCamera *, double,
            double, double)
        
        Set/Get the optional scale translation to map world coordinates
        into the 3D physical space (meters, 0,0,0).
        """
        ...
    
    def SetTranslation3D(self, p_float=..., p_float=..., p_float=...):
        """
        V.SetTranslation3D([float, float, float])
        C++: void SetTranslation3D(double val[3])
        
        Set/get the translation for pan/swipe gestures, update
        LastTranslation
        """
        ...
    
    def SetWorldEventOrientation(self, p_float, p_float_1, p_float_2, p_float_3, p_int):
        """
        V.SetWorldEventOrientation(float, float, float, float, int)
        C++: virtual void SetWorldEventOrientation(double w, double x,
            double y, double z, int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support setting them.
        """
        ...
    
    def SetWorldEventPose(self, vtkMatrix4x4, p_int):
        """
        V.SetWorldEventPose(vtkMatrix4x4, int)
        C++: virtual void SetWorldEventPose(vtkMatrix4x4 *poseMatrix,
            int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support setting them.
        """
        ...
    
    def SetWorldEventPosition(self, p_float, p_float_1, p_float_2, p_int):
        """
        V.SetWorldEventPosition(float, float, float, int)
        C++: virtual void SetWorldEventPosition(double x, double y,
            double z, int pointerIndex)
        
        With VR we know the world coordinate positions and orientations
        of events. These methods support setting them.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


