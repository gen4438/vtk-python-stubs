"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkLookupTableWithEnabling(__vtkmodules_vtkCommonCore.vtkLookupTable):
    """
    vtkLookupTableWithEnabling - A lookup table that allows for an
    optional array to be provided that specifies which scalars to
    "enable" and which to "disable".
    
    Superclass: vtkLookupTable
    
    vtkLookupTableWithEnabling "disables" or "grays out" output colors
    based on whether the given value in EnabledArray is "0" or not.
    
    @warning
    You must set the EnabledArray before MapScalars() is called. Indices
    of EnabledArray must map directly to those of the array passed to
    MapScalars().
    """
    def DisableColor(self, p_int, p_int_1, p_int_2, *int, **kwargs):
        """
        V.DisableColor(int, int, int, [int, ...], [int, ...], [int, ...])
        C++: virtual void DisableColor(unsigned char r, unsigned char g,
            unsigned char b, unsigned char *rd, unsigned char *gd,
            unsigned char *bd)
        
        A convenience method for taking a color and desaturating it.
        """
        ...
    
    def GetEnabledArray(self):
        """
        V.GetEnabledArray() -> vtkDataArray
        C++: virtual vtkDataArray *GetEnabledArray()
        
        This must be set before MapScalars() is called. Indices of this
        array must map directly to those in the scalars array passed to
        MapScalars(). Values of 0 in the array indicate the color should
        be desaturatated.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MapScalarsThroughTable2(self, void, *int, **kwargs):
        """
        V.MapScalarsThroughTable2(void, [int, ...], int, int, int, int)
        C++: void MapScalarsThroughTable2(void *input,
            unsigned char *output, int inputDataType, int numberOfValues,
            int inputIncrement, int outputIncrement) override;
        
        Map a set of scalars through the lookup table.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkLookupTableWithEnabling
        C++: vtkLookupTableWithEnabling *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkLookupTableWithEnabling
        C++: static vtkLookupTableWithEnabling *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetEnabledArray(self, vtkDataArray):
        """
        V.SetEnabledArray(vtkDataArray)
        C++: virtual void SetEnabledArray(vtkDataArray *enabledArray)
        
        This must be set before MapScalars() is called. Indices of this
        array must map directly to those in the scalars array passed to
        MapScalars(). Values of 0 in the array indicate the color should
        be desaturatated.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


