"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkAbstractPicker(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkAbstractPicker - define API for picking subclasses
    
    Superclass: vtkObject
    
    vtkAbstractPicker is an abstract superclass that defines a minimal
    API for its concrete subclasses. The minimum functionality of a
    picker is to return the x-y-z global coordinate position of a pick
    (the pick itself is defined in display coordinates).
    
    The API to this class is to invoke the Pick() method with a selection
    point (in display coordinates - pixels) and a renderer. Then get the
    resulting pick position in global coordinates with the
    GetPickPosition() method.
    
    vtkPicker fires events during the picking process.  These events are
    StartPickEvent, PickEvent, and EndPickEvent which are invoked prior
    to picking, when something is picked, and after all picking
    candidates have been tested. Note that during the pick process the
    PickEvent of vtkProp (and its subclasses such as vtkActor) is fired
    prior to the PickEvent of vtkPicker.
    
    @warning
    vtkAbstractPicker and its subclasses will not pick props that are
    "unpickable" (see vtkProp) or are fully transparent (if transparency
    is a property of the vtkProp).
    
    @warning
    There are two classes of pickers: those that pick using geometric
    methods (typically a ray cast); and those that use rendering
    hardware. Geometric methods return more information but are slower.
    Hardware methods are much faster and return minimal information.
    Examples of geometric pickers include vtkPicker, vtkCellPicker, and
    vtkPointPicker. Examples of hardware pickers include
    vtkWorldPointPicker and vtkPropPicker.
    
    @sa
    vtkPropPicker uses hardware acceleration to pick an instance of
    vtkProp. (This means that 2D and 3D props can be picked, and it's
    relatively fast.) If you need to pick cells or points, you might wish
    to use vtkCellPicker or vtkPointPicker. vtkWorldPointPicker is the
    fastest picker, returning an x-y-z coordinate value using the
    hardware z-buffer. vtkPicker can be used to pick the bounding box of
    3D props.
    """
    def AddPickList(self, vtkProp):
        """
        V.AddPickList(vtkProp)
        C++: void AddPickList(vtkProp *)
        
        Add an actor to the pick list.
        """
        ...
    
    def DeletePickList(self, vtkProp):
        """
        V.DeletePickList(vtkProp)
        C++: void DeletePickList(vtkProp *)
        
        Delete an actor from the pick list.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPickFromList(self):
        """
        V.GetPickFromList() -> int
        C++: virtual vtkTypeBool GetPickFromList()
        
        Use these methods to control whether to limit the picking to this
        list (rather than renderer's actors). Make sure that the pick
        list contains actors that referred to by the picker's renderer.
        """
        ...
    
    def GetPickList(self):
        """
        V.GetPickList() -> vtkPropCollection
        C++: vtkPropCollection *GetPickList()
        
        Return the list of actors in the PickList.
        """
        ...
    
    def GetPickPosition(self):
        """
        V.GetPickPosition() -> (float, float, float)
        C++: virtual double *GetPickPosition()
        
        Return position in global coordinates of pick point.
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        Get the renderer in which pick event occurred.
        """
        ...
    
    def GetSelectionPoint(self):
        """
        V.GetSelectionPoint() -> (float, float, float)
        C++: virtual double *GetSelectionPoint()
        
        Get the selection point in screen (pixel) coordinates. The third
        value is related to z-buffer depth. (Normally should be =0.)
        """
        ...
    
    def InitializePickList(self):
        """
        V.InitializePickList()
        C++: void InitializePickList()
        
        Initialize list of actors in pick list.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAbstractPicker
        C++: vtkAbstractPicker *NewInstance()
        """
        ...
    
    def Pick(self, p_float, p_float_1, p_float_2, vtkRenderer):
        """
        V.Pick(float, float, float, vtkRenderer) -> int
        C++: virtual int Pick(double selectionX, double selectionY,
            double selectionZ, vtkRenderer *renderer)
        V.Pick([float, float, float], vtkRenderer) -> int
        C++: int Pick(double selectionPt[3], vtkRenderer *ren)
        
        Perform pick operation with selection point provided. Normally
        the first two values for the selection point are x-y pixel
        coordinate, and the third value is =0. Return non-zero if
        something was successfully picked.
        """
        ...
    
    def Pick3DPoint(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Pick3DPoint([float, float, float], vtkRenderer) -> int
        C++: virtual int Pick3DPoint(double[3], vtkRenderer *)
        
        Perform pick operation with selection point provided. The
        selectionPt is in world coordinates. Return non-zero if something
        was successfully picked.
        """
        ...
    
    def Pick3DRay(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Pick3DRay([float, float, float], [float, float, float, float],
            vtkRenderer) -> int
        C++: virtual int Pick3DRay(double[3], double[4], vtkRenderer *)
        
        Perform pick operation with selection point and orientation
        provided. The selectionPt is in world coordinates. Return
        non-zero if something was successfully picked.
        """
        ...
    
    def PickFromListOff(self):
        """
        V.PickFromListOff()
        C++: virtual void PickFromListOff()
        
        Use these methods to control whether to limit the picking to this
        list (rather than renderer's actors). Make sure that the pick
        list contains actors that referred to by the picker's renderer.
        """
        ...
    
    def PickFromListOn(self):
        """
        V.PickFromListOn()
        C++: virtual void PickFromListOn()
        
        Use these methods to control whether to limit the picking to this
        list (rather than renderer's actors). Make sure that the pick
        list contains actors that referred to by the picker's renderer.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAbstractPicker
        C++: static vtkAbstractPicker *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPickFromList(self, p_int):
        """
        V.SetPickFromList(int)
        C++: virtual void SetPickFromList(vtkTypeBool _arg)
        
        Use these methods to control whether to limit the picking to this
        list (rather than renderer's actors). Make sure that the pick
        list contains actors that referred to by the picker's renderer.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


