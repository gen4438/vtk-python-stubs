"""
This type stub file was generated by pyright.
"""

from .vtkProp3D import vtkProp3D

class vtkAssembly(vtkProp3D):
    """
    vtkAssembly - create hierarchies of vtkProp3Ds (transformable props)
    
    Superclass: vtkProp3D
    
    vtkAssembly is an object that groups vtkProp3Ds, its subclasses, and
    other assemblies into a tree-like hierarchy. The vtkProp3Ds and
    assemblies can then be transformed together by transforming just the
    root assembly of the hierarchy.
    
    A vtkAssembly object can be used in place of an vtkProp3D since it is
    a subclass of vtkProp3D. The difference is that vtkAssembly maintains
    a list of vtkProp3D instances (its "parts") that form the assembly.
    Then, any operation that transforms (i.e., scales, rotates,
    translates) the parent assembly will transform all its parts.  Note
    that this process is recursive: you can create groups consisting of
    assemblies and/or vtkProp3Ds to arbitrary depth.
    
    To add an assembly to the renderer's list of props, you only need to
    add the root of the assembly. During rendering, the parts of the
    assembly are rendered during a hierarchical traversal process.
    
    @warning
    Collections of assemblies are slower to render than an equivalent
    list of actors. This is because to support arbitrary nesting of
    assemblies, the state of the assemblies (i.e., transformation
    matrices) must be propagated through the assembly hierarchy.
    
    @warning
    Assemblies can consist of hierarchies of assemblies, where one actor
    or assembly used in one hierarchy is also used in other hierarchies.
    However, make that there are no cycles (e.g., parent->child->parent),
    this will cause program failure.
    
    @warning
    If you wish to create assemblies without any transformation (using
    the assembly strictly as a grouping mechanism), then you may wish to
    consider using vtkPropAssembly.
    
    @sa
    vtkActor vtkTransform vtkMapper vtkPolyDataMapper vtkPropAssembly
    """
    def AddPart(self, vtkProp3D):
        """
        V.AddPart(vtkProp3D)
        C++: void AddPart(vtkProp3D *)
        
        Add a part to the list of parts.
        """
        ...
    
    def BuildPaths(self, vtkAssemblyPaths, vtkAssemblyPath):
        """
        V.BuildPaths(vtkAssemblyPaths, vtkAssemblyPath)
        C++: void BuildPaths(vtkAssemblyPaths *paths,
            vtkAssemblyPath *path) override;
        
        WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE DO NOT
        USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS Overload the
        superclass' vtkProp BuildPaths() method. Paths consist of an
        ordered sequence of actors, with transformations properly
        concatenated.
        """
        ...
    
    def GetActors(self, vtkPropCollection):
        """
        V.GetActors(vtkPropCollection)
        C++: void GetActors(vtkPropCollection *) override;
        
        For some exporters and other other operations we must be able to
        collect all the actors or volumes. These methods are used in that
        process.
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        
        Get the bounds for the assembly as
        (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override default GetMTime method to also consider all of the
        assembly's parts.
        """
        ...
    
    def GetNextPath(self):
        """
        V.GetNextPath() -> vtkAssemblyPath
        C++: vtkAssemblyPath *GetNextPath() override;
        
        Methods to traverse the parts of an assembly. Each part (starting
        from the root) will appear properly transformed and with the
        correct properties (depending upon the ApplyProperty and
        ApplyTransform ivars). Note that the part appears as an instance
        of vtkProp. These methods should be contrasted to those that
        traverse the list of parts using GetParts().  GetParts() returns
        a list of children of this assembly, not necessarily with the
        correct transformation or properties. To use the methods below -
        first invoke InitPathTraversal() followed by repeated calls to
        GetNextPath().  GetNextPath() returns a NULL pointer when the
        list is exhausted.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfPaths(self):
        """
        V.GetNumberOfPaths() -> int
        C++: int GetNumberOfPaths() override;
        
        Methods to traverse the parts of an assembly. Each part (starting
        from the root) will appear properly transformed and with the
        correct properties (depending upon the ApplyProperty and
        ApplyTransform ivars). Note that the part appears as an instance
        of vtkProp. These methods should be contrasted to those that
        traverse the list of parts using GetParts().  GetParts() returns
        a list of children of this assembly, not necessarily with the
        correct transformation or properties. To use the methods below -
        first invoke InitPathTraversal() followed by repeated calls to
        GetNextPath().  GetNextPath() returns a NULL pointer when the
        list is exhausted.
        """
        ...
    
    def GetParts(self):
        """
        V.GetParts() -> vtkProp3DCollection
        C++: vtkProp3DCollection *GetParts()
        
        Return the parts (direct descendants) of this assembly.
        """
        ...
    
    def GetVolumes(self, vtkPropCollection):
        """
        V.GetVolumes(vtkPropCollection)
        C++: void GetVolumes(vtkPropCollection *) override;
        
        For some exporters and other other operations we must be able to
        collect all the actors or volumes. These methods are used in that
        process.
        """
        ...
    
    def HasTranslucentPolygonalGeometry(self):
        """
        V.HasTranslucentPolygonalGeometry() -> int
        C++: vtkTypeBool HasTranslucentPolygonalGeometry() override;
        
        Does this prop have some translucent polygonal geometry?
        """
        ...
    
    def InitPathTraversal(self):
        """
        V.InitPathTraversal()
        C++: void InitPathTraversal() override;
        
        Methods to traverse the parts of an assembly. Each part (starting
        from the root) will appear properly transformed and with the
        correct properties (depending upon the ApplyProperty and
        ApplyTransform ivars). Note that the part appears as an instance
        of vtkProp. These methods should be contrasted to those that
        traverse the list of parts using GetParts().  GetParts() returns
        a list of children of this assembly, not necessarily with the
        correct transformation or properties. To use the methods below -
        first invoke InitPathTraversal() followed by repeated calls to
        GetNextPath().  GetNextPath() returns a NULL pointer when the
        list is exhausted.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAssembly
        C++: vtkAssembly *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        actor. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def RemovePart(self, vtkProp3D):
        """
        V.RemovePart(vtkProp3D)
        C++: void RemovePart(vtkProp3D *)
        
        Remove a part from the list of parts,
        """
        ...
    
    def RenderOpaqueGeometry(self, vtkViewport):
        """
        V.RenderOpaqueGeometry(vtkViewport) -> int
        C++: int RenderOpaqueGeometry(vtkViewport *ren) override;
        
        Render this assembly and all its parts. The rendering process is
        recursive. Note that a mapper need not be defined. If not
        defined, then no geometry will be drawn for this assembly. This
        allows you to create "logical" assemblies; that is, assemblies
        that only serve to group and transform its parts.
        """
        ...
    
    def RenderTranslucentPolygonalGeometry(self, vtkViewport):
        """
        V.RenderTranslucentPolygonalGeometry(vtkViewport) -> int
        C++: int RenderTranslucentPolygonalGeometry(vtkViewport *ren)
            override;
        
        Render this assembly and all its parts. The rendering process is
        recursive. Note that a mapper need not be defined. If not
        defined, then no geometry will be drawn for this assembly. This
        allows you to create "logical" assemblies; that is, assemblies
        that only serve to group and transform its parts.
        """
        ...
    
    def RenderVolumetricGeometry(self, vtkViewport):
        """
        V.RenderVolumetricGeometry(vtkViewport) -> int
        C++: int RenderVolumetricGeometry(vtkViewport *ren) override;
        
        Render this assembly and all its parts. The rendering process is
        recursive. Note that a mapper need not be defined. If not
        defined, then no geometry will be drawn for this assembly. This
        allows you to create "logical" assemblies; that is, assemblies
        that only serve to group and transform its parts.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAssembly
        C++: static vtkAssembly *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of an assembly. Overloads the virtual vtkProp
        method.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


