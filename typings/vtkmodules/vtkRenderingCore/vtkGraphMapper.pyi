"""
This type stub file was generated by pyright.
"""

from .vtkMapper import vtkMapper

class vtkGraphMapper(vtkMapper):
    """
    vtkGraphMapper - map vtkGraph and derived classes to graphics
    primitives
    
    Superclass: vtkMapper
    
    vtkGraphMapper is a mapper to map vtkGraph (and all derived classes)
    to graphics primitives.
    """
    def AddIconType(self, string, p_int):
        """
        V.AddIconType(string, int)
        C++: void AddIconType(const char *type, int index)
        
        Associate the icon at index "index" in the vtkTexture to all
        vertices containing "type" as a value in the vertex attribute
        array specified by IconArrayName.
        """
        ...
    
    def ClearIconTypes(self):
        """
        V.ClearIconTypes()
        C++: void ClearIconTypes()
        
        Clear all icon mappings.
        """
        ...
    
    def ColorEdgesOff(self):
        """
        V.ColorEdgesOff()
        C++: void ColorEdgesOff()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def ColorEdgesOn(self):
        """
        V.ColorEdgesOn()
        C++: void ColorEdgesOn()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def ColorVerticesOff(self):
        """
        V.ColorVerticesOff()
        C++: void ColorVerticesOff()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def ColorVerticesOn(self):
        """
        V.ColorVerticesOn()
        C++: void ColorVerticesOn()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def EdgeVisibilityOff(self):
        """
        V.EdgeVisibilityOff()
        C++: virtual void EdgeVisibilityOff()
        
        Whether to show edges or not.  Default is on.
        """
        ...
    
    def EdgeVisibilityOn(self):
        """
        V.EdgeVisibilityOn()
        C++: virtual void EdgeVisibilityOn()
        
        Whether to show edges or not.  Default is on.
        """
        ...
    
    def EnableEdgesByArrayOff(self):
        """
        V.EnableEdgesByArrayOff()
        C++: virtual void EnableEdgesByArrayOff()
        
        Whether to enable/disable edges using array values.  Default is
        off.
        """
        ...
    
    def EnableEdgesByArrayOn(self):
        """
        V.EnableEdgesByArrayOn()
        C++: virtual void EnableEdgesByArrayOn()
        
        Whether to enable/disable edges using array values.  Default is
        off.
        """
        ...
    
    def EnableVerticesByArrayOff(self):
        """
        V.EnableVerticesByArrayOff()
        C++: virtual void EnableVerticesByArrayOff()
        
        Whether to enable/disable vertices using array values.  Default
        is off.
        """
        ...
    
    def EnableVerticesByArrayOn(self):
        """
        V.EnableVerticesByArrayOn()
        C++: virtual void EnableVerticesByArrayOn()
        
        Whether to enable/disable vertices using array values.  Default
        is off.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override;
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double *bounds) override;
        
        Return bounding box (array of six doubles) of data expressed as
        (xmin,xmax, ymin,ymax, zmin,zmax).
        """
        ...
    
    def GetColorEdges(self):
        """
        V.GetColorEdges() -> bool
        C++: bool GetColorEdges()
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def GetColorVertices(self):
        """
        V.GetColorVertices() -> bool
        C++: bool GetColorVertices()
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def GetEdgeColorArrayName(self):
        """
        V.GetEdgeColorArrayName() -> string
        C++: const char *GetEdgeColorArrayName()
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def GetEdgeLineWidth(self):
        """
        V.GetEdgeLineWidth() -> float
        C++: virtual float GetEdgeLineWidth()
        
        Get/Set the edge line width
        """
        ...
    
    def GetEdgeLookupTable(self):
        """
        V.GetEdgeLookupTable() -> vtkLookupTable
        C++: virtual vtkLookupTable *GetEdgeLookupTable()
        
        Access to the lookup tables used by the vertex and edge mappers.
        """
        ...
    
    def GetEdgeVisibility(self):
        """
        V.GetEdgeVisibility() -> bool
        C++: bool GetEdgeVisibility()
        
        Whether to show edges or not.  Default is on.
        """
        ...
    
    def GetEnabledEdgesArrayName(self):
        """
        V.GetEnabledEdgesArrayName() -> string
        C++: virtual char *GetEnabledEdgesArrayName()
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def GetEnabledVerticesArrayName(self):
        """
        V.GetEnabledVerticesArrayName() -> string
        C++: virtual char *GetEnabledVerticesArrayName()
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def GetEnableEdgesByArray(self):
        """
        V.GetEnableEdgesByArray() -> int
        C++: virtual vtkTypeBool GetEnableEdgesByArray()
        
        Whether to enable/disable edges using array values.  Default is
        off.
        """
        ...
    
    def GetEnableVerticesByArray(self):
        """
        V.GetEnableVerticesByArray() -> int
        C++: virtual vtkTypeBool GetEnableVerticesByArray()
        
        Whether to enable/disable vertices using array values.  Default
        is off.
        """
        ...
    
    def GetIconArrayName(self):
        """
        V.GetIconArrayName() -> string
        C++: const char *GetIconArrayName()
        
        The array to use for assigning icons.
        """
        ...
    
    def GetIconSize(self):
        """
        V.GetIconSize() -> (int, ...)
        C++: int *GetIconSize()
        
        Specify the Width and Height, in pixels, of an icon in the icon
        sheet.
        """
        ...
    
    def GetIconTexture(self):
        """
        V.GetIconTexture() -> vtkTexture
        C++: vtkTexture *GetIconTexture()
        
        The texture containing the icon sheet.
        """
        ...
    
    def GetIconVisibility(self):
        """
        V.GetIconVisibility() -> bool
        C++: bool GetIconVisibility()
        
        Whether to show icons.  Default is off.
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkGraph
        C++: vtkGraph *GetInput()
        
        Set the Input of this mapper.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the mtime also considering the lookup table.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetScaledGlyphs(self):
        """
        V.GetScaledGlyphs() -> bool
        C++: virtual bool GetScaledGlyphs()
        
        Whether scaled glyphs are on or not.  Default is off. By default
        this mapper uses vertex glyphs that do not scale. If you turn
        this option on you will get circles at each vertex and they will
        scale as you zoom in/out.
        """
        ...
    
    def GetScalingArrayName(self):
        """
        V.GetScalingArrayName() -> string
        C++: virtual char *GetScalingArrayName()
        
        Glyph scaling array name. Default is "scale"
        """
        ...
    
    def GetVertexColorArrayName(self):
        """
        V.GetVertexColorArrayName() -> string
        C++: const char *GetVertexColorArrayName()
        
        The array to use for coloring vertices.  Default is "color".
        """
        ...
    
    def GetVertexLookupTable(self):
        """
        V.GetVertexLookupTable() -> vtkLookupTable
        C++: virtual vtkLookupTable *GetVertexLookupTable()
        
        Access to the lookup tables used by the vertex and edge mappers.
        """
        ...
    
    def GetVertexPointSize(self):
        """
        V.GetVertexPointSize() -> float
        C++: virtual float GetVertexPointSize()
        
        Get/Set the vertex point size
        """
        ...
    
    def IconVisibilityOff(self):
        """
        V.IconVisibilityOff()
        C++: virtual void IconVisibilityOff()
        
        Whether to show icons.  Default is off.
        """
        ...
    
    def IconVisibilityOn(self):
        """
        V.IconVisibilityOn()
        C++: virtual void IconVisibilityOn()
        
        Whether to show icons.  Default is off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGraphMapper
        C++: vtkGraphMapper *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: void ReleaseGraphicsResources(vtkWindow *) override;
        
        Release any graphics resources that are being consumed by this
        mapper. The parameter window could be used to determine which
        graphic resources to release.
        """
        ...
    
    def Render(self, vtkRenderer, vtkActor):
        """
        V.Render(vtkRenderer, vtkActor)
        C++: void Render(vtkRenderer *ren, vtkActor *act) override;
        
        Method initiates the mapping process. Generally sent by the actor
        as each frame is rendered.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGraphMapper
        C++: static vtkGraphMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ScaledGlyphsOff(self):
        """
        V.ScaledGlyphsOff()
        C++: virtual void ScaledGlyphsOff()
        
        Whether scaled glyphs are on or not.  Default is off. By default
        this mapper uses vertex glyphs that do not scale. If you turn
        this option on you will get circles at each vertex and they will
        scale as you zoom in/out.
        """
        ...
    
    def ScaledGlyphsOn(self):
        """
        V.ScaledGlyphsOn()
        C++: virtual void ScaledGlyphsOn()
        
        Whether scaled glyphs are on or not.  Default is off. By default
        this mapper uses vertex glyphs that do not scale. If you turn
        this option on you will get circles at each vertex and they will
        scale as you zoom in/out.
        """
        ...
    
    def SetColorEdges(self, bool):
        """
        V.SetColorEdges(bool)
        C++: void SetColorEdges(bool vis)
        
        Whether to color edges.  Default is off.
        """
        ...
    
    def SetColorVertices(self, bool):
        """
        V.SetColorVertices(bool)
        C++: void SetColorVertices(bool vis)
        
        Whether to color vertices.  Default is off.
        """
        ...
    
    def SetEdgeColorArrayName(self, string):
        """
        V.SetEdgeColorArrayName(string)
        C++: void SetEdgeColorArrayName(const char *name)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def SetEdgeLineWidth(self, p_float):
        """
        V.SetEdgeLineWidth(float)
        C++: void SetEdgeLineWidth(float width)
        
        Get/Set the edge line width
        """
        ...
    
    def SetEdgeVisibility(self, bool):
        """
        V.SetEdgeVisibility(bool)
        C++: void SetEdgeVisibility(bool vis)
        
        Whether to show edges or not.  Default is on.
        """
        ...
    
    def SetEnabledEdgesArrayName(self, string):
        """
        V.SetEnabledEdgesArrayName(string)
        C++: virtual void SetEnabledEdgesArrayName(const char *_arg)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def SetEnabledVerticesArrayName(self, string):
        """
        V.SetEnabledVerticesArrayName(string)
        C++: virtual void SetEnabledVerticesArrayName(const char *_arg)
        
        The array to use for coloring edges.  Default is "color".
        """
        ...
    
    def SetEnableEdgesByArray(self, p_int):
        """
        V.SetEnableEdgesByArray(int)
        C++: virtual void SetEnableEdgesByArray(vtkTypeBool _arg)
        
        Whether to enable/disable edges using array values.  Default is
        off.
        """
        ...
    
    def SetEnableVerticesByArray(self, p_int):
        """
        V.SetEnableVerticesByArray(int)
        C++: virtual void SetEnableVerticesByArray(vtkTypeBool _arg)
        
        Whether to enable/disable vertices using array values.  Default
        is off.
        """
        ...
    
    def SetIconAlignment(self, p_int):
        """
        V.SetIconAlignment(int)
        C++: void SetIconAlignment(int alignment)
        
        Specify where the icons should be placed in relation to the
        vertex. See vtkIconGlyphFilter.h for possible values.
        """
        ...
    
    def SetIconArrayName(self, string):
        """
        V.SetIconArrayName(string)
        C++: void SetIconArrayName(const char *name)
        
        The array to use for assigning icons.
        """
        ...
    
    def SetIconSize(self, *int):
        """
        V.SetIconSize([int, ...])
        C++: void SetIconSize(int *size)
        
        Specify the Width and Height, in pixels, of an icon in the icon
        sheet.
        """
        ...
    
    def SetIconTexture(self, vtkTexture):
        """
        V.SetIconTexture(vtkTexture)
        C++: void SetIconTexture(vtkTexture *texture)
        
        The texture containing the icon sheet.
        """
        ...
    
    def SetIconVisibility(self, bool):
        """
        V.SetIconVisibility(bool)
        C++: void SetIconVisibility(bool vis)
        
        Whether to show icons.  Default is off.
        """
        ...
    
    def SetInputData(self, vtkGraph):
        """
        V.SetInputData(vtkGraph)
        C++: void SetInputData(vtkGraph *input)
        
        Set the Input of this mapper.
        """
        ...
    
    def SetScaledGlyphs(self, bool):
        """
        V.SetScaledGlyphs(bool)
        C++: void SetScaledGlyphs(bool arg)
        
        Whether scaled glyphs are on or not.  Default is off. By default
        this mapper uses vertex glyphs that do not scale. If you turn
        this option on you will get circles at each vertex and they will
        scale as you zoom in/out.
        """
        ...
    
    def SetScalingArrayName(self, string):
        """
        V.SetScalingArrayName(string)
        C++: virtual void SetScalingArrayName(const char *_arg)
        
        Glyph scaling array name. Default is "scale"
        """
        ...
    
    def SetVertexColorArrayName(self, string):
        """
        V.SetVertexColorArrayName(string)
        C++: void SetVertexColorArrayName(const char *name)
        
        The array to use for coloring vertices.  Default is "color".
        """
        ...
    
    def SetVertexPointSize(self, p_float):
        """
        V.SetVertexPointSize(float)
        C++: void SetVertexPointSize(float size)
        
        Get/Set the vertex point size
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


