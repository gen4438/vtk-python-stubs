"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkShaderProperty(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkShaderProperty - represent GPU shader properties
    
    Superclass: vtkObject
    
    vtkShaderProperty is used to hold user-defined modifications of a GPU
    shader program used in a mapper.
    
    @sa
    vtkVolume vtkOpenGLUniform
    
    @par Thanks: Developed by Simon Drouin (sdrouin2@bwh.harvard.edu) at
    Brigham and Women's Hospital.
    """
    def AddFragmentShaderReplacement(self, string, bool, string_1, bool_1):
        """
        V.AddFragmentShaderReplacement(string, bool, string, bool)
        C++: virtual void AddFragmentShaderReplacement(
            const std::string &originalValue, bool replaceFirst,
            const std::string &replacementValue, bool replaceAll)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def AddGeometryShaderReplacement(self, string, bool, string_1, bool_1):
        """
        V.AddGeometryShaderReplacement(string, bool, string, bool)
        C++: virtual void AddGeometryShaderReplacement(
            const std::string &originalValue, bool replaceFirst,
            const std::string &replacementValue, bool replaceAll)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def AddVertexShaderReplacement(self, string, bool, string_1, bool_1):
        """
        V.AddVertexShaderReplacement(string, bool, string, bool)
        C++: virtual void AddVertexShaderReplacement(
            const std::string &originalValue, bool replaceFirst,
            const std::string &replacementValue, bool replaceAll)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllFragmentShaderReplacements(self):
        """
        V.ClearAllFragmentShaderReplacements()
        C++: virtual void ClearAllFragmentShaderReplacements()
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllGeometryShaderReplacements(self):
        """
        V.ClearAllGeometryShaderReplacements()
        C++: virtual void ClearAllGeometryShaderReplacements()
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllShaderReplacements(self):
        """
        V.ClearAllShaderReplacements()
        C++: virtual void ClearAllShaderReplacements()
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearAllVertexShaderReplacements(self):
        """
        V.ClearAllVertexShaderReplacements()
        C++: virtual void ClearAllVertexShaderReplacements()
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearFragmentShaderReplacement(self, string, bool):
        """
        V.ClearFragmentShaderReplacement(string, bool)
        C++: virtual void ClearFragmentShaderReplacement(
            const std::string &originalValue, bool replaceFirst)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearGeometryShaderReplacement(self, string, bool):
        """
        V.ClearGeometryShaderReplacement(string, bool)
        C++: virtual void ClearGeometryShaderReplacement(
            const std::string &originalValue, bool replaceFirst)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def ClearVertexShaderReplacement(self, string, bool):
        """
        V.ClearVertexShaderReplacement(string, bool)
        C++: virtual void ClearVertexShaderReplacement(
            const std::string &originalValue, bool replaceFirst)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def DeepCopy(self, vtkShaderProperty):
        """
        V.DeepCopy(vtkShaderProperty)
        C++: void DeepCopy(vtkShaderProperty *p)
        
        Assign one property to another.
        """
        ...
    
    def GetFragmentCustomUniforms(self):
        """
        V.GetFragmentCustomUniforms() -> vtkUniforms
        C++: virtual vtkUniforms *GetFragmentCustomUniforms()
        
        The Uniforms object allows to set custom uniform variables that
        are used in replacement shader code.
        """
        ...
    
    def GetFragmentShaderCode(self):
        """
        V.GetFragmentShaderCode() -> string
        C++: virtual char *GetFragmentShaderCode()
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def GetGeometryCustomUniforms(self):
        """
        V.GetGeometryCustomUniforms() -> vtkUniforms
        C++: virtual vtkUniforms *GetGeometryCustomUniforms()
        
        The Uniforms object allows to set custom uniform variables that
        are used in replacement shader code.
        """
        ...
    
    def GetGeometryShaderCode(self):
        """
        V.GetGeometryShaderCode() -> string
        C++: virtual char *GetGeometryShaderCode()
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def GetNthShaderReplacement(self, p_int, string, bool, string_1, bool_1):
        """
        V.GetNthShaderReplacement(int, string, bool, string, bool)
        C++: virtual void GetNthShaderReplacement(vtkIdType index,
            std::string &name, bool &replaceFirst,
            std::string &replacementValue, bool &replaceAll)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def GetNthShaderReplacementTypeAsString(self, p_int):
        """
        V.GetNthShaderReplacementTypeAsString(int) -> string
        C++: virtual std::string GetNthShaderReplacementTypeAsString(
            vtkIdType index)
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfShaderReplacements(self):
        """
        V.GetNumberOfShaderReplacements() -> int
        C++: virtual int GetNumberOfShaderReplacements()
        
        This function enables you to apply your own substitutions to the
        shader creation process. The shader code in this class is created
        by applying a bunch of string replacements to a shader template.
        Using this function you can apply your own string replacements to
        add features you desire.
        """
        ...
    
    def GetShaderMTime(self):
        """
        V.GetShaderMTime() -> int
        C++: vtkMTimeType GetShaderMTime()
        
        GetShaderMTime returns the last time a modification
        was made that affected the code of the shader (either code
        replacement was changed or one or more uniform variables were
        added or removed. This timestamp can be used by mappers to
        determine if the shader must be recompiled. Simply changing the
        value of an existing uniform variable doesn't affect this
        timestamp as it doesn't change the shader code.
        @return timestamp of the last modification
        """
        ...
    
    def GetVertexCustomUniforms(self):
        """
        V.GetVertexCustomUniforms() -> vtkUniforms
        C++: virtual vtkUniforms *GetVertexCustomUniforms()
        
        The Uniforms object allows to set custom uniform variables that
        are used in replacement shader code.
        """
        ...
    
    def GetVertexShaderCode(self):
        """
        V.GetVertexShaderCode() -> string
        C++: virtual char *GetVertexShaderCode()
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def HasFragmentShaderCode(self):
        """
        V.HasFragmentShaderCode() -> bool
        C++: bool HasFragmentShaderCode()
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def HasGeometryShaderCode(self):
        """
        V.HasGeometryShaderCode() -> bool
        C++: bool HasGeometryShaderCode()
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def HasVertexShaderCode(self):
        """
        V.HasVertexShaderCode() -> bool
        C++: bool HasVertexShaderCode()
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkShaderProperty
        C++: vtkShaderProperty *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkShaderProperty
        C++: static vtkShaderProperty *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFragmentShaderCode(self, string):
        """
        V.SetFragmentShaderCode(string)
        C++: virtual void SetFragmentShaderCode(const char *_arg)
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def SetGeometryShaderCode(self, string):
        """
        V.SetGeometryShaderCode(string)
        C++: virtual void SetGeometryShaderCode(const char *_arg)
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def SetVertexShaderCode(self, string):
        """
        V.SetVertexShaderCode(string)
        C++: virtual void SetVertexShaderCode(const char *_arg)
        
        Allow the program to set the shader codes used directly instead
        of using the built in templates. Be aware, if set, this template
        will be used for all cases, primitive types, picking etc.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


