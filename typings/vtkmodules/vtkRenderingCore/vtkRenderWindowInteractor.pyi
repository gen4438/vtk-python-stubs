"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkRenderWindowInteractor(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkRenderWindowInteractor - platform-independent render window
    interaction including picking and frame rate control.
    
    Superclass: vtkObject
    
    vtkRenderWindowInteractor provides a platform-independent interaction
    mechanism for mouse/key/time events. It serves as a base class for
    platform-dependent implementations that handle routing of
    mouse/key/timer messages to vtkInteractorObserver and its subclasses.
    vtkRenderWindowInteractor also provides controls for picking,
    rendering frame rate, and headlights.
    
    vtkRenderWindowInteractor has changed from previous implementations
    and now serves only as a shell to hold user preferences and route
    messages to vtkInteractorStyle. Callbacks are available for many
    events.  Platform specific subclasses should provide methods for
    manipulating timers, TerminateApp, and an event loop if required via
    Initialize/Start/Enable/Disable.
    
    @warning
    vtkRenderWindowInteractor routes events through VTK's
    command/observer design pattern. That is, when
    vtkRenderWindowInteractor (actually, one of its subclasses) sees a
    platform-dependent event, it translates this into a VTK event using
    the InvokeEvent() method. Then any vtkInteractorObservers registered
    for that event are expected to respond as appropriate.
    
    @sa
    vtkInteractorObserver
    """
    def CharEvent(self):
        """
        V.CharEvent()
        C++: virtual void CharEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def ClearContact(self, p_int):
        """
        V.ClearContact(int)
        C++: void ClearContact(size_t contactID)
        
        Most multitouch systems use persistent contact/pointer ids to
        track events/motion during multitouch events. We keep an array
        that maps these system dependent contact ids to our pointer index
        These functions return -1 if the ID is not found or if there is
        no more room for contacts
        """
        ...
    
    def ClearPointerIndex(self, p_int):
        """
        V.ClearPointerIndex(int)
        C++: void ClearPointerIndex(int i)
        
        Most multitouch systems use persistent contact/pointer ids to
        track events/motion during multitouch events. We keep an array
        that maps these system dependent contact ids to our pointer index
        These functions return -1 if the ID is not found or if there is
        no more room for contacts
        """
        ...
    
    def ConfigureEvent(self):
        """
        V.ConfigureEvent()
        C++: virtual void ConfigureEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def CreateDefaultPicker(self):
        """
        V.CreateDefaultPicker() -> vtkAbstractPropPicker
        C++: virtual vtkAbstractPropPicker *CreateDefaultPicker()
        
        Create default picker. Used to create one when none is specified.
        Default is an instance of vtkPropPicker.
        """
        ...
    
    def CreateOneShotTimer(self, p_int):
        """
        V.CreateOneShotTimer(int) -> int
        C++: int CreateOneShotTimer(unsigned long duration)
        
        Create a one shot timer, with the specified duration (in
        milliseconds).
        \return the timer id.
        """
        ...
    
    def CreateRepeatingTimer(self, p_int):
        """
        V.CreateRepeatingTimer(int) -> int
        C++: int CreateRepeatingTimer(unsigned long duration)
        
        Create a repeating timer, with the specified duration (in
        milliseconds).
        \return the timer id.
        """
        ...
    
    def CreateTimer(self, p_int):
        """
        V.CreateTimer(int) -> int
        C++: virtual int CreateTimer(int timerType)
        
        This class provides two groups of methods for manipulating
        timers.  The first group (CreateTimer(timerType) and
        DestroyTimer()) implicitly use an internal timer id (and are
        present for backward compatibility). The second group
        (CreateRepeatingTimer(long),CreateOneShotTimer(long),
        ResetTimer(int),DestroyTimer(int)) use timer ids so multiple
        timers can be independently managed. In the first group, the
        CreateTimer() method takes an argument indicating whether the
        timer is created the first time (timerType==VTKI_TIMER_FIRST) or
        whether it is being reset (timerType==VTKI_TIMER_UPDATE). (In
        initial implementations of VTK this was how one shot and
        repeating timers were managed.) In the second group, the create
        methods take a timer duration argument (in milliseconds) and
        return a timer id. Thus the ResetTimer(timerId) and
        DestroyTimer(timerId) methods take this timer id and operate on
        the timer as appropriate. Methods are also available for
        determining
        """
        ...
    
    def DestroyTimer(self):
        """
        V.DestroyTimer() -> int
        C++: virtual int DestroyTimer()
        V.DestroyTimer(int) -> int
        C++: int DestroyTimer(int timerId)
        """
        ...
    
    def Disable(self):
        """
        V.Disable()
        C++: virtual void Disable()
        """
        ...
    
    def Enable(self):
        """
        V.Enable()
        C++: virtual void Enable()
        
        Enable/Disable interactions.  By default interactors are enabled
        when initialized.  Initialize() must be called prior to
        enabling/disabling interaction. These methods are used when a
        window/widget is being shared by multiple renderers and
        interactors.  This allows a "modal" display where one interactor
        is active when its data is to be displayed and all other
        interactors associated with the widget are disabled when their
        data is not displayed.
        """
        ...
    
    def EnableRenderOff(self):
        """
        V.EnableRenderOff()
        C++: virtual void EnableRenderOff()
        
        Enable/Disable whether vtkRenderWindowInteractor::Render() calls
        this->RenderWindow->Render().
        """
        ...
    
    def EnableRenderOn(self):
        """
        V.EnableRenderOn()
        C++: virtual void EnableRenderOn()
        
        Enable/Disable whether vtkRenderWindowInteractor::Render() calls
        this->RenderWindow->Render().
        """
        ...
    
    def EndPanEvent(self):
        """
        V.EndPanEvent()
        C++: virtual void EndPanEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def EndPickCallback(self):
        """
        V.EndPickCallback()
        C++: virtual void EndPickCallback()
        
        These methods correspond to the Exit, User and Pick callbacks.
        They allow for the Style to invoke them.
        """
        ...
    
    def EndPinchEvent(self):
        """
        V.EndPinchEvent()
        C++: virtual void EndPinchEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def EndRotateEvent(self):
        """
        V.EndRotateEvent()
        C++: virtual void EndRotateEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def EnterEvent(self):
        """
        V.EnterEvent()
        C++: virtual void EnterEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def ExitCallback(self):
        """
        V.ExitCallback()
        C++: virtual void ExitCallback()
        
        These methods correspond to the Exit, User and Pick callbacks.
        They allow for the Style to invoke them.
        """
        ...
    
    def ExitEvent(self):
        """
        V.ExitEvent()
        C++: virtual void ExitEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def ExposeEvent(self):
        """
        V.ExposeEvent()
        C++: virtual void ExposeEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def FifthButtonPressEvent(self):
        """
        V.FifthButtonPressEvent()
        C++: virtual void FifthButtonPressEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def FifthButtonReleaseEvent(self):
        """
        V.FifthButtonReleaseEvent()
        C++: virtual void FifthButtonReleaseEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def FindPokedRenderer(self, p_int, p_int_1):
        """
        V.FindPokedRenderer(int, int) -> vtkRenderer
        C++: virtual vtkRenderer *FindPokedRenderer(int, int)
        
        When an event occurs, we must determine which Renderer the event
        occurred within, since one RenderWindow may contain multiple
        renderers.
        """
        ...
    
    def FlyTo(self, vtkRenderer, p_float, p_float_1, p_float_2):
        """
        V.FlyTo(vtkRenderer, float, float, float)
        C++: void FlyTo(vtkRenderer *ren, double x, double y, double z)
        V.FlyTo(vtkRenderer, [float, ...])
        C++: void FlyTo(vtkRenderer *ren, double *x)
        
        Given a position x, move the current camera's focal point to x.
        The movement is animated over the number of frames specified in
        NumberOfFlyFrames. The LOD desired frame rate is used.
        """
        ...
    
    def FlyToImage(self, vtkRenderer, p_float, p_float_1):
        """
        V.FlyToImage(vtkRenderer, float, float)
        C++: void FlyToImage(vtkRenderer *ren, double x, double y)
        V.FlyToImage(vtkRenderer, [float, ...])
        C++: void FlyToImage(vtkRenderer *ren, double *x)
        
        Given a position x, move the current camera's focal point to x.
        The movement is animated over the number of frames specified in
        NumberOfFlyFrames. The LOD desired frame rate is used.
        """
        ...
    
    def FourthButtonPressEvent(self):
        """
        V.FourthButtonPressEvent()
        C++: virtual void FourthButtonPressEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def FourthButtonReleaseEvent(self):
        """
        V.FourthButtonReleaseEvent()
        C++: virtual void FourthButtonReleaseEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def GetAltKey(self):
        """
        V.GetAltKey() -> int
        C++: virtual int GetAltKey()
        
        Set/get whether alt modifier key was pressed.
        """
        ...
    
    def GetControlKey(self):
        """
        V.GetControlKey() -> int
        C++: virtual int GetControlKey()
        
        Set/get whether control modifier key was pressed.
        """
        ...
    
    def GetDesiredUpdateRate(self):
        """
        V.GetDesiredUpdateRate() -> float
        C++: virtual double GetDesiredUpdateRate()
        
        Set/Get the desired update rate. This is used by vtkLODActor's to
        tell them how quickly they need to render.  This update is in
        effect only when the camera is being rotated, or zoomed.  When
        the interactor is still, the StillUpdateRate is used instead. The
        default is 15.
        """
        ...
    
    def GetDesiredUpdateRateMaxValue(self):
        """
        V.GetDesiredUpdateRateMaxValue() -> float
        C++: virtual double GetDesiredUpdateRateMaxValue()
        
        Set/Get the desired update rate. This is used by vtkLODActor's to
        tell them how quickly they need to render.  This update is in
        effect only when the camera is being rotated, or zoomed.  When
        the interactor is still, the StillUpdateRate is used instead. The
        default is 15.
        """
        ...
    
    def GetDesiredUpdateRateMinValue(self):
        """
        V.GetDesiredUpdateRateMinValue() -> float
        C++: virtual double GetDesiredUpdateRateMinValue()
        
        Set/Get the desired update rate. This is used by vtkLODActor's to
        tell them how quickly they need to render.  This update is in
        effect only when the camera is being rotated, or zoomed.  When
        the interactor is still, the StillUpdateRate is used instead. The
        default is 15.
        """
        ...
    
    def GetDolly(self):
        """
        V.GetDolly() -> float
        C++: virtual double GetDolly()
        
        Set the total Dolly value to use when flying to (FlyTo()) a
        specified point. Negative values fly away from the point.
        """
        ...
    
    def GetDone(self):
        """
        V.GetDone() -> bool
        C++: virtual bool GetDone()
        
        Is the interactor loop done
        """
        ...
    
    def GetEnabled(self):
        """
        V.GetEnabled() -> int
        C++: virtual int GetEnabled()
        """
        ...
    
    def GetEnableRender(self):
        """
        V.GetEnableRender() -> bool
        C++: virtual bool GetEnableRender()
        
        Enable/Disable whether vtkRenderWindowInteractor::Render() calls
        this->RenderWindow->Render().
        """
        ...
    
    def GetEventPosition(self):
        """
        V.GetEventPosition() -> (int, int)
        C++: virtual int *GetEventPosition()
        
        Set/Get information about the current event. The current x,y
        position is in the EventPosition, and the previous event position
        is in LastEventPosition, updated automatically each time
        EventPosition is set using its Set() method. Mouse positions are
        measured in pixels. The other information is about key board
        input.
        """
        ...
    
    def GetEventPositions(self, p_int):
        """
        V.GetEventPositions(int) -> (int, ...)
        C++: virtual int *GetEventPositions(int pointerIndex)
        """
        ...
    
    def GetEventSize(self):
        """
        V.GetEventSize() -> (int, int)
        C++: virtual int *GetEventSize()
        
        This methods sets the Size ivar of the interactor without
        actually changing the size of the window. Normally application
        programmers would use UpdateSize if anything. This is useful for
        letting someone else change the size of the rendering window and
        just letting the interactor know about the change. The current
        event width/height (if any) is in EventSize (Expose event, for
        example). Window size is measured in pixels.
        """
        ...
    
    def GetHardwareWindow(self):
        """
        V.GetHardwareWindow() -> vtkHardwareWindow
        C++: virtual vtkHardwareWindow *GetHardwareWindow()
        
        Set/Get the hardware window being controlled by this object. For
        opengl the hardware window is not used as the opengl subclasses
        of RenderWindow provide the functionality.
        """
        ...
    
    def GetInitialized(self):
        """
        V.GetInitialized() -> int
        C++: virtual int GetInitialized()
        
        See whether interactor has been initialized yet. Default is 0.
        """
        ...
    
    def GetInteractorStyle(self):
        """
        V.GetInteractorStyle() -> vtkInteractorObserver
        C++: virtual vtkInteractorObserver *GetInteractorStyle()
        
        External switching between joystick/trackball/new? modes. Initial
        value is a vtkInteractorStyleSwitch object.
        """
        ...
    
    def GetKeyCode(self):
        """
        V.GetKeyCode() -> char
        C++: virtual char GetKeyCode()
        
        Set/get the key code for the key that was pressed.
        """
        ...
    
    def GetKeySym(self):
        """
        V.GetKeySym() -> string
        C++: virtual char *GetKeySym()
        
        Set/get the key symbol for the key that was pressed. This is the
        key symbol as defined by the relevant X headers. On X based
        platforms this corresponds to the installed X server, whereas on
        other platforms the native key codes are translated into a string
        representation.
        """
        ...
    
    def GetLastEventPosition(self):
        """
        V.GetLastEventPosition() -> (int, int)
        C++: virtual int *GetLastEventPosition()
        
        Set/Get information about the current event. The current x,y
        position is in the EventPosition, and the previous event position
        is in LastEventPosition, updated automatically each time
        EventPosition is set using its Set() method. Mouse positions are
        measured in pixels. The other information is about key board
        input.
        """
        ...
    
    def GetLastEventPositions(self, p_int):
        """
        V.GetLastEventPositions(int) -> (int, ...)
        C++: virtual int *GetLastEventPositions(int pointerIndex)
        """
        ...
    
    def GetLastRotation(self):
        """
        V.GetLastRotation() -> float
        C++: virtual double GetLastRotation()
        
        Set/get the rotation for the gesture in degrees, update
        LastRotation
        """
        ...
    
    def GetLastScale(self):
        """
        V.GetLastScale() -> float
        C++: virtual double GetLastScale()
        
        Set/get the scale for the gesture, updates LastScale
        """
        ...
    
    def GetLastTranslation(self):
        """
        V.GetLastTranslation() -> (float, float)
        C++: virtual double *GetLastTranslation()
        
        Set/get the translation for pan/swipe gestures, update
        LastTranslation
        """
        ...
    
    def GetLightFollowCamera(self):
        """
        V.GetLightFollowCamera() -> int
        C++: virtual vtkTypeBool GetLightFollowCamera()
        
        Turn on/off the automatic repositioning of lights as the camera
        moves. Default is On.
        """
        ...
    
    def GetMousePosition(self, *int, **kwargs):
        """
        V.GetMousePosition([int, ...], [int, ...])
        C++: virtual void GetMousePosition(int *x, int *y)
        
        Get the current position of the mouse.
        """
        ...
    
    def GetNumberOfFlyFrames(self):
        """
        V.GetNumberOfFlyFrames() -> int
        C++: virtual int GetNumberOfFlyFrames()
        
        Set the number of frames to fly to when FlyTo is invoked.
        """
        ...
    
    def GetNumberOfFlyFramesMaxValue(self):
        """
        V.GetNumberOfFlyFramesMaxValue() -> int
        C++: virtual int GetNumberOfFlyFramesMaxValue()
        
        Set the number of frames to fly to when FlyTo is invoked.
        """
        ...
    
    def GetNumberOfFlyFramesMinValue(self):
        """
        V.GetNumberOfFlyFramesMinValue() -> int
        C++: virtual int GetNumberOfFlyFramesMinValue()
        
        Set the number of frames to fly to when FlyTo is invoked.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetObserverMediator(self):
        """
        V.GetObserverMediator() -> vtkObserverMediator
        C++: vtkObserverMediator *GetObserverMediator()
        
        Return the object used to mediate between vtkInteractorObservers
        contending for resources. Multiple interactor observers will
        often request different resources (e.g., cursor shape); the
        mediator uses a strategy to provide the resource based on
        priority of the observer plus the particular request (default
        versus non-default cursor shape).
        """
        ...
    
    def GetPicker(self):
        """
        V.GetPicker() -> vtkAbstractPicker
        C++: virtual vtkAbstractPicker *GetPicker()
        
        Set/Get the object used to perform pick operations. In order to
        pick instances of vtkProp, the picker must be a subclass of
        vtkAbstractPropPicker, meaning that it can identify a particular
        instance of vtkProp.
        """
        ...
    
    def GetPickingManager(self):
        """
        V.GetPickingManager() -> vtkPickingManager
        C++: virtual vtkPickingManager *GetPickingManager()
        
        Set the picking manager. Set/Get the object used to perform
        operations through the interactor By default, a valid but
        disabled picking manager is instantiated.
        """
        ...
    
    def GetPointerIndex(self):
        """
        V.GetPointerIndex() -> int
        C++: virtual int GetPointerIndex()
        
        Set/get the index of the most recent pointer to have an event
        """
        ...
    
    def GetPointerIndexForContact(self, p_int):
        """
        V.GetPointerIndexForContact(int) -> int
        C++: int GetPointerIndexForContact(size_t contactID)
        
        Most multitouch systems use persistent contact/pointer ids to
        track events/motion during multitouch events. We keep an array
        that maps these system dependent contact ids to our pointer index
        These functions return -1 if the ID is not found or if there is
        no more room for contacts
        """
        ...
    
    def GetPointerIndexForExistingContact(self, p_int):
        """
        V.GetPointerIndexForExistingContact(int) -> int
        C++: int GetPointerIndexForExistingContact(size_t contactID)
        
        Most multitouch systems use persistent contact/pointer ids to
        track events/motion during multitouch events. We keep an array
        that maps these system dependent contact ids to our pointer index
        These functions return -1 if the ID is not found or if there is
        no more room for contacts
        """
        ...
    
    def GetPointersDownCount(self):
        """
        V.GetPointersDownCount() -> int
        C++: virtual int GetPointersDownCount()
        
        When handling gestures you can query this value to determine how
        many pointers are down for the gesture this is useful for pan
        gestures for example
        """
        ...
    
    def GetRecognizeGestures(self):
        """
        V.GetRecognizeGestures() -> bool
        C++: virtual bool GetRecognizeGestures()
        
        Convert multitouch events into gestures. When this is on (its
        default) multitouch events received by this interactor will be
        converted into gestures by VTK. If turned off the raw multitouch
        events will be passed down.
        """
        ...
    
    def GetRenderWindow(self):
        """
        V.GetRenderWindow() -> vtkRenderWindow
        C++: virtual vtkRenderWindow *GetRenderWindow()
        
        Set/Get the rendering window being controlled by this object.
        """
        ...
    
    def GetRepeatCount(self):
        """
        V.GetRepeatCount() -> int
        C++: virtual int GetRepeatCount()
        
        Set/get the repear count for the key or mouse event. This
        specifies how many times a key has been pressed.
        """
        ...
    
    def GetRotation(self):
        """
        V.GetRotation() -> float
        C++: virtual double GetRotation()
        
        Set/get the rotation for the gesture in degrees, update
        LastRotation
        """
        ...
    
    def GetScale(self):
        """
        V.GetScale() -> float
        C++: virtual double GetScale()
        
        Set/get the scale for the gesture, updates LastScale
        """
        ...
    
    def GetShiftKey(self):
        """
        V.GetShiftKey() -> int
        C++: virtual int GetShiftKey()
        
        Set/get whether shift modifier key was pressed.
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> (int, int)
        C++: virtual int *GetSize()
        
        This methods sets the Size ivar of the interactor without
        actually changing the size of the window. Normally application
        programmers would use UpdateSize if anything. This is useful for
        letting someone else change the size of the rendering window and
        just letting the interactor know about the change. The current
        event width/height (if any) is in EventSize (Expose event, for
        example). Window size is measured in pixels.
        """
        ...
    
    def GetStillUpdateRate(self):
        """
        V.GetStillUpdateRate() -> float
        C++: virtual double GetStillUpdateRate()
        
        Set/Get the desired update rate when movement has stopped. For
        the non-still update rate, see the SetDesiredUpdateRate method.
        The default is 0.0001
        """
        ...
    
    def GetStillUpdateRateMaxValue(self):
        """
        V.GetStillUpdateRateMaxValue() -> float
        C++: virtual double GetStillUpdateRateMaxValue()
        
        Set/Get the desired update rate when movement has stopped. For
        the non-still update rate, see the SetDesiredUpdateRate method.
        The default is 0.0001
        """
        ...
    
    def GetStillUpdateRateMinValue(self):
        """
        V.GetStillUpdateRateMinValue() -> float
        C++: virtual double GetStillUpdateRateMinValue()
        
        Set/Get the desired update rate when movement has stopped. For
        the non-still update rate, see the SetDesiredUpdateRate method.
        The default is 0.0001
        """
        ...
    
    def GetTimerDuration(self, p_int):
        """
        V.GetTimerDuration(int) -> int
        C++: unsigned long GetTimerDuration(int timerId)
        V.GetTimerDuration() -> int
        C++: virtual unsigned long GetTimerDuration()
        
        Get the duration (in milliseconds) for the specified timerId.
        """
        ...
    
    def GetTimerDurationMaxValue(self):
        """
        V.GetTimerDurationMaxValue() -> int
        C++: virtual unsigned long GetTimerDurationMaxValue()
        
        Specify the default timer interval (in milliseconds). (This is
        used in conjunction with the timer methods described previously,
        e.g., CreateTimer() uses this value; and
        CreateRepeatingTimer(duration) and CreateOneShotTimer(duration)
        use the default value if the parameter "duration" is less than or
        equal to zero.) Care must be taken when adjusting the timer
        interval from the default value of 10 milliseconds--it may
        adversely affect the interactors.
        """
        ...
    
    def GetTimerDurationMinValue(self):
        """
        V.GetTimerDurationMinValue() -> int
        C++: virtual unsigned long GetTimerDurationMinValue()
        
        Specify the default timer interval (in milliseconds). (This is
        used in conjunction with the timer methods described previously,
        e.g., CreateTimer() uses this value; and
        CreateRepeatingTimer(duration) and CreateOneShotTimer(duration)
        use the default value if the parameter "duration" is less than or
        equal to zero.) Care must be taken when adjusting the timer
        interval from the default value of 10 milliseconds--it may
        adversely affect the interactors.
        """
        ...
    
    def GetTimerEventDuration(self):
        """
        V.GetTimerEventDuration() -> int
        C++: virtual int GetTimerEventDuration()
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def GetTimerEventId(self):
        """
        V.GetTimerEventId() -> int
        C++: virtual int GetTimerEventId()
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def GetTimerEventPlatformId(self):
        """
        V.GetTimerEventPlatformId() -> int
        C++: virtual int GetTimerEventPlatformId()
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def GetTimerEventType(self):
        """
        V.GetTimerEventType() -> int
        C++: virtual int GetTimerEventType()
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def GetTranslation(self):
        """
        V.GetTranslation() -> (float, float)
        C++: virtual double *GetTranslation()
        
        Set/get the translation for pan/swipe gestures, update
        LastTranslation
        """
        ...
    
    def GetUseTDx(self):
        """
        V.GetUseTDx() -> bool
        C++: virtual bool GetUseTDx()
        
        Use a 3DConnexion device. Initial value is false. If VTK is not
        build with the TDx option, this is no-op. If VTK is build with
        the TDx option, and a device is not connected, a warning is
        emitted. It is must be called before the first Render to be
        effective, otherwise it is ignored.
        """
        ...
    
    def GetVTKTimerId(self, p_int):
        """
        V.GetVTKTimerId(int) -> int
        C++: virtual int GetVTKTimerId(int platformTimerId)
        
        Get the VTK timer ID that corresponds to the supplied platform
        ID.
        """
        ...
    
    def HideCursor(self):
        """
        V.HideCursor()
        C++: void HideCursor()
        
        Hide or show the mouse cursor, it is nice to be able to hide the
        default cursor if you want VTK to display a 3D cursor instead.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: virtual void Initialize()
        
        Prepare for handling events and set the Enabled flag to true.
        This will be called automatically by Start() if the interactor is
        not initialized, but it can be called manually if you need to
        perform any operations between initialization and the start of
        the event loop.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsOneShotTimer(self, p_int):
        """
        V.IsOneShotTimer(int) -> int
        C++: int IsOneShotTimer(int timerId)
        
        Query whether the specified timerId is a one shot timer.
        \return 1 if the timer is a one shot timer.
        """
        ...
    
    def IsPointerIndexSet(self, p_int):
        """
        V.IsPointerIndexSet(int) -> bool
        C++: bool IsPointerIndexSet(int i)
        
        Most multitouch systems use persistent contact/pointer ids to
        track events/motion during multitouch events. We keep an array
        that maps these system dependent contact ids to our pointer index
        These functions return -1 if the ID is not found or if there is
        no more room for contacts
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def KeyPressEvent(self):
        """
        V.KeyPressEvent()
        C++: virtual void KeyPressEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def KeyReleaseEvent(self):
        """
        V.KeyReleaseEvent()
        C++: virtual void KeyReleaseEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def LeaveEvent(self):
        """
        V.LeaveEvent()
        C++: virtual void LeaveEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def LeftButtonPressEvent(self):
        """
        V.LeftButtonPressEvent()
        C++: virtual void LeftButtonPressEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def LeftButtonReleaseEvent(self):
        """
        V.LeftButtonReleaseEvent()
        C++: virtual void LeftButtonReleaseEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def LightFollowCameraOff(self):
        """
        V.LightFollowCameraOff()
        C++: virtual void LightFollowCameraOff()
        
        Turn on/off the automatic repositioning of lights as the camera
        moves. Default is On.
        """
        ...
    
    def LightFollowCameraOn(self):
        """
        V.LightFollowCameraOn()
        C++: virtual void LightFollowCameraOn()
        
        Turn on/off the automatic repositioning of lights as the camera
        moves. Default is On.
        """
        ...
    
    def LongTapEvent(self):
        """
        V.LongTapEvent()
        C++: virtual void LongTapEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def MiddleButtonPressEvent(self):
        """
        V.MiddleButtonPressEvent()
        C++: virtual void MiddleButtonPressEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def MiddleButtonReleaseEvent(self):
        """
        V.MiddleButtonReleaseEvent()
        C++: virtual void MiddleButtonReleaseEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def MouseMoveEvent(self):
        """
        V.MouseMoveEvent()
        C++: virtual void MouseMoveEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def MouseWheelBackwardEvent(self):
        """
        V.MouseWheelBackwardEvent()
        C++: virtual void MouseWheelBackwardEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def MouseWheelForwardEvent(self):
        """
        V.MouseWheelForwardEvent()
        C++: virtual void MouseWheelForwardEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderWindowInteractor
        C++: vtkRenderWindowInteractor *NewInstance()
        """
        ...
    
    def PanEvent(self):
        """
        V.PanEvent()
        C++: virtual void PanEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def PinchEvent(self):
        """
        V.PinchEvent()
        C++: virtual void PinchEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def ProcessEvents(self):
        """
        V.ProcessEvents()
        C++: virtual void ProcessEvents()
        
        Run the event loop and return. This is provided so that you can
        implement your own event loop but yet use the vtk event handling
        as well.
        """
        ...
    
    def ReInitialize(self):
        """
        V.ReInitialize()
        C++: void ReInitialize()
        
        Prepare for handling events and set the Enabled flag to true.
        This will be called automatically by Start() if the interactor is
        not initialized, but it can be called manually if you need to
        perform any operations between initialization and the start of
        the event loop.
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: virtual void Render()
        
        Render the scene. Just pass the render call on to the associated
        vtkRenderWindow.
        """
        ...
    
    def ResetTimer(self, p_int):
        """
        V.ResetTimer(int) -> int
        C++: int ResetTimer(int timerId)
        
        Reset the specified timer.
        """
        ...
    
    def RightButtonPressEvent(self):
        """
        V.RightButtonPressEvent()
        C++: virtual void RightButtonPressEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def RightButtonReleaseEvent(self):
        """
        V.RightButtonReleaseEvent()
        C++: virtual void RightButtonReleaseEvent()
        
        Fire various events. SetEventInformation should be called just
        prior to calling any of these methods. These methods will Invoke
        the corresponding vtk event.
        """
        ...
    
    def RotateEvent(self):
        """
        V.RotateEvent()
        C++: virtual void RotateEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderWindowInteractor
        C++: static vtkRenderWindowInteractor *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetAltKey(self, p_int):
        """
        V.SetAltKey(int)
        C++: virtual void SetAltKey(int _arg)
        
        Set/get whether alt modifier key was pressed.
        """
        ...
    
    def SetControlKey(self, p_int):
        """
        V.SetControlKey(int)
        C++: virtual void SetControlKey(int _arg)
        
        Set/get whether control modifier key was pressed.
        """
        ...
    
    def SetDesiredUpdateRate(self, p_float):
        """
        V.SetDesiredUpdateRate(float)
        C++: virtual void SetDesiredUpdateRate(double _arg)
        
        Set/Get the desired update rate. This is used by vtkLODActor's to
        tell them how quickly they need to render.  This update is in
        effect only when the camera is being rotated, or zoomed.  When
        the interactor is still, the StillUpdateRate is used instead. The
        default is 15.
        """
        ...
    
    def SetDolly(self, p_float):
        """
        V.SetDolly(float)
        C++: virtual void SetDolly(double _arg)
        
        Set the total Dolly value to use when flying to (FlyTo()) a
        specified point. Negative values fly away from the point.
        """
        ...
    
    def SetDone(self, bool):
        """
        V.SetDone(bool)
        C++: virtual void SetDone(bool _arg)
        """
        ...
    
    def SetEnableRender(self, bool):
        """
        V.SetEnableRender(bool)
        C++: virtual void SetEnableRender(bool _arg)
        
        Enable/Disable whether vtkRenderWindowInteractor::Render() calls
        this->RenderWindow->Render().
        """
        ...
    
    def SetEventInformation(self, p_int, p_int_1, p_int_2, p_int_3, char, p_int_4, string, p_int_5):
        """
        V.SetEventInformation(int, int, int, int, char, int, string, int)
        C++: void SetEventInformation(int x, int y, int ctrl, int shift,
            char keycode, int repeatcount, const char *keysym,
            int pointerIndex)
        V.SetEventInformation(int, int, int, int, char, int, string)
        C++: void SetEventInformation(int x, int y, int ctrl=0,
            int shift=0, char keycode=0, int repeatcount=0,
            const char *keysym=nullptr)
        
        Set all the event information in one call.
        """
        ...
    
    def SetEventInformationFlipY(self, p_int, p_int_1, p_int_2, p_int_3, char, p_int_4, string, p_int_5):
        """
        V.SetEventInformationFlipY(int, int, int, int, char, int, string,
            int)
        C++: void SetEventInformationFlipY(int x, int y, int ctrl,
            int shift, char keycode, int repeatcount, const char *keysym,
            int pointerIndex)
        V.SetEventInformationFlipY(int, int, int, int, char, int, string)
        C++: void SetEventInformationFlipY(int x, int y, int ctrl=0,
            int shift=0, char keycode=0, int repeatcount=0,
            const char *keysym=nullptr)
        
        Calls SetEventInformation, but flips the Y based on the current
        Size[1] value (i.e. y = this->Size[1] - y - 1).
        """
        ...
    
    def SetEventPosition(self, p_int, p_int_1):
        """
        V.SetEventPosition(int, int)
        C++: virtual void SetEventPosition(int x, int y)
        V.SetEventPosition([int, int])
        C++: virtual void SetEventPosition(int pos[2])
        V.SetEventPosition(int, int, int)
        C++: virtual void SetEventPosition(int x, int y, int pointerIndex)
        V.SetEventPosition([int, int], int)
        C++: virtual void SetEventPosition(int pos[2], int pointerIndex)
        
        Set/Get information about the current event. The current x,y
        position is in the EventPosition, and the previous event position
        is in LastEventPosition, updated automatically each time
        EventPosition is set using its Set() method. Mouse positions are
        measured in pixels. The other information is about key board
        input.
        """
        ...
    
    def SetEventPositionFlipY(self, p_int, p_int_1):
        """
        V.SetEventPositionFlipY(int, int)
        C++: virtual void SetEventPositionFlipY(int x, int y)
        V.SetEventPositionFlipY([int, int])
        C++: virtual void SetEventPositionFlipY(int pos[2])
        V.SetEventPositionFlipY(int, int, int)
        C++: virtual void SetEventPositionFlipY(int x, int y,
            int pointerIndex)
        V.SetEventPositionFlipY([int, int], int)
        C++: virtual void SetEventPositionFlipY(int pos[2],
            int pointerIndex)
        
        Set/Get information about the current event. The current x,y
        position is in the EventPosition, and the previous event position
        is in LastEventPosition, updated automatically each time
        EventPosition is set using its Set() method. Mouse positions are
        measured in pixels. The other information is about key board
        input.
        """
        ...
    
    def SetEventSize(self, p_int, p_int_1):
        """
        V.SetEventSize(int, int)
        C++: virtual void SetEventSize(int _arg1, int _arg2)
        V.SetEventSize((int, int))
        C++: void SetEventSize(const int _arg[2])
        
        This methods sets the Size ivar of the interactor without
        actually changing the size of the window. Normally application
        programmers would use UpdateSize if anything. This is useful for
        letting someone else change the size of the rendering window and
        just letting the interactor know about the change. The current
        event width/height (if any) is in EventSize (Expose event, for
        example). Window size is measured in pixels.
        """
        ...
    
    def SetHardwareWindow(self, vtkHardwareWindow):
        """
        V.SetHardwareWindow(vtkHardwareWindow)
        C++: void SetHardwareWindow(vtkHardwareWindow *aren)
        
        Set/Get the hardware window being controlled by this object. For
        opengl the hardware window is not used as the opengl subclasses
        of RenderWindow provide the functionality.
        """
        ...
    
    def SetInteractorStyle(self, vtkInteractorObserver):
        """
        V.SetInteractorStyle(vtkInteractorObserver)
        C++: virtual void SetInteractorStyle(vtkInteractorObserver *)
        
        External switching between joystick/trackball/new? modes. Initial
        value is a vtkInteractorStyleSwitch object.
        """
        ...
    
    def SetKeyCode(self, char):
        """
        V.SetKeyCode(char)
        C++: virtual void SetKeyCode(char _arg)
        
        Set/get the key code for the key that was pressed.
        """
        ...
    
    def SetKeyEventInformation(self, p_int, p_int_1, char, p_int_2, string):
        """
        V.SetKeyEventInformation(int, int, char, int, string)
        C++: void SetKeyEventInformation(int ctrl=0, int shift=0,
            char keycode=0, int repeatcount=0, const char *keysym=nullptr)
        
        Set all the keyboard-related event information in one call.
        """
        ...
    
    def SetKeySym(self, string):
        """
        V.SetKeySym(string)
        C++: virtual void SetKeySym(const char *_arg)
        
        Set/get the key symbol for the key that was pressed. This is the
        key symbol as defined by the relevant X headers. On X based
        platforms this corresponds to the installed X server, whereas on
        other platforms the native key codes are translated into a string
        representation.
        """
        ...
    
    def SetLastEventPosition(self, p_int, p_int_1):
        """
        V.SetLastEventPosition(int, int)
        C++: virtual void SetLastEventPosition(int _arg1, int _arg2)
        V.SetLastEventPosition((int, int))
        C++: void SetLastEventPosition(const int _arg[2])
        
        Set/Get information about the current event. The current x,y
        position is in the EventPosition, and the previous event position
        is in LastEventPosition, updated automatically each time
        EventPosition is set using its Set() method. Mouse positions are
        measured in pixels. The other information is about key board
        input.
        """
        ...
    
    def SetLightFollowCamera(self, p_int):
        """
        V.SetLightFollowCamera(int)
        C++: virtual void SetLightFollowCamera(vtkTypeBool _arg)
        
        Turn on/off the automatic repositioning of lights as the camera
        moves. Default is On.
        """
        ...
    
    def SetNumberOfFlyFrames(self, p_int):
        """
        V.SetNumberOfFlyFrames(int)
        C++: virtual void SetNumberOfFlyFrames(int _arg)
        
        Set the number of frames to fly to when FlyTo is invoked.
        """
        ...
    
    def SetPicker(self, vtkAbstractPicker):
        """
        V.SetPicker(vtkAbstractPicker)
        C++: virtual void SetPicker(vtkAbstractPicker *)
        
        Set/Get the object used to perform pick operations. In order to
        pick instances of vtkProp, the picker must be a subclass of
        vtkAbstractPropPicker, meaning that it can identify a particular
        instance of vtkProp.
        """
        ...
    
    def SetPickingManager(self, vtkPickingManager):
        """
        V.SetPickingManager(vtkPickingManager)
        C++: virtual void SetPickingManager(vtkPickingManager *)
        
        Set the picking manager. Set/Get the object used to perform
        operations through the interactor By default, a valid but
        disabled picking manager is instantiated.
        """
        ...
    
    def SetPointerIndex(self, p_int):
        """
        V.SetPointerIndex(int)
        C++: virtual void SetPointerIndex(int _arg)
        
        Set/get the index of the most recent pointer to have an event
        """
        ...
    
    def SetRecognizeGestures(self, bool):
        """
        V.SetRecognizeGestures(bool)
        C++: virtual void SetRecognizeGestures(bool _arg)
        
        Convert multitouch events into gestures. When this is on (its
        default) multitouch events received by this interactor will be
        converted into gestures by VTK. If turned off the raw multitouch
        events will be passed down.
        """
        ...
    
    def SetRenderWindow(self, vtkRenderWindow):
        """
        V.SetRenderWindow(vtkRenderWindow)
        C++: void SetRenderWindow(vtkRenderWindow *aren)
        
        Set/Get the rendering window being controlled by this object.
        """
        ...
    
    def SetRepeatCount(self, p_int):
        """
        V.SetRepeatCount(int)
        C++: virtual void SetRepeatCount(int _arg)
        
        Set/get the repear count for the key or mouse event. This
        specifies how many times a key has been pressed.
        """
        ...
    
    def SetRotation(self, p_float):
        """
        V.SetRotation(float)
        C++: void SetRotation(double val)
        
        Set/get the rotation for the gesture in degrees, update
        LastRotation
        """
        ...
    
    def SetScale(self, p_float):
        """
        V.SetScale(float)
        C++: void SetScale(double val)
        
        Set/get the scale for the gesture, updates LastScale
        """
        ...
    
    def SetShiftKey(self, p_int):
        """
        V.SetShiftKey(int)
        C++: virtual void SetShiftKey(int _arg)
        
        Set/get whether shift modifier key was pressed.
        """
        ...
    
    def SetSize(self, p_int, p_int_1):
        """
        V.SetSize(int, int)
        C++: virtual void SetSize(int _arg1, int _arg2)
        V.SetSize((int, int))
        C++: void SetSize(const int _arg[2])
        
        This methods sets the Size ivar of the interactor without
        actually changing the size of the window. Normally application
        programmers would use UpdateSize if anything. This is useful for
        letting someone else change the size of the rendering window and
        just letting the interactor know about the change. The current
        event width/height (if any) is in EventSize (Expose event, for
        example). Window size is measured in pixels.
        """
        ...
    
    def SetStillUpdateRate(self, p_float):
        """
        V.SetStillUpdateRate(float)
        C++: virtual void SetStillUpdateRate(double _arg)
        
        Set/Get the desired update rate when movement has stopped. For
        the non-still update rate, see the SetDesiredUpdateRate method.
        The default is 0.0001
        """
        ...
    
    def SetTimerDuration(self, p_int):
        """
        V.SetTimerDuration(int)
        C++: virtual void SetTimerDuration(unsigned long _arg)
        
        Specify the default timer interval (in milliseconds). (This is
        used in conjunction with the timer methods described previously,
        e.g., CreateTimer() uses this value; and
        CreateRepeatingTimer(duration) and CreateOneShotTimer(duration)
        use the default value if the parameter "duration" is less than or
        equal to zero.) Care must be taken when adjusting the timer
        interval from the default value of 10 milliseconds--it may
        adversely affect the interactors.
        """
        ...
    
    def SetTimerEventDuration(self, p_int):
        """
        V.SetTimerEventDuration(int)
        C++: virtual void SetTimerEventDuration(int _arg)
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def SetTimerEventId(self, p_int):
        """
        V.SetTimerEventId(int)
        C++: virtual void SetTimerEventId(int _arg)
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def SetTimerEventPlatformId(self, p_int):
        """
        V.SetTimerEventPlatformId(int)
        C++: virtual void SetTimerEventPlatformId(int _arg)
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def SetTimerEventType(self, p_int):
        """
        V.SetTimerEventType(int)
        C++: virtual void SetTimerEventType(int _arg)
        
        These methods are used to communicate information about the
        currently firing CreateTimerEvent or DestroyTimerEvent. The
        caller of CreateTimerEvent sets up TimerEventId, TimerEventType
        and TimerEventDuration. The observer of CreateTimerEvent should
        set up an appropriate platform specific timer based on those
        values and set the TimerEventPlatformId before returning. The
        caller of DestroyTimerEvent sets up TimerEventPlatformId. The
        observer of DestroyTimerEvent should simply destroy the platform
        specific timer created by CreateTimerEvent. See
        vtkGenericRenderWindowInteractor's InternalCreateTimer and
        InternalDestroyTimer for an example.
        """
        ...
    
    def SetTranslation(self, p_float=..., p_float=...):
        """
        V.SetTranslation([float, float])
        C++: void SetTranslation(double val[2])
        
        Set/get the translation for pan/swipe gestures, update
        LastTranslation
        """
        ...
    
    def SetUseTDx(self, bool):
        """
        V.SetUseTDx(bool)
        C++: virtual void SetUseTDx(bool _arg)
        
        Use a 3DConnexion device. Initial value is false. If VTK is not
        build with the TDx option, this is no-op. If VTK is build with
        the TDx option, and a device is not connected, a warning is
        emitted. It is must be called before the first Render to be
        effective, otherwise it is ignored.
        """
        ...
    
    def ShowCursor(self):
        """
        V.ShowCursor()
        C++: void ShowCursor()
        
        Hide or show the mouse cursor, it is nice to be able to hide the
        default cursor if you want VTK to display a 3D cursor instead.
        """
        ...
    
    def Start(self):
        """
        V.Start()
        C++: virtual void Start()
        
        Start the event loop. This is provided so that you do not have to
        implement your own event loop. You still can use your own event
        loop if you want.
        """
        ...
    
    def StartPanEvent(self):
        """
        V.StartPanEvent()
        C++: virtual void StartPanEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def StartPickCallback(self):
        """
        V.StartPickCallback()
        C++: virtual void StartPickCallback()
        
        These methods correspond to the Exit, User and Pick callbacks.
        They allow for the Style to invoke them.
        """
        ...
    
    def StartPinchEvent(self):
        """
        V.StartPinchEvent()
        C++: virtual void StartPinchEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def StartRotateEvent(self):
        """
        V.StartRotateEvent()
        C++: virtual void StartRotateEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def SwipeEvent(self):
        """
        V.SwipeEvent()
        C++: virtual void SwipeEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def TapEvent(self):
        """
        V.TapEvent()
        C++: virtual void TapEvent()
        
        Fire various gesture based events.  These methods will Invoke the
        corresponding vtk event.
        """
        ...
    
    def TerminateApp(self):
        """
        V.TerminateApp()
        C++: virtual void TerminateApp(void)
        
        This function is called on 'q','e' keypress if exitmethod is not
        specified and should be overridden by platform dependent
        subclasses to provide a termination procedure if one is required.
        """
        ...
    
    def UpdateSize(self, p_int, p_int_1):
        """
        V.UpdateSize(int, int)
        C++: virtual void UpdateSize(int x, int y)
        
        Event loop notification member for window size change. Window
        size is measured in pixels.
        
        If the size has changed, this method will fire
        vtkCommand::WindowResizeEvent.
        """
        ...
    
    def UserCallback(self):
        """
        V.UserCallback()
        C++: virtual void UserCallback()
        
        These methods correspond to the Exit, User and Pick callbacks.
        They allow for the Style to invoke them.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, actually, one_of_its_subclasses) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    OneShotTimer = ...
    RepeatingTimer = ...
    __dict__ = ...
    __vtkname__ = ...


