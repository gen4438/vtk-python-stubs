"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkCoordinate(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkCoordinate - perform coordinate transformation, and represent
    position, in a variety of vtk coordinate systems
    
    Superclass: vtkObject
    
    vtkCoordinate represents position in a variety of coordinate systems,
    and converts position to other coordinate systems. It also supports
    relative positioning, so you can create a cascade of vtkCoordinate
    objects (no loops please!) that refer to each other. The typical
    usage of this object is to set the coordinate system in which to
    represent a position (e.g.,
    SetCoordinateSystemToNormalizedDisplay()), set the value of the
    coordinate (e.g., SetValue()), and then invoke the appropriate method
    to convert to another coordinate system (e.g.,
    GetComputedWorldValue()).
    
    The coordinate systems in vtk are as follows:
    
    
      DISPLAY -             x-y pixel values in window
         0, 0 is the lower left of the first pixel,
         size, size is the upper right of the last pixel
      NORMALIZED DISPLAY -  x-y (0,1) normalized values
         0, 0 is the lower left of the first pixel,
         1, 1 is the upper right of the last pixel
      VIEWPORT -            x-y pixel values in viewport
         0, 0 is the lower left of the first pixel,
         size, size is the upper right of the last pixel
      NORMALIZED VIEWPORT - x-y (0,1) normalized value in viewport
         0, 0 is the lower left of the first pixel,
         1, 1 is the upper right of the last pixel
      VIEW -                x-y-z (-1,1) values in pose coordinates. (z
    is depth)
      POSE -                world coords translated and rotated to the
    camera
                            position and view direction
      WORLD -               x-y-z global coordinate values
      USERDEFINED -         x-y-z in User defined space 
    
    If you cascade vtkCoordinate objects, you refer to another
    vtkCoordinate object which in turn can refer to others, and so on.
    This allows you to create composite groups of things like vtkActor2D
    that are positioned relative to one another. Note that in cascaded
    sequences, each vtkCoordinate object may be specified in different
    coordinate systems!
    
    @sa
    vtkActor2D vtkScalarBarActor
    """
    def GetComputedDisplayValue(self, vtkViewport):
        """
        V.GetComputedDisplayValue(vtkViewport) -> (int, int)
        C++: int *GetComputedDisplayValue(vtkViewport *)
        
        Return the computed value in a specified coordinate system.
        """
        ...
    
    def GetComputedDoubleDisplayValue(self, vtkViewport):
        """
        V.GetComputedDoubleDisplayValue(vtkViewport) -> (float, float)
        C++: double *GetComputedDoubleDisplayValue(vtkViewport *)
        """
        ...
    
    def GetComputedDoubleViewportValue(self, vtkViewport):
        """
        V.GetComputedDoubleViewportValue(vtkViewport) -> (float, float)
        C++: double *GetComputedDoubleViewportValue(vtkViewport *)
        """
        ...
    
    def GetComputedLocalDisplayValue(self, vtkViewport):
        """
        V.GetComputedLocalDisplayValue(vtkViewport) -> (int, int)
        C++: int *GetComputedLocalDisplayValue(vtkViewport *)
        
        Return the computed value in a specified coordinate system.
        """
        ...
    
    def GetComputedUserDefinedValue(self, vtkViewport):
        """
        V.GetComputedUserDefinedValue(vtkViewport) -> (float, float,
            float)
        C++: virtual double *GetComputedUserDefinedValue(vtkViewport *)
        
        GetComputedUserDefinedValue() is to be used only when the
        coordinate system is VTK_USERDEFINED. The user must subclass
        vtkCoordinate and override this function, when set as the
        TransformCoordinate in 2D-Mappers, the user can customize display
        of 2D polygons
        """
        ...
    
    def GetComputedValue(self, vtkViewport):
        """
        V.GetComputedValue(vtkViewport) -> (float, float, float)
        C++: double *GetComputedValue(vtkViewport *)
        
        GetComputedValue() will return either World, Viewport or Display
        based on what has been set as the coordinate system. This is good
        for objects like vtkLineSource, where the user might want to use
        them as World or Viewport coordinates.
        """
        ...
    
    def GetComputedViewportValue(self, vtkViewport):
        """
        V.GetComputedViewportValue(vtkViewport) -> (int, int)
        C++: int *GetComputedViewportValue(vtkViewport *)
        
        Return the computed value in a specified coordinate system.
        """
        ...
    
    def GetComputedWorldValue(self, vtkViewport):
        """
        V.GetComputedWorldValue(vtkViewport) -> (float, float, float)
        C++: double *GetComputedWorldValue(vtkViewport *)
        
        Return the computed value in a specified coordinate system.
        """
        ...
    
    def GetCoordinateSystem(self):
        """
        V.GetCoordinateSystem() -> int
        C++: virtual int GetCoordinateSystem()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def GetCoordinateSystemAsString(self):
        """
        V.GetCoordinateSystemAsString() -> string
        C++: const char *GetCoordinateSystemAsString()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetReferenceCoordinate(self):
        """
        V.GetReferenceCoordinate() -> vtkCoordinate
        C++: virtual vtkCoordinate *GetReferenceCoordinate()
        
        If this coordinate is relative to another coordinate, then
        specify that coordinate as the ReferenceCoordinate. If this is
        NULL the coordinate is assumed to be absolute.
        """
        ...
    
    def GetValue(self):
        """
        V.GetValue() -> (float, float, float)
        C++: virtual double *GetValue()
        
        Set/get the value of this coordinate. This can be thought of as
        the position of this coordinate in its coordinate system.
        """
        ...
    
    def GetViewport(self):
        """
        V.GetViewport() -> vtkViewport
        C++: virtual vtkViewport *GetViewport()
        
        If you want this coordinate to be relative to a specific
        vtkViewport (vtkRenderer) then you can specify that here. NOTE:
        this is a raw pointer, not a weak pointer nor a reference counted
        object, to avoid reference cycle loop between rendering classes
        and filter classes.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCoordinate
        C++: vtkCoordinate *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCoordinate
        C++: static vtkCoordinate *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetCoordinateSystem(self, p_int):
        """
        V.SetCoordinateSystem(int)
        C++: virtual void SetCoordinateSystem(int _arg)
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetCoordinateSystemToDisplay(self):
        """
        V.SetCoordinateSystemToDisplay()
        C++: void SetCoordinateSystemToDisplay()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetCoordinateSystemToNormalizedDisplay(self):
        """
        V.SetCoordinateSystemToNormalizedDisplay()
        C++: void SetCoordinateSystemToNormalizedDisplay()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetCoordinateSystemToNormalizedViewport(self):
        """
        V.SetCoordinateSystemToNormalizedViewport()
        C++: void SetCoordinateSystemToNormalizedViewport()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetCoordinateSystemToPose(self):
        """
        V.SetCoordinateSystemToPose()
        C++: void SetCoordinateSystemToPose()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetCoordinateSystemToView(self):
        """
        V.SetCoordinateSystemToView()
        C++: void SetCoordinateSystemToView()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetCoordinateSystemToViewport(self):
        """
        V.SetCoordinateSystemToViewport()
        C++: void SetCoordinateSystemToViewport()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetCoordinateSystemToWorld(self):
        """
        V.SetCoordinateSystemToWorld()
        C++: void SetCoordinateSystemToWorld()
        
        Set/get the coordinate system which this coordinate is defined
        in. The options are Display, Normalized Display, Viewport,
        Normalized Viewport, View, and World.
        """
        ...
    
    def SetReferenceCoordinate(self, vtkCoordinate):
        """
        V.SetReferenceCoordinate(vtkCoordinate)
        C++: virtual void SetReferenceCoordinate(vtkCoordinate *)
        
        If this coordinate is relative to another coordinate, then
        specify that coordinate as the ReferenceCoordinate. If this is
        NULL the coordinate is assumed to be absolute.
        """
        ...
    
    def SetValue(self, p_float, p_float_1, p_float_2):
        """
        V.SetValue(float, float, float)
        C++: virtual void SetValue(double _arg1, double _arg2,
            double _arg3)
        V.SetValue((float, float, float))
        C++: virtual void SetValue(const double _arg[3])
        V.SetValue(float, float)
        C++: void SetValue(double a, double b)
        
        Set/get the value of this coordinate. This can be thought of as
        the position of this coordinate in its coordinate system.
        """
        ...
    
    def SetViewport(self, vtkViewport):
        """
        V.SetViewport(vtkViewport)
        C++: void SetViewport(vtkViewport *viewport)
        
        If you want this coordinate to be relative to a specific
        vtkViewport (vtkRenderer) then you can specify that here. NOTE:
        this is a raw pointer, not a weak pointer nor a reference counted
        object, to avoid reference cycle loop between rendering classes
        and filter classes.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


