"""
This type stub file was generated by pyright.
"""

from .vtkProp import vtkProp

class vtkProp3D(vtkProp):
    """
    vtkProp3D - represents an 3D object for placement in a rendered scene
    
    Superclass: vtkProp
    
    vtkProp3D is an abstract class used to represent an entity in a
    rendering scene (i.e., vtkProp3D is a vtkProp with an associated
    transformation matrix).  It handles functions related to the
    position, orientation and scaling. It combines these instance
    variables into one 4x4 transformation matrix as follows: [x y z 1] =
    [x y z 1] Translate(-origin) Scale(scale) Rot(y) Rot(x) Rot (z)
    Trans(origin) Trans(position). Both vtkActor and vtkVolume are
    specializations of class vtkProp.  The constructor defaults to:
    origin(0,0,0) position=(0,0,0) orientation=(0,0,0), no user defined
    matrix or transform, and no texture map.
    
    @sa
    vtkProp vtkActor vtkAssembly vtkVolume
    """
    def AddOrientation(self, p_float, p_float_1, p_float_2):
        """
        V.AddOrientation(float, float, float)
        C++: void AddOrientation(double x, double y, double z)
        V.AddOrientation([float, float, float])
        C++: void AddOrientation(double orentation[3])
        
        Add to the current orientation. See SetOrientation and
        GetOrientation for more details. This basically does a
        GetOrientation, adds the passed in arguments, and then calls
        SetOrientation.
        """
        ...
    
    def AddPosition(self, p_float=..., p_float=..., p_float=...):
        """
        V.AddPosition([float, float, float])
        C++: void AddPosition(double deltaPosition[3])
        V.AddPosition(float, float, float)
        C++: void AddPosition(double deltaX, double deltaY, double deltaZ)
        """
        ...
    
    def ComputeMatrix(self):
        """
        V.ComputeMatrix()
        C++: virtual void ComputeMatrix()
        
        Generate the matrix based on ivars
        """
        ...
    
    def GetBounds(self, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.GetBounds([float, float, float, float, float, float])
        C++: void GetBounds(double bounds[6])
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: double *GetBounds() override = 0;
        
        Get the bounds for this Prop3D as
        (Xmin,Xmax,Ymin,Ymax,Zmin,Zmax).
        """
        ...
    
    def GetCenter(self):
        """
        V.GetCenter() -> (float, float, float)
        C++: double *GetCenter()
        
        Get the center of the bounding box in world coordinates.
        """
        ...
    
    def GetIsIdentity(self):
        """
        V.GetIsIdentity() -> int
        C++: virtual int GetIsIdentity()
        
        Is the matrix for this actor identity
        """
        ...
    
    def GetLength(self):
        """
        V.GetLength() -> float
        C++: double GetLength()
        
        Get the length of the diagonal of the bounding box.
        """
        ...
    
    def GetMatrix(self, vtkMatrix4x4):
        """
        V.GetMatrix(vtkMatrix4x4)
        C++: virtual void GetMatrix(vtkMatrix4x4 *m)
        V.GetMatrix([float, float, float, float, float, float, float,
            float, float, float, float, float, float, float, float,
            float])
        C++: virtual void GetMatrix(double m[16])
        V.GetMatrix() -> vtkMatrix4x4
        C++: vtkMatrix4x4 *GetMatrix() override;
        
        Return a reference to the Prop3D's 4x4 composite matrix. Get the
        matrix from the position, origin, scale and orientation This
        matrix is cached, so multiple GetMatrix() calls will be
        efficient.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the vtkProp3D's mtime
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOrientation(self):
        """
        V.GetOrientation() -> (float, float, float)
        C++: double *GetOrientation()
        V.GetOrientation([float, float, float])
        C++: void GetOrientation(double orentation[3])
        
        Returns the orientation of the Prop3D as s vector of X,Y and Z
        rotation. The ordering in which these rotations must be done to
        generate the same matrix is RotateZ, RotateX, and finally
        RotateY. See also SetOrientation.
        """
        ...
    
    def GetOrientationWXYZ(self):
        """
        V.GetOrientationWXYZ() -> (float, float, float, float)
        C++: double *GetOrientationWXYZ()
        
        Returns the WXYZ orientation of the Prop3D.
        """
        ...
    
    def GetOrigin(self):
        """
        V.GetOrigin() -> (float, float, float)
        C++: virtual double *GetOrigin()
        
        Set/Get the origin of the Prop3D. This is the point about which
        all rotations take place.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> (float, float, float)
        C++: virtual double *GetPosition()
        """
        ...
    
    def GetScale(self):
        """
        V.GetScale() -> (float, float, float)
        C++: virtual double *GetScale()
        
        Set/Get the scale of the actor. Scaling in performed
        independently on the X, Y and Z axis. A scale of zero is illegal
        and will be replaced with one.
        """
        ...
    
    def GetUserMatrix(self):
        """
        V.GetUserMatrix() -> vtkMatrix4x4
        C++: vtkMatrix4x4 *GetUserMatrix()
        
        The UserMatrix can be used in place of UserTransform.
        """
        ...
    
    def GetUserTransform(self):
        """
        V.GetUserTransform() -> vtkLinearTransform
        C++: virtual vtkLinearTransform *GetUserTransform()
        
        In addition to the instance variables such as position and
        orientation, you can add an additional transformation for your
        own use.  This transformation is concatenated with the actor's
        internal transformation, which you implicitly create through the
        use of SetPosition(), SetOrigin() and SetOrientation().
        
        If the internal transformation is identity (i.e. if you don't set
        the Position, Origin, or Orientation) then the actors final
        transformation will be the UserTransform, concatenated with the
        UserMatrix if the UserMatrix is present.
        """
        ...
    
    def GetUserTransformMatrixMTime(self):
        """
        V.GetUserTransformMatrixMTime() -> int
        C++: vtkMTimeType GetUserTransformMatrixMTime()
        
        Get the modified time of the user matrix or user transform.
        """
        ...
    
    def GetXRange(self):
        """
        V.GetXRange() -> (float, float)
        C++: double *GetXRange()
        
        Get the Prop3D's x range in world coordinates.
        """
        ...
    
    def GetYRange(self):
        """
        V.GetYRange() -> (float, float)
        C++: double *GetYRange()
        
        Get the Prop3D's y range in world coordinates.
        """
        ...
    
    def GetZRange(self):
        """
        V.GetZRange() -> (float, float)
        C++: double *GetZRange()
        
        Get the Prop3D's z range in world coordinates.
        """
        ...
    
    def InitPathTraversal(self):
        """
        V.InitPathTraversal()
        C++: void InitPathTraversal() override;
        
        Overload vtkProp's method for setting up assembly paths. See the
        documentation for vtkProp.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkProp3D
        C++: vtkProp3D *NewInstance()
        """
        ...
    
    def PokeMatrix(self, vtkMatrix4x4):
        """
        V.PokeMatrix(vtkMatrix4x4)
        C++: void PokeMatrix(vtkMatrix4x4 *matrix) override;
        
        This method modifies the vtkProp3D so that its transformation
        state is set to the matrix specified. The method does this by
        setting appropriate transformation-related ivars to initial
        values (i.e., not transformed), and placing the user-supplied
        matrix into the UserMatrix of this vtkProp3D. If the method is
        called again with a NULL matrix, then the original state of the
        vtkProp3D will be restored. This method is used to support
        picking and assembly structures.
        """
        ...
    
    def RotateWXYZ(self, p_float, p_float_1, p_float_2, p_float_3):
        """
        V.RotateWXYZ(float, float, float, float)
        C++: void RotateWXYZ(double w, double x, double y, double z)
        
        Rotate the Prop3D in degrees about an arbitrary axis specified by
        the last three arguments. The axis is specified in world
        coordinates. To rotate an about its model axes, use RotateX,
        RotateY, RotateZ.
        """
        ...
    
    def RotateX(self, p_float):
        """
        V.RotateX(float)
        C++: void RotateX(double)
        
        Rotate the Prop3D in degrees about the X axis using the right
        hand rule. The axis is the Prop3D's X axis, which can change as
        other rotations are performed.  To rotate about the world X axis
        use RotateWXYZ (angle, 1, 0, 0). This rotation is applied before
        all others in the current transformation matrix.
        """
        ...
    
    def RotateY(self, p_float):
        """
        V.RotateY(float)
        C++: void RotateY(double)
        
        Rotate the Prop3D in degrees about the Y axis using the right
        hand rule. The axis is the Prop3D's Y axis, which can change as
        other rotations are performed.  To rotate about the world Y axis
        use RotateWXYZ (angle, 0, 1, 0). This rotation is applied before
        all others in the current transformation matrix.
        """
        ...
    
    def RotateZ(self, p_float):
        """
        V.RotateZ(float)
        C++: void RotateZ(double)
        
        Rotate the Prop3D in degrees about the Z axis using the right
        hand rule. The axis is the Prop3D's Z axis, which can change as
        other rotations are performed.  To rotate about the world Z axis
        use RotateWXYZ (angle, 0, 0, 1). This rotation is applied before
        all others in the current transformation matrix.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkProp3D
        C++: static vtkProp3D *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetOrientation(self, p_float, p_float_1, p_float_2):
        """
        V.SetOrientation(float, float, float)
        C++: void SetOrientation(double x, double y, double z)
        V.SetOrientation([float, float, float])
        C++: void SetOrientation(double orientation[3])
        
        Sets the orientation of the Prop3D.  Orientation is specified as
        X,Y and Z rotations in that order, but they are performed as
        RotateZ, RotateX, and finally RotateY.
        """
        ...
    
    def SetOrigin(self, p_float, p_float_1, p_float_2):
        """
        V.SetOrigin(float, float, float)
        C++: virtual void SetOrigin(double x, double y, double z)
        V.SetOrigin((float, float, float))
        C++: virtual void SetOrigin(const double pos[3])
        
        Set/Get the origin of the Prop3D. This is the point about which
        all rotations take place.
        """
        ...
    
    def SetPosition(self, p_float, p_float_1, p_float_2):
        """
        V.SetPosition(float, float, float)
        C++: virtual void SetPosition(double x, double y, double z)
        V.SetPosition([float, float, float])
        C++: virtual void SetPosition(double pos[3])
        
        Set/Get/Add the position of the Prop3D in world coordinates.
        """
        ...
    
    def SetScale(self, p_float, p_float_1, p_float_2):
        """
        V.SetScale(float, float, float)
        C++: virtual void SetScale(double x, double y, double z)
        V.SetScale([float, float, float])
        C++: virtual void SetScale(double scale[3])
        V.SetScale(float)
        C++: void SetScale(double s)
        
        Set/Get the scale of the actor. Scaling in performed
        independently on the X, Y and Z axis. A scale of zero is illegal
        and will be replaced with one.
        """
        ...
    
    def SetUserMatrix(self, vtkMatrix4x4):
        """
        V.SetUserMatrix(vtkMatrix4x4)
        C++: void SetUserMatrix(vtkMatrix4x4 *matrix)
        
        The UserMatrix can be used in place of UserTransform.
        """
        ...
    
    def SetUserTransform(self, vtkLinearTransform):
        """
        V.SetUserTransform(vtkLinearTransform)
        C++: void SetUserTransform(vtkLinearTransform *transform)
        
        In addition to the instance variables such as position and
        orientation, you can add an additional transformation for your
        own use.  This transformation is concatenated with the actor's
        internal transformation, which you implicitly create through the
        use of SetPosition(), SetOrigin() and SetOrientation().
        
        If the internal transformation is identity (i.e. if you don't set
        the Position, Origin, or Orientation) then the actors final
        transformation will be the UserTransform, concatenated with the
        UserMatrix if the UserMatrix is present.
        """
        ...
    
    def ShallowCopy(self, vtkProp):
        """
        V.ShallowCopy(vtkProp)
        C++: void ShallowCopy(vtkProp *prop) override;
        
        Shallow copy of this vtkProp3D.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


