"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkHardwareSelector(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkHardwareSelector - no description provided.
    
    Superclass: vtkObject
    """
    def BeginRenderProp(self):
        """
        V.BeginRenderProp()
        C++: virtual void BeginRenderProp()
        
        Called by the mapper before and after rendering each prop.
        """
        ...
    
    def CaptureBuffers(self):
        """
        V.CaptureBuffers() -> bool
        C++: virtual bool CaptureBuffers()
        
        It is possible to use the vtkHardwareSelector for a custom
        picking. (Look at vtkScenePicker). In that case instead of
        Select() on can use CaptureBuffers() to render the selection
        buffers and then get information about pixel locations suing
        GetPixelInformation(). Use ClearBuffers() to clear buffers after
        one's done with the scene. The optional final parameter maxDist
        will look for a cell within the specified number of pixels from
        display_position. When using the overload with the optional
        selected_position argument, selected_position is filled with the
        position for which the PixelInformation is being returned. This
        is useful when maxDist > 0 to determine which position's pixel
        information is was returned.
        """
        ...
    
    def ClearBuffers(self):
        """
        V.ClearBuffers()
        C++: void ClearBuffers()
        
        It is possible to use the vtkHardwareSelector for a custom
        picking. (Look at vtkScenePicker). In that case instead of
        Select() on can use CaptureBuffers() to render the selection
        buffers and then get information about pixel locations suing
        GetPixelInformation(). Use ClearBuffers() to clear buffers after
        one's done with the scene. The optional final parameter maxDist
        will look for a cell within the specified number of pixels from
        display_position. When using the overload with the optional
        selected_position argument, selected_position is filled with the
        position for which the PixelInformation is being returned. This
        is useful when maxDist > 0 to determine which position's pixel
        information is was returned.
        """
        ...
    
    def Convert(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.Convert(int, [float, float, float])
        C++: static void Convert(vtkIdType id, float tcoord[3])
        """
        ...
    
    def EndRenderProp(self):
        """
        V.EndRenderProp()
        C++: virtual void EndRenderProp()
        
        Called by the mapper before and after rendering each prop.
        """
        ...
    
    def GeneratePolygonSelection(self, *int, **kwargs):
        """
        V.GeneratePolygonSelection([int, ...], int) -> vtkSelection
        C++: virtual vtkSelection *GeneratePolygonSelection(
            int *polygonPoints, vtkIdType count)
        
        Generates the vtkSelection from pixel buffers. Same as
        GenerateSelection, except this one use a polygon, instead of a
        rectangle region, and select elements inside the polygon. NOTE:
        The CaptureBuffers() needs to be called first.
        """
        ...
    
    def GenerateSelection(self):
        """
        V.GenerateSelection() -> vtkSelection
        C++: virtual vtkSelection *GenerateSelection()
        V.GenerateSelection([int, int, int, int]) -> vtkSelection
        C++: virtual vtkSelection *GenerateSelection(unsigned int r[4])
        V.GenerateSelection(int, int, int, int) -> vtkSelection
        C++: virtual vtkSelection *GenerateSelection(unsigned int x1,
            unsigned int y1, unsigned int x2, unsigned int y2)
        
        Generates the vtkSelection from pixel buffers. Requires that
        CaptureBuffers() has already been called. Optionally you may pass
        a screen region (xmin, ymin, xmax, ymax) to generate a selection
        from. The region must be a subregion of the region specified by
        SetArea(), otherwise it will be clipped to that region.
        """
        ...
    
    def GetActorPassOnly(self):
        """
        V.GetActorPassOnly() -> bool
        C++: virtual bool GetActorPassOnly()
        
        Get/Set to only do the actor pass. If true all other passes will
        be skipped resulting in a faster pick.
        """
        ...
    
    def GetArea(self):
        """
        V.GetArea() -> (int, int, int, int)
        C++: virtual unsigned int *GetArea()
        
        Get/Set the area to select as (xmin, ymin, xmax, ymax).
        """
        ...
    
    def GetCaptureZValues(self):
        """
        V.GetCaptureZValues() -> bool
        C++: virtual bool GetCaptureZValues()
        
        Get/Set to capture the zvalue. If true the closest zvalue is
        stored for each prop that is in the selection. ZValue in this
        case is the value from the zbuffer which can be used in
        coordinate conversions
        """
        ...
    
    def GetCurrentPass(self):
        """
        V.GetCurrentPass() -> int
        C++: virtual int GetCurrentPass()
        
        Get the current pass number.
        """
        ...
    
    def GetFieldAssociation(self):
        """
        V.GetFieldAssociation() -> int
        C++: virtual int GetFieldAssociation()
        
        Set the field type to select. Valid values are
        \li vtkDataObject::FIELD_ASSOCIATION_POINTS
        \li vtkDataObject::FIELD_ASSOCIATION_CELLS
        \li vtkDataObject::FIELD_ASSOCIATION_VERTICES
        \li vtkDataObject::FIELD_ASSOCIATION_EDGES
        \li vtkDataObject::FIELD_ASSOCIATION_ROWS
        Currently only FIELD_ASSOCIATION_POINTS and
        FIELD_ASSOCIATION_CELLS are supported.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPixelBuffer(self, p_int):
        """
        V.GetPixelBuffer(int) -> (int, ...)
        C++: unsigned char *GetPixelBuffer(int passNo)
        """
        ...
    
    def GetProcessID(self):
        """
        V.GetProcessID() -> int
        C++: virtual int GetProcessID()
        
        Get/Set the process id. If process id < 0 (default -1), then the
        PROCESS_PASS is not rendered.
        """
        ...
    
    def GetPropColorValue(self):
        """
        V.GetPropColorValue() -> (float, float, float)
        C++: virtual float *GetPropColorValue()
        
        Get/Set the color to be used by the prop when drawing
        """
        ...
    
    def GetPropFromID(self, p_int):
        """
        V.GetPropFromID(int) -> vtkProp
        C++: vtkProp *GetPropFromID(int id)
        
        returns the prop associated with a ID. This is valid only until
        ReleasePixBuffers() gets called.
        """
        ...
    
    def GetRawPixelBuffer(self, p_int):
        """
        V.GetRawPixelBuffer(int) -> (int, ...)
        C++: unsigned char *GetRawPixelBuffer(int passNo)
        """
        ...
    
    def GetRenderer(self):
        """
        V.GetRenderer() -> vtkRenderer
        C++: virtual vtkRenderer *GetRenderer()
        
        Get/Set the renderer to perform the selection on.
        """
        ...
    
    def GetUseProcessIdFromData(self):
        """
        V.GetUseProcessIdFromData() -> bool
        C++: virtual bool GetUseProcessIdFromData()
        
        In some parallel rendering setups, the process id for elements
        must be obtained from the data itself, rather than the rendering
        process' id. In that case, set this flag to ON (default OFF).
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkHardwareSelector
        C++: vtkHardwareSelector *NewInstance()
        """
        ...
    
    def PassTypeToString(self, PassTypes):
        """
        V.PassTypeToString(PassTypes) -> string
        C++: std::string PassTypeToString(PassTypes type)
        
        Convert a PassTypes enum value to a human readable string.
        """
        ...
    
    def RenderCompositeIndex(self, p_int):
        """
        V.RenderCompositeIndex(int)
        C++: virtual void RenderCompositeIndex(unsigned int index)
        
        Called by any vtkMapper or vtkProp subclass to render a
        composite-index. Currently indices >= 0xffffff are not supported.
        """
        ...
    
    def RenderProcessId(self, p_int):
        """
        V.RenderProcessId(int)
        C++: virtual void RenderProcessId(unsigned int processid)
        
        Called by any vtkMapper or subclass to render process id. This
        has any effect when this->UseProcessIdFromData is true.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkHardwareSelector
        C++: static vtkHardwareSelector *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SavePixelBuffer(self, p_int):
        """
        V.SavePixelBuffer(int)
        C++: virtual void SavePixelBuffer(int passNo)
        """
        ...
    
    def Select(self):
        """
        V.Select() -> vtkSelection
        C++: vtkSelection *Select()
        
        Perform the selection. Returns a new instance of vtkSelection
        containing the selection on success.
        """
        ...
    
    def SetActorPassOnly(self, bool):
        """
        V.SetActorPassOnly(bool)
        C++: virtual void SetActorPassOnly(bool _arg)
        
        Get/Set to only do the actor pass. If true all other passes will
        be skipped resulting in a faster pick.
        """
        ...
    
    def SetArea(self, p_int, p_int_1, p_int_2, p_int_3):
        """
        V.SetArea(int, int, int, int)
        C++: virtual void SetArea(unsigned int _arg1, unsigned int _arg2,
            unsigned int _arg3, unsigned int _arg4)
        V.SetArea((int, int, int, int))
        C++: virtual void SetArea(const unsigned int _arg[4])
        
        Get/Set the area to select as (xmin, ymin, xmax, ymax).
        """
        ...
    
    def SetCaptureZValues(self, bool):
        """
        V.SetCaptureZValues(bool)
        C++: virtual void SetCaptureZValues(bool _arg)
        
        Get/Set to capture the zvalue. If true the closest zvalue is
        stored for each prop that is in the selection. ZValue in this
        case is the value from the zbuffer which can be used in
        coordinate conversions
        """
        ...
    
    def SetFieldAssociation(self, p_int):
        """
        V.SetFieldAssociation(int)
        C++: virtual void SetFieldAssociation(int _arg)
        
        Set the field type to select. Valid values are
        \li vtkDataObject::FIELD_ASSOCIATION_POINTS
        \li vtkDataObject::FIELD_ASSOCIATION_CELLS
        \li vtkDataObject::FIELD_ASSOCIATION_VERTICES
        \li vtkDataObject::FIELD_ASSOCIATION_EDGES
        \li vtkDataObject::FIELD_ASSOCIATION_ROWS
        Currently only FIELD_ASSOCIATION_POINTS and
        FIELD_ASSOCIATION_CELLS are supported.
        """
        ...
    
    def SetProcessID(self, p_int):
        """
        V.SetProcessID(int)
        C++: virtual void SetProcessID(int _arg)
        
        Get/Set the process id. If process id < 0 (default -1), then the
        PROCESS_PASS is not rendered.
        """
        ...
    
    def SetPropColorValue(self, p_float, p_float_1, p_float_2):
        """
        V.SetPropColorValue(float, float, float)
        C++: virtual void SetPropColorValue(float _arg1, float _arg2,
            float _arg3)
        V.SetPropColorValue((float, float, float))
        C++: virtual void SetPropColorValue(const float _arg[3])
        V.SetPropColorValue(int)
        C++: void SetPropColorValue(vtkIdType val)
        
        Get/Set the color to be used by the prop when drawing
        """
        ...
    
    def SetRenderer(self, vtkRenderer):
        """
        V.SetRenderer(vtkRenderer)
        C++: virtual void SetRenderer(vtkRenderer *)
        
        Get/Set the renderer to perform the selection on.
        """
        ...
    
    def SetUseProcessIdFromData(self, bool):
        """
        V.SetUseProcessIdFromData(bool)
        C++: virtual void SetUseProcessIdFromData(bool _arg)
        
        In some parallel rendering setups, the process id for elements
        must be obtained from the data itself, rather than the rendering
        process' id. In that case, set this flag to ON (default OFF).
        """
        ...
    
    def UpdateMaximumCellId(self, p_int):
        """
        V.UpdateMaximumCellId(int)
        C++: virtual void UpdateMaximumCellId(vtkIdType attribid)
        
        Called by any vtkMapper or vtkProp subclass to indicate the
        maximum cell or point attribute ID it uses. These values are used
        for determining if the POINT_ID_HIGH or CELL_ID_HIGH passes are
        required.
        """
        ...
    
    def UpdateMaximumPointId(self, p_int):
        """
        V.UpdateMaximumPointId(int)
        C++: virtual void UpdateMaximumPointId(vtkIdType attribid)
        
        Called by any vtkMapper or vtkProp subclass to indicate the
        maximum cell or point attribute ID it uses. These values are used
        for determining if the POINT_ID_HIGH or CELL_ID_HIGH passes are
        required.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    ACTOR_PASS = ...
    CELL_ID_HIGH24 = ...
    CELL_ID_LOW24 = ...
    COMPOSITE_INDEX_PASS = ...
    MAX_KNOWN_PASS = ...
    MIN_KNOWN_PASS = ...
    PassTypes = ...
    POINT_ID_HIGH24 = ...
    POINT_ID_LOW24 = ...
    PROCESS_PASS = ...
    __dict__ = ...
    __vtkname__ = ...


