"""
This type stub file was generated by pyright.
"""

from .vtkAbstractPropPicker import vtkAbstractPropPicker

class vtkPicker(vtkAbstractPropPicker):
    """
    vtkPicker - superclass for 3D geometric pickers (uses ray cast)
    
    Superclass: vtkAbstractPropPicker
    
    vtkPicker is used to select instances of vtkProp3D by shooting a ray
    into a graphics window and intersecting with the actor's bounding
    box. The ray is defined from a point defined in window (or pixel)
    coordinates, and a point located from the camera's position.
    
    vtkPicker may return more than one vtkProp3D, since more than one
    bounding box may be intersected. vtkPicker returns an unsorted list
    of props that were hit, and a list of the corresponding world points
    of the hits. For the vtkProp3D that is closest to the camera,
    vtkPicker returns the pick coordinates in world and untransformed
    mapper space, the prop itself, the data set, and the mapper.  For
    vtkPicker the closest prop is the one whose center point (i.e.,
    center of bounding box) projected on the view ray is closest to the
    camera.  Subclasses of vtkPicker use other methods for computing the
    pick point.
    
    @sa
    vtkPicker is used for quick geometric picking. If you desire more
    precise picking of points or cells based on the geometry of any
    vtkProp3D, use the subclasses vtkPointPicker or vtkCellPicker.  For
    hardware-accelerated picking of any type of vtkProp, use
    vtkPropPicker or vtkWorldPointPicker.
    """
    def GetActors(self):
        """
        V.GetActors() -> vtkActorCollection
        C++: vtkActorCollection *GetActors()
        
        Return a collection of all the actors that were intersected. This
        collection is not sorted. (This is a convenience method to
        maintain backward compatibility.)
        """
        ...
    
    def GetCompositeDataSet(self):
        """
        V.GetCompositeDataSet() -> vtkCompositeDataSet
        C++: virtual vtkCompositeDataSet *GetCompositeDataSet()
        
        Get a pointer to the composite dataset that was picked (if any).
        If nothing was picked or a non-composite data object was picked
        then NULL is returned.
        """
        ...
    
    def GetDataSet(self):
        """
        V.GetDataSet() -> vtkDataSet
        C++: virtual vtkDataSet *GetDataSet()
        
        Get a pointer to the dataset that was picked (if any). If nothing
        was picked then NULL is returned.
        """
        ...
    
    def GetFlatBlockIndex(self):
        """
        V.GetFlatBlockIndex() -> int
        C++: virtual vtkIdType GetFlatBlockIndex()
        
        Get the flat block index of the vtkDataSet in the composite
        dataset that was picked (if any). If nothing was picked or a
        non-composite data object was picked then -1 is returned.
        """
        ...
    
    def GetMapper(self):
        """
        V.GetMapper() -> vtkAbstractMapper3D
        C++: virtual vtkAbstractMapper3D *GetMapper()
        
        Return mapper that was picked (if any).
        """
        ...
    
    def GetMapperPosition(self):
        """
        V.GetMapperPosition() -> (float, float, float)
        C++: virtual double *GetMapperPosition()
        
        Return position in mapper (i.e., non-transformed) coordinates of
        pick point.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPickedPositions(self):
        """
        V.GetPickedPositions() -> vtkPoints
        C++: vtkPoints *GetPickedPositions()
        
        Return a list of the points the actors returned by GetProp3Ds
        were intersected at. The order of this list will match the order
        of GetProp3Ds.
        """
        ...
    
    def GetProp3Ds(self):
        """
        V.GetProp3Ds() -> vtkProp3DCollection
        C++: vtkProp3DCollection *GetProp3Ds()
        
        Return a collection of all the prop 3D's that were intersected by
        the pick ray. This collection is not sorted.
        """
        ...
    
    def GetTolerance(self):
        """
        V.GetTolerance() -> float
        C++: virtual double GetTolerance()
        
        Specify tolerance for performing pick operation. Tolerance is
        specified as fraction of rendering window size. (Rendering window
        size is measured across diagonal.)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkPicker
        C++: vtkPicker *NewInstance()
        """
        ...
    
    def Pick(self, p_float, p_float_1, p_float_2, vtkRenderer):
        """
        V.Pick(float, float, float, vtkRenderer) -> int
        C++: int Pick(double selectionX, double selectionY,
            double selectionZ, vtkRenderer *renderer) override;
        V.Pick([float, float, float], vtkRenderer) -> int
        C++: int Pick(double selectionPt[3], vtkRenderer *ren)
        
        Perform pick operation with selection point provided. Normally
        the first two values for the selection point are x-y pixel
        coordinate, and the third value is =0. Return non-zero if
        something was successfully picked.
        """
        ...
    
    def Pick3DPoint(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Pick3DPoint([float, float, float], vtkRenderer) -> int
        C++: int Pick3DPoint(double selectionPt[3], vtkRenderer *ren)
            override;
        V.Pick3DPoint([float, float, float], [float, float, float],
            vtkRenderer) -> int
        C++: virtual int Pick3DPoint(double p1World[3], double p2World[3],
             vtkRenderer *ren)
        
        Perform pick operation with selection point provided. The
        selectionPt is in world coordinates. Return non-zero if something
        was successfully picked.
        """
        ...
    
    def Pick3DRay(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Pick3DRay([float, float, float], [float, float, float, float],
            vtkRenderer) -> int
        C++: int Pick3DRay(double selectionPt[3], double orient[4],
            vtkRenderer *ren) override;
        
        Perform pick operation with selection point and orientation
        provided. The selectionPt is in world coordinates. Return
        non-zero if something was successfully picked.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkPicker
        C++: static vtkPicker *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetTolerance(self, p_float):
        """
        V.SetTolerance(float)
        C++: virtual void SetTolerance(double _arg)
        
        Specify tolerance for performing pick operation. Tolerance is
        specified as fraction of rendering window size. (Rendering window
        size is measured across diagonal.)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


