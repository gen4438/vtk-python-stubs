"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkRenderPass(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkRenderPass - Perform part of the rendering of a vtkRenderer.
    
    Superclass: vtkObject
    
    vtkRenderPass is a deferred class with a simple deferred method
    Render. This method performs a rendering pass of the scene described
    in vtkRenderState. Subclasses define what really happens during
    rendering.
    
    Directions to write a subclass of vtkRenderPass: It is up to the
    subclass to decide if it needs to delegate part of its job to some
    other vtkRenderPass objects ("delegates").
    - The subclass has to define ivar to set/get its delegates.
    - The documentation of the subclass has to describe:
    - what each delegate is supposed to perform
    - if a delegate is supposed to be used once or multiple times
    - what it expects to have in the framebuffer before starting (status
      of colorbuffers, depth buffer, stencil buffer)
    - what it will change in the framebuffer.
    - A pass cannot modify the vtkRenderState where it will perform but
      it can build a new vtkRenderState (it can change the FrameBuffer,
      change the prop array, changed the required prop properties keys
      (usually adding some to a copy of the existing list) but it has to
      keep the same vtkRenderer object), make it current and pass it to
      its delegate.
    - at the end of the execution of Render, the pass has to ensure the
      current vtkRenderState is the one it has in argument.
    @sa
    vtkRenderState vtkRenderer
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfRenderedProps(self):
        """
        V.GetNumberOfRenderedProps() -> int
        C++: virtual int GetNumberOfRenderedProps()
        
        Number of props rendered at the last Render call.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderPass
        C++: vtkRenderPass *NewInstance()
        """
        ...
    
    def ReleaseGraphicsResources(self, vtkWindow):
        """
        V.ReleaseGraphicsResources(vtkWindow)
        C++: virtual void ReleaseGraphicsResources(vtkWindow *w)
        
        Release graphics resources and ask components to release their
        own resources. Default implementation is empty.
        \pre w_exists: w!=0
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderPass
        C++: static vtkRenderPass *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


