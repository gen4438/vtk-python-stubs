"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkAssemblyPath(__vtkmodules_vtkCommonCore.vtkCollection):
    """
    vtkAssemblyPath - a list of nodes that form an assembly path
    
    Superclass: vtkCollection
    
    vtkAssemblyPath represents an ordered list of assembly nodes that
    represent a fully evaluated assembly path. This class is used
    primarily for picking. Note that the use of this class is to add one
    or more assembly nodes to form the path. (An assembly node consists
    of an instance of vtkProp and vtkMatrix4x4, the matrix may be NULL.)
    As each node is added, the matrices are concatenated to create a
    final, evaluated matrix.
    
    @sa
    vtkAssemblyNode vtkAssembly vtkActor vtkMatrix4x4 vtkProp
    vtkAbstractPicker
    """
    def AddNode(self, vtkProp, vtkMatrix4x4):
        """
        V.AddNode(vtkProp, vtkMatrix4x4)
        C++: void AddNode(vtkProp *p, vtkMatrix4x4 *m)
        
        Convenience method adds a prop and matrix together, creating an
        assembly node transparently. The matrix pointer m may be NULL.
        Note: that matrix is the one, if any, associated with the prop.
        """
        ...
    
    def DeleteLastNode(self):
        """
        V.DeleteLastNode()
        C++: void DeleteLastNode()
        
        Delete the last assembly node in the list. This is like a stack
        pop.
        """
        ...
    
    def GetFirstNode(self):
        """
        V.GetFirstNode() -> vtkAssemblyNode
        C++: vtkAssemblyNode *GetFirstNode()
        
        Get the first assembly node in the list. See the comments for
        GetNextNode() regarding the contents of the returned node. (Note:
        This node corresponds to the vtkProp associated with the
        vtkRenderer.
        """
        ...
    
    def GetLastNode(self):
        """
        V.GetLastNode() -> vtkAssemblyNode
        C++: vtkAssemblyNode *GetLastNode()
        
        Get the last assembly node in the list. See the comments for
        GetNextNode() regarding the contents of the returned node.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override the standard GetMTime() to check for the modified times
        of the nodes in this path.
        """
        ...
    
    def GetNextNode(self):
        """
        V.GetNextNode() -> vtkAssemblyNode
        C++: vtkAssemblyNode *GetNextNode()
        
        Get the next assembly node in the list. The node returned
        contains a pointer to a prop and a 4x4 matrix. The matrix is
        evaluated based on the preceding assembly hierarchy (i.e., the
        matrix is not necessarily as the same as the one that was added
        with AddNode() because of the concatenation of matrices in the
        assembly hierarchy).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkAssemblyPath
        C++: vtkAssemblyPath *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkAssemblyPath
        C++: static vtkAssemblyPath *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def ShallowCopy(self, vtkAssemblyPath):
        """
        V.ShallowCopy(vtkAssemblyPath)
        C++: void ShallowCopy(vtkAssemblyPath *path)
        
        Perform a shallow copy (reference counted) on the incoming path.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


