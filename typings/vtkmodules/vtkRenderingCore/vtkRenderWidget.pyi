"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkRenderWidget(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkRenderWidget - no description provided.
    
    Superclass: vtkObject
    """
    def GetName(self):
        """
        V.GetName() -> string
        C++: std::string GetName()
        
        Get the name of the widget.
        @return The current name of the widget.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPosition(self):
        """
        V.GetPosition() -> vtkVector2i
        C++: vtkVector2i GetPosition()
        
        Get the widget position in screen coordinates.
        @return The position of the widget in screen coordinates, default
        of 0, 0.
        """
        ...
    
    def GetSize(self):
        """
        V.GetSize() -> vtkVector2i
        C++: vtkVector2i GetSize()
        
        Get the widget size in screen coordinates.
        @return The width and height of the widget in screen coordinates,
        default
        of 300x300.
        """
        ...
    
    def Initialize(self):
        """
        V.Initialize()
        C++: void Initialize()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MakeCurrent(self):
        """
        V.MakeCurrent()
        C++: virtual void MakeCurrent()
        
        Make the widget's context current, this will defer to the OS
        specific methods, and calls should be kept to a minimum as they
        are quite expensive.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkRenderWidget
        C++: vtkRenderWidget *NewInstance()
        """
        ...
    
    def Render(self):
        """
        V.Render()
        C++: virtual void Render()
        
        Render everything in the current widget.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkRenderWidget
        C++: static vtkRenderWidget *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetName(self, string):
        """
        V.SetName(string)
        C++: void SetName(const std::string &name)
        
        Set the name of the widget.
        @param name The name to set to the window.
        """
        ...
    
    def SetPosition(self, vtkVector2i):
        """
        V.SetPosition(vtkVector2i)
        C++: void SetPosition(const vtkVector2i &pos)
        
        Set the widget position in screen coordinates.
        @param pos The position of the widget in screen coordinates.
        """
        ...
    
    def SetSize(self, vtkVector2i):
        """
        V.SetSize(vtkVector2i)
        C++: void SetSize(const vtkVector2i &size)
        
        Set the widget size in screen coordinates.
        @param size The width and height of the widget in screen
            coordinates
        """
        ...
    
    def Start(self):
        """
        V.Start()
        C++: void Start()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


