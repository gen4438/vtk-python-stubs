"""
This type stub file was generated by pyright.
"""

from .vtkMapper2D import vtkMapper2D

class vtkImageMapper(vtkMapper2D):
    """
    vtkImageMapper - 2D image display
    
    Superclass: vtkMapper2D
    
    vtkImageMapper provides 2D image display support for vtk. It is a
    Mapper2D subclass that can be associated with an Actor2D and placed
    within a RenderWindow or ImageWindow. The vtkImageMapper is a 2D
    mapper, which means that it displays images in display coordinates.
    In display coordinates, one image pixel is always one screen pixel.
    
    @sa
    vtkMapper2D vtkActor2D
    """
    def GetColorLevel(self):
        """
        V.GetColorLevel() -> float
        C++: virtual double GetColorLevel()
        
        Set/Get the level value for window/level
        """
        ...
    
    def GetColorScale(self):
        """
        V.GetColorScale() -> float
        C++: double GetColorScale()
        
        Methods used internally for performing the Window/Level mapping.
        """
        ...
    
    def GetColorShift(self):
        """
        V.GetColorShift() -> float
        C++: double GetColorShift()
        
        Methods used internally for performing the Window/Level mapping.
        """
        ...
    
    def GetColorWindow(self):
        """
        V.GetColorWindow() -> float
        C++: virtual double GetColorWindow()
        
        Set/Get the window value for window/level
        """
        ...
    
    def GetCustomDisplayExtents(self):
        """
        V.GetCustomDisplayExtents() -> (int, int, int, int)
        C++: virtual int *GetCustomDisplayExtents()
        
        The image extents which should be displayed with UseCustomExtents
        Note that the Custom extents are x,y only and the zslice is still
        applied
        """
        ...
    
    def GetInput(self):
        """
        V.GetInput() -> vtkImageData
        C++: vtkImageData *GetInput()
        
        Set the Input of a filter.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override Modifiedtime as we have added a lookuptable
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetRenderToRectangle(self):
        """
        V.GetRenderToRectangle() -> int
        C++: virtual vtkTypeBool GetRenderToRectangle()
        
        If RenderToRectangle is set (by default not), then the
        imagemapper will render the image into the rectangle supplied by
        the Actor2D's PositionCoordinate and Position2Coordinate
        """
        ...
    
    def GetUseCustomExtents(self):
        """
        V.GetUseCustomExtents() -> int
        C++: virtual vtkTypeBool GetUseCustomExtents()
        
        Usually, the entire image is displayed, if UseCustomExtents is
        set (by default not), then the region supplied in the
        CustomDisplayExtents is used in preference. Note that the Custom
        extents are x,y only and the zslice is still applied
        """
        ...
    
    def GetWholeZMax(self):
        """
        V.GetWholeZMax() -> int
        C++: int GetWholeZMax()
        
        Set/Get the current slice number. The axis Z in ZSlice does not
        necessarily have any relation to the z axis of the data on disk.
        It is simply the axis orthogonal to the x,y, display plane.
        GetWholeZMax and Min are convenience methods for obtaining the
        number of slices that can be displayed. Again the number of
        slices is in reference to the display z axis, which is not
        necessarily the z axis on disk. (due to reformatting etc)
        """
        ...
    
    def GetWholeZMin(self):
        """
        V.GetWholeZMin() -> int
        C++: int GetWholeZMin()
        
        Set/Get the current slice number. The axis Z in ZSlice does not
        necessarily have any relation to the z axis of the data on disk.
        It is simply the axis orthogonal to the x,y, display plane.
        GetWholeZMax and Min are convenience methods for obtaining the
        number of slices that can be displayed. Again the number of
        slices is in reference to the display z axis, which is not
        necessarily the z axis on disk. (due to reformatting etc)
        """
        ...
    
    def GetZSlice(self):
        """
        V.GetZSlice() -> int
        C++: virtual int GetZSlice()
        
        Set/Get the current slice number. The axis Z in ZSlice does not
        necessarily have any relation to the z axis of the data on disk.
        It is simply the axis orthogonal to the x,y, display plane.
        GetWholeZMax and Min are convenience methods for obtaining the
        number of slices that can be displayed. Again the number of
        slices is in reference to the display z axis, which is not
        necessarily the z axis on disk. (due to reformatting etc)
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMapper
        C++: vtkImageMapper *NewInstance()
        """
        ...
    
    def RenderData(self, vtkViewport, vtkImageData, vtkActor2D):
        """
        V.RenderData(vtkViewport, vtkImageData, vtkActor2D)
        C++: virtual void RenderData(vtkViewport *, vtkImageData *,
            vtkActor2D *)
        
        Function called by Render to actually draw the image to to the
        screen
        """
        ...
    
    def RenderStart(self, vtkViewport, vtkActor2D):
        """
        V.RenderStart(vtkViewport, vtkActor2D)
        C++: void RenderStart(vtkViewport *viewport, vtkActor2D *actor)
        
        Draw the image to the screen.
        """
        ...
    
    def RenderToRectangleOff(self):
        """
        V.RenderToRectangleOff()
        C++: virtual void RenderToRectangleOff()
        
        If RenderToRectangle is set (by default not), then the
        imagemapper will render the image into the rectangle supplied by
        the Actor2D's PositionCoordinate and Position2Coordinate
        """
        ...
    
    def RenderToRectangleOn(self):
        """
        V.RenderToRectangleOn()
        C++: virtual void RenderToRectangleOn()
        
        If RenderToRectangle is set (by default not), then the
        imagemapper will render the image into the rectangle supplied by
        the Actor2D's PositionCoordinate and Position2Coordinate
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMapper
        C++: static vtkImageMapper *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetColorLevel(self, p_float):
        """
        V.SetColorLevel(float)
        C++: virtual void SetColorLevel(double _arg)
        
        Set/Get the level value for window/level
        """
        ...
    
    def SetColorWindow(self, p_float):
        """
        V.SetColorWindow(float)
        C++: virtual void SetColorWindow(double _arg)
        
        Set/Get the window value for window/level
        """
        ...
    
    def SetCustomDisplayExtents(self, int_tuple):
        """
        V.SetCustomDisplayExtents((int, ...))
        C++: virtual void SetCustomDisplayExtents(const int data[])
        
        The image extents which should be displayed with UseCustomExtents
        Note that the Custom extents are x,y only and the zslice is still
        applied
        """
        ...
    
    def SetInputData(self, vtkImageData):
        """
        V.SetInputData(vtkImageData)
        C++: virtual void SetInputData(vtkImageData *input)
        
        Set the Input of a filter.
        """
        ...
    
    def SetRenderToRectangle(self, p_int):
        """
        V.SetRenderToRectangle(int)
        C++: virtual void SetRenderToRectangle(vtkTypeBool _arg)
        
        If RenderToRectangle is set (by default not), then the
        imagemapper will render the image into the rectangle supplied by
        the Actor2D's PositionCoordinate and Position2Coordinate
        """
        ...
    
    def SetUseCustomExtents(self, p_int):
        """
        V.SetUseCustomExtents(int)
        C++: virtual void SetUseCustomExtents(vtkTypeBool _arg)
        
        Usually, the entire image is displayed, if UseCustomExtents is
        set (by default not), then the region supplied in the
        CustomDisplayExtents is used in preference. Note that the Custom
        extents are x,y only and the zslice is still applied
        """
        ...
    
    def SetZSlice(self, p_int):
        """
        V.SetZSlice(int)
        C++: virtual void SetZSlice(int _arg)
        
        Set/Get the current slice number. The axis Z in ZSlice does not
        necessarily have any relation to the z axis of the data on disk.
        It is simply the axis orthogonal to the x,y, display plane.
        GetWholeZMax and Min are convenience methods for obtaining the
        number of slices that can be displayed. Again the number of
        slices is in reference to the display z axis, which is not
        necessarily the z axis on disk. (due to reformatting etc)
        """
        ...
    
    def UseCustomExtentsOff(self):
        """
        V.UseCustomExtentsOff()
        C++: virtual void UseCustomExtentsOff()
        
        Usually, the entire image is displayed, if UseCustomExtents is
        set (by default not), then the region supplied in the
        CustomDisplayExtents is used in preference. Note that the Custom
        extents are x,y only and the zslice is still applied
        """
        ...
    
    def UseCustomExtentsOn(self):
        """
        V.UseCustomExtentsOn()
        C++: virtual void UseCustomExtentsOn()
        
        Usually, the entire image is displayed, if UseCustomExtents is
        set (by default not), then the region supplied in the
        CustomDisplayExtents is used in preference. Note that the Custom
        extents are x,y only and the zslice is still applied
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


