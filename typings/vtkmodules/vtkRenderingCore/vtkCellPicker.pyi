"""
This type stub file was generated by pyright.
"""

from .vtkPicker import vtkPicker

class vtkCellPicker(vtkPicker):
    """
    vtkCellPicker - ray-cast cell picker for all kinds of Prop3Ds
    
    Superclass: vtkPicker
    
    vtkCellPicker will shoot a ray into a 3D scene and return information
    about the first object that the ray hits.  It works for all Prop3Ds.
    For vtkVolume objects, it shoots a ray into the volume and returns
    the point where the ray intersects an isosurface of a chosen opacity.
    For vtkImage objects, it intersects the ray with the displayed slice.
    For vtkActor objects, it intersects the actor's polygons. If the
    object's mapper has ClippingPlanes, then it takes the clipping into
    account, and will return the Id of the clipping plane that was
    intersected. For all prop types, it returns point and cell
    information, plus the normal of the surface that was intersected at
    the pick position.  For volumes and images, it also returns (i,j,k)
    coordinates for the point and the cell that were picked.
    
    @sa
    vtkPicker vtkPointPicker vtkVolumePicker
    
    @par Thanks: This class was contributed to VTK by David Gobbi on
    behalf of Atamai Inc., as an enhancement to the original
    vtkCellPicker.
    """
    def AddLocator(self, vtkAbstractCellLocator):
        """
        V.AddLocator(vtkAbstractCellLocator)
        C++: void AddLocator(vtkAbstractCellLocator *locator)
        
        Add a locator for one of the data sets that will be included in
        the scene.  You must set up the locator with exactly the same
        data set that was input to the mapper of one or more of the
        actors in the scene.  As well, you must either build the locator
        before doing the pick, or you must turn on LazyEvaluation in the
        locator to make it build itself on the first pick.  Note that if
        you try to add the same locator to the picker twice, the second
        addition will be ignored.
        """
        ...
    
    def GetCellId(self):
        """
        V.GetCellId() -> int
        C++: virtual vtkIdType GetCellId()
        
        Get the id of the picked cell. If CellId = -1, nothing was
        picked.
        """
        ...
    
    def GetCellIJK(self):
        """
        V.GetCellIJK() -> (int, int, int)
        C++: virtual int *GetCellIJK()
        
        Get the structured coordinates of the cell at the PickPosition.
        Only valid for image actors and volumes with vtkImageData.
        Combine this with the PCoords to get the position within the
        cell.
        """
        ...
    
    def GetClippingPlaneId(self):
        """
        V.GetClippingPlaneId() -> int
        C++: virtual int GetClippingPlaneId()
        
        Get the index of the clipping plane that was intersected during
        the pick.  This will be set regardless of whether
        PickClippingPlanes is On, all that is required is that the pick
        intersected a clipping plane of the Prop3D that was picked.  The
        result will be -1 if the Prop3D that was picked has no clipping
        planes, or if the ray didn't intersect the planes.
        """
        ...
    
    def GetMapperNormal(self):
        """
        V.GetMapperNormal() -> (float, float, float)
        C++: virtual double *GetMapperNormal()
        
        Return the normal of the surface at the PickPosition in mapper
        coordinates.  The result is undefined if no prop was picked.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetPCoords(self):
        """
        V.GetPCoords() -> (float, float, float)
        C++: virtual double *GetPCoords()
        
        Get the parametric coordinates of the picked cell. Only valid if
        a prop was picked.  The PCoords can be used to compute the
        weights that are needed to interpolate data values within the
        cell.
        """
        ...
    
    def GetPickClippingPlanes(self):
        """
        V.GetPickClippingPlanes() -> int
        C++: virtual vtkTypeBool GetPickClippingPlanes()
        
        The PickClippingPlanes setting controls how clipping planes are
        handled by the pick.  If it is On, then the clipping planes
        become pickable objects, even though they are usually invisible. 
        This means that if the pick ray intersects a clipping plane
        before it hits anything else, the pick will stop at that clipping
        plane. The GetProp3D() and GetMapper() methods will return the
        Prop3D and Mapper that the clipping plane belongs to.  The
        GetClippingPlaneId() method will return the index of the clipping
        plane so that you can retrieve it from the mapper, or -1 if no
        clipping plane was picked.
        """
        ...
    
    def GetPickNormal(self):
        """
        V.GetPickNormal() -> (float, float, float)
        C++: virtual double *GetPickNormal()
        
        Return the normal of the picked surface at the PickPosition.  If
        no surface was picked, then a vector pointing back at the camera
        is returned.
        """
        ...
    
    def GetPickTextureData(self):
        """
        V.GetPickTextureData() -> int
        C++: virtual vtkTypeBool GetPickTextureData()
        
        If this is "On" and if the picked prop has a texture, then the
        data returned by GetDataSet() will be the texture's data instead
        of the mapper's data.  The GetPointId(), GetCellId(),
        GetPCoords() etc. will all return information for use with the
        texture's data.  If the picked prop does not have any texture,
        then GetDataSet() will return the mapper's data instead and
        GetPointId() etc. will return information related to the mapper's
        data.  The default value of PickTextureData is "Off".
        """
        ...
    
    def GetPointId(self):
        """
        V.GetPointId() -> int
        C++: virtual vtkIdType GetPointId()
        
        Get the id of the picked point. If PointId = -1, nothing was
        picked. This point will be a member of any cell that is picked.
        """
        ...
    
    def GetPointIJK(self):
        """
        V.GetPointIJK() -> (int, int, int)
        C++: virtual int *GetPointIJK()
        
        Get the structured coordinates of the point at the PickPosition.
        Only valid for image actors and volumes with vtkImageData.
        """
        ...
    
    def GetSubId(self):
        """
        V.GetSubId() -> int
        C++: virtual int GetSubId()
        
        Get the subId of the picked cell. This is useful, for example, if
        the data is made of triangle strips. If SubId = -1, nothing was
        picked.
        """
        ...
    
    def GetTexture(self):
        """
        V.GetTexture() -> vtkTexture
        C++: vtkTexture *GetTexture()
        
        Get the texture that was picked.  This will always be set if the
        picked prop has a texture, and will always be null otherwise.
        """
        ...
    
    def GetUseVolumeGradientOpacity(self):
        """
        V.GetUseVolumeGradientOpacity() -> int
        C++: virtual vtkTypeBool GetUseVolumeGradientOpacity()
        
        Use the product of the scalar and gradient opacity functions when
        computing the opacity isovalue, instead of just using the scalar
        opacity. This parameter is only relevant to volume picking and is
        off by default.
        """
        ...
    
    def GetVolumeOpacityIsovalue(self):
        """
        V.GetVolumeOpacityIsovalue() -> float
        C++: virtual double GetVolumeOpacityIsovalue()
        
        Set the opacity isovalue to use for defining volume surfaces. 
        The pick will occur at the location along the pick ray where the
        opacity of the volume is equal to this isovalue.  If you want to
        do the pick based on an actual data isovalue rather than the
        opacity, then pass the data value through the scalar opacity
        function before using this method.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellPicker
        C++: vtkCellPicker *NewInstance()
        """
        ...
    
    def Pick(self, p_float, p_float_1, p_float_2, vtkRenderer):
        """
        V.Pick(float, float, float, vtkRenderer) -> int
        C++: int Pick(double selectionX, double selectionY,
            double selectionZ, vtkRenderer *renderer) override;
        
        Perform pick operation with selection point provided. Normally
        the first two values are the (x,y) pixel coordinates for the
        pick, and the third value is z=0. The return value will be
        non-zero if something was successfully picked.
        """
        ...
    
    def Pick3DRay(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.Pick3DRay([float, float, float], [float, float, float, float],
            vtkRenderer) -> int
        C++: int Pick3DRay(double selectionPt[3], double orient[4],
            vtkRenderer *ren) override;
        
        Perform pick operation with selection point provided. The
        selectionPt is in world coordinates. Return non-zero if something
        was successfully picked.
        """
        ...
    
    def PickClippingPlanesOff(self):
        """
        V.PickClippingPlanesOff()
        C++: virtual void PickClippingPlanesOff()
        
        The PickClippingPlanes setting controls how clipping planes are
        handled by the pick.  If it is On, then the clipping planes
        become pickable objects, even though they are usually invisible. 
        This means that if the pick ray intersects a clipping plane
        before it hits anything else, the pick will stop at that clipping
        plane. The GetProp3D() and GetMapper() methods will return the
        Prop3D and Mapper that the clipping plane belongs to.  The
        GetClippingPlaneId() method will return the index of the clipping
        plane so that you can retrieve it from the mapper, or -1 if no
        clipping plane was picked.
        """
        ...
    
    def PickClippingPlanesOn(self):
        """
        V.PickClippingPlanesOn()
        C++: virtual void PickClippingPlanesOn()
        
        The PickClippingPlanes setting controls how clipping planes are
        handled by the pick.  If it is On, then the clipping planes
        become pickable objects, even though they are usually invisible. 
        This means that if the pick ray intersects a clipping plane
        before it hits anything else, the pick will stop at that clipping
        plane. The GetProp3D() and GetMapper() methods will return the
        Prop3D and Mapper that the clipping plane belongs to.  The
        GetClippingPlaneId() method will return the index of the clipping
        plane so that you can retrieve it from the mapper, or -1 if no
        clipping plane was picked.
        """
        ...
    
    def PickTextureDataOff(self):
        """
        V.PickTextureDataOff()
        C++: virtual void PickTextureDataOff()
        
        If this is "On" and if the picked prop has a texture, then the
        data returned by GetDataSet() will be the texture's data instead
        of the mapper's data.  The GetPointId(), GetCellId(),
        GetPCoords() etc. will all return information for use with the
        texture's data.  If the picked prop does not have any texture,
        then GetDataSet() will return the mapper's data instead and
        GetPointId() etc. will return information related to the mapper's
        data.  The default value of PickTextureData is "Off".
        """
        ...
    
    def PickTextureDataOn(self):
        """
        V.PickTextureDataOn()
        C++: virtual void PickTextureDataOn()
        
        If this is "On" and if the picked prop has a texture, then the
        data returned by GetDataSet() will be the texture's data instead
        of the mapper's data.  The GetPointId(), GetCellId(),
        GetPCoords() etc. will all return information for use with the
        texture's data.  If the picked prop does not have any texture,
        then GetDataSet() will return the mapper's data instead and
        GetPointId() etc. will return information related to the mapper's
        data.  The default value of PickTextureData is "Off".
        """
        ...
    
    def RemoveAllLocators(self):
        """
        V.RemoveAllLocators()
        C++: void RemoveAllLocators()
        
        Remove all locators associated with this picker.
        """
        ...
    
    def RemoveLocator(self, vtkAbstractCellLocator):
        """
        V.RemoveLocator(vtkAbstractCellLocator)
        C++: void RemoveLocator(vtkAbstractCellLocator *locator)
        
        Remove a locator that was previously added.  If you try to remove
        a nonexistent locator, then nothing will happen and no errors
        will be raised.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellPicker
        C++: static vtkCellPicker *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetPickClippingPlanes(self, p_int):
        """
        V.SetPickClippingPlanes(int)
        C++: virtual void SetPickClippingPlanes(vtkTypeBool _arg)
        
        The PickClippingPlanes setting controls how clipping planes are
        handled by the pick.  If it is On, then the clipping planes
        become pickable objects, even though they are usually invisible. 
        This means that if the pick ray intersects a clipping plane
        before it hits anything else, the pick will stop at that clipping
        plane. The GetProp3D() and GetMapper() methods will return the
        Prop3D and Mapper that the clipping plane belongs to.  The
        GetClippingPlaneId() method will return the index of the clipping
        plane so that you can retrieve it from the mapper, or -1 if no
        clipping plane was picked.
        """
        ...
    
    def SetPickTextureData(self, p_int):
        """
        V.SetPickTextureData(int)
        C++: virtual void SetPickTextureData(vtkTypeBool _arg)
        
        If this is "On" and if the picked prop has a texture, then the
        data returned by GetDataSet() will be the texture's data instead
        of the mapper's data.  The GetPointId(), GetCellId(),
        GetPCoords() etc. will all return information for use with the
        texture's data.  If the picked prop does not have any texture,
        then GetDataSet() will return the mapper's data instead and
        GetPointId() etc. will return information related to the mapper's
        data.  The default value of PickTextureData is "Off".
        """
        ...
    
    def SetUseVolumeGradientOpacity(self, p_int):
        """
        V.SetUseVolumeGradientOpacity(int)
        C++: virtual void SetUseVolumeGradientOpacity(vtkTypeBool _arg)
        
        Use the product of the scalar and gradient opacity functions when
        computing the opacity isovalue, instead of just using the scalar
        opacity. This parameter is only relevant to volume picking and is
        off by default.
        """
        ...
    
    def SetVolumeOpacityIsovalue(self, p_float):
        """
        V.SetVolumeOpacityIsovalue(float)
        C++: virtual void SetVolumeOpacityIsovalue(double _arg)
        
        Set the opacity isovalue to use for defining volume surfaces. 
        The pick will occur at the location along the pick ray where the
        opacity of the volume is equal to this isovalue.  If you want to
        do the pick based on an actual data isovalue rather than the
        opacity, then pass the data value through the scalar opacity
        function before using this method.
        """
        ...
    
    def UseVolumeGradientOpacityOff(self):
        """
        V.UseVolumeGradientOpacityOff()
        C++: virtual void UseVolumeGradientOpacityOff()
        
        Use the product of the scalar and gradient opacity functions when
        computing the opacity isovalue, instead of just using the scalar
        opacity. This parameter is only relevant to volume picking and is
        off by default.
        """
        ...
    
    def UseVolumeGradientOpacityOn(self):
        """
        V.UseVolumeGradientOpacityOn()
        C++: virtual void UseVolumeGradientOpacityOn()
        
        Use the product of the scalar and gradient opacity functions when
        computing the opacity isovalue, instead of just using the scalar
        opacity. This parameter is only relevant to volume picking and is
        off by default.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


