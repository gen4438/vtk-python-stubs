"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkMapArrayValues(__vtkmodules_vtkCommonExecutionModel.vtkPassInputTypeAlgorithm):
    """
    vtkMapArrayValues - Map values in an input array to different values
    in
      an output array of (possibly) different type.
    
    Superclass: vtkPassInputTypeAlgorithm
    
    vtkMapArrayValues allows you to associate certain values of an
    attribute array (on either a vertex, edge, point, or cell) with
    different values in a newly created attribute array.
    
    vtkMapArrayValues manages an internal STL map of vtkVariants that can
    be added to or cleared. When this filter executes, each "key" is
    searched for in the input array and the indices of the output array
    at which there were matches the set to the mapped "value".
    
    You can control whether the input array values are passed to the
    output before the mapping occurs (using PassArray) or, if not, what
    value to set the unmapped indices to (using FillValue).
    
    One application of this filter is to help address the dirty data
    problem. For example, using vtkMapArrayValues you could associate the
    vertex values "Foo, John", "Foo, John.", and "John Foo" with a single
    entity.
    """
    def AddToMap(self, vtkVariant, vtkVariant_1):
        """
        V.AddToMap(vtkVariant, vtkVariant)
        C++: void AddToMap(vtkVariant from, vtkVariant to)
        V.AddToMap(int, int)
        C++: void AddToMap(int from, int to)
        V.AddToMap(int, string)
        C++: void AddToMap(int from, const char *to)
        V.AddToMap(string, int)
        C++: void AddToMap(const char *from, int to)
        V.AddToMap(string, string)
        C++: void AddToMap(const char *from, const char *to)
        
        Add to the internal STL map. "from" should be a value in the
        input array and "to" should be the new value it gets assigned in
        the output array.
        """
        ...
    
    def ClearMap(self):
        """
        V.ClearMap()
        C++: void ClearMap()
        
        Clear the internal map.
        """
        ...
    
    def GetFieldType(self):
        """
        V.GetFieldType() -> int
        C++: virtual int GetFieldType()
        
        Set/Get where the data is located that is being mapped. See
        FieldType enumeration for possible values. Default is POINT_DATA.
        """
        ...
    
    def GetFillValue(self):
        """
        V.GetFillValue() -> float
        C++: virtual double GetFillValue()
        
        Set/Get whether to copy the data from the input array to the
        output array before the mapping occurs. If turned off, FillValue
        is used to initialize any unmapped array indices. Default is -1.
        """
        ...
    
    def GetInputArrayName(self):
        """
        V.GetInputArrayName() -> string
        C++: virtual char *GetInputArrayName()
        
        Set/Get the name of the input array. This must be set prior to
        execution.
        """
        ...
    
    def GetMapSize(self):
        """
        V.GetMapSize() -> int
        C++: int GetMapSize()
        
        Get the size of the internal map.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputArrayName(self):
        """
        V.GetOutputArrayName() -> string
        C++: virtual char *GetOutputArrayName()
        
        Set/Get the name of the output array. Default is "ArrayMap".
        """
        ...
    
    def GetOutputArrayType(self):
        """
        V.GetOutputArrayType() -> int
        C++: virtual int GetOutputArrayType()
        
        Set/Get the type of the output array. See vtkSetGet.h for
        possible values. Default is VTK_INT.
        """
        ...
    
    def GetPassArray(self):
        """
        V.GetPassArray() -> int
        C++: virtual vtkTypeBool GetPassArray()
        
        Set/Get whether to copy the data from the input array to the
        output array before the mapping occurs. If turned off, FillValue
        is used to initialize any unmapped array indices. Default is off.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkMapArrayValues
        C++: vtkMapArrayValues *NewInstance()
        """
        ...
    
    def PassArrayOff(self):
        """
        V.PassArrayOff()
        C++: virtual void PassArrayOff()
        
        Set/Get whether to copy the data from the input array to the
        output array before the mapping occurs. If turned off, FillValue
        is used to initialize any unmapped array indices. Default is off.
        """
        ...
    
    def PassArrayOn(self):
        """
        V.PassArrayOn()
        C++: virtual void PassArrayOn()
        
        Set/Get whether to copy the data from the input array to the
        output array before the mapping occurs. If turned off, FillValue
        is used to initialize any unmapped array indices. Default is off.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkMapArrayValues
        C++: static vtkMapArrayValues *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetFieldType(self, p_int):
        """
        V.SetFieldType(int)
        C++: virtual void SetFieldType(int _arg)
        
        Set/Get where the data is located that is being mapped. See
        FieldType enumeration for possible values. Default is POINT_DATA.
        """
        ...
    
    def SetFillValue(self, p_float):
        """
        V.SetFillValue(float)
        C++: virtual void SetFillValue(double _arg)
        
        Set/Get whether to copy the data from the input array to the
        output array before the mapping occurs. If turned off, FillValue
        is used to initialize any unmapped array indices. Default is -1.
        """
        ...
    
    def SetInputArrayName(self, string):
        """
        V.SetInputArrayName(string)
        C++: virtual void SetInputArrayName(const char *_arg)
        
        Set/Get the name of the input array. This must be set prior to
        execution.
        """
        ...
    
    def SetOutputArrayName(self, string):
        """
        V.SetOutputArrayName(string)
        C++: virtual void SetOutputArrayName(const char *_arg)
        
        Set/Get the name of the output array. Default is "ArrayMap".
        """
        ...
    
    def SetOutputArrayType(self, p_int):
        """
        V.SetOutputArrayType(int)
        C++: virtual void SetOutputArrayType(int _arg)
        
        Set/Get the type of the output array. See vtkSetGet.h for
        possible values. Default is VTK_INT.
        """
        ...
    
    def SetPassArray(self, p_int):
        """
        V.SetPassArray(int)
        C++: virtual void SetPassArray(vtkTypeBool _arg)
        
        Set/Get whether to copy the data from the input array to the
        output array before the mapping occurs. If turned off, FillValue
        is used to initialize any unmapped array indices. Default is off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    CELL_DATA = ...
    EDGE_DATA = ...
    FieldType = ...
    NUM_ATTRIBUTE_LOCS = ...
    POINT_DATA = ...
    ROW_DATA = ...
    VERTEX_DATA = ...
    __dict__ = ...
    __vtkname__ = ...


