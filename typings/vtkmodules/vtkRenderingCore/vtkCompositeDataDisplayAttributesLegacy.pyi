"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkCompositeDataDisplayAttributesLegacy(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkCompositeDataDisplayAttributesLegacy - rendering attributes for a
    multi-block dataset.
    
    Superclass: vtkObject
    
    The vtkCompositeDataDisplayAttributesLegacy class stores display
    attributes for individual blocks in a multi-block dataset. Attributes
    are mapped to blocks through their flat-index; This is the mechanism
    used in legacy OpenGL classes.
    """
    def ComputeVisibleBounds(self, vtkCompositeDataDisplayAttributesLegacy, vtkDataObject, p_float=..., p_float=..., p_float=..., p_float=..., p_float=..., p_float=...):
        """
        V.ComputeVisibleBounds(vtkCompositeDataDisplayAttributesLegacy,
            vtkDataObject, [float, float, float, float, float, float])
        C++: static void ComputeVisibleBounds(
            vtkCompositeDataDisplayAttributesLegacy *cda,
            vtkDataObject *dobj, double bounds[6])
        """
        ...
    
    def GetBlockColor(self, p_int, p_float=..., p_float=..., p_float=...):
        """
        V.GetBlockColor(int, [float, float, float])
        C++: void GetBlockColor(unsigned int flat_index, double color[3])
        V.GetBlockColor(int) -> vtkColor3d
        C++: vtkColor3d GetBlockColor(unsigned int flat_index)
        
        Set/get the color for the block with flat_index.
        """
        ...
    
    def GetBlockOpacity(self, p_int):
        """
        V.GetBlockOpacity(int) -> float
        C++: double GetBlockOpacity(unsigned int flat_index)
        
        Set/get the opacity for the block with flat_index.
        """
        ...
    
    def GetBlockPickability(self, p_int):
        """
        V.GetBlockPickability(int) -> bool
        C++: bool GetBlockPickability(unsigned int flat_index)
        
        Set/get the visibility for the block with flat_index.
        """
        ...
    
    def GetBlockVisibility(self, p_int):
        """
        V.GetBlockVisibility(int) -> bool
        C++: bool GetBlockVisibility(unsigned int flat_index)
        
        Set/get the visibility for the block with flat_index.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def HasBlockColor(self, p_int):
        """
        V.HasBlockColor(int) -> bool
        C++: bool HasBlockColor(unsigned int flat_index)
        
        Returns true if the block with the given flat_index has a color.
        """
        ...
    
    def HasBlockColors(self):
        """
        V.HasBlockColors() -> bool
        C++: bool HasBlockColors()
        
        Returns true if any block has any block color is set.
        """
        ...
    
    def HasBlockOpacities(self):
        """
        V.HasBlockOpacities() -> bool
        C++: bool HasBlockOpacities()
        
        Returns true if any block has an opacity set.
        """
        ...
    
    def HasBlockOpacity(self, p_int):
        """
        V.HasBlockOpacity(int) -> bool
        C++: bool HasBlockOpacity(unsigned int flat_index)
        
        Returns true if the block with flat_index has an opacity set.
        """
        ...
    
    def HasBlockPickabilities(self):
        """
        V.HasBlockPickabilities() -> bool
        C++: bool HasBlockPickabilities()
        
        Returns true if any block has any block visibility is set.
        """
        ...
    
    def HasBlockPickability(self, p_int):
        """
        V.HasBlockPickability(int) -> bool
        C++: bool HasBlockPickability(unsigned int flat_index)
        
        Returns true if the block with the given flat_index has a
        visibility set.
        """
        ...
    
    def HasBlockVisibilities(self):
        """
        V.HasBlockVisibilities() -> bool
        C++: bool HasBlockVisibilities()
        
        Returns true if any block has any block visibility is set.
        """
        ...
    
    def HasBlockVisibility(self, p_int):
        """
        V.HasBlockVisibility(int) -> bool
        C++: bool HasBlockVisibility(unsigned int flat_index)
        
        Returns true if the block with the given flat_index has a
        visibility set.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCompositeDataDisplayAttributesLegacy
        C++: vtkCompositeDataDisplayAttributesLegacy *NewInstance()
        """
        ...
    
    def RemoveBlockColor(self, p_int):
        """
        V.RemoveBlockColor(int)
        C++: void RemoveBlockColor(unsigned int flat_index)
        
        Removes the block color for the block with flat_index.
        """
        ...
    
    def RemoveBlockColors(self):
        """
        V.RemoveBlockColors()
        C++: void RemoveBlockColors()
        
        Removes all block colors.
        """
        ...
    
    def RemoveBlockOpacities(self):
        """
        V.RemoveBlockOpacities()
        C++: void RemoveBlockOpacities()
        
        Removes all block opacities.
        """
        ...
    
    def RemoveBlockOpacity(self, p_int):
        """
        V.RemoveBlockOpacity(int)
        C++: void RemoveBlockOpacity(unsigned int flat_index)
        
        Removes the set opacity for the block with flat_index.
        """
        ...
    
    def RemoveBlockPickabilities(self):
        """
        V.RemoveBlockPickabilities()
        C++: void RemoveBlockPickabilities()
        
        Removes all block visibility flags. The effectively sets the
        visibility for all blocks to true.
        """
        ...
    
    def RemoveBlockPickability(self, p_int):
        """
        V.RemoveBlockPickability(int)
        C++: void RemoveBlockPickability(unsigned int flat_index)
        
        Removes the block visibility flag for the block with flat_index.
        """
        ...
    
    def RemoveBlockVisibilites(self):
        """
        V.RemoveBlockVisibilites()
        C++: void RemoveBlockVisibilites()
        """
        ...
    
    def RemoveBlockVisibilities(self):
        """
        V.RemoveBlockVisibilities()
        C++: void RemoveBlockVisibilities()
        
        Removes all block visibility flags. The effectively sets the
        visibility for all blocks to true.
        """
        ...
    
    def RemoveBlockVisibility(self, p_int):
        """
        V.RemoveBlockVisibility(int)
        C++: void RemoveBlockVisibility(unsigned int flat_index)
        
        Removes the block visibility flag for the block with flat_index.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkCompositeDataDisplayAttributesLegacy
        C++: static vtkCompositeDataDisplayAttributesLegacy *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBlockColor(self, p_int, ):
        """
        V.SetBlockColor(int, (float, float, float))
        C++: void SetBlockColor(unsigned int flat_index,
            const double color[3])
        
        Set/get the color for the block with flat_index.
        """
        ...
    
    def SetBlockOpacity(self, p_int, p_float):
        """
        V.SetBlockOpacity(int, float)
        C++: void SetBlockOpacity(unsigned int flat_index, double opacity)
        
        Set/get the opacity for the block with flat_index.
        """
        ...
    
    def SetBlockPickability(self, p_int, bool):
        """
        V.SetBlockPickability(int, bool)
        C++: void SetBlockPickability(unsigned int flat_index,
            bool visible)
        
        Set/get the visibility for the block with flat_index.
        """
        ...
    
    def SetBlockVisibility(self, p_int, bool):
        """
        V.SetBlockVisibility(int, bool)
        C++: void SetBlockVisibility(unsigned int flat_index,
            bool visible)
        
        Set/get the visibility for the block with flat_index.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


