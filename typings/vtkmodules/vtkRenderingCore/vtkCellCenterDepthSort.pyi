"""
This type stub file was generated by pyright.
"""

from .vtkVisibilitySort import vtkVisibilitySort

class vtkCellCenterDepthSort(vtkVisibilitySort):
    """
    vtkCellCenterDepthSort - A simple implementation of vtkCellDepthSort.
    
    Superclass: vtkVisibilitySort
    
    vtkCellCenterDepthSort is a simple and fast implementation of depth
    sort, but it only provides approximate results.  The sorting
    algorithm finds the centroids of all the cells.  It then performs the
    dot product of the centroids against a vector pointing in the
    direction of the camera transformed into object space.  It then
    performs an ordinary sort on the result.
    """
    def GetNextCells(self):
        """
        V.GetNextCells() -> vtkIdTypeArray
        C++: vtkIdTypeArray *GetNextCells() override;
        
        To facilitate incremental sorting algorithms, the cells are
        retrieved in an iteration process.  That is, call InitTraversal
        to start the iteration and call GetNextCells to get the cell IDs
        in order. However, for efficiencies sake, GetNextCells returns an
        ordered list of several id's in once call (but not necessarily
        all).  GetNextCells will return NULL once the entire sorted list
        is output.  The vtkIdTypeArray returned from GetNextCells is a
        cached array, so do not delete it.  At the same note, do not
        expect the array to be valid after subsequent calls to
        GetNextCells.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def InitTraversal(self):
        """
        V.InitTraversal()
        C++: void InitTraversal() override;
        
        To facilitate incremental sorting algorithms, the cells are
        retrieved in an iteration process.  That is, call InitTraversal
        to start the iteration and call GetNextCells to get the cell IDs
        in order. However, for efficiencies sake, GetNextCells returns an
        ordered list of several id's in once call (but not necessarily
        all).  GetNextCells will return NULL once the entire sorted list
        is output.  The vtkIdTypeArray returned from GetNextCells is a
        cached array, so do not delete it.  At the same note, do not
        expect the array to be valid after subsequent calls to
        GetNextCells.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkCellCenterDepthSort
        C++: vtkCellCenterDepthSort *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkCellCenterDepthSort
        C++: static vtkCellCenterDepthSort *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


