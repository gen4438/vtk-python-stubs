"""
This type stub file was generated by pyright.
"""

from .vtkGeneralizedKernel import vtkGeneralizedKernel

class vtkEllipsoidalGaussianKernel(vtkGeneralizedKernel):
    """
    vtkEllipsoidalGaussianKernel - an ellipsoidal Gaussian interpolation
    kernel
    
    Superclass: vtkGeneralizedKernel
    
    vtkEllipsoidalGaussianKernel is an interpolation kernel that returns
    the weights for all points found in the ellipsoid defined by radius R
    in combination with local data (normals and/or scalars). For example,
    "pancake" weightings (the local normal parallel to the minimum
    ellisoidal axis); or "needle" weightings (the local normal parallel
    to the maximum ellipsoidal axis) are possible. (Note that spherical
    Gaussian weightings are more efficiently computed using
    vtkGaussianKernel.)
    
    The ellipsoidal Gaussian can be described by:
    
    
        W(x) = S * exp( -( Sharpness^2 * ((rxy/E)**2 + z**2)/R**2) )
    
    where S is the local scalar value; E is a user-defined eccentricity
    factor that controls the elliptical shape of the splat; z is the
    distance of the current voxel sample point along the local normal N;
    and rxy is the distance to neighbor point x in the direction
    prependicular to N.
    
    @warning
    The weights are normalized so that SUM(Wi) = 1. If a neighbor point p
    precisely lies on the point to be interpolated, then the interpolated
    point takes on the values associated with p.
    
    @sa
    vtkPointInterpolator vtkInterpolationKernel vtkGeneralizedKernel
    vtkGaussianKernel vtkVoronoiKernel vtkSPHKernel vtkShepardKernel
    """
    def ComputeWeights(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeWeights([float, float, float], vtkIdList, vtkDoubleArray,
             vtkDoubleArray) -> int
        C++: vtkIdType ComputeWeights(double x[3], vtkIdList *pIds,
            vtkDoubleArray *prob, vtkDoubleArray *weights) override;
        V.ComputeWeights([float, float, float], vtkIdList, vtkDoubleArray)
             -> int
        C++: vtkIdType ComputeWeights(double x[3], vtkIdList *pIds,
            vtkDoubleArray *weights) override;
        
        Given a point x, a list of basis points pIds, and a probability
        weighting function prob, compute interpolation weights associated
        with these basis points.  Note that basis points list pIds, the
        probability weighting prob, and the weights array are provided by
        the caller of the method, and may be dynamically resized as
        necessary. The method returns the number of weights (pIds may be
        resized in some cases). Typically this method is called after
        ComputeBasis(), although advanced users can invoke
        ComputeWeights() and provide the interpolation basis points pIds
        directly. The probably weighting prob are numbers 0<=prob<=1
        which are multiplied against the interpolation weights before
        normalization. They are estimates of local confidence of weights.
        The prob may be nullptr in which all probabilities are considered
        =1.
        """
        ...
    
    def GetEccentricity(self):
        """
        V.GetEccentricity() -> float
        C++: virtual double GetEccentricity()
        
        Set / Get the eccentricity of the ellipsoidal Gaussian. A
        value=1.0 produces a spherical distribution. Values < 1 produce a
        needle like distribution (in the direction of the normal); values
        > 1 produce a pancake like distribution (orthogonal to the
        normal).
        """
        ...
    
    def GetEccentricityMaxValue(self):
        """
        V.GetEccentricityMaxValue() -> float
        C++: virtual double GetEccentricityMaxValue()
        
        Set / Get the eccentricity of the ellipsoidal Gaussian. A
        value=1.0 produces a spherical distribution. Values < 1 produce a
        needle like distribution (in the direction of the normal); values
        > 1 produce a pancake like distribution (orthogonal to the
        normal).
        """
        ...
    
    def GetEccentricityMinValue(self):
        """
        V.GetEccentricityMinValue() -> float
        C++: virtual double GetEccentricityMinValue()
        
        Set / Get the eccentricity of the ellipsoidal Gaussian. A
        value=1.0 produces a spherical distribution. Values < 1 produce a
        needle like distribution (in the direction of the normal); values
        > 1 produce a pancake like distribution (orthogonal to the
        normal).
        """
        ...
    
    def GetNormalsArrayName(self):
        """
        V.GetNormalsArrayName() -> string
        C++: virtual vtkStdString GetNormalsArrayName()
        
        Specify the normals array name. Used to orient the ellipsoid.
        Note that by default the input normals are used (i.e. the input
        to vtkPointInterpolator). If no input normals are available, then
        the named NormalsArrayName is used.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def GetScalarsArrayName(self):
        """
        V.GetScalarsArrayName() -> string
        C++: virtual vtkStdString GetScalarsArrayName()
        
        Specify the scalars array name. Used to scale the ellipsoid. Note
        that by default the input scalars are used (i.e. the input to
        vtkPointInterpolator). If no input scalars are available, then
        the named ScalarsArrayName is used.
        """
        ...
    
    def GetScaleFactor(self):
        """
        V.GetScaleFactor() -> float
        C++: virtual double GetScaleFactor()
        
        Multiply the Gaussian splat distribution by this value. If
        UseScalars is on and a scalar array is provided, then the scalar
        value will be multiplied by the ScaleFactor times the Gaussian
        function.
        """
        ...
    
    def GetScaleFactorMaxValue(self):
        """
        V.GetScaleFactorMaxValue() -> float
        C++: virtual double GetScaleFactorMaxValue()
        
        Multiply the Gaussian splat distribution by this value. If
        UseScalars is on and a scalar array is provided, then the scalar
        value will be multiplied by the ScaleFactor times the Gaussian
        function.
        """
        ...
    
    def GetScaleFactorMinValue(self):
        """
        V.GetScaleFactorMinValue() -> float
        C++: virtual double GetScaleFactorMinValue()
        
        Multiply the Gaussian splat distribution by this value. If
        UseScalars is on and a scalar array is provided, then the scalar
        value will be multiplied by the ScaleFactor times the Gaussian
        function.
        """
        ...
    
    def GetSharpness(self):
        """
        V.GetSharpness() -> float
        C++: virtual double GetSharpness()
        
        Set / Get the sharpness (i.e., falloff) of the Gaussian. By
        default Sharpness=2. As the sharpness increases the effects of
        distant points are reduced.
        """
        ...
    
    def GetSharpnessMaxValue(self):
        """
        V.GetSharpnessMaxValue() -> float
        C++: virtual double GetSharpnessMaxValue()
        
        Set / Get the sharpness (i.e., falloff) of the Gaussian. By
        default Sharpness=2. As the sharpness increases the effects of
        distant points are reduced.
        """
        ...
    
    def GetSharpnessMinValue(self):
        """
        V.GetSharpnessMinValue() -> float
        C++: virtual double GetSharpnessMinValue()
        
        Set / Get the sharpness (i.e., falloff) of the Gaussian. By
        default Sharpness=2. As the sharpness increases the effects of
        distant points are reduced.
        """
        ...
    
    def GetUseNormals(self):
        """
        V.GetUseNormals() -> bool
        C++: virtual bool GetUseNormals()
        
        Specify whether vector values should be used to affect the shape
        of the Gaussian distribution. By default this is on.
        """
        ...
    
    def GetUseScalars(self):
        """
        V.GetUseScalars() -> bool
        C++: virtual bool GetUseScalars()
        
        Specify whether scalar values should be used to scale the
        weights. By default this is off.
        """
        ...
    
    def Initialize(self, vtkAbstractPointLocator, vtkDataSet, vtkPointData):
        """
        V.Initialize(vtkAbstractPointLocator, vtkDataSet, vtkPointData)
        C++: void Initialize(vtkAbstractPointLocator *loc, vtkDataSet *ds,
             vtkPointData *pd) override;
        
        Initialize the kernel. Overload the superclass to set up scalars
        and vectors.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkEllipsoidalGaussianKernel
        C++: vtkEllipsoidalGaussianKernel *NewInstance()
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkEllipsoidalGaussianKernel
        C++: static vtkEllipsoidalGaussianKernel *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def SetEccentricity(self, p_float):
        """
        V.SetEccentricity(float)
        C++: virtual void SetEccentricity(double _arg)
        
        Set / Get the eccentricity of the ellipsoidal Gaussian. A
        value=1.0 produces a spherical distribution. Values < 1 produce a
        needle like distribution (in the direction of the normal); values
        > 1 produce a pancake like distribution (orthogonal to the
        normal).
        """
        ...
    
    def SetNormalsArrayName(self, string):
        """
        V.SetNormalsArrayName(string)
        C++: virtual void SetNormalsArrayName(vtkStdString _arg)
        
        Specify the normals array name. Used to orient the ellipsoid.
        Note that by default the input normals are used (i.e. the input
        to vtkPointInterpolator). If no input normals are available, then
        the named NormalsArrayName is used.
        """
        ...
    
    def SetScalarsArrayName(self, string):
        """
        V.SetScalarsArrayName(string)
        C++: virtual void SetScalarsArrayName(vtkStdString _arg)
        
        Specify the scalars array name. Used to scale the ellipsoid. Note
        that by default the input scalars are used (i.e. the input to
        vtkPointInterpolator). If no input scalars are available, then
        the named ScalarsArrayName is used.
        """
        ...
    
    def SetScaleFactor(self, p_float):
        """
        V.SetScaleFactor(float)
        C++: virtual void SetScaleFactor(double _arg)
        
        Multiply the Gaussian splat distribution by this value. If
        UseScalars is on and a scalar array is provided, then the scalar
        value will be multiplied by the ScaleFactor times the Gaussian
        function.
        """
        ...
    
    def SetSharpness(self, p_float):
        """
        V.SetSharpness(float)
        C++: virtual void SetSharpness(double _arg)
        
        Set / Get the sharpness (i.e., falloff) of the Gaussian. By
        default Sharpness=2. As the sharpness increases the effects of
        distant points are reduced.
        """
        ...
    
    def SetUseNormals(self, bool):
        """
        V.SetUseNormals(bool)
        C++: virtual void SetUseNormals(bool _arg)
        
        Specify whether vector values should be used to affect the shape
        of the Gaussian distribution. By default this is on.
        """
        ...
    
    def SetUseScalars(self, bool):
        """
        V.SetUseScalars(bool)
        C++: virtual void SetUseScalars(bool _arg)
        
        Specify whether scalar values should be used to scale the
        weights. By default this is off.
        """
        ...
    
    def UseNormalsOff(self):
        """
        V.UseNormalsOff()
        C++: virtual void UseNormalsOff()
        
        Specify whether vector values should be used to affect the shape
        of the Gaussian distribution. By default this is on.
        """
        ...
    
    def UseNormalsOn(self):
        """
        V.UseNormalsOn()
        C++: virtual void UseNormalsOn()
        
        Specify whether vector values should be used to affect the shape
        of the Gaussian distribution. By default this is on.
        """
        ...
    
    def UseScalarsOff(self):
        """
        V.UseScalarsOff()
        C++: virtual void UseScalarsOff()
        
        Specify whether scalar values should be used to scale the
        weights. By default this is off.
        """
        ...
    
    def UseScalarsOn(self):
        """
        V.UseScalarsOn()
        C++: virtual void UseScalarsOn()
        
        Specify whether scalar values should be used to scale the
        weights. By default this is off.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


