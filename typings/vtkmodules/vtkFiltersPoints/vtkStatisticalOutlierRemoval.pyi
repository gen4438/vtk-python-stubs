"""
This type stub file was generated by pyright.
"""

from .vtkPointCloudFilter import vtkPointCloudFilter

class vtkStatisticalOutlierRemoval(vtkPointCloudFilter):
    """
    vtkStatisticalOutlierRemoval - remove sparse outlier points
    
    Superclass: vtkPointCloudFilter
    
    The vtkStatisticalOutlierRemoval filter removes sparse outlier points
    through statistical analysis. The average (mean) distance between
    points in the point cloud is computed (taking a local sample size
    around each point); followed by computation of the global standard
    deviation of distances between points. This global, statistical
    information is compared against the mean separation distance for each
    point; those points whose average separation is greater than the
    user-specified variation in a multiple of standard deviation are
    removed.
    
    Note that while any vtkPointSet type can be provided as input, the
    output is represented by an explicit representation of points via a
    vtkPolyData. This output polydata will populate its instance of
    vtkPoints, but no cells will be defined (i.e., no vtkVertex or
    vtkPolyVertex are contained in the output). Also, after filter
    execution, the user can request a vtkIdType* map which indicates how
    the input points were mapped to the output. A value of map[i] (where
    i is the ith input point) less than 0 means that the ith input point
    was removed. (See also the superclass documentation for accessing the
    removed points through the filter's second output.)
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkPointCloudFilter vtkRadiusOutlierRemoval vtkExtractPoints
    vtkThresholdPoints
    """
    def GetComputedMean(self):
        """
        V.GetComputedMean() -> float
        C++: virtual double GetComputedMean()
        
        After execution, return the value of the computed mean. Before
        execution the value returned is invalid.
        """
        ...
    
    def GetComputedMeanMaxValue(self):
        """
        V.GetComputedMeanMaxValue() -> float
        C++: virtual double GetComputedMeanMaxValue()
        
        After execution, return the value of the computed mean. Before
        execution the value returned is invalid.
        """
        ...
    
    def GetComputedMeanMinValue(self):
        """
        V.GetComputedMeanMinValue() -> float
        C++: virtual double GetComputedMeanMinValue()
        
        After execution, return the value of the computed mean. Before
        execution the value returned is invalid.
        """
        ...
    
    def GetComputedStandardDeviation(self):
        """
        V.GetComputedStandardDeviation() -> float
        C++: virtual double GetComputedStandardDeviation()
        
        After execution, return the value of the computed sigma (standard
        deviation). Before execution the value returned is invalid.
        """
        ...
    
    def GetComputedStandardDeviationMaxValue(self):
        """
        V.GetComputedStandardDeviationMaxValue() -> float
        C++: virtual double GetComputedStandardDeviationMaxValue()
        
        After execution, return the value of the computed sigma (standard
        deviation). Before execution the value returned is invalid.
        """
        ...
    
    def GetComputedStandardDeviationMinValue(self):
        """
        V.GetComputedStandardDeviationMinValue() -> float
        C++: virtual double GetComputedStandardDeviationMinValue()
        
        After execution, return the value of the computed sigma (standard
        deviation). Before execution the value returned is invalid.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkAbstractPointLocator
        C++: virtual vtkAbstractPointLocator *GetLocator()
        
        Specify a point locator. By default a vtkStaticPointLocator is
        used. The locator performs efficient searches to locate points
        surroinding a sample point.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def GetSampleSize(self):
        """
        V.GetSampleSize() -> int
        C++: virtual int GetSampleSize()
        
        For each point sampled, specify the number of the closest,
        surrounding points used to compute statistics. By default 25
        points are used. Smaller numbers may speed performance.
        """
        ...
    
    def GetSampleSizeMaxValue(self):
        """
        V.GetSampleSizeMaxValue() -> int
        C++: virtual int GetSampleSizeMaxValue()
        
        For each point sampled, specify the number of the closest,
        surrounding points used to compute statistics. By default 25
        points are used. Smaller numbers may speed performance.
        """
        ...
    
    def GetSampleSizeMinValue(self):
        """
        V.GetSampleSizeMinValue() -> int
        C++: virtual int GetSampleSizeMinValue()
        
        For each point sampled, specify the number of the closest,
        surrounding points used to compute statistics. By default 25
        points are used. Smaller numbers may speed performance.
        """
        ...
    
    def GetStandardDeviationFactor(self):
        """
        V.GetStandardDeviationFactor() -> float
        C++: virtual double GetStandardDeviationFactor()
        
        The filter uses this specified standard deviation factor to
        extract points. By default, points within 1.0 standard deviations
        (i.e., a StandardDeviationFactor=1.0) of the mean distance to
        neighboring points are retained.
        """
        ...
    
    def GetStandardDeviationFactorMaxValue(self):
        """
        V.GetStandardDeviationFactorMaxValue() -> float
        C++: virtual double GetStandardDeviationFactorMaxValue()
        
        The filter uses this specified standard deviation factor to
        extract points. By default, points within 1.0 standard deviations
        (i.e., a StandardDeviationFactor=1.0) of the mean distance to
        neighboring points are retained.
        """
        ...
    
    def GetStandardDeviationFactorMinValue(self):
        """
        V.GetStandardDeviationFactorMinValue() -> float
        C++: virtual double GetStandardDeviationFactorMinValue()
        
        The filter uses this specified standard deviation factor to
        extract points. By default, points within 1.0 standard deviations
        (i.e., a StandardDeviationFactor=1.0) of the mean distance to
        neighboring points are retained.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkStatisticalOutlierRemoval
        C++: vtkStatisticalOutlierRemoval *NewInstance()
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkStatisticalOutlierRemoval
        C++: static vtkStatisticalOutlierRemoval *SafeDownCast(
            vtkObjectBase *o)
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def SetComputedMean(self, p_float):
        """
        V.SetComputedMean(float)
        C++: virtual void SetComputedMean(double _arg)
        
        After execution, return the value of the computed mean. Before
        execution the value returned is invalid.
        """
        ...
    
    def SetComputedStandardDeviation(self, p_float):
        """
        V.SetComputedStandardDeviation(float)
        C++: virtual void SetComputedStandardDeviation(double _arg)
        
        After execution, return the value of the computed sigma (standard
        deviation). Before execution the value returned is invalid.
        """
        ...
    
    def SetLocator(self, vtkAbstractPointLocator):
        """
        V.SetLocator(vtkAbstractPointLocator)
        C++: void SetLocator(vtkAbstractPointLocator *locator)
        
        Specify a point locator. By default a vtkStaticPointLocator is
        used. The locator performs efficient searches to locate points
        surroinding a sample point.
        """
        ...
    
    def SetSampleSize(self, p_int):
        """
        V.SetSampleSize(int)
        C++: virtual void SetSampleSize(int _arg)
        
        For each point sampled, specify the number of the closest,
        surrounding points used to compute statistics. By default 25
        points are used. Smaller numbers may speed performance.
        """
        ...
    
    def SetStandardDeviationFactor(self, p_float):
        """
        V.SetStandardDeviationFactor(float)
        C++: virtual void SetStandardDeviationFactor(double _arg)
        
        The filter uses this specified standard deviation factor to
        extract points. By default, points within 1.0 standard deviations
        (i.e., a StandardDeviationFactor=1.0) of the mean distance to
        neighboring points are retained.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


