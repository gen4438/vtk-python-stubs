"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkVoxelGrid(__vtkmodules_vtkCommonExecutionModel.vtkPolyDataAlgorithm):
    """
    vtkVoxelGrid - subsample points using uniform binning
    
    Superclass: vtkPolyDataAlgorithm
    
    vtkVoxelGrid is a filter that subsamples a point cloud based on a
    regular binning of space. Basically the algorithm operates by
    dividing space into a volume of M x N x O bins, and then for each bin
    averaging all of the points positions into a single representative
    point. Several strategies for computing the binning can be used: 1)
    manual configuration of a requiring specifying bin dimensions (the
    bounds are calculated from the data); 2) by explicit specification of
    the bin size in world coordinates (x-y-z lengths); and 3) an
    automatic process in which the user specifies an approximate, average
    number of points per bin and dimensions and bin size are computed
    automatically. (Note that under the hood a vtkStaticPointLocator is
    used.)
    
    While any vtkPointSet type can be provided as input, the output is
    represented by an explicit representation of points via a
    vtkPolyData. This output polydata will populate its instance of
    vtkPoints, but no cells will be defined (i.e., no vtkVertex or
    vtkPolyVertex are contained in the output).
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @sa
    vtkStaticPointLocator vtkPointCloudFilter vtkQuadricClustering
    """
    def GetConfigurationStyle(self):
        """
        V.GetConfigurationStyle() -> int
        C++: virtual int GetConfigurationStyle()
        
        Configure how the filter is to operate. The user can choose to
        manually specify the binning volume (by setting its dimensions
        via MANUAL style); or specify a leaf bin size in the x-y-z
        directions (SPECIFY_LEAF_SIZE); or in AUTOMATIC style, use a
        rough average number of points in each bin guide the bin size and
        binning volume dimensions. By default, AUTOMATIC configuration
        style is used.
        """
        ...
    
    def GetDivisions(self):
        """
        V.GetDivisions() -> (int, int, int)
        C++: virtual int *GetDivisions()
        
        Set the number of divisions in x-y-z directions (the binning
        volume dimensions). This data member is used when the
        configuration style is set to MANUAL. Note that these values may
        be adjusted if <1 or too large.
        """
        ...
    
    def GetKernel(self):
        """
        V.GetKernel() -> vtkInterpolationKernel
        C++: virtual vtkInterpolationKernel *GetKernel()
        
        Specify an interpolation kernel to combine the point attributes.
        By default a vtkLinearKernel is used (i.e., average values). The
        interpolation kernel changes the basis of the interpolation.
        """
        ...
    
    def GetLeafSize(self):
        """
        V.GetLeafSize() -> (float, float, float)
        C++: virtual double *GetLeafSize()
        
        Set the bin size in the x-y-z directions. This data member is
        used when the configuration style is set to SPECIFY_LEAF_SIZE.
        The class will use these x-y-z lengths, within the bounding box
        of the point cloud, to determine the binning dimensions.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def GetNumberOfPointsPerBin(self):
        """
        V.GetNumberOfPointsPerBin() -> int
        C++: virtual int GetNumberOfPointsPerBin()
        
        Specify the average number of points in each bin. Larger values
        result in higher rates of subsampling. This data member is used
        when the configuration style is set to AUTOMATIC. The class will
        automatically determine the binning dimensions in the x-y-z
        directions.
        """
        ...
    
    def GetNumberOfPointsPerBinMaxValue(self):
        """
        V.GetNumberOfPointsPerBinMaxValue() -> int
        C++: virtual int GetNumberOfPointsPerBinMaxValue()
        
        Specify the average number of points in each bin. Larger values
        result in higher rates of subsampling. This data member is used
        when the configuration style is set to AUTOMATIC. The class will
        automatically determine the binning dimensions in the x-y-z
        directions.
        """
        ...
    
    def GetNumberOfPointsPerBinMinValue(self):
        """
        V.GetNumberOfPointsPerBinMinValue() -> int
        C++: virtual int GetNumberOfPointsPerBinMinValue()
        
        Specify the average number of points in each bin. Larger values
        result in higher rates of subsampling. This data member is used
        when the configuration style is set to AUTOMATIC. The class will
        automatically determine the binning dimensions in the x-y-z
        directions.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkVoxelGrid
        C++: vtkVoxelGrid *NewInstance()
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkVoxelGrid
        C++: static vtkVoxelGrid *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiating, obtaining type information,
        and printing information.
        """
        ...
    
    def SetConfigurationStyle(self, p_int):
        """
        V.SetConfigurationStyle(int)
        C++: virtual void SetConfigurationStyle(int _arg)
        
        Configure how the filter is to operate. The user can choose to
        manually specify the binning volume (by setting its dimensions
        via MANUAL style); or specify a leaf bin size in the x-y-z
        directions (SPECIFY_LEAF_SIZE); or in AUTOMATIC style, use a
        rough average number of points in each bin guide the bin size and
        binning volume dimensions. By default, AUTOMATIC configuration
        style is used.
        """
        ...
    
    def SetConfigurationStyleToAutomatic(self):
        """
        V.SetConfigurationStyleToAutomatic()
        C++: void SetConfigurationStyleToAutomatic()
        
        Configure how the filter is to operate. The user can choose to
        manually specify the binning volume (by setting its dimensions
        via MANUAL style); or specify a leaf bin size in the x-y-z
        directions (SPECIFY_LEAF_SIZE); or in AUTOMATIC style, use a
        rough average number of points in each bin guide the bin size and
        binning volume dimensions. By default, AUTOMATIC configuration
        style is used.
        """
        ...
    
    def SetConfigurationStyleToLeafSize(self):
        """
        V.SetConfigurationStyleToLeafSize()
        C++: void SetConfigurationStyleToLeafSize()
        
        Configure how the filter is to operate. The user can choose to
        manually specify the binning volume (by setting its dimensions
        via MANUAL style); or specify a leaf bin size in the x-y-z
        directions (SPECIFY_LEAF_SIZE); or in AUTOMATIC style, use a
        rough average number of points in each bin guide the bin size and
        binning volume dimensions. By default, AUTOMATIC configuration
        style is used.
        """
        ...
    
    def SetConfigurationStyleToManual(self):
        """
        V.SetConfigurationStyleToManual()
        C++: void SetConfigurationStyleToManual()
        
        Configure how the filter is to operate. The user can choose to
        manually specify the binning volume (by setting its dimensions
        via MANUAL style); or specify a leaf bin size in the x-y-z
        directions (SPECIFY_LEAF_SIZE); or in AUTOMATIC style, use a
        rough average number of points in each bin guide the bin size and
        binning volume dimensions. By default, AUTOMATIC configuration
        style is used.
        """
        ...
    
    def SetDivisions(self, p_int, p_int_1, p_int_2):
        """
        V.SetDivisions(int, int, int)
        C++: virtual void SetDivisions(int _arg1, int _arg2, int _arg3)
        V.SetDivisions((int, int, int))
        C++: virtual void SetDivisions(const int _arg[3])
        
        Set the number of divisions in x-y-z directions (the binning
        volume dimensions). This data member is used when the
        configuration style is set to MANUAL. Note that these values may
        be adjusted if <1 or too large.
        """
        ...
    
    def SetKernel(self, vtkInterpolationKernel):
        """
        V.SetKernel(vtkInterpolationKernel)
        C++: void SetKernel(vtkInterpolationKernel *kernel)
        
        Specify an interpolation kernel to combine the point attributes.
        By default a vtkLinearKernel is used (i.e., average values). The
        interpolation kernel changes the basis of the interpolation.
        """
        ...
    
    def SetLeafSize(self, p_float, p_float_1, p_float_2):
        """
        V.SetLeafSize(float, float, float)
        C++: virtual void SetLeafSize(double _arg1, double _arg2,
            double _arg3)
        V.SetLeafSize((float, float, float))
        C++: virtual void SetLeafSize(const double _arg[3])
        
        Set the bin size in the x-y-z directions. This data member is
        used when the configuration style is set to SPECIFY_LEAF_SIZE.
        The class will use these x-y-z lengths, within the bounding box
        of the point cloud, to determine the binning dimensions.
        """
        ...
    
    def SetNumberOfPointsPerBin(self, p_int):
        """
        V.SetNumberOfPointsPerBin(int)
        C++: virtual void SetNumberOfPointsPerBin(int _arg)
        
        Specify the average number of points in each bin. Larger values
        result in higher rates of subsampling. This data member is used
        when the configuration style is set to AUTOMATIC. The class will
        automatically determine the binning dimensions in the x-y-z
        directions.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    AUTOMATIC = ...
    MANUAL = ...
    SPECIFY_LEAF_SIZE = ...
    Style = ...
    __dict__ = ...
    __vtkname__ = ...


