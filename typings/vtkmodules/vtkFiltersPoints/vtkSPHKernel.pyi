"""
This type stub file was generated by pyright.
"""

from .vtkInterpolationKernel import vtkInterpolationKernel

class vtkSPHKernel(vtkInterpolationKernel):
    """
    vtkSPHKernel - a family of SPH interpolation kernels
    
    Superclass: vtkInterpolationKernel
    
    vtkSPHKernel is an abstract superclass for smoothed-particle
    hydrodynamics interpolation kernels as described by D.J. Price (see
    full reference below).
    
    Note that the kernel operates over a volume in space defined by a
    radius at a sampling point. The kernel implicitly assumes that the
    particles making up the input data satisfies physical properties such
    as conservation of mass. Therefore subclasses of this kernel are not
    generally applicable for interpolation processes, and therefore
    operate in conjunction with the vthSPHInterpolator class.
    
    By default the kernel computes local particle volume from the spatial
    step^3. However, if both an optional mass and density arrays are
    provided then they are used to compute local volume.
    
    Also be default, the local neighborhood around a point to be
    interpolated is computed as the CutoffFactor * SpatialStep. (Note the
    CutoffFactor varies for each type of SPH kernel.) However, the user
    may specify a CutoffArray which enables variable cutoff distances per
    each point.
    
    @warning
    For more information see D.J. Price, Smoothed particle hydrodynamics
    and magnetohydrodynamics, J. Comput. Phys. 231:759-794, 2012.
    Especially equation 49.
    
    @par Acknowledgments: The following work has been generously
    supported by Altair Engineering and FluiDyna GmbH. Please contact
    Steve Cosgrove or Milos Stanic for more information.
    
    @sa
    vtkSPHKernel vtkSPHQuinticKernel vtkInterpolationKernel
    vtkGaussianKernel vtkShepardKernel vtkLinearKernel
    """
    def ComputeBasis(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeBasis([float, float, float], vtkIdList, int) -> int
        C++: vtkIdType ComputeBasis(double x[3], vtkIdList *pIds,
            vtkIdType ptId=0) override;
        
        Given a point x (and optional associated ptId), determine the
        points around x which form an interpolation basis. The user must
        provide the vtkIdList pIds, which will be dynamically resized as
        necessary. The method returns the number of points in the basis.
        Typically this method is called before ComputeWeights(). Note
        that while ptId is optional in most cases, if a cutoff array is
        provided, then ptId must be provided.
        """
        ...
    
    def ComputeDerivWeight(self, p_float):
        """
        V.ComputeDerivWeight(float) -> float
        C++: virtual double ComputeDerivWeight(const double d)
        
        Compute weighting factor for derivative quantities given a
        normalized distance from a sample point.
        """
        ...
    
    def ComputeDerivWeights(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeDerivWeights([float, float, float], vtkIdList,
            vtkDoubleArray, vtkDoubleArray) -> int
        C++: virtual vtkIdType ComputeDerivWeights(double x[3],
            vtkIdList *pIds, vtkDoubleArray *weights,
            vtkDoubleArray *gradWeights)
        
        Given a point x, and a list of basis points pIds, compute
        interpolation weights, plus derivative weights, associated with
        these basis points.
        """
        ...
    
    def ComputeFunctionWeight(self, p_float):
        """
        V.ComputeFunctionWeight(float) -> float
        C++: virtual double ComputeFunctionWeight(const double d)
        
        Compute weighting factor given a normalized distance from a
        sample point.
        """
        ...
    
    def ComputeWeights(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeWeights([float, float, float], vtkIdList, vtkDoubleArray)
             -> int
        C++: vtkIdType ComputeWeights(double x[3], vtkIdList *pIds,
            vtkDoubleArray *weights) override;
        
        Given a point x, and a list of basis points pIds, compute
        interpolation weights associated with these basis points.
        """
        ...
    
    def GetCutoffArray(self):
        """
        V.GetCutoffArray() -> vtkDataArray
        C++: virtual vtkDataArray *GetCutoffArray()
        
        Specify the (optional) array defining a cutoff distance. If
        provided this distance is used to find the interpolating points
        within the local neighborbood. Otherwise the cutoff distance is
        defined as the cutoff factor times the spatial step size.
        """
        ...
    
    def GetCutoffFactor(self):
        """
        V.GetCutoffFactor() -> float
        C++: virtual double GetCutoffFactor()
        
        Return the cutoff factor. This is hard wired into the kernel
        (e.g., the vtkSPHQuinticKernel has a cutoff factor = 3.0).
        """
        ...
    
    def GetDensityArray(self):
        """
        V.GetDensityArray() -> vtkDataArray
        C++: virtual vtkDataArray *GetDensityArray()
        
        Specify the (optional) density array. Used with the mass array to
        compute local particle volumes.
        """
        ...
    
    def GetDimension(self):
        """
        V.GetDimension() -> int
        C++: virtual int GetDimension()
        
        The domain dimension, default to 3.
        """
        ...
    
    def GetDimensionMaxValue(self):
        """
        V.GetDimensionMaxValue() -> int
        C++: virtual int GetDimensionMaxValue()
        
        The domain dimension, default to 3.
        """
        ...
    
    def GetDimensionMinValue(self):
        """
        V.GetDimensionMinValue() -> int
        C++: virtual int GetDimensionMinValue()
        
        The domain dimension, default to 3.
        """
        ...
    
    def GetMassArray(self):
        """
        V.GetMassArray() -> vtkDataArray
        C++: virtual vtkDataArray *GetMassArray()
        
        Specify the (optional) mass array. Used with the density array to
        compute local particle volumes.
        """
        ...
    
    def GetNormFactor(self):
        """
        V.GetNormFactor() -> float
        C++: virtual double GetNormFactor()
        
        Return the SPH normalization factor. This also includes the
        contribution of 1/h^d, where h is the smoothing length (i.e.,
        spatial step) and d is the dimension of the kernel. The returned
        value is only valid after the kernel is initialized.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def GetSpatialStep(self):
        """
        V.GetSpatialStep() -> float
        C++: virtual double GetSpatialStep()
        
        The user defined initial particle spatial step. This is also
        referred to as the smoothing length.
        """
        ...
    
    def GetSpatialStepMaxValue(self):
        """
        V.GetSpatialStepMaxValue() -> float
        C++: virtual double GetSpatialStepMaxValue()
        
        The user defined initial particle spatial step. This is also
        referred to as the smoothing length.
        """
        ...
    
    def GetSpatialStepMinValue(self):
        """
        V.GetSpatialStepMinValue() -> float
        C++: virtual double GetSpatialStepMinValue()
        
        The user defined initial particle spatial step. This is also
        referred to as the smoothing length.
        """
        ...
    
    def Initialize(self, vtkAbstractPointLocator, vtkDataSet, vtkPointData):
        """
        V.Initialize(vtkAbstractPointLocator, vtkDataSet, vtkPointData)
        C++: void Initialize(vtkAbstractPointLocator *loc, vtkDataSet *ds,
             vtkPointData *pd) override;
        
        Produce the computational parameters for the kernel. Invoke this
        method after setting initial values like SpatialStep.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSPHKernel
        C++: vtkSPHKernel *NewInstance()
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSPHKernel
        C++: static vtkSPHKernel *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiation, obtaining type information,
        and printing.
        """
        ...
    
    def SetCutoffArray(self, vtkDataArray):
        """
        V.SetCutoffArray(vtkDataArray)
        C++: virtual void SetCutoffArray(vtkDataArray *)
        
        Specify the (optional) array defining a cutoff distance. If
        provided this distance is used to find the interpolating points
        within the local neighborbood. Otherwise the cutoff distance is
        defined as the cutoff factor times the spatial step size.
        """
        ...
    
    def SetDensityArray(self, vtkDataArray):
        """
        V.SetDensityArray(vtkDataArray)
        C++: virtual void SetDensityArray(vtkDataArray *)
        
        Specify the (optional) density array. Used with the mass array to
        compute local particle volumes.
        """
        ...
    
    def SetDimension(self, p_int):
        """
        V.SetDimension(int)
        C++: virtual void SetDimension(int _arg)
        
        The domain dimension, default to 3.
        """
        ...
    
    def SetMassArray(self, vtkDataArray):
        """
        V.SetMassArray(vtkDataArray)
        C++: virtual void SetMassArray(vtkDataArray *)
        
        Specify the (optional) mass array. Used with the density array to
        compute local particle volumes.
        """
        ...
    
    def SetSpatialStep(self, p_float):
        """
        V.SetSpatialStep(float)
        C++: virtual void SetSpatialStep(double _arg)
        
        The user defined initial particle spatial step. This is also
        referred to as the smoothing length.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


