"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonCore as __vtkmodules_vtkCommonCore

class vtkInterpolationKernel(__vtkmodules_vtkCommonCore.vtkObject):
    """
    vtkInterpolationKernel - base class for interpolation kernels
    
    Superclass: vtkObject
    
    vtkInterpolationKernel specifies an abstract interface for
    interpolation kernels. An interpolation kernel is used to produce an
    interpolated data value at a point X from the points + data in a
    local neighborhood surrounding X. For example, given the N nearest
    points surrounding X, the interpolation kernel provides N weights,
    which when combined with the N data values associated with these
    nearest points, produces an interpolated data value at point X.
    
    Note that various kernel initialization methods are provided. The
    basic method requires providing a point locator to accelerate
    neighborhood queries. Some kernels may refer back to the original
    dataset, or the point attribute data associated with the dataset. The
    initialization method enables different styles of initialization and
    is kernel-dependent.
    
    Typically the kernels are invoked in two parts: first, the basis is
    computed using the supplied point locator and dataset. This basis is
    a local footprint of point surrounding a poitnX. In this footprint
    are the neighboring points used to compute the interpolation weights.
    Then, the weights are computed from points forming the basis.
    However, advanced users can develop their own basis, skipping the
    ComputeBasis() method, and then invoke ComputeWeights() directly.
    
    @warning
    The ComputeBasis() and ComputeWeights() methods must be thread safe
    as they are used in threaded algorithms.
    
    @sa
    vtkPointInterpolator vtkPointInterpolator2D vtkGeneralizedKernel
    vtkGaussianKernel vtkSPHKernel vtkShepardKernel vtkVoronoiKernel
    """
    def ComputeBasis(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeBasis([float, float, float], vtkIdList, int) -> int
        C++: virtual vtkIdType ComputeBasis(double x[3], vtkIdList *pIds,
            vtkIdType ptId=0)
        
        Given a point x (and optional associated point id), determine the
        points around x which form an interpolation basis. The user must
        provide the vtkIdList pIds, which will be dynamically resized as
        necessary. The method returns the number of points in the basis.
        Typically this method is called before ComputeWeights(). Note
        that ptId is optional in most cases, although in some kernels it
        is used to facilitate basis computation.
        """
        ...
    
    def ComputeWeights(self, p_float=..., p_float=..., p_float=..., *args, **kwargs):
        """
        V.ComputeWeights([float, float, float], vtkIdList, vtkDoubleArray)
             -> int
        C++: virtual vtkIdType ComputeWeights(double x[3],
            vtkIdList *pIds, vtkDoubleArray *weights)
        
        Given a point x, and a list of basis points pIds, compute
        interpolation weights associated with these basis points.  Note
        that both the nearby basis points list pIds and the weights array
        are provided by the caller of the method, and may be dynamically
        resized as necessary. The method returns the number of weights
        (pIds may be resized in some cases). Typically this method is
        called after ComputeBasis(), although advanced users can invoke
        ComputeWeights() and provide the interpolation basis points pIds
        directly.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard method for type and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard method for type and printing.
        """
        ...
    
    def GetRequiresInitialization(self):
        """
        V.GetRequiresInitialization() -> bool
        C++: virtual bool GetRequiresInitialization()
        
        Indicate whether the kernel needs initialization. By default this
        data member is true, and using classes will invoke Initialize()
        on the kernel. However, if the user takes over initialization
        manually, then set RequiresInitialization to false (0).
        """
        ...
    
    def Initialize(self, vtkAbstractPointLocator, vtkDataSet, vtkPointData):
        """
        V.Initialize(vtkAbstractPointLocator, vtkDataSet, vtkPointData)
        C++: virtual void Initialize(vtkAbstractPointLocator *loc,
            vtkDataSet *ds, vtkPointData *pd)
        
        Initialize the kernel. Pass information into the kernel that is
        necessary to subsequently perform evaluation. The locator refers
        to the points that are to be interpolated from; these points (ds)
        and the associated point data (pd) are provided as well. Note
        that some kernels may require manual setup / initialization, in
        which case set RequiresInitialization to false, do not call
        Initialize(), and of course manually initialize the kernel.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard method for type and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard method for type and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkInterpolationKernel
        C++: vtkInterpolationKernel *NewInstance()
        
        Standard method for type and printing.
        """
        ...
    
    def RequiresInitializationOff(self):
        """
        V.RequiresInitializationOff()
        C++: virtual void RequiresInitializationOff()
        
        Indicate whether the kernel needs initialization. By default this
        data member is true, and using classes will invoke Initialize()
        on the kernel. However, if the user takes over initialization
        manually, then set RequiresInitialization to false (0).
        """
        ...
    
    def RequiresInitializationOn(self):
        """
        V.RequiresInitializationOn()
        C++: virtual void RequiresInitializationOn()
        
        Indicate whether the kernel needs initialization. By default this
        data member is true, and using classes will invoke Initialize()
        on the kernel. However, if the user takes over initialization
        manually, then set RequiresInitialization to false (0).
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkInterpolationKernel
        C++: static vtkInterpolationKernel *SafeDownCast(vtkObjectBase *o)
        
        Standard method for type and printing.
        """
        ...
    
    def SetRequiresInitialization(self, bool):
        """
        V.SetRequiresInitialization(bool)
        C++: virtual void SetRequiresInitialization(bool _arg)
        
        Indicate whether the kernel needs initialization. By default this
        data member is true, and using classes will invoke Initialize()
        on the kernel. However, if the user takes over initialization
        manually, then set RequiresInitialization to false (0).
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


