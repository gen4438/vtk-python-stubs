"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSignedDistance(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkSignedDistance - compute signed distances from an input point cloud
    
    Superclass: vtkImageAlgorithm
    
    vtkSignedDistance is a filter that computes signed distances over a
    volume from an input point cloud. The input point cloud must have
    point normals defined, as well as an optional weighting function
    (e.g., probabilities that the point measurements are accurate). Once
    the signed distance function is computed, then the output volume may
    be isocontoured to with vtkExtractSurface to extract a approximating
    surface to the point cloud.
    
    To use this filter, specify the input vtkPolyData (which represents
    the point cloud); define the sampling volume; specify a radius (which
    limits the radius of influence of each point); and set an optional
    point locator (to accelerate proximity operations, a
    vtkStaticPointLocator is used by default). Note that large radius
    values may have significant impact on performance. The volume is
    defined by specifying dimensions in the x-y-z directions, as well as
    a domain bounds. By default the model bounds are defined from the
    input points, but the user can also manually specify them.
    
    This filter has one other unusual capability: it is possible to
    append data in a sequence of operations to generate a single output.
    This is useful when you have multiple point clouds (e.g., possibly
    from multiple acqusition scans) and want to incrementally accumulate
    all the data. However, the user must be careful to either specify the
    Bounds or order the input such that the bounds of the first input
    completely contains all other input data.  This is because the
    geometry and topology of the output sampling volume cannot be changed
    after the initial Append operation.
    
    This algorithm loosely follows the most excellent paper by Curless
    and Levoy: "A Volumetric Method for Building Complex Models from
    Range Images." As described in this paper it may produce a signed
    distance volume that may contain the three data states for each
    voxel: near surface, empty, or unseen (see vtkExtractSurface for
    additional information). Note in this implementation the initial
    values of the volume are set to < this->Radius. This indicates that
    these voxels are "empty". Of course voxels with value -this->Radius
    <= d <= this->Radius are "near" the surface. (Voxels with values >
    this->Radius are "unseen" -- this filter does not produce such
    values.)
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @warning
    Empty voxel values are set to -this->Radius.
    
    @sa
    vtkExtractSurface vtkImplicitModeller
    """
    def Append(self, vtkPolyData):
        """
        V.Append(vtkPolyData)
        C++: void Append(vtkPolyData *input)
        
        Append a data set to the existing output. To use this function,
        you'll have to invoke the StartAppend() method before doing
        successive appends. It's also a good idea to specify the model
        bounds; otherwise the input model bounds is used. When you've
        finished appending, use the EndAppend() method.
        """
        ...
    
    def EndAppend(self):
        """
        V.EndAppend()
        C++: void EndAppend()
        
        Method completes the append process.
        """
        ...
    
    def GetBounds(self):
        """
        V.GetBounds() -> (float, float, float, float, float, float)
        C++: virtual double *GetBounds()
        
        Set / get the region in space in which to perform the sampling.
        If not specified, it will be computed automatically.
        """
        ...
    
    def GetDimensions(self):
        """
        V.GetDimensions() -> (int, int, int)
        C++: virtual int *GetDimensions()
        
        Set/Get the i-j-k dimensions on which to computer the distance
        function.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkAbstractPointLocator
        C++: virtual vtkAbstractPointLocator *GetLocator()
        
        Specify a point locator. By default a vtkStaticPointLocator is
        used. The locator performs efficient searches to locate points
        surrounding a voxel (within the specified radius).
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiating the class, providing type
        information, and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiating the class, providing type
        information, and printing.
        """
        ...
    
    def GetRadius(self):
        """
        V.GetRadius() -> float
        C++: virtual double GetRadius()
        
        Set / get the radius of influence of each point. Smaller values
        generally improve performance markedly. Note that after the
        signed distance function is computed, any voxel taking on the
        value >= Radius is presumed to be "unseen" or uninitialized.
        """
        ...
    
    def GetRadiusMaxValue(self):
        """
        V.GetRadiusMaxValue() -> float
        C++: virtual double GetRadiusMaxValue()
        
        Set / get the radius of influence of each point. Smaller values
        generally improve performance markedly. Note that after the
        signed distance function is computed, any voxel taking on the
        value >= Radius is presumed to be "unseen" or uninitialized.
        """
        ...
    
    def GetRadiusMinValue(self):
        """
        V.GetRadiusMinValue() -> float
        C++: virtual double GetRadiusMinValue()
        
        Set / get the radius of influence of each point. Smaller values
        generally improve performance markedly. Note that after the
        signed distance function is computed, any voxel taking on the
        value >= Radius is presumed to be "unseen" or uninitialized.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiating the class, providing type
        information, and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiating the class, providing type
        information, and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSignedDistance
        C++: vtkSignedDistance *NewInstance()
        
        Standard methods for instantiating the class, providing type
        information, and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSignedDistance
        C++: static vtkSignedDistance *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiating the class, providing type
        information, and printing.
        """
        ...
    
    def SetBounds(self, p_float, p_float_1, p_float_2, p_float_3, p_float_4, p_float_5):
        """
        V.SetBounds(float, float, float, float, float, float)
        C++: virtual void SetBounds(double _arg1, double _arg2,
            double _arg3, double _arg4, double _arg5, double _arg6)
        V.SetBounds((float, float, float, float, float, float))
        C++: virtual void SetBounds(const double _arg[6])
        
        Set / get the region in space in which to perform the sampling.
        If not specified, it will be computed automatically.
        """
        ...
    
    def SetDimensions(self, p_int, p_int_1, p_int_2):
        """
        V.SetDimensions(int, int, int)
        C++: void SetDimensions(int i, int j, int k)
        V.SetDimensions((int, int, int))
        C++: void SetDimensions(const int dim[3])
        
        Set/Get the i-j-k dimensions on which to computer the distance
        function.
        """
        ...
    
    def SetLocator(self, vtkAbstractPointLocator):
        """
        V.SetLocator(vtkAbstractPointLocator)
        C++: void SetLocator(vtkAbstractPointLocator *locator)
        
        Specify a point locator. By default a vtkStaticPointLocator is
        used. The locator performs efficient searches to locate points
        surrounding a voxel (within the specified radius).
        """
        ...
    
    def SetRadius(self, p_float):
        """
        V.SetRadius(float)
        C++: virtual void SetRadius(double _arg)
        
        Set / get the radius of influence of each point. Smaller values
        generally improve performance markedly. Note that after the
        signed distance function is computed, any voxel taking on the
        value >= Radius is presumed to be "unseen" or uninitialized.
        """
        ...
    
    def StartAppend(self):
        """
        V.StartAppend()
        C++: void StartAppend()
        
        Initialize the filter for appending data. You must invoke the
        StartAppend() method before doing successive Appends(). It's also
        a good idea to manually specify the model bounds; otherwise the
        input bounds for the data will be used.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


