"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel

class vtkSPHInterpolator(__vtkmodules_vtkCommonExecutionModel.vtkDataSetAlgorithm):
    """
    vtkSPHInterpolator - interpolate over point cloud using SPH kernels
    
    Superclass: vtkDataSetAlgorithm
    
    This filter uses SPH (smooth particle hydrodynamics) kernels to
    interpolate a data source onto an input structure. For example, while
    the data source is a set of particles, the data from these particles
    can be interpolated onto an input object such as a line, plane or
    volume. Then the output (which consists of the input structure plus
    interpolated data) can then be visualized using classical
    visualization techniques such as isocontouring, slicing, heat maps
    and so on.
    
    To use this filter, besides setting the input P and source Pc,
    specify a point locator (which accelerates queries about points and
    their neighbors) and an interpolation kernel (a subclass of
    vtkSPHKernel). In addition, the name of the source's density and mass
    arrays can optionally be provided; however if not provided then the
    local volume is computed from the kernel's spatial step. Finally, a
    cutoff distance array can optionally be provided when the local
    neighborhood around each point varies. The cutoff distance defines a
    local neighborhood in which the points in that neighborhood are used
    to interpolate values. If not provided, then the cutoff distance is
    computed from the spatial step size times the cutoff factor (see
    vtkSPHKernel).
    
    Other options to the filter include specifying which data attributes
    to interpolate from the source. By default, all data attributes
    contained in the source are interpolated. However, by adding array
    names to the exclusion list, these arrays will not be interpolated.
    Also, it is possible to use a SPH derivative formulation to
    interpolate from the source data attributes. This requires adding
    arrays (by name) to the derivative list, in which case the derivative
    formulation will be applied to create a new output array named
    "X_deriv" where X is the name of a source point attribute array.
    
    @warning
    This class has been threaded with vtkSMPTools. Using TBB or other
    non-sequential type (set in the CMake variable
    VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
    
    @warning
    For widely spaced points in Pc, or when p is located outside the
    bounding region of Pc, the interpolation may behave badly and the
    interpolation process will adapt as necessary to produce output. For
    example, if the N closest points within R are requested to
    interpolate p, if N=0 then the interpolation will switch to a
    different strategy (which can be controlled as in the
    NullPointsStrategy).
    
    @warning
    For more information and technical reference, see D.J. Price,
    Smoothed particle hydrodynamics and magnetohydrodynamics, J. Comput.
    Phys. 231:759-794, 2012. Especially equation 49.
    
    @par Acknowledgments: The following work has been generously
    supported by Altair Engineering and FluiDyna GmbH. Please contact
    Steve Cosgrove or Milos Stanic for more information.
    
    @sa
    vtkPointInterpolator vtkSPHKernel vtkSPHQuinticKernel
    """
    def AddDerivativeArray(self, string):
        """
        V.AddDerivativeArray(string)
        C++: void AddDerivativeArray(const vtkStdString &derivArray)
        
        Adds an array to the list of arrays whose derivative is to be
        taken. If the name of the array is "derivArray" this will produce
        an output array with the name "derivArray_deriv" (after filter
        execution).
        """
        ...
    
    def AddExcludedArray(self, string):
        """
        V.AddExcludedArray(string)
        C++: void AddExcludedArray(const vtkStdString &excludedArray)
        
        Adds an array to the list of arrays which are to be excluded from
        the interpolation process.
        """
        ...
    
    def ClearDerivativeArrays(self):
        """
        V.ClearDerivativeArrays()
        C++: void ClearDerivativeArrays()
        
        Clears the contents of derivative array list.
        """
        ...
    
    def ClearExcludedArrays(self):
        """
        V.ClearExcludedArrays()
        C++: void ClearExcludedArrays()
        
        Clears the contents of excluded array list.
        """
        ...
    
    def ComputeShepardSumOff(self):
        """
        V.ComputeShepardSumOff()
        C++: virtual void ComputeShepardSumOff()
        
        Indicate whether to compute the summation of weighting
        coefficients (the so-called Shepard sum). In the interior of a
        SPH point cloud, the Shepard summation value should be ~1.0. 
        Towards the boundary, the Shepard summation generally falls off
        <1.0. If ComputeShepardSum is specified, then the output will
        contain an array of summed Shepard weights for each output point.
        On by default.
        """
        ...
    
    def ComputeShepardSumOn(self):
        """
        V.ComputeShepardSumOn()
        C++: virtual void ComputeShepardSumOn()
        
        Indicate whether to compute the summation of weighting
        coefficients (the so-called Shepard sum). In the interior of a
        SPH point cloud, the Shepard summation value should be ~1.0. 
        Towards the boundary, the Shepard summation generally falls off
        <1.0. If ComputeShepardSum is specified, then the output will
        contain an array of summed Shepard weights for each output point.
        On by default.
        """
        ...
    
    def GetComputeShepardSum(self):
        """
        V.GetComputeShepardSum() -> int
        C++: virtual vtkTypeBool GetComputeShepardSum()
        
        Indicate whether to compute the summation of weighting
        coefficients (the so-called Shepard sum). In the interior of a
        SPH point cloud, the Shepard summation value should be ~1.0. 
        Towards the boundary, the Shepard summation generally falls off
        <1.0. If ComputeShepardSum is specified, then the output will
        contain an array of summed Shepard weights for each output point.
        On by default.
        """
        ...
    
    def GetCutoffArrayName(self):
        """
        V.GetCutoffArrayName() -> string
        C++: virtual vtkStdString GetCutoffArrayName()
        
        Specify an (optional) cutoff distance for each point in the input
        P. If not specified, then the kernel cutoff is used.
        """
        ...
    
    def GetDensityArrayName(self):
        """
        V.GetDensityArrayName() -> string
        C++: virtual vtkStdString GetDensityArrayName()
        
        Specify the density array name. This is optional. Typically both
        the density and mass arrays are specified together (in order to
        compute the local volume). Both the mass and density arrays must
        consist of tuples of 1-component. (Note that the density array
        name specifies a point array found in the Pc source.)
        """
        ...
    
    def GetDerivativeArray(self, p_int):
        """
        V.GetDerivativeArray(int) -> string
        C++: const char *GetDerivativeArray(int i)
        
        Return the name of the ith derivative array.
        """
        ...
    
    def GetExcludedArray(self, p_int):
        """
        V.GetExcludedArray(int) -> string
        C++: const char *GetExcludedArray(int i)
        
        Return the name of the ith excluded array.
        """
        ...
    
    def GetKernel(self):
        """
        V.GetKernel() -> vtkSPHKernel
        C++: virtual vtkSPHKernel *GetKernel()
        
        Specify an interpolation kernel. By default a vtkSPHQuinticKernel
        is used (i.e., closest point). The interpolation kernel changes
        the basis of the interpolation.
        """
        ...
    
    def GetLocator(self):
        """
        V.GetLocator() -> vtkAbstractPointLocator
        C++: virtual vtkAbstractPointLocator *GetLocator()
        
        Specify a point locator. By default a vtkStaticPointLocator is
        used. The locator performs efficient searches to locate near a
        specified interpolation position.
        """
        ...
    
    def GetMassArrayName(self):
        """
        V.GetMassArrayName() -> string
        C++: virtual vtkStdString GetMassArrayName()
        
        Specify the mass array name. This is optional. Typically both the
        density and mass arrays are specified together (in order to
        compute the local volume).  Both the mass and density arrays must
        consist of tuples of 1-component. (Note that the mass array name
        specifies a point array found in the Pc source.)
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Get the MTime of this object also considering the locator and
        kernel.
        """
        ...
    
    def GetNullPointsStrategy(self):
        """
        V.GetNullPointsStrategy() -> int
        C++: virtual int GetNullPointsStrategy()
        
        Specify a strategy to use when encountering a "null" point during
        the interpolation process. Null points occur when the local
        neighborhood (of nearby points to interpolate from) is empty. If
        the strategy is set to MaskPoints, then an output array is
        created that marks points as being valid (=1) or null (invalid
        =0) (and the NullValue is set as well). If the strategy is set to
        NullValue, then the output data value(s) are set to the NullPoint
        value.
        """
        ...
    
    def GetNullValue(self):
        """
        V.GetNullValue() -> float
        C++: virtual double GetNullValue()
        
        Specify the null point value. When a null point is encountered
        then all components of each null tuple are set to this value. By
        default the null value is set to zero.
        """
        ...
    
    def GetNumberOfDerivativeArrays(self):
        """
        V.GetNumberOfDerivativeArrays() -> int
        C++: int GetNumberOfDerivativeArrays()
        
        Return the number of derivative arrays.
        """
        ...
    
    def GetNumberOfExcludedArrays(self):
        """
        V.GetNumberOfExcludedArrays() -> int
        C++: int GetNumberOfExcludedArrays()
        
        Return the number of excluded arrays.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for instantiating, obtaining type information,
        and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for instantiating, obtaining type information,
        and printing.
        """
        ...
    
    def GetPassCellArrays(self):
        """
        V.GetPassCellArrays() -> int
        C++: virtual vtkTypeBool GetPassCellArrays()
        
        Indicate whether to shallow copy the input cell data arrays to
        the output. On by default.
        """
        ...
    
    def GetPassFieldArrays(self):
        """
        V.GetPassFieldArrays() -> int
        C++: virtual vtkTypeBool GetPassFieldArrays()
        
        Indicate whether to pass the field-data arrays from the input to
        the output. On by default.
        """
        ...
    
    def GetPassPointArrays(self):
        """
        V.GetPassPointArrays() -> int
        C++: virtual vtkTypeBool GetPassPointArrays()
        
        Indicate whether to shallow copy the input point data arrays to
        the output. On by default.
        """
        ...
    
    def GetPromoteOutputArrays(self):
        """
        V.GetPromoteOutputArrays() -> int
        C++: virtual vtkTypeBool GetPromoteOutputArrays()
        
        If enabled, then input arrays that are non-real types (i.e., not
        float or double) are promoted to float type on output. This is
        because the interpolation process may not be well behaved when
        integral types are combined using interpolation weights.
        """
        ...
    
    def GetShepardNormalization(self):
        """
        V.GetShepardNormalization() -> int
        C++: virtual vtkTypeBool GetShepardNormalization()
        
        Indicate whether to normalize all arrays with the Shepard
        coefficients (except the density array and the Shepard sum
        array). If the Shepard coefficient is 0, then the data value is
        set to zero. Note that enabling ShepardNormalization forces the
        computation of the ShepardSum array.
        """
        ...
    
    def GetShepardSumArrayName(self):
        """
        V.GetShepardSumArrayName() -> string
        C++: virtual vtkStdString GetShepardSumArrayName()
        
        If ComputeShepardSum is on, then an array is generated with name
        ShepardSumArrayName for each input point. This vtkFloatArray is
        placed into the output of the filter, and NullPoints have value
        =0.0. The default name is "Shepard Summation".
        """
        ...
    
    def GetSource(self):
        """
        V.GetSource() -> vtkDataObject
        C++: vtkDataObject *GetSource()
        
        Specify the dataset Pc that will be probed by the input points P.
         The Input P defines the dataset structure (the points and cells)
        for the output, while the Source Pc is probed (interpolated) to
        generate the scalars, vectors, etc. for the output points based
        on the point locations.
        """
        ...
    
    def GetValidPointsMaskArrayName(self):
        """
        V.GetValidPointsMaskArrayName() -> string
        C++: virtual vtkStdString GetValidPointsMaskArrayName()
        
        If the NullPointsStrategy == MASK_POINTS, then an array is
        generated for each input point. This vtkCharArray is placed into
        the output of the filter, with a non-zero value for a valid
        point, and zero otherwise. The name of this masking array is
        specified here.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for instantiating, obtaining type information,
        and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for instantiating, obtaining type information,
        and printing.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSPHInterpolator
        C++: vtkSPHInterpolator *NewInstance()
        
        Standard methods for instantiating, obtaining type information,
        and printing.
        """
        ...
    
    def PassCellArraysOff(self):
        """
        V.PassCellArraysOff()
        C++: virtual void PassCellArraysOff()
        
        Indicate whether to shallow copy the input cell data arrays to
        the output. On by default.
        """
        ...
    
    def PassCellArraysOn(self):
        """
        V.PassCellArraysOn()
        C++: virtual void PassCellArraysOn()
        
        Indicate whether to shallow copy the input cell data arrays to
        the output. On by default.
        """
        ...
    
    def PassFieldArraysOff(self):
        """
        V.PassFieldArraysOff()
        C++: virtual void PassFieldArraysOff()
        
        Indicate whether to pass the field-data arrays from the input to
        the output. On by default.
        """
        ...
    
    def PassFieldArraysOn(self):
        """
        V.PassFieldArraysOn()
        C++: virtual void PassFieldArraysOn()
        
        Indicate whether to pass the field-data arrays from the input to
        the output. On by default.
        """
        ...
    
    def PassPointArraysOff(self):
        """
        V.PassPointArraysOff()
        C++: virtual void PassPointArraysOff()
        
        Indicate whether to shallow copy the input point data arrays to
        the output. On by default.
        """
        ...
    
    def PassPointArraysOn(self):
        """
        V.PassPointArraysOn()
        C++: virtual void PassPointArraysOn()
        
        Indicate whether to shallow copy the input point data arrays to
        the output. On by default.
        """
        ...
    
    def PromoteOutputArraysOff(self):
        """
        V.PromoteOutputArraysOff()
        C++: virtual void PromoteOutputArraysOff()
        
        If enabled, then input arrays that are non-real types (i.e., not
        float or double) are promoted to float type on output. This is
        because the interpolation process may not be well behaved when
        integral types are combined using interpolation weights.
        """
        ...
    
    def PromoteOutputArraysOn(self):
        """
        V.PromoteOutputArraysOn()
        C++: virtual void PromoteOutputArraysOn()
        
        If enabled, then input arrays that are non-real types (i.e., not
        float or double) are promoted to float type on output. This is
        because the interpolation process may not be well behaved when
        integral types are combined using interpolation weights.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSPHInterpolator
        C++: static vtkSPHInterpolator *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for instantiating, obtaining type information,
        and printing.
        """
        ...
    
    def SetComputeShepardSum(self, p_int):
        """
        V.SetComputeShepardSum(int)
        C++: virtual void SetComputeShepardSum(vtkTypeBool _arg)
        
        Indicate whether to compute the summation of weighting
        coefficients (the so-called Shepard sum). In the interior of a
        SPH point cloud, the Shepard summation value should be ~1.0. 
        Towards the boundary, the Shepard summation generally falls off
        <1.0. If ComputeShepardSum is specified, then the output will
        contain an array of summed Shepard weights for each output point.
        On by default.
        """
        ...
    
    def SetCutoffArrayName(self, string):
        """
        V.SetCutoffArrayName(string)
        C++: virtual void SetCutoffArrayName(vtkStdString _arg)
        
        Specify an (optional) cutoff distance for each point in the input
        P. If not specified, then the kernel cutoff is used.
        """
        ...
    
    def SetDensityArrayName(self, string):
        """
        V.SetDensityArrayName(string)
        C++: virtual void SetDensityArrayName(vtkStdString _arg)
        
        Specify the density array name. This is optional. Typically both
        the density and mass arrays are specified together (in order to
        compute the local volume). Both the mass and density arrays must
        consist of tuples of 1-component. (Note that the density array
        name specifies a point array found in the Pc source.)
        """
        ...
    
    def SetKernel(self, vtkSPHKernel):
        """
        V.SetKernel(vtkSPHKernel)
        C++: void SetKernel(vtkSPHKernel *kernel)
        
        Specify an interpolation kernel. By default a vtkSPHQuinticKernel
        is used (i.e., closest point). The interpolation kernel changes
        the basis of the interpolation.
        """
        ...
    
    def SetLocator(self, vtkAbstractPointLocator):
        """
        V.SetLocator(vtkAbstractPointLocator)
        C++: void SetLocator(vtkAbstractPointLocator *locator)
        
        Specify a point locator. By default a vtkStaticPointLocator is
        used. The locator performs efficient searches to locate near a
        specified interpolation position.
        """
        ...
    
    def SetMassArrayName(self, string):
        """
        V.SetMassArrayName(string)
        C++: virtual void SetMassArrayName(vtkStdString _arg)
        
        Specify the mass array name. This is optional. Typically both the
        density and mass arrays are specified together (in order to
        compute the local volume).  Both the mass and density arrays must
        consist of tuples of 1-component. (Note that the mass array name
        specifies a point array found in the Pc source.)
        """
        ...
    
    def SetNullPointsStrategy(self, p_int):
        """
        V.SetNullPointsStrategy(int)
        C++: virtual void SetNullPointsStrategy(int _arg)
        
        Specify a strategy to use when encountering a "null" point during
        the interpolation process. Null points occur when the local
        neighborhood (of nearby points to interpolate from) is empty. If
        the strategy is set to MaskPoints, then an output array is
        created that marks points as being valid (=1) or null (invalid
        =0) (and the NullValue is set as well). If the strategy is set to
        NullValue, then the output data value(s) are set to the NullPoint
        value.
        """
        ...
    
    def SetNullPointsStrategyToMaskPoints(self):
        """
        V.SetNullPointsStrategyToMaskPoints()
        C++: void SetNullPointsStrategyToMaskPoints()
        
        Specify a strategy to use when encountering a "null" point during
        the interpolation process. Null points occur when the local
        neighborhood (of nearby points to interpolate from) is empty. If
        the strategy is set to MaskPoints, then an output array is
        created that marks points as being valid (=1) or null (invalid
        =0) (and the NullValue is set as well). If the strategy is set to
        NullValue, then the output data value(s) are set to the NullPoint
        value.
        """
        ...
    
    def SetNullPointsStrategyToNullValue(self):
        """
        V.SetNullPointsStrategyToNullValue()
        C++: void SetNullPointsStrategyToNullValue()
        
        Specify a strategy to use when encountering a "null" point during
        the interpolation process. Null points occur when the local
        neighborhood (of nearby points to interpolate from) is empty. If
        the strategy is set to MaskPoints, then an output array is
        created that marks points as being valid (=1) or null (invalid
        =0) (and the NullValue is set as well). If the strategy is set to
        NullValue, then the output data value(s) are set to the NullPoint
        value.
        """
        ...
    
    def SetNullValue(self, p_float):
        """
        V.SetNullValue(float)
        C++: virtual void SetNullValue(double _arg)
        
        Specify the null point value. When a null point is encountered
        then all components of each null tuple are set to this value. By
        default the null value is set to zero.
        """
        ...
    
    def SetPassCellArrays(self, p_int):
        """
        V.SetPassCellArrays(int)
        C++: virtual void SetPassCellArrays(vtkTypeBool _arg)
        
        Indicate whether to shallow copy the input cell data arrays to
        the output. On by default.
        """
        ...
    
    def SetPassFieldArrays(self, p_int):
        """
        V.SetPassFieldArrays(int)
        C++: virtual void SetPassFieldArrays(vtkTypeBool _arg)
        
        Indicate whether to pass the field-data arrays from the input to
        the output. On by default.
        """
        ...
    
    def SetPassPointArrays(self, p_int):
        """
        V.SetPassPointArrays(int)
        C++: virtual void SetPassPointArrays(vtkTypeBool _arg)
        
        Indicate whether to shallow copy the input point data arrays to
        the output. On by default.
        """
        ...
    
    def SetPromoteOutputArrays(self, p_int):
        """
        V.SetPromoteOutputArrays(int)
        C++: virtual void SetPromoteOutputArrays(vtkTypeBool _arg)
        
        If enabled, then input arrays that are non-real types (i.e., not
        float or double) are promoted to float type on output. This is
        because the interpolation process may not be well behaved when
        integral types are combined using interpolation weights.
        """
        ...
    
    def SetShepardNormalization(self, p_int):
        """
        V.SetShepardNormalization(int)
        C++: virtual void SetShepardNormalization(vtkTypeBool _arg)
        
        Indicate whether to normalize all arrays with the Shepard
        coefficients (except the density array and the Shepard sum
        array). If the Shepard coefficient is 0, then the data value is
        set to zero. Note that enabling ShepardNormalization forces the
        computation of the ShepardSum array.
        """
        ...
    
    def SetShepardSumArrayName(self, string):
        """
        V.SetShepardSumArrayName(string)
        C++: virtual void SetShepardSumArrayName(vtkStdString _arg)
        
        If ComputeShepardSum is on, then an array is generated with name
        ShepardSumArrayName for each input point. This vtkFloatArray is
        placed into the output of the filter, and NullPoints have value
        =0.0. The default name is "Shepard Summation".
        """
        ...
    
    def SetSourceConnection(self, vtkAlgorithmOutput):
        """
        V.SetSourceConnection(vtkAlgorithmOutput)
        C++: void SetSourceConnection(vtkAlgorithmOutput *algOutput)
        
        Specify the dataset Pc that will be probed by the input points P.
         The Input P defines the structure (the points and cells) for the
        output, while the Source Pc is probed (interpolated) to generate
        the scalars, vectors, etc. for the output points based on the
        point locations.
        """
        ...
    
    def SetSourceData(self, vtkDataObject):
        """
        V.SetSourceData(vtkDataObject)
        C++: void SetSourceData(vtkDataObject *source)
        
        Specify the dataset Pc that will be probed by the input points P.
         The Input P defines the dataset structure (the points and cells)
        for the output, while the Source Pc is probed (interpolated) to
        generate the scalars, vectors, etc. for the output points based
        on the point locations.
        """
        ...
    
    def SetValidPointsMaskArrayName(self, string):
        """
        V.SetValidPointsMaskArrayName(string)
        C++: virtual void SetValidPointsMaskArrayName(vtkStdString _arg)
        
        If the NullPointsStrategy == MASK_POINTS, then an array is
        generated for each input point. This vtkCharArray is placed into
        the output of the filter, with a non-zero value for a valid
        point, and zero otherwise. The name of this masking array is
        specified here.
        """
        ...
    
    def ShepardNormalizationOff(self):
        """
        V.ShepardNormalizationOff()
        C++: virtual void ShepardNormalizationOff()
        
        Indicate whether to normalize all arrays with the Shepard
        coefficients (except the density array and the Shepard sum
        array). If the Shepard coefficient is 0, then the data value is
        set to zero. Note that enabling ShepardNormalization forces the
        computation of the ShepardSum array.
        """
        ...
    
    def ShepardNormalizationOn(self):
        """
        V.ShepardNormalizationOn()
        C++: virtual void ShepardNormalizationOn()
        
        Indicate whether to normalize all arrays with the Shepard
        coefficients (except the density array and the Shepard sum
        array). If the Shepard coefficient is 0, then the data value is
        set to zero. Note that enabling ShepardNormalization forces the
        computation of the ShepardSum array.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    MASK_POINTS = ...
    NullStrategy = ...
    NULL_VALUE = ...
    __dict__ = ...
    __vtkname__ = ...


