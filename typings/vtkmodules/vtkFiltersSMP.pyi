"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonDataModel as __vtkmodules_vtkCommonDataModel
import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkCommonTransforms as __vtkmodules_vtkCommonTransforms
import vtkmodules.vtkFiltersCore as __vtkmodules_vtkFiltersCore
import vtkmodules.vtkFiltersGeneral as __vtkmodules_vtkFiltersGeneral

class vtkSMPContourGrid(__vtkmodules_vtkFiltersCore.vtkContourGrid):
    """
    vtkSMPContourGrid - a subclass of vtkContourGrid that works in
    parallel vtkSMPContourGrid performs the same functionaliy as
    vtkContourGrid but does it using multiple threads.
    
    Superclass: vtkContourGrid
    
    This will probably be merged with vtkContourGrid in the future.
    """
    def GetMergePieces(self):
        """
        V.GetMergePieces() -> bool
        C++: virtual bool GetMergePieces()
        
        If MergePieces is true (default), this filter will merge all
        pieces generated by processing the input with multiple threads.
        The output will be a vtkPolyData. Note that this has a slight
        overhead which becomes more significant as the number of threads
        used grows. If MergePieces is false, this filter will generate a
        vtkMultiBlock of vtkPolyData where the number of pieces will be
        equal to the number of threads used.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def MergePiecesOff(self):
        """
        V.MergePiecesOff()
        C++: virtual void MergePiecesOff()
        
        If MergePieces is true (default), this filter will merge all
        pieces generated by processing the input with multiple threads.
        The output will be a vtkPolyData. Note that this has a slight
        overhead which becomes more significant as the number of threads
        used grows. If MergePieces is false, this filter will generate a
        vtkMultiBlock of vtkPolyData where the number of pieces will be
        equal to the number of threads used.
        """
        ...
    
    def MergePiecesOn(self):
        """
        V.MergePiecesOn()
        C++: virtual void MergePiecesOn()
        
        If MergePieces is true (default), this filter will merge all
        pieces generated by processing the input with multiple threads.
        The output will be a vtkPolyData. Note that this has a slight
        overhead which becomes more significant as the number of threads
        used grows. If MergePieces is false, this filter will generate a
        vtkMultiBlock of vtkPolyData where the number of pieces will be
        equal to the number of threads used.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSMPContourGrid
        C++: vtkSMPContourGrid *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSMPContourGrid
        C++: static vtkSMPContourGrid *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMergePieces(self, bool):
        """
        V.SetMergePieces(bool)
        C++: virtual void SetMergePieces(bool _arg)
        
        If MergePieces is true (default), this filter will merge all
        pieces generated by processing the input with multiple threads.
        The output will be a vtkPolyData. Note that this has a slight
        overhead which becomes more significant as the number of threads
        used grows. If MergePieces is false, this filter will generate a
        vtkMultiBlock of vtkPolyData where the number of pieces will be
        equal to the number of threads used.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSMPContourGridManyPieces(__vtkmodules_vtkFiltersCore.vtkContourGrid):
    """
    vtkSMPContourGridManyPieces - a subclass of vtkContourGrid that works
    in parallel vtkSMPContourGridManyPieces performs the same
    functionaliy as vtkContourGrid but does it using multiple threads.
    
    Superclass: vtkContourGrid
    
    This filter generates a multi-block of vtkPolyData. It will generate
    a relatively large number of pieces - the number is dependent on the
    input size and number of threads available. See vtkSMPContourGrid is
    you are interested in a filter that merges the piece. This will
    probably be merged with vtkContourGrid in the future.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSMPContourGridManyPieces
        C++: vtkSMPContourGridManyPieces *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSMPContourGridManyPieces
        C++: static vtkSMPContourGridManyPieces *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSMPMergePoints(__vtkmodules_vtkCommonDataModel.vtkMergePoints):
    """
    vtkSMPMergePoints - Class designed to help with merging of points in
    parallel
    
    Superclass: vtkMergePoints
    
    vtkSMPMergePoints is a subclass of vtkMergePoints designed to help
    with merging of points generated by using multiple locators in
    parallel. Its main functionality is provided by the Merge function.
    It also has a few additional convenience functions. Merge is thread
    safe as long as no two threads are merging the same bin. The common
    way of using vtkSMPMergePoints is:
    - Initialize with outLocator->InitializeMerge()
    - Allocate points with outLocator->GetPoints()->Resize(numPts)
      (numPts should be >= total number of points)
    - Do bunch of merging with outLocator->Merge(inLocator[i], ...) (this
    can be done in parallel as long as no two bins are done at the same
      time)
    - Fix the size of points with outLocator->FixSizeOfPointArray()
    """
    def FixSizeOfPointArray(self):
        """
        V.FixSizeOfPointArray()
        C++: void FixSizeOfPointArray()
        
        At the of the merge, this can be called to set the MaxId of the
        points array to the maximum id in the locator. The current design
        usage is as follows:
        - Allocate points with points->Resize(numPts). NumPts should be
          >= total number of points
        - Do bunch of merging with outLocator->Merge(inLocator[i], ...)
        - Fix the size of points with outLocator->FixSizeOfPointArray()
        """
        ...
    
    def GetMaxId(self):
        """
        V.GetMaxId() -> int
        C++: vtkIdType GetMaxId()
        
        Returns the biggest id in the locator.
        """
        ...
    
    def GetNumberOfBuckets(self):
        """
        V.GetNumberOfBuckets() -> int
        C++: vtkIdType GetNumberOfBuckets() override;
        
        Returns the number of bins.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Standard methods for type management and printing.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Standard methods for type management and printing.
        """
        ...
    
    def GetNumberOfIdsInBucket(self, p_int):
        """
        V.GetNumberOfIdsInBucket(int) -> int
        C++: vtkIdType GetNumberOfIdsInBucket(vtkIdType idx)
        
        Returns the number of points in a bin.
        """
        ...
    
    def InitializeMerge(self):
        """
        V.InitializeMerge()
        C++: void InitializeMerge()
        
        This should be called from 1 thread before any call to Merge.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Standard methods for type management and printing.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Standard methods for type management and printing.
        """
        ...
    
    def Merge(self, vtkSMPMergePoints, p_int, vtkPointData, vtkPointData_1, vtkIdList):
        """
        V.Merge(vtkSMPMergePoints, int, vtkPointData, vtkPointData,
            vtkIdList)
        C++: void Merge(vtkSMPMergePoints *locator, vtkIdType idx,
            vtkPointData *outPd, vtkPointData *inPd, vtkIdList *idList)
        
        Merge the points of one of the bins from the given locator to the
        same bin of the current locator. Note that this requires that the
        two locators have identical binning structures. This also merges
        point data given in the inPD argument to the outPd. Furthermore,
        it generates a map of the old ids of the input locator to the new
        ids. This is stored in the idList argument. The map is
        idList[oldId] = newId.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSMPMergePoints
        C++: vtkSMPMergePoints *NewInstance()
        
        Standard methods for type management and printing.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSMPMergePoints
        C++: static vtkSMPMergePoints *SafeDownCast(vtkObjectBase *o)
        
        Standard methods for type management and printing.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSMPMergePolyDataHelper(object):
    """
    vtkSMPMergePolyDataHelper - Utility class for merging poly data in
    parallel
    
    This class is designed as a utility class to help merging of poly
    data generated by filters that generate multiple polydata outputs and
    the associated locators. It requires that the filter uses
    vtkSMPMergePoints which creates a number of necessary data
    structures.
    """
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __hash__(self, *args, **kwargs) -> int:
        """ Return hash(self). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    


class vtkSMPTransform(__vtkmodules_vtkCommonTransforms.vtkTransform):
    """
    vtkSMPTransform - Transform that uses the SMP framework
    
    Superclass: vtkTransform
    
    Just like its parent, vtkTransform, vtkSMPTransform calculates and
    manages transforms. Its main difference is that it performs various
    transform operations over a set of points in parallel using the SMP
    framework.
    @sa
    vtkTransform
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSMPTransform
        C++: vtkSMPTransform *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSMPTransform
        C++: static vtkSMPTransform *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def TransformNormals(self, vtkDataArray, vtkDataArray_1):
        """
        V.TransformNormals(vtkDataArray, vtkDataArray)
        C++: void TransformNormals(vtkDataArray *inNms,
            vtkDataArray *outNms) override;
        
        Apply the transformation to a series of normals, and append the
        results to outNms.
        """
        ...
    
    def TransformPoints(self, vtkPoints, vtkPoints_1):
        """
        V.TransformPoints(vtkPoints, vtkPoints)
        C++: void TransformPoints(vtkPoints *inPts, vtkPoints *outPts)
            override;
        
        Apply the transformation to a series of points, and append the
        results to outPts.
        """
        ...
    
    def TransformVectors(self, vtkDataArray, vtkDataArray_1):
        """
        V.TransformVectors(vtkDataArray, vtkDataArray)
        C++: void TransformVectors(vtkDataArray *inVrs,
            vtkDataArray *outVrs) override;
        
        Apply the transformation to a series of vectors, and append the
        results to outVrs.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkSMPWarpVector(__vtkmodules_vtkFiltersGeneral.vtkWarpVector):
    """
    vtkSMPWarpVector - multithreaded vtkWarpVector
    
    Superclass: vtkWarpVector
    
    Just like parent, but uses the SMP framework to do the work on many
    threads.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkSMPWarpVector
        C++: vtkSMPWarpVector *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkSMPWarpVector
        C++: static vtkSMPWarpVector *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkThreadedSynchronizedTemplates3D(__vtkmodules_vtkCommonExecutionModel.vtkMultiBlockDataSetAlgorithm):
    """
    vtkThreadedSynchronizedTemplates3D - generate isosurface from
    structured points
    
    Superclass: vtkMultiBlockDataSetAlgorithm
    
    vtkThreadedSynchronizedTemplates3D is a 3D implementation of the
    synchronized template algorithm. Note that vtkContourFilter will
    automatically use this class when appropriate.
    
    @warning
    This filter is specialized to 3D images (aka volumes).
    
    @sa
    vtkContourFilter vtkThreadedSynchronizedTemplates2D
    """
    def ComputeGradientsOff(self):
        """
        V.ComputeGradientsOff()
        C++: virtual void ComputeGradientsOff()
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def ComputeGradientsOn(self):
        """
        V.ComputeGradientsOn()
        C++: virtual void ComputeGradientsOn()
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def ComputeNormalsOff(self):
        """
        V.ComputeNormalsOff()
        C++: virtual void ComputeNormalsOff()
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off.
        """
        ...
    
    def ComputeNormalsOn(self):
        """
        V.ComputeNormalsOn()
        C++: virtual void ComputeNormalsOn()
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off.
        """
        ...
    
    def ComputeScalarsOff(self):
        """
        V.ComputeScalarsOff()
        C++: virtual void ComputeScalarsOff()
        
        Set/Get the computation of scalars.
        """
        ...
    
    def ComputeScalarsOn(self):
        """
        V.ComputeScalarsOn()
        C++: virtual void ComputeScalarsOn()
        
        Set/Get the computation of scalars.
        """
        ...
    
    def GenerateTrianglesOff(self):
        """
        V.GenerateTrianglesOff()
        C++: virtual void GenerateTrianglesOff()
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygons
        """
        ...
    
    def GenerateTrianglesOn(self):
        """
        V.GenerateTrianglesOn()
        C++: virtual void GenerateTrianglesOn()
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygons
        """
        ...
    
    def GenerateValues(self, p_int, p_float=..., p_float=...):
        """
        V.GenerateValues(int, [float, float])
        C++: void GenerateValues(int numContours, double range[2])
        V.GenerateValues(int, float, float)
        C++: void GenerateValues(int numContours, double rangeStart,
            double rangeEnd)
        
        Generate numContours equally spaced contour values between
        specified range. Contour values will include min/max range
        values.
        """
        ...
    
    def GetArrayComponent(self):
        """
        V.GetArrayComponent() -> int
        C++: virtual int GetArrayComponent()
        
        Set/get which component of the scalar array to contour on;
        defaults to 0.
        """
        ...
    
    def GetComputeGradients(self):
        """
        V.GetComputeGradients() -> int
        C++: virtual vtkTypeBool GetComputeGradients()
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def GetComputeNormals(self):
        """
        V.GetComputeNormals() -> int
        C++: virtual vtkTypeBool GetComputeNormals()
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off.
        """
        ...
    
    def GetComputeScalars(self):
        """
        V.GetComputeScalars() -> int
        C++: virtual vtkTypeBool GetComputeScalars()
        
        Set/Get the computation of scalars.
        """
        ...
    
    def GetGenerateTriangles(self):
        """
        V.GetGenerateTriangles() -> int
        C++: virtual vtkTypeBool GetGenerateTriangles()
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygons
        """
        ...
    
    def GetInputMemoryLimit(self):
        """
        V.GetInputMemoryLimit() -> int
        C++: unsigned long GetInputMemoryLimit()
        
        Determines the chunk size for streaming.  This filter will act
        like a collector: ask for many input pieces, but generate one
        output.  Limit is in KBytes
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Because we delegate to vtkContourValues
        """
        ...
    
    def GetNumberOfContours(self):
        """
        V.GetNumberOfContours() -> int
        C++: vtkIdType GetNumberOfContours()
        
        Get the number of contours in the list of contour values.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetValue(self, p_int):
        """
        V.GetValue(int) -> float
        C++: double GetValue(int i)
        
        Get the ith contour value.
        """
        ...
    
    def GetValues(self):
        """
        V.GetValues() -> (float, ...)
        C++: double *GetValues()
        V.GetValues([float, ...])
        C++: void GetValues(double *contourValues)
        
        Get a pointer to an array of contour values. There will be
        GetNumberOfContours() values in the list.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkThreadedSynchronizedTemplates3D
        C++: vtkThreadedSynchronizedTemplates3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkThreadedSynchronizedTemplates3D
        C++: static vtkThreadedSynchronizedTemplates3D *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetArrayComponent(self, p_int):
        """
        V.SetArrayComponent(int)
        C++: virtual void SetArrayComponent(int _arg)
        
        Set/get which component of the scalar array to contour on;
        defaults to 0.
        """
        ...
    
    def SetComputeGradients(self, p_int):
        """
        V.SetComputeGradients(int)
        C++: virtual void SetComputeGradients(vtkTypeBool _arg)
        
        Set/Get the computation of gradients. Gradient computation is
        fairly expensive in both time and storage. Note that if
        ComputeNormals is on, gradients will have to be calculated, but
        will not be stored in the output dataset.  If the output data
        will be processed by filters that modify topology or geometry, it
        may be wise to turn Normals and Gradients off.
        """
        ...
    
    def SetComputeNormals(self, p_int):
        """
        V.SetComputeNormals(int)
        C++: virtual void SetComputeNormals(vtkTypeBool _arg)
        
        Set/Get the computation of normals. Normal computation is fairly
        expensive in both time and storage. If the output data will be
        processed by filters that modify topology or geometry, it may be
        wise to turn Normals and Gradients off.
        """
        ...
    
    def SetComputeScalars(self, p_int):
        """
        V.SetComputeScalars(int)
        C++: virtual void SetComputeScalars(vtkTypeBool _arg)
        
        Set/Get the computation of scalars.
        """
        ...
    
    def SetGenerateTriangles(self, p_int):
        """
        V.SetGenerateTriangles(int)
        C++: virtual void SetGenerateTriangles(vtkTypeBool _arg)
        
        If this is enabled (by default), the output will be triangles
        otherwise, the output will be the intersection polygons
        """
        ...
    
    def SetInputMemoryLimit(self, p_int):
        """
        V.SetInputMemoryLimit(int)
        C++: void SetInputMemoryLimit(unsigned long limit)
        
        Determines the chunk size for streaming.  This filter will act
        like a collector: ask for many input pieces, but generate one
        output.  Limit is in KBytes
        """
        ...
    
    def SetNumberOfContours(self, p_int):
        """
        V.SetNumberOfContours(int)
        C++: void SetNumberOfContours(int number)
        
        Set the number of contours to place into the list. You only
        really need to use this method to reduce list size. The method
        SetValue() will automatically increase list size as needed.
        """
        ...
    
    def SetValue(self, p_int, p_float):
        """
        V.SetValue(int, float)
        C++: void SetValue(int i, double value)
        
        Set a particular contour value at contour number i. The index i
        ranges between 0<=i<NumberOfContours.
        """
        ...
    
    def ThreadedExecute(self, vtkImageData, vtkInformation, vtkInformation_1, vtkDataArray):
        """
        V.ThreadedExecute(vtkImageData, vtkInformation, vtkInformation,
            vtkDataArray)
        C++: void ThreadedExecute(vtkImageData *data,
            vtkInformation *inInfo, vtkInformation *outInfo,
            vtkDataArray *inScalars)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkThreadedSynchronizedTemplatesCutter3D(vtkThreadedSynchronizedTemplates3D):
    """
    vtkThreadedSynchronizedTemplatesCutter3D - generate cut surface from
    structured points
    
    Superclass: vtkThreadedSynchronizedTemplates3D
    
    vtkThreadedSynchronizedTemplatesCutter3D is an implementation of the
    synchronized template algorithm.
    
    @sa
    vtkContourFilter vtkSynchronizedTemplates3D
    vtkThreadedSynchronizedTemplates3D vtkSynchronizedTemplatesCutter3D
    """
    def GetCutFunction(self):
        """
        V.GetCutFunction() -> vtkImplicitFunction
        C++: virtual vtkImplicitFunction *GetCutFunction()
        
        Specify the implicit function to perform the cutting.
        """
        ...
    
    def GetMTime(self):
        """
        V.GetMTime() -> int
        C++: vtkMTimeType GetMTime() override;
        
        Override GetMTime because we delegate to vtkContourValues and
        refer to vtkImplicitFunction.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOutputPointsPrecision(self):
        """
        V.GetOutputPointsPrecision() -> int
        C++: virtual int GetOutputPointsPrecision()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def GetOutputPointsPrecisionMaxValue(self):
        """
        V.GetOutputPointsPrecisionMaxValue() -> int
        C++: virtual int GetOutputPointsPrecisionMaxValue()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def GetOutputPointsPrecisionMinValue(self):
        """
        V.GetOutputPointsPrecisionMinValue() -> int
        C++: virtual int GetOutputPointsPrecisionMinValue()
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkThreadedSynchronizedTemplatesCutter3D
        C++: vtkThreadedSynchronizedTemplatesCutter3D *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase)
            -> vtkThreadedSynchronizedTemplatesCutter3D
        C++: static vtkThreadedSynchronizedTemplatesCutter3D *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetCutFunction(self, vtkImplicitFunction):
        """
        V.SetCutFunction(vtkImplicitFunction)
        C++: virtual void SetCutFunction(vtkImplicitFunction *)
        
        Specify the implicit function to perform the cutting.
        """
        ...
    
    def SetOutputPointsPrecision(self, p_int):
        """
        V.SetOutputPointsPrecision(int)
        C++: virtual void SetOutputPointsPrecision(int _arg)
        
        Set/get the desired precision for the output types. See the
        documentation for the vtkAlgorithm::DesiredOutputPrecision enum
        for an explanation of the available precision settings.
        """
        ...
    
    def ThreadedExecute(self, vtkImageData, vtkInformation, p_int):
        """
        V.ThreadedExecute(vtkImageData, vtkInformation, int)
        C++: void ThreadedExecute(vtkImageData *data,
            vtkInformation *outInfo, int)
        
        Needed by templated functions.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
