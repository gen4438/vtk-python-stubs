"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkIOExport as __vtkmodules_vtkIOExport

class vtkGL2PSExporter(__vtkmodules_vtkIOExport.vtkExporter):
    """
    vtkGL2PSExporter - export a scene as a PostScript file using GL2PS.
    
    Superclass: vtkExporter
    
    vtkGL2PSExporter is a concrete subclass of vtkExporter that writes
    high quality vector PostScript (PS/EPS), PDF or SVG files by using
    GL2PS.  GL2PS can be obtained at: http://www.geuz.org/gl2ps/.  This
    can be very useful when one requires publication quality pictures.
    This class works best with simple 3D scenes and most 2D plots. Please
    note that GL2PS has its limitations since PostScript is not an ideal
    language to represent complex 3D scenes.  However, this class does
    allow one to write mixed vector/raster files by using the
    Write3DPropsAsRasterImage ivar.  Please do read the caveats section
    of this documentation.
    
    By default vtkGL2PSExporter generates Encapsulated PostScript (EPS)
    output along with the text in portrait orientation with the
    background color of the window being drawn.  The generated output is
    also compressed using zlib. The various other options are set to
    sensible defaults.
    
    The output file format (FileFormat) can be either PostScript (PS),
    Encapsulated PostScript (EPS), PDF, SVG or TeX.  The file extension
    is generated automatically depending on the FileFormat.  The default
    is EPS.  When TeX output is chosen, only the text strings in the plot
    are generated and put into a picture environment.  One can turn on
    and off the text when generating PS/EPS/PDF/SVG files by using the
    Text boolean variable.  By default the text is drawn. The background
    color of the renderwindow is drawn by default.  To make the
    background white instead use the DrawBackgroundOff function. 
    Landscape figures can be generated by using the LandscapeOn function.
     Portrait orientation is used by default. Several of the GL2PS
    options can be set.  The names of the ivars for these options are
    similar to the ones that GL2PS provides. Compress, SimpleLineOffset,
    Silent, BestRoot, PS3Shading and OcclusionCull are similar to the
    options provided by GL2PS.  Please read the function documentation or
    the GL2PS documentation for more details.  The ivar
    Write3DPropsAsRasterImage allows one to generate mixed vector/raster
    images.  All the 3D props in the scene will be written as a raster
    image and all 2D actors will be written as vector graphic primitives.
     This makes it possible to handle transparency and complex 3D scenes.
     This ivar is set to Off by default.  Specific 3D props can be
    excluded from the rasterization process by adding them to the
    RasterExclusions ivar.  Props in this collection will be rendered as
    2D vector primitives instead.
    
    @warning
    By default (with Write3DPropsAsRasterImage set to Off) exporting
    complex 3D scenes can take a long while and result in huge output
    files.  Generating correct vector graphics output for scenes with
    transparency is almost impossible.  However, one can set
    Write3DPropsAsRasterImageOn and generate mixed vector/raster files.
    This should work fine with complex scenes along with transparent
    actors.
    
    @sa
    vtkExporter
    
    @par Thanks: Thanks to Goodwin Lawlor and Prabhu Ramachandran for
    this class.
    """
    def BestRootOff(self):
        """
        V.BestRootOff()
        C++: virtual void BestRootOff()
        
        Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
        construction of the BSP tree is optimized by choosing the root
        primitives leading to the minimum number of splits.  Defaults to
        on.
        """
        ...
    
    def BestRootOn(self):
        """
        V.BestRootOn()
        C++: virtual void BestRootOn()
        
        Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
        construction of the BSP tree is optimized by choosing the root
        primitives leading to the minimum number of splits.  Defaults to
        on.
        """
        ...
    
    def CompressOff(self):
        """
        V.CompressOff()
        C++: virtual void CompressOff()
        
        Turn on/off compression when generating PostScript or PDF output.
        By default compression is on.
        """
        ...
    
    def CompressOn(self):
        """
        V.CompressOn()
        C++: virtual void CompressOn()
        
        Turn on/off compression when generating PostScript or PDF output.
        By default compression is on.
        """
        ...
    
    def DrawBackgroundOff(self):
        """
        V.DrawBackgroundOff()
        C++: virtual void DrawBackgroundOff()
        
        Turn on/off drawing the background frame.  If off the background
        is treated as white.  By default the background is drawn. On the
        OpenGL2 backend, the background is always drawn.
        """
        ...
    
    def DrawBackgroundOn(self):
        """
        V.DrawBackgroundOn()
        C++: virtual void DrawBackgroundOn()
        
        Turn on/off drawing the background frame.  If off the background
        is treated as white.  By default the background is drawn. On the
        OpenGL2 backend, the background is always drawn.
        """
        ...
    
    def GetBestRoot(self):
        """
        V.GetBestRoot() -> int
        C++: virtual vtkTypeBool GetBestRoot()
        
        Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
        construction of the BSP tree is optimized by choosing the root
        primitives leading to the minimum number of splits.  Defaults to
        on.
        """
        ...
    
    def GetBufferSize(self):
        """
        V.GetBufferSize() -> int
        C++: virtual int GetBufferSize()
        
        The initial size of the GL2PS export buffer in bytes. The buffer
        is used to store the exported image prior to writing to file. If
        the buffer is too small, the exporter will enlarge the buffer and
        rerender until the export is successful. Setting a larger value
        here can reduce the time needed to export a complex scene by
        reducing the number of iterations required. The default initial
        size is 4 MB.
        """
        ...
    
    def GetCompress(self):
        """
        V.GetCompress() -> int
        C++: virtual vtkTypeBool GetCompress()
        
        Turn on/off compression when generating PostScript or PDF output.
        By default compression is on.
        """
        ...
    
    def GetDrawBackground(self):
        """
        V.GetDrawBackground() -> int
        C++: virtual vtkTypeBool GetDrawBackground()
        
        Turn on/off drawing the background frame.  If off the background
        is treated as white.  By default the background is drawn. On the
        OpenGL2 backend, the background is always drawn.
        """
        ...
    
    def GetFileFormat(self):
        """
        V.GetFileFormat() -> int
        C++: virtual int GetFileFormat()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def GetFileFormatAsString(self):
        """
        V.GetFileFormatAsString() -> string
        C++: const char *GetFileFormatAsString()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def GetFileFormatMaxValue(self):
        """
        V.GetFileFormatMaxValue() -> int
        C++: virtual int GetFileFormatMaxValue()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def GetFileFormatMinValue(self):
        """
        V.GetFileFormatMinValue() -> int
        C++: virtual int GetFileFormatMinValue()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def GetFilePrefix(self):
        """
        V.GetFilePrefix() -> string
        C++: virtual char *GetFilePrefix()
        
        Specify the prefix of the files to write out. The resulting
        filenames will have .ps or .eps or .tex appended to them
        depending on the other options chosen.
        """
        ...
    
    def GetLandscape(self):
        """
        V.GetLandscape() -> int
        C++: virtual vtkTypeBool GetLandscape()
        
        Turn on/off landscape orientation.  If off (default) the
        orientation is set to portrait.
        """
        ...
    
    def GetLineWidthFactor(self):
        """
        V.GetLineWidthFactor() -> float
        C++: virtual float GetLineWidthFactor()
        
        Set the ratio between the OpenGL LineWidth and that used by GL2PS
        to generate PostScript.  Defaults to a ratio of 5/7.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetOcclusionCull(self):
        """
        V.GetOcclusionCull() -> int
        C++: virtual vtkTypeBool GetOcclusionCull()
        
        Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
        When enabled hidden polygons are removed.  This reduces file size
        considerably.  Defaults to on.
        """
        ...
    
    def GetPointSizeFactor(self):
        """
        V.GetPointSizeFactor() -> float
        C++: virtual float GetPointSizeFactor()
        
        Set the ratio between the OpenGL PointSize and that used by GL2PS
        to generate PostScript.  Defaults to a ratio of 5/7.
        """
        ...
    
    def GetPS3Shading(self):
        """
        V.GetPS3Shading() -> int
        C++: virtual vtkTypeBool GetPS3Shading()
        
        Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
        shfill PostScript level 3 operator is used.  Read the GL2PS
        documentation for more details.  Defaults to on.
        """
        ...
    
    def GetRasterExclusions(self):
        """
        V.GetRasterExclusions() -> vtkPropCollection
        C++: virtual vtkPropCollection *GetRasterExclusions()
        
        Collection of props to exclude from rasterization. These will be
        rendered as 2D vector primitives in the output. This setting is
        ignored if Write3DPropsAsRasterImage is false. Behind the scenes,
        these props are treated as 2D props during the vector output
        generation.
        """
        ...
    
    def GetSilent(self):
        """
        V.GetSilent() -> int
        C++: virtual vtkTypeBool GetSilent()
        
        Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
        enabled GL2PS messages are suppressed.  Defaults to off.
        """
        ...
    
    def GetSimpleLineOffset(self):
        """
        V.GetSimpleLineOffset() -> int
        C++: virtual vtkTypeBool GetSimpleLineOffset()
        
        Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
        small offset is added in the z-buffer to all the lines in the
        plot.  This results in an anti-aliasing like solution.  Defaults
        to on.
        """
        ...
    
    def GetSort(self):
        """
        V.GetSort() -> int
        C++: virtual int GetSort()
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def GetSortAsString(self):
        """
        V.GetSortAsString() -> string
        C++: const char *GetSortAsString()
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def GetSortMaxValue(self):
        """
        V.GetSortMaxValue() -> int
        C++: virtual int GetSortMaxValue()
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def GetSortMinValue(self):
        """
        V.GetSortMinValue() -> int
        C++: virtual int GetSortMinValue()
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def GetText(self):
        """
        V.GetText() -> int
        C++: virtual vtkTypeBool GetText()
        
        Turn on/off drawing the text.  If on (default) the text is drawn.
        If the FileFormat is set to TeX output then a LaTeX picture is
        generated with the text strings.  If off text output is
        suppressed.
        """
        ...
    
    def GetTextAsPath(self):
        """
        V.GetTextAsPath() -> bool
        C++: virtual bool GetTextAsPath()
        
        Turn on/off exporting text as path information, rather than
        character data. This is useful for the PDF backend, which does
        not properly support aligned text otherwise. Defaults to Off.
        """
        ...
    
    def GetTitle(self):
        """
        V.GetTitle() -> string
        C++: virtual char *GetTitle()
        
        Set the title for the output, if supported. If nullptr, "VTK GL2PS
        Export" is used.
        """
        ...
    
    def GetWrite3DPropsAsRasterImage(self):
        """
        V.GetWrite3DPropsAsRasterImage() -> int
        C++: virtual vtkTypeBool GetWrite3DPropsAsRasterImage()
        
        Turn on/off writing 3D props as raster images.  2D props are
        rendered using vector graphics primitives.  If you have hi-res
        actors and are using transparency you probably need to turn this
        on.  Defaults to Off. This option has no effect when the OpenGL2
        backend is in use, as all 3D props (excluding vtkTextActor3D) are
        rasterized into the background.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def LandscapeOff(self):
        """
        V.LandscapeOff()
        C++: virtual void LandscapeOff()
        
        Turn on/off landscape orientation.  If off (default) the
        orientation is set to portrait.
        """
        ...
    
    def LandscapeOn(self):
        """
        V.LandscapeOn()
        C++: virtual void LandscapeOn()
        
        Turn on/off landscape orientation.  If off (default) the
        orientation is set to portrait.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkGL2PSExporter
        C++: vtkGL2PSExporter *NewInstance()
        """
        ...
    
    def OcclusionCullOff(self):
        """
        V.OcclusionCullOff()
        C++: virtual void OcclusionCullOff()
        
        Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
        When enabled hidden polygons are removed.  This reduces file size
        considerably.  Defaults to on.
        """
        ...
    
    def OcclusionCullOn(self):
        """
        V.OcclusionCullOn()
        C++: virtual void OcclusionCullOn()
        
        Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
        When enabled hidden polygons are removed.  This reduces file size
        considerably.  Defaults to on.
        """
        ...
    
    def PS3ShadingOff(self):
        """
        V.PS3ShadingOff()
        C++: virtual void PS3ShadingOff()
        
        Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
        shfill PostScript level 3 operator is used.  Read the GL2PS
        documentation for more details.  Defaults to on.
        """
        ...
    
    def PS3ShadingOn(self):
        """
        V.PS3ShadingOn()
        C++: virtual void PS3ShadingOn()
        
        Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
        shfill PostScript level 3 operator is used.  Read the GL2PS
        documentation for more details.  Defaults to on.
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkGL2PSExporter
        C++: static vtkGL2PSExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetBestRoot(self, p_int):
        """
        V.SetBestRoot(int)
        C++: virtual void SetBestRoot(vtkTypeBool _arg)
        
        Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
        construction of the BSP tree is optimized by choosing the root
        primitives leading to the minimum number of splits.  Defaults to
        on.
        """
        ...
    
    def SetBufferSize(self, p_int):
        """
        V.SetBufferSize(int)
        C++: virtual void SetBufferSize(int _arg)
        
        The initial size of the GL2PS export buffer in bytes. The buffer
        is used to store the exported image prior to writing to file. If
        the buffer is too small, the exporter will enlarge the buffer and
        rerender until the export is successful. Setting a larger value
        here can reduce the time needed to export a complex scene by
        reducing the number of iterations required. The default initial
        size is 4 MB.
        """
        ...
    
    def SetCompress(self, p_int):
        """
        V.SetCompress(int)
        C++: virtual void SetCompress(vtkTypeBool _arg)
        
        Turn on/off compression when generating PostScript or PDF output.
        By default compression is on.
        """
        ...
    
    def SetDrawBackground(self, p_int):
        """
        V.SetDrawBackground(int)
        C++: virtual void SetDrawBackground(vtkTypeBool _arg)
        
        Turn on/off drawing the background frame.  If off the background
        is treated as white.  By default the background is drawn. On the
        OpenGL2 backend, the background is always drawn.
        """
        ...
    
    def SetFileFormat(self, p_int):
        """
        V.SetFileFormat(int)
        C++: virtual void SetFileFormat(int _arg)
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def SetFileFormatToEPS(self):
        """
        V.SetFileFormatToEPS()
        C++: void SetFileFormatToEPS()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def SetFileFormatToPDF(self):
        """
        V.SetFileFormatToPDF()
        C++: void SetFileFormatToPDF()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def SetFileFormatToPS(self):
        """
        V.SetFileFormatToPS()
        C++: void SetFileFormatToPS()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def SetFileFormatToSVG(self):
        """
        V.SetFileFormatToSVG()
        C++: void SetFileFormatToSVG()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def SetFileFormatToTeX(self):
        """
        V.SetFileFormatToTeX()
        C++: void SetFileFormatToTeX()
        
        Specify the format of file to write out.  This can be one of:
        PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
        Depending on the option chosen it generates the appropriate file
        (with correct extension) when the Write function is called.
        """
        ...
    
    def SetFilePrefix(self, string):
        """
        V.SetFilePrefix(string)
        C++: virtual void SetFilePrefix(const char *_arg)
        
        Specify the prefix of the files to write out. The resulting
        filenames will have .ps or .eps or .tex appended to them
        depending on the other options chosen.
        """
        ...
    
    def SetLandscape(self, p_int):
        """
        V.SetLandscape(int)
        C++: virtual void SetLandscape(vtkTypeBool _arg)
        
        Turn on/off landscape orientation.  If off (default) the
        orientation is set to portrait.
        """
        ...
    
    def SetLineWidthFactor(self, p_float):
        """
        V.SetLineWidthFactor(float)
        C++: virtual void SetLineWidthFactor(float _arg)
        
        Set the ratio between the OpenGL LineWidth and that used by GL2PS
        to generate PostScript.  Defaults to a ratio of 5/7.
        """
        ...
    
    def SetOcclusionCull(self, p_int):
        """
        V.SetOcclusionCull(int)
        C++: virtual void SetOcclusionCull(vtkTypeBool _arg)
        
        Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
        When enabled hidden polygons are removed.  This reduces file size
        considerably.  Defaults to on.
        """
        ...
    
    def SetPointSizeFactor(self, p_float):
        """
        V.SetPointSizeFactor(float)
        C++: virtual void SetPointSizeFactor(float _arg)
        
        Set the ratio between the OpenGL PointSize and that used by GL2PS
        to generate PostScript.  Defaults to a ratio of 5/7.
        """
        ...
    
    def SetPS3Shading(self, p_int):
        """
        V.SetPS3Shading(int)
        C++: virtual void SetPS3Shading(vtkTypeBool _arg)
        
        Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
        shfill PostScript level 3 operator is used.  Read the GL2PS
        documentation for more details.  Defaults to on.
        """
        ...
    
    def SetRasterExclusions(self, vtkPropCollection):
        """
        V.SetRasterExclusions(vtkPropCollection)
        C++: void SetRasterExclusions(vtkPropCollection *)
        
        Collection of props to exclude from rasterization. These will be
        rendered as 2D vector primitives in the output. This setting is
        ignored if Write3DPropsAsRasterImage is false. Behind the scenes,
        these props are treated as 2D props during the vector output
        generation.
        """
        ...
    
    def SetSilent(self, p_int):
        """
        V.SetSilent(int)
        C++: virtual void SetSilent(vtkTypeBool _arg)
        
        Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
        enabled GL2PS messages are suppressed.  Defaults to off.
        """
        ...
    
    def SetSimpleLineOffset(self, p_int):
        """
        V.SetSimpleLineOffset(int)
        C++: virtual void SetSimpleLineOffset(vtkTypeBool _arg)
        
        Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
        small offset is added in the z-buffer to all the lines in the
        plot.  This results in an anti-aliasing like solution.  Defaults
        to on.
        """
        ...
    
    def SetSort(self, p_int):
        """
        V.SetSort(int)
        C++: virtual void SetSort(int _arg)
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def SetSortToBSP(self):
        """
        V.SetSortToBSP()
        C++: void SetSortToBSP()
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def SetSortToOff(self):
        """
        V.SetSortToOff()
        C++: void SetSortToOff()
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def SetSortToSimple(self):
        """
        V.SetSortToSimple()
        C++: void SetSortToSimple()
        
        Set the type of sorting algorithm to order primitives from back
        to front.  Successive algorithms are more memory intensive. 
        Simple is the default but BSP is perhaps the best.
        """
        ...
    
    def SetText(self, p_int):
        """
        V.SetText(int)
        C++: virtual void SetText(vtkTypeBool _arg)
        
        Turn on/off drawing the text.  If on (default) the text is drawn.
        If the FileFormat is set to TeX output then a LaTeX picture is
        generated with the text strings.  If off text output is
        suppressed.
        """
        ...
    
    def SetTextAsPath(self, bool):
        """
        V.SetTextAsPath(bool)
        C++: virtual void SetTextAsPath(bool _arg)
        
        Turn on/off exporting text as path information, rather than
        character data. This is useful for the PDF backend, which does
        not properly support aligned text otherwise. Defaults to Off.
        """
        ...
    
    def SetTitle(self, string):
        """
        V.SetTitle(string)
        C++: virtual void SetTitle(const char *_arg)
        
        Set the title for the output, if supported. If nullptr, "VTK GL2PS
        Export" is used.
        """
        ...
    
    def SetWrite3DPropsAsRasterImage(self, p_int):
        """
        V.SetWrite3DPropsAsRasterImage(int)
        C++: virtual void SetWrite3DPropsAsRasterImage(vtkTypeBool _arg)
        
        Turn on/off writing 3D props as raster images.  2D props are
        rendered using vector graphics primitives.  If you have hi-res
        actors and are using transparency you probably need to turn this
        on.  Defaults to Off. This option has no effect when the OpenGL2
        backend is in use, as all 3D props (excluding vtkTextActor3D) are
        rasterized into the background.
        """
        ...
    
    def SilentOff(self):
        """
        V.SilentOff()
        C++: virtual void SilentOff()
        
        Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
        enabled GL2PS messages are suppressed.  Defaults to off.
        """
        ...
    
    def SilentOn(self):
        """
        V.SilentOn()
        C++: virtual void SilentOn()
        
        Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
        enabled GL2PS messages are suppressed.  Defaults to off.
        """
        ...
    
    def SimpleLineOffsetOff(self):
        """
        V.SimpleLineOffsetOff()
        C++: virtual void SimpleLineOffsetOff()
        
        Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
        small offset is added in the z-buffer to all the lines in the
        plot.  This results in an anti-aliasing like solution.  Defaults
        to on.
        """
        ...
    
    def SimpleLineOffsetOn(self):
        """
        V.SimpleLineOffsetOn()
        C++: virtual void SimpleLineOffsetOn()
        
        Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
        small offset is added in the z-buffer to all the lines in the
        plot.  This results in an anti-aliasing like solution.  Defaults
        to on.
        """
        ...
    
    def TextAsPathOff(self):
        """
        V.TextAsPathOff()
        C++: virtual void TextAsPathOff()
        
        Turn on/off exporting text as path information, rather than
        character data. This is useful for the PDF backend, which does
        not properly support aligned text otherwise. Defaults to Off.
        """
        ...
    
    def TextAsPathOn(self):
        """
        V.TextAsPathOn()
        C++: virtual void TextAsPathOn()
        
        Turn on/off exporting text as path information, rather than
        character data. This is useful for the PDF backend, which does
        not properly support aligned text otherwise. Defaults to Off.
        """
        ...
    
    def TextOff(self):
        """
        V.TextOff()
        C++: virtual void TextOff()
        
        Turn on/off drawing the text.  If on (default) the text is drawn.
        If the FileFormat is set to TeX output then a LaTeX picture is
        generated with the text strings.  If off text output is
        suppressed.
        """
        ...
    
    def TextOn(self):
        """
        V.TextOn()
        C++: virtual void TextOn()
        
        Turn on/off drawing the text.  If on (default) the text is drawn.
        If the FileFormat is set to TeX output then a LaTeX picture is
        generated with the text strings.  If off text output is
        suppressed.
        """
        ...
    
    def UsePainterSettings(self):
        """
        V.UsePainterSettings()
        C++: void UsePainterSettings()
        
        Configure the exporter to expect a painter-ordered 2D rendering,
        that is, a rendering at a fixed depth where primitives are drawn
        from the bottom up. This disables sorting, which will break the
        painter ordering, and turns off the simple line offset, which can
        cause line primitives to be drawn on top of all other geometry.
        """
        ...
    
    def Write3DPropsAsRasterImageOff(self):
        """
        V.Write3DPropsAsRasterImageOff()
        C++: virtual void Write3DPropsAsRasterImageOff()
        
        Turn on/off writing 3D props as raster images.  2D props are
        rendered using vector graphics primitives.  If you have hi-res
        actors and are using transparency you probably need to turn this
        on.  Defaults to Off. This option has no effect when the OpenGL2
        backend is in use, as all 3D props (excluding vtkTextActor3D) are
        rasterized into the background.
        """
        ...
    
    def Write3DPropsAsRasterImageOn(self):
        """
        V.Write3DPropsAsRasterImageOn()
        C++: virtual void Write3DPropsAsRasterImageOn()
        
        Turn on/off writing 3D props as raster images.  2D props are
        rendered using vector graphics primitives.  If you have hi-res
        actors and are using transparency you probably need to turn this
        on.  Defaults to Off. This option has no effect when the OpenGL2
        backend is in use, as all 3D props (excluding vtkTextActor3D) are
        rasterized into the background.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    BSP_SORT = ...
    EPS_FILE = ...
    NO_SORT = ...
    OutputFormat = ...
    PDF_FILE = ...
    PS_FILE = ...
    SIMPLE_SORT = ...
    SortScheme = ...
    SVG_FILE = ...
    TEX_FILE = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkOpenGLGL2PSExporter(vtkGL2PSExporter):
    """
    vtkOpenGLGL2PSExporter - OpenGL2 implementation of GL2PS exporter.
    
    Superclass: vtkGL2PSExporter
    
    Implementation of vtkGL2PSExporter for the OpenGL2 backend.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkOpenGLGL2PSExporter
        C++: vtkOpenGLGL2PSExporter *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkOpenGLGL2PSExporter
        C++: static vtkOpenGLGL2PSExporter *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
