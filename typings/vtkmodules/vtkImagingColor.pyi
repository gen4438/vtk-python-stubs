"""
This type stub file was generated by pyright.
"""

import vtkmodules.vtkCommonExecutionModel as __vtkmodules_vtkCommonExecutionModel
import vtkmodules.vtkImagingCore as __vtkmodules_vtkImagingCore

class vtkImageHSIToRGB(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageHSIToRGB - Converts HSI components to RGB.
    
    Superclass: vtkThreadedImageAlgorithm
    
    For each pixel with hue, saturation and intensity components this
    filter outputs the color coded as red, green, blue.  Output type must
    be the same as input type.
    
    @sa
    vtkImageRGBToHSI
    """
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        
        Hue is an angle. Maximum specifies when it maps back to 0.
        HueMaximum defaults to 255 instead of 2PI, because unsigned char
        is expected as input. Maximum also specifies the maximum of the
        Saturation, and R, G, B.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageHSIToRGB
        C++: vtkImageHSIToRGB *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageHSIToRGB
        C++: static vtkImageHSIToRGB *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        
        Hue is an angle. Maximum specifies when it maps back to 0.
        HueMaximum defaults to 255 instead of 2PI, because unsigned char
        is expected as input. Maximum also specifies the maximum of the
        Saturation, and R, G, B.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageHSVToRGB(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageHSVToRGB - Converts HSV components to RGB.
    
    Superclass: vtkThreadedImageAlgorithm
    
    For each pixel with hue, saturation and value components this filter
    outputs the color coded as red, green, blue.  Output type must be the
    same as input type.
    
    @sa
    vtkImageRGBToHSV
    """
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        
        Hue is an angle. Maximum specifies when it maps back to 0.
        HueMaximum defaults to 255 instead of 2PI, because unsigned char
        is expected as input. Maximum also specifies the maximum of the
        Saturation, and R, G, B.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageHSVToRGB
        C++: vtkImageHSVToRGB *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageHSVToRGB
        C++: static vtkImageHSVToRGB *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        
        Hue is an angle. Maximum specifies when it maps back to 0.
        HueMaximum defaults to 255 instead of 2PI, because unsigned char
        is expected as input. Maximum also specifies the maximum of the
        Saturation, and R, G, B.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageLuminance(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageLuminance - Computes the luminance of the input
    
    Superclass: vtkThreadedImageAlgorithm
    
    vtkImageLuminance calculates luminance from an rgb input.
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageLuminance
        C++: vtkImageLuminance *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageLuminance
        C++: static vtkImageLuminance *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageMapToRGBA(__vtkmodules_vtkImagingCore.vtkImageMapToColors):
    """
    vtkImageMapToRGBA - map the input image through a lookup table
    
    Superclass: vtkImageMapToColors
    
    This filter has been replaced by vtkImageMapToColors, which provided
    additional features.  Use vtkImageMapToColors instead.
    
    @sa
    vtkLookupTable
    """
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMapToRGBA
        C++: vtkImageMapToRGBA *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMapToRGBA
        C++: static vtkImageMapToRGBA *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageMapToWindowLevelColors(__vtkmodules_vtkImagingCore.vtkImageMapToColors):
    """
    vtkImageMapToWindowLevelColors - Map an image through a lookup table
    and/or a window/level.
    
    Superclass: vtkImageMapToColors
    
    The vtkImageMapToWindowLevelColors filter can be used to perform the
    following operations depending on its settings:
    -# If no lookup table is provided, and if the input data has a single
       component (any numerical scalar type is allowed), then the data is
       mapped through the specified Window/Level.  The type of the output
       scalars will be "unsigned char" with a range of (0,255).
    -# If no lookup table is provided, and if the input data is already
       unsigned char, and if the Window/Level is set to 255.0/127.5, then
       the input data will be passed directly to the output.
    -# If a lookup table is provided, then the first component of the
       input data is mapped through the lookup table (using the Range of
       the lookup table), and the resulting color is modulated according
       to the Window/Level.  For example, if the input value is 500 and
       the Window/Level are 2000/1000, the output value will be RGB*0.25
       where RGB is the color assigned by the lookup table and 0.25 is
       the modulation factor. See SetWindow() and SetLevel() for the
       equations used for modulation. To map scalars through a lookup
       table without modulating the resulting color, use
       vtkImageMapToColors instead of this filter.
    @sa
    vtkLookupTable vtkScalarsToColors
    """
    def GetLevel(self):
        """
        V.GetLevel() -> float
        C++: virtual double GetLevel()
        
        Set / Get the Level to use -> modulation will be performed on the
        color based on (S - (L - W/2))/W where S is the scalar value, L
        is the level and W is the window.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetWindow(self):
        """
        V.GetWindow() -> float
        C++: virtual double GetWindow()
        
        Set / Get the Window to use -> modulation will be performed on
        the color based on (S - (L - W/2))/W where S is the scalar value,
        L is the level and W is the window.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageMapToWindowLevelColors
        C++: vtkImageMapToWindowLevelColors *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageMapToWindowLevelColors
        C++: static vtkImageMapToWindowLevelColors *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetLevel(self, p_float):
        """
        V.SetLevel(float)
        C++: virtual void SetLevel(double _arg)
        
        Set / Get the Level to use -> modulation will be performed on the
        color based on (S - (L - W/2))/W where S is the scalar value, L
        is the level and W is the window.
        """
        ...
    
    def SetWindow(self, p_float):
        """
        V.SetWindow(float)
        C++: virtual void SetWindow(double _arg)
        
        Set / Get the Window to use -> modulation will be performed on
        the color based on (S - (L - W/2))/W where S is the scalar value,
        L is the level and W is the window.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageQuantizeRGBToIndex(__vtkmodules_vtkCommonExecutionModel.vtkImageAlgorithm):
    """
    vtkImageQuantizeRGBToIndex - generalized histograms up to 4 dimensions
    
    Superclass: vtkImageAlgorithm
    
    vtkImageQuantizeRGBToIndex takes a 3 component RGB image as input and
    produces a one component index image as output, along with a lookup
    table that contains the color definitions for the index values. This
    filter works on the entire input extent - it does not perform
    streaming, and it does not supported threaded execution (because it
    has to process the entire image).
    
    To use this filter, you typically set the number of colors (between 2
    and 65536), execute it, and then retrieve the lookup table. The
    colors can then be using the lookup table and the image index.
    
    This filter can run faster, by initially sampling the colors at a
    coarser level. This can be specified by the SamplingRate parameter.
    
    The "index-image" viewed as a greyscale image, is usually quite
    arbitrary, accentuating contrast where none can be perceived in the
    original color image. To make the index image more meaningful (e.g.
    for image segmentation operating on scalar images), we sort the mean
    colors by luminance and re-map the indices accordingly. This option
    does not introduce any computational complexity and has no impact on
    actual colors in the lookup table (only their order).
    """
    def GetBuildTreeExecuteTime(self):
        """
        V.GetBuildTreeExecuteTime() -> float
        C++: virtual double GetBuildTreeExecuteTime()
        """
        ...
    
    def GetInitializeExecuteTime(self):
        """
        V.GetInitializeExecuteTime() -> float
        C++: virtual double GetInitializeExecuteTime()
        """
        ...
    
    def GetInputType(self):
        """
        V.GetInputType() -> int
        C++: virtual int GetInputType()
        
        For internal use only - get the type of the image
        """
        ...
    
    def GetLookupIndexExecuteTime(self):
        """
        V.GetLookupIndexExecuteTime() -> float
        C++: virtual double GetLookupIndexExecuteTime()
        """
        ...
    
    def GetLookupTable(self):
        """
        V.GetLookupTable() -> vtkLookupTable
        C++: virtual vtkLookupTable *GetLookupTable()
        
        Get the resulting lookup table that contains the color
        definitions corresponding to the index values in the output
        image.
        """
        ...
    
    def GetNumberOfColors(self):
        """
        V.GetNumberOfColors() -> int
        C++: virtual int GetNumberOfColors()
        
        Set / Get the number of color index values to produce - must be a
        number between 2 and 65536.
        """
        ...
    
    def GetNumberOfColorsMaxValue(self):
        """
        V.GetNumberOfColorsMaxValue() -> int
        C++: virtual int GetNumberOfColorsMaxValue()
        
        Set / Get the number of color index values to produce - must be a
        number between 2 and 65536.
        """
        ...
    
    def GetNumberOfColorsMinValue(self):
        """
        V.GetNumberOfColorsMinValue() -> int
        C++: virtual int GetNumberOfColorsMinValue()
        
        Set / Get the number of color index values to produce - must be a
        number between 2 and 65536.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetSamplingRate(self):
        """
        V.GetSamplingRate() -> (int, int, int)
        C++: virtual int *GetSamplingRate()
        """
        ...
    
    def GetSortIndexByLuminance(self):
        """
        V.GetSortIndexByLuminance() -> bool
        C++: virtual bool GetSortIndexByLuminance()
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageQuantizeRGBToIndex
        C++: vtkImageQuantizeRGBToIndex *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageQuantizeRGBToIndex
        C++: static vtkImageQuantizeRGBToIndex *SafeDownCast(
            vtkObjectBase *o)
        """
        ...
    
    def SetBuildTreeExecuteTime(self, p_float):
        """
        V.SetBuildTreeExecuteTime(float)
        C++: virtual void SetBuildTreeExecuteTime(double _arg)
        
        For internal use only - set the times for execution
        """
        ...
    
    def SetInitializeExecuteTime(self, p_float):
        """
        V.SetInitializeExecuteTime(float)
        C++: virtual void SetInitializeExecuteTime(double _arg)
        
        For internal use only - set the times for execution
        """
        ...
    
    def SetLookupIndexExecuteTime(self, p_float):
        """
        V.SetLookupIndexExecuteTime(float)
        C++: virtual void SetLookupIndexExecuteTime(double _arg)
        
        For internal use only - set the times for execution
        """
        ...
    
    def SetNumberOfColors(self, p_int):
        """
        V.SetNumberOfColors(int)
        C++: virtual void SetNumberOfColors(int _arg)
        
        Set / Get the number of color index values to produce - must be a
        number between 2 and 65536.
        """
        ...
    
    def SetSamplingRate(self, p_int, p_int_1, p_int_2):
        """
        V.SetSamplingRate(int, int, int)
        C++: virtual void SetSamplingRate(int _arg1, int _arg2, int _arg3)
        V.SetSamplingRate((int, int, int))
        C++: virtual void SetSamplingRate(const int _arg[3])
        """
        ...
    
    def SetSortIndexByLuminance(self, bool):
        """
        V.SetSortIndexByLuminance(bool)
        C++: virtual void SetSortIndexByLuminance(bool _arg)
        """
        ...
    
    def SortIndexByLuminanceOff(self):
        """
        V.SortIndexByLuminanceOff()
        C++: virtual void SortIndexByLuminanceOff()
        """
        ...
    
    def SortIndexByLuminanceOn(self):
        """
        V.SortIndexByLuminanceOn()
        C++: virtual void SortIndexByLuminanceOn()
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageRGBToHSI(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageRGBToHSI - Converts RGB components to HSI.
    
    Superclass: vtkThreadedImageAlgorithm
    
    For each pixel with red, blue, and green components this filter
    output the color coded as hue, saturation and intensity. Output type
    must be the same as input type.
    """
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        
        Hue is an angle. Maximum specifies when it maps back to 0. 
        HueMaximum defaults to 255 instead of 2PI, because unsigned char
        is expected as input.  Maximum also specifies the maximum of the
        Saturation.
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageRGBToHSI
        C++: vtkImageRGBToHSI *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageRGBToHSI
        C++: static vtkImageRGBToHSI *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        
        Hue is an angle. Maximum specifies when it maps back to 0. 
        HueMaximum defaults to 255 instead of 2PI, because unsigned char
        is expected as input.  Maximum also specifies the maximum of the
        Saturation.
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageRGBToHSV(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageRGBToHSV - Converts RGB components to HSV.
    
    Superclass: vtkThreadedImageAlgorithm
    
    For each pixel with red, blue, and green components this filter
    output the color coded as hue, saturation and value. Output type must
    be the same as input type.
    """
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageRGBToHSV
        C++: vtkImageRGBToHSV *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageRGBToHSV
        C++: static vtkImageRGBToHSV *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageRGBToYIQ(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageRGBToYIQ - Converts RGB components to YIQ.
    
    Superclass: vtkThreadedImageAlgorithm
    
    For each pixel with red, blue, and green components this filter
    output the color coded as YIQ. Output type must be the same as input
    type.
    """
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageRGBToYIQ
        C++: vtkImageRGBToYIQ *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageRGBToYIQ
        C++: static vtkImageRGBToYIQ *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


class vtkImageYIQToRGB(__vtkmodules_vtkCommonExecutionModel.vtkThreadedImageAlgorithm):
    """
    vtkImageYIQToRGB - no description provided.
    
    Superclass: vtkThreadedImageAlgorithm
    """
    def GetMaximum(self):
        """
        V.GetMaximum() -> float
        C++: virtual double GetMaximum()
        """
        ...
    
    def GetNumberOfGenerationsFromBase(self, string):
        """
        V.GetNumberOfGenerationsFromBase(string) -> int
        C++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)
            override;
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def GetNumberOfGenerationsFromBaseType(self, string):
        """
        V.GetNumberOfGenerationsFromBaseType(string) -> int
        C++: static vtkIdType GetNumberOfGenerationsFromBaseType(
            const char *type)
        
        Given a the name of a base class of this class type, return the
        distance of inheritance between this class type and the named
        class (how many generations of inheritance are there between this
        class and the named class). If the named class is not in this
        class's inheritance tree, return a negative value. Valid
        responses will always be nonnegative. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsA(self, string):
        """
        V.IsA(string) -> int
        C++: vtkTypeBool IsA(const char *type) override;
        
        Return 1 if this class is the same type of (or a subclass of) the
        named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def IsTypeOf(self, string):
        """
        V.IsTypeOf(string) -> int
        C++: static vtkTypeBool IsTypeOf(const char *type)
        
        Return 1 if this class type is the same type of (or a subclass
        of) the named class. Returns 0 otherwise. This method works in
        combination with vtkTypeMacro found in vtkSetGet.h.
        """
        ...
    
    def NewInstance(self):
        """
        V.NewInstance() -> vtkImageYIQToRGB
        C++: vtkImageYIQToRGB *NewInstance()
        """
        ...
    
    def SafeDownCast(self, vtkObjectBase):
        """
        V.SafeDownCast(vtkObjectBase) -> vtkImageYIQToRGB
        C++: static vtkImageYIQToRGB *SafeDownCast(vtkObjectBase *o)
        """
        ...
    
    def SetMaximum(self, p_float):
        """
        V.SetMaximum(float)
        C++: virtual void SetMaximum(double _arg)
        """
        ...
    
    def __delattr__(self, *args, **kwargs):
        """ Implement delattr(self, name). """
        ...
    
    def __getattribute__(self, *args, **kwargs):
        """ Return getattr(self, name). """
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @staticmethod
    def __new__(*args, **kwargs):
        """ Create and return a new object.  See help(type) for accurate signature. """
        ...
    
    def __repr__(self, *args, **kwargs):
        """ Return repr(self). """
        ...
    
    def __setattr__(self, *args, **kwargs):
        """ Implement setattr(self, name, value). """
        ...
    
    def __str__(self, *args, **kwargs) -> str:
        """ Return str(self). """
        ...
    
    __this__ = ...
    __dict__ = ...
    __vtkname__ = ...


__loader__ = ...
__spec__ = ...
